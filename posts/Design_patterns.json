[
    {
        "id": 7,
        "date": "2020-06-18T05:17:00",
        "date_gmt": "2020-06-18T05:17:00",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=7"
        },
        "modified": "2020-06-18T05:17:00",
        "modified_gmt": "2020-06-18T05:17:00",
        "slug": "overview",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.<\/p>\n\n\n\n<h2>What is Gang of Four (GOF)?<\/h2>\n\n\n\n<p>In 1994, four authors Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides published a book titled&nbsp;<strong>Design Patterns &#8211; Elements of Reusable Object-Oriented Software<\/strong>&nbsp;which initiated the concept of Design Pattern in Software development.<\/p>\n\n\n\n<p>These authors are collectively known as&nbsp;<strong>Gang of Four (GOF)<\/strong>. According to these authors design patterns are primarily based on the following principles of object orientated design.<\/p>\n\n\n\n<ul><li>Program to an interface not an implementation<\/li><li>Favor object composition over inheritance<\/li><\/ul>\n\n\n\n<h2>Usage of Design Pattern<\/h2>\n\n\n\n<p>Design Patterns have two main usages in software development.<\/p>\n\n\n\n<h3>Common platform for developers<\/h3>\n\n\n\n<p>Design patterns provide a standard terminology and are specific to particular scenario. For example, a singleton design pattern signifies use of single object so all developers familiar with single design pattern will make use of single object and they can tell each other that program is following a singleton pattern.<\/p>\n\n\n\n<h3>Best Practices<\/h3>\n\n\n\n<p>Design patterns have been evolved over a long period of time and they provide best solutions to certain problems faced during software development. Learning these patterns helps unexperienced developers to learn software design in an easy and faster way.<\/p>\n\n\n\n<h2>Types of Design Patterns<\/h2>\n\n\n\n<p>As per the design pattern reference book&nbsp;<strong>Design Patterns &#8211; Elements of Reusable Object-Oriented Software<\/strong>&nbsp;, there are 23 design patterns which can be classified in three categories: Creational, Structural and Behavioral patterns. We&#8217;ll also discuss another category of design pattern: J2EE design patterns.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.N.<\/th><th>Pattern &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Creational Patterns<\/strong><br>These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new operator. This gives program more flexibility in deciding which objects need to be created for a given use case.<\/td><\/tr><tr><td>2<\/td><td><strong>Structural Patterns<\/strong><br>These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.<\/td><\/tr><tr><td>3<\/td><td><strong>Behavioral Patterns<\/strong><br>These design patterns are specifically concerned with communication between objects.<\/td><\/tr><tr><td>4<\/td><td><strong>J2EE Patterns<\/strong><br>These design patterns are specifically concerned with the presentation tier. These patterns are identified by Sun Java Center.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time. What is Gang of Four (GOF)? In 1994, four authors [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/7"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=7"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/7\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 8,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/7\/revisions\/8"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=7"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=7"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=7"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 9,
        "date": "2020-06-18T05:19:53",
        "date_gmt": "2020-06-18T05:19:53",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=9"
        },
        "modified": "2020-06-18T05:20:00",
        "modified_gmt": "2020-06-18T05:20:00",
        "slug": "factory-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/factory-pattern\/",
        "title": {
            "rendered": "Factory Pattern"
        },
        "content": {
            "rendered": "\n<p>Factory pattern is one of the most used design patterns in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.<\/p>\n\n\n\n<p>In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We&#8217;re going to create a&nbsp;<em>Shape<\/em>&nbsp;interface and concrete classes implementing the&nbsp;<em>Shape<\/em>&nbsp;interface. A factory class&nbsp;<em>ShapeFactory<\/em>&nbsp;is defined as a next step.<\/p>\n\n\n\n<p><em>FactoryPatternDemo<\/em>, our demo class will use&nbsp;<em>ShapeFactory<\/em>&nbsp;to get a&nbsp;<em>Shape<\/em>&nbsp;object. It will pass information (<em>CIRCLE \/ RECTANGLE \/ SQUARE<\/em>) to&nbsp;<em>ShapeFactory<\/em>&nbsp;to get the type of object it needs.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/factory_pattern_uml_diagram.jpg\" alt=\"Factory Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface.<\/p>\n\n\n\n<p><em>Shape.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Shape {\n   void draw();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the same interface.<\/p>\n\n\n\n<p><em>Rectangle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Rectangle implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println(\"Inside Rectangle::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Square.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Square implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println(\"Inside Square::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Circle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Circle implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println(\"Inside Circle::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create a Factory to generate object of concrete class based on given information.<\/p>\n\n\n\n<p><em>ShapeFactory.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ShapeFactory {\n\t\n   \/\/use getShape method to get object of type shape \n   public Shape getShape(String shapeType){\n      if(shapeType == null){\n         return null;\n      }\t\t\n      if(shapeType.equalsIgnoreCase(\"CIRCLE\")){\n         return new Circle();\n         \n      } else if(shapeType.equalsIgnoreCase(\"RECTANGLE\")){\n         return new Rectangle();\n         \n      } else if(shapeType.equalsIgnoreCase(\"SQUARE\")){\n         return new Square();\n      }\n      \n      return null;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the Factory to get object of concrete class by passing an information such as type.<\/p>\n\n\n\n<p><em>FactoryPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FactoryPatternDemo {\n\n   public static void main(String&#91;] args) {\n      ShapeFactory shapeFactory = new ShapeFactory();\n\n      \/\/get an object of Circle and call its draw method.\n      Shape shape1 = shapeFactory.getShape(\"CIRCLE\");\n\n      \/\/call draw method of Circle\n      shape1.draw();\n\n      \/\/get an object of Rectangle and call its draw method.\n      Shape shape2 = shapeFactory.getShape(\"RECTANGLE\");\n\n      \/\/call draw method of Rectangle\n      shape2.draw();\n\n      \/\/get an object of Square and call its draw method.\n      Shape shape3 = shapeFactory.getShape(\"SQUARE\");\n\n      \/\/call draw method of square\n      shape3.draw();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside Circle::draw() method.\nInside Rectangle::draw() method.\nInside Square::draw() method.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Factory pattern is one of the most used design patterns in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/9"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=9"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/9\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 14,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/9\/revisions\/14"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=9"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=9"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=9"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 15,
        "date": "2020-06-18T05:24:11",
        "date_gmt": "2020-06-18T05:24:11",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=15"
        },
        "modified": "2020-06-18T05:24:11",
        "modified_gmt": "2020-06-18T05:24:11",
        "slug": "abstract-factory-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/abstract-factory-pattern\/",
        "title": {
            "rendered": "Abstract Factory Pattern"
        },
        "content": {
            "rendered": "\n<p>Abstract Factory patterns work around a super-factory which creates other factories. This factory is also called as factory of factories. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.<\/p>\n\n\n\n<p>In Abstract Factory pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes. Each generated factory can give the objects as per the Factory pattern.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a Shape interface and a concrete class implementing it. We create an abstract factory class AbstractFactory as next step. Factory class ShapeFactory is defined, which extends AbstractFactory. A factory creator\/generator class FactoryProducer is created.<\/p>\n\n\n\n<p>AbstractFactoryPatternDemo, our demo class uses FactoryProducer to get a AbstractFactory object. It will pass information (CIRCLE \/ RECTANGLE \/ SQUARE for Shape) to AbstractFactory to get the type of object it needs.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/abstractfactory_pattern_uml_diagram.jpg\" alt=\"Abstract Factory Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface for Shapes.<\/p>\n\n\n\n<p><em>Shape.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Shape {\n   void draw();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the same interface.<\/p>\n\n\n\n<p><em>RoundedRectangle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RoundedRectangle implements Shape {\n   @Override\n   public void draw() {\n      System.out.println(\"Inside RoundedRectangle::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>RoundedSquare.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RoundedSquare implements Shape {\n   @Override\n   public void draw() {\n      System.out.println(\"Inside RoundedSquare::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Rectangle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Rectangle implements Shape {\n   @Override\n   public void draw() {\n      System.out.println(\"Inside Rectangle::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create an Abstract class to get factories for Normal and Rounded Shape Objects.<\/p>\n\n\n\n<p><em>AbstractFactory.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class AbstractFactory {\n   abstract Shape getShape(String shapeType) ;\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create Factory classes extending AbstractFactory to generate object of concrete class based on given information.<\/p>\n\n\n\n<p><em>ShapeFactory.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ShapeFactory extends AbstractFactory {\n   @Override\n   public Shape getShape(String shapeType){    \n      if(shapeType.equalsIgnoreCase(\"RECTANGLE\")){\n         return new Rectangle();         \n      }else if(shapeType.equalsIgnoreCase(\"SQUARE\")){\n         return new Square();\n      }\t \n      return null;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>RoundedShapeFactory.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RoundedShapeFactory extends AbstractFactory {\n   @Override\n   public Shape getShape(String shapeType){    \n      if(shapeType.equalsIgnoreCase(\"RECTANGLE\")){\n         return new RoundedRectangle();         \n      }else if(shapeType.equalsIgnoreCase(\"SQUARE\")){\n         return new RoundedSquare();\n      }\t \n      return null;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Create a Factory generator\/producer class to get factories by passing an information such as Shape<\/p>\n\n\n\n<p><em>FactoryProducer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FactoryProducer {\n   public static AbstractFactory getFactory(boolean rounded){   \n      if(rounded){\n         return new RoundedShapeFactory();         \n      }else{\n         return new ShapeFactory();\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Use the FactoryProducer to get AbstractFactory in order to get factories of concrete classes by passing an information such as type.<\/p>\n\n\n\n<p><em>AbstractFactoryPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class AbstractFactoryPatternDemo {\n   public static void main(String&#91;] args) {\n      \/\/get shape factory\n      AbstractFactory shapeFactory = FactoryProducer.getFactory(false);\n      \/\/get an object of Shape Rectangle\n      Shape shape1 = shapeFactory.getShape(\"RECTANGLE\");\n      \/\/call draw method of Shape Rectangle\n      shape1.draw();\n      \/\/get an object of Shape Square \n      Shape shape2 = shapeFactory.getShape(\"SQUARE\");\n      \/\/call draw method of Shape Square\n      shape2.draw();\n      \/\/get shape factory\n      AbstractFactory shapeFactory1 = FactoryProducer.getFactory(true);\n      \/\/get an object of Shape Rectangle\n      Shape shape3 = shapeFactory1.getShape(\"RECTANGLE\");\n      \/\/call draw method of Shape Rectangle\n      shape3.draw();\n      \/\/get an object of Shape Square \n      Shape shape4 = shapeFactory1.getShape(\"SQUARE\");\n      \/\/call draw method of Shape Square\n      shape4.draw();\n      \n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 7<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside Rectangle::draw() method.\nInside Square::draw() method.\nInside RoundedRectangle::draw() method.\nInside RoundedSquare::draw() method.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Abstract Factory patterns work around a super-factory which creates other factories. This factory is also called as factory of factories. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. In Abstract Factory pattern an interface is responsible for creating a factory of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/15"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=15"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/15\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 16,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/15\/revisions\/16"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=15"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=15"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=15"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 17,
        "date": "2020-06-18T05:26:38",
        "date_gmt": "2020-06-18T05:26:38",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=17"
        },
        "modified": "2020-06-18T05:26:38",
        "modified_gmt": "2020-06-18T05:26:38",
        "slug": "singleton-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/singleton-pattern\/",
        "title": {
            "rendered": "Singleton Pattern"
        },
        "content": {
            "rendered": "\n<p>Singleton pattern is one of the simplest design patterns in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.<\/p>\n\n\n\n<p>This pattern involves a single class which is responsible to create an object while making sure that only single object gets created. This class provides a way to access its only object which can be accessed directly without need to instantiate the object of the class.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We&#8217;re going to create a&nbsp;<em>SingleObject<\/em>&nbsp;class.&nbsp;<em>SingleObject<\/em>&nbsp;class have its constructor as private and have a static instance of itself.<\/p>\n\n\n\n<p><em>SingleObject<\/em>&nbsp;class provides a static method to get its static instance to outside world.&nbsp;<em>SingletonPatternDemo<\/em>, our demo class will use&nbsp;<em>SingleObject<\/em>&nbsp;class to get a&nbsp;<em>SingleObject<\/em>&nbsp;object.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/singleton_pattern_uml_diagram.jpg\" alt=\"Singleton Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create a Singleton Class.<\/p>\n\n\n\n<p><em>SingleObject.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SingleObject {\n\n   \/\/create an object of SingleObject\n   private static SingleObject instance = new SingleObject();\n\n   \/\/make the constructor private so that this class cannot be\n   \/\/instantiated\n   private SingleObject(){}\n\n   \/\/Get the only object available\n   public static SingleObject getInstance(){\n      return instance;\n   }\n\n   public void showMessage(){\n      System.out.println(\"Hello World!\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Get the only object from the singleton class.<\/p>\n\n\n\n<p><em>SingletonPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SingletonPatternDemo {\n   public static void main(String&#91;] args) {\n\n      \/\/illegal construct\n      \/\/Compile Time Error: The constructor SingleObject() is not visible\n      \/\/SingleObject object = new SingleObject();\n\n      \/\/Get the only object available\n      SingleObject object = SingleObject.getInstance();\n\n      \/\/show the message\n      object.showMessage();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World!<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Singleton pattern is one of the simplest design patterns in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. This pattern involves a single class which is responsible to create an object while making sure that only single object gets created. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/17"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=17"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/17\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 18,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/17\/revisions\/18"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=17"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=17"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=17"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 19,
        "date": "2020-06-18T05:32:30",
        "date_gmt": "2020-06-18T05:32:30",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=19"
        },
        "modified": "2020-06-18T05:32:30",
        "modified_gmt": "2020-06-18T05:32:30",
        "slug": "builder-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/builder-pattern\/",
        "title": {
            "rendered": "Builder Pattern"
        },
        "content": {
            "rendered": "\n<p>Builder pattern builds a complex object using simple objects and using a step by step approach. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.<\/p>\n\n\n\n<p>A Builder class builds the final object step by step. This builder is independent of other objects.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We have considered a business case of fast-food restaurant where a typical meal could be a burger and a cold drink. Burger could be either a Veg Burger or Chicken Burger and will be packed by a wrapper. Cold drink could be either a coke or pepsi and will be packed in a bottle.<\/p>\n\n\n\n<p>We are going to create an&nbsp;<em>Item<\/em>&nbsp;interface representing food items such as burgers and cold drinks and concrete classes implementing the&nbsp;<em>Item<\/em>&nbsp;interface and a&nbsp;<em>Packing<\/em>&nbsp;interface representing packaging of food items and concrete classes implementing the&nbsp;<em>Packing<\/em>&nbsp;interface as burger would be packed in wrapper and cold drink would be packed as bottle.<\/p>\n\n\n\n<p>We then create a&nbsp;<em>Meal<\/em>&nbsp;class having&nbsp;<em>ArrayList<\/em>&nbsp;of&nbsp;<em>Item<\/em>&nbsp;and a&nbsp;<em>MealBuilder<\/em>&nbsp;to build different types of&nbsp;<em>Meal<\/em>&nbsp;objects by combining&nbsp;<em>Item<\/em>.&nbsp;<em>BuilderPatternDemo<\/em>, our demo class will use&nbsp;<em>MealBuilder<\/em>&nbsp;to build a&nbsp;<em>Meal<\/em>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/builder_pattern_uml_diagram.jpg\" alt=\"Builder Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface Item representing food item and packing.<\/p>\n\n\n\n<p><em>Item.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Item {\n   public String name();\n   public Packing packing();\n   public float price();\t\n}<\/code><\/pre>\n\n\n\n<p><em>Packing.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Packing {\n   public String pack();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the Packing interface.<\/p>\n\n\n\n<p><em>Wrapper.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Wrapper implements Packing {\n\n   @Override\n   public String pack() {\n      return \"Wrapper\";\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Bottle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Bottle implements Packing {\n\n   @Override\n   public String pack() {\n      return \"Bottle\";\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create abstract classes implementing the item interface providing default functionalities.<\/p>\n\n\n\n<p><em>Burger.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class Burger implements Item {\n\n   @Override\n   public Packing packing() {\n      return new Wrapper();\n   }\n\n   @Override\n   public abstract float price();\n}<\/code><\/pre>\n\n\n\n<p><em>ColdDrink.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class ColdDrink implements Item {\n\n\t@Override\n\tpublic Packing packing() {\n       return new Bottle();\n\t}\n\n\t@Override\n\tpublic abstract float price();\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create concrete classes extending Burger and ColdDrink classes<\/p>\n\n\n\n<p><em>VegBurger.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class VegBurger extends Burger {\n\n   @Override\n   public float price() {\n      return 25.0f;\n   }\n\n   @Override\n   public String name() {\n      return \"Veg Burger\";\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>ChickenBurger.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ChickenBurger extends Burger {\n\n   @Override\n   public float price() {\n      return 50.5f;\n   }\n\n   @Override\n   public String name() {\n      return \"Chicken Burger\";\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Coke.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Coke extends ColdDrink {\n\n   @Override\n   public float price() {\n      return 30.0f;\n   }\n\n   @Override\n   public String name() {\n      return \"Coke\";\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Pepsi.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Pepsi extends ColdDrink {\n\n   @Override\n   public float price() {\n      return 35.0f;\n   }\n\n   @Override\n   public String name() {\n      return \"Pepsi\";\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Create a Meal class having Item objects defined above.<\/p>\n\n\n\n<p><em>Meal.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class Meal {\n   private List&lt;Item> items = new ArrayList&lt;Item>();\t\n\n   public void addItem(Item item){\n      items.add(item);\n   }\n\n   public float getCost(){\n      float cost = 0.0f;\n      \n      for (Item item : items) {\n         cost += item.price();\n      }\t\t\n      return cost;\n   }\n\n   public void showItems(){\n   \n      for (Item item : items) {\n         System.out.print(\"Item : \" + item.name());\n         System.out.print(\", Packing : \" + item.packing().pack());\n         System.out.println(\", Price : \" + item.price());\n      }\t\t\n   }\t\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Create a MealBuilder class, the actual builder class responsible to create Meal objects.<\/p>\n\n\n\n<p><em>MealBuilder.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MealBuilder {\n\n   public Meal prepareVegMeal (){\n      Meal meal = new Meal();\n      meal.addItem(new VegBurger());\n      meal.addItem(new Coke());\n      return meal;\n   }   \n\n   public Meal prepareNonVegMeal (){\n      Meal meal = new Meal();\n      meal.addItem(new ChickenBurger());\n      meal.addItem(new Pepsi());\n      return meal;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 7<\/h2>\n\n\n\n<p>BuiderPatternDemo uses MealBuider to demonstrate builder pattern.<\/p>\n\n\n\n<p><em>BuilderPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class BuilderPatternDemo {\n   public static void main(String&#91;] args) {\n   \n      MealBuilder mealBuilder = new MealBuilder();\n\n      Meal vegMeal = mealBuilder.prepareVegMeal();\n      System.out.println(\"Veg Meal\");\n      vegMeal.showItems();\n      System.out.println(\"Total Cost: \" + vegMeal.getCost());\n\n      Meal nonVegMeal = mealBuilder.prepareNonVegMeal();\n      System.out.println(\"\\n\\nNon-Veg Meal\");\n      nonVegMeal.showItems();\n      System.out.println(\"Total Cost: \" + nonVegMeal.getCost());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 8<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Veg Meal\nItem : Veg Burger, Packing : Wrapper, Price : 25.0\nItem : Coke, Packing : Bottle, Price : 30.0\nTotal Cost: 55.0\n\n\nNon-Veg Meal\nItem : Chicken Burger, Packing : Wrapper, Price : 50.5\nItem : Pepsi, Packing : Bottle, Price : 35.0\nTotal Cost: 85.5<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Builder pattern builds a complex object using simple objects and using a step by step approach. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. A Builder class builds the final object step by step. This builder is independent of other objects. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/19"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=19"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/19\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 20,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/19\/revisions\/20"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=19"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=19"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=19"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 21,
        "date": "2020-06-18T05:35:30",
        "date_gmt": "2020-06-18T05:35:30",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=21"
        },
        "modified": "2020-06-18T05:35:30",
        "modified_gmt": "2020-06-18T05:35:30",
        "slug": "prototype-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/prototype-pattern\/",
        "title": {
            "rendered": "Prototype Pattern"
        },
        "content": {
            "rendered": "\n<p>Prototype pattern refers to creating duplicate object while keeping performance in mind. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.<\/p>\n\n\n\n<p>This pattern involves implementing a prototype interface which tells to create a clone of the current object. This pattern is used when creation of object directly is costly. For example, an object is to be created after a costly database operation. We can cache the object, returns its clone on next request and update the database as and when needed thus reducing database calls.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We&#8217;re going to create an abstract class&nbsp;<em>Shape<\/em>&nbsp;and concrete classes extending the&nbsp;<em>Shape<\/em>&nbsp;class. A class&nbsp;<em>ShapeCache<\/em>&nbsp;is defined as a next step which stores shape objects in a&nbsp;<em>Hashtable<\/em>&nbsp;and returns their clone when requested.<\/p>\n\n\n\n<p><em>PrototypPatternDemo<\/em>, our demo class will use&nbsp;<em>ShapeCache<\/em>&nbsp;class to get a&nbsp;<em>Shape<\/em>&nbsp;object.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/prototype_pattern_uml_diagram.jpg\" alt=\"Prototype Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an abstract class implementing&nbsp;<em>Clonable<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>Shape.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class Shape implements Cloneable {\n   \n   private String id;\n   protected String type;\n   \n   abstract void draw();\n   \n   public String getType(){\n      return type;\n   }\n   \n   public String getId() {\n      return id;\n   }\n   \n   public void setId(String id) {\n      this.id = id;\n   }\n   \n   public Object clone() {\n      Object clone = null;\n      \n      try {\n         clone = super.clone();\n         \n      } catch (CloneNotSupportedException e) {\n         e.printStackTrace();\n      }\n      \n      return clone;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes extending the above class.<\/p>\n\n\n\n<p><em>Rectangle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Rectangle extends Shape {\n\n   public Rectangle(){\n     type = \"Rectangle\";\n   }\n\n   @Override\n   public void draw() {\n      System.out.println(\"Inside Rectangle::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Square.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Square extends Shape {\n\n   public Square(){\n     type = \"Square\";\n   }\n\n   @Override\n   public void draw() {\n      System.out.println(\"Inside Square::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Circle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Circle extends Shape {\n\n   public Circle(){\n     type = \"Circle\";\n   }\n\n   @Override\n   public void draw() {\n      System.out.println(\"Inside Circle::draw() method.\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create a class to get concrete classes from database and store them in a&nbsp;<em>Hashtable<\/em>.<\/p>\n\n\n\n<p><em>ShapeCache.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Hashtable;\n\npublic class ShapeCache {\n\t\n   private static Hashtable&lt;String, Shape> shapeMap  = new Hashtable&lt;String, Shape>();\n\n   public static Shape getShape(String shapeId) {\n      Shape cachedShape = shapeMap.get(shapeId);\n      return (Shape) cachedShape.clone();\n   }\n\n   \/\/ for each shape run database query and create shape\n   \/\/ shapeMap.put(shapeKey, shape);\n   \/\/ for example, we are adding three shapes\n   \n   public static void loadCache() {\n      Circle circle = new Circle();\n      circle.setId(\"1\");\n      shapeMap.put(circle.getId(),circle);\n\n      Square square = new Square();\n      square.setId(\"2\");\n      shapeMap.put(square.getId(),square);\n\n      Rectangle rectangle = new Rectangle();\n      rectangle.setId(\"3\");\n      shapeMap.put(rectangle.getId(), rectangle);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p><em>PrototypePatternDemo<\/em>&nbsp;uses&nbsp;<em>ShapeCache<\/em>&nbsp;class to get clones of shapes stored in a&nbsp;<em>Hashtable<\/em>.<\/p>\n\n\n\n<p><em>PrototypePatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PrototypePatternDemo {\n   public static void main(String&#91;] args) {\n      ShapeCache.loadCache();\n\n      Shape clonedShape = (Shape) ShapeCache.getShape(\"1\");\n      System.out.println(\"Shape : \" + clonedShape.getType());\t\t\n\n      Shape clonedShape2 = (Shape) ShapeCache.getShape(\"2\");\n      System.out.println(\"Shape : \" + clonedShape2.getType());\t\t\n\n      Shape clonedShape3 = (Shape) ShapeCache.getShape(\"3\");\n      System.out.println(\"Shape : \" + clonedShape3.getType());\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Shape : Circle\nShape : Square\nShape : Rectangle<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Prototype pattern refers to creating duplicate object while keeping performance in mind. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. This pattern involves implementing a prototype interface which tells to create a clone of the current object. This pattern is used [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/21"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=21"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/21\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 22,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/21\/revisions\/22"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=21"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=21"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=21"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 23,
        "date": "2020-06-18T05:38:15",
        "date_gmt": "2020-06-18T05:38:15",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=23"
        },
        "modified": "2020-06-18T05:38:15",
        "modified_gmt": "2020-06-18T05:38:15",
        "slug": "adapter-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/adapter-pattern\/",
        "title": {
            "rendered": "Adapter Pattern"
        },
        "content": {
            "rendered": "\n<p>Adapter pattern works as a bridge between two incompatible interfaces. This type of design pattern comes under structural pattern as this pattern combines the capability of two independent interfaces.<\/p>\n\n\n\n<p>This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. A real life example could be a case of card reader which acts as an adapter between memory card and a laptop. You plugin the memory card into card reader and card reader into the laptop so that memory card can be read via laptop.<\/p>\n\n\n\n<p>We are demonstrating use of Adapter pattern via following example in which an audio player device can play mp3 files only and wants to use an advanced audio player capable of playing vlc and mp4 files.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We have a&nbsp;<em>MediaPlayer<\/em>&nbsp;interface and a concrete class&nbsp;<em>AudioPlayer<\/em>&nbsp;implementing the&nbsp;<em>MediaPlayer<\/em>&nbsp;interface.&nbsp;<em>AudioPlayer<\/em>&nbsp;can play mp3 format audio files by default.<\/p>\n\n\n\n<p>We are having another interface&nbsp;<em>AdvancedMediaPlayer<\/em>&nbsp;and concrete classes implementing the&nbsp;<em>AdvancedMediaPlayer<\/em>&nbsp;interface. These classes can play vlc and mp4 format files.<\/p>\n\n\n\n<p>We want to make&nbsp;<em>AudioPlayer<\/em>&nbsp;to play other formats as well. To attain this, we have created an adapter class&nbsp;<em>MediaAdapter<\/em>&nbsp;which implements the&nbsp;<em>MediaPlayer<\/em>&nbsp;interface and uses&nbsp;<em>AdvancedMediaPlayer<\/em>&nbsp;objects to play the required format.<\/p>\n\n\n\n<p><em>AudioPlayer<\/em>&nbsp;uses the adapter class&nbsp;<em>MediaAdapter<\/em>&nbsp;passing it the desired audio type without knowing the actual class which can play the desired format.&nbsp;<em>AdapterPatternDemo<\/em>, our demo class will use&nbsp;<em>AudioPlayer<\/em>&nbsp;class to play various formats.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/adapter_pattern_uml_diagram.jpg\" alt=\"Adapter Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create interfaces for Media Player and Advanced Media Player.<\/p>\n\n\n\n<p><em>MediaPlayer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface MediaPlayer {\n   public void play(String audioType, String fileName);\n}<\/code><\/pre>\n\n\n\n<p><em>AdvancedMediaPlayer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface AdvancedMediaPlayer {\t\n   public void playVlc(String fileName);\n   public void playMp4(String fileName);\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the&nbsp;<em>AdvancedMediaPlayer<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>VlcPlayer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class VlcPlayer implements AdvancedMediaPlayer{\n   @Override\n   public void playVlc(String fileName) {\n      System.out.println(\"Playing vlc file. Name: \"+ fileName);\t\t\n   }\n\n   @Override\n   public void playMp4(String fileName) {\n      \/\/do nothing\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Mp4Player.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Mp4Player implements AdvancedMediaPlayer{\n\n   @Override\n   public void playVlc(String fileName) {\n      \/\/do nothing\n   }\n\n   @Override\n   public void playMp4(String fileName) {\n      System.out.println(\"Playing mp4 file. Name: \"+ fileName);\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create adapter class implementing the&nbsp;<em>MediaPlayer<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>MediaAdapter.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MediaAdapter implements MediaPlayer {\n\n   AdvancedMediaPlayer advancedMusicPlayer;\n\n   public MediaAdapter(String audioType){\n   \n      if(audioType.equalsIgnoreCase(\"vlc\") ){\n         advancedMusicPlayer = new VlcPlayer();\t\t\t\n         \n      }else if (audioType.equalsIgnoreCase(\"mp4\")){\n         advancedMusicPlayer = new Mp4Player();\n      }\t\n   }\n\n   @Override\n   public void play(String audioType, String fileName) {\n   \n      if(audioType.equalsIgnoreCase(\"vlc\")){\n         advancedMusicPlayer.playVlc(fileName);\n      }\n      else if(audioType.equalsIgnoreCase(\"mp4\")){\n         advancedMusicPlayer.playMp4(fileName);\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create concrete class implementing the&nbsp;<em>MediaPlayer<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>AudioPlayer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class AudioPlayer implements MediaPlayer {\n   MediaAdapter mediaAdapter; \n\n   @Override\n   public void play(String audioType, String fileName) {\t\t\n\n      \/\/inbuilt support to play mp3 music files\n      if(audioType.equalsIgnoreCase(\"mp3\")){\n         System.out.println(\"Playing mp3 file. Name: \" + fileName);\t\t\t\n      } \n      \n      \/\/mediaAdapter is providing support to play other file formats\n      else if(audioType.equalsIgnoreCase(\"vlc\") || audioType.equalsIgnoreCase(\"mp4\")){\n         mediaAdapter = new MediaAdapter(audioType);\n         mediaAdapter.play(audioType, fileName);\n      }\n      \n      else{\n         System.out.println(\"Invalid media. \" + audioType + \" format not supported\");\n      }\n   }   \n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Use the AudioPlayer to play different types of audio formats.<\/p>\n\n\n\n<p><em>AdapterPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class AdapterPatternDemo {\n   public static void main(String&#91;] args) {\n      AudioPlayer audioPlayer = new AudioPlayer();\n\n      audioPlayer.play(\"mp3\", \"beyond the horizon.mp3\");\n      audioPlayer.play(\"mp4\", \"alone.mp4\");\n      audioPlayer.play(\"vlc\", \"far far away.vlc\");\n      audioPlayer.play(\"avi\", \"mind me.avi\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Playing mp3 file. Name: beyond the horizon.mp3\nPlaying mp4 file. Name: alone.mp4\nPlaying vlc file. Name: far far away.vlc\nInvalid media. avi format not supported<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Adapter pattern works as a bridge between two incompatible interfaces. This type of design pattern comes under structural pattern as this pattern combines the capability of two independent interfaces. This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. A real life example could be a case of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/23"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=23"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/23\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 24,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/23\/revisions\/24"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=23"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=23"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=23"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 25,
        "date": "2020-06-18T05:41:43",
        "date_gmt": "2020-06-18T05:41:43",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=25"
        },
        "modified": "2020-06-18T05:41:43",
        "modified_gmt": "2020-06-18T05:41:43",
        "slug": "bridge-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/bridge-pattern\/",
        "title": {
            "rendered": "Bridge Pattern"
        },
        "content": {
            "rendered": "\n<p>Bridge is used when we need to decouple an abstraction from its implementation so that the two can vary independently. This type of design pattern comes under structural pattern as this pattern decouples implementation class and abstract class by providing a bridge structure between them.<\/p>\n\n\n\n<p>This pattern involves an interface which acts as a bridge which makes the functionality of concrete classes independent from interface implementer classes. Both types of classes can be altered structurally without affecting each other.<\/p>\n\n\n\n<p>We are demonstrating use of Bridge pattern via following example in which a circle can be drawn in different colors using same abstract class method but different bridge implementer classes.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We have a&nbsp;<em>DrawAPI<\/em>&nbsp;interface which is acting as a bridge implementer and concrete classes&nbsp;<em>RedCircle<\/em>,&nbsp;<em>GreenCircle<\/em>&nbsp;implementing the&nbsp;<em>DrawAPI<\/em>&nbsp;interface.&nbsp;<em>Shape<\/em>&nbsp;is an abstract class and will use object of&nbsp;<em>DrawAPI<\/em>.&nbsp;<em>BridgePatternDemo<\/em>, our demo class will use&nbsp;<em>Shape<\/em>&nbsp;class to draw different colored circle.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/bridge_pattern_uml_diagram.jpg\" alt=\"Bridge Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create bridge implementer interface.<\/p>\n\n\n\n<p><em>DrawAPI.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface DrawAPI {\n   public void drawCircle(int radius, int x, int y);\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete bridge implementer classes implementing the&nbsp;<em>DrawAPI<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>RedCircle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RedCircle implements DrawAPI {\n   @Override\n   public void drawCircle(int radius, int x, int y) {\n      System.out.println(\"Drawing Circle&#91; color: red, radius: \" + radius + \", x: \" + x + \", \" + y + \"]\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>GreenCircle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class GreenCircle implements DrawAPI {\n   @Override\n   public void drawCircle(int radius, int x, int y) {\n      System.out.println(\"Drawing Circle&#91; color: green, radius: \" + radius + \", x: \" + x + \", \" + y + \"]\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create an abstract class&nbsp;<em>Shape<\/em>&nbsp;using the&nbsp;<em>DrawAPI<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>Shape.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class Shape {\n   protected DrawAPI drawAPI;\n   \n   protected Shape(DrawAPI drawAPI){\n      this.drawAPI = drawAPI;\n   }\n   public abstract void draw();\t\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create concrete class implementing the&nbsp;<em>Shape<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>Circle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Circle extends Shape {\n   private int x, y, radius;\n\n   public Circle(int x, int y, int radius, DrawAPI drawAPI) {\n      super(drawAPI);\n      this.x = x;  \n      this.y = y;  \n      this.radius = radius;\n   }\n\n   public void draw() {\n      drawAPI.drawCircle(radius,x,y);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Use the&nbsp;<em>Shape<\/em>&nbsp;and&nbsp;<em>DrawAPI<\/em>&nbsp;classes to draw different colored circles.<\/p>\n\n\n\n<p><em>BridgePatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class BridgePatternDemo {\n   public static void main(String&#91;] args) {\n      Shape redCircle = new Circle(100,100, 10, new RedCircle());\n      Shape greenCircle = new Circle(100,100, 10, new GreenCircle());\n\n      redCircle.draw();\n      greenCircle.draw();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Drawing Circle&#91; color: red, radius: 10, x: 100, 100]\nDrawing Circle&#91;  color: green, radius: 10, x: 100, 100]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Bridge is used when we need to decouple an abstraction from its implementation so that the two can vary independently. This type of design pattern comes under structural pattern as this pattern decouples implementation class and abstract class by providing a bridge structure between them. This pattern involves an interface which acts as a bridge [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/25"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=25"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/25\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 26,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/25\/revisions\/26"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=25"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=25"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=25"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 27,
        "date": "2020-06-18T05:49:44",
        "date_gmt": "2020-06-18T05:49:44",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=27"
        },
        "modified": "2020-06-18T05:49:44",
        "modified_gmt": "2020-06-18T05:49:44",
        "slug": "filter-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filter-pattern\/",
        "title": {
            "rendered": "Filter Pattern"
        },
        "content": {
            "rendered": "\n<p>Filter pattern or Criteria pattern is a design pattern that enables developers to filter a set of objects using different criteria and chaining them in a decoupled way through logical operations. This type of design pattern comes under structural pattern as this pattern combines multiple criteria to obtain single criteria.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We&#8217;re going to create a&nbsp;<em>Person<\/em>&nbsp;object,&nbsp;<em>Criteria<\/em>&nbsp;interface and concrete classes implementing this interface to filter list of&nbsp;<em>Person<\/em>&nbsp;objects.&nbsp;<em>CriteriaPatternDemo<\/em>, our demo class uses&nbsp;<em>Criteria<\/em>&nbsp;objects to filter List of&nbsp;<em>Person<\/em>&nbsp;objects based on various criteria and their combinations.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/filter_pattern_uml_diagram.jpg\" alt=\"Filter Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create a class on which criteria is to be applied.<\/p>\n\n\n\n<p><em>Person.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Person {\n\t\n   private String name;\n   private String gender;\n   private String maritalStatus;\n\n   public Person(String name, String gender, String maritalStatus){\n      this.name = name;\n      this.gender = gender;\n      this.maritalStatus = maritalStatus;\t\t\n   }\n\n   public String getName() {\n      return name;\n   }\n   public String getGender() {\n      return gender;\n   }\n   public String getMaritalStatus() {\n      return maritalStatus;\n   }\t\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create an interface for Criteria.<\/p>\n\n\n\n<p><em>Criteria.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.List;\n\npublic interface Criteria {\n   public List&lt;Person> meetCriteria(List&lt;Person> persons);\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create concrete classes implementing the&nbsp;<em>Criteria<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>CriteriaMale.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaMale implements Criteria {\n\n   @Override\n   public List&lt;Person> meetCriteria(List&lt;Person> persons) {\n      List&lt;Person> malePersons = new ArrayList&lt;Person>(); \n      \n      for (Person person : persons) {\n         if(person.getGender().equalsIgnoreCase(\"MALE\")){\n            malePersons.add(person);\n         }\n      }\n      return malePersons;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>CriteriaFemale.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaFemale implements Criteria {\n\n   @Override\n   public List&lt;Person> meetCriteria(List&lt;Person> persons) {\n      List&lt;Person> femalePersons = new ArrayList&lt;Person>(); \n      \n      for (Person person : persons) {\n         if(person.getGender().equalsIgnoreCase(\"FEMALE\")){\n            femalePersons.add(person);\n         }\n      }\n      return femalePersons;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>CriteriaSingle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaSingle implements Criteria {\n\n   @Override\n   public List&lt;Person> meetCriteria(List&lt;Person> persons) {\n      List&lt;Person> singlePersons = new ArrayList&lt;Person>(); \n      \n      for (Person person : persons) {\n         if(person.getMaritalStatus().equalsIgnoreCase(\"SINGLE\")){\n            singlePersons.add(person);\n         }\n      }\n      return singlePersons;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>AndCriteria.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.List;\n\npublic class AndCriteria implements Criteria {\n\n   private Criteria criteria;\n   private Criteria otherCriteria;\n\n   public AndCriteria(Criteria criteria, Criteria otherCriteria) {\n      this.criteria = criteria;\n      this.otherCriteria = otherCriteria; \n   }\n\n   @Override\n   public List&lt;Person> meetCriteria(List&lt;Person> persons) {\n   \n      List&lt;Person> firstCriteriaPersons = criteria.meetCriteria(persons);\t\t\n      return otherCriteria.meetCriteria(firstCriteriaPersons);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>OrCriteria.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.List;\n\npublic class OrCriteria implements Criteria {\n\n   private Criteria criteria;\n   private Criteria otherCriteria;\n\n   public OrCriteria(Criteria criteria, Criteria otherCriteria) {\n      this.criteria = criteria;\n      this.otherCriteria = otherCriteria; \n   }\n\n   @Override\n   public List&lt;Person> meetCriteria(List&lt;Person> persons) {\n      List&lt;Person> firstCriteriaItems = criteria.meetCriteria(persons);\n      List&lt;Person> otherCriteriaItems = otherCriteria.meetCriteria(persons);\n\n      for (Person person : otherCriteriaItems) {\n         if(!firstCriteriaItems.contains(person)){\n            firstCriteriaItems.add(person);\n         }\n      }\t\n      return firstCriteriaItems;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step4<\/h2>\n\n\n\n<p>Use different Criteria and their combination to filter out persons.<\/p>\n\n\n\n<p><em>CriteriaPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaPatternDemo {\n   public static void main(String&#91;] args) {\n      List&lt;Person> persons = new ArrayList&lt;Person>();\n\n      persons.add(new Person(\"Robert\",\"Male\", \"Single\"));\n      persons.add(new Person(\"John\", \"Male\", \"Married\"));\n      persons.add(new Person(\"Laura\", \"Female\", \"Married\"));\n      persons.add(new Person(\"Diana\", \"Female\", \"Single\"));\n      persons.add(new Person(\"Mike\", \"Male\", \"Single\"));\n      persons.add(new Person(\"Bobby\", \"Male\", \"Single\"));\n\n      Criteria male = new CriteriaMale();\n      Criteria female = new CriteriaFemale();\n      Criteria single = new CriteriaSingle();\n      Criteria singleMale = new AndCriteria(single, male);\n      Criteria singleOrFemale = new OrCriteria(single, female);\n\n      System.out.println(\"Males: \");\n      printPersons(male.meetCriteria(persons));\n\n      System.out.println(\"\\nFemales: \");\n      printPersons(female.meetCriteria(persons));\n\n      System.out.println(\"\\nSingle Males: \");\n      printPersons(singleMale.meetCriteria(persons));\n\n      System.out.println(\"\\nSingle Or Females: \");\n      printPersons(singleOrFemale.meetCriteria(persons));\n   }\n\n   public static void printPersons(List&lt;Person> persons){\n   \n      for (Person person : persons) {\n         System.out.println(\"Person : &#91; Name : \" + person.getName() + \", Gender : \" + person.getGender() + \", Marital Status : \" + person.getMaritalStatus() + \" ]\");\n      }\n   }      \n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Males: \nPerson : &#91; Name : Robert, Gender : Male, Marital Status : Single ]\nPerson : &#91; Name : John, Gender : Male, Marital Status : Married ]\nPerson : &#91; Name : Mike, Gender : Male, Marital Status : Single ]\nPerson : &#91; Name : Bobby, Gender : Male, Marital Status : Single ]\n\nFemales: \nPerson : &#91; Name : Laura, Gender : Female, Marital Status : Married ]\nPerson : &#91; Name : Diana, Gender : Female, Marital Status : Single ]\n\nSingle Males: \nPerson : &#91; Name : Robert, Gender : Male, Marital Status : Single ]\nPerson : &#91; Name : Mike, Gender : Male, Marital Status : Single ]\nPerson : &#91; Name : Bobby, Gender : Male, Marital Status : Single ]\n\nSingle Or Females: \nPerson : &#91; Name : Robert, Gender : Male, Marital Status : Single ]\nPerson : &#91; Name : Diana, Gender : Female, Marital Status : Single ]\nPerson : &#91; Name : Mike, Gender : Male, Marital Status : Single ]\nPerson : &#91; Name : Bobby, Gender : Male, Marital Status : Single ]\nPerson : &#91; Name : Laura, Gender : Female, Marital Status : Married ]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Filter pattern or Criteria pattern is a design pattern that enables developers to filter a set of objects using different criteria and chaining them in a decoupled way through logical operations. This type of design pattern comes under structural pattern as this pattern combines multiple criteria to obtain single criteria. Implementation We&#8217;re going to create [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5,
            1
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/27"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=27"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/27\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 28,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/27\/revisions\/28"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=27"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=27"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=27"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 29,
        "date": "2020-06-18T05:54:28",
        "date_gmt": "2020-06-18T05:54:28",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=29"
        },
        "modified": "2020-06-18T05:54:28",
        "modified_gmt": "2020-06-18T05:54:28",
        "slug": "composite-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/composite-pattern\/",
        "title": {
            "rendered": "Composite Pattern"
        },
        "content": {
            "rendered": "\n<p>Composite pattern is used where we need to treat a group of objects in similar way as a single object. Composite pattern composes objects in term of a tree structure to represent part as well as whole hierarchy. This type of design pattern comes under structural pattern as this pattern creates a tree structure of group of objects.<\/p>\n\n\n\n<p>This pattern creates a class that contains group of its own objects. This class provides ways to modify its group of same objects.<\/p>\n\n\n\n<p>We are demonstrating use of composite pattern via following example in which we will show employees hierarchy of an organization.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We have a class&nbsp;<em>Employee<\/em>&nbsp;which acts as composite pattern actor class.&nbsp;<em>CompositePatternDemo<\/em>, our demo class will use&nbsp;<em>Employee<\/em>&nbsp;class to add department level hierarchy and print all employees.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/composite_pattern_uml_diagram.jpg\" alt=\"Composite Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create&nbsp;<em>Employee<\/em>&nbsp;class having list of&nbsp;<em>Employee<\/em>&nbsp;objects.<\/p>\n\n\n\n<p><em>Employee.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CompositePatternDemo {\n   public static void main(String&#91;] args) {\n   \n      Employee CEO = new Employee(\"John\",\"CEO\", 30000);\n\n      Employee headSales = new Employee(\"Robert\",\"Head Sales\", 20000);\n\n      Employee headMarketing = new Employee(\"Michel\",\"Head Marketing\", 20000);\n\n      Employee clerk1 = new Employee(\"Laura\",\"Marketing\", 10000);\n      Employee clerk2 = new Employee(\"Bob\",\"Marketing\", 10000);\n\n      Employee salesExecutive1 = new Employee(\"Richard\",\"Sales\", 10000);\n      Employee salesExecutive2 = new Employee(\"Rob\",\"Sales\", 10000);\n\n      CEO.add(headSales);\n      CEO.add(headMarketing);\n\n      headSales.add(salesExecutive1);\n      headSales.add(salesExecutive2);\n\n      headMarketing.add(clerk1);\n      headMarketing.add(clerk2);\n\n      \/\/print all employees of the organization\n      System.out.println(CEO); \n      \n      for (Employee headEmployee : CEO.getSubordinates()) {\n         System.out.println(headEmployee);\n         \n         for (Employee employee : headEmployee.getSubordinates()) {\n            System.out.println(employee);\n         }\n      }\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Use the&nbsp;<em>Employee<\/em>&nbsp;class to create and print employee hierarchy.<\/p>\n\n\n\n<p><em>CompositePatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CompositePatternDemo {\n   public static void main(String&#91;] args) {\n   \n      Employee CEO = new Employee(\"John\",\"CEO\", 30000);\n\n      Employee headSales = new Employee(\"Robert\",\"Head Sales\", 20000);\n\n      Employee headMarketing = new Employee(\"Michel\",\"Head Marketing\", 20000);\n\n      Employee clerk1 = new Employee(\"Laura\",\"Marketing\", 10000);\n      Employee clerk2 = new Employee(\"Bob\",\"Marketing\", 10000);\n\n      Employee salesExecutive1 = new Employee(\"Richard\",\"Sales\", 10000);\n      Employee salesExecutive2 = new Employee(\"Rob\",\"Sales\", 10000);\n\n      CEO.add(headSales);\n      CEO.add(headMarketing);\n\n      headSales.add(salesExecutive1);\n      headSales.add(salesExecutive2);\n\n      headMarketing.add(clerk1);\n      headMarketing.add(clerk2);\n\n      \/\/print all employees of the organization\n      System.out.println(CEO); \n      \n      for (Employee headEmployee : CEO.getSubordinates()) {\n         System.out.println(headEmployee);\n         \n         for (Employee employee : headEmployee.getSubordinates()) {\n            System.out.println(employee);\n         }\n      }\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Employee :&#91; Name : John, dept : CEO, salary :30000 ]\nEmployee :&#91; Name : Robert, dept : Head Sales, salary :20000 ]\nEmployee :&#91; Name : Richard, dept : Sales, salary :10000 ]\nEmployee :&#91; Name : Rob, dept : Sales, salary :10000 ]\nEmployee :&#91; Name : Michel, dept : Head Marketing, salary :20000 ]\nEmployee :&#91; Name : Laura, dept : Marketing, salary :10000 ]\nEmployee :&#91; Name : Bob, dept : Marketing, salary :10000 ]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Composite pattern is used where we need to treat a group of objects in similar way as a single object. Composite pattern composes objects in term of a tree structure to represent part as well as whole hierarchy. This type of design pattern comes under structural pattern as this pattern creates a tree structure of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/29"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=29"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/29\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 30,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/29\/revisions\/30"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=29"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=29"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=29"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 31,
        "date": "2020-06-18T06:00:26",
        "date_gmt": "2020-06-18T06:00:26",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=31"
        },
        "modified": "2020-06-18T06:00:26",
        "modified_gmt": "2020-06-18T06:00:26",
        "slug": "decorator-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/decorator-pattern\/",
        "title": {
            "rendered": "Decorator Pattern"
        },
        "content": {
            "rendered": "\n<p>Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.<\/p>\n\n\n\n<p>This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact.<\/p>\n\n\n\n<p>We are demonstrating the use of decorator pattern via following example in which we will decorate a shape with some color without alter shape class.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We&#8217;re going to create a&nbsp;<em>Shape<\/em>&nbsp;interface and concrete classes implementing the&nbsp;<em>Shape<\/em>&nbsp;interface. We will then create an abstract decorator class&nbsp;<em>ShapeDecorator<\/em>&nbsp;implementing the&nbsp;<em>Shape<\/em>&nbsp;interface and having&nbsp;<em>Shape<\/em>&nbsp;object as its instance variable.<\/p>\n\n\n\n<p><em>RedShapeDecorator<\/em>&nbsp;is concrete class implementing&nbsp;<em>ShapeDecorator<\/em>.<\/p>\n\n\n\n<p><em>DecoratorPatternDemo<\/em>, our demo class will use&nbsp;<em>RedShapeDecorator<\/em>&nbsp;to decorate&nbsp;<em>Shape<\/em>&nbsp;objects.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/decorator_pattern_uml_diagram.jpg\" alt=\"Decorator Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface.<\/p>\n\n\n\n<p><em>Shape.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Shape {\n   void draw();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the same interface.<\/p>\n\n\n\n<p><em>Rectangle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Rectangle implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println(\"Shape: Rectangle\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Circle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">public class Circle implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println(\"Shape: Circle\");\n   }\n}<\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create abstract decorator class implementing the&nbsp;<em>Shape<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>ShapeDecorator.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RedShapeDecorator extends ShapeDecorator {\n\n   public RedShapeDecorator(Shape decoratedShape) {\n      super(decoratedShape);\t\t\n   }\n\n   @Override\n   public void draw() {\n      decoratedShape.draw();\t       \n      setRedBorder(decoratedShape);\n   }\n\n   private void setRedBorder(Shape decoratedShape){\n      System.out.println(\"Border Color: Red\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create concrete decorator class extending the&nbsp;<em>ShapeDecorator<\/em>&nbsp;class.<\/p>\n\n\n\n<p><em>RedShapeDecorator.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RedShapeDecorator extends ShapeDecorator {\n\n   public RedShapeDecorator(Shape decoratedShape) {\n      super(decoratedShape);\t\t\n   }\n\n   @Override\n   public void draw() {\n      decoratedShape.draw();\t       \n      setRedBorder(decoratedShape);\n   }\n\n   private void setRedBorder(Shape decoratedShape){\n      System.out.println(\"Border Color: Red\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Use the&nbsp;<em>RedShapeDecorator<\/em>&nbsp;to decorate&nbsp;<em>Shape<\/em>&nbsp;objects.<\/p>\n\n\n\n<p><em>DecoratorPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DecoratorPatternDemo {\n   public static void main(String&#91;] args) {\n\n      Shape circle = new Circle();\n\n      Shape redCircle = new RedShapeDecorator(new Circle());\n\n      Shape redRectangle = new RedShapeDecorator(new Rectangle());\n      System.out.println(\"Circle with normal border\");\n      circle.draw();\n\n      System.out.println(\"\\nCircle of red border\");\n      redCircle.draw();\n\n      System.out.println(\"\\nRectangle of red border\");\n      redRectangle.draw();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Circle with normal border\nShape: Circle\n\nCircle of red border\nShape: Circle\nBorder Color: Red\n\nRectangle of red border\nShape: Rectangle\nBorder Color: Red<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class. This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/31"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=31"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/31\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 32,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/31\/revisions\/32"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=31"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=31"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=31"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 33,
        "date": "2020-06-18T06:06:01",
        "date_gmt": "2020-06-18T06:06:01",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=33"
        },
        "modified": "2020-06-18T06:06:01",
        "modified_gmt": "2020-06-18T06:06:01",
        "slug": "facade-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/facade-pattern\/",
        "title": {
            "rendered": "Facade Pattern"
        },
        "content": {
            "rendered": "\n<p>Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of design pattern comes under structural pattern as this pattern adds an interface to existing system to hide its complexities.<\/p>\n\n\n\n<p>This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing system classes.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>Shape<\/em>&nbsp;interface and concrete classes implementing the&nbsp;<em>Shape<\/em>&nbsp;interface. A facade class&nbsp;<em>ShapeMaker<\/em>&nbsp;is defined as a next step.<\/p>\n\n\n\n<p><em>ShapeMaker<\/em>&nbsp;class uses the concrete classes to delegate user calls to these classes.&nbsp;<em>FacadePatternDemo<\/em>, our demo class, will use&nbsp;<em>ShapeMaker<\/em>&nbsp;class to show the results.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/facade_pattern_uml_diagram.jpg\" alt=\"Facade Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface.<\/p>\n\n\n\n<p><em>Shape.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Shape {\n   void draw();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the same interface.<\/p>\n\n\n\n<p><em>Rectangle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Rectangle implements Shape {\n\n@Override\npublic void draw() {\nSystem.out.println(\"Rectangle::draw()\");\n}\n}<\/code><\/pre>\n\n\n\n<p><em>Square.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Square implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println(\"Square::draw()\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Circle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Circle implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println(\"Circle::draw()\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create a facade class.<\/p>\n\n\n\n<p><em>ShapeMaker.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ShapeMaker {\n   private Shape circle;\n   private Shape rectangle;\n   private Shape square;\n\n   public ShapeMaker() {\n      circle = new Circle();\n      rectangle = new Rectangle();\n      square = new Square();\n   }\n\n   public void drawCircle(){\n      circle.draw();\n   }\n   public void drawRectangle(){\n      rectangle.draw();\n   }\n   public void drawSquare(){\n      square.draw();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the facade to draw various types of shapes.<\/p>\n\n\n\n<p><em>FacadePatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FacadePatternDemo {\n   public static void main(String&#91;] args) {\n      ShapeMaker shapeMaker = new ShapeMaker();\n\n      shapeMaker.drawCircle();\n      shapeMaker.drawRectangle();\n      shapeMaker.drawSquare();\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Circle::draw()\nRectangle::draw()\nSquare::draw()<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of design pattern comes under structural pattern as this pattern adds an interface to existing system to hide its complexities. This pattern involves a single class which provides simplified methods [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/33"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=33"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/33\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 34,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/33\/revisions\/34"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=33"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=33"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=33"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 35,
        "date": "2020-06-18T06:10:24",
        "date_gmt": "2020-06-18T06:10:24",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=35"
        },
        "modified": "2020-06-18T06:10:24",
        "modified_gmt": "2020-06-18T06:10:24",
        "slug": "flyweight-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/flyweight-pattern\/",
        "title": {
            "rendered": "Flyweight Pattern"
        },
        "content": {
            "rendered": "\n<p>Flyweight pattern is primarily used to reduce the number of objects created and to decrease memory footprint and increase performance. This type of design pattern comes under structural pattern as this pattern provides ways to decrease object count thus improving the object structure of application.<\/p>\n\n\n\n<p>Flyweight pattern tries to reuse already existing similar kind objects by storing them and creates new object when no matching object is found. We will demonstrate this pattern by drawing 20 circles of different locations but we will create only 5 objects. Only 5 colors are available so color property is used to check already existing&nbsp;<em>Circle<\/em>&nbsp;objects.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>Shape<\/em>&nbsp;interface and concrete class&nbsp;<em>Circle<\/em>&nbsp;implementing the&nbsp;<em>Shape<\/em>&nbsp;interface. A factory class&nbsp;<em>ShapeFactory<\/em>&nbsp;is defined as a next step.<\/p>\n\n\n\n<p><em>ShapeFactory<\/em>&nbsp;has a&nbsp;<em>HashMap<\/em>&nbsp;of&nbsp;<em>Circle<\/em>&nbsp;having key as color of the&nbsp;<em>Circle<\/em>&nbsp;object. Whenever a request comes to create a circle of particular color to&nbsp;<em>ShapeFactory<\/em>, it checks the circle object in its&nbsp;<em>HashMap<\/em>, if object of&nbsp;<em>Circle<\/em>&nbsp;found, that object is returned otherwise a new object is created, stored in hashmap for future use, and returned to client.<\/p>\n\n\n\n<p><em>FlyWeightPatternDemo<\/em>, our demo class, will use&nbsp;<em>ShapeFactory<\/em>&nbsp;to get a&nbsp;<em>Shape<\/em>&nbsp;object. It will pass information (<em>red \/ green \/ blue\/ black \/ white<\/em>) to&nbsp;<em>ShapeFactory<\/em>&nbsp;to get the circle of desired color it needs.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/flyweight_pattern_uml_diagram.jpg\" alt=\"Flyweight Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface.<\/p>\n\n\n\n<p><em>Shape.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Shape {\n   void draw();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete class implementing the same interface.<\/p>\n\n\n\n<p><em>Circle.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Circle implements Shape {\n   private String color;\n   private int x;\n   private int y;\n   private int radius;\n\n   public Circle(String color){\n      this.color = color;\t\t\n   }\n\n   public void setX(int x) {\n      this.x = x;\n   }\n\n   public void setY(int y) {\n      this.y = y;\n   }\n\n   public void setRadius(int radius) {\n      this.radius = radius;\n   }\n\n   @Override\n   public void draw() {\n      System.out.println(\"Circle: Draw() &#91;Color : \" + color + \", x : \" + x + \", y :\" + y + \", radius :\" + radius);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p><em>ShapeFactory.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.HashMap;\n\npublic class ShapeFactory {\n\n   \/\/ Uncomment the compiler directive line and\n   \/\/ javac *.java will compile properly.\n   \/\/ @SuppressWarnings(\"unchecked\")\n   private static final HashMap circleMap = new HashMap();\n\n   public static Shape getCircle(String color) {\n      Circle circle = (Circle)circleMap.get(color);\n\n      if(circle == null) {\n         circle = new Circle(color);\n         circleMap.put(color, circle);\n         System.out.println(\"Creating circle of color : \" + color);\n      }\n      return circle;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the factory to get object of concrete class by passing an information such as color.<\/p>\n\n\n\n<p><em>FlyweightPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FlyweightPatternDemo {\n   private static final String colors&#91;] = { \"Red\", \"Green\", \"Blue\", \"White\", \"Black\" };\n   public static void main(String&#91;] args) {\n\n      for(int i=0; i &lt; 20; ++i) {\n         Circle circle = (Circle)ShapeFactory.getCircle(getRandomColor());\n         circle.setX(getRandomX());\n         circle.setY(getRandomY());\n         circle.setRadius(100);\n         circle.draw();\n      }\n   }\n   private static String getRandomColor() {\n      return colors&#91;(int)(Math.random()*colors.length)];\n   }\n   private static int getRandomX() {\n      return (int)(Math.random()*100 );\n   }\n   private static int getRandomY() {\n      return (int)(Math.random()*100);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Creating circle of color : Black\nCircle: Draw() &#91;Color : Black, x : 36, y :71, radius :100\nCreating circle of color : Green\nCircle: Draw() &#91;Color : Green, x : 27, y :27, radius :100\nCreating circle of color : White\nCircle: Draw() &#91;Color : White, x : 64, y :10, radius :100\nCreating circle of color : Red\nCircle: Draw() &#91;Color : Red, x : 15, y :44, radius :100\nCircle: Draw() &#91;Color : Green, x : 19, y :10, radius :100\nCircle: Draw() &#91;Color : Green, x : 94, y :32, radius :100\nCircle: Draw() &#91;Color : White, x : 69, y :98, radius :100\nCreating circle of color : Blue\nCircle: Draw() &#91;Color : Blue, x : 13, y :4, radius :100\nCircle: Draw() &#91;Color : Green, x : 21, y :21, radius :100\nCircle: Draw() &#91;Color : Blue, x : 55, y :86, radius :100\nCircle: Draw() &#91;Color : White, x : 90, y :70, radius :100\nCircle: Draw() &#91;Color : Green, x : 78, y :3, radius :100\nCircle: Draw() &#91;Color : Green, x : 64, y :89, radius :100\nCircle: Draw() &#91;Color : Blue, x : 3, y :91, radius :100\nCircle: Draw() &#91;Color : Blue, x : 62, y :82, radius :100\nCircle: Draw() &#91;Color : Green, x : 97, y :61, radius :100\nCircle: Draw() &#91;Color : Green, x : 86, y :12, radius :100\nCircle: Draw() &#91;Color : Green, x : 38, y :93, radius :100\nCircle: Draw() &#91;Color : Red, x : 76, y :82, radius :100\nCircle: Draw() &#91;Color : Blue, x : 95, y :82, radius :100<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Flyweight pattern is primarily used to reduce the number of objects created and to decrease memory footprint and increase performance. This type of design pattern comes under structural pattern as this pattern provides ways to decrease object count thus improving the object structure of application. Flyweight pattern tries to reuse already existing similar kind objects [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/35"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=35"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/35\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 36,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/35\/revisions\/36"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=35"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=35"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=35"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 37,
        "date": "2020-06-18T06:13:39",
        "date_gmt": "2020-06-18T06:13:39",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=37"
        },
        "modified": "2020-06-18T06:13:39",
        "modified_gmt": "2020-06-18T06:13:39",
        "slug": "proxy-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/proxy-pattern\/",
        "title": {
            "rendered": "Proxy Pattern"
        },
        "content": {
            "rendered": "\n<p>In proxy pattern, a class represents functionality of another class. This type of design pattern comes under structural pattern.<\/p>\n\n\n\n<p>In proxy pattern, we create object having original object to interface its functionality to outer world.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create an&nbsp;<em>Image<\/em>&nbsp;interface and concrete classes implementing the&nbsp;<em>Image<\/em>&nbsp;interface.&nbsp;<em>ProxyImage<\/em>&nbsp;is a a proxy class to reduce memory footprint of&nbsp;<em>RealImage<\/em>&nbsp;object loading.<\/p>\n\n\n\n<p><em>ProxyPatternDemo<\/em>, our demo class, will use&nbsp;<em>ProxyImage<\/em>&nbsp;to get an&nbsp;<em>Image<\/em>&nbsp;object to load and display as it needs.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/proxy_pattern_uml_diagram.jpg\" alt=\"Proxy Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface.<\/p>\n\n\n\n<p><em>Image.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Image {\n   void display();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the same interface.<\/p>\n\n\n\n<p><em>RealImage.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RealImage implements Image {\n\n   private String fileName;\n\n   public RealImage(String fileName){\n      this.fileName = fileName;\n      loadFromDisk(fileName);\n   }\n\n   @Override\n   public void display() {\n      System.out.println(\"Displaying \" + fileName);\n   }\n\n   private void loadFromDisk(String fileName){\n      System.out.println(\"Loading \" + fileName);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>ProxyImage.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ProxyImage implements Image{\n\n   private RealImage realImage;\n   private String fileName;\n\n   public ProxyImage(String fileName){\n      this.fileName = fileName;\n   }\n\n   @Override\n   public void display() {\n      if(realImage == null){\n         realImage = new RealImage(fileName);\n      }\n      realImage.display();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Use the&nbsp;<em>ProxyImage<\/em>&nbsp;to get object of&nbsp;<em>RealImage<\/em>&nbsp;class when required.<\/p>\n\n\n\n<p><em>ProxyPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ProxyPatternDemo {\n\t\n   public static void main(String&#91;] args) {\n      Image image = new ProxyImage(\"test_10mb.jpg\");\n\n      \/\/image will be loaded from disk\n      image.display(); \n      System.out.println(\"\");\n      \n      \/\/image will not be loaded from disk\n      image.display(); \t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Loading test_10mb.jpg\nDisplaying test_10mb.jpg\n\nDisplaying test_10mb.jpg<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In proxy pattern, a class represents functionality of another class. This type of design pattern comes under structural pattern. In proxy pattern, we create object having original object to interface its functionality to outer world. Implementation We are going to create an&nbsp;Image&nbsp;interface and concrete classes implementing the&nbsp;Image&nbsp;interface.&nbsp;ProxyImage&nbsp;is a a proxy class to reduce memory footprint [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/37"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=37"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/37\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 38,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/37\/revisions\/38"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=37"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=37"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=37"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 39,
        "date": "2020-06-18T06:17:41",
        "date_gmt": "2020-06-18T06:17:41",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=39"
        },
        "modified": "2020-06-18T06:17:41",
        "modified_gmt": "2020-06-18T06:17:41",
        "slug": "chain-of-responsibility-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/chain-of-responsibility-pattern\/",
        "title": {
            "rendered": "Chain of Responsibility Pattern"
        },
        "content": {
            "rendered": "\n<p>As the name suggests, the chain of responsibility pattern creates a chain of receiver objects for a request. This pattern decouples sender and receiver of a request based on type of request. This pattern comes under behavioral patterns.<\/p>\n\n\n\n<p>In this pattern, normally each receiver contains reference to another receiver. If one object cannot handle the request then it passes the same to the next receiver and so on.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We have created an abstract class&nbsp;<em>AbstractLogger<\/em>&nbsp;with a level of logging. Then we have created three types of loggers extending the&nbsp;<em>AbstractLogger<\/em>. Each logger checks the level of message to its level and print accordingly otherwise does not print and pass the message to its next logger.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/chain_pattern_uml_diagram.jpg\" alt=\"Chain of Responsibility Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an abstract logger class.<\/p>\n\n\n\n<p><em>AbstractLogger.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class AbstractLogger {\n   public static int INFO = 1;\n   public static int DEBUG = 2;\n   public static int ERROR = 3;\n\n   protected int level;\n\n   \/\/next element in chain or responsibility\n   protected AbstractLogger nextLogger;\n\n   public void setNextLogger(AbstractLogger nextLogger){\n      this.nextLogger = nextLogger;\n   }\n\n   public void logMessage(int level, String message){\n      if(this.level &lt;= level){\n         write(message);\n      }\n      if(nextLogger !=null){\n         nextLogger.logMessage(level, message);\n      }\n   }\n\n   abstract protected void write(String message);\n\t\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes extending the logger.<\/p>\n\n\n\n<p><em>ConsoleLogger.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ConsoleLogger extends AbstractLogger {\n\n   public ConsoleLogger(int level){\n      this.level = level;\n   }\n\n   @Override\n   protected void write(String message) {\t\t\n      System.out.println(\"Standard Console::Logger: \" + message);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>ErrorLogger.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ErrorLogger extends AbstractLogger {\n\n   public ErrorLogger(int level){\n      this.level = level;\n   }\n\n   @Override\n   protected void write(String message) {\t\t\n      System.out.println(\"Error Console::Logger: \" + message);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>FileLogger.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FileLogger extends AbstractLogger {\n\n   public FileLogger(int level){\n      this.level = level;\n   }\n\n   @Override\n   protected void write(String message) {\t\t\n      System.out.println(\"File::Logger: \" + message);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create different types of loggers. Assign them error levels and set next logger in each logger. Next logger in each logger represents the part of the chain.<\/p>\n\n\n\n<p><em>ChainPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ChainPatternDemo {\n\t\n   private static AbstractLogger getChainOfLoggers(){\n\n      AbstractLogger errorLogger = new ErrorLogger(AbstractLogger.ERROR);\n      AbstractLogger fileLogger = new FileLogger(AbstractLogger.DEBUG);\n      AbstractLogger consoleLogger = new ConsoleLogger(AbstractLogger.INFO);\n\n      errorLogger.setNextLogger(fileLogger);\n      fileLogger.setNextLogger(consoleLogger);\n\n      return errorLogger;\t\n   }\n\n   public static void main(String&#91;] args) {\n      AbstractLogger loggerChain = getChainOfLoggers();\n\n      loggerChain.logMessage(AbstractLogger.INFO, \n         \"This is an information.\");\n\n      loggerChain.logMessage(AbstractLogger.DEBUG, \n         \"This is an debug level information.\");\n\n      loggerChain.logMessage(AbstractLogger.ERROR, \n         \"This is an error information.\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- wp:preformatted -->\n&lt;pre class=\"wp-block-preformatted\">Standard Console::Logger: This is an information.\nFile::Logger: This is an debug level information.\nStandard Console::Logger: This is an debug level information.\nError Console::Logger: This is an error information.\nFile::Logger: This is an error information.\nStandard Console::Logger: This is an error information.&lt;\/pre>\n&lt;!-- \/wp:preformatted --><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>As the name suggests, the chain of responsibility pattern creates a chain of receiver objects for a request. This pattern decouples sender and receiver of a request based on type of request. This pattern comes under behavioral patterns. In this pattern, normally each receiver contains reference to another receiver. If one object cannot handle the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/39"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=39"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/39\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 40,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/39\/revisions\/40"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=39"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=39"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=39"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 41,
        "date": "2020-06-18T06:22:52",
        "date_gmt": "2020-06-18T06:22:52",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=41"
        },
        "modified": "2020-06-18T06:22:52",
        "modified_gmt": "2020-06-18T06:22:52",
        "slug": "command-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/command-pattern\/",
        "title": {
            "rendered": "Command Pattern"
        },
        "content": {
            "rendered": "\n<p>and pattern is a data driven design pattern and falls under behavioral pattern category. A request is wrapped under an object as command and passed to invoker object. Invoker object looks for the appropriate object which can handle this command and passes the command to the corresponding object which executes the command.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We have created an interface&nbsp;<em>Order<\/em>&nbsp;which is acting as a command. We have created a&nbsp;<em>Stock<\/em>&nbsp;class which acts as a request. We have concrete command classes&nbsp;<em>BuyStock<\/em>&nbsp;and&nbsp;<em>SellStock<\/em>&nbsp;implementing&nbsp;<em>Order<\/em>&nbsp;interface which will do actual command processing. A class&nbsp;<em>Broker<\/em>&nbsp;is created which acts as an invoker object. It can take and place orders.<\/p>\n\n\n\n<p><em>Broker<\/em>&nbsp;object uses command pattern to identify which object will execute which command based on the type of command.&nbsp;<em>CommandPatternDemo<\/em>, our demo class, will use&nbsp;<em>Broker<\/em>&nbsp;class to demonstrate command pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/command_pattern_uml_diagram.jpg\" alt=\"Command Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create a command interface.<\/p>\n\n\n\n<p><em>Order.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Order {\n   void execute();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create a request class.<\/p>\n\n\n\n<p><em>Stock.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Stock {\n\t\n   private String name = \"ABC\";\n   private int quantity = 10;\n\n   public void buy(){\n      System.out.println(\"Stock &#91; Name: \"+name+\", \n         Quantity: \" + quantity +\" ] bought\");\n   }\n   public void sell(){\n      System.out.println(\"Stock &#91; Name: \"+name+\", \n         Quantity: \" + quantity +\" ] sold\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create concrete classes implementing the&nbsp;<em>Order<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>BuyStock.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class BuyStock implements Order {\n   private Stock abcStock;\n\n   public BuyStock(Stock abcStock){\n      this.abcStock = abcStock;\n   }\n\n   public void execute() {\n      abcStock.buy();\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>SellStock.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SellStock implements Order {\n   private Stock abcStock;\n\n   public SellStock(Stock abcStock){\n      this.abcStock = abcStock;\n   }\n\n   public void execute() {\n      abcStock.sell();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create command invoker class.<\/p>\n\n\n\n<p><em>Broker.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\n   public class Broker {\n   private List&lt;Order> orderList = new ArrayList&lt;Order>(); \n\n   public void takeOrder(Order order){\n      orderList.add(order);\t\t\n   }\n\n   public void placeOrders(){\n   \n      for (Order order : orderList) {\n         order.execute();\n      }\n      orderList.clear();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Use the Broker class to take and execute commands.<\/p>\n\n\n\n<p><em>CommandPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CommandPatternDemo {\n   public static void main(String&#91;] args) {\n      Stock abcStock = new Stock();\n\n      BuyStock buyStockOrder = new BuyStock(abcStock);\n      SellStock sellStockOrder = new SellStock(abcStock);\n\n      Broker broker = new Broker();\n      broker.takeOrder(buyStockOrder);\n      broker.takeOrder(sellStockOrder);\n\n      broker.placeOrders();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Stock &#91; Name: ABC, Quantity: 10 ] bought\nStock &#91; Name: ABC, Quantity: 10 ] sold<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>and pattern is a data driven design pattern and falls under behavioral pattern category. A request is wrapped under an object as command and passed to invoker object. Invoker object looks for the appropriate object which can handle this command and passes the command to the corresponding object which executes the command. Implementation We have [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/41"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=41"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/41\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 42,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/41\/revisions\/42"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=41"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=41"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=41"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 43,
        "date": "2020-06-18T06:27:36",
        "date_gmt": "2020-06-18T06:27:36",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=43"
        },
        "modified": "2020-06-18T06:27:36",
        "modified_gmt": "2020-06-18T06:27:36",
        "slug": "interpreter-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/interpreter-pattern\/",
        "title": {
            "rendered": "Interpreter Pattern"
        },
        "content": {
            "rendered": "\n<p>Interpreter pattern provides a way to evaluate language grammar or expression. This type of pattern comes under behavioral pattern. This pattern involves implementing an expression interface which tells to interpret a particular context. This pattern is used in SQL parsing, symbol processing engine etc.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create an interface&nbsp;<em>Expression<\/em>&nbsp;and concrete classes implementing the&nbsp;<em>Expression<\/em>&nbsp;interface. A class&nbsp;<em>TerminalExpression<\/em>&nbsp;is defined which acts as a main interpreter of context in question. Other classes&nbsp;<em>OrExpression<\/em>,&nbsp;<em>AndExpression<\/em>&nbsp;are used to create combinational expressions.<\/p>\n\n\n\n<p><em>InterpreterPatternDemo<\/em>, our demo class, will use&nbsp;<em>Expression<\/em>&nbsp;class to create rules and demonstrate parsing of expressions.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/interpreter_pattern_uml_diagram.jpg\" alt=\"Interpreter Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an expression interface.<\/p>\n\n\n\n<p><em>Expression.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Expression {\n   public boolean interpret(String context);\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the above interface.<\/p>\n\n\n\n<p><em>TerminalExpression.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TerminalExpression implements Expression {\n\t\n   private String data;\n\n   public TerminalExpression(String data){\n      this.data = data; \n   }\n\n   @Override\n   public boolean interpret(String context) {\n   \n      if(context.contains(data)){\n         return true;\n      }\n      return false;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>OrExpression.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class OrExpression implements Expression {\n\t \n   private Expression expr1 = null;\n   private Expression expr2 = null;\n\n   public OrExpression(Expression expr1, Expression expr2) { \n      this.expr1 = expr1;\n      this.expr2 = expr2;\n   }\n\n   @Override\n   public boolean interpret(String context) {\t\t\n      return expr1.interpret(context) || expr2.interpret(context);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>AndExpression.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class AndExpression implements Expression {\n\t \n   private Expression expr1 = null;\n   private Expression expr2 = null;\n\n   public AndExpression(Expression expr1, Expression expr2) { \n      this.expr1 = expr1;\n      this.expr2 = expr2;\n   }\n\n   @Override\n   public boolean interpret(String context) {\t\t\n      return expr1.interpret(context) &amp;&amp; expr2.interpret(context);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p><em>InterpreterPatternDemo<\/em>&nbsp;uses&nbsp;<em>Expression<\/em>&nbsp;class to create rules and then parse them.<\/p>\n\n\n\n<p><em>InterpreterPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class InterpreterPatternDemo {\n\n   \/\/Rule: Robert and John are male\n   public static Expression getMaleExpression(){\n      Expression robert = new TerminalExpression(\"Robert\");\n      Expression john = new TerminalExpression(\"John\");\n      return new OrExpression(robert, john);\t\t\n   }\n\n   \/\/Rule: Julie is a married women\n   public static Expression getMarriedWomanExpression(){\n      Expression julie = new TerminalExpression(\"Julie\");\n      Expression married = new TerminalExpression(\"Married\");\n      return new AndExpression(julie, married);\t\t\n   }\n\n   public static void main(String&#91;] args) {\n      Expression isMale = getMaleExpression();\n      Expression isMarriedWoman = getMarriedWomanExpression();\n\n      System.out.println(\"John is male? \" + isMale.interpret(\"John\"));\n      System.out.println(\"Julie is a married women? \" + isMarriedWoman.interpret(\"Married Julie\"));\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>John is male? true\nJulie is a married women? true<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Interpreter pattern provides a way to evaluate language grammar or expression. This type of pattern comes under behavioral pattern. This pattern involves implementing an expression interface which tells to interpret a particular context. This pattern is used in SQL parsing, symbol processing engine etc. Implementation We are going to create an interface&nbsp;Expression&nbsp;and concrete classes implementing [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5,
            1
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/43"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=43"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/43\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 45,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/43\/revisions\/45"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=43"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=43"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=43"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 46,
        "date": "2020-06-18T06:30:57",
        "date_gmt": "2020-06-18T06:30:57",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=46"
        },
        "modified": "2020-06-18T06:30:57",
        "modified_gmt": "2020-06-18T06:30:57",
        "slug": "iterator-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/iterator-pattern\/",
        "title": {
            "rendered": "Iterator Pattern"
        },
        "content": {
            "rendered": "\n<p>Iterator pattern is very commonly used design pattern in Java and .Net programming environment. This pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation.<\/p>\n\n\n\n<p>Iterator pattern falls under behavioral pattern category.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We&#8217;re going to create a&nbsp;<em>Iterator<\/em>&nbsp;interface which narrates navigation method and a&nbsp;<em>Container<\/em>&nbsp;interface which retruns the iterator . Concrete classes implementing the&nbsp;<em>Container<\/em>&nbsp;interface will be responsible to implement&nbsp;<em>Iterator<\/em>&nbsp;interface and use it<\/p>\n\n\n\n<p><em>IteratorPatternDemo<\/em>, our demo class will use&nbsp;<em>NamesRepository<\/em>, a concrete class implementation to print a&nbsp;<em>Names<\/em>&nbsp;stored as a collection in&nbsp;<em>NamesRepository<\/em>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/iterator_pattern_uml_diagram.jpg\" alt=\"Iterator Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create interfaces.<\/p>\n\n\n\n<p><em>Iterator.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Iterator {\n   public boolean hasNext();\n   public Object next();\n}<\/code><\/pre>\n\n\n\n<p><em>Container.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Container {\n   public Iterator getIterator();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete class implementing the&nbsp;<em>Container<\/em>&nbsp;interface. This class has inner class&nbsp;<em>NameIterator<\/em>&nbsp;implementing the&nbsp;<em>Iterator<\/em>&nbsp;interface.<\/p>\n\n\n\n<p><em>NameRepository.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class NameRepository implements Container {\n   public String names&#91;] = {\"Robert\" , \"John\" ,\"Julie\" , \"Lora\"};\n\n   @Override\n   public Iterator getIterator() {\n      return new NameIterator();\n   }\n\n   private class NameIterator implements Iterator {\n\n      int index;\n\n      @Override\n      public boolean hasNext() {\n      \n         if(index &lt; names.length){\n            return true;\n         }\n         return false;\n      }\n\n      @Override\n      public Object next() {\n      \n         if(this.hasNext()){\n            return names&#91;index++];\n         }\n         return null;\n      }\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Use the&nbsp;<em>NameRepository<\/em>&nbsp;to get iterator and print names.<\/p>\n\n\n\n<p><em>IteratorPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class IteratorPatternDemo {\n\t\n   public static void main(String&#91;] args) {\n      NameRepository namesRepository = new NameRepository();\n\n      for(Iterator iter = namesRepository.getIterator(); iter.hasNext();){\n         String name = (String)iter.next();\n         System.out.println(\"Name : \" + name);\n      } \t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name : Robert\nName : John\nName : Julie\nName : Lora<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Iterator pattern is very commonly used design pattern in Java and .Net programming environment. This pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation. Iterator pattern falls under behavioral pattern category. Implementation We&#8217;re going to create a&nbsp;Iterator&nbsp;interface which [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/46"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=46"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/46\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 47,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/46\/revisions\/47"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=46"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=46"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=46"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 48,
        "date": "2020-06-18T06:37:11",
        "date_gmt": "2020-06-18T06:37:11",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=48"
        },
        "modified": "2020-06-18T06:37:11",
        "modified_gmt": "2020-06-18T06:37:11",
        "slug": "mediator-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/mediator-pattern\/",
        "title": {
            "rendered": "Mediator Pattern"
        },
        "content": {
            "rendered": "\n<p>Mediator pattern is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and supports easy maintenance of the code by loose coupling. Mediator pattern falls under behavioral pattern category.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are demonstrating mediator pattern by example of a chat room where multiple users can send message to chat room and it is the responsibility of chat room to show the messages to all users. We have created two classes&nbsp;<em>ChatRoom<\/em>&nbsp;and&nbsp;<em>User<\/em>.&nbsp;<em>User<\/em>&nbsp;objects will use&nbsp;<em>ChatRoom<\/em>&nbsp;method to share their messages.<\/p>\n\n\n\n<p><em>MediatorPatternDemo<\/em>, our demo class, will use&nbsp;<em>User<\/em>&nbsp;objects to show communication between them.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/mediator_pattern_uml_diagram.jpg\" alt=\"Mediator Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create mediator class.<\/p>\n\n\n\n<p><em>ChatRoom.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Date;\n\npublic class ChatRoom {\n   public static void showMessage(User user, String message){\n      System.out.println(new Date().toString() + \" &#91;\" + user.getName() + \"] : \" + message);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create user class<\/p>\n\n\n\n<p><em>User.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class User {\n   private String name;\n\n   public String getName() {\n      return name;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n\n   public User(String name){\n      this.name  = name;\n   }\n\n   public void sendMessage(String message){\n      ChatRoom.showMessage(this,message);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Use the&nbsp;<em>User<\/em>&nbsp;object to show communications between them.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MediatorPatternDemo {\n   public static void main(String&#91;] args) {\n      User robert = new User(\"Robert\");\n      User john = new User(\"John\");\n\n      robert.sendMessage(\"Hi! John!\");\n      john.sendMessage(\"Hello! Robert!\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Thu Jan 31 16:05:46 IST 2013 &#91;Robert] : Hi! John!\nThu Jan 31 16:05:46 IST 2013 &#91;John] : Hello! Robert<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Mediator pattern is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and supports easy maintenance of the code by loose coupling. Mediator pattern falls under behavioral pattern category. Implementation We are demonstrating mediator pattern by example of a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/48"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=48"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/48\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 49,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/48\/revisions\/49"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=48"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=48"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=48"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 50,
        "date": "2020-06-18T06:43:12",
        "date_gmt": "2020-06-18T06:43:12",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=50"
        },
        "modified": "2020-06-18T06:43:12",
        "modified_gmt": "2020-06-18T06:43:12",
        "slug": "memento-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/memento-pattern\/",
        "title": {
            "rendered": "Memento Pattern"
        },
        "content": {
            "rendered": "\n<p>Memento pattern is used to restore state of an object to a previous state. Memento pattern falls under behavioral pattern category.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>Memento pattern uses three actor classes. Memento contains state of an object to be restored. Originator creates and stores states in Memento objects and Caretaker object is responsible to restore object state from Memento. We have created classes&nbsp;<em>Memento<\/em>,&nbsp;<em>Originator<\/em>&nbsp;and&nbsp;<em>CareTaker<\/em>.<\/p>\n\n\n\n<p><em>MementoPatternDemo<\/em>, our demo class, will use&nbsp;<em>CareTaker<\/em>&nbsp;and&nbsp;<em>Originator<\/em>&nbsp;objects to show restoration of object states.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/memento_pattern_uml_diagram.jpg\" alt=\"Memento Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Memento class.<\/p>\n\n\n\n<p><em>Memento.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Memento {\n   private String state;\n\n   public Memento(String state){\n      this.state = state;\n   }\n\n   public String getState(){\n      return state;\n   }\t\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create Originator class<\/p>\n\n\n\n<p><em>Originator.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Originator {\n   private String state;\n\n   public void setState(String state){\n      this.state = state;\n   }\n\n   public String getState(){\n      return state;\n   }\n\n   public Memento saveStateToMemento(){\n      return new Memento(state);\n   }\n\n   public void getStateFromMemento(Memento memento){\n      state = memento.getState();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create CareTaker class<\/p>\n\n\n\n<p><em>CareTaker.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class CareTaker {\n   private List&lt;Memento> mementoList = new ArrayList&lt;Memento>();\n\n   public void add(Memento state){\n      mementoList.add(state);\n   }\n\n   public Memento get(int index){\n      return mementoList.get(index);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use&nbsp;<em>CareTaker<\/em>&nbsp;and&nbsp;<em>Originator<\/em>&nbsp;objects.<\/p>\n\n\n\n<p><em>MementoPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MementoPatternDemo {\n   public static void main(String&#91;] args) {\n   \n      Originator originator = new Originator();\n      CareTaker careTaker = new CareTaker();\n      \n      originator.setState(\"State #1\");\n      originator.setState(\"State #2\");\n      careTaker.add(originator.saveStateToMemento());\n      \n      originator.setState(\"State #3\");\n      careTaker.add(originator.saveStateToMemento());\n      \n      originator.setState(\"State #4\");\n      System.out.println(\"Current State: \" + originator.getState());\t\t\n      \n      originator.getStateFromMemento(careTaker.get(0));\n      System.out.println(\"First saved State: \" + originator.getState());\n      originator.getStateFromMemento(careTaker.get(1));\n      System.out.println(\"Second saved State: \" + originator.getState());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Current State: State #4\nFirst saved State: State #2\nSecond saved State: State #3<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Memento pattern is used to restore state of an object to a previous state. Memento pattern falls under behavioral pattern category. Implementation Memento pattern uses three actor classes. Memento contains state of an object to be restored. Originator creates and stores states in Memento objects and Caretaker object is responsible to restore object state from [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/50"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=50"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/50\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 51,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/50\/revisions\/51"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=50"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=50"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=50"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 52,
        "date": "2020-06-18T06:49:49",
        "date_gmt": "2020-06-18T06:49:49",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=52"
        },
        "modified": "2020-06-18T06:49:49",
        "modified_gmt": "2020-06-18T06:49:49",
        "slug": "observer-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/observer-pattern\/",
        "title": {
            "rendered": "Observer Pattern"
        },
        "content": {
            "rendered": "\n<p>Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its depenedent objects are to be notified automatically. Observer pattern falls under behavioral pattern category.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>Observer pattern uses three actor classes. Subject, Observer and Client. Subject is an object having methods to attach and detach observers to a client object. We have created an abstract class&nbsp;<em>Observer<\/em>&nbsp;and a concrete class&nbsp;<em>Subject<\/em>&nbsp;that is extending class&nbsp;<em>Observer<\/em>.<\/p>\n\n\n\n<p><em>ObserverPatternDemo<\/em>, our demo class, will use&nbsp;<em>Subject<\/em>&nbsp;and concrete class object to show observer pattern in action.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/observer_pattern_uml_diagram.jpg\" alt=\"Observer Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Subject class.<\/p>\n\n\n\n<p><em>Subject.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class Subject {\n\t\n   private List&lt;Observer> observers = new ArrayList&lt;Observer>();\n   private int state;\n\n   public int getState() {\n      return state;\n   }\n\n   public void setState(int state) {\n      this.state = state;\n      notifyAllObservers();\n   }\n\n   public void attach(Observer observer){\n      observers.add(observer);\t\t\n   }\n\n   public void notifyAllObservers(){\n      for (Observer observer : observers) {\n         observer.update();\n      }\n   } \t\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create Observer class.<\/p>\n\n\n\n<p><em>Observer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class Observer {\n   protected Subject subject;\n   public abstract void update();\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create concrete observer classes<\/p>\n\n\n\n<p><em>BinaryObserver.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class BinaryObserver extends Observer{\n\n   public BinaryObserver(Subject subject){\n      this.subject = subject;\n      this.subject.attach(this);\n   }\n\n   @Override\n   public void update() {\n      System.out.println( \"Binary String: \" + Integer.toBinaryString( subject.getState() ) ); \n   }\n}<\/code><\/pre>\n\n\n\n<p><em>OctalObserver.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class OctalObserver extends Observer{\n\n   public OctalObserver(Subject subject){\n      this.subject = subject;\n      this.subject.attach(this);\n   }\n\n   @Override\n   public void update() {\n     System.out.println( \"Octal String: \" + Integer.toOctalString( subject.getState() ) ); \n   }\n}<\/code><\/pre>\n\n\n\n<p><em>HexaObserver.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class HexaObserver extends Observer{\n\n   public HexaObserver(Subject subject){\n      this.subject = subject;\n      this.subject.attach(this);\n   }\n\n   @Override\n   public void update() {\n      System.out.println( \"Hex String: \" + Integer.toHexString( subject.getState() ).toUpperCase() ); \n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use&nbsp;<em>Subject<\/em>&nbsp;and concrete observer objects.<\/p>\n\n\n\n<p><em>ObserverPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ObserverPatternDemo {\n   public static void main(String&#91;] args) {\n      Subject subject = new Subject();\n\n      new HexaObserver(subject);\n      new OctalObserver(subject);\n      new BinaryObserver(subject);\n\n      System.out.println(\"First state change: 15\");\t\n      subject.setState(15);\n      System.out.println(\"Second state change: 10\");\t\n      subject.setState(10);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>First state change: 15\nHex String: F\nOctal String: 17\nBinary String: 1111\nSecond state change: 10\nHex String: A\nOctal String: 12\nBinary String: 1010<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its depenedent objects are to be notified automatically. Observer pattern falls under behavioral pattern category. Implementation Observer pattern uses three actor classes. Subject, Observer and Client. Subject is an object having methods to attach and detach observers [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/52"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=52"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/52\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 53,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/52\/revisions\/53"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=52"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=52"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=52"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 54,
        "date": "2020-06-18T06:55:14",
        "date_gmt": "2020-06-18T06:55:14",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=54"
        },
        "modified": "2020-06-18T06:55:14",
        "modified_gmt": "2020-06-18T06:55:14",
        "slug": "state-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/state-pattern\/",
        "title": {
            "rendered": "State Pattern"
        },
        "content": {
            "rendered": "\n<p>In State pattern a class behavior changes based on its state. This type of design pattern comes under behavior pattern.<\/p>\n\n\n\n<p>In State pattern, we create objects which represent various states and a context object whose behavior varies as its state object changes.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>State<\/em>&nbsp;interface defining an action and concrete state classes implementing the&nbsp;<em>State<\/em>&nbsp;interface.&nbsp;<em>Context<\/em>&nbsp;is a class which carries a State.<\/p>\n\n\n\n<p><em>StatePatternDemo<\/em>, our demo class, will use&nbsp;<em>Context<\/em>&nbsp;and state objects to demonstrate change in Context behavior based on type of state it is in.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/state_pattern_uml_diagram.jpg\" alt=\"State Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface.<\/p>\n\n\n\n<p><em>State.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface State {\n   public void doAction(Context context);\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the same interface.<\/p>\n\n\n\n<p><em>StartState.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StartState implements State {\n\n   public void doAction(Context context) {\n      System.out.println(\"Player is in start state\");\n      context.setState(this);\t\n   }\n\n   public String toString(){\n      return \"Start State\";\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>StopState.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StopState implements State {\n\n   public void doAction(Context context) {\n      System.out.println(\"Player is in stop state\");\n      context.setState(this);\t\n   }\n\n   public String toString(){\n      return \"Stop State\";\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create&nbsp;<em>Context<\/em>&nbsp;Class.<\/p>\n\n\n\n<p><em>Context.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Context {\n   private State state;\n\n   public Context(){\n      state = null;\n   }\n\n   public void setState(State state){\n      this.state = state;\t\t\n   }\n\n   public State getState(){\n      return state;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the&nbsp;<em>Context<\/em>&nbsp;to see change in behaviour when&nbsp;<em>State<\/em>&nbsp;changes.<\/p>\n\n\n\n<p><em>StatePatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Player is in start state\nStart State\nPlayer is in stop state\nStop State<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Player is in start state\nStart State\nPlayer is in stop state\nStop State<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In State pattern a class behavior changes based on its state. This type of design pattern comes under behavior pattern. In State pattern, we create objects which represent various states and a context object whose behavior varies as its state object changes. Implementation We are going to create a&nbsp;State&nbsp;interface defining an action and concrete state [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/54"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=54"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/54\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 55,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/54\/revisions\/55"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=54"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=54"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=54"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 56,
        "date": "2020-06-18T07:00:02",
        "date_gmt": "2020-06-18T07:00:02",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=56"
        },
        "modified": "2020-06-18T07:00:02",
        "modified_gmt": "2020-06-18T07:00:02",
        "slug": "null-object-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/null-object-pattern\/",
        "title": {
            "rendered": "Null Object Pattern"
        },
        "content": {
            "rendered": "\n<p>In Null Object pattern, a null object replaces check of NULL object instance. Instead of putting if check for a null value, Null Object reflects a do nothing relationship. Such Null object can also be used to provide default behaviour in case data is not available.<\/p>\n\n\n\n<p>In Null Object pattern, we create an abstract class specifying various operations to be done, concrete classes extending this class and a null object class providing do nothing implemention of this class and will be used seemlessly where we need to check null value.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>AbstractCustomer<\/em>&nbsp;abstract class defining opearations. Here the name of the customer and concrete classes extending the&nbsp;<em>AbstractCustomer<\/em>&nbsp;class. A factory class&nbsp;<em>CustomerFactory<\/em>&nbsp;is created to return either&nbsp;<em>RealCustomer<\/em>&nbsp;or&nbsp;<em>NullCustomer<\/em>&nbsp;objects based on the name of customer passed to it.<\/p>\n\n\n\n<p><em>NullPatternDemo<\/em>, our demo class, will use&nbsp;<em>CustomerFactory<\/em>&nbsp;to demonstrate the use of Null Object pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/null_pattern_uml_diagram.jpg\" alt=\"Null Object Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an abstract class.<\/p>\n\n\n\n<p><em>AbstractCustomer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class AbstractCustomer {\n   protected String name;\n   public abstract boolean isNil();\n   public abstract String getName();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes extending the above class.<\/p>\n\n\n\n<p><em>RealCustomer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RealCustomer extends AbstractCustomer {\n\n   public RealCustomer(String name) {\n      this.name = name;\t\t\n   }\n   \n   @Override\n   public String getName() {\n      return name;\n   }\n   \n   @Override\n   public boolean isNil() {\n      return false;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>NullCustomer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class NullCustomer extends AbstractCustomer {\n\n   @Override\n   public String getName() {\n      return \"Not Available in Customer Database\";\n   }\n\n   @Override\n   public boolean isNil() {\n      return true;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create&nbsp;<em>CustomerFactory<\/em>&nbsp;Class.<\/p>\n\n\n\n<p><em>CustomerFactory.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CustomerFactory {\n\t\n   public static final String&#91;] names = {\"Rob\", \"Joe\", \"Julie\"};\n\n   public static AbstractCustomer getCustomer(String name){\n   \n      for (int i = 0; i &lt; names.length; i++) {\n         if (names&#91;i].equalsIgnoreCase(name)){\n            return new RealCustomer(name);\n         }\n      }\n      return new NullCustomer();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the&nbsp;<em>CustomerFactory<\/em>&nbsp;to get either&nbsp;<em>RealCustomer<\/em>&nbsp;or&nbsp;<em>NullCustomer<\/em>&nbsp;objects based on the name of customer passed to it.<\/p>\n\n\n\n<p><em>NullPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class NullPatternDemo {\n   public static void main(String&#91;] args) {\n\n      AbstractCustomer customer1 = CustomerFactory.getCustomer(\"Rob\");\n      AbstractCustomer customer2 = CustomerFactory.getCustomer(\"Bob\");\n      AbstractCustomer customer3 = CustomerFactory.getCustomer(\"Julie\");\n      AbstractCustomer customer4 = CustomerFactory.getCustomer(\"Laura\");\n\n      System.out.println(\"Customers\");\n      System.out.println(customer1.getName());\n      System.out.println(customer2.getName());\n      System.out.println(customer3.getName());\n      System.out.println(customer4.getName());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Customers\nRob\nNot Available in Customer Database\nJulie\nNot Available in Customer Database<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In Null Object pattern, a null object replaces check of NULL object instance. Instead of putting if check for a null value, Null Object reflects a do nothing relationship. Such Null object can also be used to provide default behaviour in case data is not available. In Null Object pattern, we create an abstract class [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5,
            1
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/56"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=56"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/56\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 57,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/56\/revisions\/57"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=56"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=56"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=56"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 58,
        "date": "2020-06-18T07:03:22",
        "date_gmt": "2020-06-18T07:03:22",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=58"
        },
        "modified": "2020-06-18T07:03:22",
        "modified_gmt": "2020-06-18T07:03:22",
        "slug": "strategy-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/strategy-pattern\/",
        "title": {
            "rendered": "Strategy Pattern"
        },
        "content": {
            "rendered": "\n<p>In Strategy pattern, a class behavior or its algorithm can be changed at run time. This type of design pattern comes under behavior pattern.<\/p>\n\n\n\n<p>In Strategy pattern, we create objects which represent various strategies and a context object whose behavior varies as per its strategy object. The strategy object changes the executing algorithm of the context object.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>Strategy<\/em>&nbsp;interface defining an action and concrete strategy classes implementing the&nbsp;<em>Strategy<\/em>&nbsp;interface.&nbsp;<em>Context<\/em>&nbsp;is a class which uses a Strategy.<\/p>\n\n\n\n<p><em>StrategyPatternDemo<\/em>, our demo class, will use&nbsp;<em>Context<\/em>&nbsp;and strategy objects to demonstrate change in Context behaviour based on strategy it deploys or uses.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/strategy_pattern_uml_diagram.jpg\" alt=\"Strategy Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an interface.<\/p>\n\n\n\n<p><em>Strategy.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Strategy {\n   public int doOperation(int num1, int num2);\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes implementing the same interface.<\/p>\n\n\n\n<p><em>OperationAdd.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class OperationAdd implements Strategy{\n   @Override\n   public int doOperation(int num1, int num2) {\n      return num1 + num2;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>OperationSubstract.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class OperationSubstract implements Strategy{\n   @Override\n   public int doOperation(int num1, int num2) {\n      return num1 - num2;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>OperationMultiply.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create&nbsp;<em>Context<\/em>&nbsp;Class.<\/p>\n\n\n\n<p><em>Context.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Context {\n   private Strategy strategy;\n\n   public Context(Strategy strategy){\n      this.strategy = strategy;\n   }\n\n   public int executeStrategy(int num1, int num2){\n      return strategy.doOperation(num1, num2);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the&nbsp;<em>Context<\/em>&nbsp;to see change in behaviour when it changes its&nbsp;<em>Strategy<\/em>.<\/p>\n\n\n\n<p><em>StrategyPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StrategyPatternDemo {\n   public static void main(String&#91;] args) {\n      Context context = new Context(new OperationAdd());\t\t\n      System.out.println(\"10 + 5 = \" + context.executeStrategy(10, 5));\n\n      context = new Context(new OperationSubstract());\t\t\n      System.out.println(\"10 - 5 = \" + context.executeStrategy(10, 5));\n\n      context = new Context(new OperationMultiply());\t\t\n      System.out.println(\"10 * 5 = \" + context.executeStrategy(10, 5));\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>10 + 5 = 15\n10 - 5 = 5\n10 * 5 = 50<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In Strategy pattern, a class behavior or its algorithm can be changed at run time. This type of design pattern comes under behavior pattern. In Strategy pattern, we create objects which represent various strategies and a context object whose behavior varies as per its strategy object. The strategy object changes the executing algorithm of the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/58"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=58"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/58\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 59,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/58\/revisions\/59"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=58"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=58"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=58"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 61,
        "date": "2020-06-18T07:09:06",
        "date_gmt": "2020-06-18T07:09:06",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=61"
        },
        "modified": "2020-06-18T07:09:06",
        "modified_gmt": "2020-06-18T07:09:06",
        "slug": "template-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/template-pattern\/",
        "title": {
            "rendered": "Template Pattern"
        },
        "content": {
            "rendered": "\n<p>In Template pattern, an abstract class exposes defined way(s)\/template(s) to execute its methods. Its subclasses can override the method implementation as per need but the invocation is to be in the same way as defined by an abstract class. This pattern comes under behavior pattern category.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>Game<\/em>&nbsp;abstract class defining operations with a template method set to be final so that it cannot be overridden.&nbsp;<em>Cricket<\/em>&nbsp;and&nbsp;<em>Football<\/em>&nbsp;are concrete classes that extend&nbsp;<em>Game<\/em>&nbsp;and override its methods.<\/p>\n\n\n\n<p><em>TemplatePatternDemo<\/em>, our demo class, will use&nbsp;<em>Game<\/em>&nbsp;to demonstrate use of template pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/template_pattern_uml_diagram.jpg\" alt=\"Template Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create an abstract class with a template method being final.<\/p>\n\n\n\n<p><em>Game.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class Game {\n   abstract void initialize();\n   abstract void startPlay();\n   abstract void endPlay();\n\n   \/\/template method\n   public final void play(){\n\n      \/\/initialize the game\n      initialize();\n\n      \/\/start game\n      startPlay();\n\n      \/\/end game\n      endPlay();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes extending the above class.<\/p>\n\n\n\n<p><em>Cricket.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Cricket extends Game {\n\n   @Override\n   void endPlay() {\n      System.out.println(\"Cricket Game Finished!\");\n   }\n\n   @Override\n   void initialize() {\n      System.out.println(\"Cricket Game Initialized! Start playing.\");\n   }\n\n   @Override\n   void startPlay() {\n      System.out.println(\"Cricket Game Started. Enjoy the game!\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Football.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Football extends Game {\n\n   @Override\n   void endPlay() {\n      System.out.println(\"Football Game Finished!\");\n   }\n\n   @Override\n   void initialize() {\n      System.out.println(\"Football Game Initialized! Start playing.\");\n   }\n\n   @Override\n   void startPlay() {\n      System.out.println(\"Football Game Started. Enjoy the game!\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Use the&nbsp;<em>Game<\/em>&#8216;s template method play() to demonstrate a defined way of playing game.<\/p>\n\n\n\n<p><em>TemplatePatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TemplatePatternDemo {\n   public static void main(String&#91;] args) {\n\n      Game game = new Cricket();\n      game.play();\n      System.out.println();\n      game = new Football();\n      game.play();\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cricket Game Initialized! Start playing.\nCricket Game Started. Enjoy the game!\nCricket Game Finished!\n\nFootball Game Initialized! Start playing.\nFootball Game Started. Enjoy the game!\nFootball Game Finished!<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In Template pattern, an abstract class exposes defined way(s)\/template(s) to execute its methods. Its subclasses can override the method implementation as per need but the invocation is to be in the same way as defined by an abstract class. This pattern comes under behavior pattern category. Implementation We are going to create a&nbsp;Game&nbsp;abstract class defining [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/61"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=61"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/61\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 62,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/61\/revisions\/62"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=61"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=61"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=61"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 63,
        "date": "2020-06-18T07:12:52",
        "date_gmt": "2020-06-18T07:12:52",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=63"
        },
        "modified": "2020-06-18T07:12:52",
        "modified_gmt": "2020-06-18T07:12:52",
        "slug": "visitor-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/visitor-pattern\/",
        "title": {
            "rendered": "Visitor Pattern"
        },
        "content": {
            "rendered": "\n<p>In Visitor pattern, we use a visitor class which changes the executing algorithm of an element class. By this way, execution algorithm of element can vary as and when visitor varies. This pattern comes under behavior pattern category. As per the pattern, element object has to accept the visitor object so that visitor object handles the operation on the element object.<\/p>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>ComputerPart<\/em>&nbsp;interface defining accept opearation.<em>Keyboard<\/em>,&nbsp;<em>Mouse<\/em>,&nbsp;<em>Monitor<\/em>&nbsp;and&nbsp;<em>Computer<\/em>&nbsp;are concrete classes implementing&nbsp;<em>ComputerPart<\/em>&nbsp;interface. We will define another interface&nbsp;<em>ComputerPartVisitor<\/em>&nbsp;which will define a visitor class operations.&nbsp;<em>Computer<\/em>&nbsp;uses concrete visitor to do corresponding action.<\/p>\n\n\n\n<p><em>VisitorPatternDemo<\/em>, our demo class, will use&nbsp;<em>Computer<\/em>&nbsp;and&nbsp;<em>ComputerPartVisitor<\/em>&nbsp;classes to demonstrate use of visitor pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/visitor_pattern_uml_diagram.jpg\" alt=\"Visitor Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Define an interface to represent element.<\/p>\n\n\n\n<p><em>ComputerPart.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface ComputerPart {\n   public void accept(ComputerPartVisitor computerPartVisitor);\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete classes extending the above class.<\/p>\n\n\n\n<p><em>Keyboard.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Keyboard implements ComputerPart {\n\n   @Override\n   public void accept(ComputerPartVisitor computerPartVisitor) {\n      computerPartVisitor.visit(this);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Monitor.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Monitor implements ComputerPart {\n\n   @Override\n   public void accept(ComputerPartVisitor computerPartVisitor) {\n      computerPartVisitor.visit(this);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Mouse.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Mouse implements ComputerPart {\n\n   @Override\n   public void accept(ComputerPartVisitor computerPartVisitor) {\n      computerPartVisitor.visit(this);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Computer.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Computer implements ComputerPart {\n\t\n   ComputerPart&#91;] parts;\n\n   public Computer(){\n      parts = new ComputerPart&#91;] {new Mouse(), new Keyboard(), new Monitor()};\t\t\n   } \n\n\n   @Override\n   public void accept(ComputerPartVisitor computerPartVisitor) {\n      for (int i = 0; i &lt; parts.length; i++) {\n         parts&#91;i].accept(computerPartVisitor);\n      }\n      computerPartVisitor.visit(this);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Define an interface to represent visitor.<\/p>\n\n\n\n<p><em>ComputerPartVisitor.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface ComputerPartVisitor {\n\tpublic void visit(Computer computer);\n\tpublic void visit(Mouse mouse);\n\tpublic void visit(Keyboard keyboard);\n\tpublic void visit(Monitor monitor);\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create concrete visitor implementing the above class.<\/p>\n\n\n\n<p><em>ComputerPartDisplayVisitor.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ComputerPartDisplayVisitor implements ComputerPartVisitor {\n\n   @Override\n   public void visit(Computer computer) {\n      System.out.println(\"Displaying Computer.\");\n   }\n\n   @Override\n   public void visit(Mouse mouse) {\n      System.out.println(\"Displaying Mouse.\");\n   }\n\n   @Override\n   public void visit(Keyboard keyboard) {\n      System.out.println(\"Displaying Keyboard.\");\n   }\n\n   @Override\n   public void visit(Monitor monitor) {\n      System.out.println(\"Displaying Monitor.\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Use the&nbsp;<em>ComputerPartDisplayVisitor<\/em>&nbsp;to display parts of&nbsp;<em>Computer<\/em>.<\/p>\n\n\n\n<p><em>VisitorPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class VisitorPatternDemo {\n   public static void main(String&#91;] args) {\n\n      ComputerPart computer = new Computer();\n      computer.accept(new ComputerPartDisplayVisitor());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Displaying Mouse.\nDisplaying Keyboard.\nDisplaying Monitor.\nDisplaying Computer.<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In Visitor pattern, we use a visitor class which changes the executing algorithm of an element class. By this way, execution algorithm of element can vary as and when visitor varies. This pattern comes under behavior pattern category. As per the pattern, element object has to accept the visitor object so that visitor object handles [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/63"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=63"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/63\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 64,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/63\/revisions\/64"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=63"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=63"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=63"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 65,
        "date": "2020-06-18T07:16:31",
        "date_gmt": "2020-06-18T07:16:31",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=65"
        },
        "modified": "2020-06-18T07:16:31",
        "modified_gmt": "2020-06-18T07:16:31",
        "slug": "mvc-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/mvc-pattern\/",
        "title": {
            "rendered": "MVC Pattern"
        },
        "content": {
            "rendered": "\n<p>MVC Pattern stands for Model-View-Controller Pattern. This pattern is used to separate application&#8217;s concerns.<\/p>\n\n\n\n<ul><li><strong>Model<\/strong>&nbsp;&#8211; Model represents an object or JAVA POJO carrying data. It can also have logic to update controller if its data changes.<\/li><li><strong>View<\/strong>&nbsp;&#8211; View represents the visualization of the data that model contains.<\/li><li><strong>Controller<\/strong>&nbsp;&#8211; Controller acts on both model and view. It controls the data flow into model object and updates the view whenever data changes. It keeps view and model separate.<\/li><\/ul>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>Student<\/em>&nbsp;object acting as a model.<em>StudentView<\/em>&nbsp;will be a view class which can print student details on console and&nbsp;<em>StudentController<\/em>&nbsp;is the controller class responsible to store data in&nbsp;<em>Student<\/em>&nbsp;object and update view&nbsp;<em>StudentView<\/em>&nbsp;accordingly.<\/p>\n\n\n\n<p><em>MVCPatternDemo<\/em>, our demo class, will use&nbsp;<em>StudentController<\/em>&nbsp;to demonstrate use of MVC pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/mvc_pattern_uml_diagram.jpg\" alt=\"MVC Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Model.<\/p>\n\n\n\n<p><em>Student.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Student {\n   private String rollNo;\n   private String name;\n   \n   public String getRollNo() {\n      return rollNo;\n   }\n   \n   public void setRollNo(String rollNo) {\n      this.rollNo = rollNo;\n   }\n   \n   public String getName() {\n      return name;\n   }\n   \n   public void setName(String name) {\n      this.name = name;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create View.<\/p>\n\n\n\n<p><em>StudentView.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StudentView {\n   public void printStudentDetails(String studentName, String studentRollNo){\n      System.out.println(\"Student: \");\n      System.out.println(\"Name: \" + studentName);\n      System.out.println(\"Roll No: \" + studentRollNo);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create Controller.<\/p>\n\n\n\n<p><em>StudentController.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StudentController {\n   private Student model;\n   private StudentView view;\n\n   public StudentController(Student model, StudentView view){\n      this.model = model;\n      this.view = view;\n   }\n\n   public void setStudentName(String name){\n      model.setName(name);\t\t\n   }\n\n   public String getStudentName(){\n      return model.getName();\t\t\n   }\n\n   public void setStudentRollNo(String rollNo){\n      model.setRollNo(rollNo);\t\t\n   }\n\n   public String getStudentRollNo(){\n      return model.getRollNo();\t\t\n   }\n\n   public void updateView(){\t\t\t\t\n      view.printStudentDetails(model.getName(), model.getRollNo());\n   }\t\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the&nbsp;<em>StudentController<\/em>&nbsp;methods to demonstrate MVC design pattern usage.<\/p>\n\n\n\n<p><em>MVCPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MVCPatternDemo {\n   public static void main(String&#91;] args) {\n\n      \/\/fetch student record based on his roll no from the database\n      Student model  = retriveStudentFromDatabase();\n\n      \/\/Create a view : to write student details on console\n      StudentView view = new StudentView();\n\n      StudentController controller = new StudentController(model, view);\n\n      controller.updateView();\n\n      \/\/update model data\n      controller.setStudentName(\"John\");\n\n      controller.updateView();\n   }\n\n   private static Student retriveStudentFromDatabase(){\n      Student student = new Student();\n      student.setName(\"Robert\");\n      student.setRollNo(\"10\");\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Student: \nName: Robert\nRoll No: 10\nStudent: \nName: John\nRoll No: 10<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MVC Pattern stands for Model-View-Controller Pattern. This pattern is used to separate application&#8217;s concerns. Model&nbsp;&#8211; Model represents an object or JAVA POJO carrying data. It can also have logic to update controller if its data changes. View&nbsp;&#8211; View represents the visualization of the data that model contains. Controller&nbsp;&#8211; Controller acts on both model and view. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/65"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=65"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/65\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 66,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/65\/revisions\/66"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=65"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=65"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=65"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 67,
        "date": "2020-06-18T07:20:28",
        "date_gmt": "2020-06-18T07:20:28",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=67"
        },
        "modified": "2020-06-18T07:20:28",
        "modified_gmt": "2020-06-18T07:20:28",
        "slug": "business-delegate-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/business-delegate-pattern\/",
        "title": {
            "rendered": "Business Delegate Pattern"
        },
        "content": {
            "rendered": "\n<p>Business Delegate Pattern is used to decouple presentation tier and business tier. It is basically use to reduce communication or remote lookup functionality to business tier code in presentation tier code. In business tier we have following entities.<\/p>\n\n\n\n<ul><li><strong>Client<\/strong>&nbsp;&#8211; Presentation tier code may be JSP, servlet or UI java code.<\/li><li><strong>Business Delegate<\/strong>&nbsp;&#8211; A single entry point class for client entities to provide access to Business Service methods.<\/li><li><strong>LookUp Service<\/strong>&nbsp;&#8211; Lookup service object is responsible to get relative business implementation and provide business object access to business delegate object.<\/li><li><strong>Business Service<\/strong>&nbsp;&#8211; Business Service interface. Concrete classes implement this business service to provide actual business implementation logic.<\/li><\/ul>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>Client<\/em>,&nbsp;<em>BusinessDelegate<\/em>,&nbsp;<em>BusinessService<\/em>,&nbsp;<em>LookUpService<\/em>,&nbsp;<em>JMSService<\/em>&nbsp;and&nbsp;<em>EJBService<\/em>&nbsp;representing various entities of Business Delegate patterns.<\/p>\n\n\n\n<p><em>BusinessDelegatePatternDemo<\/em>, our demo class, will use&nbsp;<em>BusinessDelegate<\/em>&nbsp;and&nbsp;<em>Client<\/em>&nbsp;to demonstrate use of Business Delegate pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/business_delegate_pattern_uml_diagram.jpg\" alt=\"Business Delegate Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create BusinessService Interface.<\/p>\n\n\n\n<p><em>BusinessService.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface BusinessService {\n   public void doProcessing();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete Service classes.<\/p>\n\n\n\n<p><em>EJBService.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EJBService implements BusinessService {\n\n   @Override\n   public void doProcessing() {\n      System.out.println(\"Processing task by invoking EJB Service\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>JMSService.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class JMSService implements BusinessService {\n\n   @Override\n   public void doProcessing() {\n      System.out.println(\"Processing task by invoking JMS Service\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create Business Lookup Service.<\/p>\n\n\n\n<p><em>BusinessLookUp.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class BusinessLookUp {\n   public BusinessService getBusinessService(String serviceType){\n   \n      if(serviceType.equalsIgnoreCase(\"EJB\")){\n         return new EJBService();\n      }\n      else {\n         return new JMSService();\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create Business Delegate.<\/p>\n\n\n\n<p><em>BusinessDelegate.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class BusinessDelegate {\n   private BusinessLookUp lookupService = new BusinessLookUp();\n   private BusinessService businessService;\n   private String serviceType;\n\n   public void setServiceType(String serviceType){\n      this.serviceType = serviceType;\n   }\n\n   public void doTask(){\n      businessService = lookupService.getBusinessService(serviceType);\n      businessService.doProcessing();\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Create Client.<\/p>\n\n\n\n<p><em>Client.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Client {\n\t\n   BusinessDelegate businessService;\n\n   public Client(BusinessDelegate businessService){\n      this.businessService  = businessService;\n   }\n\n   public void doTask(){\t\t\n      businessService.doTask();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Use BusinessDelegate and Client classes to demonstrate Business Delegate pattern.<\/p>\n\n\n\n<p><em>BusinessDelegatePatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class BusinessDelegatePatternDemo {\n\t\n   public static void main(String&#91;] args) {\n\n      BusinessDelegate businessDelegate = new BusinessDelegate();\n      businessDelegate.setServiceType(\"EJB\");\n\n      Client client = new Client(businessDelegate);\n      client.doTask();\n\n      businessDelegate.setServiceType(\"JMS\");\n      client.doTask();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 7<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Processing task by invoking EJB Service\nProcessing task by invoking JMS Service<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Business Delegate Pattern is used to decouple presentation tier and business tier. It is basically use to reduce communication or remote lookup functionality to business tier code in presentation tier code. In business tier we have following entities. Client&nbsp;&#8211; Presentation tier code may be JSP, servlet or UI java code. Business Delegate&nbsp;&#8211; A single entry [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/67"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=67"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/67\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 68,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/67\/revisions\/68"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=67"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=67"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=67"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 70,
        "date": "2020-06-18T07:27:40",
        "date_gmt": "2020-06-18T07:27:40",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=70"
        },
        "modified": "2020-06-18T07:27:40",
        "modified_gmt": "2020-06-18T07:27:40",
        "slug": "composite-entity-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/composite-entity-pattern\/",
        "title": {
            "rendered": "Composite Entity Pattern"
        },
        "content": {
            "rendered": "\n<p>Composite Entity pattern is used in EJB persistence mechanism. A Composite entity is an EJB entity bean which represents a graph of objects. When a composite entity is updated, internally dependent objects beans get updated automatically as being managed by EJB entity bean. Following are the participants in Composite Entity Bean.<\/p>\n\n\n\n<ul><li><strong>Composite Entity<\/strong>&nbsp;&#8211; It is primary entity bean. It can be coarse grained or can contain a coarse grained object to be used for persistence purpose.<\/li><li><strong>Coarse-Grained Object<\/strong>&nbsp;&#8211; This object contains dependent objects. It has its own life cycle and also manages life cycle of dependent objects.<\/li><li><strong>Dependent Object<\/strong>&nbsp;&#8211; Dependent object is an object which depends on coarse grained object for its persistence lifecycle.<\/li><li><strong>Strategies<\/strong>&nbsp;&#8211; Strategies represents how to implement a Composite Entity.<\/li><\/ul>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create&nbsp;<em>CompositeEntity<\/em>&nbsp;object acting as CompositeEntity.&nbsp;<em>CoarseGrainedObject<\/em>&nbsp;will be a class which contains dependent objects.&nbsp;<em>CompositeEntityPatternDemo<\/em>, our demo class will use&nbsp;<em>Client<\/em>&nbsp;class to demonstrate use of Composite Entity pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/compositeentity_pattern_uml_diagram.jpg\" alt=\"Composite Entity Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Dependent Objects.<\/p>\n\n\n\n<p><em>DependentObject1.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DependentObject1 {\n\t\n   private String data;\n\n   public void setData(String data){\n      this.data = data; \n   } \n\n   public String getData(){\n      return data;\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>DependentObject2.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DependentObject2 {\n\t\n   private String data;\n\n   public void setData(String data){\n      this.data = data; \n   } \n\n   public String getData(){\n      return data;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create Coarse Grained Object.<\/p>\n\n\n\n<p><em>CoarseGrainedObject.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CoarseGrainedObject {\n   DependentObject1 do1 = new DependentObject1();\n   DependentObject2 do2 = new DependentObject2();\n\n   public void setData(String data1, String data2){\n      do1.setData(data1);\n      do2.setData(data2);\n   }\n\n   public String&#91;] getData(){\n      return new String&#91;] {do1.getData(),do2.getData()};\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create Composite Entity.<\/p>\n\n\n\n<p><em>CompositeEntity.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CompositeEntity {\n   private CoarseGrainedObject cgo = new CoarseGrainedObject();\n\n   public void setData(String data1, String data2){\n      cgo.setData(data1, data2);\n   }\n\n   public String&#91;] getData(){\n      return cgo.getData();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create Client class to use Composite Entity.<\/p>\n\n\n\n<p><em>Client.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Client {\n   private CompositeEntity compositeEntity = new CompositeEntity();\n\n   public void printData(){\n   \n      for (int i = 0; i &lt; compositeEntity.getData().length; i++) {\n         System.out.println(\"Data: \" + compositeEntity.getData()&#91;i]);\n      }\n   }\n\n   public void setData(String data1, String data2){\n      compositeEntity.setData(data1, data2);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Use the&nbsp;<em>Client<\/em>&nbsp;to demonstrate Composite Entity design pattern usage.<\/p>\n\n\n\n<p><em>CompositeEntityPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CompositeEntityPatternDemo {\n   public static void main(String&#91;] args) {\n   \n       Client client = new Client();\n       client.setData(\"Test\", \"Data\");\n       client.printData();\n       client.setData(\"Second Test\", \"Data1\");\n       client.printData();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Data: Test\nData: Data\nData: Second Test\nData: Data1<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Composite Entity pattern is used in EJB persistence mechanism. A Composite entity is an EJB entity bean which represents a graph of objects. When a composite entity is updated, internally dependent objects beans get updated automatically as being managed by EJB entity bean. Following are the participants in Composite Entity Bean. Composite Entity&nbsp;&#8211; It is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/70"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=70"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/70\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 71,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/70\/revisions\/71"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=70"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=70"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=70"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 72,
        "date": "2020-06-18T07:30:25",
        "date_gmt": "2020-06-18T07:30:25",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=72"
        },
        "modified": "2020-06-18T07:30:25",
        "modified_gmt": "2020-06-18T07:30:25",
        "slug": "data-access-object-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/data-access-object-pattern\/",
        "title": {
            "rendered": "Data Access Object Pattern"
        },
        "content": {
            "rendered": "\n<p>Data Access Object Pattern or DAO pattern is used to separate low level data accessing API or operations from high level business services. Following are the participants in Data Access Object Pattern.<\/p>\n\n\n\n<ul><li><strong>Data Access Object Interface<\/strong>&nbsp;&#8211; This interface defines the standard operations to be performed on a model object(s).<\/li><li><strong>Data Access Object concrete class<\/strong>&nbsp;&#8211; This class implements above interface. This class is responsible to get data from a data source which can be database \/ xml or any other storage mechanism.<\/li><li><strong>Model Object or Value Object<\/strong>&nbsp;&#8211; This object is simple POJO containing get\/set methods to store data retrieved using DAO class.<\/li><\/ul>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>Student<\/em>&nbsp;object acting as a Model or Value Object.<em>StudentDao<\/em>&nbsp;is Data Access Object Interface.<em>StudentDaoImpl<\/em>&nbsp;is concrete class implementing Data Access Object Interface.&nbsp;<em>DaoPatternDemo<\/em>, our demo class, will use&nbsp;<em>StudentDao<\/em>&nbsp;to demonstrate the use of Data Access Object pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/dao_pattern_uml_diagram.jpg\" alt=\"Data Access Object Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Value Object.<\/p>\n\n\n\n<p><em>Student.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Student {\n   private String name;\n   private int rollNo;\n\n   Student(String name, int rollNo){\n      this.name = name;\n      this.rollNo = rollNo;\n   }\n\n   public String getName() {\n      return name;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n\n   public int getRollNo() {\n      return rollNo;\n   }\n\n   public void setRollNo(int rollNo) {\n      this.rollNo = rollNo;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create Data Access Object Interface.<\/p>\n\n\n\n<p><em>StudentDao.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.List;\n\npublic interface StudentDao {\n   public List&lt;Student> getAllStudents();\n   public Student getStudent(int rollNo);\n   public void updateStudent(Student student);\n   public void deleteStudent(Student student);\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create concrete class implementing above interface.<\/p>\n\n\n\n<p><em>StudentDaoImpl.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class StudentDaoImpl implements StudentDao {\n\t\n   \/\/list is working as a database\n   List&lt;Student> students;\n\n   public StudentDaoImpl(){\n      students = new ArrayList&lt;Student>();\n      Student student1 = new Student(\"Robert\",0);\n      Student student2 = new Student(\"John\",1);\n      students.add(student1);\n      students.add(student2);\t\t\n   }\n   @Override\n   public void deleteStudent(Student student) {\n      students.remove(student.getRollNo());\n      System.out.println(\"Student: Roll No \" + student.getRollNo() + \", deleted from database\");\n   }\n\n   \/\/retrive list of students from the database\n   @Override\n   public List&lt;Student> getAllStudents() {\n      return students;\n   }\n\n   @Override\n   public Student getStudent(int rollNo) {\n      return students.get(rollNo);\n   }\n\n   @Override\n   public void updateStudent(Student student) {\n      students.get(student.getRollNo()).setName(student.getName());\n      System.out.println(\"Student: Roll No \" + student.getRollNo() + \", updated in the database\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the&nbsp;<em>StudentDao<\/em>&nbsp;to demonstrate Data Access Object pattern usage.<\/p>\n\n\n\n<p><em>DaoPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DaoPatternDemo {\n   public static void main(String&#91;] args) {\n      StudentDao studentDao = new StudentDaoImpl();\n\n      \/\/print all students\n      for (Student student : studentDao.getAllStudents()) {\n         System.out.println(\"Student: &#91;RollNo : \" + student.getRollNo() + \", Name : \" + student.getName() + \" ]\");\n      }\n\n\n      \/\/update student\n      Student student =studentDao.getAllStudents().get(0);\n      student.setName(\"Michael\");\n      studentDao.updateStudent(student);\n\n      \/\/get the student\n      studentDao.getStudent(0);\n      System.out.println(\"Student: &#91;RollNo : \" + student.getRollNo() + \", Name : \" + student.getName() + \" ]\");\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Student: &#91;RollNo : 0, Name : Robert ]\nStudent: &#91;RollNo : 1, Name : John ]\nStudent: Roll No 0, updated in the database\nStudent: &#91;RollNo : 0, Name : Michael ]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Data Access Object Pattern or DAO pattern is used to separate low level data accessing API or operations from high level business services. Following are the participants in Data Access Object Pattern. Data Access Object Interface&nbsp;&#8211; This interface defines the standard operations to be performed on a model object(s). Data Access Object concrete class&nbsp;&#8211; This [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/72"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=72"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/72\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 73,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/72\/revisions\/73"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=72"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=72"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=72"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 74,
        "date": "2020-06-18T07:32:23",
        "date_gmt": "2020-06-18T07:32:23",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=74"
        },
        "modified": "2020-06-18T07:32:23",
        "modified_gmt": "2020-06-18T07:32:23",
        "slug": "front-controller-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/front-controller-pattern\/",
        "title": {
            "rendered": "Front Controller Pattern"
        },
        "content": {
            "rendered": "\n<p>The front controller design pattern is used to provide a centralized request handling mechanism so that all requests will be handled by a single handler. This handler can do the authentication\/ authorization\/ logging or tracking of request and then pass the requests to corresponding handlers. Following are the entities of this type of design pattern.<\/p>\n\n\n\n<ul><li><strong>Front Controller<\/strong>&nbsp;&#8211; Single handler for all kinds of requests coming to the application (either web based\/ desktop based).<\/li><li><strong>Dispatcher<\/strong>&nbsp;&#8211; Front Controller may use a dispatcher object which can dispatch the request to corresponding specific handler.<\/li><li><strong>View<\/strong>&nbsp;&#8211; Views are the object for which the requests are made.<\/li><\/ul>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>FrontController<\/em>&nbsp;and&nbsp;<em>Dispatcher<\/em>&nbsp;to act as Front Controller and Dispatcher correspondingly.&nbsp;<em>HomeView<\/em>&nbsp;and&nbsp;<em>StudentView<\/em>&nbsp;represent various views for which requests can come to front controller.<\/p>\n\n\n\n<p><em>FrontControllerPatternDemo<\/em>, our demo class, will use&nbsp;<em>FrontController<\/em>&nbsp;to demonstrate Front Controller Design Pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/frontcontroller_pattern_uml_diagram.jpg\" alt=\"Front Controller Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Views.<\/p>\n\n\n\n<p><em>HomeView.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class HomeView {\n   public void show(){\n      System.out.println(\"Displaying Home Page\");\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>StudentView.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StudentView {\n   public void show(){\n      System.out.println(\"Displaying Student Page\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create Dispatcher.<\/p>\n\n\n\n<p><em>Dispatcher.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Dispatcher {\n   private StudentView studentView;\n   private HomeView homeView;\n   \n   public Dispatcher(){\n      studentView = new StudentView();\n      homeView = new HomeView();\n   }\n\n   public void dispatch(String request){\n      if(request.equalsIgnoreCase(\"STUDENT\")){\n         studentView.show();\n      }\n      else{\n         homeView.show();\n      }\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create FrontController<\/p>\n\n\n\n<p><em>FrontController.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FrontController {\n\t\n   private Dispatcher dispatcher;\n\n   public FrontController(){\n      dispatcher = new Dispatcher();\n   }\n\n   private boolean isAuthenticUser(){\n      System.out.println(\"User is authenticated successfully.\");\n      return true;\n   }\n\n   private void trackRequest(String request){\n      System.out.println(\"Page requested: \" + request);\n   }\n\n   public void dispatchRequest(String request){\n      \/\/log each request\n      trackRequest(request);\n      \n      \/\/authenticate the user\n      if(isAuthenticUser()){\n         dispatcher.dispatch(request);\n      }\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Use the&nbsp;<em>FrontController<\/em>&nbsp;to demonstrate Front Controller Design Pattern.<\/p>\n\n\n\n<p><em>FrontControllerPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FrontControllerPatternDemo {\n   public static void main(String&#91;] args) {\n   \n      FrontController frontController = new FrontController();\n      frontController.dispatchRequest(\"HOME\");\n      frontController.dispatchRequest(\"STUDENT\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Page requested: HOME\nUser is authenticated successfully.\nDisplaying Home Page\nPage requested: STUDENT\nUser is authenticated successfully.\nDisplaying Student Page<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The front controller design pattern is used to provide a centralized request handling mechanism so that all requests will be handled by a single handler. This handler can do the authentication\/ authorization\/ logging or tracking of request and then pass the requests to corresponding handlers. Following are the entities of this type of design pattern. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/74"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=74"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/74\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 75,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/74\/revisions\/75"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=74"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=74"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=74"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 76,
        "date": "2020-06-18T07:35:13",
        "date_gmt": "2020-06-18T07:35:13",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=76"
        },
        "modified": "2020-06-18T07:35:13",
        "modified_gmt": "2020-06-18T07:35:13",
        "slug": "intercepting-filter-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/intercepting-filter-pattern\/",
        "title": {
            "rendered": "Intercepting Filter Pattern"
        },
        "content": {
            "rendered": "\n<p>The intercepting filter design pattern is used when we want to do some pre-processing \/ post-processing with request or response of the application. Filters are defined and applied on the request before passing the request to actual target application. Filters can do the authentication\/ authorization\/ logging or tracking of request and then pass the requests to corresponding handlers. Following are the entities of this type of design pattern.<\/p>\n\n\n\n<ul><li><strong>Filter<\/strong>&nbsp;&#8211; Filter which will performs certain task prior or after execution of request by request handler.<\/li><li><strong>Filter Chain<\/strong>&nbsp;&#8211; Filter Chain carries multiple filters and help to execute them in defined order on target.<\/li><li><strong>Target<\/strong>&nbsp;&#8211; Target object is the request handler<\/li><li><strong>Filter Manager<\/strong>&nbsp;&#8211; Filter Manager manages the filters and Filter Chain.<\/li><li><strong>Client<\/strong>&nbsp;&#8211; Client is the object who sends request to the Target object.<\/li><\/ul>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>FilterChain<\/em>,<em>FilterManager<\/em>,&nbsp;<em>Target<\/em>,&nbsp;<em>Client<\/em>&nbsp;as various objects representing our entities.<em>AuthenticationFilter<\/em>&nbsp;and&nbsp;<em>DebugFilter<\/em>&nbsp;represent concrete filters.<\/p>\n\n\n\n<p><em>InterceptingFilterDemo<\/em>, our demo class, will use&nbsp;<em>Client<\/em>&nbsp;to demonstrate Intercepting Filter Design Pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/interceptingfilter_pattern_uml_diagram.jpg\" alt=\"Intercepting Filter Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Filter interface.<\/p>\n\n\n\n<p><em>Filter.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Filter {\n   public void execute(String request);\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete filters.<\/p>\n\n\n\n<p><em>AuthenticationFilter.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class AuthenticationFilter implements Filter {\n   public void execute(String request){\n      System.out.println(\"Authenticating request: \" + request);\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>DebugFilter.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DebugFilter implements Filter {\n   public void execute(String request){\n      System.out.println(\"request log: \" + request);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create Target<\/p>\n\n\n\n<p><em>Target.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Target {\n   public void execute(String request){\n      System.out.println(\"Executing request: \" + request);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create Filter Chain<\/p>\n\n\n\n<p><em>FilterChain.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class FilterChain {\n   private List&lt;Filter> filters = new ArrayList&lt;Filter>();\n   private Target target;\n\n   public void addFilter(Filter filter){\n      filters.add(filter);\n   }\n\n   public void execute(String request){\n      for (Filter filter : filters) {\n         filter.execute(request);\n      }\n      target.execute(request);\n   }\n\n   public void setTarget(Target target){\n      this.target = target;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Create Filter Manager<\/p>\n\n\n\n<p><em>FilterManager.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FilterManager {\n   FilterChain filterChain;\n\n   public FilterManager(Target target){\n      filterChain = new FilterChain();\n      filterChain.setTarget(target);\n   }\n   public void setFilter(Filter filter){\n      filterChain.addFilter(filter);\n   }\n\n   public void filterRequest(String request){\n      filterChain.execute(request);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Create Client<\/p>\n\n\n\n<p><em>Client.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Client {\n   FilterManager filterManager;\n\n   public void setFilterManager(FilterManager filterManager){\n      this.filterManager = filterManager;\n   }\n\n   public void sendRequest(String request){\n      filterManager.filterRequest(request);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 7<\/h2>\n\n\n\n<p>Use the&nbsp;<em>Client<\/em>&nbsp;to demonstrate Intercepting Filter Design Pattern.<\/p>\n\n\n\n<p><em>InterceptingFilterDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class InterceptingFilterDemo {\n   public static void main(String&#91;] args) {\n      FilterManager filterManager = new FilterManager(new Target());\n      filterManager.setFilter(new AuthenticationFilter());\n      filterManager.setFilter(new DebugFilter());\n\n      Client client = new Client();\n      client.setFilterManager(filterManager);\n      client.sendRequest(\"HOME\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 8<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Authenticating request: HOME\nrequest log: HOME\nExecuting request: HOME<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The intercepting filter design pattern is used when we want to do some pre-processing \/ post-processing with request or response of the application. Filters are defined and applied on the request before passing the request to actual target application. Filters can do the authentication\/ authorization\/ logging or tracking of request and then pass the requests [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/76"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=76"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/76\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 77,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/76\/revisions\/77"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=76"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=76"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=76"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 78,
        "date": "2020-06-18T07:38:01",
        "date_gmt": "2020-06-18T07:38:01",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=78"
        },
        "modified": "2020-06-18T07:38:01",
        "modified_gmt": "2020-06-18T07:38:01",
        "slug": "service-locator-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/service-locator-pattern\/",
        "title": {
            "rendered": "Service Locator Pattern"
        },
        "content": {
            "rendered": "\n<p>The service locator design pattern is used when we want to locate various services using JNDI lookup. Considering high cost of looking up JNDI for a service, Service Locator pattern makes use of caching technique. For the first time a service is required, Service Locator looks up in JNDI and caches the service object. Further lookup or same service via Service Locator is done in its cache which improves the performance of application to great extent. Following are the entities of this type of design pattern.<\/p>\n\n\n\n<ul><li><strong>Service<\/strong>&nbsp;&#8211; Actual Service which will process the request. Reference of such service is to be looked upon in JNDI server.<\/li><li><strong>Context \/ Initial Context<\/strong>&nbsp;&#8211; JNDI Context carries the reference to service used for lookup purpose.<\/li><li><strong>Service Locator<\/strong>&nbsp;&#8211; Service Locator is a single point of contact to get services by JNDI lookup caching the services.<\/li><li><strong>Cache<\/strong>&nbsp;&#8211; Cache to store references of services to reuse them<\/li><li><strong>Client<\/strong>&nbsp;&#8211; Client is the object that invokes the services via ServiceLocator.<\/li><\/ul>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>ServiceLocator<\/em>,<em>InitialContext<\/em>,&nbsp;<em>Cache<\/em>,&nbsp;<em>Service<\/em>&nbsp;as various objects representing our entities.<em>Service1<\/em>&nbsp;and&nbsp;<em>Service2<\/em>&nbsp;represent concrete services.<\/p>\n\n\n\n<p><em>ServiceLocatorPatternDemo<\/em>, our demo class, is acting as a client here and will use&nbsp;<em>ServiceLocator<\/em>&nbsp;to demonstrate Service Locator Design Pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/servicelocator_pattern_uml_diagram.jpg\" alt=\"Service Locator Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Service interface.<\/p>\n\n\n\n<p><em>Service.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface Service {\n   public String getName();\n   public void execute();\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create concrete services.<\/p>\n\n\n\n<p><em>Service1.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Service1 implements Service {\n   public void execute(){\n      System.out.println(\"Executing Service1\");\n   }\n\n   @Override\n   public String getName() {\n      return \"Service1\";\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>Service2.java<\/em>x<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Service2 implements Service {\n   public void execute(){\n      System.out.println(\"Executing Service2\");\n   }\n\n   @Override\n   public String getName() {\n      return \"Service2\";\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Create InitialContext for JNDI lookup<\/p>\n\n\n\n<p><em>InitialContext.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class InitialContext {\n   public Object lookup(String jndiName){\n   \n      if(jndiName.equalsIgnoreCase(\"SERVICE1\")){\n         System.out.println(\"Looking up and creating a new Service1 object\");\n         return new Service1();\n      }\n      else if (jndiName.equalsIgnoreCase(\"SERVICE2\")){\n         System.out.println(\"Looking up and creating a new Service2 object\");\n         return new Service2();\n      }\n      return null;\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Create Cache<\/p>\n\n\n\n<p><em>Cache.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class Cache {\n\n   private List&lt;Service> services;\n\n   public Cache(){\n      services = new ArrayList&lt;Service>();\n   }\n\n   public Service getService(String serviceName){\n   \n      for (Service service : services) {\n         if(service.getName().equalsIgnoreCase(serviceName)){\n            System.out.println(\"Returning cached  \" + serviceName + \" object\");\n            return service;\n         }\n      }\n      return null;\n   }\n\n   public void addService(Service newService){\n      boolean exists = false;\n      \n      for (Service service : services) {\n         if(service.getName().equalsIgnoreCase(newService.getName())){\n            exists = true;\n         }\n      }\n      if(!exists){\n         services.add(newService);\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 5<\/h2>\n\n\n\n<p>Create Service Locator<\/p>\n\n\n\n<p><em>ServiceLocator.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ServiceLocator {\n   private static Cache cache;\n\n   static {\n      cache = new Cache();\t\t\n   }\n\n   public static Service getService(String jndiName){\n\n      Service service = cache.getService(jndiName);\n\n      if(service != null){\n         return service;\n      }\n\n      InitialContext context = new InitialContext();\n      Service service1 = (Service)context.lookup(jndiName);\n      cache.addService(service1);\n      return service1;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 6<\/h2>\n\n\n\n<p>Use the&nbsp;<em>ServiceLocator<\/em>&nbsp;to demonstrate Service Locator Design Pattern.<\/p>\n\n\n\n<p><em>ServiceLocatorPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ServiceLocatorPatternDemo {\n   public static void main(String&#91;] args) {\n      Service service = ServiceLocator.getService(\"Service1\");\n      service.execute();\n      service = ServiceLocator.getService(\"Service2\");\n      service.execute();\n      service = ServiceLocator.getService(\"Service1\");\n      service.execute();\n      service = ServiceLocator.getService(\"Service2\");\n      service.execute();\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 7<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Looking up and creating a new Service1 object\nExecuting Service1\nLooking up and creating a new Service2 object\nExecuting Service2\nReturning cached  Service1 object\nExecuting Service1\nReturning cached  Service2 object\nExecuting Service2<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The service locator design pattern is used when we want to locate various services using JNDI lookup. Considering high cost of looking up JNDI for a service, Service Locator pattern makes use of caching technique. For the first time a service is required, Service Locator looks up in JNDI and caches the service object. Further [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/78"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=78"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/78\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 79,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/78\/revisions\/79"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=78"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=78"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=78"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 80,
        "date": "2020-06-18T07:39:35",
        "date_gmt": "2020-06-18T07:39:35",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=80"
        },
        "modified": "2020-06-18T07:39:35",
        "modified_gmt": "2020-06-18T07:39:35",
        "slug": "transfer-object-pattern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/transfer-object-pattern\/",
        "title": {
            "rendered": "Transfer Object Pattern"
        },
        "content": {
            "rendered": "\n<p>The Transfer Object pattern is used when we want to pass data with multiple attributes in one shot from client to server. Transfer object is also known as Value Object. Transfer Object is a simple POJO class having getter\/setter methods and is serializable so that it can be transferred over the network. It does not have any behavior. Server Side business class normally fetches data from the database and fills the POJO and send it to the client or pass it by value. For client, transfer object is read-only. Client can create its own transfer object and pass it to server to update values in database in one shot. Following are the entities of this type of design pattern.<\/p>\n\n\n\n<ul><li><strong>Business Object<\/strong>&nbsp;&#8211; Business Service fills the Transfer Object with data.<\/li><li><strong>Transfer Object<\/strong>&nbsp;&#8211; Simple POJO having methods to set\/get attributes only.<\/li><li><strong>Client<\/strong>&nbsp;&#8211; Client either requests or sends the Transfer Object to Business Object.<\/li><\/ul>\n\n\n\n<h2>Implementation<\/h2>\n\n\n\n<p>We are going to create a&nbsp;<em>StudentBO<\/em>&nbsp;as Business Object,<em>Student<\/em>&nbsp;as Transfer Object representing our entities.<\/p>\n\n\n\n<p><em>TransferObjectPatternDemo<\/em>, our demo class, is acting as a client here and will use&nbsp;<em>StudentBO<\/em>&nbsp;and&nbsp;<em>Student<\/em>&nbsp;to demonstrate Transfer Object Design Pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/design_pattern\/images\/transferobject_pattern_uml_diagram.jpg\" alt=\"Transfer Object Pattern UML Diagram\"\/><\/figure>\n\n\n\n<h2>Step 1<\/h2>\n\n\n\n<p>Create Transfer Object.<\/p>\n\n\n\n<p><em>StudentVO.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StudentVO {\n   private String name;\n   private int rollNo;\n\n   StudentVO(String name, int rollNo){\n      this.name = name;\n      this.rollNo = rollNo;\n   }\n\n   public String getName() {\n      return name;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n\n   public int getRollNo() {\n      return rollNo;\n   }\n\n   public void setRollNo(int rollNo) {\n      this.rollNo = rollNo;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 2<\/h2>\n\n\n\n<p>Create Business Object.<\/p>\n\n\n\n<p><em>StudentBO.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class StudentBO {\n\t\n   \/\/list is working as a database\n   List&lt;StudentVO> students;\n\n   public StudentBO(){\n      students = new ArrayList&lt;StudentVO>();\n      StudentVO student1 = new StudentVO(\"Robert\",0);\n      StudentVO student2 = new StudentVO(\"John\",1);\n      students.add(student1);\n      students.add(student2);\t\t\n   }\n   public void deleteStudent(StudentVO student) {\n      students.remove(student.getRollNo());\n      System.out.println(\"Student: Roll No \" + student.getRollNo() + \", deleted from database\");\n   }\n\n   \/\/retrive list of students from the database\n   public List&lt;StudentVO> getAllStudents() {\n      return students;\n   }\n\n   public StudentVO getStudent(int rollNo) {\n      return students.get(rollNo);\n   }\n\n   public void updateStudent(StudentVO student) {\n      students.get(student.getRollNo()).setName(student.getName());\n      System.out.println(\"Student: Roll No \" + student.getRollNo() +\", updated in the database\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 3<\/h2>\n\n\n\n<p>Use the&nbsp;<em>StudentBO<\/em>&nbsp;to demonstrate Transfer Object Design Pattern.<\/p>\n\n\n\n<p><em>TransferObjectPatternDemo.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TransferObjectPatternDemo {\n   public static void main(String&#91;] args) {\n      StudentBO studentBusinessObject = new StudentBO();\n\n      \/\/print all students\n      for (StudentVO student : studentBusinessObject.getAllStudents()) {\n         System.out.println(\"Student: &#91;RollNo : \" + student.getRollNo() + \", Name : \" + student.getName() + \" ]\");\n      }\n\n      \/\/update student\n      StudentVO student = studentBusinessObject.getAllStudents().get(0);\n      student.setName(\"Michael\");\n      studentBusinessObject.updateStudent(student);\n\n      \/\/get the student\n      student = studentBusinessObject.getStudent(0);\n      System.out.println(\"Student: &#91;RollNo : \" + student.getRollNo() + \", Name : \" + student.getName() + \" ]\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 4<\/h2>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Student: &#91;RollNo : 0, Name : Robert ]\nStudent: &#91;RollNo : 1, Name : John ]\nStudent: Roll No 0, updated in the database\nStudent: &#91;RollNo : 0, Name : Michael ]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The Transfer Object pattern is used when we want to pass data with multiple attributes in one shot from client to server. Transfer object is also known as Value Object. Transfer Object is a simple POJO class having getter\/setter methods and is serializable so that it can be transferred over the network. It does not [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/80"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=80"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/80\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 81,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/80\/revisions\/81"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=80"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=80"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=80"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]