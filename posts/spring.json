[{"id":4586,"date":"2020-06-20T04:47:45","date_gmt":"2020-06-20T04:47:45","guid":{"rendered":"http://java.foobrdigital.com/?p=235"},"modified":"2020-06-20T04:47:45","modified_gmt":"2020-06-20T04:47:45","slug":"overview-2-4","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/overview-2-4/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p>Spring is the most popular application development framework for enterprise Java. Millions of developers around the world use Spring Framework to create high performing, easily testable, and reusable code.</p>\n\n\n\n<p>Spring framework is an open source Java platform. It was initially written by Rod Johnson and was first released under the Apache 2.0 license in June 2003.</p>\n\n\n\n<p>Spring is lightweight when it comes to size and transparency. The basic version of Spring framework is around 2MB.</p>\n\n\n\n<p>The core features of the Spring Framework can be used in developing any Java application, but there are extensions for building web applications on top of the Java EE platform. Spring framework targets to make J2EE development easier to use and promotes good programming practices by enabling a POJO-based programming model.</p>\n\n\n\n<h2>Benefits of Using the Spring Framework</h2>\n\n\n\n<p>Following is the list of few of the great benefits of using Spring Framework −</p>\n\n\n\n<ul><li>Spring enables developers to develop enterprise-class applications using POJOs. The benefit of using only POJOs is that you do not need an EJB container product such as an application server but you have the option of using only a robust servlet container such as Tomcat or some commercial product.</li><li>Spring is organized in a modular fashion. Even though the number of packages and classes are substantial, you have to worry only about the ones you need and ignore the rest.</li><li>Spring does not reinvent the wheel, instead it truly makes use of some of the existing technologies like several ORM frameworks, logging frameworks, JEE, Quartz and JDK timers, and other view technologies.</li><li>Testing an application written with Spring is simple because environment-dependent code is moved into this framework. Furthermore, by using JavaBeanstyle POJOs, it becomes easier to use dependency injection for injecting test data.</li><li>Spring&#8217;s web framework is a well-designed web MVC framework, which provides a great alternative to web frameworks such as Struts or other over-engineered or less popular web frameworks.</li><li>Spring provides a convenient API to translate technology-specific exceptions (thrown by JDBC, Hibernate, or JDO, for example) into consistent, unchecked exceptions.</li><li>Lightweight IoC containers tend to be lightweight, especially when compared to EJB containers, for example. This is beneficial for developing and deploying applications on computers with limited memory and CPU resources.</li><li>Spring provides a consistent transaction management interface that can scale down to a local transaction (using a single database, for example) and scale up to global transactions (using JTA, for example).</li></ul>\n\n\n\n<h2>Dependency Injection (DI)</h2>\n\n\n\n<p>The technology that Spring is most identified with is the&nbsp;<strong>Dependency Injection (DI)</strong>&nbsp;flavor of Inversion of Control. The&nbsp;<strong>Inversion of Control (IoC)</strong>&nbsp;is a general concept, and it can be expressed in many different ways. Dependency Injection is merely one concrete example of Inversion of Control.</p>\n\n\n\n<p>When writing a complex Java application, application classes should be as independent as possible of other Java classes to increase the possibility to reuse these classes and to test them independently of other classes while unit testing. Dependency Injection helps in gluing these classes together and at the same time keeping them independent.</p>\n\n\n\n<p>What is dependency injection exactly? Let&#8217;s look at these two words separately. Here the dependency part translates into an association between two classes. For example, class A is dependent of class B. Now, let&#8217;s look at the second part, injection. All this means is, class B will get injected into class A by the IoC.</p>\n\n\n\n<p>Dependency injection can happen in the way of passing parameters to the constructor or by post-construction using setter methods. As Dependency Injection is the heart of Spring Framework, we will explain this concept in a separate chapter with relevant example.</p>\n\n\n\n<h2>Aspect Oriented Programming (AOP)</h2>\n\n\n\n<p>One of the key components of Spring is the&nbsp;<strong>Aspect Oriented Programming (AOP)</strong>&nbsp;framework. The functions that span multiple points of an application are called&nbsp;<strong>cross-cutting concerns</strong>&nbsp;and these cross-cutting concerns are conceptually separate from the application&#8217;s business logic. There are various common good examples of aspects including logging, declarative transactions, security, caching, etc.</p>\n\n\n\n<p>The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. DI helps you decouple your application objects from each other, while AOP helps you decouple cross-cutting concerns from the objects that they affect.</p>\n\n\n\n<p>The AOP module of Spring Framework provides an aspect-oriented programming implementation allowing you to define method-interceptors and pointcuts to cleanly decouple code that implements functionality that should be separated. We will discuss more about Spring AOP concepts in a separate chapter.</p>\n","protected":false},"excerpt":{"rendered":"<p>Spring is the most popular application development framework for enterprise Java. Millions of developers around the world use Spring Framework to create high performing, easily testable, and reusable code. Spring framework is an open source Java platform. It was initially written by Rod Johnson and was first released under the Apache 2.0 license in June [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4586"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4586"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4586/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4586"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4586"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4586"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2920,"date":"2020-06-20T04:51:20","date_gmt":"2020-06-20T04:51:20","guid":{"rendered":"http://java.foobrdigital.com/?p=237"},"modified":"2020-06-20T04:51:20","modified_gmt":"2020-06-20T04:51:20","slug":"architecture-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/architecture-3/","title":{"rendered":"Architecture"},"content":{"rendered":"\n<p>Spring could potentially be a one-stop shop for all your enterprise applications. However, Spring is modular, allowing you to pick and choose which modules are applicable to you, without having to bring in the rest. The following section provides details about all the modules available in Spring Framework.</p>\n\n\n\n<p>The Spring Framework provides about 20 modules which can be used based on an application requirement.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/spring_architecture.png\" alt=\"Spring Framework Architecture\"/></figure>\n\n\n\n<h2>Core Container</h2>\n\n\n\n<p>The Core Container consists of the Core, Beans, Context, and Expression Language modules the details of which are as follows −</p>\n\n\n\n<ul><li>The&nbsp;<strong>Core</strong>&nbsp;module provides the fundamental parts of the framework, including the IoC and Dependency Injection features.</li><li>The&nbsp;<strong>Bean</strong>&nbsp;module provides BeanFactory, which is a sophisticated implementation of the factory pattern.</li><li>The&nbsp;<strong>Context</strong>&nbsp;module builds on the solid base provided by the Core and Beans modules and it is a medium to access any objects defined and configured. The ApplicationContext interface is the focal point of the Context module.</li><li>The&nbsp;<strong>SpEL</strong>&nbsp;module provides a powerful expression language for querying and manipulating an object graph at runtime.</li></ul>\n\n\n\n<h2>Data Access/Integration</h2>\n\n\n\n<p>The Data Access/Integration layer consists of the JDBC, ORM, OXM, JMS and Transaction modules whose detail is as follows −</p>\n\n\n\n<ul><li>The&nbsp;<strong>JDBC</strong>&nbsp;module provides a JDBC-abstraction layer that removes the need for tedious JDBC related coding.</li><li>The&nbsp;<strong>ORM</strong>&nbsp;module provides integration layers for popular object-relational mapping APIs, including JPA, JDO, Hibernate, and iBatis.</li><li>The&nbsp;<strong>OXM</strong>&nbsp;module provides an abstraction layer that supports Object/XML mapping implementations for JAXB, Castor, XMLBeans, JiBX and XStream.</li><li>The Java Messaging Service&nbsp;<strong>JMS</strong>&nbsp;module contains features for producing and consuming messages.</li><li>The&nbsp;<strong>Transaction</strong>&nbsp;module supports programmatic and declarative transaction management for classes that implement special interfaces and for all your POJOs.</li></ul>\n\n\n\n<h2>Web</h2>\n\n\n\n<p>The Web layer consists of the Web, Web-MVC, Web-Socket, and Web-Portlet modules the details of which are as follows −</p>\n\n\n\n<ul><li>The&nbsp;<strong>Web</strong>&nbsp;module provides basic web-oriented integration features such as multipart file-upload functionality and the initialization of the IoC container using servlet listeners and a web-oriented application context.</li><li>The&nbsp;<strong>Web-MVC</strong>&nbsp;module contains Spring&#8217;s Model-View-Controller (MVC) implementation for web applications.</li><li>The&nbsp;<strong>Web-Socket</strong>&nbsp;module provides support for WebSocket-based, two-way communication between the client and the server in web applications.</li><li>The&nbsp;<strong>Web-Portlet</strong>&nbsp;module provides the MVC implementation to be used in a portlet environment and mirrors the functionality of Web-Servlet module.</li></ul>\n\n\n\n<h2>Miscellaneous</h2>\n\n\n\n<p>There are few other important modules like AOP, Aspects, Instrumentation, Web and Test modules the details of which are as follows −</p>\n\n\n\n<ul><li>The&nbsp;<strong>AOP</strong>&nbsp;module provides an aspect-oriented programming implementation allowing you to define method-interceptors and pointcuts to cleanly decouple code that implements functionality that should be separated.</li><li>The&nbsp;<strong>Aspects</strong>&nbsp;module provides integration with AspectJ, which is again a powerful and mature AOP framework.</li><li>The&nbsp;<strong>Instrumentation</strong>&nbsp;module provides class instrumentation support and class loader implementations to be used in certain application servers.</li><li>The&nbsp;<strong>Messaging</strong>&nbsp;module provides support for STOMP as the WebSocket sub-protocol to use in applications. It also supports an annotation programming model for routing and processing STOMP messages from WebSocket clients.</li><li>The&nbsp;<strong>Test</strong>&nbsp;module supports the testing of Spring components with JUnit or TestNG frameworks.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Spring could potentially be a one-stop shop for all your enterprise applications. However, Spring is modular, allowing you to pick and choose which modules are applicable to you, without having to bring in the rest. The following section provides details about all the modules available in Spring Framework. The Spring Framework provides about 20 modules [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2920"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2920"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2920/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2920"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2920"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2920"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4587,"date":"2020-06-20T04:55:50","date_gmt":"2020-06-20T04:55:50","guid":{"rendered":"http://java.foobrdigital.com/?p=239"},"modified":"2020-06-20T04:55:50","modified_gmt":"2020-06-20T04:55:50","slug":"environment-setup-5-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/environment-setup-5-2/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>This chapter will guide you on how to prepare a development environment to start your work with Spring Framework. It will also teach you how to set up JDK, Tomcat and Eclipse on your machine before you set up Spring Framework −</p>\n\n\n\n<h2>Step 1 &#8211; Setup Java Development Kit (JDK)</h2>\n\n\n\n<p>You can download the latest version of SDK from Oracle&#8217;s Java site − Java SE Downloads. You will find instructions for installing JDK in downloaded files, follow the given instructions to install and configure the setup. Finally set PATH and JAVA_HOME environment variables to refer to the directory that contains java and javac, typically java_install_dir/bin and java_install_dir respectively.</p>\n\n\n\n<p>If you are running Windows and have installed the JDK in C:\\jdk1.6.0_15, you would have to put the following line in your C:\\autoexec.bat file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>set PATH=C:\\jdk1.6.0_15\\bin;%PATH% \nset JAVA_HOME=C:\\jdk1.6.0_15 </code></pre>\n\n\n\n<p>Alternatively, on Windows NT/2000/XP, you will have to right-click on My Computer, select Properties → Advanced → Environment Variables. Then, you will have to update the PATH value and click the OK button.</p>\n\n\n\n<p>On Unix (Solaris, Linux, etc.), if the SDK is installed in /usr/local/jdk1.6.0_15 and you use the C shell, you will have to put the following into your .cshrc file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>setenv PATH /usr/local/jdk1.6.0_15/bin:$PATH \nsetenv JAVA_HOME /usr/local/jdk1.6.0_15 </code></pre>\n\n\n\n<p>Alternatively, if you use an Integrated Development Environment (IDE) like Borland JBuilder, Eclipse, IntelliJ IDEA, or Sun ONE Studio, you will have to compile and run a simple program to confirm that the IDE knows where you have installed Java. Otherwise, you will have to carry out a proper setup as given in the document of the IDE.</p>\n\n\n\n<h2>Step 2 &#8211; Install Apache Common Logging API</h2>\n\n\n\n<p>You can download the latest version of Apache Commons Logging API from https://commons.apache.org/logging/. Once you download the installation, unpack the binary distribution into a convenient location. For example, in C:\\commons-logging-1.1.1 on Windows, or /usr/local/commons-logging-1.1.1 on Linux/Unix. This directory will have the following jar files and other supporting documents, etc.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/common_logging_files.jpg\" alt=\"Common Logging API\"/></figure>\n\n\n\n<p>Make sure you set your CLASSPATH variable on this directory properly otherwise you will face a problem while running your application.</p>\n\n\n\n<h2>Step 3 &#8211; Setup Eclipse IDE</h2>\n\n\n\n<p>All the examples in this tutorial have been written using Eclipse IDE. So we would suggest you should have the latest version of Eclipse installed on your machine.</p>\n\n\n\n<p>To install Eclipse IDE, download the latest Eclipse binaries from https://www.eclipse.org/downloads/. Once you download the installation, unpack the binary distribution into a convenient location. For example, in C:\\eclipse on Windows, or /usr/local/eclipse on Linux/Unix and finally set PATH variable appropriately.</p>\n\n\n\n<p>Eclipse can be started by executing the following commands on Windows machine, or you can simply double-click on eclipse.exe</p>\n\n\n\n<pre class=\"wp-block-code\"><code>%C:\\eclipse\\eclipse.exe </code></pre>\n\n\n\n<p>Eclipse can be started by executing the following commands on Unix (Solaris, Linux, etc.) machine −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$/usr/local/eclipse/eclipse</code></pre>\n\n\n\n<p>After a successful startup, if everything is fine then it should display the following result −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/eclipsehomepage.jpg\" alt=\"Eclipse Home page\"/></figure>\n\n\n\n<h2>Step 4 &#8211; Setup Spring Framework Libraries</h2>\n\n\n\n<p>Now if everything is fine, then you can proceed to set up your Spring framework. Following are the simple steps to download and install the framework on your machine.</p>\n\n\n\n<ul><li>Make a choice whether you want to install Spring on Windows or Unix, and then proceed to the next step to download .zip file for Windows and .tz file for Unix.</li><li>Download the latest version of Spring framework binaries from https://repo.spring.io/release/org/springframework/spring.</li><li>At the time of developing this tutorial, <strong>spring-framework-4.1.6.RELEASE-dist.zip</strong> was downloaded on Windows machine. After the downloaded file was unzipped, it gives the following directory structure inside E:\\spring.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/spring_directories.jpg\" alt=\"Spring Directories\"/></figure>\n\n\n\n<p>You will find all the Spring libraries in the directory&nbsp;<strong>E:\\spring\\libs</strong>. Make sure you set your CLASSPATH variable on this directory properly otherwise you will face a problem while running your application. If you are using Eclipse, then it is not required to set CLASSPATH because all the setting will be done through Eclipse.</p>\n\n\n\n<p>Once you are done with this last step, you are ready to proceed to your first Spring Example in the next chapter.</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will guide you on how to prepare a development environment to start your work with Spring Framework. It will also teach you how to set up JDK, Tomcat and Eclipse on your machine before you set up Spring Framework − Step 1 &#8211; Setup Java Development Kit (JDK) You can download the latest [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4587"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4587"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4587/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4587"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4587"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4587"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2922,"date":"2020-06-20T05:01:31","date_gmt":"2020-06-20T05:01:31","guid":{"rendered":"http://java.foobrdigital.com/?p=241"},"modified":"2020-06-20T05:01:31","modified_gmt":"2020-06-20T05:01:31","slug":"hello-world-example","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/hello-world-example/","title":{"rendered":"Hello World Example"},"content":{"rendered":"\n<p>Let us start actual programming with Spring Framework. Before you start writing your first example using Spring framework, you have to make sure that you have set up your Spring environment properly as explained in&nbsp;Spring &#8211; Environment Setup&nbsp;Chapter. We also assume that you have a bit of working knowledge on Eclipse IDE.</p>\n\n\n\n<p>Now let us proceed to write a simple Spring Application, which will print &#8220;Hello World!&#8221; or any other message based on the configuration done in Spring Beans Configuration file.</p>\n\n\n\n<h2>Step 1 &#8211; Create Java Project</h2>\n\n\n\n<p>The first step is to create a simple Java Project using Eclipse IDE. Follow the option&nbsp;<strong>File → New → Project</strong>&nbsp;and finally select&nbsp;<strong>Java Project</strong>&nbsp;wizard from the wizard list. Now name your project as&nbsp;<strong>HelloSpring</strong>&nbsp;using the wizard window as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/hello_spring_wizard.jpg\" alt=\"Hello Spring Wizard\"/></figure>\n\n\n\n<p>Once your project is created successfully, you will have the following content in your&nbsp;<strong>Project Explorer</strong>&nbsp;−</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/hello_spring_dir.jpg\" alt=\"Hello Spring Directories\"/></figure>\n\n\n\n<h2>Step 2 &#8211; Add Required Libraries</h2>\n\n\n\n<p>As a second step let us add Spring Framework and common logging API libraries in our project. To do this, right-click on your project name&nbsp;<strong>HelloSpring</strong>&nbsp;and then follow the following option available in the context menu −&nbsp;<strong>Build Path → Configure Build Path</strong>&nbsp;to display the Java Build Path window as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/java_build_path.jpg\" alt=\"Java Build Path\"/></figure>\n\n\n\n<p>Now use&nbsp;<strong>Add External JARs</strong>&nbsp;button available under the&nbsp;<strong>Libraries</strong>&nbsp;tab to add the following core JARs from Spring Framework and Common Logging installation directories −</p>\n\n\n\n<ul><li>commons-logging-1.1.1</li><li>spring-aop-4.1.6.RELEASE</li><li>spring-aspects-4.1.6.RELEASE</li><li>spring-beans-4.1.6.RELEASE</li><li>spring-context-4.1.6.RELEASE</li><li>spring-context-support-4.1.6.RELEASE</li><li>spring-core-4.1.6.RELEASE</li><li>spring-expression-4.1.6.RELEASE</li><li>spring-instrument-4.1.6.RELEASE</li><li>spring-instrument-tomcat-4.1.6.RELEASE</li><li>spring-jdbc-4.1.6.RELEASE</li><li>spring-jms-4.1.6.RELEASE</li><li>spring-messaging-4.1.6.RELEASE</li><li>spring-orm-4.1.6.RELEASE</li><li>spring-oxm-4.1.6.RELEASE</li><li>spring-test-4.1.6.RELEASE</li><li>spring-tx-4.1.6.RELEASE</li><li>spring-web-4.1.6.RELEASE</li><li>spring-webmvc-4.1.6.RELEASE</li><li>spring-webmvc-portlet-4.1.6.RELEASE</li><li>spring-websocket-4.1.6.RELEASE</li></ul>\n\n\n\n<h2>Step 3 &#8211; Create Source Files</h2>\n\n\n\n<p>Now let us create actual source files under the <strong>HelloSpring</strong> project. First we need to create a package called <strong>com.codemeals</strong> To do this, right click on <strong>src</strong> in package explorer section and follow the option − <strong>New → Package</strong>.</p>\n\n\n\n<p>Next we will create <strong>HelloWorld.java</strong> and <strong>MainApp.java</strong> files under the com.<strong>codemeals</strong> package.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/spring_source_files.jpg\" alt=\"Spring Source Files\"/></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message;\n\n   public void setMessage(String message){\n      this.message  = message;\n   }\n   public void getMessage(){\n      System.out.println(\"Your Message : \" + message);\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the second file&nbsp;<strong>MainApp.java</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");\n      obj.getMessage();\n   }\n}</code></pre>\n\n\n\n<p>Following two important points are to be noted about the main program −</p>\n\n\n\n<ul><li>The first step is to create an application context where we used framework API&nbsp;<strong>ClassPathXmlApplicationContext()</strong>. This API loads beans configuration file and eventually based on the provided API, it takes care of creating and initializing all the objects, i.e. beans mentioned in the configuration file.</li><li>The second step is used to get the required bean using&nbsp;<strong>getBean()</strong>&nbsp;method of the created context. This method uses bean ID to return a generic object, which finally can be casted to the actual object. Once you have an object, you can use this object to call any class method.</li></ul>\n\n\n\n<h2>Step 4 &#8211; Create Bean Configuration File</h2>\n\n\n\n<p>You need to create a Bean Configuration file which is an XML file and acts as a cement that glues the beans, i.e. the classes together. This file needs to be created under the&nbsp;<strong>src</strong>&nbsp;directory as shown in the following screenshot −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/beans_conf_file.jpg\" alt=\"Beans Configuration File\"/></figure>\n\n\n\n<p>Usually developers name this file as&nbsp;<strong>Beans.xml</strong>, but you are independent to choose any name you like. You have to make sure that this file is available in CLASSPATH and use the same name in the main application while creating an application context as shown in MainApp.java file.</p>\n\n\n\n<p>The Beans.xml is used to assign unique IDs to different beans and to control the creation of objects with different values without impacting any of the Spring source files. For example, using the following file you can pass any value for &#8220;message&#8221; variable and you can print different values of message without impacting HelloWorld.java and MainApp.java files. Let us see how it works −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\">\n      &lt;property name = \"message\" value = \"Hello World!\"/>\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>When Spring application gets loaded into the memory, Framework makes use of the above configuration file to create all the beans defined and assigns them a unique ID as defined in&nbsp;<strong>&lt;bean&gt;</strong>&nbsp;tag. You can use&nbsp;<strong>&lt;property&gt;</strong>&nbsp;tag to pass the values of different variables used at the time of object creation.</p>\n\n\n\n<h2>Step 5 &#8211; Running the Program</h2>\n\n\n\n<p>Once you are done with creating the source and beans configuration files, you are ready for this step, which is compiling and running your program. To do this, keep MainApp.Java file tab active and use either&nbsp;<strong>Run</strong>&nbsp;option available in the Eclipse IDE or use&nbsp;<strong>Ctrl + F11</strong>&nbsp;to compile and run your&nbsp;<strong>MainApp</strong>&nbsp;application. If everything is fine with your application, this will print the following message in Eclipse IDE&#8217;s console −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Your Message : Hello World!</code></pre>\n\n\n\n<p>Congratulations, you have successfully created your first Spring Application. You can see the flexibility of the above Spring application by changing the value of &#8220;message&#8221; property and keeping both the source files unchanged.</p>\n","protected":false},"excerpt":{"rendered":"<p>Let us start actual programming with Spring Framework. Before you start writing your first example using Spring framework, you have to make sure that you have set up your Spring environment properly as explained in&nbsp;Spring &#8211; Environment Setup&nbsp;Chapter. We also assume that you have a bit of working knowledge on Eclipse IDE. Now let us [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2922"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2922"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2922/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2922"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2922"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2922"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4588,"date":"2020-06-20T05:02:44","date_gmt":"2020-06-20T05:02:44","guid":{"rendered":"http://java.foobrdigital.com/?p=243"},"modified":"2020-06-20T05:02:44","modified_gmt":"2020-06-20T05:02:44","slug":"ioc-containers","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ioc-containers/","title":{"rendered":"IoC Containers"},"content":{"rendered":"\n<p>The Spring container is at the core of the Spring Framework. The container will create the objects, wire them together, configure them, and manage their complete life cycle from creation till destruction. The Spring container uses DI to manage the components that make up an application. These objects are called Spring Beans, which we will discuss in the next chapter.</p>\n\n\n\n<p>The container gets its instructions on what objects to instantiate, configure, and assemble by reading the configuration metadata provided. The configuration metadata can be represented either by XML, Java annotations, or Java code. The following diagram represents a high-level view of how Spring works. The Spring IoC container makes use of Java POJO classes and configuration metadata to produce a fully configured and executable system or application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/spring_ioc_container.jpg\" alt=\"Spring IoC Container\"/></figure>\n\n\n\n<p>Spring provides the following two distinct types of containers.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Container &amp; Description</th></tr><tr><td>1</td><td>Spring BeanFactory ContainerThis is the simplest container providing the basic support for DI and is defined by the <em>org.springframework.beans.factory.BeanFactory</em> interface. The BeanFactory and related interfaces, such as BeanFactoryAware, InitializingBean, DisposableBean, are still present in Spring for the purpose of backward compatibility with a large number of third-party frameworks that integrate with Spring.</td></tr><tr><td>2</td><td>Spring ApplicationContext ContainerThis container adds more enterprise-specific functionality such as the ability to resolve textual messages from a properties file and the ability to publish application events to interested event listeners. This container is defined by the&nbsp;<em>org.springframework.context.ApplicationContext</em>&nbsp;interface.</td></tr></tbody></table></figure>\n\n\n\n<p>The&nbsp;<em>ApplicationContext</em>&nbsp;container includes all functionality of the&nbsp;<em>BeanFactory</em>container, so it is generally recommended over&nbsp;<em>BeanFactory</em>. BeanFactory can still be used for lightweight applications like mobile devices or applet-based applications where data volume and speed is significant.</p>\n","protected":false},"excerpt":{"rendered":"<p>The Spring container is at the core of the Spring Framework. The container will create the objects, wire them together, configure them, and manage their complete life cycle from creation till destruction. The Spring container uses DI to manage the components that make up an application. These objects are called Spring Beans, which we will [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4588"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4588"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4588/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4588"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4588"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4588"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2924,"date":"2020-06-20T05:04:09","date_gmt":"2020-06-20T05:04:09","guid":{"rendered":"http://java.foobrdigital.com/?p=245"},"modified":"2020-06-20T05:04:09","modified_gmt":"2020-06-20T05:04:09","slug":"bean-definition","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/bean-definition/","title":{"rendered":"Bean Definition"},"content":{"rendered":"\n<p>The objects that form the backbone of your application and that are managed by the Spring IoC container are called&nbsp;<strong>beans</strong>. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the configuration metadata that you supply to the container. For example, in the form of XML &lt;bean/&gt; definitions which you have already seen in the previous chapters.</p>\n\n\n\n<p>Bean definition contains the information called&nbsp;<strong>configuration metadata</strong>, which is needed for the container to know the following −</p>\n\n\n\n<ul><li>How to create a bean</li><li>Bean&#8217;s lifecycle details</li><li>Bean&#8217;s dependencies</li></ul>\n\n\n\n<p>All the above configuration metadata translates into a set of the following properties that make up each bean definition.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Properties &amp; Description</th></tr><tr><td>1</td><td><strong>class</strong>This attribute is mandatory and specifies the bean class to be used to create the bean.</td></tr><tr><td>2</td><td><strong>name</strong>This attribute specifies the bean identifier uniquely. In XMLbased configuration metadata, you use the id and/or name attributes to specify the bean identifier(s).</td></tr><tr><td>3</td><td><strong>scope</strong>This attribute specifies the scope of the objects created from a particular bean definition and it will be discussed in bean scopes chapter.</td></tr><tr><td>4</td><td><strong>constructor-arg</strong>This is used to inject the dependencies and will be discussed in subsequent chapters.</td></tr><tr><td>5</td><td><strong>properties</strong>This is used to inject the dependencies and will be discussed in subsequent chapters.</td></tr><tr><td>6</td><td><strong>autowiring mode</strong>This is used to inject the dependencies and will be discussed in subsequent chapters.</td></tr><tr><td>7</td><td><strong>lazy-initialization mode</strong>A lazy-initialized bean tells the IoC container to create a bean instance when it is first requested, rather than at the startup.</td></tr><tr><td>8</td><td><strong>initialization method</strong>A callback to be called just after all necessary properties on the bean have been set by the container. It will be discussed in bean life cycle chapter.</td></tr><tr><td>9</td><td><strong>destruction method</strong>A callback to be used when the container containing the bean is destroyed. It will be discussed in bean life cycle chapter.</td></tr></tbody></table></figure>\n\n\n\n<h2>Spring Configuration Metadata</h2>\n\n\n\n<p>Spring IoC container is totally decoupled from the format in which this configuration metadata is actually written. Following are the three important methods to provide configuration metadata to the Spring Container −</p>\n\n\n\n<ul><li>XML based configuration file.</li><li>Annotation-based configuration</li><li>Java-based configuration</li></ul>\n\n\n\n<p>You already have seen how XML-based configuration metadata is provided to the container, but let us see another sample of XML-based configuration file with different bean definitions including lazy initialization, initialization method, and destruction method −</p>\n\n\n\n<p>You can check Spring Hello World Example to understand how to define, configure and create Spring Beans.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;!-- A simple bean definition -->\n   &lt;bean id = \"...\" class = \"...\">\n      &lt;!-- collaborators and configuration for this bean go here -->\n   &lt;/bean>\n\n   &lt;!-- A bean definition with lazy init set on -->\n   &lt;bean id = \"...\" class = \"...\" lazy-init = \"true\">\n      &lt;!-- collaborators and configuration for this bean go here -->\n   &lt;/bean>\n\n   &lt;!-- A bean definition with initialization method -->\n   &lt;bean id = \"...\" class = \"...\" init-method = \"...\">\n      &lt;!-- collaborators and configuration for this bean go here -->\n   &lt;/bean>\n\n   &lt;!-- A bean definition with destruction method -->\n   &lt;bean id = \"...\" class = \"...\" destroy-method = \"...\">\n      &lt;!-- collaborators and configuration for this bean go here -->\n   &lt;/bean>\n\n   &lt;!-- more bean definitions go here -->\n   \n&lt;/beans></code></pre>\n\n\n\n<p>We will discuss about Annotation Based Configuration in a separate chapter. It is intentionally discussed in a separate chapter as we want you to grasp a few other important Spring concepts, before you start programming with Spring Dependency Injection with Annotations.</p>\n","protected":false},"excerpt":{"rendered":"<p>The objects that form the backbone of your application and that are managed by the Spring IoC container are called&nbsp;beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the configuration metadata that you supply to the container. For example, in the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2924"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2924"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2924/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2924"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2924"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2924"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4589,"date":"2020-06-20T05:07:35","date_gmt":"2020-06-20T05:07:35","guid":{"rendered":"http://java.foobrdigital.com/?p=247"},"modified":"2020-06-20T05:07:35","modified_gmt":"2020-06-20T05:07:35","slug":"bean-scopes","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/bean-scopes/","title":{"rendered":"Bean Scopes"},"content":{"rendered":"\n<p>When defining a &lt;bean&gt; you have the option of declaring a scope for that bean. For example, to force Spring to produce a new bean instance each time one is needed, you should declare the bean&#8217;s scope attribute to be&nbsp;<strong>prototype</strong>. Similarly, if you want Spring to return the same bean instance each time one is needed, you should declare the bean&#8217;s scope attribute to be&nbsp;<strong>singleton</strong>.</p>\n\n\n\n<p>The Spring Framework supports the following five scopes, three of which are available only if you use a web-aware ApplicationContext.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Scope &amp; Description</th></tr><tr><td>1</td><td><strong>singleton</strong>This scopes the bean definition to a single instance per Spring IoC container (default).</td></tr><tr><td>2</td><td><strong>prototype</strong>This scopes a single bean definition to have any number of object instances.</td></tr><tr><td>3</td><td><strong>request</strong>This scopes a bean definition to an HTTP request. Only valid in the context of a web-aware Spring ApplicationContext.</td></tr><tr><td>4</td><td><strong>session</strong>This scopes a bean definition to an HTTP session. Only valid in the context of a web-aware Spring ApplicationContext.</td></tr><tr><td>5</td><td><strong>global-session</strong>This scopes a bean definition to a global HTTP session. Only valid in the context of a web-aware Spring ApplicationContext.</td></tr></tbody></table></figure>\n\n\n\n<p>In this chapter, we will discuss about the first two scopes and the remaining three will be discussed when we discuss about web-aware Spring ApplicationContext.</p>\n\n\n\n<h2>The singleton scope</h2>\n\n\n\n<p>If a scope is set to singleton, the Spring IoC container creates exactly one instance of the object defined by that bean definition. This single instance is stored in a cache of such singleton beans, and all subsequent requests and references for that named bean return the cached object.</p>\n\n\n\n<p>The default scope is always singleton. However, when you need one and only one instance of a bean, you can set the&nbsp;<strong>scope&nbsp;</strong>property to&nbsp;<strong>singleton</strong>&nbsp;in the bean configuration file, as shown in the following code snippet −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- A bean definition with singleton scope -->\n&lt;bean id = \"...\" class = \"...\" scope = \"singleton\">\n   &lt;!-- collaborators and configuration for this bean go here -->\n&lt;/bean></code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us have a working Eclipse IDE in place and take the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create Java classes <em>HelloWorld</em> and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>4</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message;\n\n   public void setMessage(String message){\n      this.message  = message;\n   }\n   public void getMessage(){\n      System.out.println(\"Your Message : \" + message);\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      HelloWorld objA = (HelloWorld) context.getBean(\"helloWorld\");\n\n      objA.setMessage(\"I'm object A\");\n      objA.getMessage();\n\n      HelloWorld objB = (HelloWorld) context.getBean(\"helloWorld\");\n      objB.getMessage();\n   }\n}</code></pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong>&nbsp;required for singleton scope −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\" scope = \"singleton\">\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Your Message : I'm object A\nYour Message : I'm object A\n﻿</code></pre>\n\n\n\n<h2>The prototype scope</h2>\n\n\n\n<p>If the scope is set to prototype, the Spring IoC container creates a new bean instance of the object every time a request for that specific bean is made. As a rule, use the prototype scope for all state-full beans and the singleton scope for stateless beans.</p>\n\n\n\n<p>To define a prototype scope, you can set the&nbsp;<strong>scope</strong>&nbsp;property to&nbsp;<strong>prototype</strong>&nbsp;in the bean configuration file, as shown in the following code snippet −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- A bean definition with prototype scope -->\n&lt;bean id = \"...\" class = \"...\" scope = \"prototype\">\n   &lt;!-- collaborators and configuration for this bean go here -->\n&lt;/bean></code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us have working Eclipse IDE in place and follow the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create Java classes <em>HelloWorld</em> and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>4</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message;\n\n   public void setMessage(String message){\n      this.message  = message;\n   }\n   public void getMessage(){\n      System.out.println(\"Your Message : \" + message);\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      HelloWorld objA = (HelloWorld) context.getBean(\"helloWorld\");\n\n      objA.setMessage(\"I'm object A\");\n      objA.getMessage();\n\n      HelloWorld objB = (HelloWorld) context.getBean(\"helloWorld\");\n      objB.getMessage();\n   }\n}</code></pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong>&nbsp;required for prototype scope −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\" scope = \"prototype\">\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Your Message : I'm object A\nYour Message : null</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>When defining a &lt;bean&gt; you have the option of declaring a scope for that bean. For example, to force Spring to produce a new bean instance each time one is needed, you should declare the bean&#8217;s scope attribute to be&nbsp;prototype. Similarly, if you want Spring to return the same bean instance each time one is [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4589"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4589"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4589/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4589"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4589"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4589"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2926,"date":"2020-06-20T05:13:39","date_gmt":"2020-06-20T05:13:39","guid":{"rendered":"http://java.foobrdigital.com/?p=249"},"modified":"2020-06-20T05:13:39","modified_gmt":"2020-06-20T05:13:39","slug":"bean-life-cycle","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/bean-life-cycle/","title":{"rendered":"Bean Life Cycle"},"content":{"rendered":"\n<p>The life cycle of a Spring bean is easy to understand. When a bean is instantiated, it may be required to perform some initialization to get it into a usable state. Similarly, when the bean is no longer required and is removed from the container, some cleanup may be required.</p>\n\n\n\n<p>Though, there are lists of the activities that take place behind the scene between the time of bean Instantiation and its destruction, this chapter will discuss only two important bean life cycle callback methods, which are required at the time of bean initialization and its destruction.</p>\n\n\n\n<p>To define setup and teardown for a bean, we simply declare the &lt;bean&gt; with&nbsp;<strong>initmethod</strong>&nbsp;and/or&nbsp;<strong>destroy-method</strong>&nbsp;parameters. The init-method attribute specifies a method that is to be called on the bean immediately upon instantiation. Similarly, destroymethod specifies a method that is called just before a bean is removed from the container.</p>\n\n\n\n<h2>Initialization callbacks</h2>\n\n\n\n<p>The org.springframework.beans.factory.InitializingBean interface specifies a single method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void afterPropertiesSet() throws Exception;</code></pre>\n\n\n\n<p>Thus, you can simply implement the above interface and initialization work can be done inside afterPropertiesSet() method as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ExampleBean implements InitializingBean {\n   public void afterPropertiesSet() {\n      // do some initialization work\n   }\n}</code></pre>\n\n\n\n<p>In the case of XML-based configuration metadata, you can use the&nbsp;<strong>init-method</strong>&nbsp;attribute to specify the name of the method that has a void no-argument signature. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"exampleBean\" class = \"examples.ExampleBean\" init-method = \"init\"/></code></pre>\n\n\n\n<p>Following is the class definition −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ExampleBean {\n   public void init() {\n      // do some initialization work\n   }\n}</code></pre>\n\n\n\n<h2>Destruction callbacks</h2>\n\n\n\n<p>The&nbsp;<em>org.springframework.beans.factory.DisposableBean</em>&nbsp;interface specifies a single method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void destroy() throws Exception;</code></pre>\n\n\n\n<p>Thus, you can simply implement the above interface and finalization work can be done inside destroy() method as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ExampleBean implements DisposableBean {\n   public void destroy() {\n      // do some destruction work\n   }\n}</code></pre>\n\n\n\n<p>In the case of XML-based configuration metadata, you can use the&nbsp;<strong>destroy-method</strong>&nbsp;attribute to specify the name of the method that has a void no-argument signature. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"exampleBean\" class = \"examples.ExampleBean\" destroy-method = \"destroy\"/></code></pre>\n\n\n\n<p>Following is the class definition −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ExampleBean {\n   public void destroy() {\n      // do some destruction work\n   }\n}</code></pre>\n\n\n\n<p>If you are using Spring&#8217;s IoC container in a non-web application environment; for example, in a rich client desktop environment, you register a shutdown hook with the JVM. Doing so ensures a graceful shutdown and calls the relevant destroy methods on your singleton beans so that all resources are released.</p>\n\n\n\n<p>It is recommended that you do not use the InitializingBean or DisposableBean callbacks, because XML configuration gives much flexibility in terms of naming your method.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us have a working Eclipse IDE in place and take the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create Java classes <em>HelloWorld</em> and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>4</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message;\n\n   public void setMessage(String message){\n      this.message = message;\n   }\n   public void getMessage(){\n      System.out.println(\"Your Message : \" + message);\n   }\n   public void init(){\n      System.out.println(\"Bean is going through init.\");\n   }\n   public void destroy() {\n      System.out.println(\"Bean will destroy now.\");\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file. Here you need to register a shutdown hook&nbsp;<strong>registerShutdownHook()</strong>&nbsp;method that is declared on the AbstractApplicationContext class. This will ensure a graceful shutdown and call the relevant destroy methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.support.AbstractApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      AbstractApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");\n      obj.getMessage();\n      context.registerShutdownHook();\n   }\n}</code></pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong>&nbsp;required for init and destroy methods −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\" init-method = \"init\" \n      destroy-method = \"destroy\">\n      &lt;property name = \"message\" value = \"Hello World!\"/>\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Bean is going through init.\nYour Message : Hello World!\nBean will destroy now.</code></pre>\n\n\n\n<h2>Default initialization and destroy methods</h2>\n\n\n\n<p>If you have too many beans having initialization and/or destroy methods with the same name, you don&#8217;t need to declare&nbsp;<strong>init-method</strong>&nbsp;and&nbsp;<strong>destroy-method</strong>&nbsp;on each individual bean. Instead, the framework provides the flexibility to configure such situation using&nbsp;<strong>default-init-method</strong>&nbsp;and&nbsp;<strong>default-destroy-method</strong>&nbsp;attributes on the &lt;beans&gt; element as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\"\n   default-init-method = \"init\" \n   default-destroy-method = \"destroy\">\n\n   &lt;bean id = \"...\" class = \"...\">\n      &lt;!-- collaborators and configuration for this bean go here -->\n   &lt;/bean>\n   \n&lt;/beans></code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The life cycle of a Spring bean is easy to understand. When a bean is instantiated, it may be required to perform some initialization to get it into a usable state. Similarly, when the bean is no longer required and is removed from the container, some cleanup may be required. Though, there are lists of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2926"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2926"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2926/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2926"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2926"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2926"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4590,"date":"2020-06-20T05:25:34","date_gmt":"2020-06-20T05:25:34","guid":{"rendered":"http://java.foobrdigital.com/?p=251"},"modified":"2020-06-20T05:25:34","modified_gmt":"2020-06-20T05:25:34","slug":"bean-post-processors","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/bean-post-processors/","title":{"rendered":"Bean Post Processors"},"content":{"rendered":"\n<p>The&nbsp;<strong>BeanPostProcessor</strong>&nbsp;interface defines callback methods that you can implement to provide your own instantiation logic, dependency-resolution logic, etc. You can also implement some custom logic after the Spring container finishes instantiating, configuring, and initializing a bean by plugging in one or more BeanPostProcessor implementations.</p>\n\n\n\n<p>You can configure multiple BeanPostProcessor interfaces and you can control the order in which these BeanPostProcessor interfaces execute by setting the&nbsp;<strong>order</strong>&nbsp;property provided the BeanPostProcessor implements the&nbsp;<strong>Ordered</strong>&nbsp;interface.</p>\n\n\n\n<p>The BeanPostProcessors operate on bean (or object) instances, which means that the Spring IoC container instantiates a bean instance and then BeanPostProcessor interfaces do their work.</p>\n\n\n\n<p>An&nbsp;<strong>ApplicationContext</strong>&nbsp;automatically detects any beans that are defined with the implementation of the&nbsp;<strong>BeanPostProcessor</strong>&nbsp;interface and registers these beans as postprocessors, to be then called appropriately by the container upon bean creation.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following examples show how to write, register, and use BeanPostProcessors in the context of an ApplicationContext.</p>\n\n\n\n<p>Let us have a working Eclipse IDE in place and take the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create Java classes <em>HelloWorld</em>, <em>InitHelloWorld</em> and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>4</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message;\n\n   public void setMessage(String message){\n      this.message  = message;\n   }\n   public void getMessage(){\n      System.out.println(\"Your Message : \" + message);\n   }\n   public void init(){\n      System.out.println(\"Bean is going through init.\");\n   }\n   public void destroy(){\n      System.out.println(\"Bean will destroy now.\");\n   }\n}</code></pre>\n\n\n\n<p>This is a very basic example of implementing BeanPostProcessor, which prints a bean name before and after initialization of any bean. You can implement more complex logic before and after intializing a bean because you have access on bean object inside both the post processor methods.</p>\n\n\n\n<p>Here is the content of&nbsp;<strong>InitHelloWorld.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.beans.BeansException;\n\npublic class InitHelloWorld implements BeanPostProcessor {\n   public Object postProcessBeforeInitialization(Object bean, String beanName) \n      throws BeansException {\n      \n      System.out.println(\"BeforeInitialization : \" + beanName);\n      return bean;  // you can return any other object as well\n   }\n   public Object postProcessAfterInitialization(Object bean, String beanName) \n      throws BeansException {\n      \n      System.out.println(\"AfterInitialization : \" + beanName);\n      return bean;  // you can return any other object as well\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file. Here you need to register a shutdown hook&nbsp;<strong>registerShutdownHook()</strong>&nbsp;method that is declared on the AbstractApplicationContext class. This will ensures a graceful shutdown and calls the relevant destroy methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.support.AbstractApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      AbstractApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");\n      obj.getMessage();\n      context.registerShutdownHook();\n   }\n}</code></pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong>&nbsp;required for init and destroy methods −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\"\n      init-method = \"init\" destroy-method = \"destroy\">\n      &lt;property name = \"message\" value = \"Hello World!\"/>\n   &lt;/bean>\n\n   &lt;bean class = \"com.codemeals.InitHelloWorld\" />\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once you are done with creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>BeforeInitialization : helloWorld\nBean is going through init.\nAfterInitialization : helloWorld\nYour Message : Hello World!\nBean will destroy now.</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The&nbsp;BeanPostProcessor&nbsp;interface defines callback methods that you can implement to provide your own instantiation logic, dependency-resolution logic, etc. You can also implement some custom logic after the Spring container finishes instantiating, configuring, and initializing a bean by plugging in one or more BeanPostProcessor implementations. You can configure multiple BeanPostProcessor interfaces and you can control the order [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4590"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4590"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4590/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4590"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4590"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4590"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2928,"date":"2020-06-20T05:33:44","date_gmt":"2020-06-20T05:33:44","guid":{"rendered":"http://java.foobrdigital.com/?p=254"},"modified":"2020-06-20T05:33:44","modified_gmt":"2020-06-20T05:33:44","slug":"bean-definition-inheritance","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/bean-definition-inheritance/","title":{"rendered":"Bean Definition Inheritance"},"content":{"rendered":"\n<p>A bean definition can contain a lot of configuration information, including constructor arguments, property values, and container-specific information such as initialization method, static factory method name, and so on.</p>\n\n\n\n<p>A child bean definition inherits configuration data from a parent definition. The child definition can override some values, or add others, as needed.</p>\n\n\n\n<p>Spring Bean definition inheritance has nothing to do with Java class inheritance but the inheritance concept is same. You can define a parent bean definition as a template and other child beans can inherit the required configuration from the parent bean.</p>\n\n\n\n<p>When you use XML-based configuration metadata, you indicate a child bean definition by using the&nbsp;<strong>parent</strong>&nbsp;attribute, specifying the parent bean as the value of this attribute.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let us have a working Eclipse IDE in place and take the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name&nbsp;<em>SpringExample</em>&nbsp;and create a package&nbsp;<em>com.<strong>codemeals</strong></em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create Java classes&nbsp;<em>HelloWorld</em>,&nbsp;<em>HelloIndia</em>&nbsp;and&nbsp;<em>MainApp</em>&nbsp;under the&nbsp;<em>com.<strong>codemeals</strong></em>&nbsp;package.</td></tr><tr><td>4</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong>&nbsp;where we defined &#8220;helloWorld&#8221; bean which has two properties&nbsp;<em>message1</em>&nbsp;and&nbsp;<em>message2</em>. Next &#8220;helloIndia&#8221; bean has been defined as a child of &#8220;helloWorld&#8221; bean by using&nbsp;<strong>parent</strong>&nbsp;attribute. The child bean inherits&nbsp;<em>message2</em>&nbsp;property as is, and overrides&nbsp;<em>message1</em>&nbsp;property and introduces one more property&nbsp;<em>message3</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\">\n      &lt;property name = \"message1\" value = \"Hello World!\"/>\n      &lt;property name = \"message2\" value = \"Hello Second World!\"/>\n   &lt;/bean>\n\n   &lt;bean id =\"helloIndia\" class = \"com.codemeals.HelloIndia\" parent = \"helloWorld\">\n      &lt;property name = \"message1\" value = \"Hello India!\"/>\n      &lt;property name = \"message3\" value = \"Namaste India!\"/>\n   &lt;/bean>\n&lt;/beans></code></pre>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message1;\n   private String message2;\n\n   public void setMessage1(String message){\n      this.message1 = message;\n   }\n   public void setMessage2(String message){\n      this.message2 = message;\n   }\n   public void getMessage1(){\n      System.out.println(\"World Message1 : \" + message1);\n   }\n   public void getMessage2(){\n      System.out.println(\"World Message2 : \" + message2);\n   }\n}</code></pre>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloIndia.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloIndia {\n   private String message1;\n   private String message2;\n   private String message3;\n\n   public void setMessage1(String message){\n      this.message1 = message;\n   }\n   public void setMessage2(String message){\n      this.message2 = message;\n   }\n   public void setMessage3(String message){\n      this.message3 = message;\n   }\n   public void getMessage1(){\n      System.out.println(\"India Message1 : \" + message1);\n   }\n   public void getMessage2(){\n      System.out.println(\"India Message2 : \" + message2);\n   }\n   public void getMessage3(){\n      System.out.println(\"India Message3 : \" + message3);\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      \n      HelloWorld objA = (HelloWorld) context.getBean(\"helloWorld\");\n      objA.getMessage1();\n      objA.getMessage2();\n\n      HelloIndia objB = (HelloIndia) context.getBean(\"helloIndia\");\n      objB.getMessage1();\n      objB.getMessage2();\n      objB.getMessage3();\n   }\n}</code></pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>World Message1 : Hello World!\nWorld Message2 : Hello Second World!\nIndia Message1 : Hello India!\nIndia Message2 : Hello Second World!\nIndia Message3 : Namaste India</code></pre>\n\n\n\n<p>If you observed here, we did not pass message2 while creating &#8220;helloIndia&#8221; bean, but it got passed because of Bean Definition Inheritance.</p>\n\n\n\n<h2>Bean Definition Template</h2>\n\n\n\n<p>You can create a Bean definition template, which can be used by other child bean definitions without putting much effort. While defining a Bean Definition Template, you should not specify the <strong>class</strong> attribute and should specify <strong>abstract</strong> attribute and should specify the abstract attribute with a value of <strong>true</strong> as shown in the following code snippet −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"beanTeamplate\" abstract = \"true\">\n      &lt;property name = \"message1\" value = \"Hello World!\"/>\n      &lt;property name = \"message2\" value = \"Hello Second World!\"/>\n      &lt;property name = \"message3\" value = \"Namaste India!\"/>\n   &lt;/bean>\n\n   &lt;bean id = \"helloIndia\" class = \"com.codemeals.HelloIndia\" parent = \"beanTeamplate\">\n      &lt;property name = \"message1\" value = \"Hello India!\"/>\n      &lt;property name = \"message3\" value = \"Namaste India!\"/>\n   &lt;/bean>\n   \n&lt;/beans></code></pre>\n\n\n\n<p>The parent bean cannot be instantiated on its own because it is incomplete, and it is also explicitly marked as&nbsp;<em>abstract</em>. When a definition is abstract like this, it is usable only as a pure template bean definition that serves as a parent definition for child definitions.</p>\n","protected":false},"excerpt":{"rendered":"<p>A bean definition can contain a lot of configuration information, including constructor arguments, property values, and container-specific information such as initialization method, static factory method name, and so on. A child bean definition inherits configuration data from a parent definition. The child definition can override some values, or add others, as needed. Spring Bean definition [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2928"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2928"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2928/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2928"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2928"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2928"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4591,"date":"2020-06-20T05:37:16","date_gmt":"2020-06-20T05:37:16","guid":{"rendered":"http://java.foobrdigital.com/?p=258"},"modified":"2020-06-20T05:37:16","modified_gmt":"2020-06-20T05:37:16","slug":"dependency-injection","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/dependency-injection/","title":{"rendered":"Dependency Injection"},"content":{"rendered":"\n<p>Every Java-based application has a few objects that work together to present what the end-user sees as a working application. When writing a complex Java application, application classes should be as independent as possible of other Java classes to increase the possibility to reuse these classes and to test them independently of other classes while unit testing. Dependency Injection (or sometime called wiring) helps in gluing these classes together and at the same time keeping them independent.</p>\n\n\n\n<p>Consider you have an application which has a text editor component and you want to provide a spell check. Your standard code would look something like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TextEditor {\n   private SpellChecker spellChecker;\n   \n   public TextEditor() {\n      spellChecker = new SpellChecker();\n   }\n}</code></pre>\n\n\n\n<p>What we&#8217;ve done here is, create a dependency between the TextEditor and the SpellChecker. In an inversion of control scenario, we would instead do something like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TextEditor {\n   private SpellChecker spellChecker;\n   \n   public TextEditor(SpellChecker spellChecker) {\n      this.spellChecker = spellChecker;\n   }\n}</code></pre>\n\n\n\n<p>Here, the TextEditor should not worry about SpellChecker implementation. The SpellChecker will be implemented independently and will be provided to the TextEditor at the time of TextEditor instantiation. This entire procedure is controlled by the Spring Framework.</p>\n\n\n\n<p>Here, we have removed total control from the TextEditor and kept it somewhere else (i.e. XML </p>\n\n\n\n<p>file) and the dependency (i.e. class SpellChecker) is being injected into the class TextEditor through a <strong>Class Constructor</strong>. Thus the flow of control has been &#8220;inverted&#8221; by Dependency Injection (DI) because you have effectively delegated dependances to some external system.</p>\n\n\n\n<p>The second method of injecting dependency is through&nbsp;<strong>Setter Methods</strong>&nbsp;of the TextEditor class where we will create a SpellChecker instance. This instance will be used to call setter methods to initialize TextEditor&#8217;s properties.</p>\n\n\n\n<p>Thus, DI exists in two major variants and the following two sub-chapters will cover both of them with examples −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Dependency Injection Type &amp; Description</th></tr><tr><td>1</td><td>Constructor-based dependency injectionConstructor-based DI is accomplished when the container invokes a class constructor with a number of arguments, each representing a dependency on the other class.</td></tr><tr><td>2</td><td>Setter-based dependency injectionSetter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or no-argument static factory method to instantiate your bean.</td></tr></tbody></table></figure>\n\n\n\n<p>You can mix both, Constructor-based and Setter-based DI but it is a good rule of thumb to use constructor arguments for mandatory dependencies and setters for optional dependencies.</p>\n\n\n\n<p>The code is cleaner with the DI principle and decoupling is more effective when objects are provided with their dependencies. The object does not look up its dependencies and does not know the location or class of the dependencies, rather everything is taken care by the Spring Framework.</p>\n","protected":false},"excerpt":{"rendered":"<p>Every Java-based application has a few objects that work together to present what the end-user sees as a working application. When writing a complex Java application, application classes should be as independent as possible of other Java classes to increase the possibility to reuse these classes and to test them independently of other classes while [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4591"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4591"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4591/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4591"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4591"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4591"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4583,"date":"2020-06-20T05:39:14","date_gmt":"2020-06-20T05:39:14","guid":{"rendered":"http://java.foobrdigital.com/?p=264"},"modified":"2020-06-20T05:39:14","modified_gmt":"2020-06-20T05:39:14","slug":"injecting-inner-beans","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/injecting-inner-beans/","title":{"rendered":"Injecting Inner Beans"},"content":{"rendered":"\n<p>As you know Java inner classes are defined within the scope of other classes, similarly,&nbsp;<strong>inner beans</strong>&nbsp;are beans that are defined within the scope of another bean. Thus, a &lt;bean/&gt; element inside the &lt;property/&gt; or &lt;constructor-arg/&gt; elements is called inner bean and it is shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"outerBean\" class = \"...\">\n      &lt;property name = \"target\">\n         &lt;bean id = \"innerBean\" class = \"...\"/>\n      &lt;/property>\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let us have working Eclipse IDE in place and follow the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create Java classes <em>TextEditor</em>, <em>SpellChecker</em> and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>4</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>TextEditor.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class TextEditor {\n   private SpellChecker spellChecker;\n   \n   // a setter method to inject the dependency.\n   public void setSpellChecker(SpellChecker spellChecker) {\n      System.out.println(\"Inside setSpellChecker.\" );\n      this.spellChecker = spellChecker;\n   }\n   \n   // a getter method to return spellChecker\n   public SpellChecker getSpellChecker() {\n      return spellChecker;\n   }\n   public void spellCheck() {\n      spellChecker.checkSpelling();\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of another dependent class file&nbsp;<strong>SpellChecker.java</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class SpellChecker {\n   public SpellChecker(){\n      System.out.println(\"Inside SpellChecker constructor.\" );\n   }\n   public void checkSpelling(){\n      System.out.println(\"Inside checkSpelling.\" );\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      TextEditor te = (TextEditor) context.getBean(\"textEditor\");\n      te.spellCheck();\n   }\n}</code></pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong>&nbsp;which has configuration for the setter-based injection but using&nbsp;<strong>inner beans</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;!-- Definition for textEditor bean using inner bean -->\n   &lt;bean id = \"textEditor\" class = \"com.codemeals.TextEditor\">\n      &lt;property name = \"spellChecker\">\n         &lt;bean id = \"spellChecker\" class = \"com.codemeals.SpellChecker\"/>\n      &lt;/property>\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside SpellChecker constructor.\nInside setSpellChecker.\nInside checkSpelling.</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>As you know Java inner classes are defined within the scope of other classes, similarly,&nbsp;inner beans&nbsp;are beans that are defined within the scope of another bean. Thus, a &lt;bean/&gt; element inside the &lt;property/&gt; or &lt;constructor-arg/&gt; elements is called inner bean and it is shown below. Example Let us have working Eclipse IDE in place and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4583"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4583"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4583/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4583"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4583"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4583"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2930,"date":"2020-06-20T05:42:10","date_gmt":"2020-06-20T05:42:10","guid":{"rendered":"http://java.foobrdigital.com/?p=266"},"modified":"2020-06-20T05:42:10","modified_gmt":"2020-06-20T05:42:10","slug":"injecting-collection","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/injecting-collection/","title":{"rendered":"Injecting Collection"},"content":{"rendered":"\n<p>You have seen how to configure primitive data type using&nbsp;<strong>value</strong>&nbsp;attribute and object references using&nbsp;<strong>ref</strong>&nbsp;attribute of the &lt;property&gt; tag in your Bean configuration file. Both the cases deal with passing singular value to a bean.</p>\n\n\n\n<p>Now what if you want to pass plural values like Java Collection types such as List, Set, Map, and Properties. To handle the situation, Spring offers four types of collection configuration elements which are as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Element &amp; Description</th></tr><tr><td>1</td><td><strong>&lt;list&gt;</strong>This helps in wiring ie injecting a list of values, allowing duplicates.</td></tr><tr><td>2</td><td><strong>&lt;set&gt;</strong>This helps in wiring a set of values but without any duplicates.</td></tr><tr><td>3</td><td><strong>&lt;map&gt;</strong>This can be used to inject a collection of name-value pairs where name and value can be of any type.</td></tr><tr><td>4</td><td><strong>&lt;props&gt;</strong>This can be used to inject a collection of name-value pairs where the name and value are both Strings.</td></tr></tbody></table></figure>\n\n\n\n<p>You can use either &lt;list&gt; or &lt;set&gt; to wire any implementation of java.util.Collection or an&nbsp;<strong>array</strong>.</p>\n\n\n\n<p>You will come across two situations (a) Passing direct values of the collection and (b) Passing a reference of a bean as one of the collection elements.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let us have a working Eclipse IDE in place and take the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create Java classes <em>JavaCollection</em>, and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>4</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>JavaCollection.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint;\nimport java.util.*;\n\npublic class JavaCollection {\n   List addressList;\n   Set  addressSet;\n   Map  addressMap;\n   Properties addressProp;\n\n   // a setter method to set List\n   public void setAddressList(List addressList) {\n      this.addressList = addressList;\n   }\n   \n   // prints and returns all the elements of the list.\n   public List getAddressList() {\n      System.out.println(\"List Elements :\"  + addressList);\n      return addressList;\n   }\n   \n   // a setter method to set Set\n   public void setAddressSet(Set addressSet) {\n      this.addressSet = addressSet;\n   }\n   \n   // prints and returns all the elements of the Set.\n   public Set getAddressSet() {\n      System.out.println(\"Set Elements :\"  + addressSet);\n      return addressSet;\n   }\n   \n   // a setter method to set Map\n   public void setAddressMap(Map addressMap) {\n      this.addressMap = addressMap;\n   }\n   \n   // prints and returns all the elements of the Map.\n   public Map getAddressMap() {\n      System.out.println(\"Map Elements :\"  + addressMap);\n      return addressMap;\n   }\n   \n   // a setter method to set Property\n   public void setAddressProp(Properties addressProp) {\n      this.addressProp = addressProp;\n   }\n   \n   // prints and returns all the elements of the Property.\n   public Properties getAddressProp() {\n      System.out.println(\"Property Elements :\"  + addressProp);\n      return addressProp;\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      JavaCollection jc=(JavaCollection)context.getBean(\"javaCollection\");\n\n      jc.getAddressList();\n      jc.getAddressSet();\n      jc.getAddressMap();\n      jc.getAddressProp();\n   }\n}</code></pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong>&nbsp;which has configuration for all the type of collections −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;!-- Definition for javaCollection -->\n   &lt;bean id = \"javaCollection\" class = \"com.tutorialspoint.JavaCollection\">\n      \n      &lt;!-- results in a setAddressList(java.util.List) call -->\n      &lt;property name = \"addressList\">\n         &lt;list>\n            &lt;value>INDIA&lt;/value>\n            &lt;value>Pakistan&lt;/value>\n            &lt;value>USA&lt;/value>\n            &lt;value>USA&lt;/value>\n         &lt;/list>\n      &lt;/property>\n\n      &lt;!-- results in a setAddressSet(java.util.Set) call -->\n      &lt;property name = \"addressSet\">\n         &lt;set>\n            &lt;value>INDIA&lt;/value>\n            &lt;value>Pakistan&lt;/value>\n            &lt;value>USA&lt;/value>\n            &lt;value>USA&lt;/value>\n         &lt;/set>\n      &lt;/property>\n\n      &lt;!-- results in a setAddressMap(java.util.Map) call -->\n      &lt;property name = \"addressMap\">\n         &lt;map>\n            &lt;entry key = \"1\" value = \"INDIA\"/>\n            &lt;entry key = \"2\" value = \"Pakistan\"/>\n            &lt;entry key = \"3\" value = \"USA\"/>\n            &lt;entry key = \"4\" value = \"USA\"/>\n         &lt;/map>\n      &lt;/property>\n      \n      &lt;!-- results in a setAddressProp(java.util.Properties) call -->\n      &lt;property name = \"addressProp\">\n         &lt;props>\n            &lt;prop key = \"one\">INDIA&lt;/prop>\n            &lt;prop key = \"one\">INDIA&lt;/prop>\n            &lt;prop key = \"two\">Pakistan&lt;/prop>\n            &lt;prop key = \"three\">USA&lt;/prop>\n            &lt;prop key = \"four\">USA&lt;/prop>\n         &lt;/props>\n      &lt;/property>\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>List Elements :&#91;INDIA, Pakistan, USA, USA] \nSet Elements :&#91;INDIA, Pakistan, USA] \nap Elements :{1 = INDIA, 2 = Pakistan, 3 = USA, 4 = USA} \nProperty Elements :{two = Pakistan, one = INDIA, three = USA, four = USA} </code></pre>\n\n\n\n<h2>Injecting Bean References</h2>\n\n\n\n<p>The following Bean definition will help you understand how to inject bean references as one of the collection&#8217;s element. Even you can mix references and values all together as shown in the following code snippet −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;!-- Bean Definition to handle references and values -->\n   &lt;bean id = \"...\" class = \"...\">\n\n      &lt;!-- Passing bean reference  for java.util.List -->\n      &lt;property name = \"addressList\">\n         &lt;list>\n            &lt;ref bean = \"address1\"/>\n            &lt;ref bean = \"address2\"/>\n            &lt;value>Pakistan&lt;/value>\n         &lt;/list>\n      &lt;/property>\n      \n      &lt;!-- Passing bean reference  for java.util.Set -->\n      &lt;property name = \"addressSet\">\n         &lt;set>\n            &lt;ref bean = \"address1\"/>\n            &lt;ref bean = \"address2\"/>\n            &lt;value>Pakistan&lt;/value>\n         &lt;/set>\n      &lt;/property>\n      \n      &lt;!-- Passing bean reference  for java.util.Map -->\n      &lt;property name = \"addressMap\">\n         &lt;map>\n            &lt;entry key = \"one\" value = \"INDIA\"/>\n            &lt;entry key = \"two\" value-ref = \"address1\"/>\n            &lt;entry key = \"three\" value-ref = \"address2\"/>\n         &lt;/map>\n      &lt;/property>\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>To use the above bean definition, you need to define your setter methods in such a way that they should be able to handle references as well.</p>\n\n\n\n<h2>Injecting null and empty string values</h2>\n\n\n\n<p>If you need to pass an empty string as a value, then you can pass it as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"...\" class = \"exampleBean\">\n   &lt;property name = \"email\" value = \"\"/>\n&lt;/bean></code></pre>\n\n\n\n<p>The preceding example is equivalent to the Java code: exampleBean.setEmail(&#8220;&#8221;)</p>\n\n\n\n<p>If you need to pass a NULL value, then you can pass it as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"...\" class = \"exampleBean\">\n   &lt;property name = \"email\">&lt;null/>&lt;/property>\n&lt;/bean></code></pre>\n\n\n\n<p>The preceding example is equivalent to the Java code: exampleBean.setEmail(null)</p>\n","protected":false},"excerpt":{"rendered":"<p>You have seen how to configure primitive data type using&nbsp;value&nbsp;attribute and object references using&nbsp;ref&nbsp;attribute of the &lt;property&gt; tag in your Bean configuration file. Both the cases deal with passing singular value to a bean. Now what if you want to pass plural values like Java Collection types such as List, Set, Map, and Properties. To [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2930"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2930"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2930/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2930"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2930"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2930"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4584,"date":"2020-06-20T05:42:52","date_gmt":"2020-06-20T05:42:52","guid":{"rendered":"http://java.foobrdigital.com/?p=268"},"modified":"2020-06-20T05:42:52","modified_gmt":"2020-06-20T05:42:52","slug":"beans-auto-wiring","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/beans-auto-wiring/","title":{"rendered":"Beans Auto-Wiring"},"content":{"rendered":"\n<p>You have learnt how to declare beans using the &lt;bean&gt; element and inject &lt;bean&gt; using &lt;constructor-arg&gt; and &lt;property&gt; elements in XML configuration file.</p>\n\n\n\n<p>The Spring container can&nbsp;<strong>autowire</strong>&nbsp;relationships between collaborating beans without using &lt;constructor-arg&gt; and &lt;property&gt; elements, which helps cut down on the amount of XML configuration you write for a big Spring-based application.</p>\n\n\n\n<h2>Autowiring Modes</h2>\n\n\n\n<p>Following are the autowiring modes, which can be used to instruct the Spring container to use autowiring for dependency injection. You use the autowire attribute of the &lt;bean/&gt; element to specify&nbsp;<strong>autowire</strong>&nbsp;mode for a bean definition.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Mode &amp; Description</th></tr><tr><td>1</td><td><strong>no</strong>This is default setting which means no autowiring and you should use explicit bean reference for wiring. You have nothing to do special for this wiring. This is what you already have seen in Dependency Injection chapter.</td></tr><tr><td>2</td><td>byNameAutowiring by property name. Spring container looks at the properties of the beans on which <em>autowire</em> attribute is set to <em>byName</em> in the XML configuration file. It then tries to match and wire its properties with the beans defined by the same names in the configuration file.</td></tr><tr><td>3</td><td>byTypeAutowiring by property datatype. Spring container looks at the properties of the beans on which <em>autowire</em> attribute is set to <em>byType</em> in the XML configuration file. It then tries to match and wire a property if its <strong>type</strong> matches with exactly one of the beans name in configuration file. If more than one such beans exists, a fatal exception is thrown.</td></tr><tr><td>4</td><td>constructorSimilar to byType, but type applies to constructor arguments. If there is not exactly one bean of the constructor argument type in the container, a fatal error is raised.</td></tr><tr><td>5</td><td><strong>autodetect</strong>Spring first tries to wire using autowire by&nbsp;<em>constructor</em>, if it does not work, Spring tries to autowire by&nbsp;<em>byType</em>.</td></tr></tbody></table></figure>\n\n\n\n<p>You can use&nbsp;<strong>byType</strong>&nbsp;or&nbsp;<strong>constructor</strong>&nbsp;autowiring mode to wire arrays and other typed-collections.</p>\n\n\n\n<h2>Limitations with autowiring</h2>\n\n\n\n<p>Autowiring works best when it is used consistently across a project. If autowiring is not used in general, it might be confusing for developers to use it to wire only one or two bean definitions. Though, autowiring can significantly reduce the need to specify properties or constructor arguments but you should consider the limitations and disadvantages of autowiring before using them.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Limitations &amp; Description</th></tr><tr><td>1</td><td><strong>Overriding possibility</strong>You can still specify dependencies using &lt;constructor-arg&gt; and &lt;property&gt; settings which will always override autowiring.</td></tr><tr><td>2</td><td><strong>Primitive data types</strong>You cannot autowire so-called simple properties such as primitives, Strings, and Classes.</td></tr><tr><td>3</td><td><strong>Confusing nature</strong>Autowiring is less exact than explicit wiring, so if possible prefer using explict wiring.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>You have learnt how to declare beans using the &lt;bean&gt; element and inject &lt;bean&gt; using &lt;constructor-arg&gt; and &lt;property&gt; elements in XML configuration file. The Spring container can&nbsp;autowire&nbsp;relationships between collaborating beans without using &lt;constructor-arg&gt; and &lt;property&gt; elements, which helps cut down on the amount of XML configuration you write for a big Spring-based application. Autowiring Modes [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4584"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4584"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4584/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4584"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4584"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4584"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4592,"date":"2020-06-20T05:44:12","date_gmt":"2020-06-20T05:44:12","guid":{"rendered":"http://java.foobrdigital.com/?p=270"},"modified":"2020-06-20T05:44:12","modified_gmt":"2020-06-20T05:44:12","slug":"annotation-based-configuration","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/annotation-based-configuration/","title":{"rendered":"Annotation Based Configuration"},"content":{"rendered":"\n<p>Starting from Spring 2.5 it became possible to configure the dependency injection using&nbsp;<strong>annotations</strong>. So instead of using XML to describe a bean wiring, you can move the bean configuration into the component class itself by using annotations on the relevant class, method, or field declaration.</p>\n\n\n\n<p>Annotation injection is performed before XML injection. Thus, the latter configuration will override the former for properties wired through both approaches.</p>\n\n\n\n<p>Annotation wiring is not turned on in the Spring container by default. So, before we can use annotation-based wiring, we will need to enable it in our Spring configuration file. So consider the following configuration file in case you want to use any annotation in your Spring application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xmlns:context = \"http://www.springframework.org/schema/context\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http:&#47;&#47;www.springframework.org/schema/beans/spring-beans-3.0.xsd\n   http://www.springframework.org/schema/context\n   http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n   &lt;context:annotation-config/>\n   &lt;!-- bean definitions go here -->\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once &lt;context:annotation-config/&gt; is configured, you can start annotating your code to indicate that Spring should automatically wire values into properties, methods, and constructors. Let us look at a few important annotations to understand how they work −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Annotation &amp; Description</th></tr><tr><td>1</td><td>@RequiredThe @Required annotation applies to bean property setter methods.</td></tr><tr><td>2</td><td>@AutowiredThe @Autowired annotation can apply to bean property setter methods, non-setter methods, constructor and properties.</td></tr><tr><td>3</td><td>@QualifierThe @Qualifier annotation along with @Autowired can be used to remove the confusion by specifiying which exact bean will be wired.</td></tr><tr><td>4</td><td>JSR-250 AnnotationsSpring supports JSR-250 based annotations which include @Resource, @PostConstruct and @PreDestroy annotations.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Starting from Spring 2.5 it became possible to configure the dependency injection using&nbsp;annotations. So instead of using XML to describe a bean wiring, you can move the bean configuration into the component class itself by using annotations on the relevant class, method, or field declaration. Annotation injection is performed before XML injection. Thus, the latter [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4592"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4592"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4592/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4592"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4592"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4592"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4585,"date":"2020-06-20T05:49:24","date_gmt":"2020-06-20T05:49:24","guid":{"rendered":"http://java.foobrdigital.com/?p=274"},"modified":"2020-06-20T05:49:24","modified_gmt":"2020-06-20T05:49:24","slug":"java-based-configuration","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/java-based-configuration/","title":{"rendered":"Java Based Configuration"},"content":{"rendered":"\n<p>So far you have seen how we configure Spring beans using XML configuration file. If you are comfortable with XML configuration, then it is really not required to learn how to proceed with Java-based configuration as you are going to achieve the same result using either of the configurations available.</p>\n\n\n\n<p>Java-based configuration option enables you to write most of your Spring configuration without XML but with the help of few Java-based annotations explained in this chapter.</p>\n\n\n\n<h2>@Configuration &amp; @Bean Annotations</h2>\n\n\n\n<p>Annotating a class with the&nbsp;<strong>@Configuration</strong>&nbsp;indicates that the class can be used by the Spring IoC container as a source of bean definitions. The&nbsp;<strong>@Bean</strong>&nbsp;annotation tells Spring that a method annotated with @Bean will return an object that should be registered as a bean in the Spring application context. The simplest possible @Configuration class would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\nimport org.springframework.context.annotation.*;\n\n@Configuration\npublic class HelloWorldConfig {\n   @Bean \n   public HelloWorld helloWorld(){\n      return new HelloWorld();\n   }\n}</code></pre>\n\n\n\n<p>The above code will be equivalent to the following XML configuration −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans>\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\" />\n&lt;/beans></code></pre>\n\n\n\n<p>Here, the method name is annotated with @Bean works as bean ID and it creates and returns the actual bean. Your configuration class can have a declaration for more than one @Bean. Once your configuration classes are defined, you can load and provide them to Spring container using&nbsp;<em>AnnotationConfigApplicationContext</em>&nbsp;as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static void main(String&#91;] args) {\n   ApplicationContext ctx = new AnnotationConfigApplicationContext(HelloWorldConfig.class);\n   \n   HelloWorld helloWorld = ctx.getBean(HelloWorld.class);\n   helloWorld.setMessage(\"Hello World!\");\n   helloWorld.getMessage();\n}</code></pre>\n\n\n\n<p>You can load various configuration classes as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static void main(String&#91;] args) {\n   AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n\n   ctx.register(AppConfig.class, OtherConfig.class);\n   ctx.register(AdditionalConfig.class);\n   ctx.refresh();\n\n   MyService myService = ctx.getBean(MyService.class);\n   myService.doStuff();\n}</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us have a working Eclipse IDE in place and take the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Because you are using Java-based annotations, so you also need to add&nbsp;<em>CGLIB.jar</em>&nbsp;from your Java installation directory and&nbsp;<em>ASM.jar</em>&nbsp;library which can be downloaded from&nbsp;<em>asm.ow2.org</em>.</td></tr><tr><td>4</td><td>Create Java classes <em>HelloWorldConfig</em>, <em>HelloWorld</em> and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorldConfig.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\nimport org.springframework.context.annotation.*;\n\n@Configuration\npublic class HelloWorldConfig {\n   @Bean \n   public HelloWorld helloWorld(){\n      return new HelloWorld();\n   }\n}</code></pre>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message;\n\n   public void setMessage(String message){\n      this.message  = message;\n   }\n   public void getMessage(){\n      System.out.println(\"Your Message : \" + message);\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.*;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext ctx = \n         new AnnotationConfigApplicationContext(HelloWorldConfig.class);\n   \n      HelloWorld helloWorld = ctx.getBean(HelloWorld.class);\n      helloWorld.setMessage(\"Hello World!\");\n      helloWorld.getMessage();\n   }\n}</code></pre>\n\n\n\n<p>Once you are done creating all the source files and adding the required additional libraries, let us run the application. You should note that there is no configuration file required. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Your Message : Hello World!</code></pre>\n\n\n\n<h2>Injecting Bean Dependencies</h2>\n\n\n\n<p>When @Beans have dependencies on one another, expressing that the dependency is as simple as having one bean method calling another as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\nimport org.springframework.context.annotation.*;\n\n@Configuration\npublic class AppConfig {\n   @Bean\n   public Foo foo() {\n      return new Foo(bar());\n   }\n   @Bean\n   public Bar bar() {\n      return new Bar();\n   }\n}</code></pre>\n\n\n\n<p>Here, the foo bean receives a reference to bar via the constructor injection. Now let us look at another working example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us have a working Eclipse IDE in place and take the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Because you are using Java-based annotations, so you also need to add&nbsp;<em>CGLIB.jar</em>&nbsp;from your Java installation directory and&nbsp;<em>ASM.jar</em>&nbsp;library which can be downloaded from&nbsp;<em>asm.ow2.org</em>.</td></tr><tr><td>4</td><td>Create Java classes <em>TextEditorConfig</em>, <em>TextEditor</em>, <em>SpellChecker</em> and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>TextEditorConfig.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\nimport org.springframework.context.annotation.*;\n\n@Configuration\npublic class TextEditorConfig {\n   @Bean \n   public TextEditor textEditor(){\n      return new TextEditor( spellChecker() );\n   }\n\n   @Bean \n   public SpellChecker spellChecker(){\n      return new SpellChecker( );\n   }\n}</code></pre>\n\n\n\n<p>Here is the content of&nbsp;<strong>TextEditor.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class TextEditor {\n   private SpellChecker spellChecker;\n\n   public TextEditor(SpellChecker spellChecker){\n      System.out.println(\"Inside TextEditor constructor.\" );\n      this.spellChecker = spellChecker;\n   }\n   public void spellCheck(){\n      spellChecker.checkSpelling();\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of another dependent class file&nbsp;<strong>SpellChecker.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class SpellChecker {\n   public SpellChecker(){\n      System.out.println(\"Inside SpellChecker constructor.\" );\n   }\n   public void checkSpelling(){\n      System.out.println(\"Inside checkSpelling.\" );\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.*;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext ctx = \n         new AnnotationConfigApplicationContext(TextEditorConfig.class);\n\n      TextEditor te = ctx.getBean(TextEditor.class);\n      te.spellCheck();\n   }\n}</code></pre>\n\n\n\n<p>Once you are done creating all the source files and adding the required additional libraries, let us run the application. You should note that there is no configuration file required. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside SpellChecker constructor.\nInside TextEditor constructor.\nInside checkSpelling.\n﻿</code></pre>\n\n\n\n<h2>The @Import Annotation</h2>\n\n\n\n<p>The&nbsp;<strong>@Import</strong>&nbsp;annotation allows for loading @Bean definitions from another configuration class. Consider a ConfigA class as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Configuration\npublic class ConfigA {\n   @Bean\n   public A a() {\n      return new A(); \n   }\n}</code></pre>\n\n\n\n<p>You can import above Bean declaration in another Bean Declaration as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Configuration\n@Import(ConfigA.class)\npublic class ConfigB {\n   @Bean\n   public B b() {\n      return new B(); \n   }\n}</code></pre>\n\n\n\n<p>Now, rather than needing to specify both ConfigA.class and ConfigB.class when instantiating the context, only ConfigB needs to be supplied as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static void main(String&#91;] args) {\n   ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigB.class);\n   \n   // now both beans A and B will be available...\n   A a = ctx.getBean(A.class);\n   B b = ctx.getBean(B.class);\n}</code></pre>\n\n\n\n<h2>Lifecycle Callbacks</h2>\n\n\n\n<p>The @Bean annotation supports specifying arbitrary initialization and destruction callback methods, much like Spring XML&#8217;s init-method and destroy-method attributes on the bean element −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Foo {\n   public void init() {\n      // initialization logic\n   }\n   public void cleanup() {\n      // destruction logic\n   }\n}\n@Configuration\npublic class AppConfig {\n   @Bean(initMethod = \"init\", destroyMethod = \"cleanup\" )\n   public Foo foo() {\n      return new Foo();\n   }\n}</code></pre>\n\n\n\n<h2>Specifying Bean Scope</h2>\n\n\n\n<p>The default scope is singleton, but you can override this with the @Scope annotation as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Configuration\npublic class AppConfig {\n   @Bean\n   @Scope(\"prototype\")\n   public Foo foo() {\n      return new Foo();\n   }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>So far you have seen how we configure Spring beans using XML configuration file. If you are comfortable with XML configuration, then it is really not required to learn how to proceed with Java-based configuration as you are going to achieve the same result using either of the configurations available. Java-based configuration option enables you [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4585"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4585"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4585/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4585"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4585"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4585"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2932,"date":"2020-06-20T05:54:43","date_gmt":"2020-06-20T05:54:43","guid":{"rendered":"http://java.foobrdigital.com/?p=276"},"modified":"2020-06-20T05:54:43","modified_gmt":"2020-06-20T05:54:43","slug":"event-handling-in-spring","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/event-handling-in-spring/","title":{"rendered":"Event Handling in Spring"},"content":{"rendered":"\n<p>You have seen in all the chapters that the core of Spring is the&nbsp;<strong>ApplicationContext</strong>, which manages the complete life cycle of the beans. The ApplicationContext publishes certain types of events when loading the beans. For example, a&nbsp;<em>ContextStartedEvent</em>&nbsp;is published when the context is started and&nbsp;<em>ContextStoppedEvent</em>&nbsp;is published when the context is stopped.</p>\n\n\n\n<p>Event handling in the&nbsp;<em>ApplicationContext</em>&nbsp;is provided through the&nbsp;<em>ApplicationEvent</em>&nbsp;class and&nbsp;<em>ApplicationListener</em>&nbsp;interface. Hence, if a bean implements the&nbsp;<em>ApplicationListener</em>, then every time an&nbsp;<em>ApplicationEvent</em>&nbsp;gets published to the ApplicationContext, that bean is notified.</p>\n\n\n\n<p>Spring provides the following standard events −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Spring Built-in Events &amp; Description</th></tr><tr><td>1</td><td><strong>ContextRefreshedEvent</strong>This event is published when the&nbsp;<em>ApplicationContext</em>&nbsp;is either initialized or refreshed. This can also be raised using the refresh() method on the&nbsp;<em>ConfigurableApplicationContext</em>&nbsp;interface.</td></tr><tr><td>2</td><td><strong>ContextStartedEvent</strong>This event is published when the&nbsp;<em>ApplicationContext</em>&nbsp;is started using the start() method on the&nbsp;<em>ConfigurableApplicationContext</em>&nbsp;interface. You can poll your database or you can restart any stopped application after receiving this event.</td></tr><tr><td>3</td><td><strong>ContextStoppedEvent</strong>This event is published when the&nbsp;<em>ApplicationContext</em>&nbsp;is stopped using the stop() method on the&nbsp;<em>ConfigurableApplicationContext</em>&nbsp;interface. You can do required housekeep work after receiving this event.</td></tr><tr><td>4</td><td><strong>ContextClosedEvent</strong>This event is published when the&nbsp;<em>ApplicationContext</em>&nbsp;is closed using the close() method on the&nbsp;<em>ConfigurableApplicationContext</em>&nbsp;interface. A closed context reaches its end of life; it cannot be refreshed or restarted.</td></tr><tr><td>5</td><td><strong>RequestHandledEvent</strong>This is a web-specific event telling all beans that an HTTP request has been serviced.</td></tr></tbody></table></figure>\n\n\n\n<p>Spring&#8217;s event handling is single-threaded so if an event is published, until and unless all the receivers get the message, the processes are blocked and the flow will not continue. Hence, care should be taken when designing your application if the event handling is to be used.</p>\n\n\n\n<h2>Listening to Context Events</h2>\n\n\n\n<p>To listen to a context event, a bean should implement the&nbsp;<em>ApplicationListener</em>&nbsp;interface which has just one method&nbsp;<strong>onApplicationEvent()</strong>. So let us write an example to see how the events propagates and how you can put your code to do required task based on certain events.</p>\n\n\n\n<p>Let us have a working Eclipse IDE in place and take the following steps to create a Spring application −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name&nbsp;<em>SpringExample</em>&nbsp;and create a package&nbsp;<em>com.<strong>codemeals</strong></em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create Java classes&nbsp;<em>HelloWorld</em>,&nbsp;<em>CStartEventHandler</em>,&nbsp;<em>CStopEventHandler</em>&nbsp;and&nbsp;<em>MainApp</em>&nbsp;under the&nbsp;<em>com.<strong>codemeals</strong></em>&nbsp;package.</td></tr><tr><td>4</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>5</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message;\n\n   public void setMessage(String message){\n      this.message  = message;\n   }\n   public void getMessage(){\n      System.out.println(\"Your Message : \" + message);\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>CStartEventHandler.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.event.ContextStartedEvent;\n\npublic class CStartEventHandler \n   implements ApplicationListener&lt;ContextStartedEvent>{\n\n   public void onApplicationEvent(ContextStartedEvent event) {\n      System.out.println(\"ContextStartedEvent Received\");\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>CStopEventHandler.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.event.ContextStoppedEvent;\n\npublic class CStopEventHandler \n   implements ApplicationListener&lt;ContextStoppedEvent>{\n\n   public void onApplicationEvent(ContextStoppedEvent event) {\n      System.out.println(\"ContextStoppedEvent Received\");\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ConfigurableApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      // Let us raise a start event.\n      context.start();\n\t  \n      HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");\n      obj.getMessage();\n\n      // Let us raise a stop event.\n      context.stop();\n   }\n}</code></pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\">\n      &lt;property name = \"message\" value = \"Hello World!\"/>\n   &lt;/bean>\n\n   &lt;bean id = \"cStartEventHandler\" class = \"com.codemeals.CStartEventHandler\"/>\n   &lt;bean id = \"cStopEventHandler\" class = \"com.codemeals.CStopEventHandler\"/>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, </p>\n\n\n\n<p>If you like, you can publish your own custom events and later you can capture the same to take any action against those custom events. If you are interested in writing your own custom events, you can check&nbsp;Custom Events in Spring.</p>\n","protected":false},"excerpt":{"rendered":"<p>You have seen in all the chapters that the core of Spring is the&nbsp;ApplicationContext, which manages the complete life cycle of the beans. The ApplicationContext publishes certain types of events when loading the beans. For example, a&nbsp;ContextStartedEvent&nbsp;is published when the context is started and&nbsp;ContextStoppedEvent&nbsp;is published when the context is stopped. Event handling in the&nbsp;ApplicationContext&nbsp;is provided [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2932"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2932"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2932/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2932"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2932"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2932"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4593,"date":"2020-06-20T06:00:03","date_gmt":"2020-06-20T06:00:03","guid":{"rendered":"http://java.foobrdigital.com/?p=278"},"modified":"2020-06-20T06:00:03","modified_gmt":"2020-06-20T06:00:03","slug":"custom-events-in-spring","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/custom-events-in-spring/","title":{"rendered":"Custom Events in Spring"},"content":{"rendered":"\n<p>There are number of steps to be taken to write and publish your own custom events. Follow the instructions given in this chapter to write, publish and handle Custom Spring Events.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project. All the classes will be created under this package.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Create an event class,&nbsp;<em>CustomEvent</em>&nbsp;by extending&nbsp;<strong>ApplicationEvent</strong>. This class must define a default constructor which should inherit constructor from ApplicationEvent class.</td></tr><tr><td>4</td><td>Once your event class is defined, you can publish it from any class, let us say&nbsp;<em>EventClassPublisher</em>&nbsp;which implements&nbsp;<em>ApplicationEventPublisherAware</em>. You will also need to declare this class in XML configuration file as a bean so that the container can identify the bean as an event publisher because it implements the ApplicationEventPublisherAware interface.</td></tr><tr><td>5</td><td>A published event can be handled in a class, let us say&nbsp;<em>EventClassHandler</em>&nbsp;which implements&nbsp;<em>ApplicationListener</em>&nbsp;interface and implements&nbsp;<em>onApplicationEvent</em>&nbsp;method for the custom event.</td></tr><tr><td>6</td><td>Create beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder and a&nbsp;<em>MainApp</em>&nbsp;class which will work as Spring application.</td></tr><tr><td>7</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>CustomEvent.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationEvent;\n\npublic class CustomEvent extends ApplicationEvent{\n   public CustomEvent(Object source) {\n      super(source);\n   }\n   public String toString(){\n      return \"My Custom Event\";\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>CustomEventPublisher.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.context.ApplicationEventPublisherAware;\n\npublic class CustomEventPublisher implements ApplicationEventPublisherAware {\n   private ApplicationEventPublisher publisher;\n   \n   public void setApplicationEventPublisher (ApplicationEventPublisher publisher) {\n      this.publisher = publisher;\n   }\n   public void publish() {\n      CustomEvent ce = new CustomEvent(this);\n      publisher.publishEvent(ce);\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>CustomEventHandler.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationListener;\n\npublic class CustomEventHandler implements ApplicationListener&lt;CustomEvent> {\n   public void onApplicationEvent(CustomEvent event) {\n      System.out.println(event.toString());\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ConfigurableApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\t  \n      CustomEventPublisher cvp = \n         (CustomEventPublisher) context.getBean(\"customEventPublisher\");\n      \n      cvp.publish();  \n      cvp.publish();\n   }\n}</code></pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"customEventHandler\" class = \"com.codemeals.CustomEventHandler\"/>\n   &lt;bean id = \"customEventPublisher\" class = \"com.codemeals.CustomEventPublisher\"/>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>y Custom Event\ny Custom Event</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>There are number of steps to be taken to write and publish your own custom events. Follow the instructions given in this chapter to write, publish and handle Custom Spring Events. Steps Description 1 Create a project with a name SpringExample and create a package com.codemeals under the src folder in the created project. All the classes will be created under [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4593"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4593"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4593/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4593"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4593"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4593"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2934,"date":"2020-06-20T06:00:52","date_gmt":"2020-06-20T06:00:52","guid":{"rendered":"http://java.foobrdigital.com/?p=283"},"modified":"2020-06-20T06:00:52","modified_gmt":"2020-06-20T06:00:52","slug":"aop-with-spring-framework","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aop-with-spring-framework/","title":{"rendered":"AOP with Spring Framework"},"content":{"rendered":"\n<p>One of the key components of Spring Framework is the&nbsp;<strong>Aspect oriented programming (AOP)</strong>&nbsp;framework. Aspect-Oriented Programming entails breaking down program logic into distinct parts called so-called concerns. The functions that span multiple points of an application are called&nbsp;<strong>cross-cutting concerns</strong>&nbsp;and these cross-cutting concerns are conceptually separate from the application&#8217;s business logic. There are various common good examples of aspects like logging, auditing, declarative transactions, security, caching, etc.</p>\n\n\n\n<p>The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. Dependency Injection helps you decouple your application objects from each other and AOP helps you decouple cross-cutting concerns from the objects that they affect. AOP is like triggers in programming languages such as Perl, .NET, Java, and others.</p>\n\n\n\n<p>Spring AOP module provides interceptors to intercept an application. For example, when a method is executed, you can add extra functionality before or after the method execution.</p>\n\n\n\n<h2>AOP Terminologies</h2>\n\n\n\n<p>Before we start working with AOP, let us become familiar with the AOP concepts and terminology. These terms are not specific to Spring, rather they are related to AOP.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Terms &amp; Description</th></tr><tr><td>1</td><td><strong>Aspect</strong>This is a module which has a set of APIs providing cross-cutting requirements. For example, a logging module would be called AOP aspect for logging. An application can have any number of aspects depending on the requirement.</td></tr><tr><td>2</td><td><strong>Join point</strong>This represents a point in your application where you can plug-in the AOP aspect. You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework.</td></tr><tr><td>3</td><td><strong>Advice</strong>This is the actual action to be taken either before or after the method execution. This is an actual piece of code that is invoked during the program execution by Spring AOP framework.</td></tr><tr><td>4</td><td><strong>Pointcut</strong>This is a set of one or more join points where an advice should be executed. You can specify pointcuts using expressions or patterns as we will see in our AOP examples.</td></tr><tr><td>5</td><td><strong>Introduction</strong>An introduction allows you to add new methods or attributes to the existing classes.</td></tr><tr><td>6</td><td><strong>Target object</strong>The object being advised by one or more aspects. This object will always be a proxied object, also referred to as the advised object.</td></tr><tr><td>7</td><td><strong>Weaving</strong>Weaving is the process of linking aspects with other application types or objects to create an advised object. This can be done at compile time, load time, or at runtime.</td></tr></tbody></table></figure>\n\n\n\n<h2>Types of Advice</h2>\n\n\n\n<p>Spring aspects can work with five kinds of advice mentioned as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Advice &amp; Description</th></tr><tr><td>1</td><td><strong>before</strong>Run advice before the a method execution.</td></tr><tr><td>2</td><td><strong>after</strong>Run advice after the method execution, regardless of its outcome.</td></tr><tr><td>3</td><td><strong>after-returning</strong>Run advice after the a method execution only if method completes successfully.</td></tr><tr><td>4</td><td><strong>after-throwing</strong>Run advice after the a method execution only if method exits by throwing an exception.</td></tr><tr><td>5</td><td><strong>around</strong>Run advice before and after the advised method is invoked.</td></tr></tbody></table></figure>\n\n\n\n<h2>Custom Aspects Implementation</h2>\n\n\n\n<p>Spring supports the&nbsp;<strong>@AspectJ annotation style</strong>&nbsp;approach and the&nbsp;<strong>schema-based</strong>&nbsp;approach to implement custom aspects. These two approaches have been explained in detail in the following sections.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Approach &amp; Description</th></tr><tr><td>1</td><td>XML Schema basedAspects are implemented using the regular classes along with XML based configuration.</td></tr><tr><td>2</td><td>@AspectJ based@AspectJ refers to a style of declaring aspects as regular Java classes annotated with Java 5 annotations.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>One of the key components of Spring Framework is the&nbsp;Aspect oriented programming (AOP)&nbsp;framework. Aspect-Oriented Programming entails breaking down program logic into distinct parts called so-called concerns. The functions that span multiple points of an application are called&nbsp;cross-cutting concerns&nbsp;and these cross-cutting concerns are conceptually separate from the application&#8217;s business logic. There are various common good examples [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2934"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2934"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2934/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2934"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2934"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2934"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4594,"date":"2020-06-20T06:04:26","date_gmt":"2020-06-20T06:04:26","guid":{"rendered":"http://java.foobrdigital.com/?p=286"},"modified":"2020-06-20T06:04:26","modified_gmt":"2020-06-20T06:04:26","slug":"jdbc-framework-overview","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/jdbc-framework-overview/","title":{"rendered":"JDBC Framework Overview"},"content":{"rendered":"\n<p>While working with the database using plain old JDBC, it becomes cumbersome to write unnecessary code to handle exceptions, opening and closing database connections, etc. However, Spring JDBC Framework takes care of all the low-level details starting from opening the connection, prepare and execute the SQL statement, process exceptions, handle transactions and finally close the connection.</p>\n\n\n\n<p>So what you have to do is just define the connection parameters and specify the SQL statement to be executed and do the required work for each iteration while fetching data from the database.</p>\n\n\n\n<p>Spring JDBC provides several approaches and correspondingly different classes to interface with the database. I&#8217;m going to take classic and the most popular approach which makes use of&nbsp;<strong>JdbcTemplate</strong>&nbsp;class of the framework. This is the central framework class that manages all the database communication and exception handling.</p>\n\n\n\n<h2>JdbcTemplate Class</h2>\n\n\n\n<p>The JDBC Template class executes SQL queries, updates statements, stores procedure calls, performs iteration over ResultSets, and extracts returned parameter values. It also catches JDBC exceptions and translates them to the generic, more informative, exception hierarchy defined in the org.springframework.dao package.</p>\n\n\n\n<p>Instances of the&nbsp;<em>JdbcTemplate</em>&nbsp;class are&nbsp;<em>threadsafe</em>&nbsp;once configured. So you can configure a single instance of a&nbsp;<em>JdbcTemplate</em>&nbsp;and then safely inject this shared reference into multiple DAOs.</p>\n\n\n\n<p>A common practice when using the JDBC Template class is to configure a&nbsp;<em>DataSource</em>&nbsp;in your Spring configuration file, and then dependency-inject that shared DataSource bean into your DAO classes, and the JdbcTemplate is created in the setter for the DataSource.</p>\n\n\n\n<h2>Configuring Data Source</h2>\n\n\n\n<p>Let us create a database table <strong>Student</strong> in our database <strong>TEST</strong>. We assume you are working with MySQL database, if you work with any other database then you can change your DDL and SQL queries accordingly.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE Student(\n   ID   INT NOT NULL AUTO_INCREMENT,\n   NAME VARCHAR(20) NOT NULL,\n   AGE  INT NOT NULL,\n   PRIMARY KEY (ID)\n);</code></pre>\n\n\n\n<p>Now we need to supply a DataSource to the JDBC Template so it can configure itself to get database access. You can configure the DataSource in the XML file with a piece of code as shown in the following code snippet −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"dataSource\" \n   class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n   &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"/>\n   &lt;property name = \"url\" value = \"jdbc:mysql://localhost:3306/TEST\"/>\n   &lt;property name = \"username\" value = \"root\"/>\n   &lt;property name = \"password\" value = \"password\"/>\n&lt;/bean></code></pre>\n\n\n\n<h2>Data Access Object (DAO)</h2>\n\n\n\n<p>DAO stands for Data Access Object, which is commonly used for database interaction. DAOs exist to provide a means to read and write data to the database and they should expose this functionality through an interface by which the rest of the application will access them.</p>\n\n\n\n<p>The DAO support in Spring makes it easy to work with data access technologies like JDBC, Hibernate, JPA, or JDO in a consistent way.</p>\n\n\n\n<h2>Executing SQL statements</h2>\n\n\n\n<p>Let us see how we can perform CRUD (Create, Read, Update and Delete) operation on database tables using SQL and JDBC Template object.</p>\n\n\n\n<p><strong>Querying for an integer</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"select count(*) from Student\";\nint rowCount = jdbcTemplateObject.queryForInt( SQL );</code></pre>\n\n\n\n<p><strong>Querying for a long</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"select count(*) from Student\";\nlong rowCount = jdbcTemplateObject.queryForLong( SQL );</code></pre>\n\n\n\n<p><strong>A simple query using a bind variable</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"select age from Student where id = ?\";\nint age = jdbcTemplateObject.queryForInt(SQL, new Object&#91;]{10});</code></pre>\n\n\n\n<p><strong>Querying for a String</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"select name from Student where id = ?\";\nString name = jdbcTemplateObject.queryForObject(SQL, new Object&#91;]{10}, String.class);</code></pre>\n\n\n\n<p><strong>Querying and returning an object</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"select * from Student where id = ?\";\nStudent student = jdbcTemplateObject.queryForObject(\n   SQL, new Object&#91;]{10}, new StudentMapper());\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setID(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      \n      return student;\n   }\n}</code></pre>\n\n\n\n<p><strong>Querying and returning multiple objects</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"select * from Student\";\nList&lt;Student> students = jdbcTemplateObject.query(\n   SQL, new StudentMapper());\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setID(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      \n      return student;\n   }\n}</code></pre>\n\n\n\n<p><strong>Inserting a row into the table</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"insert into Student (name, age) values (?, ?)\";\njdbcTemplateObject.update( SQL, new Object&#91;]{\"Zara\", 11} );</code></pre>\n\n\n\n<p><strong>Updating a row into the table</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"update Student set name = ? where id = ?\";\njdbcTemplateObject.update( SQL, new Object&#91;]{\"Zara\", 10} );</code></pre>\n\n\n\n<p><strong>Deleting a row from the table</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"delete Student where id = ?\";\njdbcTemplateObject.update( SQL, new Object&#91;]{20} );</code></pre>\n\n\n\n<h2>Executing DDL Statements</h2>\n\n\n\n<p>You can use the <strong>execute(..)</strong> method from <em>jdbcTemplate</em> to execute any SQL statements or DDL statements. Following is an example to use CREATE statement to create a table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"CREATE TABLE Student( \" +\n   \"ID   INT NOT NULL AUTO_INCREMENT, \" +\n   \"NAME VARCHAR(20) NOT NULL, \" +\n   \"AGE  INT NOT NULL, \" +\n   \"PRIMARY KEY (ID));\"\n\njdbcTemplateObject.execute( SQL );</code></pre>\n\n\n\n<h2>Spring JDBC Framework Examples</h2>\n\n\n\n<p>Based on the above concepts, let us check few important examples which will help you in understanding usage of JDBC framework in Spring −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Example &amp; Description</th></tr><tr><td>1</td><td>Spring JDBC ExampleThis example will explain how to write a simple JDBC-based Spring application.</td></tr><tr><td>2</td><td>SQL Stored Procedure in SpringLearn how to call SQL stored procedure while using JDBC in Spring.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>While working with the database using plain old JDBC, it becomes cumbersome to write unnecessary code to handle exceptions, opening and closing database connections, etc. However, Spring JDBC Framework takes care of all the low-level details starting from opening the connection, prepare and execute the SQL statement, process exceptions, handle transactions and finally close the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4594"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4594"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4594/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4594"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4594"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4594"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2936,"date":"2020-06-20T06:08:49","date_gmt":"2020-06-20T06:08:49","guid":{"rendered":"http://java.foobrdigital.com/?p=293"},"modified":"2020-06-20T06:08:49","modified_gmt":"2020-06-20T06:08:49","slug":"transaction-management","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/transaction-management/","title":{"rendered":"Transaction Management"},"content":{"rendered":"\n<p>A database transaction is a sequence of actions that are treated as a single unit of work. These actions should either complete entirely or take no effect at all. Transaction management is an important part of RDBMS-oriented enterprise application to ensure data integrity and consistency. The concept of transactions can be described with the following four key properties described as&nbsp;<strong>ACID</strong>&nbsp;−</p>\n\n\n\n<ul><li><strong>Atomicity</strong>&nbsp;− A transaction should be treated as a single unit of operation, which means either the entire sequence of operations is successful or unsuccessful.</li><li><strong>Consistency</strong>&nbsp;− This represents the consistency of the referential integrity of the database, unique primary keys in tables, etc.</li><li><strong>Isolation</strong>&nbsp;− There may be many transaction processing with the same data set at the same time. Each transaction should be isolated from others to prevent data corruption.</li><li><strong>Durability</strong>&nbsp;− Once a transaction has completed, the results of this transaction have to be made permanent and cannot be erased from the database due to system failure.</li></ul>\n\n\n\n<p>A real RDBMS database system will guarantee all four properties for each transaction. The simplistic view of a transaction issued to the database using SQL is as follows −</p>\n\n\n\n<ul><li>Begin the transaction using&nbsp;<em>begin transaction</em>&nbsp;command.</li><li>Perform various deleted, update or insert operations using SQL queries.</li><li>If all the operation are successful then perform&nbsp;<em>commit</em>&nbsp;otherwise&nbsp;<em>rollback</em>&nbsp;all the operations.</li></ul>\n\n\n\n<p>Spring framework provides an abstract layer on top of different underlying transaction management APIs. Spring&#8217;s transaction support aims to provide an alternative to EJB transactions by adding transaction capabilities to POJOs. Spring supports both programmatic and declarative transaction management. EJBs require an application server, but Spring transaction management can be implemented without the need of an application server.</p>\n\n\n\n<h2>Local vs. Global Transactions</h2>\n\n\n\n<p>Local transactions are specific to a single transactional resource like a JDBC connection, whereas global transactions can span multiple transactional resources like transaction in a distributed system.</p>\n\n\n\n<p>Local transaction management can be useful in a centralized computing environment where application components and resources are located at a single site, and transaction management only involves a local data manager running on a single machine. Local transactions are easier to be implemented.</p>\n\n\n\n<p>Global transaction management is required in a distributed computing environment where all the resources are distributed across multiple systems. In such a case, transaction management needs to be done both at local and global levels. A distributed or a global transaction is executed across multiple systems, and its execution requires coordination between the global transaction management system and all the local data managers of all the involved systems.</p>\n\n\n\n<h2>Programmatic vs. Declarative</h2>\n\n\n\n<p>Spring supports two types of transaction management −</p>\n\n\n\n<ul><li>Programmatic transaction management − This means that you have to manage the transaction with the help of programming. That gives you extreme flexibility, but it is difficult to maintain.</li><li>Declarative transaction management − This means you separate transaction management from the business code. You only use annotations or XML-based configuration to manage the transactions.</li></ul>\n\n\n\n<p>Declarative transaction management is preferable over programmatic transaction management though it is less flexible than programmatic transaction management, which allows you to control transactions through your code. But as a kind of crosscutting concern, declarative transaction management can be modularized with the AOP approach. Spring supports declarative transaction management through the Spring AOP framework.</p>\n\n\n\n<h2>Spring Transaction Abstractions</h2>\n\n\n\n<p>The key to the Spring transaction abstraction is defined by the <em>org.springframework.transaction.PlatformTransactionManager</em> interface, which is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface PlatformTransactionManager {\n   TransactionStatus getTransaction(TransactionDefinition definition);\n   throws TransactionException;\n   \n   void commit(TransactionStatus status) throws TransactionException;\n   void rollback(TransactionStatus status) throws TransactionException;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Method &amp; Description</th></tr><tr><td>1</td><td><strong>TransactionStatus getTransaction(TransactionDefinition definition)</strong>This method returns a currently active transaction or creates a new one, according to the specified propagation behavior.</td></tr><tr><td>2</td><td><strong>void commit(TransactionStatus status)</strong>This method commits the given transaction, with regard to its status.</td></tr><tr><td>3</td><td><strong>void rollback(TransactionStatus status)</strong>This method performs a rollback of the given transaction.</td></tr></tbody></table></figure>\n\n\n\n<p>The <em>TransactionDefinition</em> is the core interface of the transaction support in Spring and it is defined as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface TransactionDefinition {\n   int getPropagationBehavior();\n   int getIsolationLevel();\n   String getName();\n   int getTimeout();\n   boolean isReadOnly();\n}</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Method &amp; Description</th></tr><tr><td>1</td><td><strong>int getPropagationBehavior()</strong>This method returns the propagation behavior. Spring offers all of the transaction propagation options familiar from EJB CMT.</td></tr><tr><td>2</td><td><strong>int getIsolationLevel()</strong>This method returns the degree to which this transaction is isolated from the work of other transactions.</td></tr><tr><td>3</td><td><strong>String getName()</strong>This method returns the name of this transaction.</td></tr><tr><td>4</td><td><strong>int getTimeout()</strong>This method returns the time in seconds in which the transaction must complete.</td></tr><tr><td>5</td><td><strong>boolean isReadOnly()</strong>This method returns whether the transaction is read-only.</td></tr></tbody></table></figure>\n\n\n\n<p>Following are the possible values for isolation level −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Isolation &amp; Description</th></tr><tr><td>1</td><td><strong>TransactionDefinition.ISOLATION_DEFAULT</strong>This is the default isolation level.</td></tr><tr><td>2</td><td><strong>TransactionDefinition.ISOLATION_READ_COMMITTED</strong>Indicates that dirty reads are prevented; non-repeatable reads and phantom reads can occur.</td></tr><tr><td>3</td><td><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</strong>Indicates that dirty reads, non-repeatable reads, and phantom reads can occur.</td></tr><tr><td>4</td><td><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ</strong>Indicates that dirty reads and non-repeatable reads are prevented; phantom reads can occur.</td></tr><tr><td>5</td><td><strong>TransactionDefinition.ISOLATION_SERIALIZABLE</strong>Indicates that dirty reads, non-repeatable reads, and phantom reads are prevented.</td></tr></tbody></table></figure>\n\n\n\n<p>Following are the possible values for propagation types −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Propagation &amp; Description</th></tr><tr><td>1</td><td><strong>TransactionDefinition.PROPAGATION_MANDATORY</strong>Supports a current transaction; throws an exception if no current transaction exists.</td></tr><tr><td>2</td><td><strong>TransactionDefinition.PROPAGATION_NESTED</strong>Executes within a nested transaction if a current transaction exists.</td></tr><tr><td>3</td><td><strong>TransactionDefinition.PROPAGATION_NEVER</strong>Does not support a current transaction; throws an exception if a current transaction exists.</td></tr><tr><td>4</td><td><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</strong>Does not support a current transaction; rather always execute nontransactionally.</td></tr><tr><td>5</td><td><strong>TransactionDefinition.PROPAGATION_REQUIRED</strong>Supports a current transaction; creates a new one if none exists.</td></tr><tr><td>6</td><td><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW</strong>Creates a new transaction, suspending the current transaction if one exists.</td></tr><tr><td>7</td><td><strong>TransactionDefinition.PROPAGATION_SUPPORTS</strong>Supports a current transaction; executes non-transactionally if none exists.</td></tr><tr><td>8</td><td><strong>TransactionDefinition.TIMEOUT_DEFAULT</strong>Uses the default timeout of the underlying transaction system, or none if timeouts are not supported.</td></tr></tbody></table></figure>\n\n\n\n<p>The <em>TransactionStatus</em> interface provides a simple way for transactional code to control transaction execution and query transaction status.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface TransactionStatus extends SavepointManager {\n   boolean isNewTransaction();\n   boolean hasSavepoint();\n   void setRollbackOnly();\n   boolean isRollbackOnly();\n   boolean isCompleted();\n}</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td><strong>boolean hasSavepoint()</strong>This method returns whether this transaction internally carries a savepoint, i.e., has been created as nested transaction based on a savepoint.</td></tr><tr><td>2</td><td><strong>boolean isCompleted()</strong>This method returns whether this transaction is completed, i.e., whether it has already been committed or rolled back.</td></tr><tr><td>3</td><td><strong>boolean isNewTransaction()</strong>This method returns true in case the present transaction is new.</td></tr><tr><td>4</td><td><strong>boolean isRollbackOnly()</strong>This method returns whether the transaction has been marked as rollback-only.</td></tr><tr><td>5</td><td><strong>void setRollbackOnly()</strong>This method sets the transaction as rollback-only.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>A database transaction is a sequence of actions that are treated as a single unit of work. These actions should either complete entirely or take no effect at all. Transaction management is an important part of RDBMS-oriented enterprise application to ensure data integrity and consistency. The concept of transactions can be described with the following [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2936"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2936"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2936/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2936"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2936"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2936"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4595,"date":"2020-06-20T06:12:00","date_gmt":"2020-06-20T06:12:00","guid":{"rendered":"http://java.foobrdigital.com/?p=297"},"modified":"2020-06-20T06:12:00","modified_gmt":"2020-06-20T06:12:00","slug":"mvc-framework-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/mvc-framework-2/","title":{"rendered":"MVC Framework"},"content":{"rendered":"\n<p>The Spring Web MVC framework provides Model-View-Controller (MVC) architecture and ready components that can be used to develop flexible and loosely coupled web applications. The MVC pattern results in separating the different aspects of the application (input logic, business logic, and UI logic), while providing a loose coupling between these elements.</p>\n\n\n\n<ul><li>The&nbsp;<strong>Model</strong>&nbsp;encapsulates the application data and in general they will consist of POJO.</li><li>The&nbsp;<strong>View</strong>&nbsp;is responsible for rendering the model data and in general it generates HTML output that the client&#8217;s browser can interpret.</li><li>The&nbsp;<strong>Controller</strong>&nbsp;is responsible for processing user requests and building an appropriate model and passes it to the view for rendering.</li></ul>\n\n\n\n<h2>The DispatcherServlet</h2>\n\n\n\n<p>The Spring Web model-view-controller (MVC) framework is designed around a&nbsp;<em>DispatcherServlet</em>&nbsp;that handles all the HTTP requests and responses. The request processing workflow of the Spring Web MVC&nbsp;<em>DispatcherServlet</em>&nbsp;is illustrated in the following diagram −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/spring/images/spring_dispatcherservlet.png\" alt=\"Spring DispatcherServlet\"/></figure>\n\n\n\n<p>Following is the sequence of events corresponding to an incoming HTTP request to&nbsp;<em>DispatcherServlet</em>&nbsp;−</p>\n\n\n\n<ul><li>After receiving an HTTP request,&nbsp;<em>DispatcherServlet</em>&nbsp;consults the&nbsp;<em>HandlerMapping</em>&nbsp;to call the appropriate&nbsp;<em>Controller</em>.</li><li>The&nbsp;<em>Controller</em>&nbsp;takes the request and calls the appropriate service methods based on used GET or POST method. The service method will set model data based on defined business logic and returns view name to the&nbsp;<em>DispatcherServlet</em>.</li><li>The&nbsp;<em>DispatcherServlet</em>&nbsp;will take help from&nbsp;<em>ViewResolver</em>&nbsp;to pickup the defined view for the request.</li><li>Once view is finalized, The&nbsp;<em>DispatcherServlet</em>&nbsp;passes the model data to the view which is finally rendered on the browser.</li></ul>\n\n\n\n<p>All the above-mentioned components, i.e. HandlerMapping, Controller, and ViewResolver are parts of&nbsp;<em>WebApplicationContext</em>&nbsp;w which is an extension of the plain<em>ApplicationContext</em>&nbsp;with some extra features necessary for web applications.</p>\n\n\n\n<h2>Required Configuration</h2>\n\n\n\n<p>You need to map requests that you want the&nbsp;<em>DispatcherServlet</em>&nbsp;to handle, by using a URL mapping in the&nbsp;<strong>web.xml</strong>&nbsp;file. The following is an example to show declaration and mapping for&nbsp;<strong>HelloWeb</strong>&nbsp;<em>DispatcherServlet</em>&nbsp;example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;web-app id = \"WebApp_ID\" version = \"2.4\"\n   xmlns = \"http://java.sun.com/xml/ns/j2ee\" \n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://java.sun.com/xml/ns/j2ee \n   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n    \n   &lt;display-name>Spring MVC Application&lt;/display-name>\n   \n   &lt;servlet>\n      &lt;servlet-name>HelloWeb&lt;/servlet-name>\n      &lt;servlet-class>\n         org.springframework.web.servlet.DispatcherServlet\n      &lt;/servlet-class>\n      &lt;load-on-startup>1&lt;/load-on-startup>\n   &lt;/servlet>\n\n   &lt;servlet-mapping>\n      &lt;servlet-name>HelloWeb&lt;/servlet-name>\n      &lt;url-pattern>*.jsp&lt;/url-pattern>\n   &lt;/servlet-mapping>\n\n&lt;/web-app></code></pre>\n\n\n\n<p>The&nbsp;<strong>web.xml</strong>&nbsp;file will be kept in the WebContent/WEB-INF directory of your web application. Upon initialization of&nbsp;<strong>HelloWeb</strong>&nbsp;DispatcherServlet, the framework will try to load the application context from a file named&nbsp;<strong>[servlet-name]-servlet.xml</strong>&nbsp;located in the application&#8217;s WebContent/WEB-INFdirectory. In this case, our file will be&nbsp;<strong>HelloWebservlet.xml</strong>.</p>\n\n\n\n<p>Next, &lt;servlet-mapping&gt; tag indicates what URLs will be handled by which DispatcherServlet. Here all the HTTP requests ending with&nbsp;<strong>.jsp</strong>&nbsp;will be handled by the&nbsp;<strong>HelloWeb</strong>&nbsp;DispatcherServlet.</p>\n\n\n\n<p>If you do not want to go with default filename as&nbsp;<em>[servlet-name]-servlet.xml</em>&nbsp;and default location as&nbsp;<em>WebContent/WEB-INF</em>, you can customize this file name and location by adding the servlet listener&nbsp;<em>ContextLoaderListener</em>&nbsp;in your web.xml file as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;web-app...>\n\n   &lt;!-------- DispatcherServlet definition goes here----->\n   ....\n   &lt;context-param>\n      &lt;param-name>contextConfigLocation&lt;/param-name>\n      &lt;param-value>/WEB-INF/HelloWeb-servlet.xml&lt;/param-value>\n   &lt;/context-param>\n\n   &lt;listener>\n      &lt;listener-class>\n         org.springframework.web.context.ContextLoaderListener\n      &lt;/listener-class>\n   &lt;/listener>\n   \n&lt;/web-app></code></pre>\n\n\n\n<p>Now, let us check the required configuration for&nbsp;<strong>HelloWeb-servlet.xml</strong>&nbsp;file, placed in your web application&#8217;s&nbsp;<em>WebContent/WEB-INF</em>&nbsp;directory −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:context = \"http://www.springframework.org/schema/context\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans     \n   http:&#47;&#47;www.springframework.org/schema/beans/spring-beans-3.0.xsd\n   http://www.springframework.org/schema/context \n   http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" />\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"/WEB-INF/jsp/\" />\n      &lt;property name = \"suffix\" value = \".jsp\" />\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Following are the important points about&nbsp;<strong>HelloWeb-servlet.xml</strong>&nbsp;file −</p>\n\n\n\n<ul><li>The&nbsp;<em>[servlet-name]-servlet.xml</em>&nbsp;file will be used to create the beans defined, overriding the definitions of any beans defined with the same name in the global scope.</li><li>The&nbsp;<em>&lt;context:component-scan&#8230;&gt;</em>&nbsp;tag will be use to activate Spring MVC annotation scanning capability which allows to make use of annotations like @Controller and @RequestMapping etc.</li><li>The&nbsp;<em>InternalResourceViewResolver</em>&nbsp;will have rules defined to resolve the view names. As per the above defined rule, a logical view named&nbsp;<strong>hello</strong>&nbsp;is delegated to a view implementation located at&nbsp;<em>/WEB-INF/jsp/hello.jsp</em>&nbsp;.</li></ul>\n\n\n\n<p>The following section will show you how to create your actual components, i.e., Controller, Model, and View.</p>\n\n\n\n<h2>Defining a Controller</h2>\n\n\n\n<p>The DispatcherServlet delegates the request to the controllers to execute the functionality specific to it. The&nbsp;<strong>@Controller</strong>annotation indicates that a particular class serves the role of a controller. The&nbsp;<strong>@RequestMapping</strong>&nbsp;annotation is used to map a URL to either an entire class or a particular handler method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Controller\n@RequestMapping(\"/hello\")\npublic class HelloController { \n   @RequestMapping(method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n      return \"hello\";\n   }\n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>@Controller</strong>&nbsp;annotation defines the class as a Spring MVC controller. Here, the first usage of&nbsp;<strong>@RequestMapping</strong>&nbsp;indicates that all handling methods on this controller are relative to the&nbsp;<strong>/hello</strong>&nbsp;path. Next annotation<strong>@RequestMapping(method = RequestMethod.GET)</strong>&nbsp;is used to declare theprintHello() method as the controller&#8217;s default service method to handle HTTP GET request. You can define another method to handle any POST request at the same URL.</p>\n\n\n\n<p>You can write the above controller in another form where you can add additional attributes in&nbsp;<em>@RequestMapping</em>&nbsp;as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Controller\npublic class HelloController {\n   @RequestMapping(value = \"/hello\", method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n      return \"hello\";\n   }\n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>value</strong>&nbsp;attribute indicates the URL to which the handler method is mapped and the&nbsp;<strong>method</strong>&nbsp;attribute defines the service method to handle HTTP GET request. The following important points are to be noted about the controller defined above −</p>\n\n\n\n<ul><li>You will define required business logic inside a service method. You can call another method inside this method as per requirement.</li><li>Based on the business logic defined, you will create a model within this method. You can use setter different model attributes and these attributes will be accessed by the view to present the final result. This example creates a model with its attribute &#8220;message&#8221;.</li><li>A defined service method can return a String, which contains the name of the&nbsp;<strong>view</strong>&nbsp;to be used to render the model. This example returns &#8220;hello&#8221; as logical view name.</li></ul>\n\n\n\n<h2>Creating JSP Views</h2>\n\n\n\n<p>Spring MVC supports many types of views for different presentation technologies. These include &#8211; JSPs, HTML, PDF, Excel worksheets, XML, Velocity templates, XSLT, JSON, Atom and RSS feeds, JasperReports, etc. But most commonly we use JSP templates written with JSTL.</p>\n\n\n\n<p>Let us write a simple&nbsp;<strong>hello</strong>&nbsp;view in /WEB-INF/hello/hello.jsp −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>Hello Spring MVC&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h2>${message}&lt;/h2>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Here&nbsp;<strong>${message}</strong>&nbsp;is the attribute which we have set up inside the Controller. You can have multiple attributes to be displayed inside your view.</p>\n\n\n\n<h2>Spring Web MVC Framework Examples</h2>\n\n\n\n<p>Based on the above concepts, let us check few important examples which will help you in building your Spring Web Applications −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Example &amp; Description</th></tr><tr><td>1</td><td>Spring MVC Hello World ExampleThis example will explain how to write a simple Spring Web Hello World application.</td></tr><tr><td>2</td><td>Spring MVC Form Handling ExampleThis example will explain how to write a Spring Web application using HTML forms to submit the data to the controller and display a processed result.</td></tr><tr><td>3</td><td>Spring Page Redirection ExampleLearn how to use page redirection functionality in Spring MVC Framework.</td></tr><tr><td>4</td><td>Spring Static Pages ExampleLearn how to access static pages along with dynamic pages in Spring MVC Framework.</td></tr><tr><td>5</td><td>Spring Exception Handling ExampleLearn how to handle exceptions in Spring MVC Framework.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Spring Web MVC framework provides Model-View-Controller (MVC) architecture and ready components that can be used to develop flexible and loosely coupled web applications. The MVC pattern results in separating the different aspects of the application (input logic, business logic, and UI logic), while providing a loose coupling between these elements. The&nbsp;Model&nbsp;encapsulates the application data [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4595"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4595"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4595/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4595"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4595"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4595"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2938,"date":"2020-06-20T06:18:31","date_gmt":"2020-06-20T06:18:31","guid":{"rendered":"http://java.foobrdigital.com/?p=299"},"modified":"2020-06-20T06:18:31","modified_gmt":"2020-06-20T06:18:31","slug":"logging-with-log4j","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/logging-with-log4j/","title":{"rendered":"Logging with Log4J"},"content":{"rendered":"\n<p>This is a very easy-to-use Log4J functionality inside Spring applications. The following example will take you through simple steps to explain the simple integration between Log4J and Spring.</p>\n\n\n\n<p>We assume you already have&nbsp;<strong>log4J</strong>&nbsp;installed on your machine. If you do not have it then you can download it from&nbsp;https://logging.apache.org/&nbsp;and simply extract the zipped file in any folder. We will use only&nbsp;<strong>log4j-x.y.z.jar</strong>&nbsp;in our project.</p>\n\n\n\n<p>Next, let us have a working Eclipse IDE in place and take the following steps to develop a Dynamic Form-based Web Application using Spring Web Framework −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Description</th></tr><tr><td>1</td><td>Create a project with a name <em>SpringExample</em> and create a package <em>com.<strong>codemeals</strong></em> under the <strong>src</strong> folder in the created project.</td></tr><tr><td>2</td><td>Add required Spring libraries using&nbsp;<em>Add External JARs</em>&nbsp;option as explained in the&nbsp;<em>Spring Hello World Example</em>&nbsp;chapter.</td></tr><tr><td>3</td><td>Add log4j library&nbsp;<em>log4j-x.y.z.jar</em>&nbsp;as well in your project using using&nbsp;<em>Add External JARs</em>.</td></tr><tr><td>4</td><td>Create Java classes <em>HelloWorld</em> and <em>MainApp</em> under the <em>com.<strong>codemeals</strong></em> package.</td></tr><tr><td>5</td><td>Create Beans configuration file&nbsp;<em>Beans.xml</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>6</td><td>Create log4J configuration file&nbsp;<em>log4j.properties</em>&nbsp;under the&nbsp;<strong>src</strong>&nbsp;folder.</td></tr><tr><td>7</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is the content of&nbsp;<strong>HelloWorld.java</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class HelloWorld {\n   private String message;\n   \n   public void setMessage(String message){\n      this.message  = message;\n   }\n   public void getMessage() {\n      System.out.println(\"Your Message : \" + message);\n   }\n}</code></pre>\n\n\n\n<p>Following is the content of the second file&nbsp;<strong>MainApp.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.apache.log4j.Logger;\n\npublic class MainApp {\n   static Logger log = Logger.getLogger(MainApp.class.getName());\n   \n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      log.info(\"Going to create HelloWord Obj\");\n      HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");\n      obj.getMessage();\n      \n      log.info(\"Exiting the program\");\n   }\n}</code></pre>\n\n\n\n<p>You can generate&nbsp;<strong>debug</strong>&nbsp;and&nbsp;<strong>error</strong>&nbsp;message in a similar way as we have generated info messages. Now let us see the content of&nbsp;<strong>Beans.xml</strong>&nbsp;file</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n\n&lt;beans xmlns = \"http://www.springframework.org/schema/beans\"\n   xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n   &lt;bean id = \"helloWorld\" class = \"com.codemeals.HelloWorld\">\n      &lt;property name = \"message\" value = \"Hello World!\"/>\n   &lt;/bean>\n\n&lt;/beans></code></pre>\n\n\n\n<p>Following is the content of&nbsp;<strong>log4j.properties</strong>&nbsp;which defines the standard rules required for Log4J to produce log messages</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define the root logger with appender file\nlog4j.rootLogger = DEBUG, FILE\n\n# Define the file appender\nlog4j.appender.FILE=org.apache.log4j.FileAppender\n# Set the name of the file\nlog4j.appender.FILE.File=C:\\\\log.out\n\n# Set the immediate flush to true (default)\nlog4j.appender.FILE.ImmediateFlush=true\n\n# Set the threshold to debug mode\nlog4j.appender.FILE.Threshold=debug\n\n# Set the append to false, overwrite\nlog4j.appender.FILE.Append=false\n\n# Define the layout for file appender\nlog4j.appender.FILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.FILE.layout.conversionPattern=%m%n</code></pre>\n\n\n\n<p>Once you are done with creating source and bean configuration files, let us run the application. If everything is fine with your application, this will print the following message in Eclipse console −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Your Message : Hello World!</code></pre>\n\n\n\n<p>If you check your C:\\\\ drive, then you should find your log file&nbsp;<strong>log.out</strong>&nbsp;with various log messages, like something as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- initialization log messages -->\n\nGoing to create HelloWord Obj\nReturning cached instance of singleton bean 'helloWorld'\nExiting the program\n﻿</code></pre>\n\n\n\n<h2>Jakarta Commons Logging (JCL) API</h2>\n\n\n\n<p>Alternatively you can use&nbsp;<strong>Jakarta Commons Logging (JCL)</strong>&nbsp;API to generate a log in your Spring application. JCL can be downloaded from the&nbsp;https://jakarta.apache.org/commons/logging/. The only file we technically need out of this package is the&nbsp;<em>commons-logging-x.y.z.jar</em>&nbsp;file, which needs to be placed in your classpath in a similar way as you had put&nbsp;<em>log4j-x.y.z.jar</em>&nbsp;in the above example.</p>\n\n\n\n<p>To use the logging functionality you need a&nbsp;<em>org.apache.commons.logging.Log</em>&nbsp;object and then you can call one of the following methods as per your requirment −</p>\n\n\n\n<ul><li>fatal(Object message)</li><li>error(Object message)</li><li>warn(Object message)</li><li>info(Object message)</li><li>debug(Object message)</li><li>trace(Object message)</li></ul>\n\n\n\n<p>Following is the replacement of MainApp.java, which makes use of JCL API</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.apache.commons.logging. Log;\nimport org.apache.commons.logging. LogFactory;\n\npublic class MainApp {\n   static Log log = LogFactory.getLog(MainApp.class.getName());\n\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      log.info(\"Going to create HelloWord Obj\");\n      HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");\n      obj.getMessage();\n\n      log.info(\"Exiting the program\");\n   }\n}</code></pre>\n\n\n\n<p>You have to make sure that you have included commons-logging-x.y.z.jar file in your project, before compiling and running the program.</p>\n\n\n\n<p>Now keeping the rest of the configuration and content unchanged in the above example, if you compile and run your application, you will get a similar result as what you got using Log4J API.</p>\n","protected":false},"excerpt":{"rendered":"<p>This is a very easy-to-use Log4J functionality inside Spring applications. The following example will take you through simple steps to explain the simple integration between Log4J and Spring. We assume you already have&nbsp;log4J&nbsp;installed on your machine. If you do not have it then you can download it from&nbsp;https://logging.apache.org/&nbsp;and simply extract the zipped file in any [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[73],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2938"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2938"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2938/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2938"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2938"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2938"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]