[
  {
    "id": 4151,
    "date": "2020-07-15T03:43:12",
    "date_gmt": "2020-07-15T03:43:12",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=6"
    },
    "modified": "2020-07-15T03:43:12",
    "modified_gmt": "2020-07-15T03:43:12",
    "slug": "node-js-tutorial",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-tutorial/",
    "title": {
      "rendered": "Introduction to Node.js"
    },
    "content": {
      "rendered": "\n<p>Node.js is an exciting new platform for developing web applications, application servers, any sort of network server or client, and general purpose programming. It is designed for extreme scalability in networked applications through an ingenious combination of server-side JavaScript, asynchronous I/O, and asynchronous programming. It is built around JavaScript anonymous functions, and a single execution thread event-driven architecture.</p>\n\n\n\n<p>Within few years, Node.js has quickly grown in prominence and it&#8217;s now playing a significant role. Companies, both small and large, are using it for large-scale and small-scale projects. PayPal, for example, has converted many services from Java to Node.js.</p>\n\n\n\n<p>The Node.js architecture departs from a typical choice made by other application platforms. Where threads are widely used to scale an application to fill the CPU, Node.js eschews threads because of their inherent complexity. It&#8217;s claimed that with single-thread event-driven architectures, memory footprint is low, throughput is high, the latency profile under load is better, and the programming model is simpler. The Node.js platform is in a phase of rapid growth, and many are seeing it as a compelling alternative to the traditional&nbsp;web application architectures using&nbsp;Java, PHP, Python, or Ruby on Rails.</p>\n\n\n\n<p>At its heart, it is a standalone JavaScript engine with extensions making it suitable for general purpose programming and with a clear focus on application server development. Even though we&#8217;re comparing Node.js to application server platforms, it is not an application server. Instead, Node.js is a programming run-time akin to Python, Go, or Java SE. While there are web application frameworks and application servers written in Node.js, it is simply a system to execute JavaScript programs.</p>\n\n\n\n<p>The Node.js I/O library is general enough to implement any sort of server executing any TCP or UDP protocol, whether it&#8217;s&nbsp;<strong>domain name system</strong>&nbsp;(<strong>DNS</strong>&nbsp;), HTTP,&nbsp;&nbsp;<strong>internet relay chat</strong>&nbsp;(<strong>IRC</strong>), or FTP. While it supports developing internet servers or clients, its biggest use case is in regular websites, in place of technology such as an Apache/PHP or Rails stack, or to complement existing websites. For example, adding real-time chat or monitoring existing websites can be easily done with the Socket. IO library for Node.js. Its lightweight, high-performance nature often sees Node.js used as a&nbsp;<strong>glue</strong>&nbsp;service.</p>\n\n\n\n<p>A particularly intriguing combination is deploying small services using Docker into cloud hosting infrastructure. A large application can be divided into what&#8217;s now called microservices that are easily deployed at scale using Docker. The result fits agile project management methods since each microservice can be easily managed by a small team that collaborates at the boundary of their individual API.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Node.js is an exciting new platform for developing web applications, application servers, any sort of network server or client, and general purpose programming. It is designed for extreme scalability in networked applications through an ingenious combination of server-side JavaScript, asynchronous I/O, and asynchronous programming. It is built around JavaScript anonymous functions, and a single execution [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4151"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4151"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4151/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4151"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4151"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4151"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 8,
    "date": "2020-07-15T03:45:27",
    "date_gmt": "2020-07-15T03:45:27",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=8"
    },
    "modified": "2020-07-15T03:45:27",
    "modified_gmt": "2020-07-15T03:45:27",
    "slug": "install-node-js-on-windows",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/install-node-js-on-windows/",
    "title": {
      "rendered": "Node.js Abilities"
    },
    "content": {
      "rendered": "\n<h1>What Node.js can do</h1>\n\n\n\n<p>Node.js is a platform for writing JavaScript applications outside web browsers. This is not the JavaScript we are familiar with in web browsers! For example, there is no DOM built into Node.js, nor any other browser capability.</p>\n\n\n\n<p>Beyond its native ability to execute JavaScript, the bundled modules provide capabilities of this sort:</p>\n\n\n\n<ul><li>Command-line tools (in shell script style)</li><li>An interactive-terminal&nbsp;style of program that is&nbsp;<strong>Read-Eval-Print Loop</strong>&nbsp;(<strong>REPL</strong>)</li><li>Excellent process control functions to oversee child processes</li><li>A buffer object to deal with binary data</li><li>TCP or UDP sockets with comprehensive event-driven callbacks</li><li>DNS lookup</li><li>An HTTP, HTTPS and HTTP/2 client/server layered on top of the TCP library filesystem access</li><li>Built-in rudimentary unit testing support through assertions</li></ul>\n\n\n\n<p>The network layer of Node.js is low level while being simple to use. For example, the HTTP modules allow you to write an HTTP server (or client) using a few lines of code. This is powerful, but it puts you, the programmer, very close to the protocol requests and makes you implement precisely those HTTP headers that you should return in request responses.</p>\n\n\n\n<p>Typical web application developers don&#8217;t need to work at a low level of the HTTP or other protocols. Instead, we tend to be more productive, working with higher-level interfaces. For example, PHP coders assume that Apache (or other HTTP servers) is already there providing the HTTP protocol, and that they don&#8217;t have to implement the HTTP server portion of the stack. By contrast, a Node.js programmer does implement an HTTP server to which their application code is attached.</p>\n\n\n\n<p>To simplify the situation, the Node.js community has several web application frameworks, such as Express, providing the higher-level interfaces required by typical programmers. You can quickly configure an HTTP server with baked-in capabilities&nbsp;such as sessions, cookies, serving static files,&nbsp;and&nbsp;logging, letting developers focus on their business logic. Other frameworks provide OAuth 2 support, or focus on REST APIs, and so on.</p>\n\n\n\n<p>Node.js is not limited to web service application development. The community around Node.js has taken it in many other directions,</p>\n\n\n\n<p><strong>Build tools</strong>: Node.js has become a popular choice for developing command-line tools used in software development, or communicating with service infrastructure. Grunt and Gulp are widely used by frontend developers to build assets for websites. Babel is widely used for transpiling modern ES-2016 code to run on older browsers. Popular CSS optimizers and processors, such as PostCSS, are written in Node.js. Static website generation systems such as Metalsmith, Punch, and AkashaCMS, run at the command line and generate website content that you upload to a web server.</p>\n\n\n\n<p><strong>Web UI testing</strong>: Puppeteer gives you control over a headless-Chrome web browser instance. With it, you can develop Node.js scripts controlling a modern full-featured web browser. Typical use cases involve web scraping and testing web applications.</p>\n\n\n\n<p><strong>Desktop applications</strong>: Both Electron and&nbsp;<strong>node-webkit</strong>&nbsp;(<strong>NW.j</strong>s) are frameworks for developing desktop applications for Windows, macOS, and Linux. These frameworks utilize a large chunk of Chrome, wrapped by Node.js libraries, to develop desktop applications using web UI technologies. Applications are written with modern HTML5, CSS3, and JavaScript, and can utilize leading-edge web frameworks, such as Bootstrap, React, or AngularJS.&nbsp;Many popular applications have been built using Electron, including the Slack desktop client application, the Atom and Microsoft Visual Code programming editors, the Postman REST client, the GitKraken GIT client,&nbsp;and Etcher, which makes it incredibly easy to burn OS images to flash drives to run on single-board computers.</p>\n\n\n\n<p><strong>Mobile applications</strong>: The&nbsp;Node.js for Mobile Systems project lets you develop smartphone or tablet computer applications using Node.js, for both iOS and Android. Apple&#8217;s App Store rules preclude incorporating a JavaScript engine with JIT capabilities, meaning that normal Node.js cannot be used in an iOS application. For iOS application development, the project uses Node.js-on-ChakraCore to skirt around the App Store rules. For Android application development the project uses regular Node.js on Android. At the time of writing, the project is in an early stage of development, but it looks promising.</p>\n\n\n\n<p><strong>Internet of Things</strong>&nbsp;(<strong>IoT</strong>): Reportedly, it is a very popular language for Internet-of-Things projects, and Node.js does run on most ARM-based single-board computers. The clearest example is the NodeRED project. It offers a graphical programming environment, letting you draw programs by connecting blocks together. It features hardware-oriented input and output mechanisms, for example, to interact with&nbsp;<strong>General Purpose I/O</strong>&nbsp;(<strong>GPIO</strong>) pins on Raspberry Pi or Beaglebone single-board computers.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What Node.js can do Node.js is a platform for writing JavaScript applications outside web browsers. This is not the JavaScript we are familiar with in web browsers! For example, there is no DOM built into Node.js, nor any other browser capability. Beyond its native ability to execute JavaScript, the bundled modules provide capabilities of this [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/8"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=8"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/8/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=8"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=8"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=8"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4152,
    "date": "2020-07-15T03:50:58",
    "date_gmt": "2020-07-15T03:50:58",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=10"
    },
    "modified": "2020-07-15T03:50:58",
    "modified_gmt": "2020-07-15T03:50:58",
    "slug": "install-node-js-on-linux-ubuntu-centos",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/install-node-js-on-linux-ubuntu-centos/",
    "title": {
      "rendered": "Why  choose Node.js?"
    },
    "content": {
      "rendered": "\n<h3>So Why you should choose Node.js?</h3>\n\n\n\n<p>Among the many available web application development platforms, why should you choose Node.js? There are many stacks to choose from. What make Node.js better than others?</p>\n\n\n\n<h3>It is very Popular</h3>\n\n\n\n<p>Node.js is quickly becoming a popular development platform with adoption by plenty of big and small companies. One of those is PayPal, who are replacing their incumbent Java-based system with one written in Node.js. Other large Node.js adopters include LinkedIn, Netflix, and eBay.</p>\n\n\n\n<p>According to NodeSource, Node.js usage is growing rapidly. The measures include increasing bandwidth for downloading Node.js releases, increasing activity in Node.js-related GitHub projects, and more.</p>\n\n\n\n<p>It&#8217;s best to not just follow the crowd because the crowd claims their software platform does cool things. Node.js does some cool things, but more important is its technical merit.</p>\n\n\n\n<h3>JavaScript Everywhere</h3>\n\n\n\n<p>Having the same programming language on the server and client has been a long-time dream on the web. This dream dates back to the early days of Java, where Java applets were to be the frontend to server applications written in Java, and JavaScript was originally envisioned as a lightweight scripting language for those applets. Java never fulfilled its hype as a client-side programming language, for various reasons. We ended up with JavaScript as the principle in-browser, client-side language, rather than Java. Typically, the frontend JavaScript developers were in a different language universe than the server-side team, who was likely to be coding in PHP, Java, Ruby, or Python.</p>\n\n\n\n<p>Over time, in-browser JavaScript engines became incredibly powerful, letting us write ever-more complex browser-side applications. With Node.js, we may finally be able to implement applications with the same programming language on the client and server by having JavaScript at both ends of the web, in the browser and server.</p>\n\n\n\n<p>A common language for frontend and backend offers several potential benefits:</p>\n\n\n\n<ul><li>The same programming staff can work on both ends of the wire</li><li>Code can be migrated between server and client more easily</li><li>Common data formats (JSON) exist between server and client</li><li>Common software tools exist for server and client</li><li>Common testing or quality reporting tools for server and client</li><li>When writing web applications, view templates can be used on both sides</li></ul>\n\n\n\n<p>The JavaScript language is very popular due to its ubiquity in web browsers. It compares favorably against other languages while having many modern,&nbsp;advanced language concepts. Thanks to its popularity, there is a deep talent&nbsp;pool of experienced JavaScript programmers out there.</p>\n\n\n\n<h3>Google&#8217;s V8 Engine</h3>\n\n\n\n<p>To make Chrome a popular and excellent web browser, Google invested in making V8 a super-fast JavaScript engine.&nbsp;Google, therefore, has a huge motivation to keep on improving V8.&nbsp;V8 is the JavaScript engine for Chrome, and it can also be executed standalone. Node.js is built on top of the V8 JavaScript engine.</p>\n\n\n\n<p>As Node.js becomes more important to the V8 team, there&#8217;s a potential synergy of faster V8 performance wins as more people focus on V8 improvements.</p>\n\n\n\n<h3>Microservice Architecture</h3>\n\n\n\n<p>A new sensation in software development is the microservice idea. Microservices are focused on splitting a large web application into small, tightly-focused services that can be easily developed by small teams. While they aren&#8217;t exactly a new idea, they&#8217;re more of a reframing of old client-server computing models, the microservice pattern fits well with agile project management techniques, and gives us more granular application deployment.&nbsp;&nbsp;</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>So Why you should choose Node.js? Among the many available web application development platforms, why should you choose Node.js? There are many stacks to choose from. What make Node.js better than others? It is very Popular Node.js is quickly becoming a popular development platform with adoption by plenty of big and small companies. One of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4152"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4152"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4152/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4152"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4152"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4152"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4153,
    "date": "2020-07-15T03:52:50",
    "date_gmt": "2020-07-15T03:52:50",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=13"
    },
    "modified": "2020-07-15T03:52:50",
    "modified_gmt": "2020-07-15T03:52:50",
    "slug": "node-js-first-example",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-first-example/",
    "title": {
      "rendered": "Installation"
    },
    "content": {
      "rendered": "\n<h2>Installing Node.js</h2>\n\n\n\n<h3>System requirements</h3>\n\n\n\n<p>Node.js runs on POSIX-like operating systems, various UNIX derivatives (Solaris, for example) or workalikes (Linux, macOS, and so on), as well as on Microsoft Windows. It can run on machines both large and small, including the tiny ARM devices such as the Raspberry Pi microscale embeddable computer for DIY software/hardware projects.</p>\n\n\n\n<p>Node.js is now available via package management systems, limiting the need to compile and install from source.</p>\n\n\n\n<p>Because many Node.js packages are written in C or C++, you must have a C compiler (such as GCC), Python 2.7 (or later), and the&nbsp;<kbd>node-gyp</kbd>&nbsp;package. If you plan to use encryption in your networking code, you will also need the OpenSSL cryptographic library. The modern UNIX derivatives almost certainly come with these, and Node.js&#8217;s configure script, used when installing from source, will detect their presence.</p>\n\n\n\n<p>Before we start talking about what Node is and why it&#8217;s useful, you need to first install Node on your machine. Now, to get started, we just need two programs—a browser, I&#8217;ll be using Chrome throughout the training, but any browser will do, and Terminal. I&#8217;ll use Spotlight to open up Terminal, which is what it&#8217;s known as on my operating system.</p>\n\n\n\n<p>If you&#8217;re on Windows, look for the Command Prompt, you can search using the Windows key and then by typing command prompt, and on Linux, you&#8217;re looking for the command line, although depending on your distribution it might be called Terminal or Command Prompt.</p>\n\n\n\n<p>In the browser, we can head over to nodejs.org to grab the installer for the latest version of Node(as shown here). In this training, we&#8217;ll use the most recent version, version 13.7.0:</p>\n\n\n\n<h3>Node.js Long Term Support</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://nodejs.foobrdigital.com/wp-content/uploads/2020/08/node-support-schedule.png\" alt=\"\" class=\"wp-image-2658\"/></figure>\n\n\n\n<p>Before going further, I would like to talk about the Node release cycle. What I have in the preceding image is the official release cycle, this is released by Node. You&#8217;ll notice that only next to the even Node numbers do you find the active LTS, the blue bar, and the maintenance bar. Now, LTS stands for long-term support, and this is the version that&#8217;s recommended for most users. I&#8217;d recommend that you stick with the currently offered LTS option, though anything on the left-hand side will do, this is shown as the two green buttons on nodejs.org.</p>\n\n\n\n<p>Now, as you can see, the major version numbers, bump every six months. Regardless of any sort of big overarching change, this happens like clockwork even if nothing drastic has changed. It&#8217;s not like Angular where jumping from 1.0 to 2.0 was almost like using a completely different library. This is just not the case with Node, what you&#8217;re getting from this training is the latest and greatest Node has to offer.</p>\n\n\n\n<h3>Installation</h3>\n\n\n\n<p>For this tutorial, We will see how we can install Node.js on macos, but the installation process should be same for other operating systems like windows</p>\n\n\n\n<p>Once the version is confirmed and selected, all we have to do is to click the required version button on the Node website (nodejs.org) and download the installer. The installer is one of those basic click Next a few times and you&#8217;re done type of installers, there&#8217;s no need to run any fancy commands. I&#8217;ll start the installer. As shown in the screenshot below, it&#8217;ll just ask a few questions, then let&#8217;s click on Next or Continue through all of them:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://nodejs.foobrdigital.com/wp-content/uploads/2020/08/node-install-01.jpg\" alt=\"\" class=\"wp-image-2659\"/></figure>\n\n\n\n<p>You might want to specify a custom destination, but if you don&#8217;t know what that means, and you don&#8217;t usually do it when installing programs, skip that step too. Here, in the next screenshot, you can see that I&#8217;m using just 98 MB, no problem. I&#8217;ll run the installer by entering my password. And once I enter my password, it should really only take a couple of seconds to get Node installed:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://nodejs.foobrdigital.com/wp-content/uploads/2020/08/node-install-02.jpg\" alt=\"\" class=\"wp-image-2660\"/></figure>\n\n\n\n<p>Press the LCose button after the installation is completed.</p>\n\n\n\n<p>To verify if Node is sucessfully installed or not, go ahead and open terminal and type the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>node -v </code></pre>\n\n\n\n<p>If everything goes well it will print out the node.js version, that is 13.7.0 in our case.</p>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Installing Node.js System requirements Node.js runs on POSIX-like operating systems, various UNIX derivatives (Solaris, for example) or workalikes (Linux, macOS, and so on), as well as on Microsoft Windows. It can run on machines both large and small, including the tiny ARM devices such as the Raspberry Pi microscale embeddable computer for DIY software/hardware projects. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4153"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4153"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4153/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4153"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4153"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4153"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4131,
    "date": "2020-07-15T03:53:57",
    "date_gmt": "2020-07-15T03:53:57",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=15"
    },
    "modified": "2020-07-15T03:53:57",
    "modified_gmt": "2020-07-15T03:53:57",
    "slug": "node-js-console",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-console/",
    "title": {
      "rendered": "Basic Server Intro"
    },
    "content": {
      "rendered": "\n<h2>Building a simple web server in Node.js</h2>\n\n\n\n<p>This section covers some basic functions of the&nbsp;<kbd>http</kbd>&nbsp;module, a Node.js library of code used for handling requests over the internet. The tech community raves about Node.js and its use of JavaScript as a server-side language. In this lesson, you build your first web server. In a few short steps, you convert a couple of lines of JavaScript to an application with which you can communicate on your web browser.</p>\n\n\n\n<p>This section will cover</p>\n\n\n\n<ul><li>Generating a basic web server using Node.js and npm</li><li>Writing code that processes requests from a browser and sends back a response</li><li>Running a web server in your browser</li></ul>\n\n\n\n<p>You’re on your way to building your first web application. With Node.js, you can use the http module to get a web server with sufficient functionality built within hours.</p>\n\n\n\n<h3>WAIT!! What is a Web Server?</h3>\n\n\n\n<p>Web servers are the foundation of most Node.js web applications. They allow you to load images and HTML web pages to users of your app. Before you get started, I’ll discuss some important web server concepts. After all, the final product will look and feel a lot better if you have clear expectations of the result.<strong>Web servers and HTTP</strong></p>\n\n\n\n<p>A&nbsp;<strong>web server</strong>&nbsp;is software designed to respond to requests over the internet by loading or processing data. Think of a web server like a bank teller, whose job is to process your request to deposit, withdraw, or view money in your account. Just as the bank teller follows a protocol to ensure that they process your request correctly, web servers follow&nbsp;<em>Hypertext Transfer Protocol</em>&nbsp;(HTTP), a standardized system globally observed for the viewing of web pages and sending of data over the internet.</p>\n\n\n\n<p>One way that a client (your computer) and server communicate is through HTTP verbs. These verbs indicate what type of request is being made, such as whether the user is trying to load a new web page or updating information in their profile page. The context of a user’s interaction with an application is an important part of the request-response cycle.</p>\n\n\n\n<p>Here are the two most widely used HTTP methods you’ll encounter:</p>\n\n\n\n<ul><li><kbd>GET</kbd>—This method requests information from a server. Typically, a server responds with content that you can view back on your browser (such as by clicking a link to see the home page of a site).</li><li><kbd>POST</kbd>—This method sends information to the server. A server may respond with an HTML page or redirect you to another page in the application after processing your data (such as filling out and submitting a sign-up form).</li></ul>\n\n\n\n<p>Most web applications have made changes to adopt&nbsp;<em>HTTP Secure</em>&nbsp;(HTTPS), in which transmission of data is encrypted. When your application is live on the internet, you’ll want to create a public key certificate signed by a trusted issuer of digital certificates. This key resides on your server and allows for encrypted communication with your client.</p>\n\n\n\n<p>When you visit&nbsp;<a href=\"https://www.facebook.com\">https://www.facebook.com</a>, for example, behind the scenes you’re making a request to facebook’s servers, which in turn send a response back to you, rendering the facebook landing page. This request-response relationship allows for a channel of communication between the user and the application.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://nodejs.foobrdigital.com/wp-content/uploads/2020/08/http-server-01.jpg\" alt=\"\" class=\"wp-image-2663\"/></figure>\n\n\n\n<p>When you enter the URL you want to see in your browser, an HTTP request is sent to a physical computer elsewhere. This request contains some information indicating whether you want to load a web page or send information to that computer.</p>\n\n\n\n<p>So enough basics, in the next tutorial we&#8217;ll start building our web server in Node.js.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Building a simple web server in Node.js This section covers some basic functions of the&nbsp;http&nbsp;module, a Node.js library of code used for handling requests over the internet. The tech community raves about Node.js and its use of JavaScript as a server-side language. In this lesson, you build your first web server. In a few short [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4131"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4131"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4131/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4131"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4131"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4131"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4132,
    "date": "2020-07-15T03:55:17",
    "date_gmt": "2020-07-15T03:55:17",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=17"
    },
    "modified": "2020-07-15T03:55:17",
    "modified_gmt": "2020-07-15T03:55:17",
    "slug": "node-js-repl",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-repl/",
    "title": {
      "rendered": "Basic Server"
    },
    "content": {
      "rendered": "\n<h3>Let&#8217;s Start</h3>\n\n\n\n<p>Before you get started with a Node.js web application, you need to initialize the project in your project folder in terminal. Open a terminal, and create a new directory called my_node_server with mkdir. You can initialize the project with npm init.</p>\n\n\n\n<p>npm is Node.js’ package manager. Your Node.js projects rely on this tool to install and build applications. You can learn more about npm and how it’s used at https://docs.npmjs.com.</p>\n\n\n\n<p>Running the npm init command initiates a prompt to create a package.json file. As the prompt explains, you’ll walk through configuring the most basic settings of your Node.js application in this file. For now, you can add app.js as the entry point, along with a short description and your name as the author, and elect to use the default values offered by pressing the Enter key until you reach the end of the prompt Then you’re asked to confirm your settings with a preview of your package.json file. Press Enter to confirm and return to the regular terminal prompt.</p>\n\n\n\n<p>When we installed Node.js, the core library was installed too. Within that library is a module called http. You’ll use this module to build your web server. In this section, you also use a package called http-status-codes to provide constants for use where HTTP status codes are needed in your application’s responses.</p>\n\n\n\n<p>Modules in Node.js are libraries of code that come packaged to offer specific functionality to your node application. Here, the&nbsp;<code>http</code>&nbsp;module helps you communicate across the web by using HTTP.</p>\n\n\n\n<p>Open text editor, create a new file called app.js, and save it in the project folder called my_node_server containing the package.json file you created previously. This file will serve as the core application file, where your application will serve web pages to your users. Within this project’s directory in terminal, run npm i http-status-codes -S to save the http-status-codes package as an application dependency.</p>\n\n\n\n<p>Open app.js and add the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  const port = 3000,\n  http = require(\"http\"),\n  httpStatus = require(\"http-status-codes\"),\n  app = http.createServer((request, response) => {\n    console.log(\"Incoming request received! \");\n    response.writeHead(httpStatus.OK, {\n      \"Content-Type\": \"text/html\"\n    });\n\n    let responseMessage = \"&lt;h1>Hello World!&lt;/h1>\";\n    response.write(responseMessage);\n    response.end();\n    console.log(`Sent a response : ${responseMessage}`);\n  });\n\napp.listen(port);                                                   4\nconsole.log(`The server is running on port:\n${port}`);</code></pre>\n\n\n\n<p>So what just happened above? Let&#8217;s discuss</p>\n\n\n\n<p>In the first line of code assigns the port number you’ll use for this application: 3000. Port 3000 is generally used for web servers in development. This number has no significance, and you can customize it with a few exceptions. Ports 80 and 443 usually are reserved for HTTP and HTTPS, respectively.</p>\n\n\n\n<p>Then we use require to import a specific Node.js module called http and save it as a constant. This module is saved as a constant because you don’t plan on reassigning the variable. You also require the http-status-codes package to provide constants representing HTTP status codes.</p>\n\n\n\n<p>Next, we used the http variable as a reference to the HTTP module to create a server, using that module’s createServer function, and store the resulting server in a variable called app.</p>\n\n\n\n<p>Using the latest ES6 syntax, we structure callback functions with parameters in parentheses, followed by ⇒ instead of the function keyword we use with es5. The createServer function generates a new instance of http.Server, a built-in Node.js class with tools for evaluating HTTP communication. With this newly created server instance, your app is prepared to receive HTTP requests and send HTTP responses. Remember these method names are case-sensitive. For example, Using createserver, will throw an error.</p>\n\n\n\n<p>The argument in&nbsp;<code>createServer</code>&nbsp;is a callback function that’s invoked whenever some event occurs within the server. When the server is running and your application’s root URL (home page) is accessed, for example, an HTTP request event triggers this callback and allows you to run some custom code. In this case, the server returns a simple HTML response.</p>\n\n\n\n<p>You log that a request was received from the client and use the&nbsp;<code>response</code>&nbsp;parameter in the callback function to send content back to the user, from whom you first received a request. The first line uses a&nbsp;<code>writeHead</code>&nbsp;method to define some basic properties of the response’s HTTP header.&nbsp;<em>HTTP headers</em>&nbsp;contain fields of information that describe the content being transferred in a request or response. Header fields may contain dates, tokens, information about the origins of the request and response, and data describing the type of connection.</p>\n\n\n\n<p>In this case, you’re returning&nbsp;<code>httpStatus.OK</code>, which represents a&nbsp;<code>200</code>&nbsp;response code, and an HTML&nbsp;<code>content-type</code>&nbsp;to indicate that the server received a request successfully and will return content in the form of HTML. Following this block, you assign a local variable,&nbsp;<code>responseMessage</code>, with your response message in HTML.</p>\n\n\n\n<p><code>200</code>&nbsp;is the HTTP status code for OK, used to indicate that no issue occurred in returning content in an HTTP response header. To get a list of other HTTP status codes, enter&nbsp;<code>http.STATUS_CODES</code>&nbsp;in the Node.js REPL shell. Use&nbsp;<code>httpStatus.OK</code>&nbsp;in place of the explicit number.</p>\n\n\n\n<p>Right below that line, you’re writing a line of HTML in the response with&nbsp;<code>write</code>&nbsp;and closing the response with&nbsp;<code>end</code>. You must end your response with&nbsp;<code>end</code>&nbsp;to tell the server that you’re no longer writing content. Not doing so leaves the connection with the client open, preventing the client from receiving the response. You also log your response at this point so you can see that a response was sent from the server itself.</p>\n\n\n\n<p>The last line of code takes the server instance,&nbsp;<code>app</code>, and runs the&nbsp;<code>listen</code>&nbsp;method to indicate that the server is ready for incoming requests at port&nbsp;<code>3000</code>.</p>\n\n\n\n<p>The&nbsp;<code>response</code>&nbsp;object is used by Node.js and carried throughout the application as a way to pass information about the current client transaction from function to function. Some methods on the&nbsp;<code>response</code>&nbsp;object allow you to add data to or remove data from the object,&nbsp;<code>writeHead</code>&nbsp;and&nbsp;<code>write</code>&nbsp;are two such functions.</p>\n\n\n\n<p>There our application is. In only a few lines of code, you’ll also build a web server this way.</p>\n\n\n\n<p>If we don’t specify a port number, the operating system will choose a port for us. This port number is what we’ll soon use to confirm through your web browser that your web server is running.</p>\n\n\n\n<h4>Running Our App</h4>\n\n\n\n<p>The last step is an easy one. Navigate to your project’s directory with terminal, and run&nbsp;<code>node app</code>&nbsp;in your terminal window. Next, open any browser to the address&nbsp;<code>localhost: 3000</code>. You see a message indicating that the server has started. And after that, the browser window should print Hello World. Congratulations! You have built your first Node server. we can press Ctrl-C in your terminal window to stop the server.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Let&#8217;s Start Before you get started with a Node.js web application, you need to initialize the project in your project folder in terminal. Open a terminal, and create a new directory called my_node_server with mkdir. You can initialize the project with npm init. npm is Node.js’ package manager. Your Node.js projects rely on this tool [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4132"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4132"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4132/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4132"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4132"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4132"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4133,
    "date": "2020-07-15T03:57:24",
    "date_gmt": "2020-07-15T03:57:24",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=19"
    },
    "modified": "2020-07-15T03:57:24",
    "modified_gmt": "2020-07-15T03:57:24",
    "slug": "node-js-package-manager",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-package-manager/",
    "title": {
      "rendered": "Package Manager"
    },
    "content": {
      "rendered": "\n<h1>NPM&nbsp;– the Node.js package manager</h1>\n\n\n\n<p>Node.js by itself is a pretty basic system, being a JavaScript interpreter with a few interesting asynchronous I/O libraries. One of the things that makes Node.js interesting is the rapidly growing ecosystem of third-party modules for Node.js.</p>\n\n\n\n<p>At the center of that ecosystem is NPM. While Node.js modules can be downloaded as source and assembled manually for use with Node.js programs, that&#8217;s tedious and it&#8217;s difficult to implement a repeatable build process. NPM gives us a simpler way; NPM is the de facto standard package manager for Node.js and it greatly simplifies downloading and using these modules. We will talk about NPM at&nbsp;length in the next chapter.</p>\n\n\n\n<p>The sharp-eyed will have noticed that&nbsp;<kbd>npm</kbd>&nbsp;is already installed via all the installation methods discussed previously. In the past,&nbsp;<kbd>npm</kbd>&nbsp;was installed separately, but today it is bundled with Node.js.</p>\n\n\n\n<p>Now that we have&nbsp;<kbd>npm</kbd>&nbsp;installed, let&#8217;s take it for a quick spin. The&nbsp;<strong>hexy</strong>&nbsp;program is a utility for printing hex dumps of files. That&#8217;s a very 1970 thing to do, but is still extremely useful. It serves our purpose right now in giving us something to quickly install and try out:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g hexy\n/opt/local/bin/hexy -> /opt/local/lib/node_modules/hexy/bin/hexy_cmd.js\n+ hexy@0.3.0\nadded 1 package in 1.201s</code></pre>\n\n\n\n<p>Adding the&nbsp;<kbd>-g</kbd>&nbsp;flag makes the module available globally, irrespective of&nbsp;the present-working-directory of your command shell. A global install is most useful when the module provides a command-line interface. When a package provides a command-line script,&nbsp;<kbd>npm</kbd>&nbsp;sets that up. For a global install, the command is installed correctly for use by all users of the computer.</p>\n\n\n\n<p>Depending on how Node.js is installed for you, that may need to be run with&nbsp;<kbd>sudo</kbd>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ sudo npm install -g hexy</code></pre>\n\n\n\n<p>Congratulations! you have successfully installed your first node.js package globally.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>NPM&nbsp;– the Node.js package manager Node.js by itself is a pretty basic system, being a JavaScript interpreter with a few interesting asynchronous I/O libraries. One of the things that makes Node.js interesting is the rapidly growing ecosystem of third-party modules for Node.js. At the center of that ecosystem is NPM. While Node.js modules can be [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4133"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4133"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4133/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4133"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4133"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4133"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4134,
    "date": "2020-07-15T03:58:15",
    "date_gmt": "2020-07-15T03:58:15",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=21"
    },
    "modified": "2020-07-15T03:58:15",
    "modified_gmt": "2020-07-15T03:58:15",
    "slug": "node-js-command-line-options",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-command-line-options/",
    "title": {
      "rendered": "Event Loop"
    },
    "content": {
      "rendered": "\n<h1>Node.js Event Loop</h1>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Node.js applications are run in a single-threaded event-driven model. Although Node.js implements a thread pool in the background to do work, the application itself doesn’t have any concept of multiple threads. “Wait, what about performance and scale?” you might ask. At first it may seem counterintuitive, but once you understand the logic behind the Node.js event model it all makes perfect sense.</p>\n\n\n\n<p>Although events look quite similar to callbacks, the difference lies in the fact that callback functions are called when an asynchronous function returns its result, whereas event handling works on the observer pattern. The functions that listen to events act as&nbsp;<strong>Observers</strong>. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>// Import events module\nvar events = require('events');\n\n// Create an eventEmitter object\nvar eventEmitter = new events.EventEmitter();</code></pre>\n\n\n\n<p>Following is the syntax to bind an event handler with an event −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>// Bind event and event  handler as follows\neventEmitter.on('eventName', eventHandler);</code></pre>\n\n\n\n<p>We can fire an event programmatically as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>// Fire an event\neventEmitter.emit('eventName');</code></pre>\n\n\n\n<h2>Demo</h2>\n\n\n\n<p>Create a js file named app.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>// Import events module\nvar events = require('events');\n\n// Create an eventEmitter object\nvar eventEmitter = new events.EventEmitter();\n\n// Create an event handler as follows\nvar connectHandler = function connected() {\n   console.log('connection succesful.');\n\n   // Fire the data_received event \n   eventEmitter.emit('data_received');\n}\n\n// Bind the connection event with the handler\neventEmitter.on('connection', connectHandler);\n\n// Bind the data_received event with the anonymous function\neventEmitter.on('data_received', function() {\n   console.log('data received succesfully.');\n});\n\n// Fire the connection event \neventEmitter.emit('connection');\n\nconsole.log(\"Program Ended.\");</code></pre>\n\n\n\n<p>Now let&#8217;s try to run the above program and check its output −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node app.js</code></pre>\n\n\n\n<p>IT should produce the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>connection successful.\ndata received successfully.\nProgram Ended.</code></pre>\n\n\n\n<h2>How Node Applications Work?</h2>\n\n\n\n<p>In Node Application, any async function accepts a callback as the last parameter and a callback function accepts an error as the first parameter. Let&#8217;s revisit the previous Demo again. Create a text file named input.txt with the following content.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>I am learning Node.js and believe me Node.js is Cool!</code></pre>\n\n\n\n<p>Create a js file named app.js having the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\nfs.readFile('input.txt', function (err, data) {\n   if (err) {\n      console.log(err.stack);\n      return;\n   }\n   console.log(data.toString());\n});\nconsole.log(\"Program Ended\");</code></pre>\n\n\n\n<p>Here fs.readFile() is a async function whose purpose is to read a file. If an error occurs during the read operation, then the&nbsp;<strong>err object</strong>&nbsp;will contain the corresponding error, else data will contain the contents of the file.&nbsp;<strong>readFile</strong>&nbsp;passes err and data to the callback function after the read operation is complete, which finally prints the content.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Program Ended\nTutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<h4 id=\"ch04_level2sec2\">Blocking I/O in Node.js</h4>\n\n\n\n<p>The Node.js event model of using the event callbacks is great until you run into the problem of functions that block waiting for I/O. Blocking I/O stops the execution of the current thread and waits for a response before continuing. Some examples of blocking I/O are</p>\n\n\n\n<ul><li>Reading a file</li><li>Querying a database</li><li>Socket request</li></ul>\n\n\n\n<p>Node.js uses events heavily and it is also one of the reasons why Node.js is pretty fast compared to other similar technologies. As soon as Node starts its server, it simply initiates its variables, declares functions and then simply waits for the event to occur.</p>\n\n\n\n<p>In an event-driven application, there is generally a main loop that listens for events, and then triggers a callback function when one of those events is detected.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Node.js Event Loop Node.js applications are run in a single-threaded event-driven model. Although Node.js implements a thread pool in the background to do work, the application itself doesn’t have any concept of multiple threads. “Wait, what about performance and scale?” you might ask. At first it may seem counterintuitive, but once you understand the logic [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4134"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4134"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4134/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4134"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4134"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4134"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4135,
    "date": "2020-07-15T03:58:51",
    "date_gmt": "2020-07-15T03:58:51",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=23"
    },
    "modified": "2020-07-15T03:58:51",
    "modified_gmt": "2020-07-15T03:58:51",
    "slug": "node-js-global-objects",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-global-objects/",
    "title": {
      "rendered": "Event Emitter"
    },
    "content": {
      "rendered": "\n<h1>The EventEmitter Class</h1>\n\n\n\n<p>The&nbsp;<kbd>EventEmitter</kbd>&nbsp;object is defined in the events module of Node.js. Directly using the&nbsp;<kbd>EventEmitter</kbd>&nbsp;class means performing&nbsp;<kbd>require('events')</kbd>. In most cases,&nbsp;you&#8217;ll be using an existing object that uses&nbsp;<kbd>EventEmitter</kbd>&nbsp;internally and&nbsp;you won&#8217;t require this module. But there are cases where needs dictate implementing an&nbsp;<kbd>EventEmitter</kbd>&nbsp;subclass.</p>\n\n\n\n<p>Create a file named&nbsp;<kbd>pulser.js</kbd>&nbsp;containing the following code:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const EventEmitter = require('events');\n\nclass Pulser extends EventEmitter {\n        \n    start() {\n        setInterval(() => {\n            console.log(`${new Date().toISOString()} >>>> pulse`);\n            this.emit('pulse');\n            console.log(`${\n        new Date().toISOString()} &lt;&lt;&lt;&lt; pulse`);\n        }, 1000);\n    }\n}\nmodule.exports = Pulser;</code></pre>\n\n\n\n<p>This defines a&nbsp;<kbd>Pulser</kbd>&nbsp;class, which inherits from&nbsp;<kbd>EventEmitter</kbd>. In older Node.js releases, this would require using&nbsp;<kbd>util.inherits</kbd>, but the new class object makes subclassing much simpler.&nbsp;</p>\n\n\n\n<p>Another thing to examine is how&nbsp;<kbd>this.emit</kbd>&nbsp;in the callback function refers to the Pulser object. Before the ES2015 arrow function, when our callbacks used a regular&nbsp;<kbd>function</kbd>,&nbsp;<kbd>this</kbd>&nbsp;would not have referred to the&nbsp;<kbd>Pulser</kbd>&nbsp;object. Instead, it would have referred to some other object related to the&nbsp;<kbd>setInterval</kbd>&nbsp;function.&nbsp;Because it is an arrow function, the&nbsp;<kbd>this</kbd>&nbsp;inside the arrow function is the same&nbsp;<kbd>this</kbd>&nbsp;as in the outer function.</p>\n\n\n\n<p>If you needed to use a&nbsp;<kbd>function</kbd>&nbsp;rather than an arrow function, this trick would work:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>class Pulser extends EventEmitter {\n    start() {\n        var self = this;\n        setInterval(function() {\n        \n            self.emit(...);\n        });\n    }\n}</code></pre>\n\n\n\n<p>What&#8217;s different is the&nbsp;assignment of&nbsp;<kbd>this</kbd>&nbsp;to&nbsp;<kbd>self</kbd>. The value of&nbsp;<kbd>this</kbd>&nbsp;inside the function is different, but the value of&nbsp;<kbd>self</kbd>&nbsp;remains the same in every enclosed scope. This widely-used trick is less necessary now that we have arrow functions.</p>\n\n\n\n<p>If you want a simple EventEmitter, but with your own class name, the body of the extended class can be empty:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>class HeartBeat extends EventEmitter {}\nconst beatMaker = new HeartBeat();</code></pre>\n\n\n\n<p>The purpose of the&nbsp;<kbd>Pulser</kbd>&nbsp;class is sending a timed event, once a second, to any listeners. The&nbsp;<kbd>start</kbd>&nbsp;method uses&nbsp;<kbd>setInterval</kbd>&nbsp;to kick off repeated callback execution, scheduled for every second, calling&nbsp;<kbd>emit</kbd>&nbsp;to send the&nbsp;<kbd>pulse</kbd>&nbsp;events to any listeners.</p>\n\n\n\n<p>Now, let&#8217;s see how to use the&nbsp;<kbd>Pulser</kbd>&nbsp;object. Create a new file, called&nbsp;<kbd>pulsed.js</kbd>, containing:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const Pulser = require('./pulser');\n\n// Instantiate a Pulser object\nconst pulser = new Pulser();\n// Handler function\npulser.on('pulse', () => {\n        \n    console.log(`${new Date().toISOString()} pulse received`);\n});\n// Start it pulsing\npulser.start(); </code></pre>\n\n\n\n<p>Here, we create a&nbsp;<kbd>Pulser</kbd>&nbsp;object and consume its&nbsp;<kbd>pulse</kbd>&nbsp;events. Calling&nbsp;<kbd>pulser.on('pulse')</kbd>&nbsp;sets up connections for the&nbsp;<kbd>pulse</kbd>&nbsp;events to invoke the callback function. It then calls the&nbsp;<kbd>start</kbd>&nbsp;method to get the process going.</p>\n\n\n\n<p>Enter this into a file and name the file&nbsp;<kbd>pulsed.js</kbd>. When you run it, you should&nbsp;see the following output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node pulsed.js \n2017-12-03T06:24:10.272Z >>>> pulse\n2017-12-03T06:24:10.275Z pulse received\n2017-12-03T06:24:10.276Z &lt;&lt;&lt;&lt; pulse\n2017-12-03T06:24:11.279Z >>>> pulse\n2017-12-03T06:24:11.279Z pulse received\n2017-12-03T06:24:11.279Z &lt;&lt;&lt;&lt; pulse\n2017-12-03T06:24:12.281Z >>>> pulse\n2017-12-03T06:24:12.281Z pulse received\n2017-12-03T06:24:12.282Z &lt;&lt;&lt;&lt; pulse</code></pre>\n\n\n\n<p>That gives you a little practical knowledge of the&nbsp;<kbd>EventEmitter</kbd>&nbsp;class. Let&#8217;s now look at its operational theory.</p>\n\n\n\n<h1>The EventEmitter theory</h1>\n\n\n\n<p>With the&nbsp;<kbd>EventEmitter</kbd>&nbsp;class, your code emits events that other code can receive. It&#8217;s a way of connecting two separated sections of your program, kind of like how quantum entanglement means two electrons can communicate with each other from any distance. Seems simple enough.</p>\n\n\n\n<p>The event name can be anything that makes sense to you, and you can define as many event names as you like. Event names are defined simply by calling&nbsp;<kbd>.emit</kbd>&nbsp;with the event name. There&#8217;s nothing formal to do and no registry of event names. Simply making a call to&nbsp;<kbd>.emit</kbd>&nbsp;is enough to define an event name.By convention, the event name&nbsp;<kbd>error</kbd>&nbsp;indicates errors.</p>\n\n\n\n<p>An object sends events using the&nbsp;<kbd>.emit</kbd>&nbsp;function. Events are sent to any listeners that have registered to receive events from the object. The program registers to receive an event by calling that object&#8217;s&nbsp;<kbd>.on</kbd>&nbsp;method, giving the event name and an event handler function.</p>\n\n\n\n<p>There is no central distribution point for all events. Instead, each instance of an&nbsp;<kbd>EventEmitter</kbd>&nbsp;object manages its own set of listeners and distributes its events to those listeners.</p>\n\n\n\n<p>Often, it is required to send data along with an event. To do so, simply add the data as arguments to the&nbsp;<kbd>.emit</kbd>&nbsp;call, as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>this.emit('eventName', data1, data2, ..); </code></pre>\n\n\n\n<p>When the program receives that event, the data appears as arguments to the callback function. Your program would listen to such an event as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>emitter.on('eventName', (data1, data2, ...theArgs) => {\n        // act on event\n}); </code></pre>\n\n\n\n<p>There is no handshaking between event receivers and the event sender. That is, the event sender simply goes on with its business, and it gets no notifications about any events received, any action taken, or any error that occurred.</p>\n\n\n\n<p>In this example, we used another of the ES2015 features, the&nbsp;<kbd>rest</kbd>&nbsp;operator, shown here as&nbsp;<kbd>...theArgs.</kbd>&nbsp;The&nbsp;<em>rest</em>&nbsp;operator catches any number of remaining function parameters into an array. Since&nbsp;<kbd>EventEmitter</kbd>&nbsp;can pass along any number of parameters, and the&nbsp;<kbd>rest</kbd>&nbsp;operator can automatically receive any number of parameters, it&#8217;s a match made in heaven, or else in the TC-39 committee.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The EventEmitter Class The&nbsp;EventEmitter&nbsp;object is defined in the events module of Node.js. Directly using the&nbsp;EventEmitter&nbsp;class means performing&nbsp;require(&#8216;events&#8217;). In most cases,&nbsp;you&#8217;ll be using an existing object that uses&nbsp;EventEmitter&nbsp;internally and&nbsp;you won&#8217;t require this module. But there are cases where needs dictate implementing an&nbsp;EventEmitter&nbsp;subclass. Create a file named&nbsp;pulser.js&nbsp;containing the following code: This defines a&nbsp;Pulser&nbsp;class, which inherits from&nbsp;EventEmitter. In [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4135"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4135"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4135/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4135"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4135"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4135"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4136,
    "date": "2020-07-15T04:00:29",
    "date_gmt": "2020-07-15T04:00:29",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=25"
    },
    "modified": "2020-07-15T04:00:29",
    "modified_gmt": "2020-07-15T04:00:29",
    "slug": "node-js-os",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-os/",
    "title": {
      "rendered": "Timers"
    },
    "content": {
      "rendered": "\n<h2>Implementing Timers in Node.js</h2>\n\n\n\n<p>A useful feature of Node.js and JavaScript is the ability to delay execution of code for a period of time. This can be useful for cleanup or refresh work that you do not want to always be running. There are three types of timers you can implement in Node.js: timeout, interval, and immediate. The following sections describe each of these timers and how to implement them in your code.</p>\n\n\n\n<h5>Delaying Work with Timeouts</h5>\n\n\n\n<p>Timeout timers are used to delay work for a specific amount of time. When that time expires, the callback function is executed and the timer goes away. Use timeouts for work that only needs to be performed once.</p>\n\n\n\n<p>Timeout timers are created using the&nbsp;<code>setTimeout(callback, delayMilliSeconds, [args])</code>&nbsp;method built into Node.js. When you call&nbsp;<code>setTimeout()</code>, the callback function is executed after&nbsp;<code>delayMilliSeconds</code>&nbsp;expires. For example, the following executes&nbsp;<code>myFunc()</code>&nbsp;after 1 second:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">setTimeout(myFunc, 1000);</pre>\n\n\n\n<p>The&nbsp;<code>setTimeout()</code>&nbsp;function returns a timer object ID. You can pass this ID to&nbsp;<code>clearTimeout(timeoutId)</code>&nbsp;at any time before the&nbsp;<code>delayMilliSeconds</code>&nbsp;expires to cancel the timeout function. For example:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>myTimeout =  setTimeout(myFunc, 100000);\n…\nclearTimeout(myTimeout);</code></pre>\n\n\n\n<p>In the below example, we implement a series of simple timeouts that call the&nbsp;<code>simpleTimeout()</code>&nbsp;function, which outputs the number of milliseconds since the timeout was scheduled. Notice that it doesn’t matter which order&nbsp;<code>setTimeout()</code>&nbsp;is called:</p>\n\n\n\n<pre class=\"wp-block-code\"><code> function simpleTimeout(consoleTimer){\n         console.timeEnd(consoleTimer);\n       }\nconsole.time(\"twoSecond\");\nsetTimeout(simpleTimeout, 2000, \"Two Second\");\nconsole.time(\"oneSecond\");\nsetTimeout(simpleTimeout, 1000, \"One Second\");\nconsole.time(\"fiveSecond\");\nsetTimeout(simpleTimeout, 3000, \"ThreeSecond\");\nconsole.time(\"50MilliSecond\");\nsetTimeout(simpleTimeout, 50, \"50 Milli Second\");</code></pre>\n\n\n\n<p>run your&nbsp;<code>timer.js</code>&nbsp;file and you should see the following result:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>50 Milli Second: 50.319ms\nOne Second: 1000.108ms\nTwo Second: 2000.325ms\nThree Second: 3000.186ms\n    </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Implementing Timers in Node.js A useful feature of Node.js and JavaScript is the ability to delay execution of code for a period of time. This can be useful for cleanup or refresh work that you do not want to always be running. There are three types of timers you can implement in Node.js: timeout, interval, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4136"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4136"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4136/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4136"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4136"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4136"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4137,
    "date": "2020-07-15T04:01:42",
    "date_gmt": "2020-07-15T04:01:42",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=27"
    },
    "modified": "2020-07-15T04:01:42",
    "modified_gmt": "2020-07-15T04:01:42",
    "slug": "node-js-timer",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-timer/",
    "title": {
      "rendered": "Callback Concept"
    },
    "content": {
      "rendered": "\n<h2>What is Callback?</h2>\n\n\n\n<p>Callback is an asynchronous equivalent for a function. A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks.</p>\n\n\n\n<p>For example, a function to read a file may start reading file and return the control to the execution environment immediately so that the next instruction can be executed. Once file I/O is complete, it will call the callback function while passing the callback function, the content of the file as a parameter. So there is no blocking or wait for File I/O. This makes Node.js highly scalable, as it can process a high number of requests without waiting for any function to return results.</p>\n\n\n\n<h2>Blocking Code Example</h2>\n\n\n\n<p>Create a text file named&nbsp;<strong>input.txt</strong>&nbsp;with the following content −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CodePoint is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<p>Create a js file named&nbsp;<strong>main.js</strong>&nbsp;with the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\nvar data = fs.readFileSync('input.txt');\n\nconsole.log(data.toString());\nconsole.log(\"Program Ended\");</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CodePoint is giving self learning content\nto teach the world in simple and easy way!!!!!\nProgram Ended</code></pre>\n\n\n\n<h2>Non-Blocking Code Example</h2>\n\n\n\n<p>Create a text file named input.txt with the following content.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CodePoint is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<p>Update main.js to have the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\nfs.readFile('input.txt', function (err, data) {\n   if (err) return console.error(err);\n   console.log(data.toString());\n});\n\nconsole.log(\"Program Ended\");</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js\n</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Program Ended\nCodePoint is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<p>These two examples explain the concept of blocking and non-blocking calls.</p>\n\n\n\n<ul><li>The first example shows that the program blocks until it reads the file and then only it proceeds to end the program.</li><li>The second example shows that the program does not wait for file reading and proceeds to print &#8220;Program Ended&#8221; and at the same time, the program without blocking continues reading the file.</li></ul>\n\n\n\n<p>Thus, a blocking program executes very much in sequence. From the programming point of view, it is easier to implement the logic but non-blocking programs do not execute in sequence. In case a program needs to use any data to be processed, it should be kept within the same block to make it sequential execution.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Callback? Callback is an asynchronous equivalent for a function. A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks. For example, a function to read a file may start reading [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4137"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4137"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4137/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4137"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4137"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4137"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4138,
    "date": "2020-07-15T04:02:59",
    "date_gmt": "2020-07-15T04:02:59",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=29"
    },
    "modified": "2020-07-15T04:02:59",
    "modified_gmt": "2020-07-15T04:02:59",
    "slug": "node-js-errors",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-errors/",
    "title": {
      "rendered": "Callbacks Implementation"
    },
    "content": {
      "rendered": "\n<h3 id=\"ch04_level1sec3\">Implementing Callbacks</h3>\n\n\n\n<p>As you have seen in previous sections, the Node.js event-driven model relies heavily on callback functions. Callback functions can be a bit difficult to understand at first, especially if you want to depart from implementing a basic anonymous function. This section deals with three specific implementations of callbacks: passing parameters to a callback function, handling callback function parameters inside a loop, and nesting callbacks.</p>\n\n\n\n<h4 id=\"ch04_level2sec7\">Passing Additional Parameters to Callbacks</h4>\n\n\n\n<p>Most callbacks have automatic parameters passed to them, such as an error or result buffer. A common question when working with callbacks is how to pass additional parameters to them from the calling function. You do this by implementing the parameter in an anonymous function and then call the actual callback with parameters from the anonymous function.</p>\n\n\n\n<p>Below example shows implementing callback parameters. There are two&nbsp;<code>sawCar</code>&nbsp;event handlers. Note that the&nbsp;<code>sawCar</code>&nbsp;event only emits the&nbsp;<code>make</code>&nbsp;parameter. Notice that the&nbsp;<code>emitter.emit()</code>&nbsp;function also can accept additional parameters, in this case,&nbsp;<code>make</code>&nbsp;is added as shown in line 5. The first event handler on line 16 implements the&nbsp;<code>logCar(make)</code>&nbsp;callback handler. To add a color for&nbsp;<code>printColor()</code>, an anonymous function is used in the event handler. A randomly selected color is passed to the call&nbsp;<code>printColor(make, color)</code>.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"> </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let events = require('events');\n function Cars() {\n   events.EventEmitter.call(this);\n   this.seeCar = function(make){\n     this.emit('sawCar', make);\n   };\n }\n Cars.prototype.__proto__ = events.EventEmitter.prototype;\n let show = new Cars();\n function logCar(make){\n   console.log(\"Saw a \" + make);\n }\n function printColor(make, color){\n   console.log(\"Saw a %s %s\", color, make);\n }\n show.on(\"sawCar\", logCar);\n show.on(\"sawCar\", function(make){\n   let colors = &#91;'white', 'red', 'black'];\n   let color = colors&#91;Math.floor(Math.random()*3)];\n   printColor(make, color);\n});\nshow.seeCar(\"BMW\");\nshow.seeCar(\"Audi\");\nshow.seeCar(\"Bugatti\");\nshow.seeCar(\"Lamborghini\");\nshow.seeCar(\"Ferrari\");</code></pre>\n\n\n\n<h4 id=\"ch04_level2sec8\">Implementing Closure in Callbacks</h4>\n\n\n\n<p>An interesting problem that asynchronous callbacks have is that of closure. Closure is a JavaScript term that indicates that variables are bound to a function’s scope and not the parent function’s scope. When you execute an asynchronous callback, the parent function’s scope may have changed; for example, when iterating through a list and altering values in each iteration.</p>\n\n\n\n<p>If your callback needs access to variables in the parent function’s scope, then you need to provide closure so that those values are available when the callback is pulled off the event queue. A basic way of doing that is by encapsulating the asynchronous call inside a function block and passing in the variables that are needed.</p>\n\n\n\n<p>Below we implement a wrapper function that provides closure to the&nbsp;<code>logCar()</code>&nbsp;asynchronous function. Output shows that the car name is always the last item read because the value of&nbsp;<code>message</code>&nbsp;changes each time through the loop.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> function logCar(logMsg, callback){\n       process.nextTick(function() {\n     callback(logMsg);\n   });\n }\n var cars = &#91;\"Ferrari\", \"Porsche\", \"Bugatti\"];\n for (var idx in cars){\n       var message = \"Saw a \" + cars&#91;idx];\n       logCar(message, function(){\n     console.log(\"Normal Callback: \" + message);\n   });\n }\n for (var idx in cars){\n       var message = \"Saw a \" + cars&#91;idx];\n       (function(msg){\n     logCar(msg, function(){\n           console.log(\"Closure Callback: \" + msg);\n         });\n   })(message);\n }</code></pre>\n\n\n\n<p>Run the file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Normal Callback: Saw a Bugatti\nNormal Callback: Saw a Bugatti\nNormal Callback: Saw a Bugatti\nClosure Callback: Saw a Ferrari\nClosure Callback: Saw a Porsche\nClosure Callback: Saw a Bugatti</code></pre>\n\n\n\n<p>The event-driven model that Node.js uses provides scalability and performance. You learned the difference between the event-driven model and the traditional threaded model for webservers. You learned that events can be added to the event queue when blocking I/O is called. And you learned that listeners can be triggered by events or timers or called directly using the nextTick() method.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Implementing Callbacks As you have seen in previous sections, the Node.js event-driven model relies heavily on callback functions. Callback functions can be a bit difficult to understand at first, especially if you want to depart from implementing a basic anonymous function. This section deals with three specific implementations of callbacks: passing parameters to a callback [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4138"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4138"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4138/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4138"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4138"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4138"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4139,
    "date": "2020-07-17T05:34:08",
    "date_gmt": "2020-07-17T05:34:08",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=31"
    },
    "modified": "2020-07-17T05:34:08",
    "modified_gmt": "2020-07-17T05:34:08",
    "slug": "node-js-dns",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-dns/",
    "title": {
      "rendered": "Working with JSON"
    },
    "content": {
      "rendered": "\n<h3 id=\"ch05_level1sec1\">Working with JSON</h3>\n\n\n\n<p>One of the most common data types that you work with when implementing Node.js web applications and services is JSON (JavaScript Object Notation). JSON is a lightweight method to convert JavaScript objects into a string form and then back again. This provides an easy method when you need to serialize data objects when passing them from client to server, process to process, stream to stream, or when storing them in a database.</p>\n\n\n\n<p>There are several reasons to use JSON to serialize your JavaScript objects over XML including the following:</p>\n\n\n\n<ul><li>JSON is much more efficient and takes up fewer characters.</li><li>JSON is easier to read from a developer’s perspective because it is similar to JavaScript syntax.</li><li>Serializing/deserializing JSON is faster than XML because it’s simpler syntax.</li></ul>\n\n\n\n<p>The only reasons you want to use XML over JSON are for complex objects or if you have XML/XSLT transforms already in place.</p>\n\n\n\n<h4 id=\"ch05_level2sec1\">Converting JSON to JavaScript Objects</h4>\n\n\n\n<p>A JSON string represents the JavaScript object in string form. The string syntax is similar to code, making it easy to understand. You can use the&nbsp;<code>JSON.parse(string)</code>&nbsp;method to convert a string that is properly formatted with JSON into a JavaScript object.</p>\n\n\n\n<p>For example, the following code snippet defines accountStr as a formatted JSON string and converts it to a JavaScript object using JSON.parse(). Then member properties can be accessed via dot notation:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let info = '{\n    \"name\":\"Harry\", \"hobbies\":&#91;\"reading\",\"cricket\"],\n    }';\nlet userInfo = JSON.parse(accountStr);\nconsole.log(userInfo.name);\nconsole.log(userInfo.hobbies);\n  </code></pre>\n\n\n\n<p>The above code outputs the following:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Harry\n&#91; 'reading', 'cricket' ]</code></pre>\n\n\n\n<h4 id=\"ch05_level2sec2\">Converting JavaScript Objects to JSON</h4>\n\n\n\n<p>Node also allows you to convert a JavaScript object into a properly formatted JSON string. Thus the string form can be stored in a file or database, sent across an HTTP connection, or written to a stream/buffer. Use the&nbsp;<code>JSON.stringify(text)</code>&nbsp;method to parse JSON text and generate a JavaScript object:</p>\n\n\n\n<p>For example, the following code defines a JavaScript object that includes string, numeric, and array properties. Using JSON.stringify(), it is all converted to a JSON string:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let info = '{\n    \"name\":\"Harry\", \"hobbies\":&#91;\"reading\",\"cricket\"],\n    }';\nlet userInfo = JSON.parse(accountStr);\nconsole.log(userInfo.name);\nconsole.log(userInfo.hobbies);</code></pre>\n\n\n\n<p>The above code outputs the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code> {\"name\":\"Harry\",\"hobbies\":&#91;\"reading, cricket\"]}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Working with JSON One of the most common data types that you work with when implementing Node.js web applications and services is JSON (JavaScript Object Notation). JSON is a lightweight method to convert JavaScript objects into a string form and then back again. This provides an easy method when you need to serialize data objects [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4139"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4139"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4139/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4139"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4139"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4139"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4140,
    "date": "2020-07-17T05:35:21",
    "date_gmt": "2020-07-17T05:35:21",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=33"
    },
    "modified": "2020-07-17T05:35:21",
    "modified_gmt": "2020-07-17T05:35:21",
    "slug": "node-js-net",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-net/",
    "title": {
      "rendered": "Buffers"
    },
    "content": {
      "rendered": "\n<h1>Node.js &#8211; Buffers</h1>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Pure JavaScript is Unicode friendly, but it is not so for binary data. While dealing with TCP streams or the file system, it&#8217;s necessary to handle octet streams. Node provides Buffer class which provides instances to store raw data similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.</p>\n\n\n\n<p>Buffer class is a global class that can be accessed in an application without importing the buffer module.</p>\n\n\n\n<h2>Creating Buffers</h2>\n\n\n\n<p>Node Buffer can be constructed in a variety of ways.</p>\n\n\n\n<h3>Method 1</h3>\n\n\n\n<p>Following is the syntax to create an uninitiated Buffer of&nbsp;<strong>10</strong>&nbsp;octets −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buf = new Buffer(10);</code></pre>\n\n\n\n<h3>Method 2</h3>\n\n\n\n<p>Following is the syntax to create a Buffer from a given array −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buf = new Buffer(&#91;10, 20, 30, 40, 50]);</code></pre>\n\n\n\n<h3>Method 3</h3>\n\n\n\n<p>Following is the syntax to create a Buffer from a given string and optionally encoding type −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buf = new Buffer(\"Simply Easy Learning\", \"utf-8\");</code></pre>\n\n\n\n<p>Though &#8220;utf8&#8221; is the default encoding, you can use any of the following encodings &#8220;ascii&#8221;, &#8220;utf8&#8221;, &#8220;utf16le&#8221;, &#8220;ucs2&#8221;, &#8220;base64&#8221; or &#8220;hex&#8221;.</p>\n\n\n\n<h2>Writing to Buffers</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to write into a Node Buffer −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf.write(string&#91;, offset]&#91;, length]&#91;, encoding])</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>string</strong>&nbsp;− This is the string data to be written to buffer.</li><li><strong>offset</strong>&nbsp;− This is the index of the buffer to start writing at. Default value is 0.</li><li><strong>length</strong>&nbsp;− This is the number of bytes to write. Defaults to buffer.length.</li><li><strong>encoding</strong>&nbsp;− Encoding to use. &#8216;utf8&#8217; is the default encoding.</li></ul>\n\n\n\n<h3>Return Value</h3>\n\n\n\n<p>This method returns the number of octets written. If there is not enough space in the buffer to fit the entire string, it will write a part of the string.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf = new Buffer(256);\nlen = buf.write(\"Simply Easy Learning\");\n\nconsole.log(\"Octets written : \"+  len);</code></pre>\n\n\n\n<p>When the above program is executed, it produces the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Octets written : 20</code></pre>\n\n\n\n<h2>Reading from Buffers</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to read data from a Node Buffer −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf.toString(&#91;encoding]&#91;, start]&#91;, end])</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>encoding</strong>&nbsp;− Encoding to use. &#8216;utf8&#8217; is the default encoding.</li><li><strong>start</strong>&nbsp;− Beginning index to start reading, defaults to 0.</li><li><strong>end</strong>&nbsp;− End index to end reading, defaults is complete buffer.</li></ul>\n\n\n\n<h3>Return Value</h3>\n\n\n\n<p>This method decodes and returns a string from buffer data encoded using the specified character set encoding.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf = new Buffer(26);\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf&#91;i] = i + 97;\n}\n\nconsole.log( buf.toString('ascii'));       // outputs: abcdefghijklmnopqrstuvwxyz\nconsole.log( buf.toString('ascii',0,5));   // outputs: abcde\nconsole.log( buf.toString('utf8',0,5));    // outputs: abcde\nconsole.log( buf.toString(undefined,0,5)); // encoding defaults to 'utf8', outputs abcde</code></pre>\n\n\n\n<p>When the above program is executed, it produces the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>abcdefghijklmnopqrstuvwxyz\nabcde\nabcde\nabcde</code></pre>\n\n\n\n<h2>Convert Buffer to JSON</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to convert a Node Buffer into JSON object −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf.toJSON()</code></pre>\n\n\n\n<h3>Return Value</h3>\n\n\n\n<p>This method returns a JSON-representation of the Buffer instance.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buf = new Buffer('Simply Easy Learning');\nvar json = buf.toJSON(buf);\n\nconsole.log(json);</code></pre>\n\n\n\n<p>When the above program is executed, it produces the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{ type: 'Buffer',\n   data:\n   &#91;\n      83,\n      105,\n      109,\n      112,\n      108,\n      121,\n      32,\n      69,\n      97,\n      115,\n      121,\n      32,\n      76,\n      101,\n      97,\n      114,\n      110,\n      105,\n      110,\n      103\n   ]\n}\n﻿</code></pre>\n\n\n\n<h2>Concatenate Buffers</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to concatenate Node buffers to a single Node Buffer −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Buffer.concat(list&#91;, totalLength])</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>list</strong>&nbsp;− Array List of Buffer objects to be concatenated.</li><li><strong>totalLength</strong>&nbsp;− This is the total length of the buffers when concatenated.</li></ul>\n\n\n\n<h3>Return Value</h3>\n\n\n\n<p>This method returns a Buffer instance.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buffer1 = new Buffer('TutorialsPoint ');\nvar buffer2 = new Buffer('Simply Easy Learning');\nvar buffer3 = Buffer.concat(&#91;buffer1,buffer2]);\n\nconsole.log(\"buffer3 content: \" + buffer3.toString());</code></pre>\n\n\n\n<p>When the above program is executed, it produces the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buffer3 content: TutorialsPoint Simply Easy Learning</code></pre>\n\n\n\n<h2>Compare Buffers</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to compare two Node buffers −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf.compare(otherBuffer);</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>otherBuffer</strong>&nbsp;− This is the other buffer which will be compared with&nbsp;<strong>buf</strong></li></ul>\n\n\n\n<h3>Return Value</h3>\n\n\n\n<p>Returns a number indicating whether it comes before or after or is the same as the otherBuffer in sort order.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buffer1 = new Buffer('ABC');\nvar buffer2 = new Buffer('ABCD');\nvar result = buffer1.compare(buffer2);\n\nif(result &lt; 0) {\n   console.log(buffer1 +\" comes before \" + buffer2);\n} else if(result === 0) {\n   console.log(buffer1 +\" is same as \" + buffer2);\n} else {\n   console.log(buffer1 +\" comes after \" + buffer2);\n}</code></pre>\n\n\n\n<p>When the above program is executed, it produces the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>ABC comes before ABCD</code></pre>\n\n\n\n<h2>Copy Buffer</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to copy a node buffer −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf.copy(targetBuffer&#91;, targetStart]&#91;, sourceStart]&#91;, sourceEnd])</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>targetBuffer</strong>&nbsp;− Buffer object where buffer will be copied.</li><li><strong>targetStart</strong>&nbsp;− Number, Optional, Default: 0</li><li><strong>sourceStart</strong>&nbsp;− Number, Optional, Default: 0</li><li><strong>sourceEnd</strong>&nbsp;− Number, Optional, Default: buffer.length</li></ul>\n\n\n\n<h3>Return Value</h3>\n\n\n\n<p>No return value. Copies data from a region of this buffer to a region in the target buffer even if the target memory region overlaps with the source. If undefined, the targetStart and sourceStart parameters default to 0, while sourceEnd defaults to buffer.length.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buffer1 = new Buffer('ABC');\n\n//copy a buffer\nvar buffer2 = new Buffer(3);\nbuffer1.copy(buffer2);\nconsole.log(\"buffer2 content: \" + buffer2.toString());</code></pre>\n\n\n\n<p>When the above program is executed, it produces the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buffer2 content: ABC</code></pre>\n\n\n\n<h2>Slice Buffer</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to get a sub-buffer of a node buffer −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf.slice(&#91;start]&#91;, end])</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>start</strong>&nbsp;− Number, Optional, Default: 0</li><li><strong>end</strong>&nbsp;− Number, Optional, Default: buffer.length</li></ul>\n\n\n\n<h3>Return Value</h3>\n\n\n\n<p>Returns a new buffer which references the same memory as the old one, but offset and cropped by the start (defaults to 0) and end (defaults to buffer.length) indexes. Negative indexes start from the end of the buffer.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buffer1 = new Buffer('TutorialsPoint');\n\n//slicing a buffer\nvar buffer2 = buffer1.slice(0,9);\nconsole.log(\"buffer2 content: \" + buffer2.toString());</code></pre>\n\n\n\n<p>When the above program is executed, it produces the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buffer2 content: Tutorials</code></pre>\n\n\n\n<h2>Buffer Length</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to get a size of a node buffer in bytes −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buf.length;</code></pre>\n\n\n\n<h3>Return Value</h3>\n\n\n\n<p>Returns the size of a buffer in bytes.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var buffer = new Buffer('TutorialsPoint');\n\n//length of the buffer\nconsole.log(\"buffer length: \" + buffer.length);</code></pre>\n\n\n\n<p>When the above program is executed, it produces following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>buffer length: 14</code></pre>\n\n\n\n<h2>Methods Reference</h2>\n\n\n\n<p>Following is a reference of Buffers module available in Node.js. For more detail, you can refer to the official documentation.</p>\n\n\n\n<h2>Class Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td><strong>Buffer.isEncoding(encoding)</strong>Returns true if the encoding is a valid encoding argument, false otherwise.</td></tr><tr><td>2</td><td><strong>Buffer.isBuffer(obj)</strong>Tests if obj is a Buffer.</td></tr><tr><td>3</td><td><strong>Buffer.byteLength(string[, encoding])</strong>Gives the actual byte length of a string. encoding defaults to &#8216;utf8&#8217;. It is not the same as String.prototype.length, since String.prototype.length returns the number of characters in a string.</td></tr><tr><td>4</td><td><strong>Buffer.concat(list[, totalLength])</strong>Returns a buffer which is the result of concatenating all the buffers in the list together.</td></tr><tr><td>5</td><td><strong>Buffer.compare(buf1, buf2)</strong>The same as buf1.compare(buf2). Useful for sorting an array of buffers.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Node.js &#8211; Buffers Pure JavaScript is Unicode friendly, but it is not so for binary data. While dealing with TCP streams or the file system, it&#8217;s necessary to handle octet streams. Node provides Buffer class which provides instances to store raw data similar to an array of integers but corresponds to a raw memory allocation [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4140"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4140"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4140/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4140"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4140"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4140"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4141,
    "date": "2020-07-17T05:36:19",
    "date_gmt": "2020-07-17T05:36:19",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=35"
    },
    "modified": "2020-07-17T05:36:19",
    "modified_gmt": "2020-07-17T05:36:19",
    "slug": "node-js-crypto",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-crypto/",
    "title": {
      "rendered": "Define Modules"
    },
    "content": {
      "rendered": "\n<h1>Defining a module</h1>\n\n\n\n<p>Before writing Node.js applications, you must learn about Node.js modules and packages. Modules are the basic building blocks for constructing Node.js applications. A Node.js&nbsp;module encapsulates functions, hiding details inside a well-protected container, and exposing an explicitly-declared list of functions.</p>\n\n\n\n<p>There are two module formats that we must consider:</p>\n\n\n\n<ul><li>The traditional Node.js format based on the CommonJS standard has been used since Node.js was created.</li><li>With ES2015/2016 a new format, ES6 Modules, has been defined with a new&nbsp;<code>import</code>&nbsp;keyword. ES6 modules will be (or is) supported in all JavaScript implementations.</li></ul>\n\n\n\n<p>Because ES6 modules are now the standard module format, the Node.js&nbsp;<strong>Technical Steering Committee</strong>&nbsp;(<strong>TSC</strong>) is committed to first-class support for ES6 modules.</p>\n\n\n\n<p>We have already seen modules in action in the previous chapter. Every JavaScript file we use in Node.js is itself a module. It&#8217;s time to see what they are and how&nbsp;they work. We&#8217;ll start with CommonJS modules and then quickly bring in ES6 modules.</p>\n\n\n\n<p>In the&nbsp;<code>ls.js</code>&nbsp;example in&nbsp;<a href=\"\">Chapter 2</a>,&nbsp;<em>Setting up Node.js</em>, we wrote the following code to pull in the&nbsp;<code>fs</code>&nbsp;module, giving us access to its functions:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const fs = require('fs'); </code></pre>\n\n\n\n<p>The&nbsp;<code>require</code>&nbsp;function searches for the named module, loading the module definition into the Node.js runtime, and making its functions available. In this case, the&nbsp;<code>fs</code>&nbsp;object contains the code (and data) exported by the&nbsp;<code>fs</code>&nbsp;module. The&nbsp;<code>fs</code>&nbsp;module is part of the Node.js core and provides filesystem functions.</p>\n\n\n\n<p>By declaring&nbsp;<code>fs</code>&nbsp;as&nbsp;<code>const</code>, we have a little bit of assurance against making coding mistakes that would modify the object holding the module reference.</p>\n\n\n\n<p>In every Node.js module, the&nbsp;<code>exports</code>&nbsp;object within the module is the interface exported to other code. Anything assigned to a field of the&nbsp;<code>exports</code>&nbsp;object is available to other pieces of code, and everything else is hidden. By the way, this object is actually&nbsp;<code>module.exports</code>. The&nbsp;<code>exports</code>&nbsp;object is an alias for&nbsp;<code>module.exports</code>.</p>\n\n\n\n<p>The&nbsp;<code>require</code>&nbsp;function and&nbsp;<code>module.exports</code>&nbsp;objects both come from the CommonJS specification. ES6 modules have similar concepts, but a different implementation.</p>\n\n\n\n<p>Let&#8217;s look at a brief example of this before diving into the details. Ponder over the&nbsp;<code>simple.js</code>&nbsp;module:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let count = 0;\nexports.next = function() { return ++count; };\nexports.hello = function() {\n        \n  return \"Hello, Universe!\";\n};</code></pre>\n\n\n\n<p>We have one variable,&nbsp;<code>count</code>, which is not attached to the&nbsp;<code>exports</code>&nbsp;object, and a function,&nbsp;<code>next</code>, which is attached. Now, let&#8217;s use it:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node\n> const s = require('./simple');\nundefined\n> s.hello();\n'Hello, Universe!'\n> s.next();\n1\n> s.next();\n2\n> s.next();\n3\n> console.log(s.count);\nundefined\nundefined\n> </code></pre>\n\n\n\n<p>The&nbsp;<code>exports</code>&nbsp;object in the module is the object that is returned by&nbsp;<code>require('./simple')</code>. Therefore, each call to&nbsp;<code>s.next</code>&nbsp;calls the&nbsp;<code>next</code>&nbsp;function in&nbsp;<code>simple.js</code>. Each returns (and increments) the value of the local variable,&nbsp;<code>count</code>. An attempt to access the private field,&nbsp;<code>count</code>, shows it&#8217;s unavailable from outside the module.</p>\n\n\n\n<p>To reiterate the rule:</p>\n\n\n\n<ul><li>Anything (functions or objects) assigned as a field of&nbsp;<code>exports</code>&nbsp;(as known as&nbsp;<code>module.exports</code>) is available to other code outside the module</li><li>Objects not assigned to&nbsp;<code>exports</code>&nbsp;are not available to code outside the module, unless the module exports those objects via another mechanism</li></ul>\n\n\n\n<p>This is how Node.js solves the global object problem of browser-based JavaScript. The variables that look like they&#8217;re global variables are only global to the module containing that variable. These variables are not visible to any other code.</p>\n\n\n\n<p>Now that we&#8217;ve got a taste for modules, let&#8217;s take a deeper look.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Defining a module Before writing Node.js applications, you must learn about Node.js modules and packages. Modules are the basic building blocks for constructing Node.js applications. A Node.js&nbsp;module encapsulates functions, hiding details inside a well-protected container, and exposing an explicitly-declared list of functions. There are two module formats that we must consider: The traditional Node.js format [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4141"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4141"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4141/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4141"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4141"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4141"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4142,
    "date": "2020-07-17T05:37:10",
    "date_gmt": "2020-07-17T05:37:10",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=37"
    },
    "modified": "2020-07-17T05:37:10",
    "modified_gmt": "2020-07-17T05:37:10",
    "slug": "node-js-tls-ssl",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-tls-ssl/",
    "title": {
      "rendered": "CommonJS Modules"
    },
    "content": {
      "rendered": "\n<h1>CommonJS/Node.js module format</h1>\n\n\n\n<h2>Introduction to Node.js/CommonJs Module</h2>\n\n\n\n<p>CommonJS modules are stored in files with the extension&nbsp;<code>.js</code>.&nbsp;</p>\n\n\n\n<p>Loading a CommonJS module is a synchronous operation. That means that when the&nbsp;<code>require('modulename')</code>&nbsp;function call returns, the module has been located and completely read into memory and is ready to go. The module is cached in memory so that subsequent&nbsp;<code>require('modulename')</code>&nbsp;calls return immediately, and all return the exact same object.</p>\n\n\n\n<p>Node.js modules provide a simple encapsulation mechanism to hide implementation details while exposing an API. Modules are treated as if they were written as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>(function() { ... contents of module file ... })(); </code></pre>\n\n\n\n<p>Thus, everything within the module is contained within an anonymous private namespace context. This is how the global object problem is resolved; everything&nbsp;in a module that looks global is actually contained within this private context.</p>\n\n\n\n<p>Objects and functions can be exposed from a CommonJS module by means of two free variables Node.js inserts into this private context:&nbsp;<code>module</code>&nbsp;and&nbsp;<code>exports</code>:</p>\n\n\n\n<ul><li>The&nbsp;<code>module</code>&nbsp;object contains several fields that you might find useful. Refer to the online Node.js documentation for details.</li><li>The&nbsp;<code>exports</code>&nbsp;object is an alias of the&nbsp;<code>module.exports</code>&nbsp;field. This means that the following two lines of code are equivalent:</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.funcName = function(arg, arg1) { ... };\nmodule.exports.funcName = function(arg, arg2) { .. }; </code></pre>\n\n\n\n<p>Your code can break the alias between the two if you do this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>exports = function(arg, arg1) { ... };</code></pre>\n\n\n\n<p>Do not do that, because&nbsp;<code>exports</code>&nbsp;will no longer be equivalent to&nbsp;<code>module.exports</code>. If your intent is to assign a single object or function to be what&#8217;s returned by&nbsp;<code>require</code>, do this instead:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">module.exports = function(arg, arg1) { ... };</pre>\n\n\n\n<p>Some modules do export a single function because that&#8217;s how the module author envisioned delivering the desired functionality.The Node.js package format is derived from the CommonJS module system&nbsp;(<a href=\"http://commonjs.org\">http://commonjs.org</a>). When developed, the CommonJS team aimed to fill&nbsp;a gap in the JavaScript ecosystem. At that time, there was no standard module system, making it trickier to package JavaScript applications. The&nbsp;<code>require</code>&nbsp;function, the&nbsp;<code>exports</code>&nbsp;object, and other aspects of Node.js modules come directly from the CommonJS&nbsp;<code>Modules/1.0</code>&nbsp;spec.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>CommonJS/Node.js module format Introduction to Node.js/CommonJs Module CommonJS modules are stored in files with the extension&nbsp;.js.&nbsp; Loading a CommonJS module is a synchronous operation. That means that when the&nbsp;require(&#8216;modulename&#8217;)&nbsp;function call returns, the module has been located and completely read into memory and is ready to go. The module is cached in memory so that subsequent&nbsp;require(&#8216;modulename&#8217;)&nbsp;calls [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4142"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4142"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4142/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4142"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4142"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4142"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4143,
    "date": "2020-07-17T05:38:36",
    "date_gmt": "2020-07-17T05:38:36",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=39"
    },
    "modified": "2020-07-17T05:38:36",
    "modified_gmt": "2020-07-17T05:38:36",
    "slug": "node-js-debugger",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-debugger/",
    "title": {
      "rendered": "ES6 Modules"
    },
    "content": {
      "rendered": "\n<h1>ES6 module format</h1>\n\n\n\n<p>ES6 modules are a new module format&nbsp;designed for all JavaScript environments. While Node.js has had a good module system for its whole existence, browser-side JavaScript has not. That left the browser-side community with either relying on the&nbsp;<kbd>&lt;script&gt;</kbd>&nbsp;tag, or using non-standardized solutions. For that matter, traditional Node.js modules were never standardized, outside of the CommonJS effort. Therefore, ES6 modules stand to be a big improvement for the entire JavaScript world, by getting everyone on the same page with a common module format and mechanisms.</p>\n\n\n\n<p>The side effect is that the Node.js community needs to start looking at, learning about, and adopting the ES2015 module format.</p>\n\n\n\n<p>ES6 modules are referred to by Node.js with the extension&nbsp;<kbd>.mjs</kbd>. When it came to implementing the new module format, the Node.js team determined that they could not support both CommonJS and ES6 modules with the&nbsp;<kbd>.js</kbd>&nbsp;extension. The&nbsp;<kbd>.mjs</kbd>&nbsp;extension was decided as the solution, and you may see tongue-in-cheek references to&nbsp;<em>Michael Jackson Script</em>&nbsp;for this file extension.&nbsp;</p>\n\n\n\n<p>One interesting detail is that&nbsp;ES6 modules load asynchronously. This may not have an impact on Node.js programmers, except that this is part of the rationale behind requiring the new&nbsp;<kbd>.mjs</kbd>&nbsp;extension.</p>\n\n\n\n<p>Create a file named&nbsp;<kbd>simple2.mjs</kbd>&nbsp;in the same directory as the&nbsp;<kbd>simple.js</kbd>&nbsp;example that we looked at earlier:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var count = 0;\nexport function next() {\n          return ++count; }\nfunction squared() {\n          return Math.pow(count, 2); }\nexport function hello() {\n            \n    return \"Hello, Universe!\";\n}\nexport default function() {\n            return count; }\nexport const meaning = 42;\nexport let nocount = -1;\nexport {\n     squared \n};</code></pre>\n\n\n\n<p>ES6 items exported from a module are declared with the&nbsp;<kbd>export</kbd>&nbsp;keyword. This keyword can be put in front of any top-level declaration, such as variable, function, or class declarations:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> export function next() { .. }</code></pre>\n\n\n\n<p>The effect of this is similar to the following:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>module.exports.next = function() { .. }</code></pre>\n\n\n\n<p>The intent of both is essentially the same: to make a function, or other object, available to code outside the module. A statement such as&nbsp;<kbd>export function next()</kbd>&nbsp;is a&nbsp;named export, meaning the exported thing has a name, and that code outside the module uses that name to access the object. As we see here,&nbsp;named&nbsp;<kbd>exports</kbd>&nbsp;can be functions or objects, and they may also be class definitions.</p>\n\n\n\n<p>Using&nbsp;<kbd>export default</kbd>&nbsp;can be done once per module, and is the&nbsp;<kbd>default</kbd>&nbsp;export from the module. The&nbsp;<kbd>default</kbd>&nbsp;export is what code outside the module accesses when using the module object itself, rather than when using one of the exports from the module.</p>\n\n\n\n<p>You can also declare something, such as the&nbsp;<kbd>squared</kbd>&nbsp;function, and then export it later.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ES6 module format ES6 modules are a new module format&nbsp;designed for all JavaScript environments. While Node.js has had a good module system for its whole existence, browser-side JavaScript has not. That left the browser-side community with either relying on the&nbsp;&lt;script&gt;&nbsp;tag, or using non-standardized solutions. For that matter, traditional Node.js modules were never standardized, outside of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4143"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4143"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4143/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4143"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4143"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4143"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4144,
    "date": "2020-07-17T05:40:15",
    "date_gmt": "2020-07-17T05:40:15",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=41"
    },
    "modified": "2020-07-17T05:40:15",
    "modified_gmt": "2020-07-17T05:40:15",
    "slug": "node-js-process",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-process/",
    "title": {
      "rendered": "JSON Modules"
    },
    "content": {
      "rendered": "\n<h1>JSON modules</h1>\n\n\n\n<p>Now let&#8217;s talk a little about JSON Modules in Node.js. Node.js supports using&nbsp;<kbd>require('/path/to/file-name.json')</kbd>&nbsp;to import a JSON file. It is equivalent to this code:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const fs = require('fs');\nmodule.exports = JSON.parse(\n        fs.readFileSync('/path/to/file-name.json', 'utf8'));</code></pre>\n\n\n\n<p>That is, the JSON file is read synchronously, and the text is parsed as JSON. The resultant object is available as the object&nbsp;exported from the module. Create a file named&nbsp;<kbd>info.json</kbd>, containing the following:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n\"name\": \"Harry\", \n    \"age\": 22 \n}</code></pre>\n\n\n\n<p>Now create a file named&nbsp;<kbd>showUserInfo.js</kbd>, containing the following:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const util = require('util');\nconst info = require('./info');\nconsole.log(util.inspect(info));</code></pre>\n\n\n\n<p>It will execute as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node showUserInfo.js \n{ name: 'Harry', age: 22 }</code></pre>\n\n\n\n<p>The&nbsp;<kbd>util.inspect</kbd>&nbsp;function is a useful way to present an object in an easy-to-read fashion.&nbsp;</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>JSON modules Now let&#8217;s talk a little about JSON Modules in Node.js. Node.js supports using&nbsp;require(&#8216;/path/to/file-name.json&#8217;)&nbsp;to import a JSON file. It is equivalent to this code: That is, the JSON file is read synchronously, and the text is parsed as JSON. The resultant object is available as the object&nbsp;exported from the module. Create a file named&nbsp;info.json, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4144"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4144"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4144/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4144"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4144"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4144"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4145,
    "date": "2020-07-17T05:42:19",
    "date_gmt": "2020-07-17T05:42:19",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=43"
    },
    "modified": "2020-07-17T05:42:19",
    "modified_gmt": "2020-07-17T05:42:19",
    "slug": "node-js-child-process",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-child-process/",
    "title": {
      "rendered": "Streams"
    },
    "content": {
      "rendered": "\n<h2>What are Streams?</h2>\n\n\n\n<p>Streams are objects that let you read data from a source or write data to a destination in continuous fashion. In Node.js, there are four types of streams −</p>\n\n\n\n<ul><li><strong>Readable</strong>&nbsp;− Stream which is used for read operation.</li><li><strong>Writable</strong>&nbsp;− Stream which is used for write operation.</li><li><strong>Duplex</strong>&nbsp;− Stream which can be used for both read and write operation.</li><li><strong>Transform</strong>&nbsp;− A type of duplex stream where the output is computed based on input.</li></ul>\n\n\n\n<p>Each type of Stream is an&nbsp;<strong>EventEmitter</strong>&nbsp;instance and throws several events at different instance of times. For example, some of the commonly used events are −</p>\n\n\n\n<ul><li><strong>data</strong>&nbsp;− This event is fired when there is data is available to read.</li><li><strong>end</strong>&nbsp;− This event is fired when there is no more data to read.</li><li><strong>error</strong>&nbsp;− This event is fired when there is any error receiving or writing data.</li><li><strong>finish</strong>&nbsp;− This event is fired when all the data has been flushed to underlying system.</li></ul>\n\n\n\n<p>This tutorial provides a basic understanding of the commonly used operations on Streams.</p>\n\n\n\n<h2>Reading from a Stream</h2>\n\n\n\n<p>Create a text file named input.txt having the following content −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>CodePoint is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\nvar data = '';\n\n// Create a readable stream\nvar readerStream = fs.createReadStream('input.txt');\n\n// Set the encoding to be utf8. \nreaderStream.setEncoding('UTF8');\n\n// Handle stream events --> data, end, and error\nreaderStream.on('data', function(chunk) {\n   data += chunk;\n});\n\nreaderStream.on('end',function() {\n   console.log(data);\n});\n\nreaderStream.on('error', function(err) {\n   console.log(err.stack);\n});\n\nconsole.log(\"Program Ended\");</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Program Ended\nCodePoint is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<h2>Writing to a Stream</h2>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\nvar data = 'Simply Easy Learning';\n\n// Create a writable stream\nvar writerStream = fs.createWriteStream('output.txt');\n\n// Write the data to stream with encoding to be utf8\nwriterStream.write(data,'UTF8');\n\n// Mark the end of file\nwriterStream.end();\n\n// Handle stream events --> finish, and error\nwriterStream.on('finish', function() {\n   console.log(\"Write completed.\");\n});\n\nwriterStream.on('error', function(err) {\n   console.log(err.stack);\n});\n\nconsole.log(\"Program Ended\");</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Program Ended\nWrite completed.</code></pre>\n\n\n\n<p>Now open output.txt created in your current directory; it should contain the following −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Simply Easy Learning</code></pre>\n\n\n\n<h2>Piping the Streams</h2>\n\n\n\n<p>Piping is a mechanism where we provide the output of one stream as the input to another stream. It is normally used to get data from one stream and to pass the output of that stream to another stream. There is no limit on piping operations. Now we&#8217;ll show a piping example for reading from one file and writing it to another file.</p>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\n// Create a readable stream\nvar readerStream = fs.createReadStream('input.txt');\n\n// Create a writable stream\nvar writerStream = fs.createWriteStream('output.txt');\n\n// Pipe the read and write operations\n// read input.txt and write data to output.txt\nreaderStream.pipe(writerStream);\n\nconsole.log(\"Program Ended\");</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Program Ended</code></pre>\n\n\n\n<p>Open output.txt created in your current directory; it should contain the following −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>CodePoint is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<h2>Chaining the Streams</h2>\n\n\n\n<p>Chaining is a mechanism to connect the output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations. Now we&#8217;ll use piping and chaining to first compress a file and then decompress the same.</p>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// Compress the file input.txt to input.txt.gz\nfs.createReadStream('input.txt')\n   .pipe(zlib.createGzip())\n   .pipe(fs.createWriteStream('input.txt.gz'));\n\nconsole.log(\"File Compressed.\");</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>File Compressed.</code></pre>\n\n\n\n<p>You will find that input.txt has been compressed and it created a file input.txt.gz in the current directory. Now let&#8217;s try to decompress the same file using the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// Decompress the file input.txt.gz to input.txt\nfs.createReadStream('input.txt.gz')\n   .pipe(zlib.createGunzip())\n   .pipe(fs.createWriteStream('input.txt'));\n\nconsole.log(\"File Decompressed.\");</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js\n﻿</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>File Decompressed.</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What are Streams? Streams are objects that let you read data from a source or write data to a destination in continuous fashion. In Node.js, there are four types of streams − Readable&nbsp;− Stream which is used for read operation. Writable&nbsp;− Stream which is used for write operation. Duplex&nbsp;− Stream which can be used for [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4145"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4145"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4145/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4145"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4145"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4145"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4146,
    "date": "2020-07-17T05:44:15",
    "date_gmt": "2020-07-17T05:44:15",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=45"
    },
    "modified": "2020-07-17T05:44:15",
    "modified_gmt": "2020-07-17T05:44:15",
    "slug": "node-js-buffers",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-buffers/",
    "title": {
      "rendered": "File System"
    },
    "content": {
      "rendered": "\n<p>Node implements File I/O using simple wrappers around standard POSIX functions. The Node File System (fs) module can be imported using the following syntax −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\")\n</code></pre>\n\n\n\n<h2>Synchronous vs Asynchronous</h2>\n\n\n\n<p>Every method in the fs module has synchronous as well as asynchronous forms. Asynchronous methods take the last parameter as the completion function callback and the first parameter of the callback function as error. It is better to use an asynchronous method instead of a synchronous method, as the former never blocks a program during its execution, whereas the second one does.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a text file named&nbsp;<strong>input.txt</strong>&nbsp;with the following content −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Tutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\n// Asynchronous read\nfs.readFile('input.txt', function (err, data) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"Asynchronous read: \" + data.toString());\n});\n\n// Synchronous read\nvar data = fs.readFileSync('input.txt');\nconsole.log(\"Synchronous read: \" + data.toString());\n\nconsole.log(\"Program Ended\");</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js\n</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Synchronous read: Tutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\n\nProgram Ended\nAsynchronous read: Tutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<p>The following sections in this chapter provide a set of good examples on major File I/O methods.</p>\n\n\n\n<h2>Open a File</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to open a file in asynchronous mode −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.open(path, flags&#91;, mode], callback)\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>path</strong>&nbsp;− This is the string having file name including path.</li><li><strong>flags</strong>&nbsp;− Flags indicate the behavior of the file to be opened. All possible values have been mentioned below.</li><li><strong>mode</strong>&nbsp;− It sets the file mode (permission and sticky bits), but only if the file was created. It defaults to 0666, readable and writeable.</li><li><strong>callback</strong>&nbsp;− This is the callback function which gets two arguments (err, fd).</li></ul>\n\n\n\n<h2>Flags</h2>\n\n\n\n<p>Flags for read/write operations are −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Flag &amp; Description</th></tr><tr><td>1</td><td><strong>r</strong>Open file for reading. An exception occurs if the file does not exist.</td></tr><tr><td>2</td><td><strong>r+</strong>Open file for reading and writing. An exception occurs if the file does not exist.</td></tr><tr><td>3</td><td><strong>rs</strong>Open file for reading in synchronous mode.</td></tr><tr><td>4</td><td><strong>rs+</strong>Open file for reading and writing, asking the OS to open it synchronously. See notes for &#8216;rs&#8217; about using this with caution.</td></tr><tr><td>5</td><td><strong>w</strong>Open file for writing. The file is created (if it does not exist) or truncated (if it exists).</td></tr><tr><td>6</td><td><strong>wx</strong>Like &#8216;w&#8217; but fails if the path exists.</td></tr><tr><td>7</td><td><strong>w+</strong>Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).</td></tr><tr><td>8</td><td><strong>wx+</strong>Like &#8216;w+&#8217; but fails if path exists.</td></tr><tr><td>9</td><td><strong>a</strong>Open file for appending. The file is created if it does not exist.</td></tr><tr><td>10</td><td><strong>ax</strong>Like &#8216;a&#8217; but fails if the path exists.</td></tr><tr><td>11</td><td><strong>a+</strong>Open file for reading and appending. The file is created if it does not exist.</td></tr><tr><td>12</td><td><strong>ax+</strong>Like &#8216;a+&#8217; but fails if the the path exists.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;having the following code to open a file input.txt for reading and writing.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\n// Asynchronous - Opening File\nconsole.log(\"Going to open file!\");\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"File opened successfully!\");     \n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to open file!\nFile opened successfully!</code></pre>\n\n\n\n<h2>Get File Information</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to get the information about a file −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.stat(path, callback)\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>path</strong>&nbsp;− This is the string having file name including path.</li><li><strong>callback</strong>&nbsp;− This is the callback function which gets two arguments (err, stats) where&nbsp;<strong>stats</strong>&nbsp;is an object of fs.Stats type which is printed below in the example.</li></ul>\n\n\n\n<p>Apart from the important attributes which are printed below in the example, there are several useful methods available in&nbsp;<strong>fs.Stats</strong>&nbsp;class which can be used to check file type. These methods are given in the following table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td><strong>stats.isFile()</strong>Returns true if file type of a simple file.</td></tr><tr><td>2</td><td><strong>stats.isDirectory()</strong>Returns true if file type of a directory.</td></tr><tr><td>3</td><td><strong>stats.isBlockDevice()</strong>Returns true if file type of a block device.</td></tr><tr><td>4</td><td><strong>stats.isCharacterDevice()</strong>Returns true if file type of a character device.</td></tr><tr><td>5</td><td><strong>stats.isSymbolicLink()</strong>Returns true if file type of a symbolic link.</td></tr><tr><td>6</td><td><strong>stats.isFIFO()</strong>Returns true if file type of a FIFO.</td></tr><tr><td>7</td><td><strong>stats.isSocket()</strong>Returns true if file type of asocket.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\nconsole.log(\"Going to get file info!\");\nfs.stat('input.txt', function (err, stats) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(stats);\n   console.log(\"Got file info successfully!\");\n   \n   // Check file type\n   console.log(\"isFile ? \" + stats.isFile());\n   console.log(\"isDirectory ? \" + stats.isDirectory());    \n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js\n</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to get file info!\n{ \n   dev: 1792,\n   mode: 33188,\n   nlink: 1,\n   uid: 48,\n   gid: 48,\n   rdev: 0,\n   blksize: 4096,\n   ino: 4318127,\n   size: 97,\n   blocks: 8,\n   atime: Sun Mar 22 2015 13:40:00 GMT-0500 (CDT),\n   mtime: Sun Mar 22 2015 13:40:57 GMT-0500 (CDT),\n   ctime: Sun Mar 22 2015 13:40:57 GMT-0500 (CDT) \n}\nGot file info successfully!\nisFile ? true\nisDirectory ? false</code></pre>\n\n\n\n<h2>Writing a File</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of one of the methods to write into a file −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.writeFile(filename, data&#91;, options], callback)\n</code></pre>\n\n\n\n<p>This method will over-write the file if the file already exists. If you want to write into an existing file then you should use another method available.</p>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>path</strong> − This is the string having the file name including path.</li><li><strong>data</strong> − This is the String or Buffer to be written into the file.</li><li><strong>options</strong> − The third parameter is an object which will hold {encoding, mode, flag}. By default. encoding is utf8, mode is octal value 0666. and flag is &#8216;w&#8217;</li><li><strong>callback</strong> − This is the callback function which gets a single parameter err that returns an error in case of any writing error.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named <strong>main.js</strong> having the following code </p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\nconsole.log(\"Going to write into existing file\");\nfs.writeFile('input.txt', 'Simply Easy Learning!', function(err) {\n   if (err) {\n      return console.error(err);\n   }\n   \n   console.log(\"Data written successfully!\");\n   console.log(\"Let's read newly written data\");\n   \n   fs.readFile('input.txt', function (err, data) {\n      if (err) {\n         return console.error(err);\n      }\n      console.log(\"Asynchronous read: \" + data.toString());\n   });\n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js\n﻿</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to write into existing file\nData written successfully!\nLet's read newly written data\nAsynchronous read: Simply Easy Learning!</code></pre>\n\n\n\n<h2>Reading a File</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of one of the methods to read from a file −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.read(fd, buffer, offset, length, position, callback)\n</code></pre>\n\n\n\n<p>This method will use file descriptor to read the file. If you want to read the file directly using the file name, then you should use another method available.</p>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>fd</strong>&nbsp;− This is the file descriptor returned by fs.open().</li><li><strong>buffer</strong>&nbsp;− This is the buffer that the data will be written to.</li><li><strong>offset</strong>&nbsp;− This is the offset in the buffer to start writing at.</li><li><strong>length</strong>&nbsp;− This is an integer specifying the number of bytes to read.</li><li><strong>position</strong>&nbsp;− This is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.</li><li><strong>callback</strong>&nbsp;− This is the callback function which gets the three arguments, (err, bytesRead, buffer).</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\nvar buf = new Buffer(1024);\n\nconsole.log(\"Going to open an existing file\");\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"File opened successfully!\");\n   console.log(\"Going to read the file\");\n   \n   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n      if (err){\n         console.log(err);\n      }\n      console.log(bytes + \" bytes read\");\n      \n      // Print only read bytes to avoid junk.\n      if(bytes > 0){\n         console.log(buf.slice(0, bytes).toString());\n      }\n   });\n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to open an existing file\nFile opened successfully!\nGoing to read the file\n97 bytes read\nTutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!</code></pre>\n\n\n\n<h2>Closing a File</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax to close an opened file −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.close(fd, callback)\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>fd</strong>&nbsp;− This is the file descriptor returned by file fs.open() method.</li><li><strong>callback</strong>&nbsp;− This is the callback function No arguments other than a possible exception are given to the completion callback.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;having the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\nvar buf = new Buffer(1024);\n\nconsole.log(\"Going to open an existing file\");\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"File opened successfully!\");\n   console.log(\"Going to read the file\");\n   \n   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes) {\n      if (err) {\n         console.log(err);\n      }\n\n      // Print only read bytes to avoid junk.\n      if(bytes > 0) {\n         console.log(buf.slice(0, bytes).toString());\n      }\n\n      // Close the opened file.\n      fs.close(fd, function(err) {\n         if (err) {\n            console.log(err);\n         } \n         console.log(\"File closed successfully.\");\n      });\n   });\n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to open an existing file\nFile opened successfully!\nGoing to read the file\nTutorials Point is giving self learning content\nto teach the world in simple and easy way!!!!!\n\nFile closed successfully.</code></pre>\n\n\n\n<h2>Truncate a File</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to truncate an opened file −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.ftruncate(fd, len, callback)\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>fd</strong>&nbsp;− This is the file descriptor returned by fs.open().</li><li><strong>len</strong>&nbsp;− This is the length of the file after which the file will be truncated.</li><li><strong>callback</strong>&nbsp;− This is the callback function No arguments other than a possible exception are given to the completion callback.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;having the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\nvar buf = new Buffer(1024);\n\nconsole.log(\"Going to open an existing file\");\nfs.open('input.txt', 'r+', function(err, fd) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"File opened successfully!\");\n   console.log(\"Going to truncate the file after 10 bytes\");\n   \n   // Truncate the opened file.\n   fs.ftruncate(fd, 10, function(err) {\n      if (err) {\n         console.log(err);\n      } \n      console.log(\"File truncated successfully.\");\n      console.log(\"Going to read the same file\"); \n      \n      fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n         if (err) {\n            console.log(err);\n         }\n\n         // Print only read bytes to avoid junk.\n         if(bytes > 0) {\n            console.log(buf.slice(0, bytes).toString());\n         }\n\n         // Close the opened file.\n         fs.close(fd, function(err) {\n            if (err) {\n               console.log(err);\n            } \n            console.log(\"File closed successfully.\");\n         });\n      });\n   });\n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to open an existing file\nFile opened successfully!\nGoing to truncate the file after 10 bytes\nFile truncated successfully.\nGoing to read the same file\nTutorials \nFile closed successfully.</code></pre>\n\n\n\n<h2>Delete a File</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to delete a file −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.unlink(path, callback)</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>path</strong>&nbsp;− This is the file name including path.</li><li><strong>callback</strong>&nbsp;− This is the callback function No arguments other than a possible exception are given to the completion callback.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;having the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\nconsole.log(\"Going to delete an existing file\");\nfs.unlink('input.txt', function(err) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"File deleted successfully!\");\n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to delete an existing file\nFile deleted successfully!</code></pre>\n\n\n\n<h2>Create a Directory</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to create a directory −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.mkdir(path&#91;, mode], callback)</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>path</strong>&nbsp;− This is the directory name including path.</li><li><strong>mode</strong>&nbsp;− This is the directory permission to be set. Defaults to 0777.</li><li><strong>callback</strong>&nbsp;− This is the callback function No arguments other than a possible exception are given to the completion callback.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;having the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\nconsole.log(\"Going to create directory /tmp/test\");\nfs.mkdir('/tmp/test',function(err) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"Directory created successfully!\");\n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to create directory /tmp/test\nDirectory created successfully!</code></pre>\n\n\n\n<h2>Read a Directory</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to read a directory −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.readdir(path, callback)</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>path</strong>&nbsp;− This is the directory name including path.</li><li><strong>callback</strong>&nbsp;− This is the callback function which gets two arguments (err, files) where files is an array of the names of the files in the directory excluding &#8216;.&#8217; and &#8216;..&#8217;.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;having the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\nconsole.log(\"Going to read directory /tmp\");\nfs.readdir(\"/tmp/\",function(err, files) \n   if (err) {\n      return console.error(err);\n   }\n   files.forEach( function (file) {\n      console.log( file );\n   });\n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to read directory /tmp\nccmzx99o.out\nccyCSbkF.out\nemployee.ser\nhsperfdata_apache\ntest\ntest.txt</code></pre>\n\n\n\n<h2>Remove a Directory</h2>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Following is the syntax of the method to remove a directory −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fs.rmdir(path, callback)</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>path</strong>&nbsp;− This is the directory name including path.</li><li><strong>callback</strong>&nbsp;− This is the callback function No arguments other than a possible exception are given to the completion callback.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a js file named&nbsp;<strong>main.js</strong>&nbsp;having the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var fs = require(\"fs\");\n\nconsole.log(\"Going to delete directory /tmp/test\");\nfs.rmdir(\"/tmp/test\",function(err) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"Going to read directory /tmp\");\n   \n   fs.readdir(\"/tmp/\",function(err, files) {\n      if (err) {\n         return console.error(err);\n      }\n      files.forEach( function (file) {\n         console.log( file );\n      });\n   });\n});</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the Output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to read directory /tmp\nccmzx99o.out\nccyCSbkF.out\nemployee.ser\nhsperfdata_apache\ntest.txt\n﻿</code></pre>\n\n\n\n<h2>Methods Reference</h2>\n\n\n\n<p>Following is a reference of File System module available in Node.js. For more detail you can refer to the official documentation.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Node implements File I/O using simple wrappers around standard POSIX functions. The Node File System (fs) module can be imported using the following syntax − Synchronous vs Asynchronous Every method in the fs module has synchronous as well as asynchronous forms. Asynchronous methods take the last parameter as the completion function callback and the first [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4146"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4146"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4146/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4146"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4146"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4146"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4147,
    "date": "2020-07-17T05:48:30",
    "date_gmt": "2020-07-17T05:48:30",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=48"
    },
    "modified": "2020-07-17T05:48:30",
    "modified_gmt": "2020-07-17T05:48:30",
    "slug": "node-js-streams",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-streams/",
    "title": {
      "rendered": "Global Objects"
    },
    "content": {
      "rendered": "\n<h1>Node.js &#8211; Global Objects</h1>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Node.js global objects are global in nature and they are available in all modules. We do not need to include these objects in our application, rather we can use them directly. These objects are modules, functions, strings and object itself as explained below.</p>\n\n\n\n<h2>__filename</h2>\n\n\n\n<p>The&nbsp;<strong>__filename</strong>&nbsp;represents the filename of the code being executed. This is the resolved absolute path of this code file. For a main program, this is not necessarily the same filename used in the command line. The value inside a module is the path to that module file.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>// Let's try to print the value of __filename\n\nconsole.log( __filename );</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js\n</code></pre>\n\n\n\n<p>Based on the location of your program, it will print the main file name as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>/web/com/1427091028_21099/main.js\n</code></pre>\n\n\n\n<h2>__dirname</h2>\n\n\n\n<p>The&nbsp;<strong>__dirname</strong>&nbsp;represents the name of the directory that the currently executing script resides in.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>// Let's try to print the value of __dirname\n\nconsole.log( __dirname );</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Based on the location of your program, it will print current directory name as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>/web/com/1427091028_21099</code></pre>\n\n\n\n<h2>setTimeout(cb, ms)</h2>\n\n\n\n<p>The&nbsp;<strong>setTimeout(cb, ms)</strong>&nbsp;global function is used to run callback cb after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.</p>\n\n\n\n<p>This function returns an opaque value that represents the timer which can be used to clear the timer.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>function printHello() {\n   console.log( \"Hello, World!\");\n}\n\n// Now call above function after 2 seconds\nsetTimeout(printHello, 2000);</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the output is printed after a little delay.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello, World!</code></pre>\n\n\n\n<h2>clearTimeout(t)</h2>\n\n\n\n<p>The&nbsp;<strong>clearTimeout(t)</strong>&nbsp;global function is used to stop a timer that was previously created with setTimeout(). Here&nbsp;<strong>t</strong>&nbsp;is the timer returned by the setTimeout() function.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>function printHello() {\n   console.log( \"Hello, World!\");\n}\n\n// Now call above function after 2 seconds\nvar t = setTimeout(printHello, 2000);\n\n// Now clear the timer\nclearTimeout(t);</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>Verify the output where you will not find anything printed.</p>\n\n\n\n<h2>setInterval(cb, ms)</h2>\n\n\n\n<p>The&nbsp;<strong>setInterval(cb, ms)</strong>&nbsp;global function is used to run callback cb repeatedly after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.</p>\n\n\n\n<p>This function returns an opaque value that represents the timer which can be used to clear the timer using the function&nbsp;<strong>clearInterval(t)</strong>.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a js file named main.js with the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>function printHello() {\n   console.log( \"Hello, World!\");\n}\n\n// Now call above function after 2 seconds\nsetInterval(printHello, 2000);</code></pre>\n\n\n\n<p>Now run the main.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node main.js</code></pre>\n\n\n\n<p>The above program will execute printHello() after every 2 second. Due to system limitation.</p>\n\n\n\n<h2>Global Objects</h2>\n\n\n\n<p>The following table provides a list of other objects which we use frequently in our applications. For a more detail, you can refer to the official documentation.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Module Name &amp; Description</th></tr><tr><td>1</td><td><strong>Console</strong>: Used to print information on stdout and stderr.</td></tr><tr><td>2</td><td><strong>Process</strong>: Used to get information on current process. Provides multiple events related to process activities.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Node.js &#8211; Global Objects Node.js global objects are global in nature and they are available in all modules. We do not need to include these objects in our application, rather we can use them directly. These objects are modules, functions, strings and object itself as explained below. __filename The&nbsp;__filename&nbsp;represents the filename of the code being [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4147"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4147"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4147/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4147"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4147"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4147"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4148,
    "date": "2020-07-17T05:51:06",
    "date_gmt": "2020-07-17T05:51:06",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=52"
    },
    "modified": "2020-07-17T05:51:06",
    "modified_gmt": "2020-07-17T05:51:06",
    "slug": "node-js-file-system-fs",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-file-system-fs/",
    "title": {
      "rendered": "Utility Modules"
    },
    "content": {
      "rendered": "\n<h1>Node.js &#8211; Utility Modules</h1>\n\n\n\n<p>There are several utility modules available in Node.js module library. These modules are very common and are frequently used while developing any Node based application.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Module Name &amp; Description</th></tr><tr><td>1</td><td><strong>OS Module</strong> Provides basic operating-system related utility functions.</td></tr><tr><td>2</td><td><strong>Path Module</strong> Provides utilities for handling and transforming file paths.</td></tr><tr><td>3</td><td><strong>Net Module</strong> Provides both servers and clients as streams. Acts as a network wrapper.</td></tr><tr><td>4</td><td><strong>DNS Module</strong> Provides functions to do actual DNS lookup as well as to use underlying operating system name resolution functionalities.</td></tr><tr><td>5</td><td><strong>Domain Module</strong> Provides ways to handle multiple different I/O operations as a single group.</td></tr></tbody></table></figure>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Node.js &#8211; Utility Modules There are several utility modules available in Node.js module library. These modules are very common and are frequently used while developing any Node based application. Sr.No. Module Name &amp; Description 1 OS Module Provides basic operating-system related utility functions. 2 Path Module Provides utilities for handling and transforming file paths. 3 [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4148"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4148"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4148/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4148"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4148"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4148"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4149,
    "date": "2020-07-17T05:51:49",
    "date_gmt": "2020-07-17T05:51:49",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=54"
    },
    "modified": "2020-07-17T05:51:49",
    "modified_gmt": "2020-07-17T05:51:49",
    "slug": "node-js-path",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-path/",
    "title": {
      "rendered": "Restful API"
    },
    "content": {
      "rendered": "\n<h1>Node.js &#8211; RESTful API</h1>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>What is REST architecture?</h2>\n\n\n\n<p>REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It revolves around resource where every component is a resource and a resource is accessed by a common interface using HTTP standard methods. REST was first introduced by Roy Fielding in 2000.</p>\n\n\n\n<p>A REST Server simply provides access to resources and REST client accesses and modifies the resources using HTTP protocol. Here each resource is identified by URIs/ global IDs. REST uses various representation to represent a resource like text, JSON, XML but JSON is the most popular one.</p>\n\n\n\n<h2>HTTP methods</h2>\n\n\n\n<p>Following four HTTP methods are commonly used in REST based architecture.</p>\n\n\n\n<ul><li><strong>GET</strong>&nbsp;− This is used to provide a read only access to a resource.</li><li><strong>PUT</strong>&nbsp;− This is used to create a new resource.</li><li><strong>DELETE</strong>&nbsp;− This is used to remove a resource.</li><li><strong>POST</strong>&nbsp;− This is used to update a existing resource or create a new resource.</li></ul>\n\n\n\n<h2>RESTful Web Services</h2>\n\n\n\n<p>A web service is a collection of open protocols and standards used for exchanging data between applications or systems. Software applications written in various programming languages and running on various platforms can use web services to exchange data over computer networks like the Internet in a manner similar to inter-process communication on a single computer. This interoperability (e.g., communication between Java and Python, or Windows and Linux applications) is due to the use of open standards.</p>\n\n\n\n<p>Web services based on REST Architecture are known as RESTful web services. These webservices uses HTTP methods to implement the concept of REST architecture. A RESTful web service usually defines a URI, Uniform Resource Identifier a service, which provides resource representation such as JSON and set of HTTP Methods.</p>\n\n\n\n<h2>Creating RESTful for A Library</h2>\n\n\n\n<p>Consider we have a JSON based database of users having the following users in a file&nbsp;<strong>users.json</strong>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{{\"{\"}}\n   \"user1\" : {{\"{\"}}\n      \"name\" : \"mahesh\",\n      \"password\" : \"password1\",\n      \"profession\" : \"teacher\",\n      \"id\": 1\n   },\n\n   \"user2\" : {{\"{\"}}\n      \"name\" : \"suresh\",\n      \"password\" : \"password2\",\n      \"profession\" : \"librarian\",\n      \"id\": 2\n   },\n\n   \"user3\" : {{\"{\"}}\n      \"name\" : \"ramesh\",\n      \"password\" : \"password3\",\n      \"profession\" : \"clerk\",\n      \"id\": 3\n   }\n}</code></pre>\n\n\n\n<p>Based on this information we are going to provide following RESTful APIs.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>URI</th><th>HTTP Method</th><th>POST body</th><th>Result</th></tr><tr><td>1</td><td>listUsers</td><td>GET</td><td>empty</td><td>Show list of all the users.</td></tr><tr><td>2</td><td>addUser</td><td>POST</td><td>JSON String</td><td>Add details of new user.</td></tr><tr><td>3</td><td>deleteUser</td><td>DELETE</td><td>JSON String</td><td>Delete an existing user.</td></tr><tr><td>4</td><td>:id</td><td>GET</td><td>empty</td><td>Show details of a user.</td></tr></tbody></table></figure>\n\n\n\n<p>I&#8217;m keeping most of the part of all the examples in the form of hard coding assuming you already know how to pass values from front end using Ajax or simple form data and how to process them using express&nbsp;<strong>Request</strong>&nbsp;object.</p>\n\n\n\n<h2>List Users</h2>\n\n\n\n<p>Let&#8217;s implement our first RESTful API&nbsp;<strong>listUsers</strong>&nbsp;using the following code in a server.js file −</p>\n\n\n\n<p><em>server.js</em></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\nvar fs = require(\"fs\");\n\napp.get('/listUsers', function (req, res) {\n   fs.readFile( __dirname + \"/\" + \"users.json\", 'utf8', function (err, data) {\n      console.log( data );\n      res.end( data );\n   });\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})</code></pre>\n\n\n\n<p>Now try to access defined API using&nbsp;<em>URL: http://127.0.0.1:8081/listUsers</em>&nbsp;and&nbsp;<em>HTTP Method : GET</em>&nbsp;on local machine using any REST client. This should produce following result −</p>\n\n\n\n<p>You can change given IP address when you will put the solution in production environment.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"user1\" : {\n      \"name\" : \"mahesh\",\n      \"password\" : \"password1\",\n      \"profession\" : \"teacher\",\n      \"id\": 1\n   },\n\n   \"user2\" : {\n      \"name\" : \"suresh\",\n      \"password\" : \"password2\",\n      \"profession\" : \"librarian\",\n      \"id\": 2\n   },\n\n   \"user3\" : {\n      \"name\" : \"ramesh\",\n      \"password\" : \"password3\",\n      \"profession\" : \"clerk\",\n      \"id\": 3\n   }\n}</code></pre>\n\n\n\n<h2>Add User</h2>\n\n\n\n<p>Following API will show you how to add new user in the list. Following is the detail of the new user −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>user = {\n   \"user4\" : {\n      \"name\" : \"mohit\",\n      \"password\" : \"password4\",\n      \"profession\" : \"teacher\",\n      \"id\": 4\n   }\n}</code></pre>\n\n\n\n<p>You can accept the same input in the form of JSON using Ajax call but for teaching point of view, we are making it hard coded here. Following is the&nbsp;<strong>addUser</strong>&nbsp;API to a new user in the database −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>server.js</code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\nvar fs = require(\"fs\");\n\nvar user = {\n   \"user4\" : {\n      \"name\" : \"mohit\",\n      \"password\" : \"password4\",\n      \"profession\" : \"teacher\",\n      \"id\": 4\n   }\n}\n\napp.post('/addUser', function (req, res) {\n   // First read existing users.\n   fs.readFile( __dirname + \"/\" + \"users.json\", 'utf8', function (err, data) {\n      data = JSON.parse( data );\n      data&#91;\"user4\"] = user&#91;\"user4\"];\n      console.log( data );\n      res.end( JSON.stringify(data));\n   });\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})</code></pre>\n\n\n\n<p>Now try to access defined API using&nbsp;<em>URL: http://127.0.0.1:8081/addUser</em>&nbsp;and&nbsp;<em>HTTP Method : POST</em>&nbsp;on local machine using any REST client. This should produce following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"user1\":{\"name\":\"mahesh\",\"password\":\"password1\",\"profession\":\"teacher\",\"id\":1},\n   \"user2\":{\"name\":\"suresh\",\"password\":\"password2\",\"profession\":\"librarian\",\"id\":2},\n   \"user3\":{\"name\":\"ramesh\",\"password\":\"password3\",\"profession\":\"clerk\",\"id\":3},\n   \"user4\":{\"name\":\"mohit\",\"password\":\"password4\",\"profession\":\"teacher\",\"id\":4}\n}</code></pre>\n\n\n\n<h2>Show Detail</h2>\n\n\n\n<p>Now we will implement an API which will be called using user ID and it will display the detail of the corresponding user.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>server.js</code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\nvar fs = require(\"fs\");\n\napp.get('/:id', function (req, res) {\n   // First read existing users.\n   fs.readFile( __dirname + \"/\" + \"users.json\", 'utf8', function (err, data) {\n      var users = JSON.parse( data );\n      var user = users&#91;\"user\" + req.params.id]\n      console.log( user );\n      res.end( JSON.stringify(user));\n   });\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})</code></pre>\n\n\n\n<p>Now try to access defined API using&nbsp;<em>URL: http://127.0.0.1:8081/2</em>&nbsp;and&nbsp;<em>HTTP Method : GET</em>&nbsp;on local machine using any REST client. This should produce following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"name\":\"suresh\",\"password\":\"password2\",\"profession\":\"librarian\",\"id\":2}</code></pre>\n\n\n\n<h2>Delete User</h2>\n\n\n\n<p>This API is very similar to addUser API where we receive input data through req.body and then based on user ID we delete that user from the database. To keep our program simple we assume we are going to delete user with ID 2.</p>\n\n\n\n<p><strong>server.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\nvar fs = require(\"fs\");\n\nvar id = 2;\n\napp.delete('/deleteUser', function (req, res) {\n   // First read existing users.\n   fs.readFile( __dirname + \"/\" + \"users.json\", 'utf8', function (err, data) {\n      data = JSON.parse( data );\n      delete data&#91;\"user\" + 2];\n\n      console.log( data );\n      res.end( JSON.stringify(data));\n   });\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})</code></pre>\n\n\n\n<p>Now try to access defined API using&nbsp;<em>URL: http://127.0.0.1:8081/deleteUser</em>&nbsp;and&nbsp;<em>HTTP Method : DELETE</em>&nbsp;on local machine using any REST client. This should produce following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"user1\":{\"name\":\"mahesh\",\"password\":\"password1\",\"profession\":\"teacher\",\"id\":1},\n\"user3\":{\"name\":\"ramesh\",\"password\":\"password3\",\"profession\":\"clerk\",\"id\":3}}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Node.js &#8211; RESTful API What is REST architecture? REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It revolves around resource where every component is a resource and a resource is accessed by a common interface using HTTP standard methods. REST was first introduced by Roy Fielding in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4149"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4149"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4149/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4149"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4149"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4149"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4150,
    "date": "2020-07-17T05:52:28",
    "date_gmt": "2020-07-17T05:52:28",
    "guid": {
      "rendered": "http://nodejs.foobrdigital.com/?p=56"
    },
    "modified": "2020-07-17T05:52:28",
    "modified_gmt": "2020-07-17T05:52:28",
    "slug": "node-js-stringdecoder",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/node-js-stringdecoder/",
    "title": {
      "rendered": "Scaling Application"
    },
    "content": {
      "rendered": "\n<h1>Node.js &#8211; Scaling Application</h1>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Node.js runs in a single-thread mode, but it uses an event-driven paradigm to handle concurrency. It also facilitates creation of child processes to leverage parallel processing on multi-core CPU based systems.</p>\n\n\n\n<p>Child processes always have three streams&nbsp;<strong>child.stdin</strong>,&nbsp;<strong>child.stdout</strong>, and&nbsp;<strong>child.stderr</strong>&nbsp;which may be shared with the stdio streams of the parent process.</p>\n\n\n\n<p>Node provides&nbsp;<strong>child_process</strong>&nbsp;module which has the following three major ways to create a child process.</p>\n\n\n\n<ul><li><strong>exec</strong>&nbsp;− child_process.exec method runs a command in a shell/console and buffers the output.</li><li><strong>spawn</strong>&nbsp;− child_process.spawn launches a new process with a given command.</li><li><strong>fork</strong>&nbsp;− The child_process.fork method is a special case of the spawn() to create child processes.</li></ul>\n\n\n\n<h2>The exec() method</h2>\n\n\n\n<p>child_process.exec method runs a command in a shell and buffers the output. It has the following signature −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>child_process.exec(command&#91;, options], callback)\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>command</strong>&nbsp;(String) The command to run, with space-separated arguments</li><li><strong>options</strong>&nbsp;(Object) may comprise one or more of the following options −<ul><li><strong>cwd</strong>&nbsp;(String) Current working directory of the child process</li><li><strong>env</strong>&nbsp;(Object) Environment key-value pairs</li><li><strong>encoding</strong>&nbsp;(String) (Default: &#8216;utf8&#8217;)</li><li><strong>shell</strong>&nbsp;(String) Shell to execute the command with (Default: &#8216;/bin/sh&#8217; on UNIX, &#8216;cmd.exe&#8217; on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</li><li><strong>timeout</strong>&nbsp;(Number) (Default: 0)</li><li><strong>maxBuffer</strong>&nbsp;(Number) (Default: 200*1024)</li><li><strong>killSignal</strong>&nbsp;(String) (Default: &#8216;SIGTERM&#8217;)</li><li><strong>uid</strong>&nbsp;(Number) Sets the user identity of the process.</li><li><strong>gid</strong>&nbsp;(Number) Sets the group identity of the process.</li></ul></li><li><strong>callback</strong>&nbsp;The function gets three arguments&nbsp;<strong>error</strong>,&nbsp;<strong>stdout,</strong>&nbsp;and&nbsp;<strong>stderr</strong>&nbsp;which are called with the output when the process terminates.</li></ul>\n\n\n\n<p>The exec() method returns a buffer with a max size and waits for the process to end and tries to return all the buffered data at once.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let us create two js files named support.js and master.js −</p>\n\n\n\n<p><strong>File: support.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log(\"Child Process \" + process.argv&#91;2] + \" executed.\" );\n</code></pre>\n\n\n\n<p><strong>File: master.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const fs = require('fs');\nconst child_process = require('child_process');\n\nfor(var i=0; i&lt;3; i++) {\n   var workerProcess = child_process.exec('node support.js '+i,function\n      (error, stdout, stderr) {\n\n      if (error) {\n         console.log(error.stack);\n         console.log('Error code: '+error.code);\n         console.log('Signal received: '+error.signal);\n      }\n      console.log('stdout: ' + stdout);\n      console.log('stderr: ' + stderr);\n   });\n\n   workerProcess.on('exit', function (code) {\n      console.log('Child process exited with exit code '+code);\n   });\n}</code></pre>\n\n\n\n<p>Now run the master.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node master.js</code></pre>\n\n\n\n<p>Verify the Output. Server has started.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Child process exited with exit code 0\nstdout: Child Process 1 executed.\n\nstderr:\nChild process exited with exit code 0\nstdout: Child Process 0 executed.\n\nstderr:\nChild process exited with exit code 0\nstdout: Child Process 2 executed.</code></pre>\n\n\n\n<h2>The spawn() Method</h2>\n\n\n\n<p>child_process.spawn method launches a new process with a given command. It has the following signature −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>child_process.spawn(command&#91;, args]&#91;, options])\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>command</strong>&nbsp;(String) The command to run</li><li><strong>args</strong>&nbsp;(Array) List of string arguments</li><li><strong>options</strong>&nbsp;(Object) may comprise one or more of the following options −<ul><li><strong>cwd</strong>&nbsp;(String) Current working directory of the child process.</li><li><strong>env</strong>&nbsp;(Object) Environment key-value pairs.</li><li><strong>stdio</strong>&nbsp;(Array) String Child&#8217;s stdio configuration.</li><li><strong>customFds</strong>&nbsp;(Array) Deprecated File descriptors for the child to use for stdio.</li><li><strong>detached</strong>&nbsp;(Boolean) The child will be a process group leader.</li><li><strong>uid</strong>&nbsp;(Number) Sets the user identity of the process.</li><li><strong>gid</strong>&nbsp;(Number) Sets the group identity of the process.</li></ul></li></ul>\n\n\n\n<p>The spawn() method returns streams (stdout &amp;stderr) and it should be used when the process returns a volume amount of data. spawn() starts receiving the response as soon as the process starts executing.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Create two js files named support.js and master.js −</p>\n\n\n\n<p><strong>File: support.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log(\"Child Process \" + process.argv&#91;2] + \" executed.\" );\n</code></pre>\n\n\n\n<p><strong>File: master.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const fs = require('fs');\nconst child_process = require('child_process');\n\nfor(var i = 0; i&lt;3; i++) {\n   var workerProcess = child_process.spawn('node', &#91;'support.js', i]);\n\n   workerProcess.stdout.on('data', function (data) {\n      console.log('stdout: ' + data);\n   });\n\n   workerProcess.stderr.on('data', function (data) {\n      console.log('stderr: ' + data);\n   });\n\n   workerProcess.on('close', function (code) {\n      console.log('child process exited with code ' + code);\n   });\n}</code></pre>\n\n\n\n<p>Now run the master.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node master.js</code></pre>\n\n\n\n<p>Verify the Output. Server has started</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>stdout: Child Process 0 executed.\n\nchild process exited with code 0\nstdout: Child Process 1 executed.\n\nstdout: Child Process 2 executed.\n\nchild process exited with code 0\nchild process exited with code 0</code></pre>\n\n\n\n<h2>The fork() Method</h2>\n\n\n\n<p>child_process.fork method is a special case of spawn() to create Node processes. It has the following signature −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>child_process.fork(modulePath&#91;, args]&#91;, options])\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Here is the description of the parameters used −</p>\n\n\n\n<ul><li><strong>modulePath</strong>&nbsp;(String) The module to run in the child.</li><li><strong>args</strong>&nbsp;(Array) List of string arguments</li><li><strong>options</strong>&nbsp;(Object) may comprise one or more of the following options −<ul><li><strong>cwd</strong>&nbsp;(String) Current working directory of the child process.</li><li><strong>env</strong>&nbsp;(Object) Environment key-value pairs.</li><li><strong>execPath</strong>&nbsp;(String) Executable used to create the child process.</li><li><strong>execArgv</strong>&nbsp;(Array) List of string arguments passed to the executable (Default: process.execArgv).</li><li><strong>silent</strong>&nbsp;(Boolean) If true, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the &#8220;pipe&#8221; and &#8220;inherit&#8221; options for spawn()&#8217;s stdio for more details (default is false).</li><li><strong>uid</strong>&nbsp;(Number) Sets the user identity of the process.</li><li><strong>gid</strong>&nbsp;(Number) Sets the group identity of the process.</li></ul></li></ul>\n\n\n\n<p>The fork method returns an object with a built-in communication channel in addition to having all the methods in a normal ChildProcess instance.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Create two js files named support.js and master.js −</p>\n\n\n\n<p><strong>File: support.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log(\"Child Process \" + process.argv&#91;2] + \" executed.\" );\n</code></pre>\n\n\n\n<p><strong>File: master.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const fs = require('fs');\nconst child_process = require('child_process');\n\nfor(var i=0; i&lt;3; i++) {\n   var worker_process = child_process.fork(\"support.js\", &#91;i]);\n\n   worker_process.on('close', function (code) {\n      console.log('child process exited with code ' + code);\n   });\n}</code></pre>\n\n\n\n<p>Now run the master.js to see the result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node master.js</code></pre>\n\n\n\n<p>Verify the Output. Server has started.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Child Process 0 executed.\nChild Process 1 executed.\nChild Process 2 executed.\nchild process exited with code 0\nchild process exited with code 0\nchild process exited with code 0</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Node.js &#8211; Scaling Application Node.js runs in a single-thread mode, but it uses an event-driven paradigm to handle concurrency. It also facilitates creation of child processes to leverage parallel processing on multi-core CPU based systems. Child processes always have three streams&nbsp;child.stdin,&nbsp;child.stdout, and&nbsp;child.stderr&nbsp;which may be shared with the stdio streams of the parent process. Node provides&nbsp;child_process&nbsp;module [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      62
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4150"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4150"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4150/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4150"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4150"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4150"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]