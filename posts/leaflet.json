[{"id":4130,"date":"2021-02-16T07:21:36","date_gmt":"2021-02-16T07:21:36","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4130"},"modified":"2021-02-16T07:21:36","modified_gmt":"2021-02-16T07:21:36","slug":"getting-started","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/getting-started/","title":{"rendered":"Getting Started"},"content":{"rendered":"\n<h2>What is Leaflet.js</h2>\n\n\n\n<p>Leaflet.js is an open-source library using which we can deploy simple, interactive, lightweight web maps.</p>\n\n\n\n<ul><li>Leaflet JavaScript library allows you to use layers such as Tile layers, WMS, Markers, Popups, Vector layers (polylines, polygons, circles, etc.), Image overlays and GeoJSON.</li><li>You can interact with the Leaflet maps by dragging the map, zooming (by double click or, wheel scroll), using keyboard, using event handling, and by dragging the markers.</li><li>Leaflet supports browsers such as Chrome, Firefox, Safari 5+, Opera 12+, IE 7–11 on desktop and, browsers like Safari, Android, Chrome, Firefox for mobiles.</li></ul>\n\n\n\n<h2>Steps to Load the Map on a Webpage</h2>\n\n\n\n<p>Follow the steps given below to load a map on your webpage −</p>\n\n\n\n<h3>Step 1: Create an HTML Page</h3>\n\n\n\n<p>Create a basic HTML page with&nbsp;<strong>head</strong>&nbsp;and&nbsp;<strong>body</strong>&nbsp;tags as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      ...........\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<h3>Step 2 : Load the Leaflet CSS Script</h3>\n\n\n\n<p>Include the Leaflet CSS script in the example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\r\n   &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\" />\r\n&lt;/head></code></pre>\n\n\n\n<h3>Step 3: Load the Leaflet Script</h3>\n\n\n\n<p>Load or include the Leaflet API using the script tag −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\r\n   &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n&lt;/head>\r\n</code></pre>\n\n\n\n<h3>Step 4: Create the Container</h3>\n\n\n\n<p>To hold the map, we have to create a container element. Generally, the &lt;div&gt; tag (a generic container) is used for this purpose.</p>\n\n\n\n<p>Create a container element and define its dimensions −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;div id = \"sample\" style = \"width:900px; height:580px;\"&gt;&lt;/div&gt;\n</pre>\n\n\n\n<h3>Step 5: Map Options</h3>\n\n\n\n<p>Leaflet provides several options such as types Control options, Interaction Options, Map State Options, Animation Options, etc. By setting values to these, we can customize the map as desired.</p>\n\n\n\n<p>Create a&nbsp;<strong>mapOptions</strong>&nbsp;object (it is created just like a literal) and set values for the options center and zoom, where</p>\n\n\n\n<ul><li><strong>center</strong>&nbsp;− As a value to this option, you need to pass a&nbsp;<strong>LatLng</strong>&nbsp;object specifying the location where we want to center the map. (Just specify the latitude and longitude values within&nbsp;<strong>[]</strong>&nbsp;braces)</li><li><strong>zoom</strong>&nbsp;− As a value to this option, you need to pass an integer representing the zoom level of the map, as shown below.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">var mapOptions = {\n   center: [17.385044, 78.486671],\n   zoom: 10\n}\n</pre>\n\n\n\n<h3>Step 6: Create a Map Object</h3>\n\n\n\n<p>Using the&nbsp;<strong>Map</strong>&nbsp;class of leaflet API, you can create a map on a page. You can create a map object by instantiating the called&nbsp;<strong>Map</strong>&nbsp;of the Leaflet API. While instantiating this class, you need to pass two parameters −</p>\n\n\n\n<ul><li>As a parameter to this option, you need to pass a String variable representing the DOM id or an instance of the &lt;div&gt; element. Here, the &lt;div&gt;element is an HTML container to hold the map.</li><li>An optional object literal with map options.</li></ul>\n\n\n\n<p>Create a Map object by passing the id of the &lt;div&gt; element and mapOptions object created in the previous step.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">var map = new L.map('map', mapOptions);\n</pre>\n\n\n\n<h3>Step 7: Creating the Layer Object</h3>\n\n\n\n<p>You can load and display various types of maps (tile layers) by instantiating the&nbsp;<strong>TileLayer</strong>&nbsp;class. While instantiating it you need to pass an URL template requesting the desired tile layer(map) from the service provider, in the form of a String variable.</p>\n\n\n\n<p>Create the tile layer object as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\n</pre>\n\n\n\n<p>Here we have used the&nbsp;<strong>openstreetmap</strong>.</p>\n\n\n\n<h3>Step 8: Add Layer to the Map</h3>\n\n\n\n<p>Finally add the layer created in the previous step to the map object using the&nbsp;<strong>addlayer()</strong>&nbsp;method as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">map.addLayer(layer);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how to load an&nbsp;<strong>open street map</strong>&nbsp;of Hyderabad city with a zoom value of 10.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet sample&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n\r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width: 900px; height: 580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 10\r\n         }\r\n         \r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         \r\n         // Adding layer to the map\r\n         map.addLayer(layer);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/open_street_map.jpg\" alt=\"Open Street Map\"/></figure>\n\n\n\n<h2>Leaflet Map Providers</h2>\n\n\n\n<p>Just like&nbsp;<strong>open street map</strong>, you can load the layers of various service providers such as Open Topo, Thunder forest, Hydda, ESRI, Open weather, NASA GIBS, etc. To do so, you need to pass their respective URL while creating the&nbsp;<strong>TileLayer</strong>&nbsp;object</p>\n\n\n\n<pre class=\"wp-block-preformatted\">var layer = new L.TileLayer('URL of the required map');\n</pre>\n\n\n\n<p>The following table lists the URL’s and their respective sample maps of the layers provided by Openstreetmap.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Map Type</th><th>URL and Output</th></tr><tr><td>Mapnik</td><td><strong>http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</strong><img src=\"https://www.tutorialspoint.com/leafletjs/images/map_providers.jpg\" alt=\"Map Providers\"></td></tr><tr><td>Black And White</td><td><strong>http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png</strong><img src=\"https://www.tutorialspoint.com/leafletjs/images/black_and_white_map.jpg\" alt=\"Black and White Map\"></td></tr><tr><td>DE</td><td><strong>http://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/ {y}.png</strong><img src=\"https://www.tutorialspoint.com/leafletjs/images/de.jpg\" alt=\"DE\"></td></tr><tr><td>France</td><td><strong>http://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png</strong><img src=\"https://www.tutorialspoint.com/leafletjs/images/france.jpg\" alt=\"France\"></td></tr><tr><td>Hot</td><td><strong>http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png</strong><img src=\"https://www.tutorialspoint.com/leafletjs/images/hot.jpg\" alt=\"Hot\"></td></tr><tr><td>BZH</td><td><strong>http://tile.openstreetmap.bzh/br/{z}/{x}/{y}.png</strong><img src=\"https://www.tutorialspoint.com/leafletjs/images/bzh.jpg\" alt=\"BZH\"></td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>What is Leaflet.js Leaflet.js is an open-source library using which we can deploy simple, interactive, lightweight web maps. Leaflet JavaScript library allows you to use layers such as Tile layers, WMS, Markers, Popups, Vector layers (polylines, polygons, circles, etc.), Image overlays and GeoJSON. You can interact with the Leaflet maps by dragging the map, zooming [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[154],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4130"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4130"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4130/revisions"}],"predecessor-version":[{"id":4137,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4130/revisions/4137"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4130"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4130"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4130"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4138,"date":"2021-02-16T07:26:00","date_gmt":"2021-02-16T07:26:00","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4138"},"modified":"2021-02-16T07:26:00","modified_gmt":"2021-02-16T07:26:00","slug":"markers","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/markers/","title":{"rendered":"Markers"},"content":{"rendered":"\n<p>To mark a single location on the map, leaflet provides markers. These markers use a standard symbol and these symbols can be customized. In this chapter, we will see how to add markers and how to customize, animate, and remove them.</p>\n\n\n\n<h2>Adding a Simple Marker</h2>\n\n\n\n<p>To add a marker to a map using Leaflet JavaScript library, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Instantiate the&nbsp;<strong>Marker</strong>&nbsp;class by passing a&nbsp;<strong>latlng</strong>&nbsp;object representing the position to be marked, as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating a marker\nvar marker = new L.Marker([17.385044, 78.486671]);\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the marker object created in the previous steps to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Marker</strong>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding marker to the map\nmarker.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code sets the marker on the city named Hyderabad (India).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet sample&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 10\r\n         }\r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         \r\n         // Adding layer to the map\r\n         map.addLayer(layer);\r\n         \r\n         // Creating a marker\r\n         var marker = L.marker(&#91;17.385044, 78.486671]);\r\n         \r\n         // Adding marker to the map\r\n         marker.addTo(map);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/simple_marker.jpg\" alt=\"Simple Marker\"/></figure>\n\n\n\n<h2>Binding Pop-ups to the Marker</h2>\n\n\n\n<p>To bind a simple popup displaying a message to a marker, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Instantiate the&nbsp;<strong>Marker</strong>&nbsp;class by passing a&nbsp;<strong>latlng</strong>&nbsp;object representing the position to be marked.</p>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Attach popup to the marker using&nbsp;<strong>bindPopup()</strong>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding pop-up to the marker\nmarker.bindPopup('Hi Welcome to Tutorialspoint').openPopup();\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Finally, add the&nbsp;<strong>Marker</strong>&nbsp;object created in the previous steps to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Marker</strong>&nbsp;class.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code sets the marker on the city Hyderabad (India) and adds a pop-up to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Binding pop-Ups to marker&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 15\r\n         }\r\n         var map = new L.map('map', mapOptions); // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer);         // Adding layer to the map\r\n         var marker = L.marker(&#91;17.438139, 78.395830]);    // Creating a Marker\r\n         \r\n         // Adding popup to the marker\r\n         marker.bindPopup('This is Tutorialspoint').openPopup();\r\n         marker.addTo(map); // Adding marker to the map\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/popups_to_the_marker.jpg\" alt=\"Pop-ups to the Marker\"/></figure>\n\n\n\n<h2>Marker Options</h2>\n\n\n\n<p>While creating a marker, you can also pass a&nbsp;<strong>marker options</strong>&nbsp;variable in addition to the latlang object. Using this variable, you can set values to various options of the marker such as icon, dragable, keyboard, title, alt, zInsexOffset, opacity, riseOnHover, riseOffset, pane, dragable, etc.</p>\n\n\n\n<p>To create a map using map options, you need to follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a variable for markerOptions and specify values to the required options.</p>\n\n\n\n<p>Create a&nbsp;<strong>markerOptions</strong>&nbsp;object (it is created just like a literal) and set values for the options&nbsp;<strong>iconUrl</strong>&nbsp;and&nbsp;<strong>iconSize</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Options for the marker\r\nvar markerOptions = {\r\n   title: \"MyLocation\",\r\n   clickable: true,\r\n   draggable: true\r\n}</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Instantiate the&nbsp;<strong>Marker</strong>&nbsp;class by passing a&nbsp;<strong>latlng</strong>&nbsp;object representing the position to be marked and the options object, created in the previous step.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating a marker\nvar marker = L.marker([17.385044, 78.486671], markerOptions);\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Finally, add the&nbsp;<strong>Marker</strong>&nbsp;object created in the previous steps to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Marker</strong>&nbsp;class.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code sets the marker on the city Hyderabad (India). This marker is clickable, dragable with the title&nbsp;<strong>MyLocation</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n   &lt;head>\r\n      &lt;title>Marker Options Example&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 10\r\n         }\r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n        \r\n         // Adding layer to the map\r\n         map.addLayer(layer);\r\n         \r\n         // Creating a Marker\r\n         var markerOptions = {\r\n            title: \"MyLocation\",\r\n            clickable: true,\r\n            draggable: true\r\n         }\r\n         // Creating a marker\r\n         var marker = L.marker(&#91;17.385044, 78.486671], markerOptions);\r\n         \r\n         // Adding marker to the map\r\n         marker.addTo(map);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/marker_options.jpg\" alt=\"Marker Options\"/></figure>\n\n\n\n<h2>Marker Custom Icons</h2>\n\n\n\n<p>Instead of the default icon provided by the Leaflet library, you can also add your own icon. You can use the following steps to add a custom icon to the map instead of the default one.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a variable for&nbsp;<strong>markerOptions</strong>&nbsp;and specify values to the required options −</p>\n\n\n\n<ul><li><strong>iconUrl</strong>&nbsp;− As a value to this option, you need to pass a&nbsp;<strong>String</strong>&nbsp;object specifying the path of the image which you want to use as an icon.</li><li><strong>iconSize</strong>&nbsp;− Using this option, you can specify the size of the icon.</li></ul>\n\n\n\n<p><strong>Note</strong>&nbsp;− In addition to these, you can also set values to other options such as iconSize, shadowSize, iconAnchor, shadowAnchor, and popupAnchor.</p>\n\n\n\n<p>Create a custom icon using&nbsp;<strong>L.icon()</strong>&nbsp;by passing the above options variable as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Icon options\r\nvar iconOptions = {\r\n   iconUrl: 'logo.png',\r\n   iconSize: &#91;50, 50]\r\n}\r\n\r\n// Creating a custom icon\r\nvar customIcon = L.icon(iconOptions);</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create a variable for markerOptions and specify values to the required options. In addition to these, specify the icon by passing the icon variable created in the previous step as a value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Options for the marker\r\nvar markerOptions = {\r\n   title: \"MyLocation\",\r\n   clickable: true,\r\n   draggable: true,\r\n   icon: customIcon\r\n}</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Instantiate the&nbsp;<strong>Marker</strong>&nbsp;class by passing a&nbsp;<strong>latlng</strong>&nbsp;object representing the position to be marked and the options object created in the previous step.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating a marker\nvar marker = L.marker([17.438139, 78.395830], markerOptions);\n</pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Finally, add the&nbsp;<strong>Marker</strong>&nbsp;object created in the previous steps to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Marker</strong>&nbsp;class.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code sets the marker on the location of Tutorialspoint. Here we are using the logo of Tutorialspoint instead of the default marker.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Marker Custom Icons Example&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.438139, 78.395830],\r\n            zoom: 10\r\n         }\r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n\r\n         // Adding layer to the map\r\n         map.addLayer(layer);\r\n         \r\n         // Icon options\r\n         var iconOptions = {\r\n            iconUrl: 'logo.png',\r\n            iconSize: &#91;50, 50]\r\n         }\r\n         // Creating a custom icon\r\n         var customIcon = L.icon(iconOptions);\r\n         \r\n         // Creating Marker Options\r\n         var markerOptions = {\r\n            title: \"MyLocation\",\r\n            clickable: true,\r\n            draggable: true,\r\n            icon: customIcon\r\n         }\r\n         // Creating a Marker\r\n         var marker = L.marker(&#91;17.438139, 78.395830], markerOptions);\r\n         \r\n         // Adding popup to the marker\r\n         marker.bindPopup('Hi welcome to Tutorialspoint').openPopup();\r\n         \r\n         // Adding marker to the map\r\n         marker.addTo(map);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/marker_custom_icons.jpg\" alt=\"Marker Custom Icons\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>To mark a single location on the map, leaflet provides markers. These markers use a standard symbol and these symbols can be customized. In this chapter, we will see how to add markers and how to customize, animate, and remove them. Adding a Simple Marker To add a marker to a map using Leaflet JavaScript [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[154],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4138"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4138"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4138/revisions"}],"predecessor-version":[{"id":4150,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4138/revisions/4150"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4138"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4138"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4138"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4151,"date":"2021-02-16T07:28:50","date_gmt":"2021-02-16T07:28:50","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4151"},"modified":"2021-02-16T07:28:50","modified_gmt":"2021-02-16T07:28:50","slug":"vector-layers","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/vector-layers/","title":{"rendered":"Vector Layers"},"content":{"rendered":"\n<p>In the previous chapter, we learned how to use markers in Leaflet. Along with markers, we can also add various shapes such as circles, polygons, rectangles, polylines, etc. In this chapter, we will discuss how to use the shapes provided by Google Maps.</p>\n\n\n\n<h2>Polyline</h2>\n\n\n\n<p>To draw polyline overlay on a map using Leaflet JavaScript library, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a&nbsp;<strong>latlangs</strong>&nbsp;variable to hold the points to draw polyline, as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating latlng object\nvar latlngs = [\n   [17.385044, 78.486671],\n   [16.506174, 80.648015],\n   [17.000538, 81.804034],\n   [17.686816, 83.218482]\n];\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create a polyline using the&nbsp;<strong>L.polyline()</strong>. To draw the polyline, pass the locations as variable and an option to specify the color of the lines.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating a poly line\nvar polyline = L.polyline(latlngs, {color: 'red'});\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Add the polyline to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Polyline</strong>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding to poly line to map\npolyline.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the code which draws a polyline, covering the cities Hyderabad, Vijayawada, Rajamahendrawaram and, Vishakhapatnam (India).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Poly lines&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;16.506174, 80.648015],\r\n            zoom: 7\r\n         }\r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         \r\n         // Adding layer to the map\r\n         map.addLayer(layer);\r\n         \r\n         // Creating latlng object\r\n         var latlngs = &#91;\r\n            &#91;17.385044, 78.486671],\r\n            &#91;16.506174, 80.648015],\r\n            &#91;17.000538, 81.804034],\r\n            &#91;17.686816, 83.218482]\r\n         ];\r\n         // Creating a poly line\r\n         var polyline = L.polyline(latlngs, {color: 'red'});\r\n         \r\n         // Adding to poly line to map\r\n         polyline.addTo(map);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/polyline.jpg\" alt=\"Polyline\"/></figure>\n\n\n\n<h2>Polygon</h2>\n\n\n\n<p>To draw a polygon overlay on a map using Leaflet JavaScript library, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a&nbsp;<strong>latlangs</strong>&nbsp;variable to hold the points to draw the polygon.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating latlng object\nvar latlngs = [\n   [17.385044, 78.486671],\n   [16.506174, 80.648015],\n   [17.686816, 83.218482]\n];\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create a polygon using the&nbsp;<strong>L.polygon()</strong>. Pass the locations/points as variable to draw the polygon, and an option to specify the color of the polygon.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating a polygon\nvar polygon = L.polygon(latlngs, {color: 'red'});\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Add the polygon to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Polygon</strong>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding to polygon to map\npolygon.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the code to draw a polygon covering the cities Hyderabad, Vijayawada, and Vishakhapatnam (India).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Polygons&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n\r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;16.506174, 80.648015],\r\n            zoom: 7\r\n         }\r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n        \r\n         // Adding layer to the map\r\n         map.addLayer(layer);\r\n         \r\n         // Creating latlng object\r\n         var latlngs = &#91;\r\n            &#91;17.385044, 78.486671],\r\n            &#91;16.506174, 80.648015],\r\n            &#91;17.686816, 83.218482]\r\n         ];\r\n         // Creating a polygon\r\n         var polygon = L.polygon(latlngs, {color: 'red'});\r\n         \r\n         // Adding to polygon to map\r\n         polygon.addTo(map);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/polygon.jpg\" alt=\"Polygon\"/></figure>\n\n\n\n<h2>Rectangle</h2>\n\n\n\n<p>To draw a Rectangle overlay on a map using Leaflet JavaScript library, follow the steps given below</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a latlangs variable to hold the points to draw a rectangle on the map.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating latlng object\nvar latlngs = [\n   [17.342761, 78.552432],\n   [16.396553, 80.727725]\n];\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create a rectangle using the&nbsp;<strong>L.rectangle()</strong>&nbsp;function. Pass the locations/points as a variable to draw a rectangle and&nbsp;<strong>rectangleOptions</strong>&nbsp;to specify the color and weight of the rectangle.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating rectOptions\nvar rectOptions = {color: 'Red', weight: 1}\n\n// Creating a rectangle\nvar rectangle = L.rectangle(latlngs, rectOptions);\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Add the rectangle to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Polygon</strong>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding to rectangle to map\nrectangle.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the code to draw a rectangle on the map using Leaflet JavaScript library.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Rectangle&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;16.506174, 80.648015],\r\n            zoom: 7\r\n         }\r\n         var map = new L.map('map', mapOptions); // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer); // Adding layer to the map\r\n         \r\n         // Creating latlng object\r\n         var latlngs = &#91;\r\n            &#91;17.342761, 78.552432],\r\n            &#91;16.396553, 80.727725]\r\n         ];\r\n         var rectOptions = {color: 'Red', weight: 1}   // Creating rectOptions\r\n        \r\n         // Creating a rectangle\r\n         var rectangle = L.rectangle(latlngs, rectOptions);\r\n         rectangle.addTo(map);   // Adding to rectangle to map\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/rectangle.jpg\" alt=\"Rectangle\"/></figure>\n\n\n\n<h2>Circle</h2>\n\n\n\n<p>To draw a circle overlay on a map using Leaflet JavaScript library follow the steps given below.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a latlangs variable to hold the center of the circle as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Center of the circle\nvar circleCenter = [17.385044, 78.486671];\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create a variable circleOptions to specify values to the options color, fillColor and, fillOpacity as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Circle options\r\nvar circleOptions = {\r\n   color: 'red',\r\n   fillColor: '#f03',\r\n   fillOpacity: 0\r\n}</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Create a circle using&nbsp;<strong>L.circle()</strong>. Pass the center of the circle, radius, and the circle options to this function.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating a circle\nvar circle = L.circle(circleCenter, 50000, circleOptions);\n</pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Add the above-created circle to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Polyline</strong>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding circle to the map\ncircle.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the code to draw a circle with the coordinates of the city Hyderabad as its radius.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Circle&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width: 900px; height: 580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 7\r\n         }\r\n         var map = new L.map('map', mapOptions); // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer);        // Adding layer to the map\r\n         var circleCenter = &#91;17.385044, 78.486671];     // Center of the circle\r\n         \r\n         // Circle options\r\n         var circleOptions = {\r\n            color: 'red',\r\n            fillColor: '#f03',\r\n            fillOpacity: 0\r\n         }\r\n         // Creating a circle\r\n         var circle = L.circle(circleCenter, 50000, circleOptions);\r\n         circle.addTo(map);     // Adding circle to the map\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html>></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/circle.jpg\" alt=\"Circle\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In the previous chapter, we learned how to use markers in Leaflet. Along with markers, we can also add various shapes such as circles, polygons, rectangles, polylines, etc. In this chapter, we will discuss how to use the shapes provided by Google Maps. Polyline To draw polyline overlay on a map using Leaflet JavaScript library, [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[154],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4151"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4151"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4151/revisions"}],"predecessor-version":[{"id":4156,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4151/revisions/4156"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4151"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4151"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4151"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4159,"date":"2021-02-16T07:31:57","date_gmt":"2021-02-16T07:31:57","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4159"},"modified":"2021-02-16T07:31:57","modified_gmt":"2021-02-16T07:31:57","slug":"multi-polyline-and-polygon","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/multi-polyline-and-polygon/","title":{"rendered":"Multi Polyline and Polygon"},"content":{"rendered":"\n<p>In the previous chapter, we learnt how to add various shapes such as circles, polygons, rectangles, polylines, etc. In this chapter, let us discuss how to add multi-polygons, multirectangles, and polylines.</p>\n\n\n\n<h2>Multi-Polyline</h2>\n\n\n\n<p>To draw a multi-polyline overlay on a map using Leaflet JavaScript library, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a latlangs variable to hold the points to draw the multi-polyline.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating latlng object\nvar latlang = [\n   [[17.385044, 78.486671], [16.506174, 80.648015], [17.686816, 83.218482]],\n   [[13.082680, 80.270718], [12.971599, 77.594563],[15.828126, 78.037279]]\n];\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create a multi-polyline using the&nbsp;<strong>L.multiPolyline()</strong>&nbsp;function. Pass the locations as variable to draw a multi-polyline and an option to specify the color and weight of the lines.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating multi polyline options\nvar multiPolyLineOptions = {color:'red'};\n\n// Creating multi polylines\nvar multipolyline = L.multiPolyline(latlang , multiPolyLineOptions);\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Add multi-polyline to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>Multipolyline</strong>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding multi polyline to map\nmultipolyline.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the code to draw a multi-polyline covering the cities Hyderabad, Vijayawada, and Vishakhapatnam; and Kurnool, Bengaluru, and Chennai.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Multi Polylines&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width: 900px; height: 580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;16.506174, 80.648015],\r\n            zoom: 7\r\n         }\r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         \r\n         // Adding layer to the map\r\n         map.addLayer(layer);\r\n         \r\n         // Creating latlng object\r\n         var latlang = &#91;\r\n            &#91;&#91;17.385044, 78.486671], &#91;16.506174, 80.648015], &#91;17.686816, 83.218482]],\r\n            &#91;&#91;13.082680, 80.270718], &#91;12.971599, 77.594563],&#91;15.828126, 78.037279]]\r\n         ];\r\n         \r\n         // Creating poly line options\r\n         var multiPolyLineOptions = {color:'red'};\r\n         \r\n         // Creating multi poly-lines\r\n         var multipolyline = L.multiPolyline(latlang , multiPolyLineOptions);\r\n         \r\n         // Adding multi poly-line to map\r\n         multipolyline.addTo(map);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/multi_polyline_map.jpg\" alt=\"Multi-Polyline Map\"/></figure>\n\n\n\n<h2>Multi Polygon</h2>\n\n\n\n<p>To draw a multi-polygon overlay on a map using Leaflet JavaScript library, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a latlangs variable to hold the points to draw the multi polygon.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating latlng object\nvar latlang = [\n   [[17.385044, 78.486671], [16.506174, 80.648015], [17.686816, 83.218482]],\n   [[13.082680, 80.270718], [12.971599, 77.594563],[15.828126, 78.037279]]\n];\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create a multi-polygon using the&nbsp;<strong>L.multiPolygon()</strong>&nbsp;function. Pass the locations as variable to draw the multi-polygon and an option to specify the color and weight of the lines.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating multi polygon options\nvar multiPolygonOptions = {color:'red'};\n\n// Creating multi polygon\nvar multipolygon = L.multiPolygon(latlang , multiPolygonOptions);\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Add the multi-polygon to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>MultiPolygon</strong>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding multi polygon to map\nmultipolygon.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the code to draw a multi-polygon touching the cities Hyderabad, Vijayawada, and Vishakhapatnam; and Kurnool, Bengaluru, and Chennai.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Multi Polygons&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width: 900px; height: 580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;16.506174, 80.648015],\r\n            zoom: 7\r\n         }\r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         \r\n         // Adding layer to the map\r\n         map.addLayer(layer);\r\n         \r\n         // Creating latlng object\r\n         var latlang = &#91;\r\n            &#91;&#91;17.385044, 78.486671], &#91;16.506174, 80.648015], &#91;17.686816, 83.218482]],\r\n            &#91;&#91;13.082680, 80.270718], &#91;12.971599, 77.594563],&#91;15.828126, 78.037279]]\r\n         ];\r\n         // Creating multi polygon options\r\n         var multiPolygonOptions = {color:'red', weight:8};\r\n         \r\n         // Creating multi polygons\r\n         var multipolygon = L.multiPolygon(latlang , multiPolygonOptions);\r\n         \r\n         // Adding multi polygon to map\r\n         multipolygon.addTo(map);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/multipolygon_map.jpg\" alt=\"Multi Polygon Map\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In the previous chapter, we learnt how to add various shapes such as circles, polygons, rectangles, polylines, etc. In this chapter, let us discuss how to add multi-polygons, multirectangles, and polylines. Multi-Polyline To draw a multi-polyline overlay on a map using Leaflet JavaScript library, follow the steps given below − Step 1&nbsp;− Create a&nbsp;Map&nbsp;object by [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[154],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4159"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4159"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4159/revisions"}],"predecessor-version":[{"id":4162,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4159/revisions/4162"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4159"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4159"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4159"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4163,"date":"2021-02-16T07:33:31","date_gmt":"2021-02-16T07:33:31","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4163"},"modified":"2021-02-16T07:33:31","modified_gmt":"2021-02-16T07:33:31","slug":"layers-group","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/layers-group/","title":{"rendered":"Layers Group"},"content":{"rendered":"\n<h2>Layer Groups</h2>\n\n\n\n<p>Using layer group, you can add multiple layers to a map and manage them as a single layer.</p>\n\n\n\n<p>Follow the steps given below to create a&nbsp;<strong>LayerGroup</strong>&nbsp;and add it to the map.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create elements (layers) such as markers, polygons, circles, etc., that are needed, by instantiating the respective classes as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating markers\nvar hydMarker = new L.Marker([17.385044, 78.486671]);\nvar vskpMarker = new L.Marker([17.686816, 83.218482]);\nvar vjwdMarker = new L.Marker([16.506174, 80.648015]);\n\n// Creating latlng object\nvar latlngs = [\n   [17.385044, 78.486671],\n   [16.506174, 80.648015],\n   [17.686816, 83.218482]\n];\n// Creating a polygon\nvar polygon = L.polygon(latlngs, {color: 'red'});\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create the Layer Group using&nbsp;<strong>l.layerGroup()</strong>. Pass the above created markers, polygons, etc., as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating layer group\nvar layerGroup = L.layerGroup([hydMarker, vskpMarker, vjwdMarker, polygon]);\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Add the layer group created in the previous step using the&nbsp;<strong>addTo()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding layer group to map\nlayerGroup.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code creates a layer group which holds 3 markers and a polygon, and adds it to the map.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Layer Group&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width: 900px; height: 580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 7\r\n         }\r\n         var map = new L.map('map', mapOptions); // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer);      // Adding layer to the map\r\n         \r\n         // Creating markers\r\n         var hydMarker = new L.Marker(&#91;17.385044, 78.486671]);\r\n         var vskpMarker = new L.Marker(&#91;17.686816, 83.218482]);\r\n         var vjwdMarker = new L.Marker(&#91;16.506174, 80.648015]);\r\n         \r\n         // Creating latlng object\r\n         var latlngs = &#91;\r\n            &#91;17.385044, 78.486671],\r\n            &#91;16.506174, 80.648015],\r\n            &#91;17.686816, 83.218482]\r\n         ];\r\n         // Creating a polygon\r\n         var polygon = L.polygon(latlngs, {color: 'red'});\r\n         \r\n         // Creating layer group\r\n         var layerGroup = L.layerGroup(&#91;hydMarker, vskpMarker, vjwdMarker, polygon]);\r\n         layerGroup.addTo(map);    // Adding layer group to map\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/layergroup_map.jpg\" alt=\"Layer Group Map\"/></figure>\n\n\n\n<h3>Adding a layer (element)</h3>\n\n\n\n<p>You can add a layer to the feature group using the&nbsp;<strong>addLayer()</strong>&nbsp;method. To this method, you need to pass the element that is to be added.</p>\n\n\n\n<p>You can add a circle with the city Hyderabad at the center.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating a circle\nvar circle = L.circle([16.506174, 80.648015], 50000, {color: 'red', fillColor:\n   '#f03', fillOpacity: 0} );\n\n// Adding circle to the layer group\nlayerGroup.addLayer(circle);\n</pre>\n\n\n\n<p>It will produce the following output. −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/add_layergroup_map.jpg\" alt=\"Add Layer Group Map\"/></figure>\n\n\n\n<h3>Removing a Layer (Element)</h3>\n\n\n\n<p>You can remove a layer from the feature group using the&nbsp;<strong>removeLayer()</strong>&nbsp;method. To this method, you need to pass the element that is to be removed.</p>\n\n\n\n<p>You can remove the marker on the city named Vijayawada as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Removing layer from map\nlayerGroup.removeLayer(vjwdMarker);\n</pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/remove_layer_map.jpg\" alt=\"Remove Layer Map\"/></figure>\n\n\n\n<h2>Feature Groups</h2>\n\n\n\n<p>It is similar to&nbsp;<strong>LayerGroup</strong>&nbsp;but it allows mouse events and bind popups to it. You can also set style to the entire group using&nbsp;<strong>setStyle()</strong>&nbsp;method.</p>\n\n\n\n<p>Follow the steps given below to create a Feature Group and add it to the map.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create elements (layers) such as markers, polygons, and circles that are needed, by instantiating the respective classes as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating markers\nvar hydMarker = new L.Marker([17.385044, 78.486671]);\nvar vskpMarker = new L.Marker([17.686816, 83.218482]);\nvar vjwdMarker = new L.Marker([16.506174, 80.648015]);\n\n// Creating latlng object\nvar latlngs = [\n   [17.385044, 78.486671],\n   [16.506174, 80.648015],\n   [17.686816, 83.218482]\n];\n// Creating a polygon\nvar polygon = L.polygon(latlngs, {color: 'red'});&gt;\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create Feature Group using&nbsp;<strong>l.featureGroup()</strong>. Pass the above-created markers, polygons, etc., as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating feature group\nvar featureGroup = L.featureGroup([hydMarker, vskpMarker, vjwdMarker, polygon]);\n</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− If you set style to the feature group, it will be applied to each element (layer) in the group. You can do so using the&nbsp;<strong>setStyle()</strong>&nbsp;method and to this method, you need to pass values to the options such as color and opacity etc.</p>\n\n\n\n<p>Set the style to the feature group created in the above step.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Setting style to the feature group\nfeatureGroup.setStyle({color:'blue',opacity:.5});\n</pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Bind the popup using the&nbsp;<strong>bindPopup()</strong>&nbsp;method, as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Binding popup to the feature group\nfeatureGroup.bindPopup(\"Feature Group\");\n</pre>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Add the feature group created in the previous step using the&nbsp;<strong>addTo()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding layer group to map\nfeatureGroup.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code creates a feature group which holds 3 markers and a polygon, and adds it to the map.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Feature Group&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 7\r\n         }\r\n         var map = new L.map('map', mapOptions); // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer);      // Adding layer to the map\r\n         \r\n         // Creating markers\r\n         var hydMarker = new L.Marker(&#91;17.385044, 78.486671]);\r\n         var vskpMarker = new L.Marker(&#91;17.686816, 83.218482]);\r\n         var vjwdMarker = new L.Marker(&#91;16.506174, 80.648015]);\r\n         \r\n         // Creating latlng object\r\n         var latlngs = &#91;\r\n            &#91;17.385044, 78.486671],\r\n            &#91;16.506174, 80.648015],\r\n            &#91;17.686816, 83.218482]\r\n         ];\r\n         var polygon = L.polygon(latlngs, {color: 'red'}); // Creating a polygon\r\n         \r\n         // Creating feature group\r\n         var featureGroup = L.featureGroup(&#91;hydMarker, vskpMarker, vjwdMarker, polygon]);\r\n         featureGroup.setStyle({color:'blue',opacity:.5});\r\n         featureGroup.bindPopup(\"Feature Group\");\r\n         featureGroup.addTo(map);      // Adding layer group to map\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/featuregroup_map.jpg\" alt=\"Add Layer Group Map\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Layer Groups Using layer group, you can add multiple layers to a map and manage them as a single layer. Follow the steps given below to create a&nbsp;LayerGroup&nbsp;and add it to the map. Step 1&nbsp;− Create a&nbsp;Map&nbsp;object by passing a &lt;div&gt; element (String or object) and map options (optional). Step 2&nbsp;− Create a&nbsp;Layer&nbsp;object by passing [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[154],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4163"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4163"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4163/revisions"}],"predecessor-version":[{"id":4165,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4163/revisions/4165"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4163"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4163"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4163"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4166,"date":"2021-02-16T07:34:27","date_gmt":"2021-02-16T07:34:27","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4166"},"modified":"2021-02-16T07:34:27","modified_gmt":"2021-02-16T07:34:27","slug":"event-handling","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/event-handling/","title":{"rendered":"Event Handling"},"content":{"rendered":"\n<p>The Leaflet JavaScript program can respond to various events generated by the user. In this chapter, we will provide a few examples demonstrating how to perform event handling while working with Leaflet.</p>\n\n\n\n<h2>Event Handling</h2>\n\n\n\n<p>Follow the steps given below to add events to the map.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Add the handler to the map, as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">map.on(\"click\", function(e){\n   new L.Marker([e.latlng.lat, e.latlng.lng]).addTo(map);\n})\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code demonstrates even handling using Leaflet. When executed, if you click on the map, a marker will be created on that particular location.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Leaflet Polygons&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width: 900px; height: 580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;16.506174, 80.648015],\r\n            zoom: 7\r\n         }\r\n         var map = new L.map('map', mapOptions);    // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer); // Adding layer to the map\r\n         \r\n         map.on(\"click\", function(e){\r\n            new L.Marker(&#91;e.latlng.lat, e.latlng.lng]).addTo(map);\r\n         })\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/event_handling.jpg\" alt=\"Event Handling\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Leaflet JavaScript program can respond to various events generated by the user. In this chapter, we will provide a few examples demonstrating how to perform event handling while working with Leaflet. Event Handling Follow the steps given below to add events to the map. Step 1&nbsp;− Create a&nbsp;Map&nbsp;object by passing a &lt;div&gt; element (String [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[154],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4166"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4166"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4166/revisions"}],"predecessor-version":[{"id":4167,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4166/revisions/4167"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4166"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4166"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4166"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4168,"date":"2021-02-16T07:35:12","date_gmt":"2021-02-16T07:35:12","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4168"},"modified":"2021-02-16T07:35:12","modified_gmt":"2021-02-16T07:35:12","slug":"overlays","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/overlays/","title":{"rendered":"Overlays"},"content":{"rendered":"\n<p>Instead of map overlays, you can also use image, video overlays in a Leaflet application. In this chapter, we will see how to use such overlays.</p>\n\n\n\n<h2>Image Overlay</h2>\n\n\n\n<p>Follow the steps given below to use an image overlay.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create the image overlay using&nbsp;<strong>L.imageOverlay()</strong>. Pass the URL of the image and an object representing image bounds, as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating Image overlay\nvar imageUrl = 'tpPoster.jpg';\nvar imageBounds = [[17.342761, 78.552432], [16.396553, 80.727725]];\nvar overlay = L.imageOverlay(imageUrl, imageBounds);\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the overlay to the map using&nbsp;<strong>addTo()</strong>&nbsp;method of the&nbsp;<strong>imageOverlay</strong>&nbsp;class, as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding overlay to the map\noverlay.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code demonstrates the usage of image overlay.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Image Overlay Example&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.342761, 78.552432],\r\n            zoom: 8\r\n         }\r\n         var map = new L.map('map', mapOptions); // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer);  // Adding layer to the map\r\n         \r\n         // Creating Image overlay\r\n         var imageUrl = 'tpPoster.jpg';\r\n         var imageBounds = &#91;&#91;17.342761, 78.552432], &#91;16.396553, 80.727725]];\r\n         var overlay = L.imageOverlay(imageUrl, imageBounds);\r\n         overlay.addTo(map);\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/overlay.jpg\" alt=\"Overlay\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Instead of map overlays, you can also use image, video overlays in a Leaflet application. In this chapter, we will see how to use such overlays. Image Overlay Follow the steps given below to use an image overlay. Step 1&nbsp;− Create a&nbsp;Map&nbsp;object by passing a &lt;div&gt; element (String or object) and map options (optional). Step [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[154],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4168"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4168"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4168/revisions"}],"predecessor-version":[{"id":4170,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4168/revisions/4170"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4168"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4168"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4168"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4171,"date":"2021-02-16T07:36:48","date_gmt":"2021-02-16T07:36:48","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4171"},"modified":"2021-02-16T07:36:48","modified_gmt":"2021-02-16T07:36:48","slug":"controls","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/controls/","title":{"rendered":"Controls"},"content":{"rendered":"\n<p>Leaflet provides various controls such as zoom, attribution, scale, etc., where −</p>\n\n\n\n<ul><li><strong>Zoom</strong>&nbsp;− By default, this control exists at the top left corner of the map. It has two buttons&nbsp;<strong>&#8220;+&#8221;</strong>&nbsp;and&nbsp;<strong>&#8220;–&#8221;</strong>, using which you can zoom-in or zoom-out the map. You can remove the default zoom control by setting the&nbsp;<strong><em>zoomControl</em></strong>&nbsp;option of the map options to&nbsp;<strong>false</strong>.</li><li><strong>Attribution</strong>&nbsp;− By default, this control exists at the bottom right corner of the map. It displays the attribution data in a small textbox. By default, it displays the text. You can remove the default attribution control by setting the&nbsp;<strong>attributionControl</strong>&nbsp;option of the map options to&nbsp;<strong>false</strong>.</li><li><strong>Scale</strong>&nbsp;− By default, this control exists at the bottom left corner of the map. It displays the current center of the screen.</li></ul>\n\n\n\n<p>In this chapter, we will explain how you can create and add all these three controls to your map using Leaflet JavaScript library.</p>\n\n\n\n<h2>Zoom</h2>\n\n\n\n<p>To add a zoom control of your own to the map using Leaflet JavaScript library, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create the zoomOptions variable and define your own text values for the zoom-in and zoom-out options, instead of the default ones (+ and -).</p>\n\n\n\n<p>Then, create the zoom control by passing the zoomOptions variable to&nbsp;<strong>L.control.zoom()</strong>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// zoom control options\nvar zoomOptions = {\n   zoomInText: '1',\n   zoomOutText: '0',\n};\n// Creating zoom control\nvar zoom = L.control.zoom(zoomOptions);\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the zoom control object created in the previous step to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding zoom control to the map\nzoom.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the code to add your own zoom control to your map, instead of the default one. Here, on pressing 1, the map zooms in, and on pressing 0, the map zooms out.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Zoom Example&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 10,\r\n            zoomControl: false\r\n         }\r\n         var map = new L.map('map', mapOptions); // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer);   // Adding layer to the map\r\n         \r\n         // zoom control options\r\n         var zoomOptions = {\r\n            zoomInText: '1',\r\n            zoomOutText: '0',\r\n         };\r\n         var zoom = L.control.zoom(zoomOptions);   // Creating zoom control\r\n         zoom.addTo(map);   // Adding zoom control to the map\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/zoom_map.jpg\" alt=\"Zoom Map\"/></figure>\n\n\n\n<h2>Attribution</h2>\n\n\n\n<p>To add an attribution of your own to the map using Leaflet JavaScript library, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the layer object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create the&nbsp;<strong>attrOptions</strong>&nbsp;variable and define your own prefix value instead of the default one (leaflet).</p>\n\n\n\n<p>Then, create the attribution control by passing the&nbsp;<strong>attrOptions</strong>&nbsp;variable to&nbsp;<strong>L.control.attribution()</strong>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Attribution options\nvar attrOptions = {\n   prefix: 'attribution sample'\n};\n\n// Creating an attribution\nvar attr = L.control.attribution(attrOptions);\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the&nbsp;<strong>attribution control</strong>&nbsp;object created in the previous step to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding attribution to the map\nattr.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code adds our own attribution control to your map, instead of the default one. Here, instead the text&nbsp;<em>attribution sample</em>&nbsp;will be displayed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Attribution Example&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\"/>\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width: 900px; height: 580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 10,\r\n            attributionControl: false\r\n         }\r\n         var map = new L.map('map', mapOptions); // Creating a map object\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer);    // Adding layer to the map\r\n         \r\n         // Attribution options\r\n         var attrOptions = {\r\n            prefix: 'attribution sample'\r\n         };\r\n         \r\n         // Creating an attribution\r\n         var attr = L.control.attribution(attrOptions);\r\n         attr.addTo(map);  // Adding attribution to the map\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html>></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/attribution_map.jpg\" alt=\"Attribution Map\"/></figure>\n\n\n\n<h2>Scale</h2>\n\n\n\n<p>To add a scale control of your own to the map using Leaflet JavaScript library, follow the steps given below −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>Map</strong>&nbsp;object by passing a &lt;<em>div</em>&gt; element (String or object) and map options (optional).</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create a&nbsp;<strong>Layer</strong>&nbsp;object by passing the URL of the desired tile.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the&nbsp;<strong>layer</strong>&nbsp;object to the map using the&nbsp;<strong>addLayer()</strong>&nbsp;method of the&nbsp;<strong>Map</strong>&nbsp;class.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create scale control by passing the using&nbsp;<strong>L.control.scale()</strong>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Creating scale control\nvar scale = L.control.scale();\n</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the&nbsp;<strong>scale control</strong>&nbsp;object created in the previous step to the map using the&nbsp;<strong>addTo()</strong>&nbsp;method as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">// Adding scale control to the map\nscale.addTo(map);\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code adds scale control to your map.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;title>Scale Example&lt;/title>\r\n      &lt;link rel = \"stylesheet\" href = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\" />\r\n      &lt;script src = \"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\">&lt;/script>\r\n   &lt;/head>\r\n   \r\n   &lt;body>\r\n      &lt;div id = \"map\" style = \"width:900px; height:580px\">&lt;/div>\r\n      &lt;script>\r\n         // Creating map options\r\n         var mapOptions = {\r\n            center: &#91;17.385044, 78.486671],\r\n            zoom: 10\r\n         }\r\n         // Creating a map object\r\n         var map = new L.map('map', mapOptions);\r\n         \r\n         // Creating a Layer object\r\n         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r\n         map.addLayer(layer); // Adding layer to the map\r\n         var scale = L.control.scale(); // Creating scale control\r\n         scale.addTo(map); // Adding scale control to the map\r\n      &lt;/script>\r\n   &lt;/body>\r\n   \r\n&lt;/html></code></pre>\n\n\n\n<p>It generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/leafletjs/images/scale_map.jpg\" alt=\"Scale Map\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Leaflet provides various controls such as zoom, attribution, scale, etc., where − Zoom&nbsp;− By default, this control exists at the top left corner of the map. It has two buttons&nbsp;&#8220;+&#8221;&nbsp;and&nbsp;&#8220;–&#8221;, using which you can zoom-in or zoom-out the map. You can remove the default zoom control by setting the&nbsp;zoomControl&nbsp;option of the map options to&nbsp;false. Attribution&nbsp;− [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[154],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4171"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4171"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4171/revisions"}],"predecessor-version":[{"id":4174,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4171/revisions/4174"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4171"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4171"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4171"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]