[
  {
    "id": 2844,
    "date": "2020-05-16T09:13:55",
    "date_gmt": "2020-05-16T09:13:55",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=804"
    },
    "modified": "2020-05-16T09:13:55",
    "modified_gmt": "2020-05-16T09:13:55",
    "slug": "introduction-2-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-2-3/",
    "title": {
      "rendered": "Introduction"
    },
    "content": {
      "rendered": "\n<figure class=\"wp-block-image size-large\"><img src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/07/python-django-logo-1024x576.jpg\" alt=\"\" class=\"wp-image-2577\"/></figure>\n\n\n\n<p>Django is a web application framework written in Python programming language. It is based on the MVT (Model View Template) design pattern. The Django is very demanding due to its rapid development feature. It takes less time to build applications after collecting client requirements.</p>\n\n\n\n<p>This framework uses a famous tag line:<strong>The web framework for perfectionists with deadlines.</strong></p>\n\n\n\n<p>By using Django, we can build web applications in very less time. Django is designed in such a manner that it handles much of configure things automatically, so we can focus on application development only.</p>\n\n\n\n<h2>History</h2>\n\n\n\n<p>Django was design and developed by Lawrence journal world in 2003 and publicly released under BSD license in July 2005. Currently, DSF (Django Software Foundation) maintains its development and release cycle.</p>\n\n\n\n<p>Django was released on 21, July 2005. Its current stable version is 2.0.3 which was released on 6 March, 2018.</p>\n\n\n\n<h3>Django Version History</h3>\n\n\n\n<table><tbody><tr><th>Version</th><th>Date</th><th>Description</th></tr><tr><td>0.90</td><td>16 Nov 2005</td><td></td></tr><tr><td>0.91</td><td>11 Jan 2006</td><td>magic removal</td></tr><tr><td>0.96</td><td>23 Mar 2007</td><td>newforms, testing tools</td></tr><tr><td>1.0</td><td>3 Sep 2008</td><td>API stability, decoupled admin, unicode</td></tr><tr><td>1.1</td><td>29 Jul 2009</td><td>Aggregates, transaction based tests</td></tr><tr><td>1.2</td><td>17 May 2010</td><td>Multiple db connections, CSRF, model validation</td></tr><tr><td>1.3</td><td>23 Mar 2011</td><td>Timezones, in browser testing, app templates.</td></tr><tr><td>1.5</td><td>26 Feb 2013</td><td>Python 3 Support, configurable user model</td></tr><tr><td>1.6</td><td>6 Nov 2013</td><td>Dedicated to Malcolm Tredinnick, db transaction management, connection pooling.</td></tr><tr><td>1.7</td><td>2 Sep 2014</td><td>Migrations, application loading and configuration.</td></tr><tr><td>1.8 LTS</td><td>2 Sep 2014</td><td>Migrations, application loading and configuration.</td></tr><tr><td>1.8 LTS</td><td>1 Apr 2015</td><td>Native support for multiple template engines.<em>Supported until at least April 2018</em></td></tr><tr><td>1.9</td><td>1 Dec 2015</td><td>Automatic password validation. New styling for admin interface.</td></tr><tr><td>1.10</td><td>1 Aug 2016</td><td>Full text search for PostgreSQL. New-style middleware.</td></tr><tr><td>1.11 LTS</td><td>1.11 LTS</td><td>Last version to support Python 2.7.<em>Supported until at least April 2020</em></td></tr><tr><td>2.0</td><td>Dec 2017</td><td>First Python 3-only release, Simplified URL routing syntax, Mobile friendly admin.</td></tr></tbody></table>\n\n\n\n<h2 id=\"How_popular_is_Django\">How popular is Django?</h2>\n\n\n\n<p>There isn&#8217;t any readily-available and definitive measurement of popularity of server-side frameworks although sites like <strong><em>Hot Frameworks</em></strong> attempt to assess popularity using mechanisms like counting the number of GitHub projects and StackOverflow questions for each platform. A better question is whether Django is &#8220;popular enough&#8221; to avoid the problems of unpopular platforms. Is it continuing to evolve? Can you get help if you need it? Is there an opportunity for you to get paid work if you learn Django? </p>\n\n\n\n<p>Based on the number of high profile sites that use Django, the number of people contributing to the codebase, and the number of people providing both free and paid for support, then yes, Django is a popular framework!</p>\n\n\n\n<p>High-profile sites that use Django include: Disqus, Instagram, Knight Foundation, MacArthur Foundation, Mozilla, National Geographic, Open Knowledge Foundation, Pinterest, and Open Stack.</p>\n\n\n\n<h2 id=\"Is_Django_opinionated\">Is Django opinionated?</h2>\n\n\n\n<p><br>Django is &#8220;somewhat opinionated&#8221;, and hence delivers the &#8220;best of both worlds&#8221;. It provides a set of components to handle most web development tasks and one (or two) preferred ways to use them. However, Django&#8217;s decoupled architecture means that you can usually pick and choose from a number of different options, or add support for completely new ones if desired.</p>\n\n\n\n<h2 id=\"What_does_Django_code_look_like\">What does Django code look like?</h2>\n\n\n\n<p>In a traditional data-driven website, a&nbsp;web application waits for HTTP requests from the web browser (or other client). When a request is received the application works out what is needed based&nbsp;on the URL and possibly information in&nbsp;<code>POST</code>&nbsp;data or&nbsp;<code>GET</code>&nbsp;data. Depending on what is required it may then read or write information from a database or perform other tasks required to satisfy the request. The application will then return a response to the web browser, often dynamically creating an HTML page for the browser to display by inserting the retrieved data into placeholders in an HTML template.</p>\n\n\n\n<p>Django web applications typically group the code that handles each of these steps into separate files:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/07/image-2.jpg\" alt=\"\" class=\"wp-image-2579\"/></figure>\n\n\n\n<ul><li><strong>URLs:&nbsp;</strong>While it is possible to process requests from every single URL via a single function, it is much more maintainable to write a separate view function to handle each resource. A URL mapper is used to redirect HTTP requests to the appropriate view&nbsp;based on the request URL. The URL mapper can also match particular patterns of strings or digits that appear in a URL and pass these to a view function as data.</li><li><strong>View:</strong>&nbsp;A view is a&nbsp;request handler function, which receives HTTP requests and returns HTTP responses. Views access the data needed to satisfy requests via&nbsp;<em>models</em>, and delegate the formatting of&nbsp;the response to&nbsp;<em>templates</em>.</li><li><strong>Models:</strong>&nbsp;Models are Python objects that&nbsp;define&nbsp;the structure of an&nbsp;application&#8217;s data, and provide&nbsp;mechanisms to manage (add, modify, delete) and query records in the database.&nbsp;</li><li><strong>Templates:</strong>&nbsp;A&nbsp;template is a text file defining the structure or layout of a file (such as an HTML page), with placeholders used to represent actual content. A&nbsp;<em>view</em>&nbsp;can dynamically create an HTML page using an HTML template, populating it with data from a&nbsp;<em>model</em>. A template can be used to define the structure of any type of file; it doesn&#8217;t have to be HTML!</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django is a web application framework written in Python programming language. It is based on the MVT (Model View Template) design pattern. The Django is very demanding due to its rapid development feature. It takes less time to build applications after collecting client requirements. This framework uses a famous tag line:The web framework for perfectionists [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2128,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2844"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2844"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2844/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2128"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2844"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2844"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2844"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2845,
    "date": "2020-05-16T09:14:53",
    "date_gmt": "2020-05-16T09:14:53",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=814"
    },
    "modified": "2020-05-16T09:14:53",
    "modified_gmt": "2020-05-16T09:14:53",
    "slug": "features-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/features-2/",
    "title": {
      "rendered": "Features"
    },
    "content": {
      "rendered": "\n<ul><li>Rapid Development</li><li>Secure</li><li>Scalable</li><li>Fully loaded</li><li>Versatile</li><li>Open Source</li><li>Vast and Supported Community</li></ul>\n\n\n\n<h2>Rapid Development</h2>\n\n\n\n<p>Django was designed with the intention to make a framework which takes less time to build web application. The project implementation phase is a very time taken but Django creates it rapidly.</p>\n\n\n\n<h2>Secure</h2>\n\n\n\n<p>Django takes security seriously and helps developers to avoid many common security mistakes, such as SQL injection, cross-site scripting, cross-site request forgery etc. Its user authentication system provides a secure way to manage user accounts and passwords.</p>\n\n\n\n<h2>Scalable</h2>\n\n\n\n<p>Django is scalable in nature and has ability to quickly and flexibly switch from small to large scale application project.</p>\n\n\n\n<h2>Fully loaded</h2>\n\n\n\n<p>Django includes various helping task modules and libraries which can be used to handle common Web development tasks. Django takes care of user authentication, content administration, site maps, RSS feeds etc.</p>\n\n\n\n<h2>Versatile</h2>\n\n\n\n<p>Django is versatile in nature which allows it to build applications for different-different domains. Now a days, Companies are using Django to build various types of applications like: content management systems, social networks sites or scientific computing platforms etc.</p>\n\n\n\n<h2>Open Source</h2>\n\n\n\n<p>Django is an open source web application framework. It is publicly available without cost. It can be downloaded with source code from the public repository. Open source reduces the total cost of the application development.</p>\n\n\n\n<h2>Vast and Supported Community</h2>\n\n\n\n<p>Django is an one of the most popular web framework. It has widely supportive community and channels to share and connect.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Rapid Development Secure Scalable Fully loaded Versatile Open Source Vast and Supported Community Rapid Development Django was designed with the intention to make a framework which takes less time to build web application. The project implementation phase is a very time taken but Django creates it rapidly. Secure Django takes security seriously and helps developers [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2143,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2845"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2845"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2845/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2143"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2845"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2845"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2845"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2846,
    "date": "2020-05-16T09:15:34",
    "date_gmt": "2020-05-16T09:15:34",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=815"
    },
    "modified": "2020-05-16T09:15:34",
    "modified_gmt": "2020-05-16T09:15:34",
    "slug": "installation-7",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/installation-7/",
    "title": {
      "rendered": "Installation"
    },
    "content": {
      "rendered": "\n<h2>Installing Python 3</h2>\n\n\n\n<p>In order to use Django, you will have to install Python on your operating system.&nbsp;This tutorial briefly explains how you can check what versions of Python are present, and install new versions as needed, for Ubuntu Linux 18.04, macOS, and Windows 10.</p>\n\n\n\n<p><strong>Note</strong>: Depending on your platform, you may also be able to install Python/pip from the operating system&#8217;s own package manager or via other mechanisms. For most platforms, you can download the required installation files from&nbsp;<strong><em>https://www.python.org/downloads/</em></strong>&nbsp;and install them using the appropriate platform-specific method.</p>\n\n\n\n<h3 id=\"Ubuntu_18.04\">Ubuntu 18.04</h3>\n\n\n\n<p>Ubuntu Linux 18.04 LTS includes Python 3.6.6&nbsp;by default. You can confirm this by running the following command&nbsp;in the bash terminal:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><strong>python3 -V\n Python 3.6.6</strong></pre>\n\n\n\n<p>However, the Python Package Index tool you&#8217;ll need to install packages for Python 3 (including Django) is&nbsp;<strong>not&nbsp;</strong>available by default. You can install pip3 in the bash terminal using:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt install python3-pip\n</code></pre>\n\n\n\n<h3 id=\"macOS\">macOS</h3>\n\n\n\n<p>macOS &#8220;El Capitan&#8221; and other more recent versions do not include Python 3. You can confirm this by running the following commands in the bash terminal:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">python3 -V\n -bash: python3: command not found</pre>\n\n\n\n<p>You can easily install Python 3 (along with the&nbsp;<em>pip3</em>&nbsp;tool) from<a href=\"https://www.python.org/\">&nbsp;</a><strong><em>python.org</em></strong>:</p>\n\n\n\n<ol><li>Download the required installer:<ol><li>Go to&nbsp;<strong><em>https://www.python.org/downloads/</em></strong></li><li>Select the&nbsp;<strong>Download Python 3.8.2</strong>&nbsp;button (the exact minor version number may differ).</li></ol></li><li>Locate the file using&nbsp;<em>Finder</em>, and double-click the package file. Following the installation prompts.</li></ol>\n\n\n\n<p>You can now confirm successful installation by checking for the&nbsp;<em>Python 3</em>&nbsp;version as shown below:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">python3 -V\n Python 3.8.2\n</pre>\n\n\n\n<p>You can similarly check that&nbsp;<em>pip3</em>&nbsp;is installed by listing the available packages:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip3 list</code></pre>\n\n\n\n<h3 id=\"Windows_10\">Windows 10</h3>\n\n\n\n<p>Windows doesn&#8217;t include Python by default, but you can easily install it (along with the&nbsp;<em>pip3</em>&nbsp;tool) from<strong><em>&nbsp;python.org:</em></strong></p>\n\n\n\n<ol><li>Download the required installer:<ol><li>Go to&nbsp;<strong><em>https://www.python.org/downloads/</em></strong></li><li>Select the&nbsp;<strong>Download Python 3.8.2</strong>&nbsp;button (the exact minor version number may differ).</li></ol></li><li>Install Python by double-clicking on the downloaded file and following the installation prompts</li><li>Be sure to check the box labeled &#8220;Add Python to PATH&#8221;</li></ol>\n\n\n\n<p>You can then verify that&nbsp;Python 3 was installed by entering the following text into the command prompt:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">py -3 -V \n Python 3.8.2\n</pre>\n\n\n\n<p>The Windows installer&nbsp;incorporates&nbsp;<em>pip3</em>&nbsp;(the Python package manager)&nbsp;by default. You can list installed packages as shown:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">pip3 list\n</pre>\n\n\n\n<p>Note: The installer should set up everything you need for the above command to work. If however, you get a message that Python cannot be found, you may have forgotten to add it to your system path. You can do this by running the installer again, selecting &#8220;Modify&#8221;, and checking the box labeled &#8220;Add Python to environment variables&#8221; on the second page.</p>\n\n\n\n<h2 id=\"Using_Django_inside_a_Python_virtual_environment\">Using Django inside a Python virtual environment</h2>\n\n\n\n<p>The libraries we&#8217;ll use for creating our virtual environments are <strong><em>virtualenvwrapper</em></strong> (Linux and macOS) and <strong><em>virtualenvwrapper-win</em></strong> (Windows), which in turn both use the <strong><em>virtualenv</em></strong> tool. The wrapper tools creates a consistent interface for managing interfaces on all platforms.</p>\n\n\n\n<h3 id=\"Installing_the_virtual_environment_software\">Installing the virtual environment software</h3>\n\n\n\n<h4 id=\"Ubuntu_virtual_environment_setup\">Ubuntu virtual environment setup</h4>\n\n\n\n<p>After installing Python and pip you can install <em>virtualenvwrapper</em> (which includes <em>virtualenv</em>).</p>\n\n\n\n<p>Install the tool using&nbsp;<em>pip3</em>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo pip3 install virtualenvwrapper</code></pre>\n\n\n\n<p>Then add the following lines to the end of your shell startup file (this is a hidden file name&nbsp;<strong>.bashrc</strong>&nbsp;in your home directory). These set the location where the virtual environments should live, the location of your development project directories, and the location of the script installed with this package:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export WORKON_HOME=$HOME/.virtualenvs\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nexport VIRTUALENVWRAPPER_VIRTUALENV_ARGS=' -p /usr/bin/python3 '\nexport PROJECT_HOME=$HOME/Devel\nsource /usr/local/bin/virtualenvwrapper.sh</code></pre>\n\n\n\n<p><strong>Note</strong>: The <code><strong>VIRTUALENVWRAPPER_PYTHON</strong></code> and <code><strong>VIRTUALENVWRAPPER_VIRTUALENV_ARGS</strong> </code>variables point to the normal installation location for Python3, and <code><strong>source</strong> <strong>/usr/local/bin/virtualenvwrapper.sh</strong></code> points to the normal location of the <code><strong>virtualenvwrapper.sh</strong></code> script. If the <em>virtualenv</em> doesn&#8217;t work when you test it, one thing to check is that Python and the script are in the expected location (and then change the startup file appropriately).<br><br>You can find the correct locations for your system using the commands <code><strong>which virtualenvwrapper.sh</strong></code> and <code><strong>which python3</strong></code>.</p>\n\n\n\n<p>Then reload the startup file by running the following command in the terminal:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>source ~/.bashrc</code></pre>\n\n\n\n<p>At this point you should see a bunch of scripts being run as shown below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>virtualenvwrapper.user_scripts creating /home/ubuntu/.virtualenvs/premkproject\nvirtualenvwrapper.user_scripts creating /home/ubuntu/.virtualenvs/postmkproject\n...\nvirtualenvwrapper.user_scripts creating /home/ubuntu/.virtualenvs/preactivate\nvirtualenvwrapper.user_scripts creating /home/ubuntu/.virtualenvs/postactivate\nvirtualenvwrapper.user_scripts creating /home/ubuntu/.virtualenvs/get_env_details</code></pre>\n\n\n\n<p>Now you can create a new virtual environment with the <code><strong>mkvirtualenv</strong></code> command.</p>\n\n\n\n<h4 id=\"macOS_virtual_environment_setup\">macOS virtual environment setup</h4>\n\n\n\n<p>Setting up <em>virtualenvwrapper</em> on macOS is almost exactly the same as on Ubuntu.</p>\n\n\n\n<p>Install&nbsp;<em>virtualenvwrapper</em>&nbsp;(and bundling&nbsp;<em>virtualenv</em>) using&nbsp;<em>pip</em>&nbsp;as shown.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo pip3 install virtualenvwrapper</code></pre>\n\n\n\n<p>Then add the following lines to the end of your shell startup file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export WORKON_HOME=$HOME/.virtualenvs\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nexport PROJECT_HOME=$HOME/Devel\nsource /usr/local/bin/virtualenvwrapper.sh</code></pre>\n\n\n\n<p><strong>Note</strong>: The <code><strong>VIRTUALENVWRAPPER_PYTHON</strong></code> variable points to the normal installation location for Python3, and <code><strong>source /usr/local/bin/virtualenvwrapper.sh</strong></code> points to the normal location of the <code><strong>virtualenvwrapper.sh</strong></code> script. If the <em>virtualenv</em> doesn&#8217;t work when you test it, one thing to check is that Python and the script are in the expected location (and then change the startup file appropriately).</p>\n\n\n\n<p>For example, one installation test on macOS ended up with the following lines being necessary in the startup file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export WORKON_HOME=$HOME/.virtualenvs\nexport VIRTUALENVWRAPPER_PYTHON=/Library/Frameworks/Python.framework/Versions/3.7/bin/python3\nexport PROJECT_HOME=$HOME/Devel\nsource /Library/Frameworks/Python.framework/Versions/3.7/bin/virtualenvwrapper.sh</code></pre>\n\n\n\n<p>You can find the correct locations for your system using the commands&nbsp;<code>which virtualenvwrapper.sh</code>&nbsp;and&nbsp;<code>which python3</code>.</p>\n\n\n\n<p>These are the same lines as for Ubuntu, but the&nbsp;startup file is the differently named&nbsp;hidden file&nbsp;<strong>.bash_profile</strong>&nbsp;in your home directory.</p>\n\n\n\n<p><strong>Note</strong>: If you can&#8217;t find&nbsp;<strong>.bash_profile</strong>&nbsp;to edit in the finder, you can also open this in the terminal using nano.</p>\n\n\n\n<p>The commands look something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd ~  # Navigate to my home directory\nls -la #List the content of the directory. YOu should see .bash_profile\nnano .bash_profile # Open the file in the nano text editor, within the terminal\n# Scroll to the end of the file, and copy in the lines above\n# Use Ctrl+X to exit nano, Choose Y to save the file.</code></pre>\n\n\n\n<p>Then reload the startup file by making the following call in the terminal:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>source ~/.bash_profile</code></pre>\n\n\n\n<p>At this point, you may see a bunch of scripts being run (the same scripts as for the Ubuntu installation).&nbsp;You should now be able to&nbsp;create a new virtual environment with the&nbsp;<code>mkvirtualenv</code>&nbsp;command.</p>\n\n\n\n<h4 id=\"Windows_10_virtual_environment_setup\">Windows 10 virtual environment setup</h4>\n\n\n\n<p>Installing <strong><em>virtualenvwrapper-win</em></strong> is even simpler than setting up <em>virtualenvwrapper</em> because you don&#8217;t need to configure where the tool stores virtual environment information (there is a default value). All you need to do is run the following command in the command prompt:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip3 install virtualenvwrapper-win</code></pre>\n\n\n\n<p>Now you can create a new virtual environment with the&nbsp;<code>mkvirtualenv</code>&nbsp;command</p>\n\n\n\n<h3 id=\"Creating_a_virtual_environment\">Creating a virtual environment</h3>\n\n\n\n<p>Once you&#8217;ve installed&nbsp;<em>virtualenvwrapper</em>&nbsp;or&nbsp;<em>virtualenvwrapper-win</em>&nbsp;then working with virtual environments is very similar on all platforms.</p>\n\n\n\n<p>Now you can create a new virtual environment with the&nbsp;<code>mkvirtualenv</code>&nbsp;command. As this command runs you&#8217;ll see the environment being set up (what you see is slightly platform-specific). When the command completes the new virtual environment will be active — you can see this because the start of the prompt will be the name of the environment in brackets (below we show this for Ubuntu, but the final line is similar for Windows/macOS).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ mkvirtualenv my_django_environment\n\nRunning virtualenv with interpreter /usr/bin/python3\n...\nvirtualenvwrapper.user_scripts creating /home/ubuntu/.virtualenvs/t_env7/bin/get_env_details\n(my_django_environment) ubuntu@ubuntu:~$</code></pre>\n\n\n\n<p>Now you&#8217;re inside the virtual environment you can install Django and start developing.</p>\n\n\n\n<p><strong>Note</strong>: From now on in this article (and indeed the module) please assume that any commands are run within a Python virtual environment like the one we set up above.</p>\n\n\n\n<h3 id=\"Using_a_virtual_environment\">Using a virtual environment</h3>\n\n\n\n<p>There are just a few other useful commands that you should know (there are more in the tool documentation, but these are the ones you&#8217;ll use regularly):</p>\n\n\n\n<ul><li><code>deactivate</code> — Exit out of the current Python virtual environment</li><li><code>workon</code> — List available virtual environments</li><li><code>workon name_of_environment</code> — Activate the specified Python virtual environment</li><li><code>rmvirtualenv name_of_environment</code> — Remove the specified environment.</li></ul>\n\n\n\n<h2 id=\"Installing_Django\">Installing Django</h2>\n\n\n\n<p>Once you&#8217;ve created a virtual environment, and called&nbsp;<code>workon</code>&nbsp;to enter it, you can use&nbsp;<em>pip3&nbsp;</em>to install Django.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip3 install django~=3.0.8</code></pre>\n\n\n\n<p>You can test that Django is installed by running the following command (this just tests that Python can find the Django module):</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Linux/macOS\npython3 -m django --version\n 3.0.8\n\n# Windows\npy -3 -m django --version \n 3.0.8\n</code></pre>\n\n\n\n<p><strong>Note</strong>: If the above Windows command does not show a django module present, try:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>py -m django --version</code></pre>\n\n\n\n<p>In Windows&nbsp;<em>Python 3</em>&nbsp;scripts are launched by prefixing&nbsp;the command with&nbsp;<code>py -3</code>, although this can vary depending on your specific installation. Try omitting the&nbsp;<code>-3&nbsp;</code>modifier if you encounter any problems with commands. In&nbsp;Linux/macOS, the command is&nbsp;<code>python3.</code></p>\n\n\n\n<p><strong>Important</strong>: The rest of this&nbsp;<strong>module&nbsp;</strong>uses the&nbsp;<em>Linux</em>&nbsp;command for invoking Python 3&nbsp;(<code>python3</code>) . If you&#8217;re working on&nbsp;<em>Windows&nbsp;</em>simply replace this prefix with:&nbsp;<code>py -3</code></p>\n\n\n\n<h2 id=\"Testing_your_installation\">Testing your installation</h2>\n\n\n\n<p>The above test works, but it isn&#8217;t very much fun. A more interesting test is to create a skeleton project and see it working. To do this, first navigate in your command prompt/terminal to where you want to store your Django apps. Create a folder for your test site and navigate into it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mkdir django_installation_test\ncd django_installation_test\n</code></pre>\n\n\n\n<p>You can then create a new skeleton site called &#8220;<em>mytestsite</em>&#8221; using the&nbsp;<strong>django-admin</strong>&nbsp;tool as shown. After creating the site you can navigate into the folder where you will find the main script for managing projects, called&nbsp;<strong>manage.py</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>django-admin startproject mytestsite\ncd mytestsite</code></pre>\n\n\n\n<p>We can run the&nbsp;<em>development web server</em>&nbsp;from within this folder using&nbsp;<strong>manage.py</strong>&nbsp;and the&nbsp;<code>runserver</code>&nbsp;command, as shown.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py runserver \nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\n\nJuly 16, 2020 - 07:06:30\nDjango version 3.0.8, using settings 'mytestsite.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre>\n\n\n\n<p><strong>Note</strong>: The above command shows the Linux/macOS command. You can ignore the warnings about &nbsp;&#8220;15 unapplied migration(s)&#8221; at this point!</p>\n\n\n\n<p>Once the server is running you can view the site by navigating to the following URL on your local web browser: <code>http://127.0.0.1:8000/</code>.</p>\n\n\n\n<p>You now have a Django development environment up and running on your computer.</p>\n\n\n\n<p>In the testing section you also briefly saw how we can create a new Django website using&nbsp;<code>django-admin startproject</code>, and run it in your browser using the development web server (<code>python3 manage.py runserver</code>). In the next article, we expand on this process, building a simple but complete web application.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Installing Python 3 In order to use Django, you will have to install Python on your operating system.&nbsp;This tutorial briefly explains how you can check what versions of Python are present, and install new versions as needed, for Ubuntu Linux 18.04, macOS, and Windows 10. Note: Depending on your platform, you may also be able [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2130,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2846"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2846"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2846/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2130"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2846"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2846"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2846"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2847,
    "date": "2020-05-16T09:17:34",
    "date_gmt": "2020-05-16T09:17:34",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=818"
    },
    "modified": "2020-05-16T09:17:34",
    "modified_gmt": "2020-05-16T09:17:34",
    "slug": "project",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/project/",
    "title": {
      "rendered": "Project Structure"
    },
    "content": {
      "rendered": "\n<p>First, open a command prompt/terminal, make sure you are in your <strong><em>virtual environment</em></strong>, navigate to where you want to store your Django apps (make it somewhere easy to find like inside your <em>documents</em> folder), and create a folder for your new website (in this case: <em>my_django_projects</em>). Then enter into the folder using the cd command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mkdir my_django_projects \ncd my_django_projects </code></pre>\n\n\n\n<p>Create the new project&nbsp;using the&nbsp;<code>django-admin startproject</code>&nbsp;command&nbsp;as shown, and then navigate into the folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>django-admin startproject mydemoproject\ncd mydemoproject</code></pre>\n\n\n\n<p>The&nbsp;<code>django-admin</code>&nbsp;tool creates a folder/file structure as shown below:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><em>mydemoproject/</em>\n    manage.py\n    <em>mydemoproject/</em>\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n        asgi.py</pre>\n\n\n\n<p>Our current working directory should look something like this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">../my_django_projects/mydemoproject/</pre>\n\n\n\n<p>The <em>mydemoproject</em> project sub-folder is the entry point for the website:</p>\n\n\n\n<ul><li><strong>__init__.py&nbsp;</strong>is an empty file that instructs Python to treat this directory as a Python package.</li><li><strong>settings.py</strong>&nbsp;contains all the website settings. This is where we&nbsp;register any applications we create,&nbsp;the location of our static files, database configuration details, etc.&nbsp;&nbsp;</li><li><strong>urls.py</strong>&nbsp;defines the site URL-to-view mappings. While this could&nbsp;contain&nbsp;<em>all&nbsp;</em>the URL mapping code, it is more common to delegate some of the mappings to particular applications, as you&#8217;ll see later.</li><li><strong>wsgi.py</strong>&nbsp;is used to help your Django application communicate with the webserver. You can treat this as boilerplate.</li><li><strong>asgi.py</strong>&nbsp;is a standard for Python asynchronous web apps and servers to communicate with each other and positioned as an asynchronous successor to WSGI,&nbsp;where WSGI provided a standard for synchronous Python apps, ASGI provides one for both asynchronous and synchronous apps, with a WSGI backward-compatibility implementation and multiple servers and application frameworks.</li></ul>\n\n\n\n<p>The <strong>manage.py</strong> script is used to create applications, work with databases, and start the development web server. </p>\n\n\n\n<h2 id=\"Other_project_settings\">Other project settings</h2>\n\n\n\n<p>The <strong>settings.py</strong> file is also used for configuring a number of other settings, but at this point, you probably only want to change the TIME_ZONE. Change your <code>TIME_ZONE</code> value to one of these strings appropriate for your time zone, for example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>TIME_ZONE = 'Europe/London'</code></pre>\n\n\n\n<p>There are two other&nbsp;settings you won&#8217;t change now, but that you should be&nbsp;aware of:</p>\n\n\n\n<ul><li><code>SECRET_KEY</code>. This is a secret key that is used as part of Django&#8217;s website security strategy. If you&#8217;re not protecting this code in development, you&#8217;ll need to use a different code (perhaps read from an environment variable or file) when putting it into production. </li><li><code>DEBUG</code>. This enables debugging logs to be displayed on error, rather than HTTP status code responses. This should be set to <code>False</code> on production as debug information is useful for attackers, but for now, we can keep it set to <code>True</code>.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>First, open a command prompt/terminal, make sure you are in your virtual environment, navigate to where you want to store your Django apps (make it somewhere easy to find like inside your documents folder), and create a folder for your new website (in this case: my_django_projects). Then enter into the folder using the cd command: Create the new project&nbsp;using the&nbsp;django-admin [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2131,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2847"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2847"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2847/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2131"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2847"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2847"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2847"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2848,
    "date": "2020-05-16T09:21:41",
    "date_gmt": "2020-05-16T09:21:41",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=824"
    },
    "modified": "2020-05-16T09:21:41",
    "modified_gmt": "2020-05-16T09:21:41",
    "slug": "admin-interface",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/admin-interface/",
    "title": {
      "rendered": "Admin Interface"
    },
    "content": {
      "rendered": "\n<p>The Django admin&nbsp;<em>application</em>&nbsp;can use your models to automatically build a&nbsp;site area that&nbsp;you can use to create, view, update, and delete records. This can save you a lot of time during development, making it very easy to test your models and get a feel for whether you have the&nbsp;<em>right&nbsp;</em>data.&nbsp;The admin application&nbsp;can&nbsp;also&nbsp;be useful for managing data in production, depending on the type of website. The Django project recommends it only for internal data management (i.e. just for use by admins, or people internal to your organization), as the model-centric approach is&nbsp;not necessarily the best possible interface for all users, and exposes a lot of unnecessary detail about the models.&nbsp;</p>\n\n\n\n<p>All the configuration required to include the admin application on your website was done automatically. As a result, all you must do to add your models to the admin application is to register them. At the end of this tutorial, we&#8217;ll provide a brief demonstration of how you might further configure the admin area to better display our model data.</p>\n\n\n\n<p>Let&#8217;s see how to activate and use Django&#8217;s admin module (interface).</p>\n\n\n\n<p>The admin app&nbsp;<strong>(django.contrib.admin)</strong>&nbsp;is enabled by default and already added into INSTALLED_APPS section of the settings file.</p>\n\n\n\n<p>To access it at browser use &#8216;/<strong>admin</strong>/&#8217; at a local machine like&nbsp;<strong>localhost:8000</strong>/<strong>admin</strong>/ and it shows the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin-interface.png\" alt=\"Django Admin Interface\"/></figure>\n\n\n\n<p>It prompts for login credentials if no password is created yet, use the following command to create a user.</p>\n\n\n\n<h2>Create an Admin User</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 managen.py createsuperuser  </code></pre>\n\n\n\n<p>Now start development server and access admin login.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py runserver  </code></pre>\n\n\n\n<p>Provide created username and password and login.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin-interface2.png\" alt=\"django admin interface 2\"/></figure>\n\n\n\n<p>After login successfully, it shows the following interface.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin-interface3.png\" alt=\"django admin interface 3\"/></figure>\n\n\n\n<p>It is a Django Admin Dashboard. Here, we can add and update the registered models. The model registration process will be discussed in further chapters.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Django admin&nbsp;application&nbsp;can use your models to automatically build a&nbsp;site area that&nbsp;you can use to create, view, update, and delete records. This can save you a lot of time during development, making it very easy to test your models and get a feel for whether you have the&nbsp;right&nbsp;data.&nbsp;The admin application&nbsp;can&nbsp;also&nbsp;be useful for managing data in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2134,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2848"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2848"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2848/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2134"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2848"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2848"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2848"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 825,
    "date": "2020-05-16T09:23:56",
    "date_gmt": "2020-05-16T09:23:56",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=825"
    },
    "modified": "2020-05-16T09:23:56",
    "modified_gmt": "2020-05-16T09:23:56",
    "slug": "app",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/app/",
    "title": {
      "rendered": "App"
    },
    "content": {
      "rendered": "\n<p>In the previous topics, we have seen a procedure to create a Django project. Now, in this topic, we will create app inside the created project.</p>\n\n\n\n<p>Django application consists of project and app, it also generates an automatic base directory for the app, so we can focus on writing code (business logic) rather than creating app directories.</p>\n\n\n\n<p>The difference between a project and app is, a project is a collection of configuration files and apps whereas the app is a web application which is written to perform business logic.</p>\n\n\n\n<h2>Creating an App</h2>\n\n\n\n<p>To create an app, we can use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py startapp appname  </code></pre>\n\n\n\n<h3>Django App Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py startapp myapp  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-app.png\" alt=\"django app\"/></figure>\n\n\n\n<p>See the directory structure of the created app, it contains the&nbsp;<strong>migrations</strong>&nbsp;folder to store migration files and model to write business logic.</p>\n\n\n\n<p>Initially, all the files are empty, no code is available but we can use these to implement business logic on the basis of the MVC design pattern.</p>\n\n\n\n<p>To run this application, we need to make some significant changes which display&nbsp;<strong>hello world</strong>&nbsp;message on the browser.</p>\n\n\n\n<p>Open&nbsp;<strong>views.py</strong>&nbsp;file in any text editor and write the given code to it and do the same for&nbsp;<strong>urls.py</strong>&nbsp;file too.</p>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \n  \n# Create your views here.  \nfrom django.http import HttpResponse  \n  \ndef hello(request):  \n    return HttpResponse(\"&lt;h2>Hello, Welcome to Django!&lt;/h2>\")</code></pre>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom myapp import views  \n  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('hello/', views.hello),  \n]  </code></pre>\n\n\n\n<p>We have made changes in two files of the application. Now, let&#8217;s run the it by using the following command. This command will start the server at port 8000.</p>\n\n\n\n<h3>Run the Application</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py runserver  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-app1.png\" alt=\"django app 1\"/></figure>\n\n\n\n<p>Open any web browser and enter the URL&nbsp;<strong>localhost:8000/hello</strong>. It will show the output given below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-app2.png\" alt=\"django app 2\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the previous topics, we have seen a procedure to create a Django project. Now, in this topic, we will create app inside the created project. Django application consists of project and app, it also generates an automatic base directory for the app, so we can focus on writing code (business logic) rather than creating [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2135,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/825"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=825"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/825/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2135"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=825"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=825"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=825"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 826,
    "date": "2020-05-16T09:24:41",
    "date_gmt": "2020-05-16T09:24:41",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=826"
    },
    "modified": "2020-05-16T09:24:41",
    "modified_gmt": "2020-05-16T09:24:41",
    "slug": "mvt",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/mvt/",
    "title": {
      "rendered": "MVT"
    },
    "content": {
      "rendered": "\n<p>The MVT (Model View Template) is a software design pattern. It is a collection of three important components Model View and Template. The Model helps to handle database. It is a data access layer which handles the data.</p>\n\n\n\n<p>The Template is a presentation layer which handles User Interface part completely. The View is used to execute the business logic and interact with a model to carry data and renders a template.</p>\n\n\n\n<p>Although Django follows MVC pattern but maintains it?s own conventions. So, control is handled by the framework itself.</p>\n\n\n\n<p>There is no separate controller and complete application is based on Model View and Template. That?s why it is called MVT application.</p>\n\n\n\n<p>See the following graph that shows the MVT based control flow.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-mvt-based-control-flow.png\" alt=\"Django MVT based control flow\"/></figure>\n\n\n\n<p>Here, a user&nbsp;<strong>requests</strong>&nbsp;for a resource to the Django, Django works as a controller and check to the available resource in URL.</p>\n\n\n\n<p>If URL maps,&nbsp;<strong>a view is called</strong>&nbsp;that interact with model and template, it renders a template.</p>\n\n\n\n<p>Django responds back to the user and sends a template as a&nbsp;<strong>response</strong>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The MVT (Model View Template) is a software design pattern. It is a collection of three important components Model View and Template. The Model helps to handle database. It is a data access layer which handles the data. The Template is a presentation layer which handles User Interface part completely. The View is used to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2136,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/826"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=826"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/826/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2136"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=826"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=826"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=826"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 827,
    "date": "2020-05-16T09:28:40",
    "date_gmt": "2020-05-16T09:28:40",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=827"
    },
    "modified": "2020-05-16T09:28:40",
    "modified_gmt": "2020-05-16T09:28:40",
    "slug": "model",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/model/",
    "title": {
      "rendered": "Model"
    },
    "content": {
      "rendered": "\n<p>In Django, a model is a class which is used to contain essential fields and methods. Each model class maps to a single table in the database.</p>\n\n\n\n<p>Django Model is a subclass of&nbsp;<strong>django.db.models.Model</strong>&nbsp;and each field of the model class represents a database field (column).</p>\n\n\n\n<p>Django provides us a database-abstraction API which allows us to create, retrieve, update and delete a record from the mapped table.</p>\n\n\n\n<p>Model is defined in&nbsp;<strong>Models.py</strong>&nbsp;file. This file can contain multiple models.</p>\n\n\n\n<p>Let&#8217;s see an example here, we are creating a model&nbsp;<strong>Employee</strong>&nbsp;which has two fields&nbsp;<strong>first_name</strong>&nbsp;and&nbsp;<strong>last_name</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import models  \n  \nclass Employee(models.Model):  \n    first_name = models.CharField(max_length=30)  \n    last_name = models.CharField(max_length=30)  </code></pre>\n\n\n\n<p>The&nbsp;<strong>first_name</strong>&nbsp;and&nbsp;<strong>last_name</strong>&nbsp;fields are specified as class attributes and each attribute maps to a database column.</p>\n\n\n\n<p>This model will create a table into the database that looks like below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE appname_employee (  \n    \"id\" INT NOT NULL PRIMARY KEY,  \n    \"first_name\" varchar(30) NOT NULL,  \n    \"last_name\" varchar(30) NOT NULL  \n);  </code></pre>\n\n\n\n<p>The created table contains an auto-created&nbsp;<strong>id field</strong>. The name of the table is a combination of app name and model name that can be changed further.</p>\n\n\n\n<h2>Register / Use Model</h2>\n\n\n\n<p>After creating a model, register model into the&nbsp;<strong>INSTALLED_APPS</strong>&nbsp;inside&nbsp;<strong>settings.py.</strong></p>\n\n\n\n<p><strong>For example,</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>INSTALLED_APPS = &#91;  \n    #...  \n    'appname',  \n    #...  \n]  </code></pre>\n\n\n\n<h2>Django Model Fields</h2>\n\n\n\n<p>The fields defined inside the Model class are the columns name of the mapped table. The fields name should not be python reserve words like clean, save or delete etc.</p>\n\n\n\n<p>Django provides various built-in fields types.</p>\n\n\n\n<table><tbody><tr><th>Field Name</th><th>Class</th><th>Particular</th></tr><tr><td>AutoField</td><td>class AutoField(**options)</td><td>It An IntegerField that automatically increments.</td></tr><tr><td>BigAutoField</td><td>class BigAutoField(**options)</td><td>It is a 64-bit integer, much like an AutoField except that it is guaranteed to fit numbers from 1 to 9223372036854775807.</td></tr><tr><td>BigIntegerField</td><td>class BigIntegerField(**options)</td><td>It is a 64-bit integer, much like an IntegerField except that it is guaranteed to fit numbers from -9223372036854775808 to 9223372036854775807.</td></tr><tr><td>BinaryField</td><td>class BinaryField(**options)</td><td>A field to store raw binary data.</td></tr><tr><td>BooleanField</td><td>class BooleanField(**options)</td><td>A true/false field. The default form widget for this field is a CheckboxInput.</td></tr><tr><td>CharField</td><td>class DateField(auto_now=False, auto_now_add=False, **options)</td><td>It is a date, represented in Python by a datetime.date instance.</td></tr><tr><td>DateTimeField</td><td>class DateTimeField(auto_now=False, auto_now_add=False, **options)</td><td>It is a date, represented in Python by a datetime.date instance.</td></tr><tr><td>DateTimeField</td><td>class DateTimeField(auto_now=False, auto_now_add=False, **options)</td><td>It is used for date and time, represented in Python by a datetime.datetime instance.</td></tr><tr><td>DecimalField</td><td>class DecimalField(max_digits=None, decimal_places=None, **options)</td><td>It is a fixed-precision decimal number, represented in Python by a Decimal instance.</td></tr><tr><td>DurationField</td><td>class DurationField(**options)</td><td>A field for storing periods of time.</td></tr><tr><td>EmailField</td><td>class EmailField(max_length=254, **options)</td><td>It is a CharField that checks that the value is a valid email address.</td></tr><tr><td>FileField</td><td>class FileField(upload_to=None, max_length=100, **options)</td><td>It is a file-upload field.</td></tr><tr><td>FloatField</td><td>class FloatField(**options)</td><td>It is a floating-point number represented in Python by a float instance.</td></tr><tr><td>ImageField</td><td>class ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options)</td><td>It inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.</td></tr><tr><td>IntegerField</td><td>class IntegerField(**options)</td><td>It is an integer field. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.</td></tr><tr><td>NullBooleanField</td><td>class NullBooleanField(**options)</td><td>Like a BooleanField, but allows NULL as one of the options.</td></tr><tr><td>PositiveIntegerField</td><td>class PositiveIntegerField(**options)</td><td>Like an IntegerField, but must be either positive or zero (0). Values from 0 to 2147483647 are safe in all databases supported by Django.</td></tr><tr><td>SmallIntegerField</td><td>class SmallIntegerField(**options)</td><td>It is like an IntegerField, but only allows values under a certain (database-dependent) point.</td></tr><tr><td>TextField</td><td>class TextField(**options)</td><td>A large text field. The default form widget for this field is a Textarea.</td></tr><tr><td>TimeField</td><td>class TimeField(auto_now=False, auto_now_add=False, **options)</td><td>A time, represented in Python by a datetime.time instance.</td></tr></tbody></table>\n\n\n\n<h3>Django Model Fields Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>first_name = models.CharField(max_length=50) # for creating varchar column  \nrelease_date = models.DateField()                        # for creating date column  \nnum_stars = models.IntegerField()                       # for creating integer column  </code></pre>\n\n\n\n<h2>Field Options</h2>\n\n\n\n<p>Each field requires some arguments that are used to set column attributes. For example, CharField requires mac_length to specify varchar database.</p>\n\n\n\n<p>Common arguments available to all field types. All are optional.</p>\n\n\n\n<table><tbody><tr><th>Field Options</th><th>Particulars</th></tr><tr><td>Null</td><td>Django will store empty values as NULL in the database.</td></tr><tr><td>Blank</td><td>It is used to allowed field to be blank.</td></tr><tr><td>Choices</td><td>An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field.</td></tr><tr><td>Default</td><td>The default value for the field. This can be a value or a callable object.</td></tr><tr><td>help_text</td><td>Extra &#8220;help&#8221; text to be displayed with the form widget. It&#8217;s useful for documentation even if your field isn&#8217;t used on a form.</td></tr><tr><td>primary_key</td><td>This field is the primary key for the model.</td></tr><tr><td>Unique</td><td>This field must be unique throughout the table.</td></tr></tbody></table>\n\n\n\n<h3>Django Model Example</h3>\n\n\n\n<p>We created a model Student that contains the following code in&nbsp;<strong>models.py</strong>&nbsp;file.</p>\n\n\n\n<p><strong>//models.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student(models.Model):  \n    first_name = models.CharField(max_length=20)  \n    last_name  = models.CharField(max_length=30)  \n    contact    = models.IntegerField()  \n    email      = models.EmailField(max_length=50)  \n    age        = models.IntegerField()  </code></pre>\n\n\n\n<p>After that apply migration by using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python3 manage.py makemigrations myapp  </code></pre>\n\n\n\n<p>It will create a table&nbsp;<strong>myapp_student</strong>. The table structure looks like the below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-model.png\" alt=\"django model\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Django, a model is a class which is used to contain essential fields and methods. Each model class maps to a single table in the database. Django Model is a subclass of&nbsp;django.db.models.Model&nbsp;and each field of the model class represents a database field (column). Django provides us a database-abstraction API which allows us to create, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2137,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/827"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=827"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/827/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2137"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=827"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=827"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=827"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4554,
    "date": "2020-05-16T09:31:48",
    "date_gmt": "2020-05-16T09:31:48",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=832"
    },
    "modified": "2020-05-16T09:31:48",
    "modified_gmt": "2020-05-16T09:31:48",
    "slug": "views-5",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/views-5/",
    "title": {
      "rendered": "Views"
    },
    "content": {
      "rendered": "\n<p>A view is a place where we put our business logic of the application. The view is a python function which is used to perform some business logic and return a response to the user. This response can be the HTML contents of a Web page, or a redirect, or a 404 error.</p>\n\n\n\n<p>All the view function are created inside the&nbsp;<strong>views.py</strong>&nbsp;file of the Django app.</p>\n\n\n\n<h3>Django View Simple Example</h3>\n\n\n\n<p><strong>//views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import datetime  \n# Create your views here.  \nfrom django.http import HttpResponse  \ndef index(request):  \n    now = datetime.datetime.now()  \n    html = \"&lt;html>&lt;body>&lt;h3>Now time is %s.&lt;/h3>&lt;/body>&lt;/html>\" % now  \n    return HttpResponse(html)    # rendering the template in HttpResponse </code></pre>\n\n\n\n<p>Let&#8217;s step through the code.</p>\n\n\n\n<p>First, we will import DateTime library that provides a method to get current date and time and HttpResponse class.</p>\n\n\n\n<p>Next, we define a view function index that takes HTTP request and respond back.</p>\n\n\n\n<p>View calls when gets mapped with URL in&nbsp;<strong>urls.py.</strong>&nbsp;For example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>path('index/', views.index),  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-views.png\" alt=\"django views\"/></figure>\n\n\n\n<h2>Returning Errors</h2>\n\n\n\n<p>Django provides various built-in error classes that are the subclass of&nbsp;<strong>HttpResponse</strong>&nbsp;and use to show error message as HTTP response. Some classes are listed below.</p>\n\n\n\n<table><tbody><tr><th>Class</th><th>Description</th></tr><tr><td>class HttpResponseNotModified</td><td>It is used to designate that a page hasn&#8217;t been modified since the user&#8217;s last request (status code 304).</td></tr><tr><td>class HttpResponseBadRequest</td><td>It acts just like HttpResponse but uses a 400 status code.</td></tr><tr><td>class HttpResponseNotFound</td><td>It acts just like HttpResponse but uses a 404 status code.</td></tr><tr><td>class HttpResponseNotAllowed</td><td>It acts just like HttpResponse but uses a 410 status code.</td></tr><tr><td>HttpResponseServerError</td><td>It acts just like HttpResponse but uses a 500 status code.</td></tr></tbody></table>\n\n\n\n<h3>Django View Example</h3>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \n# Create your views here.  \nfrom django.http import HttpResponse, HttpResponseNotFound  \ndef index(request):  \n    a = 1  \n    if a:  \n        return HttpResponseNotFound('&lt;h1>Page not found&lt;/h1>')  \n    else:  \n        return HttpResponse('&lt;h1>Page was found&lt;/h1>') # rendering the template in HttpResponse </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-views1.png\" alt=\"django views 1\"/></figure>\n\n\n\n<h2>Django View HTTP Decorators</h2>\n\n\n\n<p>HTTP Decorators are used to restrict access to view based on the request method.</p>\n\n\n\n<p>These decorators are listed in django.views.decorators.http and return a django.http.HttpResponseNotAllowed if the conditions are not met.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>require_http_methods(request_method_list)</code></pre>\n\n\n\n<h3>Django Http Decorator Example</h3>\n\n\n\n<p><strong>//views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \n# Create your views here.  \nfrom django.http import HttpResponse, HttpResponseNotFound  \nfrom django.views.decorators.http import require_http_methods  \n@require_http_methods(&#91;\"GET\"])  \ndef show(request):  \n    return HttpResponse('&lt;h1>This is Http GET request.&lt;/h1>')</code></pre>\n\n\n\n<p>This method will execute only if the request is an HTTP GET request.</p>\n\n\n\n<p><strong>//urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom myapp import views  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('index/', views.index),  \n    path('show/',  views.show),  \n]  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-views2.png\" alt=\"django views 2\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A view is a place where we put our business logic of the application. The view is a python function which is used to perform some business logic and return a response to the user. This response can be the HTML contents of a Web page, or a redirect, or a 404 error. All the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2138,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4554"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4554"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4554/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2138"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4554"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4554"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4554"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 833,
    "date": "2020-05-16T09:39:24",
    "date_gmt": "2020-05-16T09:39:24",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=833"
    },
    "modified": "2020-05-16T09:39:24",
    "modified_gmt": "2020-05-16T09:39:24",
    "slug": "templates-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/templates-2/",
    "title": {
      "rendered": "Templates"
    },
    "content": {
      "rendered": "\n<p>Django provides a convenient way to generate dynamic HTML pages by using its template system.</p>\n\n\n\n<p>A template consists of static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted.</p>\n\n\n\n<h2>Why Django Template?</h2>\n\n\n\n<p>In HTML file, we can&#8217;t write python code because the code is only interpreted by python interpreter not the browser. We know that HTML is a static markup language, while Python is a dynamic programming language.</p>\n\n\n\n<p>Django template engine is used to separate the design from the python code and allows us to build dynamic web pages.</p>\n\n\n\n<h2>Django Template Configuration</h2>\n\n\n\n<p>To configure the template system, we have to provide some entries in&nbsp;<strong>settings.py</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>TEMPLATES = &#91;  \n    {  \n        'BACKEND': 'django.template.backends.django.DjangoTemplates',  \n        'DIRS': &#91;os.path.join(BASE_DIR,'templates')],  \n        'APP_DIRS': True,  \n        'OPTIONS': {  \n            'context_processors': &#91;  \n                'django.template.context_processors.debug',  \n                'django.template.context_processors.request',  \n                'django.contrib.auth.context_processors.auth',  \n                'django.contrib.messages.context_processors.messages',  \n            ],  \n        },  \n    },  \n]  </code></pre>\n\n\n\n<p>Here, we mentioned that our template directory name is&nbsp;<strong>templates</strong>. By default, DjangoTemplates looks for a&nbsp;<strong>templates</strong>&nbsp;subdirectory in each of the INSTALLED_APPS.</p>\n\n\n\n<h3>Django Template Simple Example</h3>\n\n\n\n<p>First, create a directory <strong>templates</strong> inside the project app as we did below.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/07/django-templates-1024x511.png\" alt=\"\" class=\"wp-image-2369\"/></figure>\n\n\n\n<p>After that create a template&nbsp;<strong>index.html</strong>&nbsp;inside the created folder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-templates1.png\" alt=\"django templates 1\"/></figure>\n\n\n\n<p>Our template&nbsp;<strong>index.html</strong>&nbsp;contains the following code.</p>\n\n\n\n<p><strong>// index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n&lt;/head>  \n&lt;body>  \n&lt;h2>Welcome to Django!!!&lt;/h2>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<h2>Loading Template</h2>\n\n\n\n<p>To load the template, call get_template() method as we did below and pass template name.</p>\n\n\n\n<p><strong>//views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \n#importing loading from django template  \nfrom django.template import loader  \n# Create your views here.  \nfrom django.http import HttpResponse  \ndef index(request):  \n   template = loader.get_template('index.html') # getting our template  \n   return HttpResponse(template.render())       # rendering the template in HttpResponse </code></pre>\n\n\n\n<p>Set a URL to access the template from the browser.</p>\n\n\n\n<p><strong>//urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>path('index/', views.index),  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Register app inside the INSTALLED_APPS</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>INSTALLED_APPS = &#91;  \n    'django.contrib.admin',  \n    'django.contrib.auth',  \n    'django.contrib.contenttypes',  \n    'django.contrib.sessions',  \n    'django.contrib.messages',  \n    'django.contrib.staticfiles',  \n    'myapp'  \n] </code></pre>\n\n\n\n<h2>Run Server</h2>\n\n\n\n<p>Execute the following command and access the template by entering&nbsp;<strong>localhost:8000/index</strong>&nbsp;at the browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py runserver  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-templates2.png\" alt=\"django templates 2\"/></figure>\n\n\n\n<h2>Django Template Language</h2>\n\n\n\n<p>Django template uses its own syntax to deal with variable, tags, expressions etc. A template is rendered with a context which is used to get value at a web page. See the examples.</p>\n\n\n\n<h2>Variables</h2>\n\n\n\n<p>Variables associated with a context can be accessed by {{}} (double curly braces). For example, a variable name value is saqib. Then the following statement will replace name with its value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>My name is {{name}}.   \nMy name is saqib  </code></pre>\n\n\n\n<h3>Django Variable Example</h3>\n\n\n\n<p><strong>//views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \n#importing loading from django template  \nfrom django.template import loader  \n# Create your views here.  \nfrom django.http import HttpResponse  \ndef index(request):  \n    template = loader.get_template('index.html') # getting our template  \n    name = {  \n        'student':'rahul'  \n    }  \n    return HttpResponse(template.render(name))       # rendering the template in HttpResponse </code></pre>\n\n\n\n<p><strong>//index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n&lt;/head>  \n&lt;body>  \n&lt;h2>Welcome to Django!!!&lt;/h2>  \n&lt;h3>My Name is: {{ student }}&lt;/h3>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<h2>Tags</h2>\n\n\n\n<p>In a template, Tags provide arbitrary logic in the rendering process. For example, a tag can output content, serve as a control structure e.g. an &#8220;if&#8221; statement or a &#8220;for&#8221; loop, grab content from a database etc.</p>\n\n\n\n<p>Tags are surrounded by {% %} braces. For example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% csrf_token %}  \n  \n{% if user.is_authenticated %}  \n    Hello, {{ user.username }}.  \n{% endif %}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django provides a convenient way to generate dynamic HTML pages by using its template system. A template consists of static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted. Why Django Template? In HTML file, we can&#8217;t write python code because the code is only [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2100,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/833"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=833"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/833/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2100"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=833"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=833"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=833"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4555,
    "date": "2020-05-16T09:43:47",
    "date_gmt": "2020-05-16T09:43:47",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=834"
    },
    "modified": "2020-05-16T09:43:47",
    "modified_gmt": "2020-05-16T09:43:47",
    "slug": "url-mapping",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/url-mapping/",
    "title": {
      "rendered": "URL Mapping"
    },
    "content": {
      "rendered": "\n<p>Well, till here, we have learned to create a model, view, and template. Now, we will learn about the routing of application.</p>\n\n\n\n<p>Since Django is a web application framework, it gets user requests by URL locater and responds back. To handle URL,&nbsp;<strong>django.urls</strong>&nbsp;module is used by the framework.</p>\n\n\n\n<p>Let&#8217;s open the file&nbsp;<strong>urls.py</strong>&nbsp;of the project and see the what it looks like:</p>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \n  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n] </code></pre>\n\n\n\n<p>See, Django already has mentioned a URL here for the admin. The path function takes the first argument as a route of string or regex type.</p>\n\n\n\n<p>The view argument is a view function which is used to return a response (template) to the user.</p>\n\n\n\n<p>The&nbsp;<strong>django.urls</strong>&nbsp;module contains various functions,&nbsp;<strong>path(route,view,kwargs,name)</strong>&nbsp;is one of those which is used to map the URL and call the specified view.</p>\n\n\n\n<h2>Django URL Functions</h2>\n\n\n\n<p>Here, we are giving some commonly used functions for URL handling and mapping.</p>\n\n\n\n<table><tbody><tr><th>Name</th><th>Description</th><th>Example</th></tr><tr><td>path(route, view, kwargs=None, name=None)</td><td>It returns an element for inclusion in urlpatterns.</td><td>path(&#8216;index/&#8217;, views.index, name=&#8217;main-view&#8217;)</td></tr><tr><td>re_path(route, view, kwargs=None, name=None)</td><td>It returns an element for inclusion in urlpatterns.</td><td>re_path(r&#8217;^index/$&#8217;, views.index, name=&#8217;index&#8217;),</td></tr><tr><td>include(module, namespace=None)</td><td>It is a function that takes a full Python import path to another URLconf module that should be &#8220;included&#8221; in this place.</td><td></td></tr><tr><td>register_converter(converter, type_name)</td><td>It is used for registering a converter for use in path() routes.</td><td></td></tr></tbody></table>\n\n\n\n<p>Let&#8217;s see an example that gets user request and map that route to call specified view function. Have a look at the steps.</p>\n\n\n\n<p>1. Create a function&nbsp;<strong>hello</strong>&nbsp;in the views.py file. This function will be mapped from the url.py file.</p>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render    \n# Create your views here.    \nfrom django.http import HttpResponse, HttpResponseNotFound    \nfrom django.views.decorators.http import require_http_methods    \n@require_http_methods(&#91;\"GET\"])    \ndef hello(request):    \n    return HttpResponse('&lt;h1>This is Http GET request.&lt;/h1>')    </code></pre>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin    \nfrom django.urls import path    \nfrom myapp import views    \nurlpatterns = &#91;    \n    path('admin/', admin.site.urls),    \n    path('index/', views.index),    \n    path('hello/',  views.hello),    \n]  </code></pre>\n\n\n\n<p>Now, start the server and enter&nbsp;<strong>localhost:8000/hello</strong>&nbsp;to the browser. This URL will be mapped into the list of URLs and then call the corresponding function from the views file.</p>\n\n\n\n<p>In this example, hello will be mapped and call hello function from the views file. It is called URL mapping.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Well, till here, we have learned to create a model, view, and template. Now, we will learn about the routing of application. Since Django is a web application framework, it gets user requests by URL locater and responds back. To handle URL,&nbsp;django.urls&nbsp;module is used by the framework. Let&#8217;s open the file&nbsp;urls.py&nbsp;of the project and see [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2101,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4555"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4555"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4555/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2101"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4555"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4555"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4555"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 835,
    "date": "2020-05-16T09:51:38",
    "date_gmt": "2020-05-16T09:51:38",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=835"
    },
    "modified": "2020-05-16T09:51:38",
    "modified_gmt": "2020-05-16T09:51:38",
    "slug": "static-files-handling",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/static-files-handling/",
    "title": {
      "rendered": "Static Files Handling"
    },
    "content": {
      "rendered": "\n<p>In a web application, apart from business logic and data handling, we also need to handle and manage static resources like CSS, JavaScript, images etc.</p>\n\n\n\n<p>It is important to manage these resources so that it does not affect our application performance.</p>\n\n\n\n<p>Django deals with it very efficiently and provides a convenient manner to use resources.</p>\n\n\n\n<p>The&nbsp;<strong>django.contrib.staticfiles</strong>&nbsp;module helps to manage them.</p>\n\n\n\n<h2>Django Static (CSS, JavaScript, images) Configuration</h2>\n\n\n\n<p>1. Include the&nbsp;<strong>django.contrib.staticfiles</strong>&nbsp;in&nbsp;<strong>INSTALLED_APPS.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>INSTALLED_APPS = &#91;  \n    'django.contrib.admin',  \n    'django.contrib.auth',  \n    'django.contrib.contenttypes',  \n    'django.contrib.sessions',  \n    'django.contrib.messages',  \n    'django.contrib.staticfiles',  \n    'myapp'  \n]  </code></pre>\n\n\n\n<p>2. Define STATIC_URL in settings.py file as given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>STATIC_URL = '/static/'  </code></pre>\n\n\n\n<p>3. Load static files in the templates by using the below expression.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% load static %}  </code></pre>\n\n\n\n<p>4. Store all images, JavaScript, CSS files in a&nbsp;<strong>static</strong>&nbsp;folder of the application. First create a directory&nbsp;<strong>static,</strong>&nbsp;store the files inside it.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-static-files-handling.png\" alt=\"django static files handling\"/></figure>\n\n\n\n<p>Our project structure looks like this.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-static-files-handling1.png\" alt=\"django static files handling 1\"/></figure>\n\n\n\n<h3>Django Image Loading Example</h3>\n\n\n\n<p>To load an image in a template file, use the code given below.</p>\n\n\n\n<p><strong>// index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n     {% load static %}  \n&lt;/head>  \n&lt;body>  \n&lt;img src=\"{% static '/wallpaper.jpeg' %}\" alt=\"My image\" height=\"300px\" width=\"700px\"/>  \n&lt;/body>  \n&lt;/html>   </code></pre>\n\n\n\n<p><strong>//urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom myapp import views  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('index/', views.index),  \n] </code></pre>\n\n\n\n<p><strong>//views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def index(request):  \n    return render(request,'index.html')   </code></pre>\n\n\n\n<p>Run the server by using&nbsp;<strong>python manage.py runserver</strong>&nbsp;command.</p>\n\n\n\n<p>After that access the template by&nbsp;<strong>localhost:8000/index</strong>&nbsp;URL, and it will produce the following output to the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-static-files-handling2.png\" alt=\"django static files handling 2\"/></figure>\n\n\n\n<h2>Django Loading JavaScript</h2>\n\n\n\n<p>To load JavaScript file, just add the following line of code in&nbsp;<strong>index.html</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% load static %}  \n   &lt;script src=\"{% static '/js/script.js' %}\"  </code></pre>\n\n\n\n<p><strong>// index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n     {% load static %}  \n    &lt;script src=\"{% static '/js/script.js' %}\" type=\"text/javascript\">&lt;/script>  \n&lt;/head>  \n&lt;body>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<p><strong>// script.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>alert(\"Hello, Welcome to Codemeals\");  </code></pre>\n\n\n\n<p>Now, our project structure looks like this:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-static-files-handling3.png\" alt=\"django static files handling 3\"/></figure>\n\n\n\n<p>Run the server by using&nbsp;<strong>python manage.py runserver</strong>&nbsp;command.</p>\n\n\n\n<p>After that access the template by&nbsp;<strong>localhost:8000/index</strong>&nbsp;URL, and it will produce the following output to the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-static-files-handling4.png\" alt=\"django static files handling 4\"/></figure>\n\n\n\n<h3>Django Loading CSS Example</h3>\n\n\n\n<p>To, load CSS file, use the following code in&nbsp;<strong>index.html</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% load static %}  \n&lt;link href=\"{% static 'css/style.css' %}\" rel=\"stylesheet\"> </code></pre>\n\n\n\n<p>After that create a directory CSS and file style.css which contains the following code.</p>\n\n\n\n<p><strong>// style.css</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>h1{  \ncolor:red;  \n}    </code></pre>\n\n\n\n<p>Our project structure looks like this:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-static-files-handling5.png\" alt=\"django static files handling 5\"/></figure>\n\n\n\n<p><strong>// index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n     {% load static %}  \n    &lt;link href=\"{% static 'css/style.css' %}\" rel=\"stylesheet\">  \n&lt;/head>  \n&lt;body>  \n&lt;h1>Welcome to Codemeals&lt;/h1>  \n&lt;/body>  \n&lt;/html>     </code></pre>\n\n\n\n<p>Run the server by using&nbsp;<strong>python manage.py runserver</strong>&nbsp;command.</p>\n\n\n\n<p>After that access the template by entering&nbsp;<strong>localhost:8000/index</strong>&nbsp;URL, and it will produce the following output to the browser.</p>\n\n\n\n<p>Well, in this topic, we have learned the process of managing static files efficiently.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In a web application, apart from business logic and data handling, we also need to handle and manage static resources like CSS, JavaScript, images etc. It is important to manage these resources so that it does not affect our application performance. Django deals with it very efficiently and provides a convenient manner to use resources. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2102,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/835"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=835"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/835/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2102"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=835"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=835"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=835"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4556,
    "date": "2020-05-16T09:56:16",
    "date_gmt": "2020-05-16T09:56:16",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=840"
    },
    "modified": "2020-05-16T09:56:16",
    "modified_gmt": "2020-05-16T09:56:16",
    "slug": "model-form",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/model-form/",
    "title": {
      "rendered": "Model Form"
    },
    "content": {
      "rendered": "\n<p>It is a class which is used to create an HTML form by using the Model. It is an efficient way to create a form without writing HTML code.</p>\n\n\n\n<p>Django automatically does it for us to reduce the application development time. For example, suppose we have a model containing various fields, we don&#8217;t need to repeat the fields in the form file.</p>\n\n\n\n<p>For this reason, Django provides a helper class which allows us to create a Form class from a Django model.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<h3>Django ModelForm Example</h3>\n\n\n\n<p>First, create a model that contains fields name and other metadata. It can be used to create a table in database and dynamic HTML form.</p>\n\n\n\n<p><strong>// model.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from __future__ import unicode_literals  \nfrom django.db import models  \n  \nclass Student(models.Model):  \n    first_name = models.CharField(max_length=20)  \n    last_name  = models.CharField(max_length=30)  \n    class Meta:  \n        db_table = \"student\"</code></pre>\n\n\n\n<p>This file contains a class that inherits ModelForm and mention the model name for which HTML form is created.</p>\n\n\n\n<p></p>\n\n\n\n<p><strong>// form.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms  \nfrom myapp.models import Student  \n  \nclass EmpForm(forms.ModelForm):  \n    class Meta:  \n        model = Student  \n        fields = \"__all__\"  </code></pre>\n\n\n\n<p>Write a view function to load the ModelForm from forms.py.</p>\n\n\n\n<p><strong>//views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \nfrom myapp.form import StuForm  \n  \ndef index(request):  \n    stu = StuForm()  \n    return render(request,\"index.html\",{'form':stu}) </code></pre>\n\n\n\n<p><strong>//urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom myapp import views  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('index/', views.index),  \n]  </code></pre>\n\n\n\n<p>And finally, create a&nbsp;<strong>index.html</strong>&nbsp;file that contains the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n&lt;/head>  \n&lt;body>  \n&lt;form method=\"POST\" class=\"post-form\">  \n        {% csrf_token %}  \n        {{ form.as_p }}  \n        &lt;button type=\"submit\" class=\"save btn btn-default\">Save&lt;/button>  \n    &lt;/form>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<h2>Run Server</h2>\n\n\n\n<p>Run the server by using&nbsp;<strong>python manage.py runserver</strong>&nbsp;command.</p>\n\n\n\n<p>After that access the template by&nbsp;<strong>localhost:8000/index</strong>&nbsp;URL, and it will produce the following output to the browser.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-model-form.png\" alt=\"django model form\"/></figure>\n\n\n\n<p>Well, an HTML form is created automatically. This is a feature of Django.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>It is a class which is used to create an HTML form by using the Model. It is an efficient way to create a form without writing HTML code. Django automatically does it for us to reduce the application development time. For example, suppose we have a model containing various fields, we don&#8217;t need to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2103,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4556"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4556"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4556/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2103"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4556"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4556"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4556"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 841,
    "date": "2020-05-16T10:01:08",
    "date_gmt": "2020-05-16T10:01:08",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=841"
    },
    "modified": "2020-05-16T10:01:08",
    "modified_gmt": "2020-05-16T10:01:08",
    "slug": "forms-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/forms-4/",
    "title": {
      "rendered": "Forms"
    },
    "content": {
      "rendered": "\n<p>Django provides a Form class which is used to create HTML forms. It describes a form and how it works and appears.</p>\n\n\n\n<p>It is similar to the&nbsp;<strong>ModelForm</strong>&nbsp;class that creates a form by using the Model, but it does not require the Model.</p>\n\n\n\n<p>Each field of the form class map to the HTML form&nbsp;<strong>&lt;input&gt;</strong>&nbsp;element and each one is a class itself, it manages form data and performs validation while submitting the form.</p>\n\n\n\n<p>Lets see an example, in which we are creating some fields too.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms  \nclass StudentForm(forms.Form):  \n    firstname = forms.CharField(label=\"Enter first name\",max_length=50)  \n    lastname  = forms.CharField(label=\"Enter last name\", max_length = 100) </code></pre>\n\n\n\n<p>A StudentForm is created that contains two fields of CharField type. Charfield is a class and used to create an HTML text input component in the form.</p>\n\n\n\n<p>The label is used to set HTML label of the component and max_length sets length of an input value.</p>\n\n\n\n<p>When rendered, it produces the following HTML to the browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;label for=\"id_firstname\">Enter first name:&lt;/label>  \n &lt;input type=\"text\" name=\"firstname\" required maxlength=\"50\" id=\"id_firstname\" />  \n&lt;label for=\"id_lastname\">Enter last name:&lt;/label> &lt;input type=\"text\" name=\"lastname\" required maxlength=\"100\" id=\"id_lastname\" />  </code></pre>\n\n\n\n<p>Note: Django Form does not include &lt;form&gt; tags, or a submit button. We&#8217;ll have to provide those ourselves in the template.</p>\n\n\n\n<p>Commonly used fields and their details are given in the below table.</p>\n\n\n\n<table><tbody><tr><th>Name</th><th>Class</th><th>HTML Input</th><th>Empty value</th></tr><tr><td>BooleanField</td><td>class BooleanField(**kwargs)</td><td>CheckboxInput</td><td>False</td></tr><tr><td>CharField</td><td>class CharField(**kwargs)</td><td>TextInput</td><td>Whatever you&#8217;ve given as empty_value.</td></tr><tr><td>ChoiceField</td><td>class ChoiceField(**kwargs)</td><td>Select</td><td>&#8221; (an empty string)</td></tr><tr><td>DateField</td><td>class DateField(**kwargs)</td><td>DateInput</td><td>None</td></tr><tr><td>DateTimeField</td><td>class DateTimeField(**kwargs)</td><td>DateTimeInput</td><td>None</td></tr><tr><td>DecimalField</td><td>class DecimalField(**kwargs)</td><td>NumberInput</td><td>None</td></tr><tr><td>EmailField</td><td>class EmailField(**kwargs)</td><td>EmailInput</td><td>&#8221; (an empty string)</td></tr><tr><td>FileField</td><td>class FileField(**kwargs)</td><td>ClearableFileInput</td><td>None</td></tr><tr><td>ImageField</td><td>class ImageField(**kwargs)</td><td>ClearableFileInput</td><td>None</td></tr></tbody></table>\n\n\n\n<p>Let&#8217;s see a complete example to create an HTML form with the help of Django Form class.</p>\n\n\n\n<h2>Building a Form in Django</h2>\n\n\n\n<p>Suppose we want to create a form to get Student information, use the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms  \nclass StudentForm(forms.Form):  \n    firstname = forms.CharField(label=\"Enter first name\",max_length=50)  \n    lastname  = forms.CharField(label=\"Enter last name\", max_length = 100)</code></pre>\n\n\n\n<p>Put this code into the&nbsp;<strong>forms.py</strong>&nbsp;file.</p>\n\n\n\n<h2>Instantiating Form in Django</h2>\n\n\n\n<p>Now, we need to instantiate the form in&nbsp;<strong>views.py</strong>&nbsp;file. See, the below code.</p>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \nfrom myapp.form import StudentForm  \n  \ndef index(request):  \n    student = StudentForm()  \n    return render(request,\"index.html\",{'form':student})  </code></pre>\n\n\n\n<p>Passing the context of form into index template that looks like this:</p>\n\n\n\n<p><strong>// index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n&lt;/head>  \n&lt;body>  \n&lt;form method=\"POST\" class=\"post-form\">  \n        {% csrf_token %}  \n        {{ form.as_p }}  \n        &lt;button type=\"submit\" class=\"save btn btn-default\">Save&lt;/button>  \n&lt;/form>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<p>Provide the URL in urls.py</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom myapp import views  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('index/', views.index),  \n]  </code></pre>\n\n\n\n<p>Run Server and access the form at browser by&nbsp;<strong>localhost:8000/index,</strong>&nbsp;and it will produce the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-forms-localhost-index-output.png\" alt=\"django forms localhost index output\"/></figure>\n\n\n\n<p>There are other output options though for the &lt;label&gt;/&lt;input&gt; pairs:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{{ form.as_table }} will render them as table cells wrapped in &lt;tr> tags\n{{ form.as_p }} will render them wrapped in &lt;p> tags\n{{ form.as_ul }} will render them wrapped in &lt;li> tags</code></pre>\n\n\n\n<p>Note: that we&#8217;ll have to provide the surrounding &lt;table&gt; or &lt;ul&gt; elements yourself.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django provides a Form class which is used to create HTML forms. It describes a form and how it works and appears. It is similar to the&nbsp;ModelForm&nbsp;class that creates a form by using the Model, but it does not require the Model. Each field of the form class map to the HTML form&nbsp;&lt;input&gt;&nbsp;element and each [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2104,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/841"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=841"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/841/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2104"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=841"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=841"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=841"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4557,
    "date": "2020-05-16T10:05:10",
    "date_gmt": "2020-05-16T10:05:10",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=854"
    },
    "modified": "2020-05-16T10:05:10",
    "modified_gmt": "2020-05-16T10:05:10",
    "slug": "form-validation-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/form-validation-2/",
    "title": {
      "rendered": "Form Validation"
    },
    "content": {
      "rendered": "\n<p>Django provides built-in methods to validate form data automatically. Django forms submit only if it contains CSRF tokens. It uses uses a clean and easy approach to validate data.</p>\n\n\n\n<p>The&nbsp;<strong>is_valid()</strong>&nbsp;method is used to perform validation for each field of the form, it is defined in Django Form class. It returns True if data is valid and place all data into a cleaned_data attribute.</p>\n\n\n\n<p>Let&#8217;s see an example that takes user input and validate input as well.</p>\n\n\n\n<h3>Django Validation Example</h3>\n\n\n\n<p>This example contains the following files and code.</p>\n\n\n\n<p><strong>// models.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import models  \nclass Employee(models.Model):  \n    eid = models.CharField(max_length=20)  \n    ename = models.CharField(max_length=100)  \n    econtact = models.CharField(max_length=15)  \n    class Meta:  \n        db_table = \"employee\"  </code></pre>\n\n\n\n<p>Now, create a form which contains the below code.</p>\n\n\n\n<p><strong>// forms.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms  \nfrom myapp.models import Employee  \n  \nclass EmployeeForm(forms.ModelForm):  \n    class Meta:  \n        model = Employee  \n        fields = \"__all__\" </code></pre>\n\n\n\n<h2>Instantiate the form</h2>\n\n\n\n<p>Instantiate the form, check whether request is post or not. It validate the data by using&nbsp;<strong>is_valid()</strong>&nbsp;method.</p>\n\n\n\n<p><strong>//views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def emp(request):  \n    if request.method == \"POST\":  \n        form = EmployeeForm(request.POST)  \n        if form.is_valid():  \n            try:  \n                return redirect('/')  \n            except:  \n                pass  \n    else:  \n        form = EmployeeForm()  \n    return render(request,'index.html',{'form':form})  </code></pre>\n\n\n\n<p>Index template that shows form and errors.</p>\n\n\n\n<p><strong>// index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n&lt;/head>  \n&lt;body>  \n&lt;form method=\"POST\" class=\"post-form\" enctype=\"multipart/form-data\">  \n        {% csrf_token %}  \n        {{ form.as_p }}  \n        &lt;button type=\"submit\" class=\"save btn btn-default\">Save&lt;/button>  \n&lt;/form>  \n&lt;/body>  \n&lt;/html></code></pre>\n\n\n\n<p>Start server and access the form.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-form-validation.png\" alt=\"django form validation\"/></figure>\n\n\n\n<p>It validates each field and throws errors if any validation fails.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-form-validation1.png\" alt=\"django form validation 1\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django provides built-in methods to validate form data automatically. Django forms submit only if it contains CSRF tokens. It uses uses a clean and easy approach to validate data. The&nbsp;is_valid()&nbsp;method is used to perform validation for each field of the form, it is defined in Django Form class. It returns True if data is valid [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2105,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4557"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4557"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4557/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2105"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4557"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4557"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4557"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 855,
    "date": "2020-05-16T10:11:12",
    "date_gmt": "2020-05-16T10:11:12",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=855"
    },
    "modified": "2020-05-16T10:11:12",
    "modified_gmt": "2020-05-16T10:11:12",
    "slug": "file-upload-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/file-upload-2/",
    "title": {
      "rendered": "File Upload"
    },
    "content": {
      "rendered": "\n<p>File upload to the server using Django is a very easy task. Django provides built-in library and methods that help to upload a file to the server.</p>\n\n\n\n<p>The&nbsp;<strong>forms.FileField()</strong>&nbsp;method is used to create a file input and submit the file to the server. While working with files, make sure the HTML form tag contains&nbsp;<strong>enctype=&#8221;multipart/form-data&#8221;&nbsp;</strong>property.</p>\n\n\n\n<p>Let&#8217;s see an example of uploading a file to the server. This example contains the following files.</p>\n\n\n\n<p><strong>Template (index.html)</strong></p>\n\n\n\n<p>It will create an HTML form which contains a file input component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;body>  \n&lt;form method=\"POST\" class=\"post-form\" enctype=\"multipart/form-data\">  \n        {% csrf_token %}  \n        {{ form.as_p }}  \n        &lt;button type=\"submit\" class=\"save btn btn-default\">Save&lt;/button>  \n&lt;/form>  \n&lt;/body>  </code></pre>\n\n\n\n<p><strong>Form (forms.py)</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms  \nclass StudentForm(forms.Form):  \n    firstname = forms.CharField(label=\"Enter first name\",max_length=50)  \n    lastname  = forms.CharField(label=\"Enter last name\", max_length = 10)  \n    email     = forms.EmailField(label=\"Enter Email\")  \n    file      = forms.FileField() # for creating file input</code></pre>\n\n\n\n<p><strong>View (views.py)</strong></p>\n\n\n\n<p>Here, one extra parameter&nbsp;<strong>request.FILES</strong>&nbsp;is required in the constructor. This argument contains the uploaded file instance.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \nfrom django.http import HttpResponse  \nfrom myapp.functions.functions import handle_uploaded_file  \nfrom myapp.form import StudentForm  \ndef index(request):  \n    if request.method == 'POST':  \n        student = StudentForm(request.POST, request.FILES)  \n        if student.is_valid():  \n            handle_uploaded_file(request.FILES&#91;'file'])  \n            return HttpResponse(\"File uploaded successfuly\")  \n    else:  \n        student = StudentForm()  \n        return render(request,\"index.html\",{'form':student})</code></pre>\n\n\n\n<p><strong>Specify URL (urls.py)</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom myapp import views  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('index/', views.index),  \n]  </code></pre>\n\n\n\n<p><strong>Upload Script (functions.py)</strong></p>\n\n\n\n<p>This function is used to read the uploaded file and store at provided location. Put this code into the&nbsp;<strong>functions.py</strong>&nbsp;file. But first create this file into the project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def handle_uploaded_file(f):  \n    with open('myapp/static/upload/'+f.name, 'wb+') as destination:  \n        for chunk in f.chunks():  \n            destination.write(chunk) </code></pre>\n\n\n\n<p>Now, create a directory&nbsp;<strong>upload</strong>&nbsp;to store the uploaded file. Our project structure looks like below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-file-upload.png\" alt=\"django file upload\"/></figure>\n\n\n\n<p>Initially, this directory is empty. so, let&#8217;s upload a file to it and later on it will contain the uploaded file.</p>\n\n\n\n<p><strong>Start Server</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py runserver  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-file-upload1.png\" alt=\"django file upload 1\"/></figure>\n\n\n\n<p>Submit this form and see the&nbsp;<strong>upload</strong>&nbsp;folder. Now, it contains the uploaded file.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-file-upload2.png\" alt=\"django file upload 2\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>File upload to the server using Django is a very easy task. Django provides built-in library and methods that help to upload a file to the server. The&nbsp;forms.FileField()&nbsp;method is used to create a file input and submit the file to the server. While working with files, make sure the HTML form tag contains&nbsp;enctype=&#8221;multipart/form-data&#8221;&nbsp;property. Let&#8217;s see [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2106,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/855"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=855"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/855/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2106"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=855"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=855"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=855"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4558,
    "date": "2020-05-16T10:13:29",
    "date_gmt": "2020-05-16T10:13:29",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=856"
    },
    "modified": "2020-05-16T10:13:29",
    "modified_gmt": "2020-05-16T10:13:29",
    "slug": "database-connectivity",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/database-connectivity/",
    "title": {
      "rendered": "Database Connectivity"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<strong>settings.py</strong>&nbsp;file contains all the project settings along with database connection details. By default, Django works with&nbsp;<strong>SQLite,</strong>&nbsp;database and allows configuring for other databases as well.</p>\n\n\n\n<p>Database connectivity requires all the connection details such as database name, user credentials, hostname drive name etc.</p>\n\n\n\n<p>To connect with MySQL,&nbsp;<strong>django.db.backends.mysql</strong>&nbsp;driver is used to establishing a connection between application and database. Let&#8217;s see an example.</p>\n\n\n\n<p>We need to provide all connection details in the settings file. The settings.py file of our project contains the following code for the database.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DATABASES = {  \n    'default': {  \n        'ENGINE': 'django.db.backends.mysql',  \n        'NAME': 'djangoApp',  \n        'USER':'root',  \n        'PASSWORD':'mysql',  \n        'HOST':'localhost',  \n        'PORT':'3306'  \n    }  \n}  </code></pre>\n\n\n\n<p>After providing details, check the connection using the migrate command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py migrate  </code></pre>\n\n\n\n<p>This command will create tables for admin, auth, contenttypes, and sessions. See the example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-database-connectivity.png\" alt=\"django database connectivity\"/></figure>\n\n\n\n<p>Now, access to the MySQL database and see the database from the list of databases. The created database contains the following tables.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-database-connectivity1.png\" alt=\"django database connectivity 1\"/></figure>\n\n\n\n<p><strong>Note:</strong>&nbsp;It throws an error if database connectivity fails: django.db.utils.OperationalError: (1045, &#8220;Access denied for user &#8216;root&#8217;@&#8217;localhost&#8217; (using password: YES)&#8221;)</p>\n\n\n\n<h2>Migrating Model</h2>\n\n\n\n<p>Well, till here, we have learned to connect Django application to the MySQL database. Next, we will see how to create a table using the model.</p>\n\n\n\n<p>Each Django&#8217;s model is mapped to a table in the database. So after creating a model, we need to migrate it. Let&#8217;s see an example.</p>\n\n\n\n<p>Suppose, we have a model class Employee in the&nbsp;<strong>models.py</strong>&nbsp;file that contains the following code.</p>\n\n\n\n<p><strong>// models.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import models  \nclass Employee(models.Model):  \n    eid      = models.CharField(max_length=20)  \n    ename    = models.CharField(max_length=100)  \n    econtact = models.CharField(max_length=15)  \n    class Meta:  \n        db_table = \"employee\"  </code></pre>\n\n\n\n<p>Django first creates a migration file that contains the details of table structure. To create migration use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py makemigrations  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-database-connectivity2.png\" alt=\"django database connectivity 2\"/></figure>\n\n\n\n<p>The created migration file is located into&nbsp;<strong>migrations</strong>&nbsp;folder and contains the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import migrations, models  \nclass Migration(migrations.Migration):  \n    initial = True  \n    dependencies = &#91;  \n    ]  \n    operations = &#91;  \n        migrations.CreateModel(  \n            name='Employee',  \n            fields=&#91;  \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),  \n                ('eid', models.CharField(max_length=20)),  \n                ('ename', models.CharField(max_length=100)),  \n                ('econtact', models.CharField(max_length=15)),  \n            ],  \n            options={  \n                'db_table': 'employee',  \n            },  \n        ),  \n    ]  </code></pre>\n\n\n\n<p>Now, migrate to reflect the changes into the database.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py migrate  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-database-connectivity3.png\" alt=\"django database connectivity 3\"/></figure>\n\n\n\n<p>Check the database again, now it contains the&nbsp;<strong>employee</strong>&nbsp;table.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-database-connectivity4.png\" alt=\"django database connectivity 4\"/></figure>\n\n\n\n<p>See, a table is present in the database. Well, we have successfully established a connection between our Django application and MySQL database.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;settings.py&nbsp;file contains all the project settings along with database connection details. By default, Django works with&nbsp;SQLite,&nbsp;database and allows configuring for other databases as well. Database connectivity requires all the connection details such as database name, user credentials, hostname drive name etc. To connect with MySQL,&nbsp;django.db.backends.mysql&nbsp;driver is used to establishing a connection between application and database. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2107,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4558"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4558"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4558/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2107"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4558"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4558"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4558"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 857,
    "date": "2020-05-16T10:16:49",
    "date_gmt": "2020-05-16T10:16:49",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=857"
    },
    "modified": "2020-05-16T10:16:49",
    "modified_gmt": "2020-05-16T10:16:49",
    "slug": "database-migrations",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/database-migrations/",
    "title": {
      "rendered": "Database Migrations"
    },
    "content": {
      "rendered": "\n<p>Migration is a way of applying changes that we have made to a model, into the database schema. Django creates a migration file inside the&nbsp;<strong>migration</strong>&nbsp;folder for each model to create the table schema, and each table is mapped to the model of which migration is created.</p>\n\n\n\n<p>Django provides the various commands that are used to perform migration related tasks. After creating a model, we can use these commands.</p>\n\n\n\n<ul><li><strong>makemigrations :</strong>&nbsp;It is used to create a migration file that contains code for the tabled schema of a model.</li><li><strong>migrate :</strong>&nbsp;It creates table according to the schema defined in the migration file.</li><li><strong>sqlmigrate :</strong>&nbsp;It is used to show a raw SQL query of the applied migration.</li><li><strong>showmigrations :</strong>&nbsp;It lists out all the migrations and their status.</li></ul>\n\n\n\n<p>Suppose, we have a model as given below and contains the following attributes.</p>\n\n\n\n<h2>Model</h2>\n\n\n\n<p><strong>//models.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import models  \nclass Employee(models.Model):  \n    eid = models.CharField(max_length=20)  \n    ename = models.CharField(max_length=100)  \n    econtact = models.CharField(max_length=15)  \n    class Meta:  \n        db_table = \"employee\"  </code></pre>\n\n\n\n<p>To create a migration for this model, use the following command. It will create a migration file inside the migration folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py makemigrations  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-makemigrations.png\" alt=\"Django makemigrations\"/></figure>\n\n\n\n<p>This migration file contains the code in which a Migration class is created that contains the name and fields of employee table.</p>\n\n\n\n<h2>Migrations</h2>\n\n\n\n<p><strong><em>// 0001_initial.py</em></strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import migrations, models  \nclass Migration(migrations.Migration):  \n    initial = True  \n    dependencies = &#91;  \n    ]  \n    operations = &#91;  \n        migrations.CreateModel(  \n            name='Employee',  \n            fields=&#91;  \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),  \n                ('eid', models.CharField(max_length=20)),  \n                ('ename', models.CharField(max_length=100)),  \n                ('econtact', models.CharField(max_length=15)),  \n            ],  \n            options={  \n                'db_table': 'employee',  \n            },  \n        ),  \n    ] </code></pre>\n\n\n\n<p>After creating a migration, migrate it so that it reflects the database permanently. The migrate command is given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py migrate  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-migrate.png\" alt=\"Django migrate\"/></figure>\n\n\n\n<p>Apart from creating a migration, we can see raw SQL query executing behind the applied migration. The&nbsp;<strong>sqlmigrate app-name migration-name</strong>&nbsp;is used to get raw SQL query. See an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py migrate  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-migrate1.png\" alt=\"Django migrate 1\"/></figure>\n\n\n\n<p>And show migrations command is used to show applied migrations. See the example.</p>\n\n\n\n<p>If no app-name is provided, it shows all migrations applied to the project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py showmigrations  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-showmigrations.png\" alt=\"Django showmigrations\"/></figure>\n\n\n\n<p>We can get app-specific migrations by specifying app-name, see the example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py showmigrations myapp  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-showmigrations-myapp.png\" alt=\"Django showmigrations myapp\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Migration is a way of applying changes that we have made to a model, into the database schema. Django creates a migration file inside the&nbsp;migration&nbsp;folder for each model to create the table schema, and each table is mapped to the model of which migration is created. Django provides the various commands that are used to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2109,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/857"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=857"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/857/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2109"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=857"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=857"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=857"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4559,
    "date": "2020-05-16T10:18:59",
    "date_gmt": "2020-05-16T10:18:59",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=881"
    },
    "modified": "2020-05-16T10:18:59",
    "modified_gmt": "2020-05-16T10:18:59",
    "slug": "middleware-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/middleware-2/",
    "title": {
      "rendered": "Middleware"
    },
    "content": {
      "rendered": "\n<p>In Django, middleware is a lightweight plugin that processes during request and response execution. Middleware is used to perform a function in the application. The functions can be a security, session, csrf protection, authentication etc.</p>\n\n\n\n<p>Django provides various built-in middleware and also allows us to write our own middleware. See,&nbsp;<strong>settings.py</strong>&nbsp;file of Django project that contains various middleware, that is used to provides functionalities to the application. For example, Security Middleware is used to maintain the security of the application.</p>\n\n\n\n<p><strong>// settings.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>MIDDLEWARE = &#91;  \n    'django.middleware.security. SecurityMiddleware',  \n    'django.contrib.sessions.middleware.SessionMiddleware',  \n    'django.middleware.common.CommonMiddleware',  \n    'django.middleware.csrf.CsrfViewMiddleware',  \n    'django.contrib.auth.middleware.AuthenticationMiddleware',  \n    'django.contrib.messages.middleware.MessageMiddleware',  \n    'django.middleware.clickjacking.XFrameOptionsMiddleware',  \n]  </code></pre>\n\n\n\n<h2>Creating Own Middleware</h2>\n\n\n\n<p>middleware is a class that takes an argument&nbsp;<strong>get_response</strong>&nbsp;and returns a response.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class FirstMiddleware:  \n    def __init__(self, get_response):  \n        self.get_response = get_response  \n      \n    def __call__(self, request):  \n        response = self.get_response(request)  \n        return response</code></pre>\n\n\n\n<p><strong>__init__(get_response)</strong></p>\n\n\n\n<p>It must accept the get_response argument because Django initializes middleware with only it. It calls only once whereas __call__ executes for each request.</p>\n\n\n\n<h2>Activating Middleware</h2>\n\n\n\n<p>To activate middleware, add it to the MIDDLEWARE list of the&nbsp;<strong>settings.py</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>MIDDLEWARE = &#91;  \n    'django.middleware.security.SecurityMiddleware',  \n    'django.contrib.sessions.middleware.SessionMiddleware',  \n    'django.middleware.common.CommonMiddleware',  \n    'django.middleware.csrf.CsrfViewMiddleware',  \n    'django.contrib.auth.middleware.AuthenticationMiddleware',  \n    'django.contrib.messages.middleware.MessageMiddleware',  \n    'django.middleware.clickjacking.XframeOptionsMiddleware',  \n  'add new created middleware here'  \n]  </code></pre>\n\n\n\n<p>A Django project does not require middleware, the MIDDLEWARE list can be empty but recommended that have at least a CommonMiddleware.</p>\n\n\n\n<h2>Middleware Order and Layering</h2>\n\n\n\n<p>Middleware applies in the order it is defined in MIDDLEWARE list and each middleware class is a layer. The MIDDLEWARE list is like an onion so each request passes through from top to bottom and response is in reverse order (bottom to up).</p>\n\n\n\n<h2>Other Middleware Methods</h2>\n\n\n\n<p>Apart from request and response, we can add three more methods to add more features to our middleware.</p>\n\n\n\n<p><strong>process_view(request, view_func, view_args, view_kwargs )</strong></p>\n\n\n\n<p>It takes HttpRequest object, function object, list of arguments passed to the view or a dictionary of arguments respectively.</p>\n\n\n\n<p>This method executes just before the calling of view. It returns either None or HttpResponse, if it returns an HttpResponse, it stops processing and return the result.</p>\n\n\n\n<p><strong>process_template_response(request,response)</strong></p>\n\n\n\n<p>It takes two arguments first is a reference of HttpRequest and second is HttpResponse object. This method is called just after the view finished execution.</p>\n\n\n\n<p>It returns a response object which implements the render method.</p>\n\n\n\n<p><strong>process_exception(request, exception)</strong></p>\n\n\n\n<p>This method takes two arguments, first is HttpRequest object and second is Exception class object that is raised by the view function.</p>\n\n\n\n<p>This method returns either None or HttpResponse object. If it returns a response, the middleware will be applied and the result returns to the browser. Otherwise, the exception is handle by default handling system.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Django, middleware is a lightweight plugin that processes during request and response execution. Middleware is used to perform a function in the application. The functions can be a security, session, csrf protection, authentication etc. Django provides various built-in middleware and also allows us to write our own middleware. See,&nbsp;settings.py&nbsp;file of Django project that contains [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2108,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4559"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4559"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4559/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2108"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4559"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4559"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4559"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 882,
    "date": "2020-05-16T10:24:15",
    "date_gmt": "2020-05-16T10:24:15",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=882"
    },
    "modified": "2020-05-16T10:24:15",
    "modified_gmt": "2020-05-16T10:24:15",
    "slug": "request-and-response",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/request-and-response/",
    "title": {
      "rendered": "Request and Response"
    },
    "content": {
      "rendered": "\n<p>The client-server architecture includes two major components request and response. The Django framework uses client-server architecture to implement web applications.</p>\n\n\n\n<p>When a client requests for a resource, a HttpRequest object is created and correspond view function is called that returns HttpResponse object.</p>\n\n\n\n<p>To handle request and response, Django provides HttpRequest and HttpResponse classes. Each class has it?s own attributes and methods.</p>\n\n\n\n<p>Let&#8217;s have a look at the HttpRequest class.</p>\n\n\n\n<h2>Django HttpRequest</h2>\n\n\n\n<p>This class is defined in the&nbsp;<strong>django.http</strong>&nbsp;module and used to handle the client request. Following are the attributes of this class.</p>\n\n\n\n<h2>Django HttpRequest Attributes</h2>\n\n\n\n<table><tbody><tr><th>Attribute</th><th>Description</th></tr><tr><td>HttpRequest.scheme</td><td>A string representing the scheme of the request (HTTP or HTTPs usually).</td></tr><tr><td>HttpRequest.body</td><td>It returns the raw HTTP request body as a byte string.</td></tr><tr><td>HttpRequest.path</td><td>It returns the full path to the requested page does not include the scheme or domain.</td></tr><tr><td>HttpRequest.path_info</td><td>It shows path info portion of the path.</td></tr><tr><td>HttpRequest.method</td><td>It shows the HTTP method used in the request.</td></tr><tr><td>HttpRequest.encoding</td><td>It shows the current encoding used to decode form submission data.</td></tr><tr><td>HttpRequest.content_type</td><td>It shows the MIME type of the request, parsed from the CONTENT_TYPE header.</td></tr><tr><td>HttpRequest.content_params</td><td>It returns a dictionary of key/value parameters included in the CONTENT_TYPE header.</td></tr><tr><td>HttpRequest.GET</td><td>It returns a dictionary-like object containing all given HTTP GET parameters.</td></tr><tr><td>HttpRequest.POST</td><td>It is a dictionary-like object containing all given HTTP POST parameters.</td></tr><tr><td>HttpRequest.COOKIES</td><td>It returns all cookies available.</td></tr><tr><td>HttpRequest.FILES</td><td>It contains all uploaded files.</td></tr><tr><td>HttpRequest.META</td><td>It shows all available Http headers.</td></tr><tr><td>HttpRequest.resolver_match</td><td>It contains an instance of ResolverMatch representing the resolved URL.</td></tr></tbody></table>\n\n\n\n<p>And the following table contains the methods of HttpRequest class.</p>\n\n\n\n<h2>Django HttpRequest Methods</h2>\n\n\n\n<table><tbody><tr><th>Attribute</th><th>Description</th></tr><tr><td>HttpRequest.get_host()</td><td>It returns the original host of the request.</td></tr><tr><td>HttpRequest.get_port()</td><td>It returns the originating port of the request.</td></tr><tr><td>HttpRequest.get_full_path()</td><td>It returns the path, plus an appended query string, if applicable.</td></tr><tr><td>HttpRequest.build_absolute_uri&nbsp;<em>(location)</em></td><td>It returns the absolute URI form of location.</td></tr><tr><td>HttpRequest.get_signed_cookie&nbsp;<em>(key, default=RAISE_ERROR, salt=&#8221;, max_age=None)</em></td><td>It returns a cookie value for a signed cookie, or raises a django.core.signing.BadSignature exception if the signature is no longer valid.</td></tr><tr><td>HttpRequest.is_secure()</td><td>It returns True if the request is secure; that is, if it was made with HTTPS.</td></tr><tr><td>HttpRequest.is_ajax()</td><td>It returns True if the request was made via an XMLHttpRequest.</td></tr></tbody></table>\n\n\n\n<h2>Django HttpRequest Example</h2>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def methodinfo(request):  \n    return HttpResponse(\"Http request is: \"+request.method)  </code></pre>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>path('info',views.methodinfo)  </code></pre>\n\n\n\n<p>Start the server and get access to the browser. It shows the request method name at the browser.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-HttpRequest-example.png\" alt=\"Django HttpRequest Example\"/></figure>\n\n\n\n<h2>Django HttpResponse</h2>\n\n\n\n<p>This class is a part of&nbsp;<strong>django.http</strong>&nbsp;module. It is responsible for generating response corresponds to the request and back to the client.</p>\n\n\n\n<p>This class contains various attributes and methods that are given below.</p>\n\n\n\n<h2>Django HttpResponse Attributes</h2>\n\n\n\n<table><tbody><tr><th>Attribute</th><th>Description</th></tr><tr><td>HttpResponse.content</td><td>A bytestring representing the content, encoded from a string if necessary.</td></tr><tr><td>HttpResponse.charset</td><td>It is a string denoting the charset in which the response will be encoded.</td></tr><tr><td>HttpResponse.status_code</td><td>It is an&nbsp;<strong>HTTP status code</strong>&nbsp;for the response.</td></tr><tr><td>HttpResponse.reason_phrase</td><td>The HTTP reason phrase for the response.</td></tr><tr><td>HttpResponse.streaming</td><td>It is false by default.</td></tr><tr><td>HttpResponse.closed</td><td>It is True if the response has been closed.</td></tr></tbody></table>\n\n\n\n<h2>Django HttpResponse Methods</h2>\n\n\n\n<table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>HttpResponse.__init__<em>(content=&#8221;, content_type=None, status=200, reason=None, charset=None)</em></td><td>It is used to instantiate an HttpResponse object with the given page content and content type.</td></tr><tr><td>HttpResponse.__setitem__<em>(header, value)</em></td><td>It is used to set the given header name to the given value.</td></tr><tr><td>HttpResponse.__delitem__<em>(header)</em></td><td>It deletes the header with the given name.</td></tr><tr><td>HttpResponse.__getitem__<em>(header)</em></td><td>It returns the value for the given header name.</td></tr><tr><td>HttpResponse.has_header<em>(header)</em></td><td>It returns either True or False based on a case-insensitive check for a header with the provided name.</td></tr><tr><td>HttpResponse.setdefault<em>(header, value)</em></td><td>It is used to set default header.</td></tr><tr><td>HttpResponse.write<em>(content)</em></td><td>It is used to create response object of file-like object.</td></tr><tr><td>HttpResponse.flush()</td><td>It is used to flush the response object.</td></tr><tr><td>HttpResponse.tell()</td><td>This method makes an HttpResponse instance a file-like object.</td></tr><tr><td>HttpResponse.getvalue()</td><td>It is used to get the value of HttpResponse.content.</td></tr><tr><td>HttpResponse.readable()</td><td>This method is used to create stream-like object of HttpResponse class.</td></tr><tr><td>HttpResponse.seekable()</td><td>It is used to make response object seekable.</td></tr></tbody></table>\n\n\n\n<p>We can use these methods and attributes to handle the response in the Django application.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The client-server architecture includes two major components request and response. The Django framework uses client-server architecture to implement web applications. When a client requests for a resource, a HttpRequest object is created and correspond view function is called that returns HttpResponse object. To handle request and response, Django provides HttpRequest and HttpResponse classes. Each class [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2110,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/882"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=882"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/882/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2110"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=882"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=882"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=882"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 884,
    "date": "2020-05-16T10:30:19",
    "date_gmt": "2020-05-16T10:30:19",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=884"
    },
    "modified": "2020-05-16T10:30:19",
    "modified_gmt": "2020-05-16T10:30:19",
    "slug": "exceptions-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/exceptions-2/",
    "title": {
      "rendered": "Exceptions"
    },
    "content": {
      "rendered": "\n<p>An exception is an abnormal event that leads to program failure. To deal with this situation, Django uses its own exception classes and supports all core Python exceptions as well.</p>\n\n\n\n<p>Django core exceptions classes are defined in&nbsp;<strong>django.core.exceptions</strong>&nbsp;module. This module contains the following classes.</p>\n\n\n\n<h2>Django Exception Classes</h2>\n\n\n\n<table><tbody><tr><th>Exception</th><th>Description</th></tr><tr><td>AppRegistryNotReady</td><td>It is raised when attempting to use models before the app loading process.</td></tr><tr><td>ObjectDoesNotExist</td><td>The base class for DoesNotExist exceptions.</td></tr><tr><td>EmptyResultSet</td><td>If a query does not return any result, this exception is raised.</td></tr><tr><td>FieldDoesNotExist</td><td>It raises when the requested field does not exist.</td></tr><tr><td>MultipleObjectsReturned</td><td>This exception is raised by a query if only one object is expected, but multiple objects are returned.</td></tr><tr><td>SuspiciousOperation</td><td>This exception is raised when a user has performed an operation that should be considered suspicious from a security perspective.</td></tr><tr><td>PermissionDenied</td><td>It is raised when a user does not have permission to perform the action requested.</td></tr><tr><td>ViewDoesNotExist</td><td>It is raised by django.urls when a requested view does not exist.</td></tr><tr><td>MiddlewareNotUsed</td><td>It is raised when a middleware is not used in the server configuration.</td></tr><tr><td>ImproperlyConfigured</td><td>The ImproperlyConfigured exception is raised when Django is somehow improperly configured.</td></tr><tr><td>FieldError</td><td>It is raised when there is a problem with a model field.</td></tr><tr><td>ValidationError</td><td>It is raised when data validation fails form or model field validation.</td></tr></tbody></table>\n\n\n\n<h2>Django URL Resolver Exceptions</h2>\n\n\n\n<p>These exceptions are defined in&nbsp;<strong>django.urls</strong>&nbsp;module.</p>\n\n\n\n<table><tbody><tr><th>Exception</th><th>Description</th></tr><tr><td>Resolver404</td><td>This exception raised when the path passed to resolve() function does not map to a view.</td></tr><tr><td>NoReverseMatch</td><td>It is raised when a matching URL in your URLconf cannot be identified based on the parameters supplied.</td></tr></tbody></table>\n\n\n\n<h2>Django Database Exceptions</h2>\n\n\n\n<p>The following exceptions are defined in&nbsp;<strong>django.db</strong>&nbsp;module.</p>\n\n\n\n<table><tbody><tr><th>Exception</th><th>Description</th></tr><tr><td>DatabaseError</td><td>It occurs when the database is not available.</td></tr><tr><td>IntegrityError</td><td>It occurs when an insertion query executes.</td></tr><tr><td>DataError</td><td>It raises when data related issues come into the database.</td></tr></tbody></table>\n\n\n\n<h2>Django Http Exceptions</h2>\n\n\n\n<p>The following exceptions are defined in&nbsp;<strong>django.http</strong>&nbsp;module.</p>\n\n\n\n<table><tbody><tr><th>Exception</th><th>Description</th></tr><tr><td>UnreadablePostError</td><td>It is raised when a user cancels an upload.</td></tr></tbody></table>\n\n\n\n<h2>Django Transaction Exceptions</h2>\n\n\n\n<p>The transaction exceptions are defined in django.db.transaction.</p>\n\n\n\n<table><tbody><tr><th>Exception</th><th>Description</th></tr><tr><td>TransactionManagementError</td><td>It is raised for any and all problems related to database transactions.</td></tr></tbody></table>\n\n\n\n<h2>Django Exception Example</h2>\n\n\n\n<p>Suppose, we want to get employee record where id = 12, our view function will look below. It raises a DoesNotExist exception if data not found. This is Django&#8217;s built-in exception.</p>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def getdata(request):  \n    data = Employee.objects.get(id=12)  \n    return HttpResponse(data) </code></pre>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>path('get',views.getdata)  </code></pre>\n\n\n\n<p>It shows the following exception because no record is available at id 12.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-exception.png\" alt=\"Django Exception example\"/></figure>\n\n\n\n<p>We can handle it by using try and except, now let&#8217;s handle this exception.</p>\n\n\n\n<p><strong>// Views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def getdata(request):  \n    try:  \n        data = Employee.objects.get(id=12)  \n    except ObjectDoesNotExist:  \n        return HttpResponse(\"Exception: Data not found\")  \n    return HttpResponse(data);  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-exception-output.png\" alt=\"Django Exception output\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An exception is an abnormal event that leads to program failure. To deal with this situation, Django uses its own exception classes and supports all core Python exceptions as well. Django core exceptions classes are defined in&nbsp;django.core.exceptions&nbsp;module. This module contains the following classes. Django Exception Classes Exception Description AppRegistryNotReady It is raised when attempting to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2111,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/884"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=884"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/884/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2111"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=884"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=884"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=884"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4560,
    "date": "2020-05-16T10:33:28",
    "date_gmt": "2020-05-16T10:33:28",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=883"
    },
    "modified": "2020-05-16T10:33:28",
    "modified_gmt": "2020-05-16T10:33:28",
    "slug": "session-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/session-4/",
    "title": {
      "rendered": "Session"
    },
    "content": {
      "rendered": "\n<p>A session is a mechanism to store information on the server side during the interaction with the web application.</p>\n\n\n\n<p>In Django, by default session stores in the database and also allows file-based and cache based sessions. It is implemented via a piece of middleware and can be enabled by using the following code.</p>\n\n\n\n<p>Put&nbsp;<strong>django.contrib.sessions.middleware.SessionMiddleware</strong>&nbsp;in MIDDLEWARE and&nbsp;<strong>django.contrib.sessions</strong>&nbsp;in INSTALLED_APPS of settings.py file.</p>\n\n\n\n<p>To set and get the session in views, we can use&nbsp;<strong>request.session</strong>&nbsp;and can set multiple times too.</p>\n\n\n\n<p>The&nbsp;<strong>class backends.base.SessionBase</strong>&nbsp;is a base class of all session objects. It contains the following standard methods.</p>\n\n\n\n<table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>__getitem__(key)</td><td>It is used to get session value.</td></tr><tr><td>__setitem__(key, value)</td><td>It is used to set session value.</td></tr><tr><td>__delitem__(key)</td><td>It is used to delete session object.</td></tr><tr><td>__contains__(key)</td><td>It checks whether the container contains the particular session object or not.</td></tr><tr><td>get(key, default=None)</td><td>It is used to get session value of the specified key.</td></tr></tbody></table>\n\n\n\n<p>Let&#8217;s see an example in which we will set and get session values. Two functions are defined in the&nbsp;<strong>views.py</strong>&nbsp;file.</p>\n\n\n\n<h3>Django Session Example</h3>\n\n\n\n<p>The first function is used to set and the second is used to get session values.</p>\n\n\n\n<p><strong>//views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \nfrom django.http import HttpResponse  \n  \ndef setsession(request):  \n    request.session&#91;'sname'] = 'irfan'  \n    request.session&#91;'semail'] = 'irfan.sssit@gmail.com'  \n    return HttpResponse(\"session is set\")  \ndef getsession(request):  \n    studentname = request.session&#91;'sname']  \n    studentemail = request.session&#91;'semail']  \n    return HttpResponse(studentname+\" \"+studentemail);  </code></pre>\n\n\n\n<p>Url mapping to call both the functions.</p>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom myapp import views  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('index/', views.index),  \n    path('ssession',views.setsession),  \n    path('gsession',views.getsession)  \n] </code></pre>\n\n\n\n<p><strong>Run Server</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py runserver  </code></pre>\n\n\n\n<p>And set the session by using&nbsp;<strong>localhost:8000/ssession</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-session.png\" alt=\"django-session\"/></figure>\n\n\n\n<p>The session has been set, to check it, use&nbsp;<strong>localhost:8000/gsession</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-session1.png\" alt=\"django-session 1\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A session is a mechanism to store information on the server side during the interaction with the web application. In Django, by default session stores in the database and also allows file-based and cache based sessions. It is implemented via a piece of middleware and can be enabled by using the following code. Put&nbsp;django.contrib.sessions.middleware.SessionMiddleware&nbsp;in MIDDLEWARE [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2112,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4560"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4560"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4560/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2112"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4560"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4560"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4560"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4561,
    "date": "2020-05-16T10:35:18",
    "date_gmt": "2020-05-16T10:35:18",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=904"
    },
    "modified": "2020-05-16T10:35:18",
    "modified_gmt": "2020-05-16T10:35:18",
    "slug": "cookie-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/cookie-2/",
    "title": {
      "rendered": "Cookie"
    },
    "content": {
      "rendered": "\n<p>A cookie is a small piece of information which is stored in the client browser. It is used to store user&#8217;s data in a file permanently (or for the specified time).</p>\n\n\n\n<p>Cookie has its expiry date and time and removes automatically when gets expire. Django provides built-in methods to set and fetch cookie.</p>\n\n\n\n<p>The&nbsp;<strong>set_cookie()</strong>&nbsp;method is used to set a cookie and&nbsp;<strong>get()</strong>&nbsp;method is used to get the cookie.</p>\n\n\n\n<p>The&nbsp;<strong>request.COOKIES[&#8216;key&#8217;]</strong>&nbsp;array can also be used to get cookie values.</p>\n\n\n\n<h3>Django Cookie Example</h3>\n\n\n\n<p>In&nbsp;<strong>views.py,</strong>&nbsp;two functions setcookie() and getcookie() are used to set and get cookie respectively</p>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render  \nfrom django.http import HttpResponse  \n  \ndef setcookie(request):  \n    response = HttpResponse(\"Cookie Set\")  \n    response.set_cookie('java-tutorial', 'codemeals.com')  \n    return response  \ndef getcookie(request):  \n    tutorial  = request.COOKIES&#91;'java-tutorial']  \n    return HttpResponse(\"java tutorials @: \"+  tutorial);  </code></pre>\n\n\n\n<p>And URLs specified to access these functions.</p>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom myapp import views  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('index/', views.index),  \n    path('scookie',views.setcookie),  \n    path('gcookie',views.getcookie)  \n]  </code></pre>\n\n\n\n<p><strong>Start Server</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py runserver  </code></pre>\n\n\n\n<p>After starting the server, set cookie by using&nbsp;<strong>localhost:8000/scookie</strong>&nbsp;URL. It shows the following output to the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-cookie.png\" alt=\"django cookie\"/></figure>\n\n\n\n<p>And get a cookie by using&nbsp;<strong>localhost:8000/gcookie</strong>&nbsp;URL. It shows the set cookie to the browser.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A cookie is a small piece of information which is stored in the client browser. It is used to store user&#8217;s data in a file permanently (or for the specified time). Cookie has its expiry date and time and removes automatically when gets expire. Django provides built-in methods to set and fetch cookie. The&nbsp;set_cookie()&nbsp;method is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2113,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4561"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4561"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4561/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2113"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4561"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4561"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4561"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4562,
    "date": "2020-05-16T10:37:17",
    "date_gmt": "2020-05-16T10:37:17",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=905"
    },
    "modified": "2020-05-16T10:37:17",
    "modified_gmt": "2020-05-16T10:37:17",
    "slug": "create-csv",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/create-csv/",
    "title": {
      "rendered": "Create CSV"
    },
    "content": {
      "rendered": "\n<p>Django uses Python&#8217;s built-in CSV library to create Dynamic CSV (Comma Separated Values) file. We can use this library in our project&#8217;s view file.</p>\n\n\n\n<p>Let&#8217;s see an example, here we have a Django project to which we are implementing this feature. A view function&nbsp;<strong>getfile()</strong>&nbsp;is created.</p>\n\n\n\n<h3>Django CSV Example</h3>\n\n\n\n<p>In this example, we are creating CSV using static data.</p>\n\n\n\n<p><strong>// Views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import csv  \n  \ndef getfile(request):  \n    response = HttpResponse(content_type='text/csv')  \n    response&#91;'Content-Disposition'] = 'attachment; filename=\"file.csv\"'  \n    writer = csv.writer(response)  \n    writer.writerow(&#91;'1001', 'John', 'Domil', 'CA'])  \n    writer.writerow(&#91;'1002', 'Amit', 'Mukharji', 'LA', '\"Testing\"'])  \n    return response  </code></pre>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<p>Provide url for the function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>path('csv',views.getfile)  </code></pre>\n\n\n\n<p>While executing to the browser, it renders a CSV file. See the example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/create-csv-with-django-csv-example.png\" alt=\"create csv with django csv example\"/></figure>\n\n\n\n<p>Apart from static data, we can get CSV from the database too. See, the following example in which we are getting data from the table by using the&nbsp;<strong>Employee</strong>&nbsp;model.</p>\n\n\n\n<h2>Dynamic CSV using Database</h2>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from myapp.models import Employee import csv  \ndef getfile(request):  \n    response = HttpResponse(content_type='text/csv')  \n    response&#91;'Content-Disposition'] = 'attachment; filename=\"file.csv\"'  \n    employees = Employee.objects.all()  \n    writer = csv.writer(response)  \n    for employee in employees:  \n        writer.writerow(&#91;employee.eid,employee.ename,employee.econtact])  \n    return response  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/create-csv-with-django-dynamic-csv-using-database.png\" alt=\"create csv with django dynamic csv using database\"/></figure>\n\n\n\n<p>Save the file and open into the text editor that contains the following data.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/create-csv-with-django-dynamic-csv-using-database1.png\" alt=\"create csv with django dynamic csv using database 1\"/></figure>\n\n\n\n<p>This data is retrieved from the table employee, a snapshot of the table is shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/create-csv-with-django-dynamic-csv-using-database2.png\" alt=\"create csv with django dynamic csv using database 2\"/></figure>\n\n\n\n<p>Well, we have seen that this library is very useful to create a dynamic CSV file. Now, implement it into Django project when required.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django uses Python&#8217;s built-in CSV library to create Dynamic CSV (Comma Separated Values) file. We can use this library in our project&#8217;s view file. Let&#8217;s see an example, here we have a Django project to which we are implementing this feature. A view function&nbsp;getfile()&nbsp;is created. Django CSV Example In this example, we are creating CSV [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2114,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4562"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4562"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4562/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2114"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4562"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4562"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4562"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4563,
    "date": "2020-05-16T10:39:29",
    "date_gmt": "2020-05-16T10:39:29",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=906"
    },
    "modified": "2020-05-16T10:39:29",
    "modified_gmt": "2020-05-16T10:39:29",
    "slug": "pdf",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pdf/",
    "title": {
      "rendered": "PDF"
    },
    "content": {
      "rendered": "\n<p>Here, we will learn how to design and generate PDF file using Django view. To generate PDF, we will use&nbsp;<strong>ReportLab</strong>&nbsp;Python PDF library that creates customized dynamic PDF.</p>\n\n\n\n<p>It is an open source library and can be downloaded easily by using the following command in Ubuntu.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ pip install reportlab  </code></pre>\n\n\n\n<p>After installing, we can import it by import keyword in the view file.</p>\n\n\n\n<p>Below is a simple PDF example, in which we are outputting a string message &#8220;Hello form codemeals&#8221;. This library provides a canvas and tools that are used to generate customized PDF. See the example.</p>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from reportlab.pdfgen import canvas  \nfrom django.http import HttpResponse  \n  \ndef getpdf(request):  \n    response = HttpResponse(content_type='application/pdf')  \n    response&#91;'Content-Disposition'] = 'attachment; filename=\"file.pdf\"'  \n    p = canvas.Canvas(response)  \n    p.setFont(\"Times-Roman\", 55)  \n    p.drawString(100,700, \"Hello, codemeals.\")  \n    p.showPage()  \n    p.save()  \n    return response  </code></pre>\n\n\n\n<p>First, provide MIME (content) type as application/pdf, so that output generates as PDF rather than HTML,</p>\n\n\n\n<p>Set Content-Disposition in which provide header as attachment and output file name.</p>\n\n\n\n<p>Pass response argument to the canvas and drawstring to write the string after that apply to the save() method and return response.</p>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>path('pdf',views.getpdf)  </code></pre>\n\n\n\n<p>Set the above code in urls.py to call view function.</p>\n\n\n\n<p>Run server and access this view on the browser that creates a pdf file. See the examples.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-pdf.png\" alt=\"django pdf\"/></figure>\n\n\n\n<p>A PDF file is generated and ready to download. Download the file and open it, it shows the string message that we wrote.</p>\n\n\n\n<p>Apart from it, this library contains the lots of other methods to design and generate PDF dynamically.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Here, we will learn how to design and generate PDF file using Django view. To generate PDF, we will use&nbsp;ReportLab&nbsp;Python PDF library that creates customized dynamic PDF. It is an open source library and can be downloaded easily by using the following command in Ubuntu. After installing, we can import it by import keyword in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2115,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4563"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4563"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4563/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2115"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4563"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4563"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4563"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4564,
    "date": "2020-05-16T10:41:45",
    "date_gmt": "2020-05-16T10:41:45",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=907"
    },
    "modified": "2020-05-16T10:41:45",
    "modified_gmt": "2020-05-16T10:41:45",
    "slug": "bootstrap-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-2/",
    "title": {
      "rendered": "Bootstrap"
    },
    "content": {
      "rendered": "\n<p>Bootstrap is a framework which is used to create user interface in web applications. It provides css, js and other tools that help to create required interface.</p>\n\n\n\n<p>In Django, we can use bootstrap to create more user friendly applications.</p>\n\n\n\n<p>To implement bootstrap, we need to follow the following steps.</p>\n\n\n\n<p><strong>1. Download the Bootstrap</strong></p>\n\n\n\n<p>Visit the official site https://getbootstrap.com to download the bootstrap at local machine. It is a zip file, extract it and see it contains the two folder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-with-bootstrap.png\" alt=\"Django with Bootstrap\"/></figure>\n\n\n\n<p><strong>2. Create a Directory</strong></p>\n\n\n\n<p>Create a directory with the name&nbsp;<strong>static</strong>&nbsp;inside the created app and place the css and jss folders inside it. These folders contain numerous files, see the screen shot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-with-bootstrap-create-directory.png\" alt=\"Django with Bootstrap Create Directory\"/></figure>\n\n\n\n<p><strong>3. Create a Template</strong></p>\n\n\n\n<p>First create a templates folder inside the app then create a index.htm file to implement (link) the bootstrap css and js files.</p>\n\n\n\n<p><strong>4. Load the Boostrap</strong></p>\n\n\n\n<p>load the bootstrap files resides into the static folder. Use the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% load staticfiles %}  </code></pre>\n\n\n\n<p>And link the files by providing the file location (source). See the index.html file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Title&lt;/title>  \n    {% load staticfiles %}  \n    &lt;link href=\"{% static 'css/bootstrap.min.css' %}\" >  \n    &lt;script src=\"{% static 'bootstrap.min.js' %}\">&lt;/script>  \n    &lt;script>alert();&lt;/script>  \n&lt;/head>  \n&lt;body>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<p>In this template, we have link two files one is bootstrap.min.css and second is bootstrap.min.js. Lets see how to use them in application.</p>\n\n\n\n<p>Suppose, if we don&#8217;t use bootstrap, our html login for looks like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>login&lt;/title>  \n&lt;/head>  \n&lt;body>  \n &lt;form action=\"/save\" method=\"post\">  \n  &lt;div class=\"form-group\">  \n    &lt;label for=\"email\">Email address:&lt;/label>  \n    &lt;input type=\"email\" class=\"form-control\" id=\"email\">  \n  &lt;/div>  \n  &lt;div class=\"form-group\">  \n    &lt;label for=\"pwd\">Password:&lt;/label>  \n    &lt;input type=\"password\" class=\"form-control\" id=\"pwd\">  \n  &lt;/div>  \n  &lt;div class=\"checkbox\">  \n    &lt;label>&lt;input type=\"checkbox\"> Remember me&lt;/label>  \n  &lt;/div>  \n  &lt;button type=\"submit\" class=\"btn btn-primary\">Submit&lt;/button>  \n&lt;/form>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-dont-use-bootstrap-output.png\" alt=\"Django dont use bootstrap output\"/></figure>\n\n\n\n<p>After loading bootstrap files. Our code look like this:</p>\n\n\n\n<p><strong>// index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>login&lt;/title>  \n    {% load staticfiles %}  \n    &lt;link href=\"{% static 'css/bootstrap.min.css' %}\" rel=\"stylesheet\">  \n    &lt;script src=\"{% static 'js/bootstrap.min.js' %}\">&lt;/script>  \n&lt;/head>  \n&lt;body>  \n &lt;form action=\"/save\" method=\"post\">  \n  &lt;div class=\"form-group\">  \n    &lt;label for=\"email\">Email address:&lt;/label>  \n    &lt;input type=\"email\" class=\"form-control\" id=\"email\">  \n  &lt;/div>  \n  &lt;div class=\"form-group\">  \n    &lt;label for=\"pwd\">Password:&lt;/label>  \n    &lt;input type=\"password\" class=\"form-control\" id=\"pwd\">  \n  &lt;/div>  \n  &lt;div class=\"checkbox\">  \n    &lt;label>&lt;input type=\"checkbox\"> Remember me&lt;/label>  \n  &lt;/div>  \n  &lt;button type=\"submit\" class=\"btn btn-primary\">Submit&lt;/button>  \n&lt;/form>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-after-loading-bootstrap.png\" alt=\"Django After loading bootstrap\"/></figure>\n\n\n\n<p>now, our login form loos much nicer. This is advantage of bootstrap.</p>\n\n\n\n<p>Finally, out project structure looks like this.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-finaly-loading-bootstrap.png\" alt=\"Django finaly loading bootstrap\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Bootstrap is a framework which is used to create user interface in web applications. It provides css, js and other tools that help to create required interface. In Django, we can use bootstrap to create more user friendly applications. To implement bootstrap, we need to follow the following steps. 1. Download the Bootstrap Visit the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2116,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4564"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4564"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4564/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2116"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4564"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4564"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4564"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4565,
    "date": "2020-05-16T10:46:46",
    "date_gmt": "2020-05-16T10:46:46",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=912"
    },
    "modified": "2020-05-16T10:46:46",
    "modified_gmt": "2020-05-16T10:46:46",
    "slug": "deployment-to-github",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/deployment-to-github/",
    "title": {
      "rendered": "Deployment to Github"
    },
    "content": {
      "rendered": "\n<p>Github is a global repository system which is used for version control. While working with django, if there is need for version management, it is recommended to use github.</p>\n\n\n\n<p>In this tutorial, we will create and deploy a django project to the github so that it can be accessible globally.</p>\n\n\n\n<p>Before deploying,&nbsp;<strong>it is required to have a github account</strong>, otherwise create an account first by visiting github.com.</p>\n\n\n\n<p>Open the terminal and&nbsp;<strong>cd into the project</strong>, we want to deploy. For example, our project name is djangoboot. Then</p>\n\n\n\n<p><strong>Install Git</strong></p>\n\n\n\n<p>we use the following command to install git on our location machine.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ apt-get install git  </code></pre>\n\n\n\n<p><strong>Initialize Git</strong></p>\n\n\n\n<p>Use the following command to start the git.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ git init  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-initialize-git.png\" alt=\"Django Initialize Git\"/></figure>\n\n\n\n<p>Provide global user name email for the project, it is only once, we don?t need to provide it repeatedly.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-initialize-git1.png\" alt=\"Django Initialize Git 1\"/></figure>\n\n\n\n<p><strong>Create File</strong></p>\n\n\n\n<p>Create a file&nbsp;<strong>.gitignore</strong>&nbsp;inside the root folder of django project. And put the following code inside it.</p>\n\n\n\n<p><strong>// .gitignore</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>*.pyc  \n*~  \n__pycache__  \nmyvenv  \ndb.sqlite3  \n/static  \n.DS_Store  </code></pre>\n\n\n\n<p><strong>Git Status</strong></p>\n\n\n\n<p>Check the git status by using the following command. It provides some detail to the screen.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ git status   </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-git-status.png\" alt=\"Django Git Status\"/></figure>\n\n\n\n<p>After saving, now execute the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ git add -all  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ git commit -m \"my app first commit\"  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-git-add-all.png\" alt=\"Django git add all\"/></figure>\n\n\n\n<p><strong>Push to Github</strong></p>\n\n\n\n<p>First login into the git account and create a new repository and initialize with README. See the example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-push-to-github.png\" alt=\"Django Push to Github\"/></figure>\n\n\n\n<p>My repository name is my-django-app. Click on the create repository button. Now repository has created.</p>\n\n\n\n<p>On next page, click on the clone button and copy the http url. In my case, it is&nbsp;<strong>https://github.com/irfan003/my-django-app.git</strong></p>\n\n\n\n<p>Now, use this url with the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ git remote add origin https://github.com/irfan003/my-django-app.git  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ git push -u --force origin master  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-git-push-u-force-origin-master.png\" alt=\"Django git push u force origin master\"/></figure>\n\n\n\n<p>provide username and password of git account. It will start pushing project to the repository. We can verify it. See the below screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/my-django-app.png\" alt=\"my django app\"/></figure>\n\n\n\n<p>See, our django application has deploy successfully on github. Now, we can access it globally.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Github is a global repository system which is used for version control. While working with django, if there is need for version management, it is recommended to use github. In this tutorial, we will create and deploy a django project to the github so that it can be accessible globally. Before deploying,&nbsp;it is required to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2117,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4565"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4565"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4565/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2117"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4565"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4565"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4565"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4566,
    "date": "2020-05-16T10:51:33",
    "date_gmt": "2020-05-16T10:51:33",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=913"
    },
    "modified": "2020-05-16T10:51:33",
    "modified_gmt": "2020-05-16T10:51:33",
    "slug": "mail-setup",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/mail-setup/",
    "title": {
      "rendered": "Mail Setup"
    },
    "content": {
      "rendered": "\n<p>Sending email using Django is pretty easy and require less configuration. In this tutorial, we will send email to provided email.</p>\n\n\n\n<p>For this purpose, we will use Google&#8217;s SMTP and a Gmail account to set sender.</p>\n\n\n\n<p>Django provides built-in mail library&nbsp;<strong>django.core.mail</strong>&nbsp;to send email.</p>\n\n\n\n<p>Before sending email, we need to make some changes in Gmail account because for security reasons Google does not allow direct access (login) by any application. So, login to the Gmail account and follow the urls. It will redirect to the Gmail account settings where we need to allow less secure apps but toggle the button. See the below screenshot.https://myaccount.google.com/lesssecureapps</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/login-Gmail-account-and-follow-the-url.png\" alt=\"login Gmail account and follow the urls\"/></figure>\n\n\n\n<p>After that follow this url that is a additional security check to verify the make security constraint.<a href=\"https://accounts.google.com/DisplayUnlockCaptcha\" rel=\"noreferrer noopener\" target=\"_blank\">https://accounts.google.com/DisplayUnlockCaptcha</a></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/security-check-to-verify-the-make-security-constraint.png\" alt=\"security check to verify the make security constraint\"/></figure>\n\n\n\n<p>Click on continue and all is setup.</p>\n\n\n\n<h2>Django Configuration</h2>\n\n\n\n<p>Provide the smtp and Gmail account details into the settings.py file. For example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>EMAIL_USE_TLS = True  \nEMAIL_HOST = 'smtp.gmail.com'  \nEMAIL_PORT = 587  \nEMAIL_HOST_USER = 'irfan.iit003@gmail.com'  \nEMAIL_HOST_PASSWORD = '*********' </code></pre>\n\n\n\n<h2>Import Mail Library</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.core.mail import send_mail  </code></pre>\n\n\n\n<p>Now, write a view function that uses built-in mail function to send mail. See the example</p>\n\n\n\n<h2>Django Email Example</h2>\n\n\n\n<p>This example contains the following files.</p>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.http import HttpResponse  \nfrom djangpapp import settings  \nfrom django.core.mail import send_mail  \n  \n  \ndef mail(request):  \n    subject = \"Greetings\"  \n    msg     = \"Congratulations for your success\"  \n    to      = \"irfan.sssit@gmail.com\"  \n    res     = send_mail(subject, msg, settings.EMAIL_HOST_USER, &#91;to])  \n    if(res == 1):  \n        msg = \"Mail Sent Successfuly\"  \n    else:  \n        msg = \"Mail could not sent\"  \n    return HttpResponse(msg) </code></pre>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<p>Put following url into urls.py file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>path('mail',views.mail)  </code></pre>\n\n\n\n<p>Run Server and access it at browser, see the output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/run-server-and-access-it-at-browser-output.png\" alt=\"Run Server and access it at browser output\"/></figure>\n\n\n\n<p>Here, the both email ids are mine, so I can verify the email by login to the account.</p>\n\n\n\n<p>And after login, here we go!! I got the mail.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/after-login-to-the-account.png\" alt=\"After login to the account\"/></figure>\n\n\n\n<p>Well, same like, we can send mail using other smtp server configurations if we have.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Sending email using Django is pretty easy and require less configuration. In this tutorial, we will send email to provided email. For this purpose, we will use Google&#8217;s SMTP and a Gmail account to set sender. Django provides built-in mail library&nbsp;django.core.mail&nbsp;to send email. Before sending email, we need to make some changes in Gmail account [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4566"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4566"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4566/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4566"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4566"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4566"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4567,
    "date": "2020-05-16T10:54:50",
    "date_gmt": "2020-05-16T10:54:50",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=914"
    },
    "modified": "2020-05-16T10:54:50",
    "modified_gmt": "2020-05-16T10:54:50",
    "slug": "admin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/admin/",
    "title": {
      "rendered": "Admin"
    },
    "content": {
      "rendered": "\n<p>Django provides an admin site to allow CRUD (Create Read Update Delete) operations on registered app model.</p>\n\n\n\n<p>It is a built-in feature of Django that automatically generates interface for models.</p>\n\n\n\n<p>We can see the url entry for admin in urls.py file, it is implicit and generated while creating a new project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>urlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n]  </code></pre>\n\n\n\n<p>It can be easily accessed by after login from the admin panel, lets run the server&nbsp;<strong>python3 manage.py runserver</strong>&nbsp;and access it through the&nbsp;<strong>localhost:8000/admin.</strong></p>\n\n\n\n<p>A login form will be displayed, see the below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin.png\" alt=\"Django Admin \"/></figure>\n\n\n\n<p>To login, first create admin (super user) user and provide password as we did here:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin1.png\" alt=\"Django Admin 1\"/></figure>\n\n\n\n<p>Super user is created successfully, now login.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin2.png\" alt=\"Django Admin 2\"/></figure>\n\n\n\n<p>It shows a home page after successfully login, see below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin3.png\" alt=\"Django Admin 3\"/></figure>\n\n\n\n<p>It is an admin dashboard that provides facilities like: creating groups and users. It also used to manage the models.</p>\n\n\n\n<h2>Register Django Model</h2>\n\n\n\n<p>To register model in&nbsp;<strong>admin.py</strong>&nbsp;file. Use the&nbsp;<strong>admin.site.register()</strong>&nbsp;method and pass the Model name. See the example.</p>\n\n\n\n<p><strong>// admin.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom myapp.models import Employee  \nadmin.site.register(Employee) # Employee is registered  </code></pre>\n\n\n\n<p>Login again and see, it has&nbsp;<strong>employee</strong>&nbsp;object.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin4.png\" alt=\"Django Admin 4\"/></figure>\n\n\n\n<p>It provides auto generated interface to create new model object. Like, if i click on&nbsp;<strong>add,</strong>&nbsp;it renders a form with all the attributes provided in the model class.</p>\n\n\n\n<p>For example, our model class contains the following code.</p>\n\n\n\n<p><strong>// models.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import models  \nclass Employee(models.Model):  \n    eid     = models.CharField(max_length=20)  \n    ename   = models.CharField(max_length=100)  \n    econtact = models.CharField(max_length=15)  \n    class Meta:  \n        db_table = \"employee\"</code></pre>\n\n\n\n<p>The auto generated form will be based on the model. We don&#8217;t need to write HTML to create form. The form looks like this:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin5.png\" alt=\"Django Admin 5\"/></figure>\n\n\n\n<p>Lets add an employee by providing details and click on save button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin6.png\" alt=\"Django Admin 6\"/></figure>\n\n\n\n<p>After saving, record is stored into the database table, see the below MySQL table.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-admin7.png\" alt=\"Django Admin 7\"/></figure>\n\n\n\n<p>Using this admin dashboard, we can update and delete record also.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django provides an admin site to allow CRUD (Create Read Update Delete) operations on registered app model. It is a built-in feature of Django that automatically generates interface for models. We can see the url entry for admin in urls.py file, it is implicit and generated while creating a new project. It can be easily [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2118,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4567"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4567"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4567/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2118"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4567"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4567"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4567"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4568,
    "date": "2020-05-16T11:02:03",
    "date_gmt": "2020-05-16T11:02:03",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=915"
    },
    "modified": "2020-05-16T11:02:03",
    "modified_gmt": "2020-05-16T11:02:03",
    "slug": "crud",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/crud/",
    "title": {
      "rendered": "CRUD"
    },
    "content": {
      "rendered": "\n<p>To create a Django application that performs CRUD operations, follow the following steps.</p>\n\n\n\n<p><strong>1. Create a Project</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ django-admin startproject crudexample  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-create-a-project.png\" alt=\"Django crud example Create a Project\"/></figure>\n\n\n\n<p><strong>2. Create an App</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py startapp employee  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-create-an-app.png\" alt=\"Django crud example Create an App\"/></figure>\n\n\n\n<p><strong>3. Project Structure</strong></p>\n\n\n\n<p>Initially, our project looks like this:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-project-structure.png\" alt=\"Django crud example Project Structure\"/></figure>\n\n\n\n<p><strong>4. Database Setup</strong></p>\n\n\n\n<p>Create a database&nbsp;<strong>djangodb</strong>&nbsp;in mysql, and configure into the&nbsp;<strong>settings.py</strong>&nbsp;file of django project. See the example.</p>\n\n\n\n<p><strong>// settings.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>DATABASES = {  \n    'default': {  \n        'ENGINE': 'django.db.backends.mysql',  \n        'NAME': 'djangodb',  \n        'USER':'root',  \n        'PASSWORD':'mysql',  \n        'HOST':'localhost',  \n        'PORT':'3306'  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>5. Create a Model</strong></p>\n\n\n\n<p>Put the following code into&nbsp;<strong>models.py</strong>&nbsp;file.</p>\n\n\n\n<p><strong>// models.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import models  \nclass Employee(models.Model):  \n    eid = models.CharField(max_length=20)  \n    ename = models.CharField(max_length=100)  \n    eemail = models.EmailField()  \n    econtact = models.CharField(max_length=15)  \n    class Meta:  \n        db_table = \"employee\"</code></pre>\n\n\n\n<p><strong>6. Create a ModelForm</strong></p>\n\n\n\n<p><strong>// forms.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms  \nfrom employee.models import Employee  \nclass EmployeeForm(forms.ModelForm):  \n    class Meta:  \n        model = Employee  \n        fields = \"__all__\" </code></pre>\n\n\n\n<p><strong>7. Create View Functions</strong></p>\n\n\n\n<p><strong>// views.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render, redirect  \nfrom employee.forms import EmployeeForm  \nfrom employee.models import Employee  \n# Create your views here.  \ndef emp(request):  \n    if request.method == \"POST\":  \n        form = EmployeeForm(request.POST)  \n        if form.is_valid():  \n            try:  \n                form.save()  \n                return redirect('/show')  \n            except:  \n                pass  \n    else:  \n        form = EmployeeForm()  \n    return render(request,'index.html',{'form':form})  \ndef show(request):  \n    employees = Employee.objects.all()  \n    return render(request,\"show.html\",{'employees':employees})  \ndef edit(request, id):  \n    employee = Employee.objects.get(id=id)  \n    return render(request,'edit.html', {'employee':employee})  \ndef update(request, id):  \n    employee = Employee.objects.get(id=id)  \n    form = EmployeeForm(request.POST, instance = employee)  \n    if form.is_valid():  \n        form.save()  \n        return redirect(\"/show\")  \n    return render(request, 'edit.html', {'employee': employee})  \ndef destroy(request, id):  \n    employee = Employee.objects.get(id=id)  \n    employee.delete()  \n    return redirect(\"/show\")  </code></pre>\n\n\n\n<p><strong>8. Provide Routing</strong></p>\n\n\n\n<p>Provide URL patterns to map with views function.</p>\n\n\n\n<p><strong>// urls.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin  \nfrom django.urls import path  \nfrom employee import views  \nurlpatterns = &#91;  \n    path('admin/', admin.site.urls),  \n    path('emp', views.emp),  \n    path('show',views.show),  \n    path('edit/&lt;int:id>', views.edit),  \n    path('update/&lt;int:id>', views.update),  \n    path('delete/&lt;int:id>', views.destroy),  \n]  </code></pre>\n\n\n\n<p><strong>9. Organize Templates</strong></p>\n\n\n\n<p>Create a&nbsp;<strong>templates</strong>&nbsp;folder inside the&nbsp;<strong>employee</strong>&nbsp;app and create three (index, edit, show) html files inside the directory. The code for each is given below.</p>\n\n\n\n<p><strong>// index.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n    {% load staticfiles %}  \n    &lt;link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\"/>  \n&lt;/head>  \n&lt;body>  \n&lt;form method=\"POST\" class=\"post-form\" action=\"/emp\">  \n        {% csrf_token %}  \n    &lt;div class=\"container\">  \n&lt;br>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-1 col-form-label\">&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n    &lt;h3>Enter Details&lt;/h3>  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-2 col-form-label\">Employee Id:&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n      {{ form.eid }}  \n    &lt;/div>  \n  &lt;/div>  \n  &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-2 col-form-label\">Employee Name:&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n      {{ form.ename }}  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-2 col-form-label\">Employee Email:&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n      {{ form.eemail }}  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-2 col-form-label\">Employee Contact:&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n      {{ form.econtact }}  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-1 col-form-label\">&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n    &lt;button type=\"submit\" class=\"btn btn-primary\">Submit&lt;/button>  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;/div>  \n&lt;/form>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<p><strong>// show.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Employee Records&lt;/title>  \n     {% load staticfiles %}  \n    &lt;link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\"/>  \n&lt;/head>  \n&lt;body>  \n&lt;table class=\"table table-striped table-bordered table-sm\">  \n    &lt;thead class=\"thead-dark\">  \n    &lt;tr>  \n        &lt;th>Employee ID&lt;/th>  \n        &lt;th>Employee Name&lt;/th>  \n        &lt;th>Employee Email&lt;/th>  \n        &lt;th>Employee Contact&lt;/th>  \n        &lt;th>Actions&lt;/th>  \n    &lt;/tr>  \n    &lt;/thead>  \n    &lt;tbody>  \n{% for employee in employees %}  \n    &lt;tr>  \n        &lt;td>{{ employee.eid }}&lt;/td>  \n        &lt;td>{{ employee.ename }}&lt;/td>  \n        &lt;td>{{ employee.eemail }}&lt;/td>  \n        &lt;td>{{ employee.econtact }}&lt;/td>  \n        &lt;td>  \n            &lt;a href=\"/edit/{{ employee.id }}\">&lt;span class=\"glyphicon glyphicon-pencil\" >Edit&lt;/span>&lt;/a>  \n            &lt;a href=\"/delete/{{ employee.id }}\">Delete&lt;/a>  \n        &lt;/td>  \n    &lt;/tr>  \n{% endfor %}  \n    &lt;/tbody>  \n&lt;/table>  \n&lt;br>  \n&lt;br>  \n&lt;center>&lt;a href=\"/emp\" class=\"btn btn-primary\">Add New Record&lt;/a>&lt;/center>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<p><strong>// edit.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>  \n&lt;html lang=\"en\">  \n&lt;head>  \n    &lt;meta charset=\"UTF-8\">  \n    &lt;title>Index&lt;/title>  \n    {% load staticfiles %}  \n    &lt;link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\"/>  \n&lt;/head>  \n&lt;body>  \n&lt;form method=\"POST\" class=\"post-form\" action=\"/update/{{employee.id}}\">  \n        {% csrf_token %}  \n    &lt;div class=\"container\">  \n&lt;br>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-1 col-form-label\">&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n    &lt;h3>Update Details&lt;/h3>  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-2 col-form-label\">Employee Id:&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n        &lt;input type=\"text\" name=\"eid\" id=\"id_eid\" required maxlength=\"20\" value=\"{{ employee.eid }}\"/>  \n    &lt;/div>  \n  &lt;/div>  \n  &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-2 col-form-label\">Employee Name:&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n        &lt;input type=\"text\" name=\"ename\" id=\"id_ename\" required maxlength=\"100\" value=\"{{ employee.ename }}\" />  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-2 col-form-label\">Employee Email:&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n        &lt;input type=\"email\" name=\"eemail\" id=\"id_eemail\" required maxlength=\"254\" value=\"{{ employee.eemail }}\" />  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-2 col-form-label\">Employee Contact:&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n        &lt;input type=\"text\" name=\"econtact\" id=\"id_econtact\" required maxlength=\"15\" value=\"{{ employee.econtact }}\" />  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;div class=\"form-group row\">  \n    &lt;label class=\"col-sm-1 col-form-label\">&lt;/label>  \n    &lt;div class=\"col-sm-4\">  \n    &lt;button type=\"submit\" class=\"btn btn-success\">Update&lt;/button>  \n    &lt;/div>  \n  &lt;/div>  \n    &lt;/div>  \n&lt;/form>  \n&lt;/body>  \n&lt;/html>  </code></pre>\n\n\n\n<p><strong>10. Static Files Handling</strong></p>\n\n\n\n<p>Create a folder&nbsp;<strong>static/css</strong>&nbsp;inside the&nbsp;<strong>employee</strong>&nbsp;app and put a css inside it. Download the css file here&nbsp;Click Here.</p>\n\n\n\n<p><strong>11. Project Structure</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-project-structure1.png\" alt=\"Django crudexample Project Structure 1\"/></figure>\n\n\n\n<p><strong>12. Create Migrations</strong></p>\n\n\n\n<p>Create migrations for the created model employee, use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py makemigrations  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-makemigrations.png\" alt=\"Django crud example makemigrations\"/></figure>\n\n\n\n<p>After migrations, execute one more command to reflect the migration into the database. But before it, mention name of app (employee) in INSTALLED_APPS of settings.py file.</p>\n\n\n\n<p><strong>// settings.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>INSTALLED_APPS = &#91;  \n    'django.contrib.admin',  \n    'django.contrib.auth',  \n    'django.contrib.contenttypes',  \n    'django.contrib.sessions',  \n    'django.contrib.messages',  \n    'django.contrib.staticfiles',  \n    'employee'  \n]  </code></pre>\n\n\n\n<p>Run the command to migrate the migrations.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py migrate  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-migrate.png\" alt=\"Django crud example migrate\"/></figure>\n\n\n\n<p>Now, our application has successfully connected and created tables in database. It creates 10 default tables for handling project (session, authentication etc) and one table of our model that we created.</p>\n\n\n\n<p>See list of tables created after migrate command.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/tables-created-after-migrate-command.png\" alt=\"tables created after migrate command\"/></figure>\n\n\n\n<h2>Run Server</h2>\n\n\n\n<p>To run server use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 manage.py runserver  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-runserver.png\" alt=\"Django crud example Run Server\"/></figure>\n\n\n\n<h2>Access to the Browser</h2>\n\n\n\n<p>Access the application by entering&nbsp;<strong>localhost:8000/show</strong>, it will show all the available employee records.</p>\n\n\n\n<p>Initially, there is no record. So, it shows no record message.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-access-to-the-browser.png\" alt=\"Django crud example Access to the Browser\"/></figure>\n\n\n\n<h2>Adding Record</h2>\n\n\n\n<p>Click on the&nbsp;<strong>Add New Record</strong>&nbsp;button and fill the details. See the example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-adding-record.png\" alt=\"Django Crud Example Adding Record\"/></figure>\n\n\n\n<p>Filling the details.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-adding-record1.png\" alt=\"Django Crud Example Adding Record 1\"/></figure>\n\n\n\n<p>Submit the record and see, after submitting it shows the saved record.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-adding-record-saved.png\" alt=\"Django Crud Example Adding Record saved\"/></figure>\n\n\n\n<p>This section also allows, update and delete records from the&nbsp;<strong>actions</strong>&nbsp;column.</p>\n\n\n\n<p>After saving couple of records, now we have following records.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-after-saving-record.png\" alt=\"Django Crud Example After saving Record\"/></figure>\n\n\n\n<h2>Update Record</h2>\n\n\n\n<p>Lets update the record of&nbsp;<strong>Mohan</strong>&nbsp;by clicking on&nbsp;<strong>edit</strong>&nbsp;button. It will display record of Mohan in edit mode.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-update-record.png\" alt=\"Django Crud Example Update Record\"/></figure>\n\n\n\n<p>Lets, suppose I update&nbsp;<strong>mohan</strong>&nbsp;to&nbsp;<strong>mohan kumar</strong>&nbsp;then click on the update button. It updates the record immediately. See the example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-update-record1.png\" alt=\"Django Crud Example Update Record 1\"/></figure>\n\n\n\n<p>Click on update button and it redirects to the following page. See name is updated.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-update-record2.png\" alt=\"Django Crud Example Update Record 2\"/></figure>\n\n\n\n<p>Same like, we can delete records too, by clicking the&nbsp;<strong>delete</strong>&nbsp;link.</p>\n\n\n\n<h2>Delete Record</h2>\n\n\n\n<p>Suppose, I want to delete&nbsp;<strong>Sohan</strong>, it can be done easily by clicking the delete button. See the example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-delete-record.png\" alt=\"Django Crud Example Delete Record\"/></figure>\n\n\n\n<p>After deleting, we left with the following records.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/django/images/django-crud-example-after-delete-record.png\" alt=\"Django Crud Example After Delete Record\"/></figure>\n\n\n\n<p>Well, we have successfully created a CRUD application using Django.</p>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>To create a Django application that performs CRUD operations, follow the following steps. 1. Create a Project 2. Create an App 3. Project Structure Initially, our project looks like this: 4. Database Setup Create a database&nbsp;djangodb&nbsp;in mysql, and configure into the&nbsp;settings.py&nbsp;file of django project. See the example. // settings.py 5. Create a Model Put the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2119,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      71
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4568"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4568"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4568/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2119"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4568"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4568"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4568"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]