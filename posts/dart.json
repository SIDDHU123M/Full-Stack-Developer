[
  {
    "id": 5531,
    "date": "2021-04-05T06:21:57",
    "date_gmt": "2021-04-05T06:21:57",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5531"
    },
    "modified": "2021-04-05T06:21:57",
    "modified_gmt": "2021-04-05T06:21:57",
    "slug": "overview-8",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/overview-8/",
    "title": {
      "rendered": "Overview"
    },
    "content": {
      "rendered": "\n<p>Dart is an object-oriented language with C-style syntax which can optionally trans compile into JavaScript. It supports a varied range of programming aids like interfaces, classes, collections, generics, and optional typing.</p>\n\n\n\n<p>Dart can be extensively used to create single-page applications. Single-page applications apply only to websites and web applications. Single-page applications enable navigation between different screens of the website without loading a different webpage in the browser. A classic example is <strong>Gmail</strong> ─ when you click on a message in your inbox, the browser stays on the same webpage, but JavaScript code hides the inbox and brings the message body on screen.</p>\n\n\n\n<p>Google has released a special build of&nbsp;<strong>Chromium</strong>&nbsp;– the&nbsp;<strong>Dart VM</strong>. Using Dartium means you don’t have to compile your code to JavaScript until you’re ready to test on other browsers.</p>\n\n\n\n<p>The following table compares the features of Dart and JavaScript.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Feature</th><th>Dart</th><th>JavaScript</th></tr><tr><td>Type system</td><td>Optional, dynamic</td><td>Weak, dynamic</td></tr><tr><td>Classes</td><td>Yes, single inheritance</td><td>Prototypical</td></tr><tr><td>Interfaces</td><td>Yes, multiple interfaces</td><td>No</td></tr><tr><td>Concurrency</td><td>Yes, with isolates</td><td>Yes, with HTML5 web workers</td></tr></tbody></table></figure>\n\n\n\n<p>This tutorial provides a basic level understanding of the Dart programming language.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Dart is an object-oriented language with C-style syntax which can optionally trans compile into JavaScript. It supports a varied range of programming aids like interfaces, classes, collections, generics, and optional typing. Dart can be extensively used to create single-page applications. Single-page applications apply only to websites and web applications. Single-page applications enable navigation between different [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5531"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5531"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5531/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5532,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5531/revisions/5532"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5531"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5531"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5531"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5533,
    "date": "2021-04-05T06:35:01",
    "date_gmt": "2021-04-05T06:35:01",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5533"
    },
    "modified": "2021-04-05T06:35:01",
    "modified_gmt": "2021-04-05T06:35:01",
    "slug": "environment-5",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/environment-5/",
    "title": {
      "rendered": "Environment"
    },
    "content": {
      "rendered": "\n<p>This chapter discusses setting up the execution environment for Dart on the Windows platform.</p>\n\n\n\n<h2>Executing Script Online with DartPad</h2>\n\n\n\n<p>You may test your scripts online by using the online editor at https://dartpad.dartlang.org/. The Dart Editor executes the script and displays both HTML as well as console output. The online editor is shipped with a set of preset code samples.</p>\n\n\n\n<p>A screenshot of the&nbsp;<strong>Dartpad</strong>&nbsp;editor is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/dartpad.jpg\" alt=\"Dartpad\"/></figure>\n\n\n\n<p>Dartpad also enables to code in a more restrictive fashion. This can be achieved by checking the Strong mode option on the bottom right of the editor. Strong mode helps with −</p>\n\n\n\n<ul><li>Stronger static and dynamic checking</li><li>Idiomatic JavaScript code generation for better interoperability.</li></ul>\n\n\n\n<p>You may try the following example using DartpadLive Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   print('hello world'); \n}</code></pre>\n\n\n\n<p>The code will display the following output</p>\n\n\n\n<pre class=\"wp-block-code\"><code>hello world\n</code></pre>\n\n\n\n<h2>Setting Up the Local Environment</h2>\n\n\n\n<p>In this section, let us see how to set up the local environment.</p>\n\n\n\n<h3>Using the Text Editor</h3>\n\n\n\n<p>Examples of a few editors include Windows Notepad, Notepad++, Emacs, vim or vi, etc. Editors may vary from one Operating System to another. The source files are typically named with the extension &#8220;.dart&#8221;.</p>\n\n\n\n<h3>Installing the Dart SDK</h3>\n\n\n\n<p>The current stable version of Dart is&nbsp;<strong>1.21.0</strong>. The&nbsp;<strong>dart sdk</strong>&nbsp;can be downloaded from −</p>\n\n\n\n<ul><li>https://www.dartlang.org/install/archive</li><li>http://www.gekorm.com/dart-windows/</li></ul>\n\n\n\n<p>A screenshot of the Dart SDK installation is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/dart_installation.jpg\" alt=\"Dart Installation\"/></figure>\n\n\n\n<p>On completion of the SDK installation, set the PATH environment variable to −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;dart-sdk-path&gt;\\bin \n</code></pre>\n\n\n\n<h3>Verifying the Installation</h3>\n\n\n\n<p>To verify if Dart has been successfully installed, open the command prompt and enter the following command −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">Dart \n</pre>\n\n\n\n<p>If installation is successful, it will show the dart runtime.</p>\n\n\n\n<h2>IDE Support</h2>\n\n\n\n<p>A plethora of IDEs support scripting in Dart. Examples include&nbsp;<strong>Eclipse, IntelliJ</strong>, and&nbsp;<strong>WebStorm</strong>&nbsp;from Jet brains.</p>\n\n\n\n<p>Given below are the steps for configuring the Dart environment using&nbsp;<strong>WebStrom IDE</strong>.</p>\n\n\n\n<h3>Installing WebStorm</h3>\n\n\n\n<p>The installation file for WebStorm can be downloaded from https://www.jetbrains.com/webstorm/download/#section=windows-version.</p>\n\n\n\n<p>The WebStorm installation file is available for Mac OS, Windows and Linux.</p>\n\n\n\n<p>After downloading the installation files, follow the steps given below −</p>\n\n\n\n<ul><li>Install the Dart SDK: Refer to the steps listed above</li><li>Create a new Dart project and configure Dart support</li><li>To create a new Dart project,<ul><li>Click&nbsp;<strong>Create New Project</strong>&nbsp;from the Welcome Screen</li><li>In the next dialog box, click&nbsp;<strong>Dart</strong></li></ul></li><li>If there is no value specified for the&nbsp;<strong>Dart SDK</strong>&nbsp;path, then provide the SDK path. For example, the SDK path may be&nbsp;<strong>&lt;dart installation directory&gt;/dart/dartsdk</strong>.</li></ul>\n\n\n\n<h2>Add a Dart File to the Project</h2>\n\n\n\n<p>To add a Dart file to the Project −</p>\n\n\n\n<ul><li>Right-click on the Project</li><li>New → Dart File</li><li>Enter the name of the Dart Script</li></ul>\n\n\n\n<p>A screenshot of the WebStorm Editor is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/dart_file.jpg\" alt=\"Dart File\"/></figure>\n\n\n\n<h2>The dart2js Tool</h2>\n\n\n\n<p>The&nbsp;<strong>dart2js</strong>&nbsp;tool compiles Dart code to JavaScript. Compiling Dart code to JS enables running the Dart script on browsers that do not support the Dart VM.</p>\n\n\n\n<p>The dart2js tool is shipped as a part of the Dart SDK and can be found in the&nbsp;<strong>/dartsdk/bin folder</strong>.</p>\n\n\n\n<p>To compile Dart to JavaScript, type the following command in the terminal</p>\n\n\n\n<pre class=\"wp-block-code\"><code>dart2js - - out = &lt;output_file&gt;.js  &lt;dart_script&gt;.dart\n</code></pre>\n\n\n\n<p>This command produces a file that contains the JavaScript equivalent of your Dart code. A complete tutorial on using this utility can be found on the official Dart website.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter discusses setting up the execution environment for Dart on the Windows platform. Executing Script Online with DartPad You may test your scripts online by using the online editor at https://dartpad.dartlang.org/. The Dart Editor executes the script and displays both HTML as well as console output. The online editor is shipped with a set of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5533"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5533"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5533/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5534,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5533/revisions/5534"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5533"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5533"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5533"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5535,
    "date": "2021-04-05T06:40:07",
    "date_gmt": "2021-04-05T06:40:07",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5535"
    },
    "modified": "2021-04-05T06:40:07",
    "modified_gmt": "2021-04-05T06:40:07",
    "slug": "syntax",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/syntax/",
    "title": {
      "rendered": "Syntax"
    },
    "content": {
      "rendered": "\n<p>Syntax defines a set of rules for writing programs. Every language specification defines its own syntax. A Dart program is composed of −</p>\n\n\n\n<ul><li>Variables and Operators</li><li>Classes</li><li>Functions</li><li>Expressions and Programming Constructs</li><li>Decision Making and Looping Constructs</li><li>Comments</li><li>Libraries and Packages</li><li>Typedefs</li><li>Data structures represented as Collections / Generics</li></ul>\n\n\n\n<h2>Your First Dart Code</h2>\n\n\n\n<p>Let us start with the traditional “Hello World” example −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>main() { \n   print(\"Hello World!\"); \n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>main()</strong>&nbsp;function is a predefined method in Dart. This method acts as the entry point to the application. A Dart script needs the&nbsp;<strong>main()</strong>&nbsp;method for execution.&nbsp;<strong>print()</strong>&nbsp;is a predefined function that prints the specified string or value to the standard output i.e. the terminal.</p>\n\n\n\n<p>The output of the above code will be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World!\n</code></pre>\n\n\n\n<h2>Execute a Dart Program</h2>\n\n\n\n<p>You can execute a Dart program in two ways −</p>\n\n\n\n<ul><li>Via the terminal</li><li>Via the WebStorm IDE</li></ul>\n\n\n\n<h3>Via the Terminal</h3>\n\n\n\n<p>To execute a Dart program via the terminal −</p>\n\n\n\n<ul><li>Navigate to the path of the current project</li><li>Type the following command in the Terminal window</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dart file_name.dart\n</code></pre>\n\n\n\n<h3>Via the WebStorm IDE</h3>\n\n\n\n<p>To execute a Dart program via the WebStorm IDE −</p>\n\n\n\n<ul><li>Right-click the Dart script file on the IDE. (The file should contain the&nbsp;<strong>main()</strong>&nbsp;function to enable execution)</li><li>Click on the&nbsp;<strong>‘Run &lt;file_name&gt;’</strong>&nbsp;option. A screenshot of the same is given below −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/run_test1_dart.jpg\" alt=\"Run Test1 Dart\"/></figure>\n\n\n\n<p>One can alternatively click the&nbsp;<img src=\"https://www.tutorialspoint.com/dart_programming/images/run_button.jpg\" alt=\"Run Button\">&nbsp;button or use the shortcut&nbsp;<strong>Ctrl+Shift+F10</strong>&nbsp;to execute the Dart Script.</p>\n\n\n\n<h2>Dart Command-Line Options</h2>\n\n\n\n<p>Dart command-line options are used to modify Dart Script execution. Common commandline options for Dart include the following −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Command-Line Option &amp; Description</th></tr><tr><td>1</td><td><strong>-c or &#8211;c</strong>Enables both assertions and type checks (checked mode).</td></tr><tr><td>2</td><td><strong>&#8211;version</strong>Displays VM version information.</td></tr><tr><td>3</td><td><strong>&#8211;packages &lt;path&gt;</strong>Specifies the path to the package resolution configuration file.</td></tr><tr><td>4</td><td><strong>-p &lt;path&gt;</strong>Specifies where to find imported libraries. This option cannot be used with &#8211;packages.</td></tr><tr><td>5</td><td><strong>-h or &#8211;help</strong>Displays help.</td></tr></tbody></table></figure>\n\n\n\n<h2>Enabling Checked Mode</h2>\n\n\n\n<p>Dart programs run in two modes namely −</p>\n\n\n\n<ul><li>Checked Mode</li><li>Production Mode (Default)</li></ul>\n\n\n\n<p>It is recommended to run the Dart VM in&nbsp;<strong>checked mode</strong>&nbsp;during development and testing, since it adds warnings and errors to aid development and debugging process. The checked mode enforces various checks like type-checking etc. To turn on the checked mode, add the -c or –-checked option before the script-file name while running the script.</p>\n\n\n\n<p>However, to ensure performance benefit while running the script, it is recommended to run the script in the&nbsp;<strong>production mode</strong>.</p>\n\n\n\n<p>Consider the following <strong>Test. dart</strong> script file −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   int n = \"hello\"; \n   print(n); \n} </code></pre>\n\n\n\n<p>Run the script by entering −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>dart Test.dart\n</code></pre>\n\n\n\n<p>Though there is a type-mismatch the script executes successfully as the checked mode is turned off. The script will result in the following output −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">hello\n</pre>\n\n\n\n<p>Now try executing the script with the &#8220;- &#8211; checked&#8221; or the &#8220;-c&#8221; option −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>dart -c Test.dart \n</code></pre>\n\n\n\n<p>Or,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>dart - - checked Test.dart\n</code></pre>\n\n\n\n<p>The Dart VM will throw an error stating that there is a type mismatch.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Unhandled exception: \ntype 'String' is not a subtype of type 'int' of 'n' where \n   String is from dart:core \n   int is from dart:core \n#0  main (file:///C:/Users/Administrator/Desktop/test.dart:3:9) \n#1  _startIsolate.&lt;anonymous closure&gt; (dart:isolate-patch/isolate_patch.dart :261) \n#2  _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:148)</code></pre>\n\n\n\n<h2>Identifiers in Dart</h2>\n\n\n\n<p>Identifiers are names given to elements in a program like variables, functions etc. The rules for identifiers are −</p>\n\n\n\n<p>Identifiers can include both, characters and digits. However, the identifier cannot begin with a digit.</p>\n\n\n\n<ul><li>Identifiers cannot include special symbols except for underscore (_) or a dollar sign ($).</li><li>Identifiers cannot be keywords.</li><li>They must be unique.</li><li>Identifiers are case-sensitive.</li><li>Identifiers cannot contain spaces.</li></ul>\n\n\n\n<p>The following tables lists a few examples of valid and invalid identifiers −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Valid identifiers</th><th>Invalid identifiers</th></tr><tr><td>firstName</td><td>Var</td></tr><tr><td>first_name</td><td>first name</td></tr><tr><td>num1</td><td>first-name</td></tr><tr><td>$result</td><td>1number</td></tr></tbody></table></figure>\n\n\n\n<h2>Keywords in Dart</h2>\n\n\n\n<p>Keywords have a special meaning in the context of a language. The following table lists some keywords in Dart.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>abstract 1</td><td>continue</td><td>false</td><td>new</td><td>this</td></tr><tr><td>as 1</td><td>default</td><td>final</td><td>null</td><td>throw</td></tr><tr><td>assert</td><td>deferred 1</td><td>finally</td><td>operator 1</td><td>true</td></tr><tr><td>async 2</td><td>do</td><td>for</td><td>part 1</td><td>try</td></tr><tr><td>async* 2</td><td>dynamic 1</td><td>get 1</td><td>rethrow</td><td>typedef 1</td></tr><tr><td>await 2</td><td>else</td><td>if</td><td>return</td><td>var</td></tr><tr><td>break</td><td>enum</td><td>implements 1</td><td>set 1</td><td>void</td></tr><tr><td>case</td><td>export 1</td><td>import 1</td><td>static 1</td><td>while</td></tr><tr><td>catch</td><td>external 1</td><td>in</td><td>super</td><td>with</td></tr><tr><td>class</td><td>extends</td><td>is</td><td>switch</td><td>yield 2</td></tr><tr><td>const</td><td>factory 1</td><td>library 1</td><td>sync* 2</td><td>yield* 2</td></tr></tbody></table></figure>\n\n\n\n<h3>Whitespace and Line Breaks</h3>\n\n\n\n<p>Dart ignores spaces, tabs, and newlines that appear in programs. You can use spaces, tabs, and newlines freely in your program and you are free to format and indent your programs in a neat and consistent way that makes the code easy to read and understand.</p>\n\n\n\n<h3>Dart is Case-sensitive</h3>\n\n\n\n<p>Dart is case-sensitive. This means that Dart differentiates between uppercase and lowercase characters.</p>\n\n\n\n<h3>Statements end with a Semicolon</h3>\n\n\n\n<p>Each line of instruction is called a statement. Each dart statement must end with a semicolon (;). A single line can contain multiple statements. However, these statements must be separated by a semicolon.</p>\n\n\n\n<h2>Comments in Dart</h2>\n\n\n\n<p>Comments are a way to improve the readability of a program. Comments can be used to include additional information about a program like author of the code, hints about a function/ construct etc. Comments are ignored by the compiler.</p>\n\n\n\n<p>Dart supports the following types of comments −</p>\n\n\n\n<ul><li><strong>Single-line comments ( // )</strong>&nbsp;− Any text between a &#8220;//&#8221; and the end of a line is treated as a comment</li><li><strong>Multi-line comments (/* */)</strong>&nbsp;− These comments may span multiple lines.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>// this is single line comment  \n  \n/* This is a   \n   Multi-line comment  \n*/ </code></pre>\n\n\n\n<h2>Object-Oriented Programming in Dart</h2>\n\n\n\n<p>Dart is an Object-Oriented language. Object Orientation is a software development paradigm that follows real-world modelling. Object Orientation considers a program as a collection of objects that communicate with each other via mechanism called methods.</p>\n\n\n\n<ul><li><strong>Object</strong>&nbsp;− An object is a real-time representation of any entity. As per Grady Brooch, every object must have three features −<ul><li><strong>State</strong>&nbsp;− described by the attributes of an object.</li><li><strong>Behavior</strong>&nbsp;− describes how the object will act.</li><li><strong>Identity</strong>&nbsp;− a unique value that distinguishes an object from a set of similar such objects.</li></ul></li><li><strong>Class</strong>&nbsp;− A class in terms of OOP is a blueprint for creating objects. A class encapsulates data for the object.</li><li><strong>Method</strong>&nbsp;− Methods facilitate communication between objects.</li></ul>\n\n\n\n<h3>Example: Dart and Object Orientation</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class TestClass {   \n   void disp() {     \n      print(\"Hello World\"); \n   } \n}  \nvoid main() {   \n   TestClass c = new TestClass();   \n   c.disp();  \n}</code></pre>\n\n\n\n<p>The above example defines a class&nbsp;<strong>TestClass</strong>. The class has a method&nbsp;<strong>disp()</strong>. The method prints the string “Hello World” on the terminal. The new keyword creates an object of the class. The object invokes the method&nbsp;<strong>disp()</strong>.</p>\n\n\n\n<p>The code should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Syntax defines a set of rules for writing programs. Every language specification defines its own syntax. A Dart program is composed of − Variables and Operators Classes Functions Expressions and Programming Constructs Decision Making and Looping Constructs Comments Libraries and Packages Typedefs Data structures represented as Collections / Generics Your First Dart Code Let us [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5535"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5535"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5535/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5536,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5535/revisions/5536"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5535"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5535"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5535"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5537,
    "date": "2021-04-05T06:42:08",
    "date_gmt": "2021-04-05T06:42:08",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5537"
    },
    "modified": "2021-04-05T06:42:08",
    "modified_gmt": "2021-04-05T06:42:08",
    "slug": "data-types-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-types-3/",
    "title": {
      "rendered": "Data Types"
    },
    "content": {
      "rendered": "\n<p>One of the most fundamental characteristics of a programming language is the set of data types it supports. These are the type of values that can be represented and manipulated in a programming language.</p>\n\n\n\n<p>The Dart language supports the following types−</p>\n\n\n\n<ul><li>Numbers</li><li>Strings</li><li>Booleans</li><li>Lists</li><li>Maps</li></ul>\n\n\n\n<h2>Numbers</h2>\n\n\n\n<p>Numbers in Dart are used to represent numeric literals. The Number Dart come in two flavours −</p>\n\n\n\n<ul><li><strong>Integer</strong>&nbsp;− Integer values represent non-fractional values, i.e., numeric values without a decimal point. For example, the value &#8220;10&#8221; is an integer. Integer literals are represented using the&nbsp;<strong>int</strong>&nbsp;keyword.</li><li><strong>Double</strong>&nbsp;− Dart also supports fractional numeric values i.e. values with decimal points. The Double data type in Dart represents a 64-bit (double-precision) floating-point number. For example, the value &#8220;10.10&#8221;. The keyword&nbsp;<strong>double</strong>&nbsp;is used to represent floating point literals.</li></ul>\n\n\n\n<h2>Strings</h2>\n\n\n\n<p>Strings represent a sequence of characters. For instance, if you were to store some data like name, address etc. the string data type should be used. A Dart string is a sequence of UTF-16 code units.&nbsp;<strong>Runes</strong>&nbsp;are used to represent a sequence of UTF-32 code units.</p>\n\n\n\n<p>The keyword&nbsp;<strong>String</strong>&nbsp;is used to represent string literals. String values are embedded in either single or double quotes.</p>\n\n\n\n<h2>Boolean</h2>\n\n\n\n<p>The Boolean data type represents Boolean values true and false. Dart uses the&nbsp;<strong>bool</strong>&nbsp;keyword to represent a Boolean value.</p>\n\n\n\n<h2>List and Map</h2>\n\n\n\n<p>The data types list and map are used to represent a collection of objects. A&nbsp;<strong>List</strong>&nbsp;is an ordered group of objects. The List data type in Dart is synonymous to the concept of an array in other programming languages. The&nbsp;<strong>Map</strong>&nbsp;data type represents a set of values as key-value pairs. The&nbsp;<strong>dart: core</strong>&nbsp;library enables creation and manipulation of these collections through the predefined List and Map classes respectively.</p>\n\n\n\n<h2>The Dynamic Type</h2>\n\n\n\n<p>Dart is an optionally typed language. If the type of a variable is not explicitly specified, the variable’s type is&nbsp;<strong>dynamic</strong>. The&nbsp;<strong>dynamic</strong>&nbsp;keyword can also be used as a type annotation explicitly.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>One of the most fundamental characteristics of a programming language is the set of data types it supports. These are the type of values that can be represented and manipulated in a programming language. The Dart language supports the following types− Numbers Strings Booleans Lists Maps Numbers Numbers in Dart are used to represent numeric [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5537"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5537"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5537/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5538,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5537/revisions/5538"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5537"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5537"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5537"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5539,
    "date": "2021-04-05T06:46:21",
    "date_gmt": "2021-04-05T06:46:21",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5539"
    },
    "modified": "2021-04-05T06:46:21",
    "modified_gmt": "2021-04-05T06:46:21",
    "slug": "variables-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/variables-2/",
    "title": {
      "rendered": "Variables"
    },
    "content": {
      "rendered": "\n<p>A variable is “a named space in the memory” that stores values. In other words, it acts a container for values in a program. Variable names are called identifiers. Following are the naming rules for an identifier −</p>\n\n\n\n<ul><li>Identifiers cannot be keywords.</li><li>Identifiers can contain alphabets and numbers.</li><li>Identifiers cannot contain spaces and special characters, except the underscore (_) and the dollar ($) sign.</li><li>Variable names cannot begin with a number.</li></ul>\n\n\n\n<h2>Type Syntax</h2>\n\n\n\n<p>A variable must be declared before it is used. Dart uses the var keyword to achieve the same. The syntax for declaring a variable is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var name = 'Smith';\n</code></pre>\n\n\n\n<p>All variables in dart store a reference to the value rather than containing the value. The variable called name contains a reference to a String object with a value of “Smith”.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/type_syntax.jpg\" alt=\"Type Syntax\"/></figure>\n\n\n\n<p>Dart supports&nbsp;<strong>type-checking</strong>&nbsp;by prefixing the variable name with the data type. Type-checking ensures that a variable holds only data specific to a data type. The syntax for the same is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>String name = 'Smith'; \nint num = 10;\n</code></pre>\n\n\n\n<p>Consider the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   String name = 1; \n}</code></pre>\n\n\n\n<p>The above snippet will result in a warning since the value assigned to the variable doesn’t match the variable’s data type.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Warning: A value of type 'String' cannot be assigned to a variable of type 'int' \n</code></pre>\n\n\n\n<p>All uninitialized variables have an initial value of null. This is because Dart considers all values as objects. The following example illustrates the same −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   int num; \n   print(num); \n}</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Null \n</code></pre>\n\n\n\n<h3>The dynamic keyword</h3>\n\n\n\n<p>Variables declared without a static type are implicitly declared as dynamic. Variables can be also declared using the dynamic keyword in place of the var keyword.</p>\n\n\n\n<p>The following example illustrates the same. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   dynamic x = \"tom\"; \n   print(x);  \n}</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>tom\n</code></pre>\n\n\n\n<h2>Final and Const</h2>\n\n\n\n<p>The&nbsp;<strong>final</strong>&nbsp;and&nbsp;<strong>const</strong>&nbsp;keyword are used to declare constants. Dart prevents modifying the values of a variable declared using the final or const keyword. These keywords can be used in conjunction with the variable’s data type or instead of the&nbsp;<strong>var</strong>&nbsp;keyword.</p>\n\n\n\n<p>The&nbsp;<strong>const</strong>&nbsp;keyword is used to represent a compile-time constant. Variables declared using the&nbsp;<strong>const</strong>&nbsp;keyword are implicitly final.</p>\n\n\n\n<h3>Syntax: final Keyword</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>final variable_name\n</code></pre>\n\n\n\n<p>OR</p>\n\n\n\n<pre class=\"wp-block-code\"><code>final data_type  variable_name\n</code></pre>\n\n\n\n<h3>Syntax: const Keyword</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>const variable_name\n</code></pre>\n\n\n\n<p>OR</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const data_type variable_name\n</code></pre>\n\n\n\n<h3>Example – final Keyword</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   final val1 = 12; \n   print(val1); \n}</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>12\n</code></pre>\n\n\n\n<h3>Example – const Keyword</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   const pi = 3.14; \n   const area = pi*12*12; \n   print(\"The output is ${area}\"); \n}</code></pre>\n\n\n\n<p>The above example declares two constants,&nbsp;<strong>pi</strong>&nbsp;and&nbsp;<strong>area</strong>, using the&nbsp;<strong>const</strong>&nbsp;keyword. The&nbsp;<strong>area</strong>&nbsp;variable’s value is a compile-time constant.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>The output is 452.15999999999997\n</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Only&nbsp;<strong>const</strong>&nbsp;variables can be used to compute a compile time constant. Compile-time constants are constants whose values will be determined at compile time</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Dart throws an exception if an attempt is made to modify variables declared with the <strong>final</strong> or const keyword. The example given below illustrates the same −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   final v1 = 12; \n   const v2 = 13; \n   v2 = 12; \n}</code></pre>\n\n\n\n<p>The code given above will throw the following error as&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Unhandled exception: \ncannot assign to final variable 'v2='.  \nNoSuchMethodError: cannot assign to final variable 'v2=' \n#0  NoSuchMethodError._throwNew (dart:core-patch/errors_patch.dart:178) \n#1      main (file: Test.dart:5:3) \n#2    _startIsolate.&lt;anonymous closure&gt; (dart:isolate-patch/isolate_patch.dart:261) \n#3    _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A variable is “a named space in the memory” that stores values. In other words, it acts a container for values in a program. Variable names are called identifiers. Following are the naming rules for an identifier − Identifiers cannot be keywords. Identifiers can contain alphabets and numbers. Identifiers cannot contain spaces and special characters, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5539"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5539"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5539/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5540,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5539/revisions/5540"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5539"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5539"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5539"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5541,
    "date": "2021-04-05T06:49:21",
    "date_gmt": "2021-04-05T06:49:21",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5541"
    },
    "modified": "2021-04-05T06:49:21",
    "modified_gmt": "2021-04-05T06:49:21",
    "slug": "operators-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/operators-3/",
    "title": {
      "rendered": "Operators"
    },
    "content": {
      "rendered": "\n<p>An expression is a special kind of statement that evaluates to a value. Every expression is composed of −</p>\n\n\n\n<ul><li><strong>Operands</strong>&nbsp;− Represents the data</li><li><strong>Operator</strong>&nbsp;− Defines how the operands will be processed to produce a value.</li></ul>\n\n\n\n<p>Consider the following expression – &#8220;2 + 3&#8221;. In this expression, 2 and 3 are&nbsp;<strong>operands</strong>&nbsp;and the symbol &#8220;+&#8221; (plus) is the&nbsp;<strong>operator</strong>.</p>\n\n\n\n<p>In this chapter, we will discuss the operators that are available in Dart.</p>\n\n\n\n<ul><li>Arithmetic Operators</li><li>Equality and Relational Operators</li><li>Type test Operators</li><li>Bitwise Operators</li><li>Assignment Operators</li><li>Logical Operators</li></ul>\n\n\n\n<h2>Arithmetic Operators</h2>\n\n\n\n<p>The following table shows the arithmetic operators supported by Dart.</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Operators &amp; Meaning</th></tr><tr><td>1</td><td><strong>+</strong>Add</td></tr><tr><td>2</td><td><strong>−</strong>Subtract</td></tr><tr><td>3</td><td><strong>-expr</strong>Unary minus, also known as negation (reverse the sign of the expression)</td></tr><tr><td>4</td><td><strong>*</strong>Multiply</td></tr><tr><td>5</td><td><strong>/</strong>Divide</td></tr><tr><td>6</td><td><strong>~/</strong>Divide, returning an integer result</td></tr><tr><td>7</td><td><strong>%</strong>Get the remainder of an integer division (modulo)</td></tr><tr><td>8</td><td><strong>++</strong>Increment</td></tr><tr><td>9</td><td><strong>&#8212;</strong>Decrement</td></tr></tbody></table></figure>\n\n\n\n<h2>Equality and Relational Operators</h2>\n\n\n\n<p>Relational Operators tests or defines the kind of relationship between two entities. Relational operators return a Boolean value i.e. true/ false.</p>\n\n\n\n<p>Assume the value of A is 10 and B is 20.</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td>&gt;</td><td>Greater than</td><td>(A &gt; B) is False</td></tr><tr><td>&lt;</td><td>Lesser than</td><td>(A &lt; B) is True</td></tr><tr><td>&gt;=</td><td>Greater than or equal to</td><td>(A &gt;= B) is False</td></tr><tr><td>&lt;=</td><td>Lesser than or equal to</td><td>(A &lt;= B) is True</td></tr><tr><td>==</td><td>Equality</td><td>(A==B) is False</td></tr><tr><td>!=</td><td>Not equal</td><td>(A!=B) is True</td></tr></tbody></table></figure>\n\n\n\n<h2>Type test Operators</h2>\n\n\n\n<p>These operators are handy for checking types at runtime.</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Meaning</th></tr><tr><td>is</td><td>True if the object has the specified type</td></tr><tr><td>is!</td><td>False if the object has the specified type</td></tr></tbody></table></figure>\n\n\n\n<h2>Bitwise Operators</h2>\n\n\n\n<p>The following table lists the bitwise operators available in Dart and their role −</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td>Bitwise AND</td><td>a &amp; b</td><td>Returns a one in each bit position for which the corresponding bits of both operands are ones.</td></tr><tr><td>Bitwise OR</td><td>a | b</td><td>Returns a one in each bit position for which the corresponding bits of either or both operands are ones.</td></tr><tr><td>Bitwise XOR</td><td>a ^ b</td><td>Returns a one in each bit position for which the corresponding bits of either but not both operands are ones.</td></tr><tr><td>Bitwise NOT</td><td>~ a</td><td>Inverts the bits of its operand.</td></tr><tr><td>Left shift</td><td>a ≪ b</td><td>Shifts a in binary representation b (&lt; 32) bits to the left, shifting in zeroes from the right.</td></tr><tr><td>Signpropagating right shift</td><td>a ≫ b</td><td>Shifts a in binary representation b (&lt; 32) bits to the right, discarding bits shifted off.</td></tr></tbody></table></figure>\n\n\n\n<h2>Assignment Operators</h2>\n\n\n\n<p>The following table lists the assignment operators available in Dart.</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Operator &amp; Description</th></tr><tr><td>1</td><td><strong>=(Simple Assignment )</strong>Assigns values from the right side operand to the left side operand<strong>Ex</strong>:C = A + B will assign the value of A + B into C</td></tr><tr><td>2</td><td><strong>??=</strong>Assign the value only if the variable is null</td></tr><tr><td>3</td><td><strong>+=(Add and Assignment)</strong>It adds the right operand to the left operand and assigns the result to the left operand.<strong>Ex</strong>: C += A is equivalent to C = C + A</td></tr><tr><td>4</td><td><strong>─=(Subtract and Assignment)</strong>It subtracts the right operand from the left operand and assigns the result to the left operand.<strong>Ex</strong>: C -= A is equivalent to C = C – A</td></tr><tr><td>5</td><td><strong>*=(Multiply and Assignment)</strong>It multiplies the right operand with the left operand and assigns the result to the left operand.<strong>Ex</strong>: C *= A is equivalent to C = C * A</td></tr><tr><td>6</td><td><strong>/=(Divide and Assignment)</strong>It divides the left operand with the right operand and assigns the result to the left operand.</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Note</strong>&nbsp;− Same logic applies to Bitwise operators, so they will become ≪=, ≫=, ≫=, ≫=, |= and ^=.</p>\n\n\n\n<h2>Logical Operators</h2>\n\n\n\n<p>Logical operators are used to combine two or more conditions. Logical operators return a Boolean value. Assume the value of variable A is 10 and B is 20.</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td>&amp;&amp;</td><td><strong>And</strong>&nbsp;− The operator returns true only if all the expressions specified return true</td><td>(A &gt; 10 &amp;&amp; B &gt; 10) is False.</td></tr><tr><td>||</td><td><strong>OR</strong>&nbsp;− The operator returns true if at least one of the expressions specified return true</td><td>(A &gt; 10 || B &gt; 10) is True.</td></tr><tr><td>!</td><td><strong>NOT</strong>&nbsp;− The operator returns the inverse of the expression’s result. For E.g.: !(7&gt;5) returns false</td><td>!(A &gt; 10) is True.</td></tr></tbody></table></figure>\n\n\n\n<h2>Conditional Expressions</h2>\n\n\n\n<p>Dart has two operators that let you evaluate expressions that might otherwise require ifelse statements −</p>\n\n\n\n<h3>condition ? expr1 : expr2</h3>\n\n\n\n<p>If condition is true, then the expression evaluates&nbsp;<strong>expr1</strong>&nbsp;(and returns its value); otherwise, it evaluates and returns the value of&nbsp;<strong>expr2</strong>.</p>\n\n\n\n<h3>expr1 ?? expr2</h3>\n\n\n\n<p>If&nbsp;<strong>expr1</strong>&nbsp;is non-null, returns its value; otherwise, evaluates and returns the value of&nbsp;<strong>expr2</strong></p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how you can use the conditional expression in Dart −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var a = 10; \n   var res = a &gt; 12 ? \"value greater than 10\":\"value lesser than or equal to 10\"; \n   print(res); \n} </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>value lesser than or equal to 10\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let’s take another example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var a = null; \n   var b = 12; \n   var res = a ?? b; \n   print(res); \n}</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>12</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An expression is a special kind of statement that evaluates to a value. Every expression is composed of − Operands&nbsp;− Represents the data Operator&nbsp;− Defines how the operands will be processed to produce a value. Consider the following expression – &#8220;2 + 3&#8221;. In this expression, 2 and 3 are&nbsp;operands&nbsp;and the symbol &#8220;+&#8221; (plus) is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5541"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5541"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5541/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5542,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5541/revisions/5542"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5541"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5541"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5541"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5543,
    "date": "2021-04-05T06:52:06",
    "date_gmt": "2021-04-05T06:52:06",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5543"
    },
    "modified": "2021-04-05T06:52:06",
    "modified_gmt": "2021-04-05T06:52:06",
    "slug": "loops-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/loops-2/",
    "title": {
      "rendered": "Loops"
    },
    "content": {
      "rendered": "\n<p>At times, certain instructions require repeated execution. Loops are an ideal way to do the same. A loop represents a set of instructions that must be repeated. In a loop’s context, a repetition is termed as an&nbsp;<strong>iteration</strong>.</p>\n\n\n\n<p>The following figure illustrates the classification of loops −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/classification_of_loops.jpg\" alt=\"Classification Of Loops\"/></figure>\n\n\n\n<p>Let’s start the discussion with Definite Loops. A loop whose number of iterations are definite/fixed is termed as a&nbsp;<strong>definite loop</strong>.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Loop &amp; Description</th></tr><tr><td>1</td><td>for loops for loop is an implementation of a definite loop. The for loop executes the code block a specified number of times. It can be used to iterate over a fixed set of values, such as an array</td></tr><tr><td>2</td><td>for…in LoopThe for&#8230;in the loop is used to loop through an object&#8217;s properties.</td></tr></tbody></table></figure>\n\n\n\n<p>Moving on, let’s now discuss the indefinite loops. An indefinite loop is used when the number of iterations in a loop is indeterminate or unknown. Indefinite loops can be implemented using −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Loop &amp; Description</th></tr><tr><td>1</td><td>while LoopThe, while loop executes the instructions each time the condition specified, evaluates to true. In other words, the loop evaluates the condition before the block of code is executed.</td></tr><tr><td>2</td><td>do…while LoopThe do…while loop is similar to the while loop except that the do&#8230;while loop doesn’t evaluate the condition for the first time the loop executes.</td></tr></tbody></table></figure>\n\n\n\n<p>Let us now move on and discuss the&nbsp;<strong>Loop Control Statements</strong>&nbsp;of Dart.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Control Statement &amp; Description</th></tr><tr><td>1</td><td>break StatementThe <strong>break</strong> statement is used to take the control out of a construct. Using a <strong>break</strong> in a loop causes the program to exit the loop. Following is an example of the <strong>break</strong> statement.</td></tr><tr><td>2</td><td>continue StatementThe <strong>continue</strong> statement skips the subsequent statements in the current iteration and takes the control back to the beginning of the loop.</td></tr></tbody></table></figure>\n\n\n\n<h2>Using Labels to Control the Flow</h2>\n\n\n\n<p>A&nbsp;<strong>label</strong>&nbsp;is simply an identifier followed by a colon (:) that is applied to a statement or a block of code. A label can be used with&nbsp;<strong>break</strong>&nbsp;and&nbsp;<strong>continue</strong>&nbsp;to control the flow more precisely.</p>\n\n\n\n<p>Line breaks are not allowed between the&nbsp;<strong>‘continue’</strong>&nbsp;or&nbsp;<strong>‘break’</strong>&nbsp;statement and its label name. Also, there should not be any other statement in between a label name and an associated loop.</p>\n\n\n\n<h3>Example: Label with Break</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   outerloop: // This is the label name \n   \n   for (var i = 0; i &lt; 5; i++) { \n      print(\"Innerloop: ${i}\"); \n      innerloop: \n      \n      for (var j = 0; j &lt; 5; j++) { \n         if (j &gt; 3 ) break ; \n         \n         // Quit the innermost loop \n         if (i == 2) break innerloop; \n         \n         // Do the same thing \n         if (i == 4) break outerloop; \n         \n         // Quit the outer loop \n         print(\"Innerloop: ${j}\"); \n      } \n   } \n}</code></pre>\n\n\n\n<p>The following&nbsp;<strong>output</strong>&nbsp;is displayed on successful execution of the above code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Innerloop: 0\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nInnerloop: 3\nInnerloop: 1\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nInnerloop: 3\nInnerloop: 2\nInnerloop: 3\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nInnerloop: 3\nInnerloop: 4\n</code></pre>\n\n\n\n<h3>Example: Label with continue</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   outerloop: // This is the label name \n   \n   for (var i = 0; i &lt; 3; i++) { \n      print(\"Outerloop:${i}\"); \n      \n      for (var j = 0; j &lt; 5; j++) { \n         if (j == 3){ \n            continue outerloop; \n         } \n         print(\"Innerloop:${j}\"); \n      } \n   } \n}</code></pre>\n\n\n\n<p>The following output is displayed on successful execution of the above code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Outerloop: 0 \nInnerloop: 0 \nInnerloop: 1 \nInnerloop: 2 \n\nOuterloop: 1 \nInnerloop: 0 \nInnerloop: 1 \nInnerloop: 2 \n\nOuterloop: 2 \nInnerloop: 0 \nInnerloop: 1 \nInnerloop: 2 </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>At times, certain instructions require repeated execution. Loops are an ideal way to do the same. A loop represents a set of instructions that must be repeated. In a loop’s context, a repetition is termed as an&nbsp;iteration. The following figure illustrates the classification of loops − Let’s start the discussion with Definite Loops. A loop [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5543"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5543"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5543/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5544,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5543/revisions/5544"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5543"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5543"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5543"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5545,
    "date": "2021-04-05T06:53:44",
    "date_gmt": "2021-04-05T06:53:44",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5545"
    },
    "modified": "2021-04-05T06:53:44",
    "modified_gmt": "2021-04-05T06:53:44",
    "slug": "decision-making-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/decision-making-3/",
    "title": {
      "rendered": "Decision Making"
    },
    "content": {
      "rendered": "\n<p>A conditional/decision-making construct evaluates a condition before the instructions are executed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/decision_making.jpg\" alt=\"Decision Making\"/></figure>\n\n\n\n<p>Conditional constructs in Dart are classified in the following table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Statement &amp; Description</th></tr><tr><td>1</td><td><strong>if</strong> statement consists of a Boolean expression followed by one or more statements.</td></tr><tr><td>2</td><td>If&#8230;Else statement <strong>if</strong> can be followed by an optional <strong>else</strong> block. The <strong>else</strong> block will execute if the Boolean expression tested by the <strong>if</strong> block evaluates to false.</td></tr><tr><td>3</td><td>else…if LadderThe <strong>else…if the ladder</strong> is useful to test multiple conditions. Following is the syntax of the same.</td></tr><tr><td>4</td><td>switch…case StatementThe switch statement evaluates an expression, matches the expression’s value to a case clause, and executes the statements associated with that case.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A conditional/decision-making construct evaluates a condition before the instructions are executed. Conditional constructs in Dart are classified in the following table. Sr.No Statement &amp; Description 1 if statement consists of a Boolean expression followed by one or more statements. 2 If&#8230;Else statement if can be followed by an optional else block. The else block will execute if the Boolean expression tested by the if block [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5545"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5545"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5545/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5546,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5545/revisions/5546"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5545"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5545"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5545"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5547,
    "date": "2021-04-05T06:57:23",
    "date_gmt": "2021-04-05T06:57:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5547"
    },
    "modified": "2021-04-05T06:57:23",
    "modified_gmt": "2021-04-05T06:57:23",
    "slug": "numbers",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/numbers/",
    "title": {
      "rendered": "Numbers"
    },
    "content": {
      "rendered": "\n<p>Dart numbers can be classified as −</p>\n\n\n\n<ul><li><strong>int</strong>&nbsp;− Integer of arbitrary size. The&nbsp;<strong>int</strong>&nbsp;data type is used to represent whole numbers.</li><li><strong>double</strong>&nbsp;− 64-bit (double-precision) floating-point numbers, as specified by the IEEE 754 standard. The&nbsp;<strong>double</strong>&nbsp;data type is used to represent fractional numbers</li></ul>\n\n\n\n<p>The&nbsp;<strong>num</strong>&nbsp;type is inherited by the&nbsp;<strong>int</strong>&nbsp;and&nbsp;<strong>double</strong>&nbsp;types. The&nbsp;<strong>dart core library</strong>&nbsp;allows numerous operations on numeric values.</p>\n\n\n\n<p>The syntax for declaring a number is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int var_name;      // declares an integer variable \ndouble var_name;   // declares a double variable \n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   // declare an integer\n   int num1 = 10;             \n     \n   // declare a double value\n   double num2 = 10.50;  \n\n   // print the values\n   print(num1);\n   print(num2);\n}</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10 \n10.5 \n</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− The&nbsp;<strong>Dart VM</strong>&nbsp;will throw an exception if fractional values are assigned to integer variables.</p>\n\n\n\n<h2>Parsing</h2>\n\n\n\n<p>The <strong>parse()</strong> static function allows parsing a string containing numeric literal into a number. The following illustration demonstrates the same −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   print(num.parse('12')); \n   print(num.parse('10.91')); \n}</code></pre>\n\n\n\n<p>The above code will result in the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>12 \n10.91\n</code></pre>\n\n\n\n<p>The parse function throws a&nbsp;<strong>FormatException</strong>&nbsp;if it is passed any value other than numerals. The following code shows how to pass an alpha-numeric value to the&nbsp;<strong>parse()</strong>&nbsp;function.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   print(num.parse('12A')); \n   print(num.parse('AAAA')); \n}</code></pre>\n\n\n\n<p>The above code will result in the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Unhandled exception: \nFormatException: 12A \n#0 num.parse (dart:core/num.dart:446) \n#1 main (file:///D:/Demos/numbers.dart:4:13) \n#2 _startIsolate.&lt;anonymous closure&gt; (dart:isolatepatch/isolate_patch.dart:261) \n#3 _RawReceivePortImpl._handleMessage (dart:isolatepatch/isolate_patch.dart:148)\n</code></pre>\n\n\n\n<h2>Number Properties</h2>\n\n\n\n<p>The following table lists the properties supported by Dart numbers.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Property &amp; Description</th></tr><tr><td>1</td><td>hashcodeReturns a hash code for a numerical value.</td></tr><tr><td>2</td><td>infinite true if the number is finite; otherwise, false.</td></tr><tr><td>3</td><td>isInfiniteTrue if the number is positive infinity or negative infinity; otherwise, false.</td></tr><tr><td>4</td><td><strong>isNan</strong>True if the number is the double Not-a-Number value; otherwise, false.</td></tr><tr><td>5</td><td>is negative true if the number is negative; otherwise, false.</td></tr><tr><td>6</td><td>signatures minus one, zero, or plus one depending on the sign and numerical value of the number.</td></tr><tr><td>7</td><td>seven returns true if the number is an even number.</td></tr><tr><td>8</td><td>isOddReturns true if the number is an odd number.</td></tr></tbody></table></figure>\n\n\n\n<h2>Number Methods</h2>\n\n\n\n<p>Given below are a list of commonly used methods supported by numbers −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Method &amp; Description</th></tr><tr><td>1</td><td>abs return the absolute value of the number.</td></tr><tr></tr><tr><td>2</td><td>ceilReturns the least integer no smaller than the number.</td></tr><tr><td>3</td><td>compareToCompares this to another number.</td></tr><tr><td>4</td><td>FloorReturns the greatest integer not greater than the current number.</td></tr><tr><td>5</td><td>remainder returns the truncated remainder after dividing the two numbers.</td></tr><tr><td>6</td><td>RoundReturns the integer closest to the current numbers.</td></tr><tr><td>7</td><td>to double returns the double equivalent of the number.</td></tr><tr><td>8</td><td>joint returns the integer equivalent of the number.</td></tr><tr><td>9</td><td>toStringReturns the string equivalent representation of the number.</td></tr><tr><td>10</td><td>truncateReturns an integer after discarding any fractional digits.</td></tr></tbody></table></figure>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Dart numbers can be classified as − int&nbsp;− Integer of arbitrary size. The&nbsp;int&nbsp;data type is used to represent whole numbers. double&nbsp;− 64-bit (double-precision) floating-point numbers, as specified by the IEEE 754 standard. The&nbsp;double&nbsp;data type is used to represent fractional numbers The&nbsp;num&nbsp;type is inherited by the&nbsp;int&nbsp;and&nbsp;double&nbsp;types. The&nbsp;dart core library&nbsp;allows numerous operations on numeric values. The syntax [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5547"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5547"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5547/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5548,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5547/revisions/5548"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5547"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5547"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5547"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5549,
    "date": "2021-04-05T07:01:06",
    "date_gmt": "2021-04-05T07:01:06",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5549"
    },
    "modified": "2021-04-05T07:01:06",
    "modified_gmt": "2021-04-05T07:01:06",
    "slug": "string",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/string/",
    "title": {
      "rendered": "String"
    },
    "content": {
      "rendered": "\n<p>The String data type represents a sequence of characters. A Dart string is a sequence of UTF 16 code units.</p>\n\n\n\n<p>String values in Dart can be represented using either single or double or triple quotes. Single line strings are represented using single or double quotes. Triple quotes are used to represent multi-line strings.</p>\n\n\n\n<p>The syntax of representing string values in Dart is as given below −</p>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String  variable_name = 'value'  \n\nOR  \n\nString  variable_name = ''value''  \n\nOR  \n\nString  variable_name = '''line1 \nline2'''  \n\nOR  \n\nString  variable_name= ''''''line1 \nline2''''''\n</code></pre>\n\n\n\n<p>The following example illustrates the use of String data type in Dart.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   String str1 = 'this is a single line string'; \n   String str2 = \"this is a single line string\"; \n   String str3 = '''this is a multiline line string'''; \n   String str4 = \"\"\"this is a multiline line string\"\"\"; \n   \n   print(str1);\n   print(str2); \n   print(str3); \n   print(str4); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>Output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this is a single line string \nthis is a single line string \nthis is a multiline line string \nthis is a multiline line string \n</code></pre>\n\n\n\n<p>Strings are immutable. However, strings can be subjected to various operations and the resultant string can be a stored as a new value.</p>\n\n\n\n<h2>String Interpolation</h2>\n\n\n\n<p>The process of creating a new string by appending a value to a static string is termed as&nbsp;<strong>concatenation</strong>&nbsp;or&nbsp;<strong>interpolation</strong>. In other words, it is the process of adding a string to another string.</p>\n\n\n\n<p>The operator plus (+) is a commonly used mechanism to concatenate / interpolate strings.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   String str1 = \"hello\"; \n   String str2 = \"world\"; \n   String res = str1+str2; \n   \n   print(\"The concatenated string : ${res}\"); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The concatenated string : Helloworld\n</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>You can use &#8220;${}&#8221; can be used to interpolate the value of a Dart expression within strings. The following example illustrates the same. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   int n=1+1; \n   \n   String str1 = \"The sum of 1 and 1 is ${n}\"; \n   print(str1); \n   \n   String str2 = \"The sum of 2 and 2 is ${2+2}\"; \n   print(str2); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The sum of 1 and 1 is 2 \nThe sum of 2 and 2 is 4\n</code></pre>\n\n\n\n<h2>String Properties</h2>\n\n\n\n<p>The properties listed in the following table are all read-only.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Property &amp; Description</th></tr><tr><td>1</td><td>codeUnitsReturns an unmodifiable list of the UTF-16 code units of this string.</td></tr><tr><td>2</td><td>are empty returns true if this string is empty?</td></tr><tr><td>3</td><td>length returns the length of the string including space, tab, and newline characters.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods to Manipulate Strings</h2>\n\n\n\n<p>The String class in the&nbsp;<strong>dart: core library</strong>&nbsp;also provides methods to manipulate strings. Some of these methods are given below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>toLowerCase()Converts all characters in this string to lower case.</td></tr><tr><td>2</td><td>toUpperCase()Converts all characters in this string to the upper case.</td></tr><tr><td>3</td><td>trim()Returns the string without any leading and trailing whitespace.</td></tr><tr><td>4</td><td>compareTo()Compares this object to another.</td></tr><tr><td>5</td><td>replaceAll()Replaces all substrings that match the specified pattern with a given value.</td></tr><tr><td>6</td><td>split()Splits the string at matches of the specified delimiter and returns a list of substrings.</td></tr><tr><td>7</td><td>substring()Returns the substring of this string that extends from startIndex, inclusive, to endIndex, exclusive.</td></tr><tr><td>8</td><td>toString()Returns a string representation of this object.</td></tr><tr><td>9</td><td>codeUnitAt()Returns the 16-bit UTF-16 code unit at the given index.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The String data type represents a sequence of characters. A Dart string is a sequence of UTF 16 code units. String values in Dart can be represented using either single or double or triple quotes. Single line strings are represented using single or double quotes. Triple quotes are used to represent multi-line strings. The syntax [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5549"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5549"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5549/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5550,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5549/revisions/5550"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5549"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5549"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5549"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5551,
    "date": "2021-04-05T07:04:08",
    "date_gmt": "2021-04-05T07:04:08",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5551"
    },
    "modified": "2021-04-05T07:04:08",
    "modified_gmt": "2021-04-05T07:04:08",
    "slug": "boolean",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/boolean/",
    "title": {
      "rendered": "Boolean"
    },
    "content": {
      "rendered": "\n<p>Dart provides an inbuilt support for the Boolean data type. The Boolean data type in DART supports only two values – true and false. The keyword bool is used to represent a Boolean literal in DART.</p>\n\n\n\n<p>The syntax for declaring a Boolean variable in DART is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bool var_name = true;  \nOR  \nbool var_name = false \n</code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   bool test; \n   test = 12 &gt; 5; \n   print(test); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>true \n</code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Unlike JavaScript, the Boolean data type recognizes only the literal truth as true. Any other value is considered false. Consider the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var str = 'abc'; \nif(str) { \n   print('String is not empty'); \n} else { \n   print('Empty String'); \n} </code></pre>\n\n\n\n<p>The above snippet, if run in JavaScript, will print the message ‘String is not empty’ as the if construct will return true if the string is not empty.</p>\n\n\n\n<p>However, in Dart,&nbsp;<strong>str</strong>&nbsp;is converted to&nbsp;<em>false as str != true</em>. Hence the snippet will print the message&nbsp;<em>‘Empty String’</em>&nbsp;(when run in unchecked mode).</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The above snippet if run in <strong>checked</strong> mode will throw an exception. The same is illustrated below −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var str = 'abc'; \n   if(str) { \n      print('String is not empty'); \n   } else { \n      print('Empty String'); \n   } \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>, in&nbsp;<strong>Checked Mode</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Unhandled exception: \ntype 'String' is not a subtype of type 'bool' of 'boolean expression' where \n   String is from dart:core \n   bool is from dart:core  \n#0 main (file:///D:/Demos/Boolean.dart:5:6) \n#1 _startIsolate.&lt;anonymous closure&gt; (dart:isolate-patch/isolate_patch.dart:261) \n#2 _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:148)\n</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>, in&nbsp;<strong>Unchecked Mode</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Empty String</code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Dart provides an inbuilt support for the Boolean data type. The Boolean data type in DART supports only two values – true and false. The keyword bool is used to represent a Boolean literal in DART. The syntax for declaring a Boolean variable in DART is as given below − Example Live Demo It will [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5551"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5551"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5551/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5552,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5551/revisions/5552"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5551"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5551"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5551"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5553,
    "date": "2021-04-05T07:07:55",
    "date_gmt": "2021-04-05T07:07:55",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5553"
    },
    "modified": "2021-04-05T07:07:55",
    "modified_gmt": "2021-04-05T07:07:55",
    "slug": "lists-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/lists-2/",
    "title": {
      "rendered": "Lists"
    },
    "content": {
      "rendered": "\n<p>A very commonly used collection in programming is an&nbsp;<strong>array</strong>. Dart represents arrays in the form of&nbsp;<strong>List</strong>&nbsp;objects. A&nbsp;<strong>List</strong>&nbsp;is simply an ordered group of objects. The&nbsp;<strong>dart:core</strong>&nbsp;library provides the List class that enables creation and manipulation of lists.</p>\n\n\n\n<p>The logical representation of a list in Dart is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/logical_representation_of_a_list.jpg\" alt=\"Logical Representation of a List\"/></figure>\n\n\n\n<ul><li><strong>test_list</strong>&nbsp;− is the identifier that references the collection.</li><li>The list contains in it the values 12, 13, and 14. The memory blocks holding these values are known as&nbsp;<strong>elements</strong>.</li><li>Each element in the List is identified by a unique number called the&nbsp;<strong>index</strong>. The index starts from&nbsp;<strong>zero</strong>&nbsp;and extends up to&nbsp;<strong>n-1</strong>&nbsp;where&nbsp;<strong>n</strong>&nbsp;is the total number of elements in the List. The index is also referred to as the&nbsp;<strong>subscript</strong>.</li></ul>\n\n\n\n<p>Lists can be classified as −</p>\n\n\n\n<ul><li>Fixed Length List</li><li>Growable List</li></ul>\n\n\n\n<p>Let us now discuss these two types of&nbsp;<strong>lists</strong>&nbsp;in detail.</p>\n\n\n\n<h2>Fixed Length List</h2>\n\n\n\n<p>A fixed length list’s length cannot change at runtime. The syntax for creating a fixed length list is as given below −</p>\n\n\n\n<p><strong>Step 1 − Declaring a list</strong></p>\n\n\n\n<p>The syntax for declaring a fixed length list is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var list_name = new List(initial_size)\n</code></pre>\n\n\n\n<p>The above syntax creates a list of the specified size. The list cannot grow or shrink at runtime. Any attempt to resize the list will result in an exception.</p>\n\n\n\n<p><strong>Step 2 − Initializing a list</strong></p>\n\n\n\n<p>The syntax for initializing a list is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>lst_name&#91;index] = value;\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var lst = new List(3); \n   lst&#91;0] = 12; \n   lst&#91;1] = 13; \n   lst&#91;2] = 11; \n   print(lst); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;12, 13, 11]\n</code></pre>\n\n\n\n<h2>Growable List</h2>\n\n\n\n<p>A growable list’s length can change at run-time. The syntax for declaring and initializing a growable list is as given below −</p>\n\n\n\n<p><strong>Step 1 − Declaring a List</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>var list_name = &#91;val1,val2,val3]   \n--- creates a list containing the specified values  \nOR  \nvar list_name = new List() \n--- creates a list of size zero \n</code></pre>\n\n\n\n<p><strong>Step 2 − Initializing a List</strong></p>\n\n\n\n<p>The index / subscript is used to reference the element that should be populated with a value. The syntax for initializing a list is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>list_name&#91;index] = value;\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how to create a list of 3 elements. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var num_list = &#91;1,2,3]; \n   print(num_list); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1, 2, 3]\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example creates a zero-length list using the <strong>empty List() constructor</strong>. The <strong>add()</strong> function in the <strong>List</strong> class is used to dynamically add elements to the list. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var lst = new List(); \n   lst.add(12); \n   lst.add(13); \n   print(lst); \n} </code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;12, 13] \n</code></pre>\n\n\n\n<h2>List Properties</h2>\n\n\n\n<p>The following table lists some commonly used properties of the&nbsp;<strong>List</strong>&nbsp;class in the&nbsp;<strong>dart:core library</strong>.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>first returns the first element in the list.</td></tr><tr><td>2</td><td>are empty returns true if the collection has no elements?</td></tr><tr><td>3</td><td>isNotEmptyReturns true if the collection has at least one element.</td></tr><tr><td>4</td><td>length returns the size of the list.</td></tr><tr><td>5</td><td>last returns the last element in the list.</td></tr><tr><td>6</td><td>reversedReturns an iterable object containing the values of the list in the reverse order.</td></tr><tr><td>7</td><td>SingleChecks if the list has only one element and returns it.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A very commonly used collection in programming is an&nbsp;array. Dart represents arrays in the form of&nbsp;List&nbsp;objects. A&nbsp;List&nbsp;is simply an ordered group of objects. The&nbsp;dart:core&nbsp;library provides the List class that enables creation and manipulation of lists. The logical representation of a list in Dart is given below − test_list&nbsp;− is the identifier that references the collection. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5553"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5553"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5553/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5554,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5553/revisions/5554"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5553"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5553"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5553"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5555,
    "date": "2021-04-05T07:09:38",
    "date_gmt": "2021-04-05T07:09:38",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5555"
    },
    "modified": "2021-04-05T07:09:38",
    "modified_gmt": "2021-04-05T07:09:38",
    "slug": "lists-basic-operations",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/lists-basic-operations/",
    "title": {
      "rendered": "Lists (Basic Operations)"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will discuss how to carry out some basic operations on Lists, such as −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Basic Operation &amp; Description</th></tr><tr><td>1</td><td>Inserting Elements into ListMutable Lists can grow dynamically at runtime. The <strong>List. add()</strong> function appends the specified value to the end of the List and returns a modified List object.</td></tr><tr><td>2</td><td>Updating a listLists in Dart can be updated by −Updating The IndexUsing the List.replaceRange() function</td></tr><tr><td>3</td><td>Removing List itemsThe following functions supported by the List class in the dart: core library can be used to remove the item(s) in a List.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will discuss how to carry out some basic operations on Lists, such as − Sr.No Basic Operation &amp; Description 1 Inserting Elements into ListMutable Lists can grow dynamically at runtime. The List. add() function appends the specified value to the end of the List and returns a modified List object. 2 Updating a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5555"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5555"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5555/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5556,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5555/revisions/5556"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5555"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5555"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5555"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5557,
    "date": "2021-04-05T07:12:29",
    "date_gmt": "2021-04-05T07:12:29",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5557"
    },
    "modified": "2021-04-05T07:12:29",
    "modified_gmt": "2021-04-05T07:12:29",
    "slug": "map-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/map-2/",
    "title": {
      "rendered": "Map"
    },
    "content": {
      "rendered": "\n<p>The Map object is a simple key/value pair. Keys and values in a map may be of any type. A Map is a dynamic collection. In other words, Maps can grow and shrink at runtime.</p>\n\n\n\n<p>Maps can be declared in two ways −</p>\n\n\n\n<ul><li>Using Map Literals</li><li>Using a Map constructor</li></ul>\n\n\n\n<h2>Declaring a Map using Map Literals</h2>\n\n\n\n<p>To declare a map using map literals, you need to enclose the key-value pairs within a pair of curly brackets&nbsp;<strong>&#8220;{ }&#8221;</strong>.</p>\n\n\n\n<p>Here is its&nbsp;<strong>syntax</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var identifier = { key1:value1, key2:value2 &#91;,…..,key_n:value_n] }\n</code></pre>\n\n\n\n<h2>Declaring a Map using a Map Constructor</h2>\n\n\n\n<p>To declare a Map using a Map constructor, we have two steps. First, declare the map and second, initialize the map.</p>\n\n\n\n<p>The&nbsp;<strong>syntax</strong>&nbsp;to&nbsp;<strong>declare a map</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var identifier = new Map()\n</code></pre>\n\n\n\n<p>Now, use the following syntax to&nbsp;<strong>initialize the map</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>map_name&#91;key] = value\n</code></pre>\n\n\n\n<h3>Example: Map Literal</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var details = {'Usrname':'tom','Password':'pass@123'}; \n   print(details); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{Usrname: tom, Password: pass@123}\n</code></pre>\n\n\n\n<h3>Example: Adding Values to Map Literals at Runtime</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var details = {'Usrname':'tom','Password':'pass@123'}; \n   details&#91;'Uid'] = 'U1oo1'; \n   print(details); \n} </code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{Usrname: tom, Password: pass@123, Uid: U1oo1}\n</code></pre>\n\n\n\n<h3>Example: Map Constructor</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var details = new Map(); \n   details&#91;'Usrname'] = 'admin'; \n   details&#91;'Password'] = 'admin@123'; \n   print(details); \n} </code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{Usrname: admin, Password: admin@123}\n</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− A map value can be any object including NULL.</p>\n\n\n\n<h2>Map – Properties</h2>\n\n\n\n<p>The&nbsp;<strong>Map</strong>&nbsp;class in the dart:core package defines the following properties −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Property &amp; Description</th></tr><tr><td>1</td><td>KeysReturns an iterable object representing keys</td></tr><tr><td>2</td><td>ValuesReturns an iterable object representing values</td></tr><tr><td>3</td><td>length returns the size of the Map</td></tr><tr><td>4</td><td>are empty returns true if the Map is an empty Map</td></tr><tr><td>5</td><td>isNotEmptyReturns true if the Map is an empty Map</td></tr></tbody></table></figure>\n\n\n\n<h2>Map &#8211; Functions</h2>\n\n\n\n<p>Following are the commonly used functions for manipulating Maps in Dart.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Function Name &amp; Description</th></tr><tr><td>1</td><td>addAll()Adds all key-value pairs of other to this map.</td></tr><tr><td>2</td><td>clear()Removes all pairs from the map.</td></tr><tr><td>3</td><td>remove()Removes key and its associated value, if present, from the map.</td></tr><tr><td>4</td><td>forEach()Applies f to each key-value pair of the map.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Map object is a simple key/value pair. Keys and values in a map may be of any type. A Map is a dynamic collection. In other words, Maps can grow and shrink at runtime. Maps can be declared in two ways − Using Map Literals Using a Map constructor Declaring a Map using Map [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5557"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5557"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5557/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5558,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5557/revisions/5558"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5557"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5557"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5557"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5559,
    "date": "2021-04-05T07:15:09",
    "date_gmt": "2021-04-05T07:15:09",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5559"
    },
    "modified": "2021-04-05T07:15:09",
    "modified_gmt": "2021-04-05T07:15:09",
    "slug": "symbol",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/symbol/",
    "title": {
      "rendered": "Symbol"
    },
    "content": {
      "rendered": "\n<p>Symbols in Dart are opaque, dynamic string name used in reflecting out metadata from a library. Simply put, symbols are a way to store the relationship between a human readable string and a string that is optimized to be used by computers.</p>\n\n\n\n<p>Reflection is a mechanism to get metadata of a type at runtime like the number of methods in a class, the number of constructors it has or the number of parameters in a function. You can even invoke a method of the type which is loaded at runtime.</p>\n\n\n\n<p>In Dart reflection specific classes are available in the&nbsp;<strong>dart:mirrors</strong>&nbsp;package. This library works in both web applications and command line applications.</p>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Symbol obj = new Symbol('name');  \n// expects a name of class or function or library to reflect \n</code></pre>\n\n\n\n<p>The&nbsp;<strong>name</strong>&nbsp;must be a valid public Dart member name, public constructor name, or library name.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Consider the following example. The code declares a class&nbsp;<strong>Foo</strong>&nbsp;in a library&nbsp;<strong>foo_lib</strong>. The class defines the methods&nbsp;<strong>m1, m2,</strong>&nbsp;and&nbsp;<strong>m3</strong>.</p>\n\n\n\n<h2>Foo.dart</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>library foo_lib;   \n// libarary name can be a symbol   \n\nclass Foo {         \n   // class name can be a symbol  \n   m1() {        \n      // method name can be a symbol \n      print(\"Inside m1\"); \n   } \n   m2() { \n      print(\"Inside m2\"); \n   } \n   m3() { \n      print(\"Inside m3\"); \n   } \n}</code></pre>\n\n\n\n<p>The following code loads&nbsp;<strong>Foo.dart</strong>&nbsp;library and searches for Foo class, with help of Symbol type. Since we are reflecting the metadata from the above library the code imports&nbsp;<strong>dart:mirrors</strong>&nbsp;library.</p>\n\n\n\n<h2>FooSymbol.dart</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:core'; \nimport 'dart:mirrors'; \nimport 'Foo.dart';  \n\nmain() { \n   Symbol lib = new Symbol(\"foo_lib\");   \n   //library name stored as Symbol \n   \n   Symbol clsToSearch = new Symbol(\"Foo\");  \n   // class name stored as Symbol  \n   \n   if(checkIf_classAvailableInlibrary(lib, clsToSearch))  \n   // searches Foo class in foo_lib library \n      print(\"class found..\"); \n}  \n   \nbool checkIf_classAvailableInlibrary(Symbol libraryName, Symbol className) { \n   MirrorSystem mirrorSystem = currentMirrorSystem(); \n   LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName); \n      \n   if (libMirror != null) { \n      print(\"Found Library\"); \n      print(\"checkng...class details..\"); \n      print(\"No of classes found is : ${libMirror.declarations.length}\"); \n      libMirror.declarations.forEach((s, d) =&gt; print(s));  \n         \n      if (libMirror.declarations.containsKey(className)) return true; \n      return false; \n   } \n}</code></pre>\n\n\n\n<p>Note that the line libMirror.declarations.forEach((s, d) =&gt; print(s)); will iterate across every declaration in the library at runtime and prints the declarations as type of&nbsp;<strong>Symbol</strong>.</p>\n\n\n\n<p>This code should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Found Library \ncheckng...class details.. \nNo of classes found is : 1 \nSymbol(\"Foo\") // class name displayed as symbol  \nclass found. \n</code></pre>\n\n\n\n<h3>Example: Display the number of instance methods of a class</h3>\n\n\n\n<p>Let us now consider displaying the number of instance methods in a class. The predefined class&nbsp;<strong>ClassMirror</strong>&nbsp;helps us to achieve the same.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:core'; \nimport 'dart:mirrors'; \nimport 'Foo.dart';  \n\nmain() { \n   Symbol lib = new Symbol(\"foo_lib\"); \n   Symbol clsToSearch = new Symbol(\"Foo\");  \n   reflect_InstanceMethods(lib, clsToSearch); \n}  \nvoid reflect_InstanceMethods(Symbol libraryName, Symbol className) { \n   MirrorSystem mirrorSystem = currentMirrorSystem(); \n   LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName); \n   \n   if (libMirror != null) { \n      print(\"Found Library\"); \n      print(\"checkng...class details..\"); \n      print(\"No of classes found is : ${libMirror.declarations.length}\"); \n      libMirror.declarations.forEach((s, d) =&gt; print(s));  \n      \n      if (libMirror.declarations.containsKey(className)) print(\"found class\");\n      ClassMirror classMirror = libMirror.declarations&#91;className]; \n      \n      print(\"No of instance methods found is ${classMirror.instanceMembers.length}\");\n      classMirror.instanceMembers.forEach((s, v) =&gt; print(s)); \n   } \n}    </code></pre>\n\n\n\n<p>This code should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Found Library \ncheckng...class details.. \nNo of classes found is : 1 \nSymbol(\"Foo\") \nfound class \nNo of instance methods found is 8 \nSymbol(\"==\") \nSymbol(\"hashCode\") \nSymbol(\"toString\") \nSymbol(\"noSuchMethod\") \nSymbol(\"runtimeType\") \nSymbol(\"m1\") \nSymbol(\"m2\") \nSymbol(\"m3\")\n</code></pre>\n\n\n\n<h2>Convert Symbol to String</h2>\n\n\n\n<p>You can convert the name of a type like class or library stored in a symbol back to a string using MirrorSystem class. The following code shows how you can convert a symbol to a string. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:mirrors'; \nvoid main(){ \n   Symbol lib = new Symbol(\"foo_lib\"); \n   String name_of_lib = MirrorSystem.getName(lib); \n   \n   print(lib); \n   print(name_of_lib); \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Symbol(\"foo_lib\")   \n\nfoo_lib     </code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Symbols in Dart are opaque, dynamic string name used in reflecting out metadata from a library. Simply put, symbols are a way to store the relationship between a human readable string and a string that is optimized to be used by computers. Reflection is a mechanism to get metadata of a type at runtime like [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5559"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5559"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5559/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5560,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5559/revisions/5560"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5559"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5559"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5559"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5561,
    "date": "2021-04-05T07:17:49",
    "date_gmt": "2021-04-05T07:17:49",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5561"
    },
    "modified": "2021-04-05T07:17:49",
    "modified_gmt": "2021-04-05T07:17:49",
    "slug": "runes",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/runes/",
    "title": {
      "rendered": "Runes"
    },
    "content": {
      "rendered": "\n<p>Strings are a sequence of characters. Dart represents strings as a sequence of Unicode UTF-16 code units. Unicode is a format that defines a unique numeric value for each letter, digit, and symbol.</p>\n\n\n\n<p>Since a Dart string is a sequence of UTF-16 code units, 32-bit Unicode values within a string are represented using a special syntax. A&nbsp;<strong>rune</strong>&nbsp;is an integer representing a Unicode code point.</p>\n\n\n\n<p>The String class in the&nbsp;<strong>dart:core</strong>&nbsp;library provides mechanisms to access&nbsp;<strong>runes</strong>. String code units / runes can be accessed in three ways −</p>\n\n\n\n<ul><li>Using String.codeUnitAt() function</li><li>Using String.codeUnits property</li><li>Using String.runes property</li></ul>\n\n\n\n<h2>String.codeUnitAt() Function</h2>\n\n\n\n<p>Code units in a string can be accessed through their indexes. Returns the 16-bit UTF-16 code unit at the given index.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>String.codeUnitAt(int index);\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:core'; \nvoid main(){ \n   f1(); \n} \nf1() { \n   String x = 'Runes'; \n   print(x.codeUnitAt(0)); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>82\n</code></pre>\n\n\n\n<h2>String.codeUnits Property</h2>\n\n\n\n<p>This property returns an unmodifiable list of the UTF-16 code units of the specified string.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>String. codeUnits;\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:core';  \nvoid main(){ \n   f1(); \n}  \nf1() { \n   String x = 'Runes'; \n   print(x.codeUnits); \n} </code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;82, 117, 110, 101, 115]\n</code></pre>\n\n\n\n<h2>String.runes Property</h2>\n\n\n\n<p>This property returns an iterable of Unicode code-points of this&nbsp;<strong>string.Runes</strong>&nbsp;extends iterable.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-preformatted\">String.runes\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main(){ \n   \"A string\".runes.forEach((int rune) { \n      var character=new String.fromCharCode(rune); \n      print(character); \n   });  \n} </code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A \ns \nt \nr \ni \nn \ng\n</code></pre>\n\n\n\n<p>Unicode code points are usually expressed as&nbsp;<strong>\\uXXXX</strong>, where XXXX is a 4-digit hexadecimal value. To specify more or less than 4 hex digits, place the value in curly brackets. One can use the constructor of the Runes class in the dart:core library for the same.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>main() { \n   Runes input = new Runes(' \\u{1f605} '); \n   print(new String.fromCharCodes(input)); \n}  </code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/runes.jpg\" alt=\"Runes\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Strings are a sequence of characters. Dart represents strings as a sequence of Unicode UTF-16 code units. Unicode is a format that defines a unique numeric value for each letter, digit, and symbol. Since a Dart string is a sequence of UTF-16 code units, 32-bit Unicode values within a string are represented using a special [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5561"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5561"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5561/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5562,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5561/revisions/5562"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5561"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5561"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5561"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5563,
    "date": "2021-04-05T07:19:30",
    "date_gmt": "2021-04-05T07:19:30",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5563"
    },
    "modified": "2021-04-05T07:19:30",
    "modified_gmt": "2021-04-05T07:19:30",
    "slug": "enumeration",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/enumeration/",
    "title": {
      "rendered": "Enumeration"
    },
    "content": {
      "rendered": "\n<p>An enumeration is used for defining named constant values. An enumerated type is declared using the&nbsp;<strong>enum</strong>&nbsp;keyword.</p>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>enum enum_name {  \n   enumeration list \n}\n</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<ul><li>The&nbsp;<em>enum_name</em>&nbsp;specifies the enumeration type name</li><li>The&nbsp;<em>enumeration list</em>&nbsp;is a comma-separated list of identifiers</li></ul>\n\n\n\n<p>Each of the symbols in the enumeration list stands for an integer value, one greater than the symbol that precedes it. By default, the value of the first enumeration symbol is 0.</p>\n\n\n\n<h3>For example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>enum Status { \n   none, \n   running, \n   stopped, \n   paused \n}</code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>enum Status { \n   none, \n   running, \n   stopped, \n   paused \n}  \nvoid main() { \n   print(Status.values); \n   Status.values.forEach((v) =&gt; print('value: $v, index: ${v.index}'));\n   print('running: ${Status.running}, ${Status.running.index}'); \n   print('running index: ${Status.values&#91;1]}'); \n}</code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;Status.none, Status.running, Status.stopped, Status.paused] \nvalue: Status.none, index: 0 \nvalue: Status.running, index: 1 \nvalue: Status.stopped, index: 2 \nvalue: Status.paused, index: 3 \nrunning: Status.running, 1 \nrunning index: Status.running </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An enumeration is used for defining named constant values. An enumerated type is declared using the&nbsp;enum&nbsp;keyword. Syntax Where, The&nbsp;enum_name&nbsp;specifies the enumeration type name The&nbsp;enumeration list&nbsp;is a comma-separated list of identifiers Each of the symbols in the enumeration list stands for an integer value, one greater than the symbol that precedes it. By default, the value [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5563"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5563"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5563/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5564,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5563/revisions/5564"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5563"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5563"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5563"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5565,
    "date": "2021-04-05T07:21:48",
    "date_gmt": "2021-04-05T07:21:48",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5565"
    },
    "modified": "2021-04-05T07:21:48",
    "modified_gmt": "2021-04-05T07:21:48",
    "slug": "functions-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/functions-4/",
    "title": {
      "rendered": "Functions"
    },
    "content": {
      "rendered": "\n<p>Functions are the building blocks of readable, maintainable, and reusable code. A function is a set of statements to perform a specific task. Functions organize the program into logical blocks of code. Once defined, functions may be called to access code. This makes the code reusable. Moreover, functions make it easy to read and maintain the program’s code.</p>\n\n\n\n<p>A function declaration tells the compiler about a function&#8217;s name, return type, and parameters. A function definition provides the actual body of the function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Functions &amp; Description</th></tr><tr><td>1</td><td>Defining a function definition specifies what and how a specific task would be done.</td></tr><tr><td>2</td><td>Calling a function must be called so as to execute it.</td></tr><tr><td>3</td><td>Returning FunctionsFunctions may also return value along with control, back to the caller.</td></tr><tr><td>4</td><td>Parameterized FunctionParameters is a mechanism to pass values to functions.</td></tr></tbody></table></figure>\n\n\n\n<h2>Optional Parameters</h2>\n\n\n\n<p>Optional parameters can be used when arguments need not be compulsorily passed for a function’s execution. A parameter can be marked optional by appending a question mark to its name. The optional parameter should be set as the last argument in a function.</p>\n\n\n\n<p>We have three types of optional parameters in Dart −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td>Optional Positional ParameterTo specify optional positional parameters, use square [] brackets.</td></tr><tr><td>2</td><td>Optional named parameterUnlike positional parameters, the parameter&#8217;s name must be specified while the value is being passed. Curly brace {} can be used to specify optional named parameters.</td></tr><tr><td>3</td><td>Optional Parameters with Default ValuesFunction parameters can also be assigned values by default. However, such parameters can also be explicitly passed values.</td></tr></tbody></table></figure>\n\n\n\n<h2>Recursive Dart Functions</h2>\n\n\n\n<p>Recursion is a technique for iterating over an operation by having a function call to itself repeatedly until it arrives at a result. Recursion is best applied when you need to call the same function repeatedly with different parameters from within a loop.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   print(factorial(6));\n}  \nfactorial(number) { \n   if (number &lt;= 0) {         \n      // termination case \n      return 1; \n   } else { \n      return (number * factorial(number - 1));    \n      // function invokes itself \n   } \n}   </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>720\n</code></pre>\n\n\n\n<h2>Lambda Functions</h2>\n\n\n\n<p>Lambda functions are a concise mechanism to represent functions. These functions are also called as Arrow functions.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;return_type]function_name(parameters)=&gt;expression;\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   printMsg(); \n   print(test()); \n}  \nprintMsg()=&gt;\nprint(\"hello\"); \n\nint test()=&gt;123;                       \n// returning function</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>hello 123 </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Functions are the building blocks of readable, maintainable, and reusable code. A function is a set of statements to perform a specific task. Functions organize the program into logical blocks of code. Once defined, functions may be called to access code. This makes the code reusable. Moreover, functions make it easy to read and maintain [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5565"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5565"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5565/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5566,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5565/revisions/5566"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5565"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5565"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5565"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5567,
    "date": "2021-04-05T07:25:04",
    "date_gmt": "2021-04-05T07:25:04",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5567"
    },
    "modified": "2021-04-05T07:25:04",
    "modified_gmt": "2021-04-05T07:25:04",
    "slug": "interfaces-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/interfaces-2/",
    "title": {
      "rendered": "Interfaces"
    },
    "content": {
      "rendered": "\n<p>An&nbsp;<strong>interface</strong>&nbsp;defines the syntax that any entity must adhere to. Interfaces define a set of methods available on an object. Dart does not have a syntax for declaring interfaces. Class declarations are themselves interfaces in Dart.</p>\n\n\n\n<p><strong>Classes</strong>&nbsp;should use the implements keyword to be able to use an interface. It is mandatory for the implementing class to provide a concrete implementation of all the functions of the implemented interface. In other words, a class must redefine every function in the interface it wishes to implement.</p>\n\n\n\n<h3>Syntax: Implementing an Interface</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class identifier implements interface_name\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In the following program, we are declaring a class <strong>Printer</strong>. The <strong>ConsolePrinter</strong> class implements the implicit interface declaration for the <strong>Printer</strong> class. The <strong>main</strong> function creates an object of the <strong>ConsolePrinter</strong> class using the <strong>new</strong> keyword. This object is used to invoke the function <strong>print_data</strong> defined in the <strong>ConsolePrinter</strong> class. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   ConsolePrinter cp= new ConsolePrinter(); \n   cp.print_data(); \n}  \nclass Printer { \n   void print_data() { \n      print(\"__________Printing Data__________\"); \n   } \n}  \nclass ConsolePrinter implements Printer { \n   void print_data() {  \n      print(\"__________Printing to Console__________\"); \n   } \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>__________Printing to Console__________\n</code></pre>\n\n\n\n<h2>Implementing Multiple Interfaces</h2>\n\n\n\n<p>A class can implement multiple interfaces. The interfaces are separated by a comma. The&nbsp;<strong>syntax</strong>&nbsp;for the same is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class identifier implements interface-1,interface_2,interface_4…….\n</code></pre>\n\n\n\n<p>The following <strong>example</strong> shows how you can implement multiple interfaces in Dart −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   Calculator c = new Calculator(); \n   print(\"The gross total : ${c.ret_tot()}\"); \n   print(\"Discount :${c.ret_dis()}\"); \n}  \nclass Calculate_Total { \n   int ret_tot() {} \n}  \nclass Calculate_Discount { \n   int ret_dis() {} \n}\nclass Calculator  implements Calculate_Total,Calculate_Discount { \n   int ret_tot() { \n      return 1000; \n   } \n   int ret_dis() { \n      return 50; \n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The gross total: 1000 \nDiscount:50 </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An&nbsp;interface&nbsp;defines the syntax that any entity must adhere to. Interfaces define a set of methods available on an object. Dart does not have a syntax for declaring interfaces. Class declarations are themselves interfaces in Dart. Classes&nbsp;should use the implements keyword to be able to use an interface. It is mandatory for the implementing class to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5567"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5567"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5567/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5568,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5567/revisions/5568"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5567"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5567"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5567"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5569,
    "date": "2021-04-05T07:32:21",
    "date_gmt": "2021-04-05T07:32:21",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5569"
    },
    "modified": "2021-04-05T07:32:21",
    "modified_gmt": "2021-04-05T07:32:21",
    "slug": "classes-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/classes-2/",
    "title": {
      "rendered": "Classes"
    },
    "content": {
      "rendered": "\n<p>Dart is an object-oriented language. It supports object-oriented programming features like classes, interfaces, etc. A&nbsp;<strong>class</strong>&nbsp;in terms of OOP is a blueprint for creating objects. A&nbsp;<strong>class</strong>&nbsp;encapsulates data for the object. Dart gives built-in support for this concept called&nbsp;<strong>class</strong>.</p>\n\n\n\n<h2>Declaring a Class</h2>\n\n\n\n<p>Use the&nbsp;<strong>class</strong>&nbsp;keyword to declare a&nbsp;<strong>class</strong>&nbsp;in Dart. A class definition starts with the keyword class followed by the&nbsp;<strong>class name</strong>; and the class body enclosed by a pair of curly braces. The syntax for the same is given below −</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class class_name {  \n   &lt;fields&gt; \n   &lt;getters/setters&gt; \n   &lt;constructors&gt; \n   &lt;functions&gt; \n}\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>class</strong>&nbsp;keyword is followed by the class name. The rules for identifiers must be considered while naming a class.</p>\n\n\n\n<p>A class definition can include the following −</p>\n\n\n\n<ul><li><strong>Fields</strong>&nbsp;− A field is any variable declared in a class. Fields represent data pertaining to objects.</li><li><strong>Setters and Getters</strong>&nbsp;− Allows the program to initialize and retrieve the values of the fields of a class. A default getter/ setter is associated with every class. However, the default ones can be overridden by explicitly defining a setter/ getter.</li><li><strong>Constructors</strong>&nbsp;− responsible for allocating memory for the objects of the class.</li><li><strong>Functions</strong>&nbsp;− Functions represent actions an object can take. They are also at times referred to as methods.</li></ul>\n\n\n\n<p>These components put together are termed as the&nbsp;<strong>data members</strong>&nbsp;of the class.</p>\n\n\n\n<h3>Example: Declaring a class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Car {  \n   // field \n   String engine = \"E1001\";  \n   \n   // function \n   void disp() { \n      print(engine); \n   } \n}</code></pre>\n\n\n\n<p>The example declares a class&nbsp;<strong>Car</strong>. The class has a field named&nbsp;<strong>engine</strong>. The&nbsp;<strong>disp()</strong>&nbsp;is a simple function that prints the value of the field&nbsp;<strong>engine</strong>.</p>\n\n\n\n<h2>Creating Instance of the class</h2>\n\n\n\n<p>To create an instance of the class, use the&nbsp;<strong>new</strong>&nbsp;keyword followed by the class name. The syntax for the same is given below −</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var object_name = new class_name(&#91; arguments ])\n</code></pre>\n\n\n\n<ul><li>The&nbsp;<strong>new</strong>&nbsp;keyword is responsible for instantiation.</li><li>The right-hand side of the expression invokes the constructor. The constructor should be passed values if it is parameterized.</li></ul>\n\n\n\n<h3>Example: Instantiating a class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var obj = new Car(\"Engine 1\")</code></pre>\n\n\n\n<h2>Accessing Attributes and Functions</h2>\n\n\n\n<p>A class’s attributes and functions can be accessed through the object. Use the ‘.’ dot notation (called as the&nbsp;<strong>period</strong>) to access the data members of a class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//accessing an attribute \nobj.field_name  \n\n//accessing a function \nobj.function_name()</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Take a look at the following example to understand how to access attributes and functions in Dart −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   Car c= new Car(); \n   c.disp(); \n}  \nclass Car {  \n   // field \n   String engine = \"E1001\";  \n   \n   // function \n   void disp() { \n      print(engine); \n   } \n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>output</strong>&nbsp;of the above code is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>E1001\n</code></pre>\n\n\n\n<h2>Dart Constructors</h2>\n\n\n\n<p>A constructor is a special function of the class that is responsible for initializing the variables of the class. Dart defines a constructor with the same name as that of the class. A constructor is a function and hence can be parameterized. However, unlike a function, constructors cannot have a return type. If you don’t declare a constructor, a default&nbsp;<strong>no-argument constructor</strong>&nbsp;is provided for you.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Class_name(parameter_list) { \n   //constructor body \n}\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how to use constructors in Dart −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   Car c = new Car('E1001'); \n} \nclass Car { \n   Car(String engine) { \n      print(engine); \n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>E1001 \n</code></pre>\n\n\n\n<h2>Named Constructors</h2>\n\n\n\n<p>Dart provides&nbsp;<strong>named constructors</strong>&nbsp;to enable a class define&nbsp;<strong>multiple constructors</strong>. The syntax of named constructors is as given below −</p>\n\n\n\n<h3>Syntax : Defining the constructor</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Class_name.constructor_name(param_list)\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how you can use named constructors in Dart −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {           \n   Car c1 = new Car.namedConst('E1001');                                       \n   Car c2 = new Car(); \n}           \nclass Car {                   \n   Car() {                           \n      print(\"Non-parameterized constructor invoked\");\n   }                                   \n   Car.namedConst(String engine) { \n      print(\"The engine is : ${engine}\");    \n   }                               \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The engine is : E1001 \nNon-parameterized constructor invoked\n</code></pre>\n\n\n\n<h2>The this Keyword</h2>\n\n\n\n<p>The&nbsp;<strong>this</strong>&nbsp;keyword refers to the current instance of the class. Here, the parameter name and the name of the class’s field are the same. Hence to avoid ambiguity, the class’s field is prefixed with the&nbsp;<strong>this</strong>&nbsp;keyword. The following example explains the same −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example explains how to use <strong>this</strong> keyword in Dart −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   Car c1 = new Car('E1001'); \n}  \nclass Car { \n   String engine; \n   Car(String engine) { \n      this.engine = engine; \n      print(\"The engine is : ${engine}\"); \n   } \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The engine is : E1001\n</code></pre>\n\n\n\n<h2>Dart Class ─ Getters and Setters</h2>\n\n\n\n<p><strong>Getters</strong>&nbsp;and&nbsp;<strong>Setters</strong>, also called as&nbsp;<strong>accessors</strong>&nbsp;and&nbsp;<strong>mutators</strong>, allow the program to initialize and retrieve the values of class fields respectively. Getters or accessors are defined using the&nbsp;<strong>get</strong>&nbsp;keyword. Setters or mutators are defined using the&nbsp;<strong>set</strong>&nbsp;keyword.</p>\n\n\n\n<p>A default getter/setter is associated with every class. However, the default ones can be overridden by explicitly defining a setter/ getter. A getter has no parameters and returns a value, and the setter has one parameter and does not return a value.</p>\n\n\n\n<h3>Syntax: Defining a getter</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Return_type  get identifier \n{ \n} \n</code></pre>\n\n\n\n<h3>Syntax: Defining a setter</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>set identifier \n{ \n}\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how you can use <strong>getters</strong> and <strong>setters</strong> in a Dart class −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student { \n   String name; \n   int age; \n    \n   String get stud_name { \n      return name; \n   } \n    \n   void set stud_name(String name) { \n      this.name = name; \n   } \n   \n   void set stud_age(int age) { \n      if(age&lt;= 0) { \n        print(\"Age should be greater than 5\"); \n      }  else { \n         this.age = age; \n      } \n   } \n   \n   int get stud_age { \n      return age;     \n   } \n}  \nvoid main() { \n   Student s1 = new Student(); \n   s1.stud_name = 'MARK'; \n   s1.stud_age = 0; \n   print(s1.stud_name); \n   print(s1.stud_age); \n} </code></pre>\n\n\n\n<p>This program code should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age should be greater than 5 \nMARK \nNull \n</code></pre>\n\n\n\n<h2>Class Inheritance</h2>\n\n\n\n<p>Dart supports the concept of Inheritance which is the ability of a program to create new classes from an existing class. The class that is extended to create newer classes is called the parent class/super class. The newly created classes are called the child/sub classes.</p>\n\n\n\n<p>A class inherits from another class using the ‘extends’ keyword.&nbsp;<strong>Child classes inherit all properties and methods except constructors from the parent class</strong>.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class child_class_name extends parent_class_name \n</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Dart doesn’t support multiple inheritance.</p>\n\n\n\n<h3>Example: Class Inheritance</h3>\n\n\n\n<p>In the following example, we are declaring a class <strong>Shape</strong>. The class is extended by the <strong>Circle</strong> class. Since there is an inheritance relationship between the classes, the child class, i.e., the class <strong>Car</strong> gets implicit access to its parent class data member. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var obj = new Circle(); \n   obj.cal_area(); \n}  \nclass Shape { \n   void cal_area() { \n      print(\"calling calc area defined in the Shape class\"); \n   } \n}  \nclass Circle extends Shape {}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>calling calc area defined in the Shape class\n</code></pre>\n\n\n\n<h3>Types of Inheritance</h3>\n\n\n\n<p>Inheritance can be of the following three types −</p>\n\n\n\n<ul><li><strong>Single</strong>&nbsp;− Every class can at the most extend from one parent class.</li><li><strong>Multiple</strong>&nbsp;− A class can inherit from multiple classes. Dart doesn’t support multiple inheritance.</li><li><strong>Multi-level</strong>&nbsp;− A class can inherit from another child class.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how multi-level inheritance works −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   var obj = new Leaf(); \n   obj.str = \"hello\"; \n   print(obj.str); \n}  \nclass Root { \n   String str; \n}  \nclass Child extends Root {}  \nclass Leaf extends Child {}  \n//indirectly inherits from Root by virtue of inheritance</code></pre>\n\n\n\n<p>The class&nbsp;<strong>Leaf</strong>&nbsp;derives the attributes from Root and Child classes by virtue of multi-level inheritance. Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>hello\n</code></pre>\n\n\n\n<h2>Dart – Class Inheritance and Method Overriding</h2>\n\n\n\n<p>Method Overriding is a mechanism by which the child class redefines a method in its parent class. The following example illustrates the same −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   Child c = new Child(); \n   c.m1(12); \n} \nclass Parent { \n   void m1(int a){ print(\"value of a ${a}\");} \n}  \nclass Child extends Parent { \n   @override \n   void m1(int b) { \n      print(\"value of b ${b}\"); \n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of b 12\n</code></pre>\n\n\n\n<p>The number and type of the function parameters must match while overriding the method. In case of a mismatch in the number of parameters or their data type, the Dart compiler throws an error. The following illustration explains the same −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:io'; \nvoid main() { \n   Child c = new Child(); \n   c.m1(12); \n} \nclass Parent { \n   void m1(int a){ print(\"value of a ${a}\");} \n} \nclass Child extends Parent { \n   @override \n   void m1(String b) { \n      print(\"value of b ${b}\");\n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of b 12\n</code></pre>\n\n\n\n<h2>The static Keyword</h2>\n\n\n\n<p>The&nbsp;<strong>static</strong>&nbsp;keyword can be applied to the data members of a class, i.e.,&nbsp;<strong>fields</strong>&nbsp;and&nbsp;<strong>methods</strong>. A static variable retains its values till the program finishes execution. Static members are referenced by the class name.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StaticMem { \n   static int num;  \n   static disp() { \n      print(\"The value of num is ${StaticMem.num}\")  ; \n   } \n}  \nvoid main() { \n   StaticMem.num = 12;  \n   // initialize the static variable } \n   StaticMem.disp();   \n   // invoke the static method \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The value of num is 12\n</code></pre>\n\n\n\n<h2>The super Keyword</h2>\n\n\n\n<p>The&nbsp;<strong>super</strong>&nbsp;keyword is used to refer to the immediate parent of a class. The keyword can be used to refer to the super class version of a&nbsp;<strong>variable, property,</strong>&nbsp;or&nbsp;<strong>method</strong>. The following example illustrates the same −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   Child c = new Child(); \n   c.m1(12); \n} \nclass Parent { \n   String msg = \"message variable from the parent class\"; \n   void m1(int a){ print(\"value of a ${a}\");} \n} \nclass Child extends Parent { \n   @override \n   void m1(int b) { \n      print(\"value of b ${b}\"); \n      super.m1(13); \n      print(\"${super.msg}\")   ; \n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of b 12 \nvalue of a 13 \nmessage variable from the parent class</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Dart is an object-oriented language. It supports object-oriented programming features like classes, interfaces, etc. A&nbsp;class&nbsp;in terms of OOP is a blueprint for creating objects. A&nbsp;class&nbsp;encapsulates data for the object. Dart gives built-in support for this concept called&nbsp;class. Declaring a Class Use the&nbsp;class&nbsp;keyword to declare a&nbsp;class&nbsp;in Dart. A class definition starts with the keyword class followed [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5569"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5569"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5569/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5570,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5569/revisions/5570"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5569"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5569"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5569"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5571,
    "date": "2021-04-05T07:35:13",
    "date_gmt": "2021-04-05T07:35:13",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5571"
    },
    "modified": "2021-04-05T07:35:13",
    "modified_gmt": "2021-04-05T07:35:13",
    "slug": "object",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/object/",
    "title": {
      "rendered": "Object"
    },
    "content": {
      "rendered": "\n<p>Object-Oriented Programming defines an object as “any entity that has a defined boundary.” An object has the following −</p>\n\n\n\n<ul><li><strong>State</strong>&nbsp;− Describes the object. The fields of a class represent the object’s state.</li><li><strong>Behavior</strong>&nbsp;− Describes what an object can do.</li><li><strong>Identity</strong>&nbsp;− A unique value that distinguishes an object from a set of similar other objects. Two or more objects can share the state and behavior but not the identity.</li></ul>\n\n\n\n<p>The period operator&nbsp;<strong>(.)</strong>&nbsp;is used in conjunction with the object to access a class’ data members.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Dart represents data in the form of objects. Every class in Dart extends the Object class. Given below is a simple example of creating and using an object. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student { \n   void test_method() { \n      print(\"This is a  test method\"); \n   } \n   \n   void test_method1() { \n      print(\"This is a  test method1\"); \n   } \n}  \nvoid main()    { \n   Student s1 = new Student(); \n   s1.test_method(); \n   s1.test_method1(); \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is a test method \nThis is a test method1\n</code></pre>\n\n\n\n<h2>The Cascade operator (..)</h2>\n\n\n\n<p>The above example invokes the methods in the class. However, every time a function is called, a reference to the object is required. The&nbsp;<strong>cascade operator</strong>&nbsp;can be used as a shorthand in cases where there is a sequence of invocations.</p>\n\n\n\n<p>The cascade ( .. ) operator can be used to issue a sequence of calls via an object. The above example can be rewritten in the following manner. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student { \n   void test_method() { \n      print(\"This is a  test method\"); \n   } \n   \n   void test_method1() { \n      print(\"This is a  test method1\"); \n   } \n}  \nvoid main() { \n   new Student() \n   ..test_method() \n   ..test_method1(); \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is a test method \nThis is a test method1\n</code></pre>\n\n\n\n<h2>The toString() method</h2>\n\n\n\n<p>This function returns a string representation of an object. Take a look at the following example to understand how to use the <strong>toString</strong> method. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   int n = 12; \n   print(n.toString()); \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>12</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Object-Oriented Programming defines an object as “any entity that has a defined boundary.” An object has the following − State&nbsp;− Describes the object. The fields of a class represent the object’s state. Behavior&nbsp;− Describes what an object can do. Identity&nbsp;− A unique value that distinguishes an object from a set of similar other objects. Two [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5571"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5571"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5571/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5572,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5571/revisions/5572"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5571"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5571"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5571"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5573,
    "date": "2021-04-05T07:38:23",
    "date_gmt": "2021-04-05T07:38:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5573"
    },
    "modified": "2021-04-05T07:38:23",
    "modified_gmt": "2021-04-05T07:38:23",
    "slug": "collection",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/collection/",
    "title": {
      "rendered": "Collection"
    },
    "content": {
      "rendered": "\n<p>Dart, unlike other programming languages, doesn’t support arrays. Dart collections can be used to replicate data structures like an array. The dart: core library and other classes enable Collection support in Dart scripts.</p>\n\n\n\n<p>Dart collections can be basically classified as −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Dart collection &amp; Description</th></tr><tr><td>1</td><td>Lista List is simply an ordered group of objects. The dart: core library provides the List class that enables the creation and manipulation of lists.<strong>Fixed Length List</strong> − The list’s length cannot change at run-time.<strong>Growable List</strong> − The list’s length can change at run-time.</td></tr><tr><td>2</td><td>SetSet represents a collection of objects in which each object can occur only once. The dart: core library provides the Set class to implement the same.</td></tr><tr><td>3</td><td>Map object is a simple key/value pair. Keys and values in a map may be of any type. A Map is a dynamic collection. In other words, Maps can grow and shrink at runtime. The Map class in the dart: core library provides support for the same.</td></tr><tr><td>4</td><td>QueueA Queue is a collection that can be manipulated at both ends. Queues are useful when you want to build a first-in, first-out collection. Simply put, a queue inserts data from one end and deletes it from another end. The values are removed/read in the order of their insertion.</td></tr></tbody></table></figure>\n\n\n\n<h2>Iterating Collections</h2>\n\n\n\n<p>The Iterator class from the&nbsp;<strong>dart:core</strong>&nbsp;library enables easy collection traversal. Every collection has an&nbsp;<strong>iterator</strong>&nbsp;property. This property returns an iterator that points to the objects in the collection.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example illustrates traversing a collection using an iterator object. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:collection'; \nvoid main() { \n   Queue numQ = new Queue(); \n   numQ.addAll(&#91;100,200,300]);  \n   Iterator i= numQ.iterator; \n   \n   while(i.moveNext()) { \n      print(i.current); \n   } \n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>moveNext()</strong>&nbsp;function returns a Boolean value indicating whether there is a subsequent entry. The&nbsp;<strong>current</strong>&nbsp;property of the iterator object returns the value of the object that the iterator currently points to.</p>\n\n\n\n<p>This program should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>100 \n200 \n300</code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Dart, unlike other programming languages, doesn’t support arrays. Dart collections can be used to replicate data structures like an array. The dart: core library and other classes enable Collection support in Dart scripts. Dart collections can be basically classified as − Sr.No Dart collection &amp; Description 1 Lista List is simply an ordered group of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5573"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5573"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5573/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5574,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5573/revisions/5574"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5573"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5573"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5573"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5575,
    "date": "2021-04-05T07:41:26",
    "date_gmt": "2021-04-05T07:41:26",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5575"
    },
    "modified": "2021-04-05T07:41:26",
    "modified_gmt": "2021-04-05T07:41:26",
    "slug": "generics-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/generics-2/",
    "title": {
      "rendered": "Generics"
    },
    "content": {
      "rendered": "\n<p>Dart is an&nbsp;<strong>optionally typed language</strong>. Collections in Dart are heterogeneous by default. In other words, a single Dart collection can host values of various types. However, a Dart collection can be made to hold homogenous values. The concept of Generics can be used to achieve the same.</p>\n\n\n\n<p>The use of Generics enforces a restriction on the data type of the values that can be contained by the collection. Such collections are termed as type-safe collections. Type safety is a programming feature which ensures that a memory block can only contain data of a specific data type.</p>\n\n\n\n<p>All Dart collections support type-safety implementation via generics. A pair of angular brackets containing the data type is used to declare a type-safe collection. The syntax for declaring a type-safe collection is as given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Collection_name &lt;data_type&gt; identifier= new Collection_name&lt;data_type&gt; \n</code></pre>\n\n\n\n<p>The type-safe implementations of List, Map, Set and Queue is given below. This feature is also supported by all implementations of the above-mentioned collection types.</p>\n\n\n\n<h3>Example: Generic List</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   List &lt;String&gt; logTypes = new List &lt;String&gt;(); \n   logTypes.add(\"WARNING\"); \n   logTypes.add(\"ERROR\"); \n   logTypes.add(\"INFO\");  \n   \n   // iterating across list \n   for (String type in logTypes) { \n      print(type); \n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>WARNING \nERROR \nINFO\n</code></pre>\n\n\n\n<p>An attempt to insert a value other than the specified type will result in a compilation error. The following example illustrates this.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   List &lt;String&gt; logTypes = new List &lt;String&gt;(); \n   logTypes.add(1); \n   logTypes.add(\"ERROR\"); \n   logTypes.add(\"INFO\"); \n  \n   //iterating across list \n   for (String type in logTypes) { \n      print(type); \n   } \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1                                                                                     \nERROR                                                                             \nINFO\n</code></pre>\n\n\n\n<h3>Example: Generic Set</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   Set &lt;int&gt;numberSet = new  Set&lt;int&gt;(); \n   numberSet.add(100); \n   numberSet.add(20); \n   numberSet.add(5); \n   numberSet.add(60);\n   numberSet.add(70); \n   \n   // numberSet.add(\"Tom\"); \n   compilation error; \n   print(\"Default implementation  :${numberSet.runtimeType}\");  \n   \n   for(var no in numberSet) { \n      print(no); \n   } \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Default implementation :_CompactLinkedHashSet&lt;int&gt; \n100 \n20 \n5 \n60 \n70\n</code></pre>\n\n\n\n<h3>Example: Generic Queue</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:collection'; \nvoid main() { \n   Queue&lt;int&gt; queue = new Queue&lt;int&gt;(); \n   print(\"Default implementation ${queue.runtimeType}\");  \n   queue.addLast(10); \n   queue.addLast(20); \n   queue.addLast(30); \n   queue.addLast(40); \n   queue.removeFirst();  \n   \n   for(int no in queue){ \n      print(no); \n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Default implementation ListQueue&lt;int&gt; \n20 \n30 \n40\n</code></pre>\n\n\n\n<h2>Generic Map</h2>\n\n\n\n<p>A type-safe map declaration specifies the data types of −</p>\n\n\n\n<ul><li>The key</li><li>The value</li></ul>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Map &lt;Key_type, value_type&gt;\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   Map &lt;String,String&gt;m={'name':'Tom','Id':'E1001'}; \n   print('Map :${m}'); \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Map :{name: Tom, Id: E1001}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Dart is an&nbsp;optionally typed language. Collections in Dart are heterogeneous by default. In other words, a single Dart collection can host values of various types. However, a Dart collection can be made to hold homogenous values. The concept of Generics can be used to achieve the same. The use of Generics enforces a restriction on [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5575"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5575"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5575/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5576,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5575/revisions/5576"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5575"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5575"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5575"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5577,
    "date": "2021-04-05T07:44:41",
    "date_gmt": "2021-04-05T07:44:41",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5577"
    },
    "modified": "2021-04-05T07:44:41",
    "modified_gmt": "2021-04-05T07:44:41",
    "slug": "packages",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/packages/",
    "title": {
      "rendered": "Packages"
    },
    "content": {
      "rendered": "\n<p>A package is a mechanism to encapsulate a group of programming units. Applications might at times need integration of some third-party libraries or plugins. Every language has a mechanism for managing external packages like Maven or Gradle for Java, Nuget for .NET, npm for Node.js, etc. The package manager for Dart is&nbsp;<strong>pub</strong>.</p>\n\n\n\n<p>Pub helps to install packages in the repository. The repository of packages hosted can be found at https://pub.dartlang.org/.</p>\n\n\n\n<p>The&nbsp;<strong>package metadata</strong>&nbsp;is defined in a file,&nbsp;<strong>pubsec.yaml</strong>. YAML is the acronym for&nbsp;<strong>Yet Another Markup Language</strong>. The&nbsp;<strong>pub</strong>&nbsp;tool can be used to download all various libraries that an application requires.</p>\n\n\n\n<p>Every Dart application has a&nbsp;<strong>pubspec.yaml</strong>&nbsp;file which contains the application dependencies to other libraries and metadata of applications like application name, author, version, and description.</p>\n\n\n\n<p>The contents of a&nbsp;<strong>pubspec.yaml</strong>&nbsp;file should look something like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>name: 'vector_victor' \nversion: 0.0.1 \ndescription: An absolute bare-bones web app. \n... \ndependencies: browser: '&gt;=0.10.0 &lt;0.11.0' \n</code></pre>\n\n\n\n<p>The important&nbsp;<strong>pub commands</strong>&nbsp;are as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Command &amp; Description</th></tr><tr><td>1</td><td><strong>‘pub get’</strong>Helps to get all packages your application is depending on.</td></tr><tr><td>2</td><td><strong>‘pub upgrade’</strong>Upgrades all your dependencies to a newer version.</td></tr><tr><td>3</td><td><strong>‘pub build’</strong>This s used for building your web application and it will create a build folder , with all related scripts in it.</td></tr><tr><td>4</td><td><strong>‘pub help’</strong>This will give you help for all different pub commands.</td></tr></tbody></table></figure>\n\n\n\n<p>If you are using an IDE like WebStorm, then you can right-click on the pubspec.yaml to get all the commands directly −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/pubspec_yaml.jpg\" alt=\"Pubspec.yaml\"/></figure>\n\n\n\n<h2>Installing a Package</h2>\n\n\n\n<p>Consider an example where an application needs to parse xml. Dart XML is a lightweight library that is open source and stable for parsing, traversing, querying and building XML documents.</p>\n\n\n\n<p>The steps for achieving the said task is as follows −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following to the pubsec.yaml file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>name: TestApp \nversion: 0.0.1 \ndescription: A simple console application. \n#dependencies: \n#  foo_bar: '&gt;=1.0.0 &lt;2.0.0' \ndependencies: https://mail.google.com/mail/u/0/images/cleardot.gif\nxml: </code></pre>\n\n\n\n<p>Right-click on the&nbsp;<strong>pubsec.yaml</strong>&nbsp;and get dependencies. This will internally fire the&nbsp;<strong>pub get command</strong>&nbsp;as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/pub_get_command.jpg\" alt=\"Pub Get Command\"/></figure>\n\n\n\n<p>The downloaded packages and its dependent packages can be verified under the packages folder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/packages.jpg\" alt=\"Packages\"/></figure>\n\n\n\n<p>Since installation is completed now, we need to refer the&nbsp;<strong>dart xml</strong>&nbsp;in the project. The syntax is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:xml/xml.dart' as xml;\n</code></pre>\n\n\n\n<h3>Read XML String</h3>\n\n\n\n<p>To read XML string and verify the input, Dart XML uses a&nbsp;<strong>parse()</strong>&nbsp;method. The syntax is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>xml.parse(String input):\n</code></pre>\n\n\n\n<h3>Example : Parsing XML String Input</h3>\n\n\n\n<p>The following example shows how to parse XML string input −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:xml/xml.dart' as xml; \nvoid main(){ \n   print(\"xml\"); \n   var bookshelfXml = '''&lt;?xml version = \"1.0\"?&gt; \n   &lt;bookshelf&gt; \n      &lt;book&gt; \n         &lt;title lang = \"english\"&gt;Growing a Language&lt;/title&gt; \n         &lt;price&gt;29.99&lt;/price&gt; \n      &lt;/book&gt; \n      \n      &lt;book&gt; \n         &lt;title lang = \"english\"&gt;Learning XML&lt;/title&gt; \n         &lt;price&gt;39.95&lt;/price&gt; \n      &lt;/book&gt; \n      &lt;price&gt;132.00&lt;/price&gt; \n   &lt;/bookshelf&gt;'''; \n   \n   var document = xml.parse(bookshelfXml); \n   print(document.toString()); \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>xml \n&lt;?xml version = \"1.0\"?&gt;&lt;bookshelf&gt; \n   &lt;book&gt; \n      &lt;title lang = \"english\"&gt;Growing a Language&lt;/title&gt; \n      &lt;price&gt;29.99&lt;/price&gt; \n   &lt;/book&gt; \n\n   &lt;book&gt; \n      &lt;title lang = \"english\"&gt;Learning XML&lt;/title&gt; \n      &lt;price&gt;39.95&lt;/price&gt; \n   &lt;/book&gt; \n   &lt;price&gt;132.00&lt;/price&gt; \n&lt;/bookshelf&gt; </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A package is a mechanism to encapsulate a group of programming units. Applications might at times need integration of some third-party libraries or plugins. Every language has a mechanism for managing external packages like Maven or Gradle for Java, Nuget for .NET, npm for Node.js, etc. The package manager for Dart is&nbsp;pub. Pub helps to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5577"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5577"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5577/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5578,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5577/revisions/5578"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5577"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5577"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5577"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5579,
    "date": "2021-04-05T07:49:42",
    "date_gmt": "2021-04-05T07:49:42",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5579"
    },
    "modified": "2021-04-05T07:49:42",
    "modified_gmt": "2021-04-05T07:49:42",
    "slug": "exceptions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/exceptions/",
    "title": {
      "rendered": "Exceptions"
    },
    "content": {
      "rendered": "\n<p>An exception (or exceptional event) is a problem that arises during the execution of a program. When an Exception occurs the normal flow of the program is disrupted and the program/Application terminates abnormally.</p>\n\n\n\n<p>Built-in Dart exceptions include −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Exceptions &amp; Description</th></tr><tr><td>1</td><td><strong>DeferredLoadException</strong>Thrown when a deferred library fails to load.</td></tr><tr><td>2</td><td><strong>FormatException</strong>Exception thrown when a string or some other data does not have an expected format and cannot be parsed or processed.</td></tr><tr><td>3</td><td><strong>IntegerDivisionByZeroException</strong>Thrown when a number is divided by zero.</td></tr><tr><td>4</td><td><strong>IOException</strong>Base class for all Inupt-Output related exceptions.</td></tr><tr><td>5</td><td><strong>IsolateSpawnException</strong>Thrown when an isolate cannot be created.</td></tr><tr><td>6</td><td><strong>Timeout</strong>Thrown when a scheduled timeout happens while waiting for an async result.</td></tr></tbody></table></figure>\n\n\n\n<p>Every exception in Dart is a subtype of the pre-defined class&nbsp;<strong>Exception</strong>. Exceptions must be handled to prevent the application from terminating abruptly.</p>\n\n\n\n<h2>The try / on / catch Blocks</h2>\n\n\n\n<p>The&nbsp;<strong>try</strong>&nbsp;block embeds code that might possibly result in an exception. The on block is used when the exception type needs to be specified. The&nbsp;<strong>catch</strong>&nbsp;block is used when the handler needs the exception object.</p>\n\n\n\n<p>The&nbsp;<strong>try</strong>&nbsp;block must be followed by either exactly one&nbsp;<strong>on / catch</strong>&nbsp;block or one&nbsp;<strong>finally</strong>&nbsp;block (or one of both). When an exception occurs in the try block, the control is transferred to the&nbsp;<strong>catch</strong>.</p>\n\n\n\n<p>The&nbsp;<strong>syntax</strong>&nbsp;for handling an exception is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>try { \n   // code that might throw an exception \n}  \non Exception1 { \n   // code for handling exception \n}  \ncatch Exception2 { \n   // code for handling exception \n} \n</code></pre>\n\n\n\n<p>Following are some points to remember −</p>\n\n\n\n<ul><li>A code snippet can have more than one on / catch blocks to handle multiple exceptions.</li><li>The on block and the catch block are mutually inclusive, i.e. a try block can be associated with both- the on block and the catch block.</li></ul>\n\n\n\n<p>The following code illustrates exception handling in Dart −</p>\n\n\n\n<h3>Example: Using the ON Block</h3>\n\n\n\n<p>The following program divides two numbers represented by the variables <strong>x</strong> and <strong>y</strong> respectively. The code throws an exception since it attempts division by zero. The <strong>on block</strong> contains the code to handle this exception. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>main() { \n   int x = 12; \n   int y = 0; \n   int res;  \n   \n   try {\n      res = x ~/ y; \n   } \n   on IntegerDivisionByZeroException { \n      print('Cannot divide by zero'); \n   } \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cannot divide by zero\n</code></pre>\n\n\n\n<h3>Example: Using the catch Block</h3>\n\n\n\n<p>In the following example, we have used the same code as above. The only difference is that the <strong>catch block</strong> (instead of the ON block) here contains the code to handle the exception. The parameter of <strong>catch</strong> contains the exception object thrown at runtime. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>main() { \n   int x = 12; \n   int y = 0; \n   int res;  \n   \n   try {  \n      res = x ~/ y; \n   }  \n   catch(e) { \n      print(e); \n   } \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>IntegerDivisionByZeroException\n</code></pre>\n\n\n\n<h3>Example: on…catch</h3>\n\n\n\n<p>The following example shows how to use them <strong>on&#8230;catch</strong> block. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>main() { \n   int x = 12; \n   int y = 0; \n   int res;  \n   \n   try { \n      res = x ~/ y; \n   }  \n   on IntegerDivisionByZeroException catch(e) { \n      print(e); \n   } \n} </code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>IntegerDivisionByZeroException\n</code></pre>\n\n\n\n<h2>The Finally Block</h2>\n\n\n\n<p>The&nbsp;<strong>finally</strong>&nbsp;block includes code that should be executed irrespective of an exception’s occurrence. The optional&nbsp;<strong>finally</strong>&nbsp;block executes unconditionally after&nbsp;<strong>try/on/catch</strong>.</p>\n\n\n\n<p>The syntax for using the&nbsp;<strong>finally</strong>&nbsp;block is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>try { \n   // code that might throw an exception \n}  \non Exception1 { \n   // exception handling code \n}  \ncatch Exception2 { \n   //  exception handling \n}  \nfinally { \n   // code that should always execute; irrespective of the exception \n}\n</code></pre>\n\n\n\n<p>The following example illustrates the use of <strong>finally</strong> block. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>main() { \n   int x = 12; \n   int y = 0; \n   int res;  \n   \n   try { \n      res = x ~/ y; \n   } \n   on IntegerDivisionByZeroException { \n      print('Cannot divide by zero'); \n   } \n   finally { \n      print('Finally block executed'); \n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cannot divide by zero \nFinally block executed\n</code></pre>\n\n\n\n<h2>Throwing an Exception</h2>\n\n\n\n<p>The&nbsp;<strong>throw</strong>&nbsp;keyword is used to explicitly raise an exception. A raised exception should be handled to prevent the program from exiting abruptly.</p>\n\n\n\n<p>The&nbsp;<strong>syntax</strong>&nbsp;for raising an exception explicitly is −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>throw new Exception_name()\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how to use the <strong>throw</strong> keyword to throw an exception −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>main() { \n   try { \n      test_age(-2); \n   } \n   catch(e) { \n      print('Age cannot be negative'); \n   } \n}  \nvoid test_age(int age) { \n   if(age&lt;0) { \n      throw new FormatException(); \n   } \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age cannot be negative\n</code></pre>\n\n\n\n<h2>Custom Exceptions</h2>\n\n\n\n<p>As specified above, every exception type in Dart is a subtype of the built-in class&nbsp;<strong>Exception</strong>. Dart enables creating custom exceptions by extending the existing ones. The syntax for defining a custom exception is as given below −</p>\n\n\n\n<h3>Syntax: Defining the Exception</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Custom_exception_Name implements Exception { \n   // can contain constructors, variables and methods \n} \n</code></pre>\n\n\n\n<p>Custom Exceptions should be raised explicitly and the same should be handled in the code.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows how to define and handle a custom exception. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class AmtException implements Exception { \n   String errMsg() =&gt; 'Amount should be greater than zero'; \n}  \nvoid main() { \n   try { \n      withdraw_amt(-1); \n   } \n   catch(e) { \n      print(e.errMsg()); \n   }  \n   finally { \n      print('Ending requested operation.....'); \n   } \n}  \nvoid withdraw_amt(int amt) { \n   if (amt &lt;= 0) { \n      throw new AmtException(); \n   } \n}  </code></pre>\n\n\n\n<p>In the above code, we are defining a custom exception,&nbsp;<strong>AmtException</strong>. The code raises the exception if the amount passed is not within the excepted range. The&nbsp;<strong>main</strong>&nbsp;function encloses the function invocation in the&nbsp;<strong>try&#8230;catch</strong>&nbsp;block.</p>\n\n\n\n<p>The code should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Amount should be greater than zero \nEnding requested operation.... </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An exception (or exceptional event) is a problem that arises during the execution of a program. When an Exception occurs the normal flow of the program is disrupted and the program/Application terminates abnormally. Built-in Dart exceptions include − Sr.No Exceptions &amp; Description 1 DeferredLoadExceptionThrown when a deferred library fails to load. 2 FormatExceptionException thrown when [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5579"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5579"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5579/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5580,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5579/revisions/5580"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5579"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5579"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5579"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5581,
    "date": "2021-04-05T07:51:26",
    "date_gmt": "2021-04-05T07:51:26",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5581"
    },
    "modified": "2021-04-05T07:51:26",
    "modified_gmt": "2021-04-05T07:51:26",
    "slug": "debugging-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/debugging-3/",
    "title": {
      "rendered": "Debugging"
    },
    "content": {
      "rendered": "\n<p>Every now and then, developers commit mistakes while coding. A mistake in a program is referred to as a bug. The process of finding and fixing bugs is called debugging and is a normal part of the development process. This section covers tools and techniques that can help you with debugging tasks.</p>\n\n\n\n<p>The WebStorm editor enables breakpoints and step-by-step debugging. The program will break at the point where the breakpoint is attached. This functionality is like what you might expect from Java or C# application development. You can watch variables, browse the stack, step over and step into method and function calls, all from the WebStorm Editor.</p>\n\n\n\n<h2>Adding a Breakpoint</h2>\n\n\n\n<p>Consider the following code snippet. <strong>(TestString.dart)</strong>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   int a = 10, b = 20, c = 5; \n   c = c * c * c; \n   \n   print(\"$a + $b = ${a+b}\"); \n   print(\"$a%$b = ${a%b}\");  // Add a break point here \n   print(\"$a*$b = ${a*b}\"); \n   print(\"$a/$b = ${a/b}\"); \n   print(c); \n}</code></pre>\n\n\n\n<p>To&nbsp;<strong>add a breakpoint</strong>, click on the left margin to. In the figure given below, line number 7 has a break point.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/add_breakpoint.jpg\" alt=\"Add a Breakpoint\"/></figure>\n\n\n\n<p><strong>Run the program in debug mode</strong>. In the project explorer right click on the dart program in our case TestString.dart.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/debug_teststring.jpg\" alt=\"Debug TestString\"/></figure>\n\n\n\n<p>Once the program runs in debug mode, you will get the Debugger window as shown in the following screenshot. The variables tab shows the values of variables in the current context. You can add watchers for specific variables and listen to that values changes using watches window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/add_watchers.jpg\" alt=\"Add Watchers\"/></figure>\n\n\n\n<p><strong>Step Into</strong>&nbsp;(F7) arrow icon on debug menu helps to Executes code one statement at a time. If main methods call a subroutine, then this will go into the subroutine code also.</p>\n\n\n\n<p><strong>Step over</strong>&nbsp;(F8): It is similar to&nbsp;<strong>Step Into</strong>. The difference in use occurs when the current statement contains a call to a subroutine. If the main method calls a subroutine, step over will not drill into the subroutine. it will skip the subroutine.</p>\n\n\n\n<p><strong>Step Out</strong>&nbsp;(Shift+F8): Executes the remaining lines of a function in which the current execution point lies. The next statement displayed is the statement following the subroutine call.</p>\n\n\n\n<p>After running in debug mode, the program gives the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10 + 20 = 30 \n10 % 20 = 10 \n10 * 20 = 200 \n10 / 20 = 0.5 \n125</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Every now and then, developers commit mistakes while coding. A mistake in a program is referred to as a bug. The process of finding and fixing bugs is called debugging and is a normal part of the development process. This section covers tools and techniques that can help you with debugging tasks. The WebStorm editor [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5581"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5581"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5581/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5582,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5581/revisions/5582"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5581"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5581"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5581"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5583,
    "date": "2021-04-05T07:54:13",
    "date_gmt": "2021-04-05T07:54:13",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5583"
    },
    "modified": "2021-04-05T07:54:13",
    "modified_gmt": "2021-04-05T07:54:13",
    "slug": "typedef",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/typedef/",
    "title": {
      "rendered": "Typedef"
    },
    "content": {
      "rendered": "\n<p>A&nbsp;<strong>typedef</strong>, or a function-type alias, helps to define pointers to executable code within memory. Simply put, a&nbsp;<strong>typedef</strong>&nbsp;can be used as a pointer that references a function.</p>\n\n\n\n<p>Given below are the steps to implement&nbsp;<strong>typedefs</strong>&nbsp;in a Dart program.</p>\n\n\n\n<p><strong>Step 1: Defining a typedef</strong></p>\n\n\n\n<p>A&nbsp;<strong>typedef</strong>&nbsp;can be used to specify a function signature that we want specific functions to match. A function signature is defined by a function’s parameters (including their types). The return type is not a part of the function signature. Its syntax is as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>typedef function_name(parameters)\n</code></pre>\n\n\n\n<p><strong>Step 2: Assigning a Function to a typedef Variable</strong></p>\n\n\n\n<p>A variable of&nbsp;<strong>typedef</strong>&nbsp;can point to any function having the same signature as&nbsp;<strong>typedef</strong>. You can use the following signature to assign a function to a&nbsp;<strong>typedef</strong>&nbsp;variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>type_def  var_name = function_name\n</code></pre>\n\n\n\n<p><strong>Step 3: Invoking a Function</strong></p>\n\n\n\n<p>The&nbsp;<strong>typedef</strong>&nbsp;variable can be used to invoke functions. Here is how you can invoke a function −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var_name(parameters) \n</code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let’s now take an example to understand more on&nbsp;<strong>typedef</strong>&nbsp;in Dart.</p>\n\n\n\n<p>At first, let us define a&nbsp;<strong>typedef</strong>. Here we are defining a function signature. The function will take two input parameters of the type&nbsp;<strong>integer</strong>. Return type is not a part of the function signature.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>typedef ManyOperation(int firstNo , int secondNo); //function signature\n</code></pre>\n\n\n\n<p>Next, let us define the functions. Define some functions with the same function signature as that of the&nbsp;<strong>ManyOperation typedef</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Add(int firstNo,int second){ \n   print(\"Add result is ${firstNo+second}\"); \n}  \nSubtract(int firstNo,int second){ \n   print(\"Subtract result is ${firstNo-second}\"); \n}  \nDivide(int firstNo,int second){ \n   print(\"Add result is ${firstNo/second}\"); \n}</code></pre>\n\n\n\n<p>Finally, we will invoke the function via&nbsp;<strong>typedef</strong>. Declare a variable of the ManyOperations type. Assign the function name to the declared variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ManyOperation oper ;  \n\n//can point to any method of same signature \noper = Add; \noper(10,20); \noper = Subtract; \noper(30,20); \noper = Divide; \noper(50,5); </code></pre>\n\n\n\n<p>The&nbsp;<strong>oper</strong>&nbsp;variable can point to any method which takes two integer parameters. The&nbsp;<strong>Add</strong>&nbsp;function&#8217;s reference is assigned to the variable. Typedefs can switch function references at runtime</p>\n\n\n\n<p>Let us now put all the parts together and see the complete program. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>typedef ManyOperation(int firstNo , int secondNo); \n//function signature  \n\nAdd(int firstNo,int second){ \n   print(\"Add result is ${firstNo+second}\"); \n} \nSubtract(int firstNo,int second){ \n   print(\"Subtract result is ${firstNo-second}\"); \n}\nDivide(int firstNo,int second){ \n   print(\"Divide result is ${firstNo/second}\"); \n}  \nCalculator(int a, int b, ManyOperation oper){ \n   print(\"Inside calculator\"); \n   oper(a,b); \n}  \nvoid main(){ \n   ManyOperation oper = Add; \n   oper(10,20); \n   oper = Subtract; \n   oper(30,20); \n   oper = Divide; \n   oper(50,5); \n} </code></pre>\n\n\n\n<p>The program should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Add result is 30 \nSubtract result is 10 \nDivide result is 10.0 \n</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− The above code will result in an error if the&nbsp;<strong>typedef</strong>&nbsp;variable tries to point to a function with a different function signature.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p><strong>Typedefs</strong> can also be passed as a parameter to a function. Consider the following example −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>typedef ManyOperation(int firstNo , int secondNo);   //function signature \nAdd(int firstNo,int second){ \n   print(\"Add result is ${firstNo+second}\"); \n}  \nSubtract(int firstNo,int second){\n   print(\"Subtract result is ${firstNo-second}\"); \n}  \nDivide(int firstNo,int second){ \n   print(\"Divide result is ${firstNo/second}\"); \n}  \nCalculator(int a,int b ,ManyOperation oper){ \n   print(\"Inside calculator\"); \n   oper(a,b); \n}  \nmain(){ \n   Calculator(5,5,Add); \n   Calculator(5,5,Subtract); \n   Calculator(5,5,Divide); \n} </code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside calculator \nAdd result is 10 \nInside calculator \nSubtract result is 0 \nInside calculator \nDivide result is 1.0</code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A&nbsp;typedef, or a function-type alias, helps to define pointers to executable code within memory. Simply put, a&nbsp;typedef&nbsp;can be used as a pointer that references a function. Given below are the steps to implement&nbsp;typedefs&nbsp;in a Dart program. Step 1: Defining a typedef A&nbsp;typedef&nbsp;can be used to specify a function signature that we want specific functions to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5583"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5583"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5583/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5584,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5583/revisions/5584"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5583"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5583"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5583"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5585,
    "date": "2021-04-05T07:58:47",
    "date_gmt": "2021-04-05T07:58:47",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5585"
    },
    "modified": "2021-04-05T07:58:47",
    "modified_gmt": "2021-04-05T07:58:47",
    "slug": "libraries-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/libraries-2/",
    "title": {
      "rendered": "Libraries"
    },
    "content": {
      "rendered": "\n<p>A library in a programming language represents a collection of routines (set of programming instructions). Dart has a set of built-in libraries that are useful to store routines that are frequently used. A Dart library comprises of a set of classes, constants, functions, typedefs, properties, and exceptions.</p>\n\n\n\n<h2>Importing a library</h2>\n\n\n\n<p>Importing makes the components in a library available to the caller code. The import keyword is used to achieve the same. A dart file can have multiple import statements.</p>\n\n\n\n<p>Built in Dart library URIs use the dart: scheme to refer to a library. Other libraries can use a file system path or the package: scheme to specify its URI. Libraries provided by a package manager such as the pub tool uses the&nbsp;<em>package: scheme</em>.</p>\n\n\n\n<p>The syntax for importing a library in Dart is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'URI'\n</code></pre>\n\n\n\n<p>Consider the following code snippet −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:io' \nimport 'package:lib1/libfile.dart' \n</code></pre>\n\n\n\n<p>If you want to use only part of a library, you can selectively import the library. The syntax for the same is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package: lib1/lib1.dart' show foo, bar;  \n// Import only foo and bar. \n\nimport 'package: mylib/mylib.dart' hide foo;  \n// Import all names except foo\n</code></pre>\n\n\n\n<p>Some commonly used libraries are given below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Library &amp; Description</th></tr><tr><td>1</td><td><strong>dart:io</strong>File, socket, HTTP, and other I/O support for server applications. This library does not work in browser-based applications. This library is imported by default.</td></tr><tr><td>2</td><td><strong>dart:core</strong>Built-in types, collections, and other core functionality for every Dart program. This library is automatically imported.</td></tr><tr><td>3</td><td><strong>dart: math</strong>Mathematical constants and functions, plus a random number generator.</td></tr><tr><td>4</td><td><strong>dart: convert</strong>Encoders and decoders for converting between different data representations, including JSON and UTF-8.</td></tr><tr><td>5</td><td><strong>dart: typed_data</strong>Lists that efficiently handle fixed sized data (for example, unsigned 8 byte integers).</td></tr></tbody></table></figure>\n\n\n\n<h3>Example : Importing and using a Library</h3>\n\n\n\n<p>The following example imports the built-in library <strong>dart: math</strong>. The snippet calls the <strong>sqrt()</strong> function from the <strong>math</strong> library. This function returns the square root of a number passed to it. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:math'; \nvoid main() { \n   print(\"Square root of 36 is: ${sqrt(36)}\"); \n}</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Square root of 36 is: 6.0\n</code></pre>\n\n\n\n<h2>Encapsulation in Libraries</h2>\n\n\n\n<p>Dart scripts can prefix identifiers with an underscore ( _ ) to mark its components private. Simply put, Dart libraries can restrict access to its content by external scripts. This is termed as&nbsp;<strong>encapsulation</strong>. The syntax for the same is given below −</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>_identifier\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>At first, define a library with a private function. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library loggerlib;                            \nvoid _log(msg) {\n   print(\"Log method called in loggerlib msg:$msg\");      \n} </code></pre>\n\n\n\n<p>Next, import the library</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'test.dart' as web; \nvoid main() { \n   web._log(\"hello from webloggerlib\"); \n} </code></pre>\n\n\n\n<p>The above code will result in an error.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Unhandled exception: \nNo top-level method 'web._log' declared.  \nNoSuchMethodError: method not found: 'web._log' \nReceiver: top-level \nArguments: &#91;...] \n#0 NoSuchMethodError._throwNew (dart:core-patch/errors_patch.dart:184) \n#1 main (file:///C:/Users/Administrator/WebstormProjects/untitled/Assertion.dart:6:3) \n#2 _startIsolate.&lt;anonymous closure&gt; (dart:isolate-patch/isolate_patch.dart:261) \n#3 _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:148)\n</code></pre>\n\n\n\n<h2>Creating Custom Libraries</h2>\n\n\n\n<p>Dart also allows you to use your own code as a library. Creating a custom library involves the following steps −</p>\n\n\n\n<p><strong>Step 1: Declaring a Library</strong></p>\n\n\n\n<p>To explicitly declare a library, use the&nbsp;<strong>library statement</strong>. The syntax for declaring a library is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library library_name  \n// library contents go here \n</code></pre>\n\n\n\n<p><strong>Step 2: Associating a Library</strong></p>\n\n\n\n<p>You can associate a library in two ways −</p>\n\n\n\n<ul><li>Within the same directory</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'library_name'\n</code></pre>\n\n\n\n<ul><li>From a different directory</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dir/library_name'\n</code></pre>\n\n\n\n<h3>Example: Custom Library</h3>\n\n\n\n<p>First, let us define a custom library,&nbsp;<strong>calculator.dart</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library calculator_lib;  \nimport 'dart:math'; \n\n//import statement after the libaray statement  \nint add(int firstNumber,int secondNumber){ \n   print(\"inside add method of Calculator Library \") ; \n   return firstNumber+secondNumber; \n}  \nint modulus(int firstNumber,int secondNumber){ \n   print(\"inside modulus method of Calculator Library \") ; \n   return firstNumber%secondNumber; \n}  \nint random(int no){ \n   return new Random().nextInt(no); \n}</code></pre>\n\n\n\n<p>Next, we will import the library −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'calculator.dart';  \nvoid main() {\n   var num1 = 10; \n   var num2 = 20; \n   var sum = add(num1,num2); \n   var mod = modulus(num1,num2); \n   var r = random(10);  \n   \n   print(\"$num1 + $num2 = $sum\"); \n   print(\"$num1 % $num2= $mod\"); \n   print(\"random no $r\"); \n} </code></pre>\n\n\n\n<p>The program should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>inside add method of Calculator Library  \ninside modulus method of Calculator Library  \n10 + 20 = 30 \n10 % 20= 10 \nrandom no 0 \n</code></pre>\n\n\n\n<h2>Library Prefix</h2>\n\n\n\n<p>If you import two libraries with conflicting identifiers, then you can specify a prefix for one or both libraries. Use the&nbsp;<strong>&#8216;as&#8217;</strong>&nbsp;keyword for specifying the prefix. The syntax for the same is given below −</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'library_uri' as prefix\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>First, let us define a library:&nbsp;<strong>loggerlib.dart</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library loggerlib;  \nvoid log(msg){ \n   print(\"Log method called in loggerlib msg:$msg\");\n}   </code></pre>\n\n\n\n<p>Next, we will define another library:&nbsp;<strong>webloggerlib.dart</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library webloggerlib; \nvoid log(msg){ \n   print(\"Log method called in webloggerlib msg:$msg\"); \n} </code></pre>\n\n\n\n<p>Finally, we will import the library with a prefix.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'loggerlib.dart'; \nimport 'webloggerlib.dart' as web;  \n\n// prefix avoids function name clashes \nvoid main(){ \n   log(\"hello from loggerlib\"); \n   web.log(\"hello from webloggerlib\"); \n} </code></pre>\n\n\n\n<p>It will produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Log method called in loggerlib msg:hello from loggerlib \nLog method called in webloggerlib msg:hello from webloggerlib </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A library in a programming language represents a collection of routines (set of programming instructions). Dart has a set of built-in libraries that are useful to store routines that are frequently used. A Dart library comprises of a set of classes, constants, functions, typedefs, properties, and exceptions. Importing a library Importing makes the components in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5585"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5585"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5585/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5586,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5585/revisions/5586"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5585"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5585"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5585"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5587,
    "date": "2021-04-05T08:01:33",
    "date_gmt": "2021-04-05T08:01:33",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5587"
    },
    "modified": "2021-04-05T08:01:33",
    "modified_gmt": "2021-04-05T08:01:33",
    "slug": "async",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/async/",
    "title": {
      "rendered": "Async"
    },
    "content": {
      "rendered": "\n<p>An&nbsp;<strong>asynchronous operation</strong>&nbsp;executes in a thread, separate from the&nbsp;<strong>main</strong>&nbsp;application thread. When an application calls a method to perform an operation asynchronously, the application can continue executing while the asynchronous method performs its task.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let’s take an example to understand this concept. Here, the program accepts user input using the <strong>IO library</strong>. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:io'; \nvoid main() { \n   print(\"Enter your name :\");            \n   \n   // prompt for user input \n   String name = stdin.readLineSync();  \n   \n   // this is a synchronous method that reads user input \n   print(\"Hello Mr. ${name}\"); \n   print(\"End of main\"); \n} </code></pre>\n\n\n\n<p>The&nbsp;<strong>readLineSync()</strong>&nbsp;is a synchronous method. This means that the execution of all instructions that follow the&nbsp;<strong>readLineSync()</strong>&nbsp;function call will be blocked till the&nbsp;<strong>readLineSync()</strong>&nbsp;method finishes execution.</p>\n\n\n\n<p>The&nbsp;<strong>stdin.readLineSync</strong>&nbsp;waits for input. It stops in its tracks and does not execute any further until it receives the user’s input.</p>\n\n\n\n<p>The above example will result in the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter your name :     \nTom                   \n\n// reads user input  \nHello Mr. Tom \nEnd of main\n</code></pre>\n\n\n\n<p>In computing, we say something is&nbsp;<strong>synchronous</strong>&nbsp;when it waits for an event to happen before continuing. A disadvantage in this approach is that if a part of the code takes too long to execute, the subsequent blocks, though unrelated, will be blocked from executing. Consider a webserver that must respond to multiple requests for a resource.</p>\n\n\n\n<p>A synchronous execution model will block every other user’s request till it finishes processing the current request. In such a case, like that of a web server, every request must be independent of the others. This means, the webserver should not wait for the current request to finish executing before it responds to request from other users.</p>\n\n\n\n<p>Simply put, it should accept requests from new users before necessarily completing the requests of previous users. This is termed as asynchronous. Asynchronous programming basically means no waiting or non-blocking programming model. The&nbsp;<strong>dart:async</strong>&nbsp;package facilitates implementing asynchronous programming blocks in a Dart script.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example better illustrates the functioning of an asynchronous block.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a&nbsp;<strong>contact.txt</strong>&nbsp;file as given below&nbsp;<strong>and</strong>&nbsp;save it in the data folder in the current project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1, Tom \n2, John \n3, Tim \n4, Jane \n</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Write a program which will read the file without blocking other parts of the application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import \"dart:async\"; \nimport \"dart:io\";  \n\nvoid main(){ \n   File file = new File( Directory.current.path+\"\\\\data\\\\contact.txt\"); \n   Future&lt;String&gt; f = file.readAsString();  \n  \n   // returns a futrue, this is Async method \n   f.then((data)=&gt;print(data));  \n   \n   // once file is read , call back method is invoked  \n   print(\"End of main\");  \n   // this get printed first, showing fileReading is non blocking or async \n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>output</strong>&nbsp;of this program will be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>End of main \n1, Tom \n2, John \n3, Tim \n4, Jan\n</code></pre>\n\n\n\n<p>The &#8220;end of main&#8221; executes first while the script continues reading the file. The&nbsp;<strong>Future</strong>&nbsp;class, part of&nbsp;<strong>dart:async</strong>, is used for getting the result of a computation after an asynchronous task has completed. This&nbsp;<strong>Future</strong>&nbsp;value is then used to do something after the computation finishes.</p>\n\n\n\n<p>Once the read operation is completed, the execution control is transferred within&nbsp;<strong>&#8220;then()&#8221;</strong>. This is because the reading operation can take more time and so it doesn’t want to block other part of program.</p>\n\n\n\n<h3>Dart Future</h3>\n\n\n\n<p>The Dart community defines a&nbsp;<strong>Future</strong>&nbsp;as &#8220;a means for getting a value sometime in the future.&#8221; Simply put,&nbsp;<strong>Future objects</strong>&nbsp;are a mechanism to represent values returned by an expression whose execution will complete at a later point in time. Several of Dart’s built-in classes return a&nbsp;<strong>Future</strong>&nbsp;when an asynchronous method is called.</p>\n\n\n\n<p>Dart is a single-threaded programming language. If any code blocks the thread of execution (for example, by waiting for a time-consuming operation or blocking on I/O), the program effectively freezes.</p>\n\n\n\n<p>Asynchronous operations let your program run without getting blocked. Dart uses&nbsp;<strong>Future objects</strong>&nbsp;to represent asynchronous operations.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An&nbsp;asynchronous operation&nbsp;executes in a thread, separate from the&nbsp;main&nbsp;application thread. When an application calls a method to perform an operation asynchronously, the application can continue executing while the asynchronous method performs its task. Example Let’s take an example to understand this concept. Here, the program accepts user input using the IO library. Live Demo The&nbsp;readLineSync()&nbsp;is a synchronous [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5587"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5587"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5587/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5588,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5587/revisions/5588"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5587"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5587"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5587"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5589,
    "date": "2021-04-05T08:03:34",
    "date_gmt": "2021-04-05T08:03:34",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5589"
    },
    "modified": "2021-04-05T08:03:34",
    "modified_gmt": "2021-04-05T08:03:34",
    "slug": "concurrency",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/concurrency/",
    "title": {
      "rendered": "Concurrency"
    },
    "content": {
      "rendered": "\n<p><strong>Concurrency</strong>&nbsp;is the execution of several instruction sequences at the same time. It involves performing more than one task simultaneously.</p>\n\n\n\n<p>Dart uses&nbsp;<strong>Isolates</strong>&nbsp;as a tool for doing works in parallel. The&nbsp;<strong>dart:isolate</strong>&nbsp;package is Dart’s solution to taking single-threaded Dart code and allowing the application to make greater use of the hard-ware available.</p>\n\n\n\n<p><strong>Isolates</strong>, as the name suggests, are isolated units of running code. The only way to send data between them is by passing messages, like the way you pass messages between the client and the server. An&nbsp;<strong>isolate</strong>&nbsp;helps the program to take advantage of multicore microprocessors out of the box.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let’s take an example to understand this concept better. Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:isolate';  \nvoid foo(var message){ \n   print('execution from foo ... the message is :${message}'); \n}  \nvoid main(){ \n   Isolate.spawn(foo,'Hello!!'); \n   Isolate.spawn(foo,'Greetings!!'); \n   Isolate.spawn(foo,'Welcome!!'); \n   \n   print('execution from main1'); \n   print('execution from main2'); \n   print('execution from main3'); \n}</code></pre>\n\n\n\n<p>Here, the&nbsp;<strong>spawn</strong>&nbsp;method of the&nbsp;<strong>Isolate</strong>&nbsp;class facilitates running a function,&nbsp;<strong>foo</strong>, in parallel with the rest of our code. The&nbsp;<strong>spawn</strong>&nbsp;function takes two parameters −</p>\n\n\n\n<ul><li>the function to be spawned, and</li><li>an object that will be passed to the spawned function.</li></ul>\n\n\n\n<p>In case there is no object to pass to the spawned function, it can be passed a NULL value.</p>\n\n\n\n<p>The two functions&nbsp;<strong>(foo and main)</strong>&nbsp;might not necessarily run in the same order each time. There is no guarantee as to when&nbsp;<strong>foo</strong>&nbsp;will be executing and when&nbsp;<strong>main()</strong>&nbsp;will be executing. The output will be different each time you run.</p>\n\n\n\n<h3>Output 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>execution from main1 \nexecution from main2 \nexecution from main3 \nexecution from foo ... the message is :Hello!! \n</code></pre>\n\n\n\n<h3>Output 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>execution from main1 \nexecution from main2 \nexecution from main3 \nexecution from foo ... the message is :Welcome!! \nexecution from foo ... the message is :Hello!! \nexecution from foo ... the message is :Greetings!! \n</code></pre>\n\n\n\n<p>From the outputs, we can conclude that the Dart code can spawn a new&nbsp;<strong>isolate</strong>&nbsp;from running code like the way Java or C# code can start a new thread.</p>\n\n\n\n<p><strong>Isolates</strong>&nbsp;differ from threads in that an&nbsp;<strong>isolate</strong>&nbsp;has its own memory. There’s no way to share a variable between&nbsp;<strong>isolates</strong>—the only way to communicate between&nbsp;<strong>isolates</strong>&nbsp;is via message passing.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− The above output will be different for different hardware and operating system configurations.</p>\n\n\n\n<h3>Isolate v/s Future</h3>\n\n\n\n<p>Doing complex computational work asynchronously is important to ensure the responsiveness of applications. <strong>Dart Future</strong> is a mechanism for retrieving the value of an asynchronous task after it has completed, while <strong>Dart Isolates</strong> are a tool for abstracting parallelism and implementing it on a practical high-level basis.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Concurrency&nbsp;is the execution of several instruction sequences at the same time. It involves performing more than one task simultaneously. Dart uses&nbsp;Isolates&nbsp;as a tool for doing works in parallel. The&nbsp;dart:isolate&nbsp;package is Dart’s solution to taking single-threaded Dart code and allowing the application to make greater use of the hard-ware available. Isolates, as the name suggests, are [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5589"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5589"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5589/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5590,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5589/revisions/5590"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5589"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5589"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5589"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5591,
    "date": "2021-04-05T08:07:37",
    "date_gmt": "2021-04-05T08:07:37",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5591"
    },
    "modified": "2021-04-05T08:07:37",
    "modified_gmt": "2021-04-05T08:07:37",
    "slug": "unit-testing",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/unit-testing/",
    "title": {
      "rendered": "Unit Testing"
    },
    "content": {
      "rendered": "\n<p>Unit Testing involves testing every individual unit of an application. It helps the developer to test small functionalities without running the entire complex application.</p>\n\n\n\n<p>The Dart&nbsp;<strong>external library</strong>&nbsp;named &#8220;test&#8221; provides a standard way of writing and running unit tests.</p>\n\n\n\n<p>Dart unit testing involves the following steps −</p>\n\n\n\n<p><strong>Step 1: Installing the &#8220;test&#8221; package</strong></p>\n\n\n\n<p>To installing third-party packages in the current project, you will require the <strong>pubspec.YAML</strong> file. To install test packages, first, make the following entry in the pubspec.YAML file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: \ntest:\n</code></pre>\n\n\n\n<p>After making the entry, right-click the&nbsp;<strong>pubspec.yaml</strong>&nbsp;file and get dependencies. It will install the&nbsp;<strong>&#8220;test&#8221;</strong>&nbsp;package. Given below is a screenshot for the same in the&nbsp;<strong>WebStorm</strong>&nbsp;Editor.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/unit_testing.jpg\" alt=\"Unit Testing\"/></figure>\n\n\n\n<p>Packages can be installed from the&nbsp;<strong>command line</strong>&nbsp;too. Type the following in the terminal −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pub get\n</code></pre>\n\n\n\n<p><strong>Step 2: Importing the &#8220;test&#8221; package</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import \"package:test/test.dart\";\n</code></pre>\n\n\n\n<p><strong>Step 3 Writing Tests</strong></p>\n\n\n\n<p>Tests are specified using the top-level function&nbsp;<strong>test()</strong>, while&nbsp;<strong>test assertions</strong>&nbsp;are made using the&nbsp;<strong>expect()</strong>&nbsp;function. For using these methods, they should be installed as a&nbsp;<strong>pub</strong>&nbsp;dependency.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>test(\"Description of the test \", () {  \n   expect(actualValue , matchingValue) \n});\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>group()</strong>&nbsp;function can be used to group tests. Each group&#8217;s description is added to the beginning of its test&#8217;s descriptions.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>group(\"some_Group_Name\", () { \n   test(\"test_name_1\", () { \n      expect(actual, equals(exptected)); \n   });  \n   test(\"test_name_2\", () { \n      expect(actual, equals(expected)); \n   }); \n}) \n</code></pre>\n\n\n\n<h3>Example 1: A Passing Test</h3>\n\n\n\n<p>The following example defines a method&nbsp;<strong>Add()</strong>. This method takes two integer values and returns an integer representing the&nbsp;<strong>sum</strong>. To test this&nbsp;<strong>add()</strong>&nbsp;method −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Import the&nbsp;<strong>test</strong>&nbsp;package as given below.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Define the test using the&nbsp;<strong>test()</strong>&nbsp;function. Here, the&nbsp;<strong>test()</strong>&nbsp;function uses the&nbsp;<strong>expect()</strong>&nbsp;function to enforce an assertion.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:test/test.dart';      \n// Import the test package \n\nint Add(int x,int y)                  \n// Function to be tested { \n   return x+y; \n}  \nvoid main() { \n   // Define the test \n   test(\"test to check add method\",(){  \n      // Arrange \n      var expected = 30; \n      \n      // Act \n      var actual = Add(10,20); \n      \n      // Asset \n      expect(actual,expected); \n   }); \n}</code></pre>\n\n\n\n<p>It should produce the following&nbsp;<strong>output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>00:00 +0: test to check add method \n00:00 +1: All tests passed! \n</code></pre>\n\n\n\n<h3>Example 2: A Failing Test</h3>\n\n\n\n<p>The&nbsp;<strong>subtract()</strong>&nbsp;method defined below has a logical mistake. The following&nbsp;<strong>test</strong>&nbsp;verifies the same.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:test/test.dart'; \nint Add(int x,int y){ \n   return x+y; \n}\nint Sub(int x,int y){ \n   return x-y-1; \n}  \nvoid main(){ \n   test('test to check sub',(){ \n      var expected = 10;   \n      // Arrange \n      \n      var actual = Sub(30,20);  \n      // Act \n      \n      expect(actual,expected);  \n      // Assert \n   }); \n   test(\"test to check add method\",(){ \n      var expected = 30;   \n      // Arrange \n      \n      var actual = Add(10,20);  \n      // Act \n      \n      expect(actual,expected);  \n      // Asset \n   }); \n}</code></pre>\n\n\n\n<p><strong>Output</strong>&nbsp;− The test case for the function&nbsp;<strong>add()</strong>&nbsp;passes but the test for&nbsp;<strong>subtract()</strong>&nbsp;fails as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>00:00 +0: test to check sub \n00:00 +0 -1: test to check sub \nExpected: &lt;10&gt; \nActual: &lt;9&gt; \npackage:test  expect \nbin\\Test123.dart 18:5  main.&lt;fn&gt; \n   \n00:00 +0 -1: test to check add method \n00:00 +1 -1: Some tests failed.  \nUnhandled exception: \nDummy exception to set exit code. \n#0  _rootHandleUncaughtError.&lt;anonymous closure&gt; (dart:async/zone.dart:938) \n#1  _microtaskLoop (dart:async/schedule_microtask.dart:41)\n#2  _startMicrotaskLoop (dart:async/schedule_microtask.dart:50) \n#3  _Timer._runTimers (dart:isolate-patch/timer_impl.dart:394) \n#4  _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:414) \n#5  _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:148) \n</code></pre>\n\n\n\n<h2>Grouping Test Cases</h2>\n\n\n\n<p>You can group the&nbsp;<strong>test cases</strong>&nbsp;so that it adds more meaning to you test code. If you have many&nbsp;<strong>test cases</strong>&nbsp;this helps to write much cleaner code.</p>\n\n\n\n<p>In the given code, we are writing a test case for the&nbsp;<strong>split()</strong>&nbsp;function and the&nbsp;<strong>trim</strong>&nbsp;function. Hence, we logically group these test cases and call it&nbsp;<strong>String</strong>.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import \"package:test/test.dart\"; \nvoid main() { \n   group(\"String\", () { \n      test(\"test on split() method of string class\", () { \n         var string = \"foo,bar,baz\"; \n         expect(string.split(\",\"), equals(&#91;\"foo\", \"bar\", \"baz\"])); \n      }); \n      test(\"test on trim() method of string class\", () { \n         var string = \"  foo \"; \n         expect(string.trim(), equals(\"foo\")); \n      }); \n   }); \n} </code></pre>\n\n\n\n<p><strong>Output</strong>&nbsp;− The output will append the group name for each test case as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>00:00 +0: String test on split() method of string class \n00:00 +1: String test on trim() method of string class \n00:00 +2: All tests passed</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Unit Testing involves testing every individual unit of an application. It helps the developer to test small functionalities without running the entire complex application. The Dart&nbsp;external library&nbsp;named &#8220;test&#8221; provides a standard way of writing and running unit tests. Dart unit testing involves the following steps − Step 1: Installing the &#8220;test&#8221; package To installing third-party [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5591"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5591"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5591/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5592,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5591/revisions/5592"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5591"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5591"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5591"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5593,
    "date": "2021-04-05T08:10:59",
    "date_gmt": "2021-04-05T08:10:59",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=5593"
    },
    "modified": "2021-04-05T08:11:42",
    "modified_gmt": "2021-04-05T08:11:42",
    "slug": "html-dom",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/html-dom/",
    "title": {
      "rendered": "HTML DOM"
    },
    "content": {
      "rendered": "\n<p>Every webpage resides inside a browser window which can be considered as an object.</p>\n\n\n\n<p>A&nbsp;<strong>Document object</strong>&nbsp;represents the HTML document that is displayed in that window. The Document object has various properties that refer to other objects which allow access to and modification of document content.</p>\n\n\n\n<p>The way a document content is accessed and modified is called the&nbsp;<strong>Document Object Model</strong>, or&nbsp;<strong>DOM</strong>. The Objects are organized in a hierarchy. This hierarchical structure applies to the organization of objects in a Web document.</p>\n\n\n\n<ul><li><strong>Window</strong>&nbsp;− Top of the hierarchy. It is the outmost element of the object hierarchy.</li><li><strong>Document</strong>&nbsp;− Each HTML document that gets loaded into a window becomes a document object. The document contains the contents of the page.</li><li><strong>Elements</strong>&nbsp;− represent the content on a web page. Examples include the text boxes, page title etc.</li><li><strong>Nodes</strong>&nbsp;− are often elements, but they can also be attributes, text, comments, and other DOM types.</li></ul>\n\n\n\n<p>Here is a simple hierarchy of a few important DOM objects −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/html_dom.jpg\" alt=\"HTML DOM\"/></figure>\n\n\n\n<p>Dart provides the&nbsp;<strong>dart:html</strong>&nbsp;library to manipulate objects and elements in the DOM. Console-based applications cannot use the&nbsp;<strong>dart:html</strong>&nbsp;library. To use the HTML library in the web applications, import&nbsp;<strong>dart:html</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:html';\n</code></pre>\n\n\n\n<p>Moving on, we will discuss some&nbsp;<strong>DOM Operations</strong>&nbsp;in the next section.</p>\n\n\n\n<h2>Finding DOM Elements</h2>\n\n\n\n<p>The&nbsp;<strong>dart:html</strong>&nbsp;library provides the&nbsp;<strong>querySelector</strong>&nbsp;function to search for elements in the DOM.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element querySelector(String selectors);\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>querySelector()</strong>&nbsp;function returns the first element that matches the specified group of selectors.&nbsp;<strong>&#8220;selectors</strong>&nbsp;should be string using CSS selector syntax as given below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var element1 = document.querySelector('.className'); \nvar element2 = document.querySelector('#id'); \n</code></pre>\n\n\n\n<h3>Example: Manipulating DOM</h3>\n\n\n\n<p>Follow the steps given below, in the Webstorm IDE −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− File NewProject → In the location, provide the project name as&nbsp;<strong>DemoWebApp</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/demowebapp.jpg\" alt=\"Demowebapp\"/></figure>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− In the section &#8220;Generate sample content&#8221;, select&nbsp;<strong>SimpleWebApplication</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/create.jpg\" alt=\"Create\"/></figure>\n\n\n\n<p>It will create a sample project,&nbsp;<strong>DemoWebApp</strong>. There is a&nbsp;<strong>pubspec.yaml</strong>&nbsp;file containing the dependencies which need to be downloaded.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>name: 'DemoWebApp' \nversion: 0.0.1 \ndescription: An absolute bare-bones web app. \n\n#author: Your Name &lt;email@example.com&gt; \n#homepage: https://www.example.com  \nenvironment:   \n   sdk: '&gt;=1.0.0 &lt;2.0.0'  \ndependencies:   \n   browser: '&gt;=0.10.0 &lt;0.11.0'   dart_to_js_script_rewriter: '^1.0.1'  \ntransformers: \n- dart_to_js_script_rewriter </code></pre>\n\n\n\n<p>If you are connected to Web, then these will be downloaded automatically, else you can right-click on the&nbsp;<strong>pubspec.yaml</strong>&nbsp;and get dependencies.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/pub_get_dependencies.jpg\" alt=\"Pub Get Dependencies\"/></figure>\n\n\n\n<p>In the web folder, you will find three files:&nbsp;<strong>Index.html, main.dart</strong>, and&nbsp;<strong>style.css</strong></p>\n\n\n\n<h3>Index.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;   \n&lt;html&gt; \n   &lt;head&gt;     \n      &lt;meta charset = \"utf-8\"&gt;     \n      &lt;meta http-equiv = \"X-UA-Compatible\" content = \"IE = edge\"&gt;     \n      &lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\"&gt;\n      &lt;meta name = \"scaffolded-by\" content = \"https://github.com/google/stagehand\"&gt;\n      &lt;title&gt;DemoWebApp&lt;/title&gt;     \n      &lt;link rel = \"stylesheet\" href = \"styles.css\"&gt;     \n      &lt;script defer src = \"main.dart\" type = \"application/dart\"&gt;&lt;/script&gt;\n      &lt;script defer src = \"packages/browser/dart.js\"&gt;&lt;/script&gt; \n   &lt;/head&gt;\n   \n   &lt;body&gt;   \n      &lt;h1&gt;\n         &lt;div id = \"output\"&gt;&lt;/div&gt; \n      &lt;/h1&gt;  \n   &lt;/body&gt; \n&lt;/html&gt; </code></pre>\n\n\n\n<h3>Main.dart</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:html';  \nvoid main() {   \n   querySelector('#output').text = 'Your Dart web dom app is running!!!.'; \n} </code></pre>\n\n\n\n<p>Run the&nbsp;<strong>index.html</strong>&nbsp;file; you will see the following output on your screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/demo_web_app.jpg\" alt=\"Demo Web App\"/></figure>\n\n\n\n<h2>Event Handling</h2>\n\n\n\n<p>The&nbsp;<strong>dart:html</strong>&nbsp;library provides the&nbsp;<strong>onClick</strong>&nbsp;event for DOM Elements. The syntax shows how an element could handle a stream of click events.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>querySelector('#Id').onClick.listen(eventHanlderFunction); \n</code></pre>\n\n\n\n<p>The&nbsp;<strong>querySelector()</strong>&nbsp;function returns the element from the given DOM and&nbsp;<strong>onClick.listen()</strong>&nbsp;will take an&nbsp;<strong>eventHandler</strong>&nbsp;method which will be invoked when a click event is raised. The syntax of&nbsp;<strong>eventHandler</strong>&nbsp;is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void eventHanlderFunction (MouseEvent event){ } \n</code></pre>\n\n\n\n<p>Let us now take an example to understand the concept of Event Handling in Dart.</p>\n\n\n\n<h3>TestEvent.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt; \n&lt;html&gt; \n   &lt;head&gt; \n      &lt;meta charset = \"utf-8\"&gt; \n      &lt;meta http-equiv = \"X-UA-Compatible\" content = \"IE = edge\"&gt; \n      &lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\"&gt; \n      &lt;meta name = \"scaffolded-by\" content =\"https://github.com/google/stagehand\"&gt; \n      &lt;title&gt;DemoWebApp&lt;/title&gt; \n      &lt;link rel = \"stylesheet\" href = \"styles.css\"&gt; \n      &lt;script defer src = \"TestEvent.dart\" type=\"application/dart\"&gt;&lt;/script&gt; \n      &lt;script defer src = \"packages/browser/dart.js\"&gt;&lt;/script&gt; \n   &lt;/head&gt; \n   \n   &lt;body&gt; \n      &lt;div id = \"output\"&gt;&lt;/div&gt; \n      &lt;h1&gt; \n         &lt;div&gt; \n            Enter you name : &lt;input type = \"text\" id = \"txtName\"&gt; \n            &lt;input type = \"button\" id = \"btnWish\" value=\"Wish\"&gt; \n         &lt;/div&gt; \n      &lt;/h1&gt; \n      &lt;h2 id = \"display\"&gt;&lt;/h2&gt; \n   &lt;/body&gt;\n   \n&lt;/html&gt;</code></pre>\n\n\n\n<h3>TestEvent.dart</h3>\n\n\n\n<pre id=\"TestEvent.dart\" class=\"wp-block-code\"><code>import 'dart:html'; \nvoid main() { \n   querySelector('#btnWish').onClick.listen(wishHandler); \n}  \nvoid wishHandler(MouseEvent event){ \n   String name = (querySelector('#txtName')  as InputElement).value; \n   querySelector('#display').text = 'Hello Mr.'+ name; \n}</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/dart_programming/images/output.jpg\" alt=\"Output\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Every webpage resides inside a browser window which can be considered as an object. A&nbsp;Document object&nbsp;represents the HTML document that is displayed in that window. The Document object has various properties that refer to other objects which allow access to and modification of document content. The way a document content is accessed and modified is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      101
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5593"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5593"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5593/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5594,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5593/revisions/5594"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5593"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5593"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5593"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]