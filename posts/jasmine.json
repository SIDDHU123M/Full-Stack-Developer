[
    {
        "id": 2773,
        "date": "2020-09-15T08:14:23",
        "date_gmt": "2020-09-15T08:14:23",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2773"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "overview-7",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/overview-7\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>Jasmine is an open-source JavaScript framework, capable of testing any kind of JavaScript application. Jasmine follows Behavior Driven Development (BDD) procedure to ensure that each line of JavaScript statement is properly unit tested. By following BDD procedure, Jasmine provides a small syntax to test the smallest unit of the entire application instead of testing it as a whole.<\/p>\n\n\n\n<h2>Why Use Jasmine?<\/h2>\n\n\n\n<p>Following are the advantages of using Jasmine over other available JavaScript testing frameworks \u2212<\/p>\n\n\n\n<ul><li>Jasmine does not depend on any other JavaScript framework.<\/li><li>Jasmine does not require any DOM.<\/li><li>All the syntax used in Jasmine framework is clean and obvious.<\/li><li>Jasmine is heavily influenced by Rspec, JS Spec, and Jspec.<\/li><li>Jasmine is an open-source framework and easily available in different versions like stand-alone, ruby gem, Node.js, etc.<\/li><\/ul>\n\n\n\n<h2>How to Use Jasmine?<\/h2>\n\n\n\n<p>Jasmine is very easy to implement in any kind of development methodology. All you need to download is the standalone library files from the official website\u00a0https:\/\/jasmine.github.io\/\u00a0and implement the same in your application.<\/p>\n\n\n\n<p>The detailed environment setup will be described in the next chapter named \u201cEnvironment setup\u201d. Once you successfully download and unzip the zip file, then you will find the following sub-folders inside that zip file.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/zip_file.jpg\" alt=\"Zip File\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine is an open-source JavaScript framework, capable of testing any kind of JavaScript application. Jasmine follows Behavior Driven Development (BDD) procedure to ensure that each line of JavaScript statement is properly unit tested. By following BDD procedure, Jasmine provides a small syntax to test the smallest unit of the entire application instead of testing it [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2773"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2773"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2773\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2778,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2773\/revisions\/2778"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2773"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2773"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2773"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2777,
        "date": "2020-09-15T08:14:51",
        "date_gmt": "2020-09-15T08:14:51",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2777"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "environment-setup-7",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/environment-setup-7\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will discuss the step-by-step procedure of how to set up a Jasmine based BDD testing application.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212 Go to the official website of jasmine\u00a0https:\/\/jasmine.github.io\/<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/official_site.jpg\" alt=\"Official Site\"\/><\/figure>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Click on any of the version link. It is preferable to use the most recent version that is \u201cEdge\u201d. You will be redirected to the homepage of the selected version.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/homepage.jpg\" alt=\"Home Page\"\/><\/figure>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212 Go to the Download section of the homepage and click on the standalone release page.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/download_section.jpg\" alt=\"Download Section\"\/><\/figure>\n\n\n\n<p><strong>Step 4<\/strong>&nbsp;\u2212 Once you are redirected to github release page, download the Zip file from there.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/release_page.jpg\" alt=\"Release Page\"\/><\/figure>\n\n\n\n<p><strong>Step 5<\/strong>&nbsp;\u2212 Unzip the downloaded jasmine-standalone-2.4.1 folder. You will see the following folder structure.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/standalone.jpg\" alt=\"Standalone\"\/><\/figure>\n\n\n\n<p><strong>Step 6<\/strong>&nbsp;\u2212 Now Create a web application project in your favorite IDE and add this downloaded library files into the application. Here, we have used netbeans IDE. Following is the Directory structure of our application after adding Jasmine framework.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/project.jpg\" alt=\"Project\"\/><\/figure>\n\n\n\n<p>Our environment setup is done. Now our application is ready to be tested by Jasmine framework.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will discuss the step-by-step procedure of how to set up a Jasmine based BDD testing application. Step 1\u00a0\u2212 Go to the official website of jasmine\u00a0https:\/\/jasmine.github.io\/ Step 2&nbsp;\u2212 Click on any of the version link. It is preferable to use the most recent version that is \u201cEdge\u201d. You will be redirected to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2777"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2777"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2777\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2779,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2777\/revisions\/2779"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2777"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2777"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2777"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2774,
        "date": "2020-09-15T08:16:32",
        "date_gmt": "2020-09-15T08:16:32",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2774"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "writing-text-execution",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/writing-text-execution\/",
        "title": {
            "rendered": "Writing Text &#038; Execution"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will create a&nbsp;<strong>hello world app<\/strong>&nbsp;which will test our&nbsp;<strong>\u201chelloworld.js\u201d<\/strong>&nbsp;file. Before developing the hello world app, go back to the previous chapter and make sure that your environment is ready to be tested using Jasmine.<\/p>\n\n\n\n<p><strong>Step 1 \u2212 Create a Web application in your IDE<\/strong><\/p>\n\n\n\n<p>Here we are using NetBeans 8.1 to develop our hello world app in Jasmine. In NetBeans, go to File \u2192 New Project \u2192 Html5\/JS application and create a project. After creating the project, the project directory should look like the following screenshot. We named our project as&nbsp;<strong>Jasmine_Demo<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/demo.jpg\" alt=\"Demo\"\/><\/figure>\n\n\n\n<p><strong>Step 2 \u2212 Include the Jasmine lib file into the application<\/strong><\/p>\n\n\n\n<p>After creating the demo project all you need to do is include the unzip folder of Jasmine library in the Unit Tests folder of the created application. After adding all the library files to our application folder, the structure of our project will look like as shown in the following screenshot.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/project_structure.jpg\" alt=\"Project Structure\"\/><\/figure>\n\n\n\n<p>Files given under&nbsp;<strong>spec<\/strong>&nbsp;and&nbsp;<strong>src<\/strong>&nbsp;folders are demo files provided by the Jasmine team. Delete these files as we are going to create our own test file and test case. While deleting those JavaScript file, we need to delete the reference of those files inside our output html file that is&nbsp;<strong>SpecRunner.html<\/strong>.<\/p>\n\n\n\n<p>Following is the screenshot of SpecRunner.html file where the reference of different JavaScript files inside&nbsp;<strong>spec<\/strong>&nbsp;and&nbsp;<strong>src<\/strong>&nbsp;will be deleted.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/specrunner_html_file.jpg\" alt=\"SpecRunner Html File\"\/><\/figure>\n\n\n\n<p><strong>Step 3 \u2212 Create a JavaScript file<\/strong><\/p>\n\n\n\n<p>In this step, we will create a JavaScript file named\u00a0<strong>helloworld.js<\/strong>\u00a0under\u00a0<strong>src<\/strong>\u00a0folder. This is the file which we will test through Jasmine. After creating a JavaScript file append the following set of code inside the file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*         \r\n* This is the JavaScript file that need to be tested through jasmine   \r\n* Below is the helloworld function that will return 'Hello World' \r\n*            \r\n*\/    \r\n\r\nvar helloworld = function() {   \r\n   return 'Hello World'; \r\n}; <\/code><\/pre>\n\n\n\n<p><strong>Step 4 \u2212 Create a test case<\/strong><\/p>\n\n\n\n<p>In this step, we will create another JavaScript file which will contain the test case for the above-mentioned JavaScript file. Go ahead and create a JavaScript file under \u201cSpec\u201d folder and name it as\u00a0<strong>\u201cHelloWorldsSpec.js\u201d<\/strong>. Add the following line of code into this\u00a0<strong>js<\/strong>\u00a0file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*            \r\n* This is the file which will call our java script file that need to be tested. \r\n* Each describe block is equivalent to one test case    \r\n*     \r\n*\/    \r\n\r\ndescribe(\"Hello World\", function() { \r\n   \r\n   it(\"should Return Hello world\",function() { \r\n      expect(helloworld()).toEqual('Hello World'); \r\n   }); \r\n\r\n});<\/code><\/pre>\n\n\n\n<p><strong>Step 5 \u2212 Add reference to the output file<\/strong><\/p>\n\n\n\n<p>We successfully created our own file to be tested and the corresponding test case. We kept it under two different folders. In this step, we will modify\u00a0<strong>\u201cSpecRunner.html\u201d<\/strong>\u00a0to include the reference of these two newly created file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \r\n    \r\n&lt;html>    \r\n   &lt;head>    \r\n      &lt;meta charset = \"utf-8\"> \r\n    \r\n      &lt;title>Jasmine Spec Runner v2.4.1&lt;\/title>  \r\n\t\t\r\n      &lt;link rel = \"shortcut icon\" type = \"image\/png\" href = \r\n      \"lib\/jasmine2.4.1\/jasmine_favicon.png\">  \r\n      &lt;link rel = \"stylesheet\" href = \"lib\/jasmine-2.4.1\/jasmine.css\"> \r\n\t\t\r\n      &lt;script src = \"lib\/jasmine-2.4.1\/jasmine.js\">&lt;\/script>\r\n      &lt;script src = \"lib\/jasmine-2.4.1\/jasmine-html.js\">&lt;\/script>\r\n      &lt;script src = \"lib\/jasmine-2.4.1\/boot.js\">&lt;\/script> \r\n\r\n      &lt;!--Lines to be deleted  \r\n      &lt;script src = \"src\/Player.js\">&lt;\/script> \r\n      &lt;script src = \"src\/Song.js\">&lt;\/script> \r\n      &lt;script src = \"spec\/SpecHelper.js\">&lt;\/script>    \r\n      &lt;script src = \"spec\/PlayerSpec.js\">&lt;\/script> --> \r\n\r\n      &lt;!--adding the reference of our newly created file ---> \r\n\r\n      &lt;script src = \"src\/helloworld.js\">&lt;\/script> \r\n      &lt;script src = \"spec\/HelloWorldsSpec.js\">&lt;\/script> \r\n   &lt;\/head>   \r\n\r\n   &lt;body>   \r\n   &lt;\/body>   \r\n\r\n&lt;\/html><\/code><\/pre>\n\n\n\n<p><strong>Step 6 \u2212 Execute by running SpecRunner.html<\/strong><\/p>\n\n\n\n<p>This is the final step of our application development. Run SpecRunner.html in any of your favorite browser. The following screenshot will appear as a result. The green screen indicates success, whereas red indicates failure in test case.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/result.jpg\" alt=\"Result\"\/><\/figure>\n\n\n\n<p><strong>Step 7 \u2212 Understand the failure case<\/strong><\/p>\n\n\n\n<p>Till now we have seen the\u00a0<strong>success<\/strong>\u00a0test case of the hello world application. Now let us see what if something goes wrong and the test fails. To implement a failure case we need to write a failure test case. To do the same, we are going to modify the\u00a0<strong>helloworld.js<\/strong>\u00a0file using the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var helloworld = function () { \r\n   return ''; \r\n};  <\/code><\/pre>\n\n\n\n<p>The above code is definitely going to fail because our spec file is not getting the expected string as an output of the&nbsp;<strong>helloworld()<\/strong>. The following screenshot of the&nbsp;<strong>specRunner.html<\/strong>&nbsp;file depicts that there is an error with its red indicator.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/error.jpg\" alt=\"Error\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will create a&nbsp;hello world app&nbsp;which will test our&nbsp;\u201chelloworld.js\u201d&nbsp;file. Before developing the hello world app, go back to the previous chapter and make sure that your environment is ready to be tested using Jasmine. Step 1 \u2212 Create a Web application in your IDE Here we are using NetBeans 8.1 to develop [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2774"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2774"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2774\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2780,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2774\/revisions\/2780"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2774"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2774"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2774"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2772,
        "date": "2020-09-15T08:18:50",
        "date_gmt": "2020-09-15T08:18:50",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2772"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "bdd-architecture",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/bdd-architecture\/",
        "title": {
            "rendered": "BDD Architecture"
        },
        "content": {
            "rendered": "\n<p>Jasmine follows the Behavioral Driven Development (BDD) framework. Before learning the working principle of Jasmine, let us know what is the BDD framework.<\/p>\n\n\n\n<p>The following flowchart depicts the different phases of BDD framework.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/bdd_framework.jpg\" alt=\"BDD Framework\"\/><\/figure>\n\n\n\n<p><strong>Step 1 \u2212 Start<\/strong><\/p>\n\n\n\n<p>In this phase, we will make our environment ready for Jasmine application.<\/p>\n\n\n\n<p><strong>Step 2 \u2212 Write a failing test<\/strong><\/p>\n\n\n\n<p>In this step, we will write our first ever test case. It is obvious that this test is going to fail because there is no such file or function to be tested.<\/p>\n\n\n\n<p><strong>Step 3 \u2212 Write a code to make it pass<\/strong><\/p>\n\n\n\n<p>In this phase, we will prepare our JavaScript file or function that needs to be tested. This phase is crucial as we need to make sure that all the test cases we had prepared in the early stage will be successful.<\/p>\n\n\n\n<p><strong>Step 4 \u2212 Refactor<\/strong><\/p>\n\n\n\n<p>Refactor is a very important phase of BDD model where we need to prepare as many test cases as we can for that particular application or function.<\/p>\n\n\n\n<p><strong>Step 5 \u2212 Stop<\/strong><\/p>\n\n\n\n<p>If everything is going well then your application must be ready and up. So we can consider this step as an end of our BDD application.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>We have now gathered some knowledge about the working principle of BDD framework. Let us see how Jasmine follows this BDD framework in the line of JavaScript testing.<\/p>\n\n\n\n<p>As the screenshot depicts we need to test Abc.js using Jasmine framework.&nbsp;<strong>SpecRunner.html<\/strong>&nbsp;is the output file that will take&nbsp;<strong>Spec.js(Test case file ), Abc.js(file to be tested)<\/strong>, LIB as an input and run all the test cases present in the spec file and render the result into the browser.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/working_principle.jpg\" alt=\"Working Principle\"\/><\/figure>\n\n\n\n<p><strong>Lib<\/strong>&nbsp;\u2212 These are the inbuilt JavaScript files that will be helpful to test different functions and other JavaScript files used in our project.<\/p>\n\n\n\n<p><strong>Spec.js(Test case file)<\/strong>&nbsp;\u2212 This is the JavaScript file that contains all the test cases which is required to test any JavaScript function or file. In the BDD methodology, we are going to write the test first, hence this is the file that needs to be updated first. Definitely this is going to be fail as there is no such file or function present in our project that can be tested. This file can be refactored unlimited times until all the functionalities are tested.<\/p>\n\n\n\n<p><strong>Abc.js(File to be tested)<\/strong>&nbsp;\u2212 This is the file that contains your functionalities which will be unit tested using Spec.js and Lib file.<\/p>\n\n\n\n<p><strong>SpecRunner.html<\/strong>&nbsp;\u2212 SpecRunner.html is a normal html file which will render the output of the unit test with the help of embedded JavaScript codes in it.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine follows the Behavioral Driven Development (BDD) framework. Before learning the working principle of Jasmine, let us know what is the BDD framework. The following flowchart depicts the different phases of BDD framework. Step 1 \u2212 Start In this phase, we will make our environment ready for Jasmine application. Step 2 \u2212 Write a failing [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2772"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2772"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2772\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2781,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2772\/revisions\/2781"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2772"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2772"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2772"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2775,
        "date": "2020-09-15T08:32:16",
        "date_gmt": "2020-09-15T08:32:16",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2775"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "building-blocks-of-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/building-blocks-of-test\/",
        "title": {
            "rendered": "Building Blocks of Test"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will discuss the building blocks of test by Jasmine.<\/p>\n\n\n\n<h2>Suite Block<\/h2>\n\n\n\n<p>Jasmine is a testing framework for JavaScript.&nbsp;<strong>Suite<\/strong>&nbsp;is the basic building block of Jasmine framework. The collection of similar type test cases written for a specific file or function is known as one suite. It contains two other blocks, one is&nbsp;<strong>\u201cDescribe()\u201d<\/strong>&nbsp;and another one is&nbsp;<strong>\u201cIt()\u201d<\/strong>.<\/p>\n\n\n\n<p>One Suite block can have only two parameters, one&nbsp;<strong>\u201cname of that suite\u201d<\/strong>&nbsp;and another&nbsp;<strong>\u201cFunction declaration\u201d<\/strong>&nbsp;that actually makes a call to our unit functionality that is to be tested.<\/p>\n\n\n\n<p>In the following example, we will create a suite that will unit test add function in&nbsp;<strong>add.js<\/strong>&nbsp;file. In this example, we have our JS file named&nbsp;<strong>\u201ccalculator.js\u201d<\/strong>&nbsp;which will be tested through Jasmine, and the corresponding Jasmine spec file is&nbsp;<strong>\u201cCalCulatorSpec.js\u201d<\/strong>.<\/p>\n\n\n\n<h3>Calculator.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>window.Calculator = { \r\n   \r\n   currentVal:0,  \r\n   varAfterEachExmaple:0, \r\n   \r\n   add:function (num1) { \r\n      this.currentVal += num1; \r\n      return this.currentVal;    \r\n   },     \r\n   \r\n   addAny:function () {    \r\n      var sum = this.currentVal; \r\n\t\t\r\n      for(var i = 0; i &lt; arguments.length; i++) { \r\n         sum += arguments&#91;i]; \r\n      } \r\n      \r\n      this.currentVal = sum; \r\n      Return  this.currentVal; \r\n   }, \r\n};<\/code><\/pre>\n\n\n\n<h3>CalCulatorSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"calculator\",function() { \r\n   \r\n   \/\/test case: 1  \r\n   it(\"Should retain the current value of all time\", function () {\r\n      expect(Calculator.currentVal).toBeDefined();\r\n      expect(Calculator.currentVal).toEqual(0);  \r\n   }); \r\n   \r\n   \/\/test case: 2  \r\n   it(\"should add numbers\",function() {\r\n      expect(Calculator.add(5)).toEqual(5); \r\n      expect(Calculator.add(5)).toEqual(10);  \r\n   });         \r\n    \r\n   \/\/test case :3   \r\n   it(\"Should add any number of numbers\",function () {\r\n      expect(Calculator.addAny(1,2,3)).toEqual(6); \r\n   }); \r\n}); <\/code><\/pre>\n\n\n\n<p>In the above function, we have declared two functions. Function&nbsp;<strong>add<\/strong>&nbsp;will add two numbers given as an argument to that function and another function&nbsp;<strong>addAny<\/strong>&nbsp;should add any numbers given as an argument.<\/p>\n\n\n\n<p>After creating this file, we need to add this file in&nbsp;<strong>\u201cSpecRunner.html\u201d<\/strong>&nbsp;inside the head section. On successful compilation, this will generate the following output as a result.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/calculatorspec.jpg\" alt=\"Calculatorspec\"\/><\/figure>\n\n\n\n<h2>Nested Suites Block<\/h2>\n\n\n\n<p>Suite block can have many suite blocks inside another suite block. The following example will show you how we can create a different suite block inside another suite block. We will create two JavaScript files, one named as&nbsp;<strong>\u201cNestedSpec.js\u201d<\/strong>&nbsp;and another named as&nbsp;<strong>\u201cnested.js\u201d<\/strong>.<\/p>\n\n\n\n<h3>NestedSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"nested\",function() { \r\n   \r\n   \/\/ Starting of first suite block  \r\n   \/\/ First block    \r\n\t\r\n   describe(\"Retaining values \",function () {\r\n   \r\n      \/\/test case:1    \r\n      it (\"Should retain the current value of all time\", function () { \r\n         expect(nested.currentVal).toBeDefined();   \r\n         expect(nested.currentVal).toEqual(0);   \r\n      });    \r\n   }); \/\/end of the suite block   \r\n\r\n   \/\/second suite block \r\n   describe(\"Adding single number \",function () {     \r\n   \r\n      \/\/test case:2 \r\n      it(\"should add numbers\",function() { \r\n         expect(nested.add(5)).toEqual(5); \r\n         expect(nested.add(5)).toEqual(10); \r\n      });         \r\n   }); \/\/end of the suite block  \r\n\r\n   \/\/third suite block \r\n   describe(\"Adding Different Numbers\",function () {  \r\n   \r\n      \/\/test case:3 \r\n      it(\"Should add any number of numbers\",function() {  \r\n         expect(nested.addAny(1,2,3)).toEqual(6);  \r\n      });    \r\n   }); \/\/end of the suite block \r\n});<\/code><\/pre>\n\n\n\n<h3>Nested.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>window.nested = { \r\n   \r\n   currentVal: 0,\r\n\t\r\n   add:function (num1) {  \r\n      this.currentVal += num1;     \r\n      return this.currentVal;    \r\n   },\r\n   \r\n   addAny:function () { \r\n      Var sum = this.currentVal; \r\n\t\t\r\n      for(var i = 0;i &lt; arguments.length; i++) { \r\n         sum += arguments&#91;i]; \r\n      } \r\n\t\t\r\n      this.currentVal = sum; \r\n      return this.currentVal;    \r\n   }  \r\n};<\/code><\/pre>\n\n\n\n<p>The above piece of code will generate the following output as a result of running&nbsp;<strong>specRunner.html<\/strong>&nbsp;file after adding this file inside the head section.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/specrunner_result.jpg\" alt=\"SpecRunner Result\"\/><\/figure>\n\n\n\n<h2>Describe Block<\/h2>\n\n\n\n<p>As discussed earlier describe block is a part of Suite block. Like Suite block, it contains two parameters, one\u00a0<strong>\u201cthe name of the describe block\u201d<\/strong>\u00a0and another\u00a0<strong>\u201cfunction declaration\u201d<\/strong>. In our upcoming examples, we will go through many describe blocks to understand the working flow of Jasmine suite block. Following is an example of a complete describe block.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Adding single number \",function () { \r\n   \r\n   it(\"should add numbers\",function() { \r\n      expect(nested.add(5)).toEqual(5); \r\n      expect(nested.add(5)).toEqual(10); \r\n   });     \r\n}<\/code><\/pre>\n\n\n\n<h2>IT Block<\/h2>\n\n\n\n<p>Like describe block we have been introduced to IT block too. It goes within a describe block. This is the block which actually contains each unit test case. In the following code, there are pieces of\u00a0<strong>IT<\/strong>\u00a0block inside one\u00a0<strong>describe<\/strong>\u00a0block.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Adding single number \",function () { \r\n   \r\n   \/\/ test case : 1   \r\n   it(\"should add numbers\",function() {  \r\n      expect(nested.add(5)).toEqual(5); \r\n      expect(nested.add(5)).toEqual(10); \r\n   });         \r\n    \r\n   \/\/test case : 2 \r\n   it(\"should add numbers\",function() { \r\n      expect(nested.addAny(1,2,3)).toEqual(6); \r\n   });     \r\n}<\/code><\/pre>\n\n\n\n<h2>Expect Block<\/h2>\n\n\n\n<p>Jasmine&nbsp;<strong>Expect<\/strong>&nbsp;allows you to write your expectation from the required function or JavaScript file. It comes under&nbsp;<strong>IT<\/strong>&nbsp;block. One IT block can have more than one Expect block.<\/p>\n\n\n\n<p>Following is an example of Expect block. This expect block provides a wide variety of methods to unit test your JavaScript function or JavaScript file. Each of the Expect block is also known as a\u00a0<strong>matcher<\/strong>. There are two different types of matchers, one\u00a0<strong>inbuilt matcher<\/strong>\u00a0and another\u00a0<strong>user defined matchers<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Adding single number \",function () {   \r\n   \r\n   \/\/ test case : 1 \r\n   it(\"should add numbers\",function() {\r\n      expect(nested.add(5)).toEqual(5); \r\n      expect(nested.add(5)).toEqual(10);\r\n   });          \r\n   \r\n   \/\/test case : 2 \r\n   it(\"should add numbers\",function() {\r\n      expect(nested.addAny(1,2,3)).toEqual(6); \r\n   });     \r\n}<\/code><\/pre>\n\n\n\n<p>In the upcoming chapters, we will discuss various uses of different inbuilt methods of the Expect block.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will discuss the building blocks of test by Jasmine. Suite Block Jasmine is a testing framework for JavaScript.&nbsp;Suite&nbsp;is the basic building block of Jasmine framework. The collection of similar type test cases written for a specific file or function is known as one suite. It contains two other blocks, one is&nbsp;\u201cDescribe()\u201d&nbsp;and [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2775"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2775"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2775\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2782,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2775\/revisions\/2782"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2775"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2775"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2775"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2776,
        "date": "2020-09-15T08:33:06",
        "date_gmt": "2020-09-15T08:33:06",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2776"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "matchers",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/matchers\/",
        "title": {
            "rendered": "Matchers"
        },
        "content": {
            "rendered": "\n<p>Jasmine is a testing framework, hence it always aims to compare the result of the JavaScript file or function with the expected result. Matcher works similarly in Jasmine framework.<\/p>\n\n\n\n<p><strong>Matchers<\/strong>&nbsp;are the JavaScript function that does a Boolean comparison between an actual output and an expected output. There are two type of matchers&nbsp;<strong>Inbuilt matcher<\/strong>&nbsp;and&nbsp;<strong>Custom matchers<\/strong>.<\/p>\n\n\n\n<h2>Inbuilt Matcher<\/h2>\n\n\n\n<p>The matchers which are inbuilt in the Jasmine framework are called&nbsp;<strong>inbuilt matcher<\/strong>. The user can easily use it&nbsp;<strong>implicitly<\/strong>.<\/p>\n\n\n\n<p>The following example shows how Inbuilt Matcher works in Jasmine framework. We have already used some matchers in the previous chapter.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Adding single number \", function () {  \r\n\r\n   \/\/example of toEqual() matcher    \r\n   it(\"should add numbers\",function() { \r\n      expect(nested.add(5)).toEqual(5); \r\n      expect(nested.add(5)).toEqual(10); \r\n   });   \r\n   \r\n   it(\"should add numbers\",function() { \r\n      expect(nested.addAny(1,2,3)).toEqual(6); \r\n   });\r\n}<\/code><\/pre>\n\n\n\n<p>In the example toEqual() is the inbuilt matcher which will compare the result of the&nbsp;<strong>add()<\/strong>&nbsp;and&nbsp;<strong>addAny()<\/strong>&nbsp;methods with the arguments passed to&nbsp;<strong>toEqual()<\/strong>&nbsp;matchers.<\/p>\n\n\n\n<h2>Custom Matchers<\/h2>\n\n\n\n<p>The matchers which are not present in the inbuilt system library of Jasmine is called as\u00a0<strong>custom matcher<\/strong>. Custom matcher needs to be defined\u00a0<strong>explicitly()<\/strong>. In the following example, we will see how the custom matcher works.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe('This custom matcher example', function() {\r\n   \r\n   beforeEach(function() { \r\n      \/\/ We should add custom matched in beforeEach() function. \r\n      jasmine.addMatchers ({ \r\n         validateAge: function() { \r\n            Return {    \r\n               compare: function(actual,expected) {\r\n                  var result = {}; \r\n                  result.pass = (actual > = 13 &amp;&amp; actual &lt; = 19);\r\n                  result.message = 'sorry u are not a teen ';\r\n                  return result; \r\n               }   \r\n            };   \r\n         }    \r\n      });    \r\n   }); \r\n    \r\n   it('Lets see whether u are teen or not', function() { \r\n      var myAge = 14; \r\n      expect(myAge).validateAge();         \r\n   });   \r\n    \r\n   it('Lets see whether u are teen or not ', function() { \r\n      var yourAge = 18;\r\n      expect(yourAge).validateAge();  \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>In the above example,&nbsp;<strong>validateAge()<\/strong>&nbsp;works as a matcher which is actually validating your age with some range. In this example, validateAge() works as a custom matcher. Add this JS file into&nbsp;<strong>SpecRunner.html<\/strong>&nbsp;and run the same. It will generate the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/validateage.jpg\" alt=\"ValidateAge\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine is a testing framework, hence it always aims to compare the result of the JavaScript file or function with the expected result. Matcher works similarly in Jasmine framework. Matchers&nbsp;are the JavaScript function that does a Boolean comparison between an actual output and an expected output. There are two type of matchers&nbsp;Inbuilt matcher&nbsp;and&nbsp;Custom matchers. Inbuilt [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2776"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2776"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2776\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2783,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2776\/revisions\/2783"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2776"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2776"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2776"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2771,
        "date": "2020-09-15T08:34:03",
        "date_gmt": "2020-09-15T08:34:03",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2771"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "skip-block",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/skip-block\/",
        "title": {
            "rendered": "Skip Block"
        },
        "content": {
            "rendered": "\n<p>Jasmine also allows the developers to skip one or more than one test cases. These techniques can be applied at the&nbsp;<strong>Spec level<\/strong>&nbsp;or the&nbsp;<strong>Suite level<\/strong>. Depending on the level of application, this block can be called as a&nbsp;<strong>Skipping Spec<\/strong>&nbsp;and&nbsp;<strong>Skipping Suite<\/strong>&nbsp;respectively.<\/p>\n\n\n\n<p>In the following example, we will learn how to skip a specific&nbsp;<strong>Spec<\/strong>&nbsp;or&nbsp;<strong>Suite<\/strong>&nbsp;using&nbsp;<strong>\u201cx\u201d<\/strong>&nbsp;character.<\/p>\n\n\n\n<h2>Skipping Spec<\/h2>\n\n\n\n<p>We will modify the previous example using\u00a0<strong>\u201cx\u201d<\/strong>\u00a0just before\u00a0<strong>it<\/strong>\u00a0statement.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe('This custom matcher example ', function() { \r\n   \r\n   beforeEach(function() { \r\n      \/\/ We should add custom matched in beforeEach() function. \r\n      \r\n      jasmine.addMatchers({ \r\n         validateAge: function() { \r\n            return { \r\n               compare: function(actual,expected) { \r\n                 var result = {}; \r\n                 result.pass = (actual > = 13 &amp;&amp; actual &lt; = 19); \r\n                 result.message = 'sorry u are not a teen ';  \r\n                 return result; \r\n               }  \r\n            };   \r\n         }    \r\n      });    \r\n   });  \r\n    \r\n   it('Lets see whether u are teen or not', function() { \r\n      var myAge = 14; \r\n      expect(myAge).validateAge();  \r\n   });\r\n   \r\n   xit('Lets see whether u are teen or not ', function() {  \r\n      \/\/Skipping this Spec \r\n      var yourAge = 18; \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>If we run this JavaScript code, we will receive the following output as a result in the browser. Jasmine itself will notify the user that the specific&nbsp;<strong>it<\/strong>&nbsp;block is&nbsp;<strong>disabled<\/strong>&nbsp;temporarily using&nbsp;<strong>\u201cxit\u201d<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/xit_block_result.jpg\" alt=\"XIT Block Result\"\/><\/figure>\n\n\n\n<h2>Skipping Suite<\/h2>\n\n\n\n<p>In the same way, we can disable the describe block in order to implement the technique of\u00a0<strong>Skipping Suite<\/strong>. In the following example, we will learn about the process of skipping suite block.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>xdescribe('This custom matcher example ', function() {  \r\n   \r\n   \/\/Skipping the entire describe  block  \r\n   beforeEach(function() {  \r\n   \r\n      \/\/ We should add custom matched in beforeEach() function.  \r\n      jasmine.addMatchers({  \r\n         validateAge: function() {  \r\n            return {   \r\n               compare: function(actual,expected) {  \r\n                 var result = {}; \r\n                 result.pass = (actual >=13 &amp;&amp; actual&lt;=19); \r\n                 result.message ='sorry u are not a teen '; \r\n                 return result;  \r\n               }   \r\n            };   \r\n         }   \r\n      });   \r\n   });\r\n\r\n   it('Lets see whether u are teen or not', function() {  \r\n      var myAge = 14; \r\n      expect(myAge).validateAge(); \r\n   });  \r\n\r\n   it('Lets see whether u are teen or not ', function() {  \r\n      var yourAge = 18; \r\n      expect(yourAge).validateAge(); \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>The above code will generate the following screenshot as an output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/skipping_suite.jpg\" alt=\"Skipping Suite\"\/><\/figure>\n\n\n\n<p>As we can see in the message bar, it shows two spec blocks in pending status, which means these two Spec blocks is disabled using&nbsp;<strong>\u201cx\u201d<\/strong>&nbsp;character. In the upcoming chapter, we will discuss different types of Jasmine test scenarios.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine also allows the developers to skip one or more than one test cases. These techniques can be applied at the&nbsp;Spec level&nbsp;or the&nbsp;Suite level. Depending on the level of application, this block can be called as a&nbsp;Skipping Spec&nbsp;and&nbsp;Skipping Suite&nbsp;respectively. In the following example, we will learn how to skip a specific&nbsp;Spec&nbsp;or&nbsp;Suite&nbsp;using&nbsp;\u201cx\u201d&nbsp;character. Skipping Spec We will [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2771"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2771"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2771\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2784,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2771\/revisions\/2784"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2771"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2771"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2771"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2770,
        "date": "2020-09-15T08:35:45",
        "date_gmt": "2020-09-15T08:35:45",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2770"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "equality-check",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/equality-check\/",
        "title": {
            "rendered": "Equality Check"
        },
        "content": {
            "rendered": "\n<p>Jasmine provides plenty of methods which help us check the equality of any JavaScript function and file. Following are some examples to check equality conditions.<\/p>\n\n\n\n<h2>ToEqual()<\/h2>\n\n\n\n<p><strong>ToEqual()<\/strong>&nbsp;is the simplest matcher present in the inbuilt library of Jasmine. It just matches whether the result of the operation given as an argument to this method matches with the result of it or not.<\/p>\n\n\n\n<p>The following example will help you understand how this matcher works. We have two files to be tested named as&nbsp;<strong>\u201cexpectexam.js\u201d<\/strong>&nbsp;and another one through which we need to test is&nbsp;<strong>\u201cexpectSpec.js\u201d<\/strong>.<\/p>\n\n\n\n<h3>Expectexam.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>window.expectexam = {    \n   currentVal: 0,   \n};<\/code><\/pre>\n\n\n\n<h3>ExpectSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \n   \n   it(\"The Example of toEqual() method\",function () {   \n      \/\/this will check whether the value of the variable  \n      \/\/ currentVal is equal to 0 or not.  \n      expect(expectexam.currentVal).toEqual(0);  \n   });\n});<\/code><\/pre>\n\n\n\n<p>On successful execution, these pieces of code will yield the following output. Remember you need to add these files into the header section of&nbsp;<strong>specRunner.html<\/strong>&nbsp;file as directed in the earlier example.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/toequals_method.jpg\" alt=\"toEquals Method\"\/><\/figure>\n\n\n\n<h2>not.toEqual()<\/h2>\n\n\n\n<p><strong>not.toEqual()<\/strong>&nbsp;works exactly opposite to toEqual().&nbsp;<strong>not.toEqual()<\/strong>&nbsp;is used when we need to check if the value does not match with the output of any function.<\/p>\n\n\n\n<p>We will modify the above example to show how this works.<\/p>\n\n\n\n<h3>ExpectSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \n\n   it(\"The Example of toEqual() method\",function () {\n      expect(expectexam.currentVal).toEqual(0);  \n   });   \n   \n   it(\"The Example of not.toEqual() method\",function () {  \n      \/\/negation  testing expect(expectexam.currentVal).not.toEqual(5); \n   }); \n});<\/code><\/pre>\n\n\n\n<h3>Expectexam.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>window.expectexam = { \n   currentVal: 0,  \n}; <\/code><\/pre>\n\n\n\n<p>In the second expect block, we are checking whether the value of the&nbsp;<strong>currentVal<\/strong>&nbsp;is equal to 5 as the value of currentVal is zero hence our test passes and provides us with a green output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/not_equals_method.jpg\" alt=\"notEquals Method\"\/><\/figure>\n\n\n\n<h2>ToBe()<\/h2>\n\n\n\n<p><strong>toBe()<\/strong>&nbsp;matcher works in a similar way as toEqual(), however they are technically different from each other. toBe() matcher matches with the type of the object whereas&nbsp;<strong>toEqual()<\/strong>&nbsp;matches with the equivalency of the result.<\/p>\n\n\n\n<p>The following example will help you understand the working principle of the toBe() matcher. This matcher is exactly equivalent to the \u201c===\u201d operator of JavaScript whereas toEqual() is similar to the \u201c==\u201d operator of JavaScript.<\/p>\n\n\n\n<h3>ExpectSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () {  \n\n   it(\"The Example of toBe() method\",function () { \n      expect(expectexam.name).toBe(expectexam.name1);     \n   });\n});<\/code><\/pre>\n\n\n\n<h3>Expectexam.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>window.expectexam = {\n   currentVal: 0, \n   name:\"codemeals\", \n   name1:codemeals  \n};<\/code><\/pre>\n\n\n\n<p>We will slightly modify our&nbsp;<strong>expectexam<\/strong>&nbsp;JavaScript file. We added two new variables,&nbsp;<strong>name<\/strong>&nbsp;and&nbsp;<strong>name1<\/strong>. Please find the difference between these two added variables &#8211; one is of string type and another one is not a string type.<\/p>\n\n\n\n<p>Following screenshot is our test result where the red cross depicts that these two values are not equal, whereas it is expected to be equal. Hence our test fails.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/expect_exam_error.jpg\" alt=\"expectExam Error\"\/><\/figure>\n\n\n\n<p>Let us turn both the variables,&nbsp;<strong>name<\/strong>&nbsp;and&nbsp;<strong>name1<\/strong>&nbsp;as String type variables and run the same&nbsp;<strong>SpecRunner.html<\/strong>&nbsp;again. Now check the output. It will prove that toBe() not only matches with the equivalency of the variable, but it also matches with the data type or object type of the variable.<\/p>\n\n\n\n<h2>not.toBe()<\/h2>\n\n\n\n<p>As seen earlier, not is nothing but a negation of the toBe() method. It fails when the expected result matches with the actual output of the function or JavaScript file.<\/p>\n\n\n\n<p>Following is a simple example that will help you understand how not.toBe() matcher works.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \n   it(\"The Example of not.toBe() method\",function () { \n      expect(true).not.toBe(false);    \n   });\n});<\/code><\/pre>\n\n\n\n<p>Here Jasmine will try to match up true with false. As true cannot be same as false, this test case will be valid and pass through.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobe_method.jpg\" alt=\"toBe Method\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine provides plenty of methods which help us check the equality of any JavaScript function and file. Following are some examples to check equality conditions. ToEqual() ToEqual()&nbsp;is the simplest matcher present in the inbuilt library of Jasmine. It just matches whether the result of the operation given as an argument to this method matches with [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2770"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2770"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2770\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2804,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2770\/revisions\/2804"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2770"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2770"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2770"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2769,
        "date": "2020-09-15T08:37:04",
        "date_gmt": "2020-09-15T08:37:04",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2769"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "boolean-check",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/boolean-check\/",
        "title": {
            "rendered": "Boolean Check"
        },
        "content": {
            "rendered": "\n<p>Apart from equality check, Jasmine provides some methods to check Boolean conditions too. Following are the methods that help us check Boolean conditions.<\/p>\n\n\n\n<h2>ToBeTruthy()<\/h2>\n\n\n\n<p>This Boolean matcher is used in Jasmine to check whether the result is equal to true or false.<\/p>\n\n\n\n<p>The following example will help us understand the working principle of the toBeTruthy() function.<\/p>\n\n\n\n<h3>ExpectSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () {\r\n   it(\"The Example of toBeTruthy() method\",function () {   \r\n      expect(expectexam.exampleoftrueFalse(5)).toBeTruthy();    \r\n   });\r\n}); <\/code><\/pre>\n\n\n\n<h3>Expectexam.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>window.expectexam = {  \r\n   exampleoftrueFalse: function (num) {  \r\n      if(num &lt; 10)    \r\n         return true;  \r\n      else   \r\n         return false;  \r\n   },  \r\n};<\/code><\/pre>\n\n\n\n<p>As we are passing number 5, which is smaller than 10, this test case will pass and give us the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobetruthy_method.jpg\" alt=\"toBeTruthy Method\"\/><\/figure>\n\n\n\n<p>If we pass a number which is larger than 10, then this green test will change to red. In the second screenshot, you can see that on passing some value which is greater than 10, the expected test case fails and generates red output stating that \u201cExpected false to be truthy\u201d.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobetruthy_error.jpg\" alt=\"toBeTruthy Error\"\/><\/figure>\n\n\n\n<h2>toBeFalsy()<\/h2>\n\n\n\n<p>toBeFalsy() also works the same way as toBeTruthy() method. It matches the output to be false whereas toBeTruthy matches the output to be true. The following example will help you understand the basic working principles of toBeFalsy().<\/p>\n\n\n\n<h3>ExpectSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function() { \r\n   it(\"The Example of toBeTruthy() method\",function () {\r\n      expect(expectexam.exampleoftrueFalse(15)).toBeFalsy();   \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<h3>Expectexam.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>window.expectexam = {  \r\n   exampleoftrueFalse: function (num) {  \r\n      if(num &lt; 10)    \r\n         Return true;  \r\n      else   \r\n         return false; \r\n   },\r\n}; <\/code><\/pre>\n\n\n\n<p>The above code will pass the Jasmine test case as we are passing value more than 10 and expected the output to be false. Hence, the browser will show us a green sign which means it has passed.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobetruthy_method.jpg\" alt=\"toBeTruthy Method\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Apart from equality check, Jasmine provides some methods to check Boolean conditions too. Following are the methods that help us check Boolean conditions. ToBeTruthy() This Boolean matcher is used in Jasmine to check whether the result is equal to true or false. The following example will help us understand the working principle of the toBeTruthy() [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2769"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2769"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2769\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2786,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2769\/revisions\/2786"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2769"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2769"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2769"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2768,
        "date": "2020-09-15T08:38:28",
        "date_gmt": "2020-09-15T08:38:28",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2768"
        },
        "modified": "2020-12-25T19:05:57",
        "modified_gmt": "2020-12-25T19:05:57",
        "slug": "sequential-check",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/sequential-check\/",
        "title": {
            "rendered": "Sequential Check"
        },
        "content": {
            "rendered": "\n<p>Jasmine also provides different methods to provide sequentiality of the JS output. Following examples show how to implement sequential check using Jasmine.<\/p>\n\n\n\n<h2>ToContain()<\/h2>\n\n\n\n<p><strong>toContain()<\/strong>\u00a0matchers provide us the facility to check whether any element is a part of the same array or some other sequential objects. The following example will help us understand the working methodology of Jasmine toContain() method. Let&#8217;s add the following piece of code in previously created\u00a0<strong>customerMatcherSpec.js<\/strong>\u00a0file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () {  \r\n   it(\"The  Example of toContain() method\",function () { \r\n      expect(&#91;1,2, 3, 4]).toContain(3);\r\n   });\r\n}); <\/code><\/pre>\n\n\n\n<p>In the above example, we are checking whether 3 is present in that array or not. We get a green output as 3 is present in the array.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tocontain_method.jpg\" alt=\"toContain Method\"\/><\/figure>\n\n\n\n<p>In the above example, let&#8217;s change the value of 3 with 15 and run the spec again. We will get the following red screen as 15 does not belong to that array we are passing as a parameter of that function.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tocontain_error.jpg\" alt=\"toContain Error\"\/><\/figure>\n\n\n\n<h2>ToBeCloseTo()<\/h2>\n\n\n\n<p><strong>toBeCloseTo()<\/strong>\u00a0matcher matches whether the actual value is close to the expected value. In the following example, we will modify our\u00a0<strong>customerMatcherSpec.js<\/strong>\u00a0file and see how this actually works.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\", function () {  \r\n   it(\"Example of toBeCloseTo()\", function () { \r\n      expect(12.34).toBeCloseTo(12.3, 1);    \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>In the above Describe block, we are checking whether the actual result \u201c12.3\u201d is closer to the expected output \u201c12.34\u201d or not. As this satisfies our requirement, we will have the following green screenshot as our output. The second parameter of this method is the count of the decimal place to be compared with.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobecloseto_method.jpg\" alt=\"toBeCloseTo Method\"\/><\/figure>\n\n\n\n<p>In the above code, let&#8217;s modify the expected value to 15 and run\u00a0<strong>SpecRunner.html<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \r\n   it(\"Example of  toBeCloseTo()\", function () { \r\n      expect(12.34).toBeCloseTo(15, 1);\r\n   });\r\n}); <\/code><\/pre>\n\n\n\n<p>In this scenario, 15 is nowhere close to 15, hence it will generate an error and present a red screenshot as an error.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobecloseto_error.jpg\" alt=\"toBeCloseTo Error\"\/><\/figure>\n\n\n\n<h2>ToMatch()<\/h2>\n\n\n\n<p><strong>ToMatch()<\/strong>\u00a0matcher works on String type variable. It is helpful to find whether a specific String is present in the expected output or not. Following is what our\u00a0<strong>customerMatcherSpec.js<\/strong>\u00a0looks like.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \r\n   it(\"Example of toMatch()\", function () { \r\n      expect(\"Jasmine tutorial in tutorials.com\").toMatch(\/com\/);   \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>This piece of code will test whether&nbsp;<strong>\u201ccom\u201d<\/strong>&nbsp;is present in the expected String given. As&nbsp;<strong>com<\/strong>&nbsp;exists in the string, it will generate a green screenshot and pass the test condition.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tomatch_method.jpg\" alt=\"toMatch Method\"\/><\/figure>\n\n\n\n<p>Now let us change the output to some other string, which is not present in the expected value. Then our\u00a0<strong>customerMatcherSpec.js<\/strong>\u00a0will look like the following.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods  of Expect Block\",function () { \r\n   it(\"Example of toMatch()\", function () { \r\n      expect(\"Jasmine tutorial in tutorials.com\").toMatch(\/XYZ\/);\r\n   });\r\n}); <\/code><\/pre>\n\n\n\n<p>The above code will find \u201cXYZ\u201d string in the expected value. As it does not exist in the expected string, it will throw an error and the output screen will be red accordingly.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tomatch_error.jpg\" alt=\"toMatch Error\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine also provides different methods to provide sequentiality of the JS output. Following examples show how to implement sequential check using Jasmine. ToContain() toContain()\u00a0matchers provide us the facility to check whether any element is a part of the same array or some other sequential objects. The following example will help us understand the working methodology [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2768"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2768"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2768\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2787,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2768\/revisions\/2787"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2768"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2768"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2768"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2767,
        "date": "2020-09-15T08:40:19",
        "date_gmt": "2020-09-15T08:40:19",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2767"
        },
        "modified": "2020-12-25T19:05:56",
        "modified_gmt": "2020-12-25T19:05:56",
        "slug": "null-check",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/null-check\/",
        "title": {
            "rendered": "Null Check"
        },
        "content": {
            "rendered": "\n<p>Jasmine provides a different variety of method to check whether the actual output is Null, defined or undefined. In this chapter, we will learn how to implement different Jasmine methods to check the above-mentioned scenarios.<\/p>\n\n\n\n<h2>ToBedefined()<\/h2>\n\n\n\n<p>This matcher is used to check whether any variable in the code is predefined or not. Let us modify our&nbsp;<strong>customerMatcherSpec.js<\/strong>&nbsp;file according to this example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>currentVal = 0;  \n\ndescribe(\"Different Methods  of Expect Block\",function () { \n   it(\"Example of  toBeDefined\", function () {\n      expect(currentVal).toBeDefined();\n   });\n});<\/code><\/pre>\n\n\n\n<p>In the above code, toBeDefined() will check whether the variable&nbsp;<strong>currentVal&nbsp;<\/strong>is defined in the system or not. As currentVal is defined to 0 in the beginning, this test will pass and generate a green screenshot as an output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobedefined_method.jpg\" alt=\"toBeDefined Method\"\/><\/figure>\n\n\n\n<p>Again in the above example, let us remove the first line, where we actually define \u201ccurrentVal\u201d and run again. Then we will get a red screen, which means the test actually fails because we are expecting an undefined value to be defined. The following screenshot will be the output file.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobedefined_error.jpg\" alt=\"toBeDefined Error\"\/><\/figure>\n\n\n\n<h2>ToBeUndefined()<\/h2>\n\n\n\n<p>This matcher helps to check whether any variable is previously undefined or not, basically it works simply opposite to the previous matcher that is toBeDefined. In the following example, we will learn how to use this matcher. Let us modify our Spec file, i.e.&nbsp;<strong>customerMatcher.js<\/strong>&nbsp;file with the following entry.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \n   it(\"Example of toBeUndefine()\", function () { \n      var undefineValue; \n      expect(undefineValue).toBeUndefined(); \n   });\n}); <\/code><\/pre>\n\n\n\n<p>In the above section, we will verify whether our variable&nbsp;<strong>\u201cundefineValue\u201d<\/strong>&nbsp;is actually undefined or not. After adding this file into the SpecRunner, we will receive a green color screenshot as an output, which tells us that this value is actually not defined previously.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobeundefine_method.jpg\" alt=\"toBeUndefine Method\"\/><\/figure>\n\n\n\n<p>Again let us define the variable with some predefined value and see whether it will throw an error or not. The new&nbsp;<strong>customerMatcher.js<\/strong>&nbsp;looks like the following.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () {\n   it(\"Example oftoBeUndefine()\", function () { \n      var undefineValue = 0;\n      expect(undefineValue).toBeUndefined();\n   });\n});<\/code><\/pre>\n\n\n\n<p>The above piece of code will throw an error and generate a red color screenshot because we have already defined the&nbsp;<strong>\u201cundefineValue\u201d<\/strong>&nbsp;value to&nbsp;<strong>\u201c0\u201d<\/strong>&nbsp;and expecting it to be not defined. The following screenshot will be generated on run&nbsp;<strong>SpecRunner.html<\/strong>&nbsp;file.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobeundefine_error.jpg\" alt=\"toBeUndefine Error\"\/><\/figure>\n\n\n\n<h2>toBeNull()<\/h2>\n\n\n\n<p>As the name signifies this matcher helps to check null values. Let us again modify our&nbsp;<strong>customerMatcherSpec.js<\/strong>&nbsp;file with the following piece of code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \n   var value = null; \n\t\n   it(\"Example of toBeNull()\", function () { \n      expect(value).toBeNull();\n   });\n}); <\/code><\/pre>\n\n\n\n<p>In the above code, we have mentioned one variable&nbsp;<strong>\u201dvalue\u201d<\/strong>&nbsp;and we have explicitly mentioned this value as null. In the expect block, the toBeNull() matcher will check this value and give us the result accordingly. Following is the output of the above-mentioned code when it is run through the help of the SpecRunner.html file.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobenull_method.jpg\" alt=\"toBeNull Method\"\/><\/figure>\n\n\n\n<p>Now let us test by providing some defined value other than null. Please modify the&nbsp;<strong>customerMatcher.js<\/strong>&nbsp;file accordingly.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () {\n   var value = \"Codemeals\"; \n\t\n   it(\"Example of  toBeNull()\", function () { \n      expect(value).toBeNull();\n   });\n}); <\/code><\/pre>\n\n\n\n<p>In the above example, we have modified the variable value with \u201cCodemeals\u201d which is not a null value. Hence, this test will fail and produce a red screenshot as an output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobenull_error.jpg\" alt=\"toBeNull Error\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine provides a different variety of method to check whether the actual output is Null, defined or undefined. In this chapter, we will learn how to implement different Jasmine methods to check the above-mentioned scenarios. ToBedefined() This matcher is used to check whether any variable in the code is predefined or not. Let us modify [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2767"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2767"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2767\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2805,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2767\/revisions\/2805"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2767"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2767"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2767"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2766,
        "date": "2020-09-15T09:34:11",
        "date_gmt": "2020-09-15T09:34:11",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2766"
        },
        "modified": "2020-12-25T19:05:56",
        "modified_gmt": "2020-12-25T19:05:56",
        "slug": "inequality-check",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/inequality-check\/",
        "title": {
            "rendered": "Inequality Check"
        },
        "content": {
            "rendered": "\n<p>Till now, we have discussed different methods in Jasmine which help us test different scenarios based on our requirements. In this chapter, we will learn about different matchers that will help us check the inequality condition in JS file. Following are the matchers used for this purpose.<\/p>\n\n\n\n<h2>ToBeGreaterThan()<\/h2>\n\n\n\n<p>As the name suggests this matcher helps to check greater than condition. Let us modify our\u00a0<strong>customerMatcher.js<\/strong>\u00a0using the following piece of code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \r\n   var exp = 8;  \r\n\t\r\n   it(\"Example of  toBeGreaterThan()\", function () {\r\n      expect(exp).toBeGreaterThan(5);\r\n   });\r\n}); <\/code><\/pre>\n\n\n\n<p>In the above piece of code, we are expecting that the value of the variable&nbsp;<strong>\u201cexp\u201d<\/strong>&nbsp;will be greater than 5. Now as the value of the variable \u201cexp\u201d is \u201c8\u201d which is greater than \u201c5\u201d, this piece of code will generate a green screenshot.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/greaterthan_method.jpg\" alt=\"Greaterthan Method\"\/><\/figure>\n\n\n\n<p>Now again let us modify the value of the variable to \u201c4\u201d and make this test fail. To do that we need to modify the\u00a0<strong>js<\/strong>\u00a0file using the following piece of code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () {  \r\n   var exp = 4;  \r\n\t\r\n   it (\"Example of toBeGreaterThan()\", function () {\r\n      expect(exp).toBeGreaterThan(5); \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>This code will fail because value 4 cannot be greater than 5. Hence it will produce the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/greaterthan_error.jpg\" alt=\"Greaterthan Error\"\/><\/figure>\n\n\n\n<h2>ToBeLessThan()<\/h2>\n\n\n\n<p>This matcher helps to check the less than condition of the test scenario. It behaves exactly opposite to that of toBeGreaterThan() matcher. Now let us see how this matcher works. Let us modify the\u00a0<strong>customerMatcher.js<\/strong>\u00a0file accordingly.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methodsof Expect Block\",function () { \r\n   var exp = 4;  \r\n\t\r\n   it(\"Example of toBeLessThan()\", function() { \r\n      expect(exp).toBeLessThan(5);    \r\n   });\r\n}); <\/code><\/pre>\n\n\n\n<p>Like the previous example, we have one variable having value as \u201c4\u201d. In this piece of code, we are checking whether the value of this variable is less than 5 or not. This piece of code will generate the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/lessthan_method.jpg\" alt=\"Lessthan Method\"\/><\/figure>\n\n\n\n<p>Now to make this fail, we need to assign some bigger number to the variable exp. Let us do that and test the application. We will assign 25 as the value to the&nbsp;<strong>exp<\/strong>, which will definitely throw an error and yield the following screenshot in red.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/lessthan_error.jpg\" alt=\"Lessthan Error\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Till now, we have discussed different methods in Jasmine which help us test different scenarios based on our requirements. In this chapter, we will learn about different matchers that will help us check the inequality condition in JS file. Following are the matchers used for this purpose. ToBeGreaterThan() As the name suggests this matcher helps [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2766"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2766"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2766\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2789,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2766\/revisions\/2789"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2766"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2766"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2766"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2797,
        "date": "2020-09-15T09:36:07",
        "date_gmt": "2020-09-15T09:36:07",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2797"
        },
        "modified": "2020-12-25T19:05:56",
        "modified_gmt": "2020-12-25T19:05:56",
        "slug": "not-a-number-check",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/not-a-number-check\/",
        "title": {
            "rendered": "Not a Number Check"
        },
        "content": {
            "rendered": "\n<p>Jasmine provides a special matcher to check this special type of testing scenario that is&nbsp;<strong>toBeNaN()<\/strong>.<\/p>\n\n\n\n<p>Let us modify our&nbsp;<strong>customerMatcher.js<\/strong>&nbsp;with the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \n   it(\"Example of toBeNaN()\", function () { \n      expect(0 \/ 0).toBeNaN(); \n   });\n});<\/code><\/pre>\n\n\n\n<p>Here we want to test what is the value of \u201c0\/0\u201d which cannot be determined. Hence, this piece of code will generate the following green screenshot.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobenan.jpg\" alt=\"toBeNan\"\/><\/figure>\n\n\n\n<p>Now let us again modify the code with the following logic, where we will assign one variable&nbsp;<strong>exp<\/strong>&nbsp;to 25 and expect the result is not a number one dividing it with 5.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Different Methods of Expect Block\",function () { \n   var exp = 25; \n\t\n   it(\"Example of toBeNaN()\", function () { \n      expect(exp\/5).toBeNaN(); \n   });\n});<\/code><\/pre>\n\n\n\n<p>This piece of code will yield the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/tobenan_output.jpg\" alt=\"toBeNan Output\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine provides a special matcher to check this special type of testing scenario that is&nbsp;toBeNaN(). Let us modify our&nbsp;customerMatcher.js&nbsp;with the following code. Here we want to test what is the value of \u201c0\/0\u201d which cannot be determined. Hence, this piece of code will generate the following green screenshot. Now let us again modify the code [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2797"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2797"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2797\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2803,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2797\/revisions\/2803"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2797"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2797"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2797"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2796,
        "date": "2020-09-15T09:37:23",
        "date_gmt": "2020-09-15T09:37:23",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2796"
        },
        "modified": "2020-12-25T19:05:56",
        "modified_gmt": "2020-12-25T19:05:56",
        "slug": "exception-check",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/exception-check\/",
        "title": {
            "rendered": "Exception Check"
        },
        "content": {
            "rendered": "\n<p>Apart from different computational matchers, Jasmine provides some useful matchers to check exception of the program. Let us modify our JavaScript with the following set of code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var throwMeAnError = function() {   \r\n   throw new Error(); \r\n};  \r\n\r\ndescribe(\"Different Methods of Expect Block\", function() {  \r\n   var exp = 25; \r\n\r\n   it (\"Hey this will throw an Error \", function() { \r\n      expect(throwMeAnError).toThrow(); \r\n   }); \r\n});<\/code><\/pre>\n\n\n\n<p>In the above example, we have created one method which deliberately throws an exception from that method and in the expect block we expect to catch the error. If everything goes well then this piece of code will yield the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/exception_block.jpg\" alt=\"Exception Block\"\/><\/figure>\n\n\n\n<p>Now, for this test case to fail, we need to omit that throw statement in the function\u00a0<strong>throwMeAnError<\/strong>. Following is the code which will yield a red screenshot as an output since the code does not satisfy our requirement.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var throwMeAnError = function() {   \r\n   \/\/throw new Error(); \r\n};   \r\n\r\ndescribe(\"Different Methods of Expect Block\",function() {  \r\n   var exp = 25; \r\n   \r\n   it(\"Hey this will throw an Error \", function() {  \r\n      expect(throwMeAnError).toThrow();    \r\n   }); \r\n});<\/code><\/pre>\n\n\n\n<p>As can be seen, we have commented that line from where our method was throwing the exception. Following is the output of the above code on successful execution of the SpecRunner.html.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/exception_error.jpg\" alt=\"Exception Error\"\/><\/figure>\n\n\n\n<h2>Jasmine.Any()<\/h2>\n\n\n\n<p><strong>Any<\/strong>\u00a0is the special matcher that is used when we are not sure about the output. In the following example, we will learn how this works. Let us modify the\u00a0<strong>customerMatcher.js<\/strong>\u00a0with the following piece of code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var addAny = function() {\r\n   var sum = this.currentVal; \r\n\t\r\n   for (var i = 0; i &lt; arguments.length; i++) { \r\n      sum += arguments&#91;i]; \r\n   } \r\n\t\r\n   this.currentVal = sum;  \r\n   return this.currentVal; \r\n} \r\n\r\ndescribe(\"Different Methods of Expect Block\",function () { \r\n   \r\n   it(\"Example of any()\", function() { \r\n      expect(addAny(9,9)).toEqual(jasmine.any(Number)); \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>Here we have declared one function that will give us the summation of the numbers provided as arguments. In the expect block, we are expecting that the result can be anything but it should be a Number.<\/p>\n\n\n\n<p>As both 9 and 9 after sum yield 18 is a number, this test will pass and it will generate the following green screenshot as an output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/any_method.jpg\" alt=\"Any Method\"\/><\/figure>\n\n\n\n<p>Now let us change the code according to the following piece of code, where we are expecting a string type variable as an output of the function\u00a0<strong>AddAny()<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var addAny = function() { \r\n   var sum = this.currentVal; \r\n\t\r\n   for(var i = 0; i &lt; arguments.length; i++) { \r\n      sum += arguments&#91;i]; \r\n   } \r\n\t\r\n   this.currentVal = sum; \r\n   return this.currentVal; \r\n}  \r\n\r\ndescribe(\"Different Methodsof Expect Block\",function () { \r\n   it(\"Example of any()\", function () { \r\n      expect(addAny(9,9)).toEqual(jasmine.any(String));    \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>Following is the output of the above code.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/any_error.jpg\" alt=\"Any Error\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Apart from different computational matchers, Jasmine provides some useful matchers to check exception of the program. Let us modify our JavaScript with the following set of code. In the above example, we have created one method which deliberately throws an exception from that method and in the expect block we expect to catch the error. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2796"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2796"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2796\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2799,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2796\/revisions\/2799"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2796"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2796"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2796"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2795,
        "date": "2020-09-15T09:38:42",
        "date_gmt": "2020-09-15T09:38:42",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2795"
        },
        "modified": "2020-12-25T19:05:56",
        "modified_gmt": "2020-12-25T19:05:56",
        "slug": "beforeeach",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/beforeeach\/",
        "title": {
            "rendered": "beforeEach()"
        },
        "content": {
            "rendered": "\n<p>Another notable feature of Jasmine is before and after each function. Using these two functionalities, we can execute some pieces of code before and after execution of each spec. This functionality is very useful for running the common code in the application. Let us create one spec file like the following.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var currentVal = 0; \r\n\r\nbeforeEach(function() { \r\n   currentVal = 5; \r\n});  \r\n\r\ndescribe(\"Different Methods of Expect Block\",function() { \r\n   it(\"after each function \", function() {\r\n      expect(currentVal).toEqual(5);     \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>Here although we have declared one variable as \u201c0\u201d in the beginning, we are expecting this value should be equal to 5 in the expectation block. The above code will generate the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/beforeeach.jpg\" alt=\"BeforeEach\"\/><\/figure>\n\n\n\n<p>In the above code, 5 will be assigned to a variable&nbsp;<strong>currentVal<\/strong>&nbsp;before the execution of the expect block. Hence, it generates a green screenshot with no error.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Another notable feature of Jasmine is before and after each function. Using these two functionalities, we can execute some pieces of code before and after execution of each spec. This functionality is very useful for running the common code in the application. Let us create one spec file like the following. Here although we have [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2795"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2795"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2795\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2800,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2795\/revisions\/2800"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2795"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2795"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2795"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2794,
        "date": "2020-09-15T09:39:15",
        "date_gmt": "2020-09-15T09:39:15",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2794"
        },
        "modified": "2020-12-25T19:05:56",
        "modified_gmt": "2020-12-25T19:05:56",
        "slug": "aftereach",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/aftereach\/",
        "title": {
            "rendered": "afterEach()"
        },
        "content": {
            "rendered": "\n<p>Like beforeEach(), afterEach() works exactly the same way. It executes after the execution of the spec block. Let us modify the previous example using the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var currentVal = 0; \r\n\r\nafterEach(function() { \r\n   currentVal = 5;  \r\n});  \r\n\r\ndescribe(\"Different Methods of Expect Block\",function() { \r\n   it(\"first call \", function() { \r\n      expect(currentVal).toEqual(0);     \r\n   });     \r\n   \r\n   it(\"second call \",  function() { \r\n      expect(currentVal).toEqual(5);     \r\n   });\r\n});<\/code><\/pre>\n\n\n\n<p>In the above example, while running the first spec block the value of the&nbsp;<strong>currentVal<\/strong>&nbsp;is 0. Hence, it will pass the test case but after running the first it block, Jasmine compile ran the afterEach() block, which makes the value of the currentVal to 5. Hence it also satisfies the second case and yields a green screenshot as an output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/aftereach.jpg\" alt=\"AfterEach\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Like beforeEach(), afterEach() works exactly the same way. It executes after the execution of the spec block. Let us modify the previous example using the following code. In the above example, while running the first spec block the value of the&nbsp;currentVal&nbsp;is 0. Hence, it will pass the test case but after running the first it [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2794"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2794"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2794\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2801,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2794\/revisions\/2801"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2794"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2794"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2794"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2793,
        "date": "2020-09-15T09:40:20",
        "date_gmt": "2020-09-15T09:40:20",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2793"
        },
        "modified": "2020-12-25T19:05:56",
        "modified_gmt": "2020-12-25T19:05:56",
        "slug": "spies",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/spies\/",
        "title": {
            "rendered": "Spies"
        },
        "content": {
            "rendered": "\n<p>Jasmine spy is another functionality which does the exact same as its name specifies. It will allow you to spy on your application function calls. There are two types of spying technology available in Jasmine. The first methodology can be implemented by using&nbsp;<strong>spyOn()<\/strong>&nbsp;and the second methodology can be implemented using&nbsp;<strong>createSpy()<\/strong>. In this chapter, we will learn more about these two methodologies.<\/p>\n\n\n\n<h2>spyOn()<\/h2>\n\n\n\n<p>spyOn() is inbuilt into the Jasmine library which allows you to spy on a definite piece of code. Let us create a new spec file \u201cspyJasmineSpec.js\u201d and another&nbsp;<strong>js<\/strong>&nbsp;file named as \u201cspyJasmine.js\u201d. Following is the entry of these two files.<\/p>\n\n\n\n<h3>SpyJasmine.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var Person = function() {}; \r\n\r\nPerson.prototype.sayHelloWorld = function(dict) { \r\n   return dict.hello() + \" \" + dict.world(); \r\n}; \r\n\r\nvar Dictionary = function() {}; \r\n\r\nDictionary.prototype.hello = function() { \r\n   return \"hello\"; \r\n}; \r\n\r\nDictionary.prototype.world = function() { \r\n   return \"world\"; \r\n};<\/code><\/pre>\n\n\n\n<h3>SpyJasmineSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Example Of jasmine Spy using spyOn()\", function() { \r\n  \r\n   it('uses the dictionary to say \"hello world\"', function() { \r\n      var dictionary = new Dictionary; \r\n      var person = new Person; \r\n\t\t\r\n      spyOn(dictionary, \"hello\");  \/\/ replace hello function with a spy \r\n      spyOn(dictionary, \"world\");  \/\/ replace world function with another spy \r\n\t\t\r\n      person.sayHelloWorld(dictionary);\r\n      expect(dictionary.hello).toHaveBeenCalled();  \r\n      \/\/ not possible without first spy \r\n  \r\n      expect(dictionary.world).toHaveBeenCalled();  \r\n      \/\/ not possible withoutsecond spy \r\n   }); \r\n});<\/code><\/pre>\n\n\n\n<p>In the above piece of code, we want person object to say \u201cHello world\u201d but we also want that person object should consult with dictionary object to give us the output literal \u201cHello world\u201d.<\/p>\n\n\n\n<p>Take a look at the Spec file where you can see that we have used spyOn() function, which actually mimics the functionality of the&nbsp;<strong>hello<\/strong>&nbsp;and&nbsp;<strong>world<\/strong>&nbsp;function. Hence, we are not actually calling the function but mimicking the function call. That is the specialty of Spies. The above piece of code will yield the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/spyon_method.jpg\" alt=\"spyOn Method\"\/><\/figure>\n\n\n\n<h2>createSpy()<\/h2>\n\n\n\n<p>Another method of obtaining the spying functionality is using createSpy(). Let us modify our two&nbsp;<strong>js<\/strong>&nbsp;files using the following code.<\/p>\n\n\n\n<h3>SpyJasmine.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var Person = function() {};    \r\n\r\nPerson.prototype.sayHelloWorld = function(dict) { \r\n   return dict.hello() + \" \" + dict.world(); \r\n}; \r\n\r\nvar Dictionary = function() {}; \r\n\r\nDictionary.prototype.hello = function() { \r\n   return \"hello\"; \r\n}; \r\n\r\nDictionary.prototype.world = function() { \r\n   return \"world\"; \r\n}; <\/code><\/pre>\n\n\n\n<h3>SpyJasmineSpec.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"Example Of jasmine Spy using Create Spy\", function() { \r\n   \r\n   it(\"can have a spy function\", function() { \r\n      var person = new Person(); \r\n      person.getName11 = jasmine.createSpy(\"Name spy\"); \r\n      person.getName11(); \r\n      expect(person.getName11).toHaveBeenCalled(); \r\n   }); \r\n}); <\/code><\/pre>\n\n\n\n<p>Take a look at the spec file, we are calling the&nbsp;<strong>getName11()<\/strong>&nbsp;of the&nbsp;<strong>Person<\/strong>&nbsp;object. Although this function is not present in the person object in&nbsp;<strong>spy Jasmine.js<\/strong>, we are not getting any error and hence the output is green and positive. In this example, createSpy() method actually mimics the functionality of the getName11().<\/p>\n\n\n\n<p>The above code will generate the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jasminejs\/images\/createspy.jpg\" alt=\"CreateSpy\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Jasmine spy is another functionality which does the exact same as its name specifies. It will allow you to spy on your application function calls. There are two types of spying technology available in Jasmine. The first methodology can be implemented by using&nbsp;spyOn()&nbsp;and the second methodology can be implemented using&nbsp;createSpy(). In this chapter, we will [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            89,
            117,
            177,
            87
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2793"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2793"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2793\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2802,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2793\/revisions\/2802"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2793"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2793"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2793"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]