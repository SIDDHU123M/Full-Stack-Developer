[{"id":690,"date":"2020-05-13T06:03:48","date_gmt":"2020-05-13T06:03:48","guid":{"rendered":"http://angular.foobrdigital.com/?p=690"},"modified":"2020-05-13T06:03:48","modified_gmt":"2020-05-13T06:03:48","slug":"introduction-5","status":"publish","type":"post","link":"https://react.foobrdigital.com/introduction-5/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>When using webpack for the first time, it can be difficult to understand how it works and how it should be used. Although it has good documentation, it can be daunting for novices, and it has a steep learning curve. However, webpack is worth learning and can save considerable time and effort in the long run. In this tutorial, I’ll introduce all the core concepts to help you get started.</p>\n\n\n\n<h2 id=\"whatiswebpack\">What Is Webpack?</h2>\n\n\n\n<p>As its core, webpack is a static module bundler. In a particular project, webpack treats all files and assets as modules. Under the hood, it relies on a dependency graph. A dependency graph describes how modules relate to each other using the references (require and import statements) between files. In this way, webpack statically traverses all modules to build the graph and uses it to generate a single bundle (or several bundles) — a JavaScript file containing the code from all modules combined in the correct order. “Statically” means that, when webpack builds its dependency graph, it doesn’t execute the source code but stitches modules and their dependencies together into a bundle. This can then be included in your HTML files.</p>\n\n\n\n<p>Now, to expand the above cursory overview, let’s explore the main concepts webpack uses.</p>\n\n\n\n<h2 id=\"webpackmainconcepts\">Webpack Main Concepts</h2>\n\n\n\n<p>Webpack has some main concepts which we need to understand clearly before digging in its practical implementation. Let’s examine them one by one:</p>\n\n\n\n<p><strong>Entry.</strong> The entry point is the module, which webpack uses to start building its internal dependency graph. From there, it determines which other modules and libraries that entry point depends on (directly and indirectly) and includes them in the graph until no dependency is left. </p>\n\n\n\n<p>By default, the entry property is set to <code><strong>./src/index.js</strong></code>, but we can specify a different module (or even multiple modules) in the webpack configuration file.</p>\n\n\n\n<p><strong>Output.</strong> The output property instructs webpack where to emit the bundle(s) and what name to use for that file(s). The default value for this property is <code><strong>./dist/main.js</strong></code> for the main bundle and <code><strong>./dist</strong></code> for other generated files — such as images, for example. Of course, we can specify different values in the configuration depending on our needs.</p>\n\n\n\n<p><strong>Loaders.</strong> By default, webpack only understands JavaScript and JSON files. To process other types of files and convert them into valid modules, webpack uses loaders. Loaders transform the source code of non-JavaScript modules, allowing us to preprocess those files before they’re added to the dependency graph.</p>\n\n\n\n<p>For example, a loader can transform files from a CoffeeScript language to JavaScript or inline images to data URLs. With loaders, we can even import CSS files directly from our JavaScript modules.</p>\n\n\n\n<p><strong>Plugins.</strong> Plugins are used for any other task that loaders can’t do. They provide us with a wide range of solutions about asset management, bundle minimization and optimization, and so on.</p>\n\n\n\n<p><strong>Mode.</strong> Typically, when we develop our application we work with two types of source code — one for the development build and one for the production build. Webpack allows us to set which one we want to be produced by changing the mode parameter to <strong>development</strong>, <strong>production,</strong> or <strong>none</strong>. This allows webpack to use built-in optimizations corresponding to each environment. The default value is <strong>production</strong>. The <strong>none</strong> mode means that there won’t be used any default optimization options. </p>\n\n\n\n<h2 id=\"howwebpackworks\">How Webpack Works</h2>\n\n\n\n<p>Let&#8217;s see how webpack works. Even a simple project contains HTML, CSS, and JavaScript files. Also, it can contains assets such as fonts, images, and so on. So, a typical webpack workflow would include setting up an <code><strong>index.html</strong></code> file with the appropriate CSS and JS links, and the necessary assets. Also, if you have many CSS and JS modules that depend on each other, they need to be optimized and properly combined in one unit ready for production.</p>\n\n\n\n<p>To do all this, webpack relies on the configuration. Although webpack 4 comes with reasonable defaults, for any non-trivial project you’ll need to provide a special configuration file <code><strong>webpack.config.js</strong></code>, which describes how the files and assets should be transformed and what kind of output should be generated. This file can quickly become quite monolithic, which makes it hard to understand how webpack does its job unless you know the main concepts behind its working.</p>\n\n\n\n<p>Based on the provided configuration, webpack starts from the entry points and resolves each module it encounters while constructing the dependency graph. If a module contains dependencies, the process is performed recursively against each dependency until the traversal has completed. Then webpack bundles all project’s modules into a small number of bundles — usually, just one — to be loaded by the browser.</p>\n","protected":false},"excerpt":{"rendered":"<p>When using webpack for the first time, it can be difficult to understand how it works and how it should be used. Although it has good documentation, it can be daunting for novices, and it has a steep learning curve. However, webpack is worth learning and can save considerable time and effort in the long [&hellip;]</p>\n","protected":false},"author":1,"featured_media":691,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[12],"tags":[],"_links":{"self":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/690"}],"collection":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/comments?post=690"}],"version-history":[{"count":0,"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/690/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/media/691"}],"wp:attachment":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/media?parent=690"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/categories?post=690"},{"taxonomy":"post_tag","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/tags?post=690"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":695,"date":"2020-05-13T06:06:48","date_gmt":"2020-05-13T06:06:48","guid":{"rendered":"http://angular.foobrdigital.com/?p=695"},"modified":"2020-05-13T06:06:48","modified_gmt":"2020-05-13T06:06:48","slug":"basics","status":"publish","type":"post","link":"https://react.foobrdigital.com/basics/","title":{"rendered":"Basics"},"content":{"rendered":"\n<p>Now that we have solid theoretical foundation, let’s implement it in practice.</p>\n\n\n\n<p>To start, we’ll create a new directory and switch to it. Then we’ll initialize a new project:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mkdir learn-webpack\ncd learn-webpack\nnpm init -y\n</code></pre>\n\n\n\n<p>Next, we need to install webpack and webpack CLI locally:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install webpack webpack-cli --save-dev\n</code></pre>\n\n\n\n<p>Now, the content of the generated&nbsp;<code>package.json</code>&nbsp;should be similar to the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"name\": \"learn_webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": &#91;],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^4.30.0\",\n    \"webpack-cli\": \"^3.3.0\"\n  }\n}\n</code></pre>\n\n\n\n<p>Besides bundling modules, webpack can be used as a simple task runner. We can create webpack tasks by including the name of our task followed by its instructions in the&nbsp;<code>scripts</code>&nbsp;section of the&nbsp;<code>package,json</code>&nbsp;file. Let’s try this now. Open&nbsp;<code>package.json</code>&nbsp;and change the&nbsp;<code>scripts</code>&nbsp;object to the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"scripts\": {\n  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n  \"dev\": \"webpack --mode development\",\n  \"build\": \"webpack --mode production\"\n},\n</code></pre>\n\n\n\n<p>Within the&nbsp;<code>scripts</code>&nbsp;property, webpack allows us to reference locally installed npm packages by their names. We use that and the&nbsp;<code>--mode</code>&nbsp;flag to define&nbsp;<code>dev</code>&nbsp;and&nbsp;<code>build</code>&nbsp;tasks, which will run webpack in development (<code>npm run dev</code>) and production (<code>npm run build</code>) mode respectively.</p>\n\n\n\n<p>Before we test the tasks we’ve just created, let’s create a&nbsp;<code>src</code>&nbsp;directory and put an&nbsp;<code>index.js</code>&nbsp;file in it so that it contains&nbsp;<code>console.log(\"Hello webpack\");</code>. Now we can already to run the&nbsp;<code>dev</code>&nbsp;task to start webpack in development mode:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm run dev\n\n> learn_webpack@1.0.0 dev C:\\Users\\User\\Webpack\\learn_webpack\n> webpack --mode development\n\nHash: 5bb3bdc1efd7b7f4b787\nVersion: webpack 4.30.0\nTime: 226ms\nBuilt at: 2019-04-16 17:48:34\n  Asset     Size  Chunks             Chunk Names\nmain.js  3.8 KiB    main  &#91;emitted]  main\nEntrypoint main = main.js\n&#91;./src/index.js] 27 bytes {main} &#91;built]\n</code></pre>\n\n\n\n<p>Great! It works as expected. But to verify that we get the correct output, we need to display the result in the browser. To do that, let’s create an&nbsp;<code>index.html</code>&nbsp;file in the&nbsp;<code>dist</code>&nbsp;directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n  &lt;head>\n    &lt;title>Getting Started&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;script src=\"main.js\">&lt;/script>\n  &lt;/body>\n&lt;/html>\n</code></pre>\n\n\n\n<p>Now, if we open the file in the browser, we should see the&nbsp;<em>Hello webpack</em>&nbsp;message in the console.</p>\n\n\n\n<p>So far, so good. But writing our&nbsp;<code>index.html</code>&nbsp;file manually can be problematic in some cases. For example, if we change the name of our entry point, the generated bundle will be renamed, but our&nbsp;<code>index.html</code>&nbsp;file will still reference the old name. So, we’ll need to update our HTML file manually every time we rename an entry point or add new one. Fortunately, we can easily fix that with the&nbsp;<code>html-webpack-plugin</code>. Let’s install it now:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install html-webpack-plugin --save-dev</code></pre>\n\n\n\n<p>At this point, to activate the plugin, we need to create a&nbsp;<code>webpack.config.js</code>&nbsp;file in the root directory with the following content:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst path = require('path');\n\nmodule.exports = {\n  plugins: &#91;\n    new HtmlWebpackPlugin({\n      title: \"Webpack Output\",\n    }),\n  ],\n};</code></pre>\n\n\n\n<p>As you can see, to activate a webpack plugin, we need to include it and then add it to the&nbsp;<code>plugins</code>&nbsp;array. If needed, we also pass options to the plugin.</p>\n\n\n\n<p>Let’s run our build now to see what will happen:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm run build\n\n> learn_webpack@1.0.0 build C:\\Users\\User\\Webpack\\learn_webpack\n> webpack --mode production\n\nHash: e56a796f5ccfebcc8270\nVersion: webpack 4.30.0\nTime: 1088ms\nBuilt at: 2019-04-16 20:44:47\n    Asset       Size  Chunks             Chunk Names\nindex.html  183 bytes          &#91;emitted]\n  main.js  956 bytes       0  &#91;emitted]  main\nEntrypoint main = main.js\n&#91;0] ./src/index.js 27 bytes {0} &#91;built]\nChild html-webpack-plugin for \"index.html\":\n    1 asset\n    Entrypoint undefined = index.html\n    &#91;2] (webpack)/buildin/global.js 472 bytes {0} &#91;built]\n    &#91;3] (webpack)/buildin/module.js 497 bytes {0} &#91;built]\n        + 2 hidden modules\n</code></pre>\n\n\n\n<p>Let’s open the&nbsp;<code>index.html</code>. As we can see, the plugin automatically creates an updated&nbsp;<code>index.html</code>&nbsp;file for us which uses the title option from the configuration:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n  &lt;head>\n    &lt;meta charset=\"UTF-8\">\n    &lt;title>Webpack Output&lt;/title>\n  &lt;/head>\n  &lt;body>\n  &lt;script type=\"text/javascript\" src=\"main.js\">&lt;/script>&lt;/body>\n&lt;/html>\n</code></pre>\n\n\n\n<p>Let’s now expand our project and specify custom names for the&nbsp;<code>entry</code>&nbsp;and&nbsp;<code>output</code>&nbsp;properties. In&nbsp;<code>webpack.config.js</code>&nbsp;we add the following before the&nbsp;<code>plugins</code>&nbsp;property:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>entry: './src/app.js',\noutput: {\n  filename: '&#91;name].bundle.js',\n  path: path.resolve(__dirname, 'dist')\n},\n</code></pre>\n\n\n\n<p>Now, we’ll create an&nbsp;<code>src/component.js</code>&nbsp;file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export default (text = \"Hello webpack\") => {\n  const element = document.createElement(\"p\");\n\n  element.innerHTML = text;\n\n  return element;\n};\n</code></pre>\n\n\n\n<p>Next, we rename&nbsp;<code>index.js</code>&nbsp;to&nbsp;<code>app.js</code>&nbsp;to reflect our changes, and swap its content with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import component from \"./component\";\n\ndocument.body.appendChild(component());\n</code></pre>\n\n\n\n<p>Now, let’s run webpack in production mode:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm run build\n\n> learn_webpack@1.0.0 build C:\\Users\\User\\Webpack\\learn_webpack\n> webpack --mode production\n\nHash: 9f78936f8a2a21061f0b\nVersion: webpack 4.30.0\nTime: 1689ms\nBuilt at: 2019-04-17 23:43:40\n        Asset       Size  Chunks             Chunk Names\n    index.html  190 bytes          &#91;emitted]\nmain.bundle.js   1.04 KiB       0  &#91;emitted]  main\nEntrypoint main = main.bundle.js\n&#91;0] ./src/app.js + 1 modules 227 bytes {0} &#91;built]\n    | ./src/app.js 79 bytes &#91;built]\n    | ./src/component.js 148 bytes &#91;built]\nChild html-webpack-plugin for \"index.html\":\n    1 asset\n    Entrypoint undefined = index.html\n    &#91;2] (webpack)/buildin/global.js 472 bytes {0} &#91;built]\n    &#91;3] (webpack)/buildin/module.js 497 bytes {0} &#91;built]\n        + 2 hidden modules\n</code></pre>\n\n\n\n<p>Let’s examine and clarify the information from the webpack output. Beginning from the top, we see the hash of the build, webpack version, and the time it took to execute the build. Next, we see the files generated in the&nbsp;<code>dist</code>&nbsp;directory (<code>index.html</code>&nbsp;and&nbsp;<code>main.bundle.js</code>). Below them, we see the entry module (<code>app.js</code>) and its dependency (<code>component.js</code>). The output after&nbsp;<code>Child html-webpack-plugin for \"index.html\":</code>&nbsp;is related to the internal work of the&nbsp;<code>html-webpack-plugin</code>&nbsp;and we can safely ignore it.</p>\n\n\n\n<p>So now, in the&nbsp;<code>dist</code>&nbsp;folder, we have the newly generated bundle file&nbsp;<code>main.bundle.js</code>. If we open&nbsp;<code>index.html</code>&nbsp;in the browser, we should see&nbsp;<em>Hello webpack</em>&nbsp;displayed on the page. Also, if we check the source of&nbsp;<code>index.html</code>, we’ll see that the value of the&nbsp;<code>src</code>&nbsp;property in the&nbsp;<code>script</code>&nbsp;tag is updated to&nbsp;<code>main.bundle.js</code>.</p>\n","protected":false},"excerpt":{"rendered":"<p>Now that we have solid theoretical foundation, let’s implement it in practice. To start, we’ll create a new directory and switch to it. Then we’ll initialize a new project: Next, we need to install webpack and webpack CLI locally: Now, the content of the generated&nbsp;package.json&nbsp;should be similar to the following: Besides bundling modules, webpack can [&hellip;]</p>\n","protected":false},"author":1,"featured_media":702,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[12],"tags":[],"_links":{"self":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/695"}],"collection":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/comments?post=695"}],"version-history":[{"count":0,"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/695/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/media/702"}],"wp:attachment":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/media?parent=695"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/categories?post=695"},{"taxonomy":"post_tag","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/tags?post=695"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":705,"date":"2020-05-13T06:10:46","date_gmt":"2020-05-13T06:10:46","guid":{"rendered":"http://angular.foobrdigital.com/?p=705"},"modified":"2020-05-13T06:10:46","modified_gmt":"2020-05-13T06:10:46","slug":"webpack-scripts","status":"publish","type":"post","link":"https://react.foobrdigital.com/webpack-scripts/","title":{"rendered":"Webpack Scripts"},"content":{"rendered":"\n<p>In this tutorial, we’ll discover how ES6 can be transpiled to ES5-compliant code which works in all browsers. Let’s start by running the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm run dev -- --devtools false\n</code></pre>\n\n\n\n<p>Next, let’s open&nbsp;<code>main.bundle.js</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/***/ \"./src/component.js\":\n/*!**************************!*\\\n  !*** ./src/component.js ***!\n  \\**************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__&#91;\"default\"] = ((text = \"Hello webpack\") => {\n  const element = document.createElement(\"p\");\n\n  element.innerHTML = text;\n\n  return element;\n});\n\n/***/ })\n</code></pre>\n\n\n\n<p>As you can see, the modern ES6 features (the arrow function and the&nbsp;<code>const</code>&nbsp;declaration) from&nbsp;<code>component.js</code>&nbsp;module are not transformed to ES5-compliant code by default. To make our code work in older browsers, we must add the Babel loader:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install babel-loader @babel/core @babel/preset-env --save-dev\n</code></pre>\n\n\n\n<p>Then, in&nbsp;<code>webpack.config.js</code>&nbsp;add&nbsp;<code>module</code>&nbsp;after the&nbsp;<code>output</code>&nbsp;property:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>module: {\n  rules: &#91;\n    {\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: &#91;'@babel/preset-env']\n        }\n      }\n    }\n  ]\n},\n</code></pre>\n\n\n\n<p>When we define rules for a webpack loader, there are usually three main properties we need to define:</p>\n\n\n\n<ul><li><code>test</code>, which describes what kind of files should be transformed.</li><li><code>exclude</code>, which defines the files which should not be processed from the loader(s), if we have such.</li><li><code>use</code>, which tells which loader(s) should be used against the matched modules.</li></ul>\n\n\n\n<p>Run the following command again:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm run dev -- --devtools false\n</code></pre>\n\n\n\n<p>This time, the code in&nbsp;<code>main.bundle.js</code>&nbsp;is compiled:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/***/ \"./src/component.js\":\n/*!**************************!*\\\n  !*** ./src/component.js ***!\n  \\**************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__&#91;\"default\"] = (function () {\n  var text = arguments.length > 0 &amp;&amp; arguments&#91;0] !== undefined ? arguments&#91;0] : \"Hello webpack\";\n  var element = document.createElement(\"p\");\n  element.innerHTML = text;\n  return element;\n});\n\n/***/ })\n</code></pre>\n\n\n\n<p>Perfect. Now we can use the modern JS features, and webpack will transform our code so it can be executed by older browsers.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, we’ll discover how ES6 can be transpiled to ES5-compliant code which works in all browsers. Let’s start by running the following command: Next, let’s open&nbsp;main.bundle.js: As you can see, the modern ES6 features (the arrow function and the&nbsp;const&nbsp;declaration) from&nbsp;component.js&nbsp;module are not transformed to ES5-compliant code by default. To make our code work [&hellip;]</p>\n","protected":false},"author":1,"featured_media":706,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[12],"tags":[],"_links":{"self":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/705"}],"collection":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/comments?post=705"}],"version-history":[{"count":0,"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/705/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/media/706"}],"wp:attachment":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/media?parent=705"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/categories?post=705"},{"taxonomy":"post_tag","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/tags?post=705"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":718,"date":"2020-05-13T06:12:10","date_gmt":"2020-05-13T06:12:10","guid":{"rendered":"http://angular.foobrdigital.com/?p=718"},"modified":"2020-05-13T06:12:10","modified_gmt":"2020-05-13T06:12:10","slug":"webpack-styles","status":"publish","type":"post","link":"https://react.foobrdigital.com/webpack-styles/","title":{"rendered":"Webpack Styles"},"content":{"rendered":"\n<h2 id=\"workingwithstyles\">Working with Styles</h2>\n\n\n\n<p>In this tutorial, we’ll see how we can add some styles to our project. To do this, we need to install two loaders:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install css-loader style-loader --save-dev\n</code></pre>\n\n\n\n<p><code>css-loader</code>&nbsp;parses the CSS into JavaScript and resolves any dependencies,&nbsp;<code>style-loader</code>&nbsp;outputs our CSS into a&nbsp;<code>&lt;style&gt;</code>&nbsp;tag in the HTML document.</p>\n\n\n\n<p>Let’s add the necessary configuration in&nbsp;<code>webpack.config.js</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  test: /\\.css$/,\n  use: &#91;{ loader: 'style-loader' }, { loader: 'css-loader' }],\n},\n</code></pre>\n\n\n\n<p>Here, the order of loaders is important. They’re evaluated in reverse order — that is, from right to left and from bottom to top.</p>\n\n\n\n<p>Now, let’s create a file&nbsp;<code>src/style.css</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>p {\n  color: red;\n}\n</code></pre>\n\n\n\n<p>Then we import it into&nbsp;<code>app.js</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import './style.css'\n</code></pre>\n\n\n\n<p>When we run webpack and then open the&nbsp;<code>index.html</code>, we should see the&nbsp;<strong>Hello webpack</strong>&nbsp;message in red.</p>\n","protected":false},"excerpt":{"rendered":"<p>Working with Styles In this tutorial, we’ll see how we can add some styles to our project. To do this, we need to install two loaders: css-loader&nbsp;parses the CSS into JavaScript and resolves any dependencies,&nbsp;style-loader&nbsp;outputs our CSS into a&nbsp;&lt;style&gt;&nbsp;tag in the HTML document. Let’s add the necessary configuration in&nbsp;webpack.config.js: Here, the order of loaders is [&hellip;]</p>\n","protected":false},"author":1,"featured_media":719,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[12],"tags":[],"_links":{"self":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/718"}],"collection":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/comments?post=718"}],"version-history":[{"count":0,"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/718/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/media/719"}],"wp:attachment":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/media?parent=718"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/categories?post=718"},{"taxonomy":"post_tag","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/tags?post=718"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":721,"date":"2020-05-13T06:15:23","date_gmt":"2020-05-13T06:15:23","guid":{"rendered":"http://angular.foobrdigital.com/?p=721"},"modified":"2020-05-13T06:15:23","modified_gmt":"2020-05-13T06:15:23","slug":"webpack-assets","status":"publish","type":"post","link":"https://react.foobrdigital.com/webpack-assets/","title":{"rendered":"Webpack Assets"},"content":{"rendered":"\n<p>Most often your project will contain assets such as images, fonts, and so on. Here we’ll explore an example with images. First, we’ll need to install a file loader:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install file-loader --save-dev</code></pre>\n\n\n\n<p>Next, we’ll add new rule in the&nbsp;<code>webpack.config.js</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  test: /\\.(png|jpg|gif)$/,\n  use: &#91;\n    {\n      loader: 'file-loader'\n    },\n  ],\n},\n</code></pre>\n\n\n\n<p>Now, to test the loader we’ll create an&nbsp;<code>image-component.js</code>&nbsp;file, in the&nbsp;<code>src</code>&nbsp;directory, with the following content:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import image from \"./image.png\"\n\nconst img = document.createElement(\"img\")\nimg.src = image\ndocument.body.appendChild(img)\n</code></pre>\n\n\n\n<p>Here, we import our image as a module and use it to create an&nbsp;<code>&lt;img/&gt;</code>&nbsp;tag. We need to put that image in the&nbsp;<code>src</code>&nbsp;directory.</p>\n\n\n\n<p>The next thing is to import our image component in&nbsp;<code>app.js</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import './image-component'\n</code></pre>\n\n\n\n<p>And voila. Now, when we run webpack and open the page, we should see the image above the&nbsp;<strong>Hello webpack</strong>&nbsp;message.</p>\n","protected":false},"excerpt":{"rendered":"<p>Most often your project will contain assets such as images, fonts, and so on. Here we’ll explore an example with images. First, we’ll need to install a file loader: Next, we’ll add new rule in the&nbsp;webpack.config.js: Now, to test the loader we’ll create an&nbsp;image-component.js&nbsp;file, in the&nbsp;src&nbsp;directory, with the following content: Here, we import our image [&hellip;]</p>\n","protected":false},"author":1,"featured_media":722,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[12],"tags":[],"_links":{"self":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/721"}],"collection":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/comments?post=721"}],"version-history":[{"count":0,"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/721/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/media/722"}],"wp:attachment":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/media?parent=721"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/categories?post=721"},{"taxonomy":"post_tag","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/tags?post=721"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":724,"date":"2020-05-13T06:19:14","date_gmt":"2020-05-13T06:19:14","guid":{"rendered":"http://angular.foobrdigital.com/?p=724"},"modified":"2020-05-13T06:19:14","modified_gmt":"2020-05-13T06:19:14","slug":"webpack-dev-server","status":"publish","type":"post","link":"https://react.foobrdigital.com/webpack-dev-server/","title":{"rendered":"webpack-dev-server"},"content":{"rendered":"\n<p>Currently, we need to rebuild our code every time we make a change. Fortunately, webpack offers a live-reloading web server which automatically builds and refreshes the page. To install it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install webpack-dev-server --save-dev\n</code></pre>\n\n\n\n<p>We need to update our&nbsp;<code>dev</code>&nbsp;script, in&nbsp;<code>package.json</code>, to use the server:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"dev\": \"webpack-dev-server --mode development\"\n</code></pre>\n\n\n\n<p>Now let’s configure the server in&nbsp;<code>webpack.config.js</code>&nbsp;by adding the following property:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>devServer: {\n  contentBase: './dist',\n  open: true\n},\n</code></pre>\n\n\n\n<p>This tells&nbsp;<code>webpack-dev-server</code>&nbsp;to serve the files from the&nbsp;<code>dist</code>&nbsp;directory and to open the entry page automatically.</p>\n\n\n\n<p>Now, if we run webpack (<code>npm run dev</code>), we should see how the page is automatically opened in the browser on&nbsp;<code>localhost:8080</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>i ｢wds｣: Project is running at http://localhost:8080/\ni ｢wds｣: webpack output is served from /\ni ｢wds｣: Content not from webpack is served from ./dist\n</code></pre>\n\n\n\n<p>If we now change any of the source files and save them, the web server will automatically reload the page after the code has been compiled. Try to change the color property in our CSS file to green, for example, and you should see how the color is updated appropriately in the page.</p>\n","protected":false},"excerpt":{"rendered":"<p>Currently, we need to rebuild our code every time we make a change. Fortunately, webpack offers a live-reloading web server which automatically builds and refreshes the page. To install it: We need to update our&nbsp;dev&nbsp;script, in&nbsp;package.json, to use the server: Now let’s configure the server in&nbsp;webpack.config.js&nbsp;by adding the following property: This tells&nbsp;webpack-dev-server&nbsp;to serve the files [&hellip;]</p>\n","protected":false},"author":1,"featured_media":726,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[12],"tags":[],"_links":{"self":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/724"}],"collection":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/comments?post=724"}],"version-history":[{"count":0,"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/724/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/media/726"}],"wp:attachment":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/media?parent=724"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/categories?post=724"},{"taxonomy":"post_tag","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/tags?post=724"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":728,"date":"2020-05-13T06:21:51","date_gmt":"2020-05-13T06:21:51","guid":{"rendered":"http://angular.foobrdigital.com/?p=728"},"modified":"2020-05-13T06:21:51","modified_gmt":"2020-05-13T06:21:51","slug":"cleanup","status":"publish","type":"post","link":"https://react.foobrdigital.com/cleanup/","title":{"rendered":"Cleanup"},"content":{"rendered":"\n<h2 id=\"cleanuptheoutput\">Clean Up the Output</h2>\n\n\n\n<p>As our project progress, the <code><strong>dist</strong></code> folder might become quite cluttered. On every build, webpack will generate the bundles and put them in the <code><strong>dist</strong></code> folder, but it doesn’t keep track of which files are actually in use by your project. So it’s good practice to clean the <code><strong>dist</strong></code> folder before each build, so that only the files in use will be generated. To do this, we need to install and configure the <code><strong>clean-webpack-plugin</strong></code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save-dev clean-webpack-plugin\n</code></pre>\n\n\n\n<p>In <code><strong>webpack.config.js</strong></code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const CleanWebpackPlugin = require('clean-webpack-plugin');\n\n...\n\nplugins: &#91;\n  ...\n  new CleanWebpackPlugin()\n],\n</code></pre>\n\n\n\n<p>Now, run webpack (<code><strong>npm run build</strong></code>) and inspect the <code><strong>dist</strong></code> folder. You should now only see the files generated from the build without old and unused files. In our case, the file which should be deleted is <code><strong>main.js</strong></code>.</p>\n\n\n\n<p>Webpack is a useful and powerful tool. This tutorial introduces only the core concepts, but webpack offers many more features, plugins, and different techniques to apply them, which you can adopt as your knowledge grows. </p>\n","protected":false},"excerpt":{"rendered":"<p>Clean Up the Output As our project progress, the dist folder might become quite cluttered. On every build, webpack will generate the bundles and put them in the dist folder, but it doesn’t keep track of which files are actually in use by your project. So it’s good practice to clean the dist folder before each build, so that only the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":731,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[12],"tags":[],"_links":{"self":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/728"}],"collection":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/comments?post=728"}],"version-history":[{"count":0,"href":"https://react.foobrdigital.com/wp-json/wp/v2/posts/728/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/media/731"}],"wp:attachment":[{"href":"https://react.foobrdigital.com/wp-json/wp/v2/media?parent=728"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/categories?post=728"},{"taxonomy":"post_tag","embeddable":true,"href":"https://react.foobrdigital.com/wp-json/wp/v2/tags?post=728"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]