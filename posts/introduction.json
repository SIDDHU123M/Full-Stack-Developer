[{"id":5274,"date":"2022-01-24T11:34:21","date_gmt":"2022-01-24T11:34:21","guid":{"rendered":"https://python3.foobrdigital.com/?p=5274"},"modified":"2022-01-24T11:59:42","modified_gmt":"2022-01-24T11:59:42","slug":"how-to-get-started-with-python","status":"publish","type":"post","link":"https://python3.foobrdigital.com/how-to-get-started-with-python/","title":{"rendered":"How to Get Started With Python?"},"content":{"rendered":"\n<p>In this tutorial, you will learn to install and run Python on your computer. Once we do that, we will also write our first Python program.</p>\n\n\n\n<p>Python is a cross-platform programming language, which means that it can run on multiple platforms like Windows, macOS, Linux, and has even been ported to the Java and .NET virtual machines. It is free and open-source.</p>\n\n\n\n<p>Even though most of today&#8217;s Linux and Mac have Python pre-installed in it, the version might be out-of-date. So, it is always a good idea to install the most current version.</p>\n\n\n\n<h2 id=\"run-thonny\">The Easiest Way to Run Python</h2>\n\n\n\n<p>The easiest way to run Python is by using&nbsp;<strong>Thonny IDE</strong>.</p>\n\n\n\n<p>The Thonny IDE comes with the latest version of Python bundled in it. So you don&#8217;t have to install Python separately.</p>\n\n\n\n<p>Follow the following steps to run Python on your computer.</p>\n\n\n\n<ol><li>Download Thonny IDE.</li><li>Run the installer to install <strong>Thonny</strong> on your computer.</li><li>Go to: <strong>File</strong> > <strong>New</strong>. Then save the file with <code>.py</code> extension. For example, <code>hello.py</code>, <code>example.py</code>, etc.<br>You can give any name to the file. However, the file name should end with <strong>.py</strong></li><li>Write Python code in the file and save it.</li><li>Then Go to <strong>Run</strong> > <strong>Run current script</strong> or simply click <strong>F5</strong> to run it.</li></ol>\n\n\n\n<h2 id=\"install-python\">Install Python Separately</h2>\n\n\n\n<p>If you don&#8217;t want to use Thonny, here&#8217;s how you can install and run Python on your computer.</p>\n\n\n\n<ol><li>Download the latest version of Python.</li><li>Run the installer file and follow the steps to install Python<br>During the install process, check <strong>Add Python to environment variables</strong>. This will add Python to environment variables, and you can run Python from any part of the computer.<br></li></ol>\n\n\n\n<p>Also, you can choose the path where Python is installed.</p>\n\n\n\n<p>Once you finish the installation process, you can run Python.</p>\n\n\n\n<h3 id=\"immediate-mode\">&nbsp;Run Python in Immediate mode</h3>\n\n\n\n<p>Once Python is installed, typing&nbsp;<code>python</code>&nbsp;in the command line will invoke the interpreter in immediate mode. We can directly type in Python code, and press Enter to get the output.</p>\n\n\n\n<p>Try typing in <code>1 + 1</code> and press enter. We get <code>2</code> as the output. This prompt can be used as a calculator. To exit this mode, type <code>quit()</code> and press enter.</p>\n\n\n\n<h3 id=\"ide\">Run Python in the Integrated Development Environment (IDE)</h3>\n\n\n\n<p>We can use any text editing software to write a Python script file.</p>\n\n\n\n<p>We just need to save it with the&nbsp;<code>.py</code>&nbsp;extension. But using an IDE can make our life a lot easier. IDE is a piece of software that provides useful features like code hinting, syntax highlighting and checking, file explorers, etc. to the programmer for application development.</p>\n\n\n\n<p>By the way, when you install Python, an IDE named&nbsp;<strong>IDLE</strong>&nbsp;is also installed. You can use it to run Python on your computer. It&#8217;s a decent IDE for beginners.</p>\n\n\n\n<p>When you open IDLE, an interactive Python Shell is opened.</p>\n\n\n\n<p>Now you can create a new file and save it with&nbsp;<strong>.py</strong>&nbsp;extension. For example,&nbsp;<strong>hello.py</strong></p>\n\n\n\n<p>Write Python code in the file and save it. To run the file, go to <strong>Run</strong> > <strong>Run Module</strong> or simply click <strong>F5</strong>.</p>\n\n\n\n<h2 id=\"first-program\">Your first Python Program</h2>\n\n\n\n<p>Now that we have Python up and running, we can write our first Python program.</p>\n\n\n\n<p>Let&#8217;s create a very simple program called&nbsp;<code>Hello World</code>. A&nbsp;<strong>&#8220;Hello, World!&#8221;</strong>&nbsp;is a simple program that outputs&nbsp;<code>Hello, World!</code>&nbsp;on the screen. Since it&#8217;s a very simple program, it&#8217;s often used to introduce a new programming language to beginners.</p>\n\n\n\n<p>Type the following code in any text editor or an IDE and save it as <code>hello_world.py</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code><br>print(\"Hello, world!\")</code></pre>\n\n\n\n<p>Then, run the file. You will get the following output.</p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>Hello, world!</samp></code></pre>\n\n\n\n<p>Congratulations! You just wrote your first program in Python.</p>\n\n\n\n<p>As you can see, this was a pretty easy task. This is the beauty of the Python programming language.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn to install and run Python on your computer. Once we do that, we will also write our first Python program. Python is a cross-platform programming language, which means that it can run on multiple platforms like Windows, macOS, Linux, and has even been ported to the Java and .NET [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5274"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5274"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5274/revisions"}],"predecessor-version":[{"id":5275,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5274/revisions/5275"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5274"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5274"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5274"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5276,"date":"2022-01-24T11:36:09","date_gmt":"2022-01-24T11:36:09","guid":{"rendered":"https://python3.foobrdigital.com/?p=5276"},"modified":"2022-01-25T06:38:13","modified_gmt":"2022-01-25T06:38:13","slug":"python-keywords-and-identifiers","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-keywords-and-identifiers/","title":{"rendered":"Python Keywords and Identifiers"},"content":{"rendered":"\n<p>In this tutorial, you will learn about keywords (reserved words in Python) and identifiers (names given to variables, functions, etc.).</p>\n\n\n\n<h2 id=\"key\">Python Keywords</h2>\n\n\n\n<p>Keywords are the reserved words in Python.</p>\n\n\n\n<p>We cannot use a keyword as a&nbsp;variable&nbsp;name,&nbsp;function&nbsp;name or any other identifier. They are used to define the syntax and structure of the Python language.</p>\n\n\n\n<p>In Python, keywords are case-sensitive.</p>\n\n\n\n<p>There are 33 keywords in Python 3.7. This number can vary slightly over the course of time.</p>\n\n\n\n<p>All the keywords except <code>True</code>, <code>False</code> and <code>None</code> are in lowercase and they must be written as they are. The list of all the keywords is given below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>False</code>\n<code>await</code>\n<code>else</code>\n<code>import</code>\n<code>pass</code>\n<code>None</code>\n<code>break</code>\n<code>except</code>\n<code>in</code>\n<code>raise</code>\n<code>True</code>\n<code>class</code>\n<code>finally</code>\n<code>is</code>\n<code>return</code>\n<code>and</code>\n<code>continue</code>\n<code>for</code>\n<code>lambda</code>\n<code>try</code>\n<code>as</code>\n<code>def</code>\n<code>from</code>\n<code>nonlocal</code>\n<code>while</code>\n<code>assert</code>\n<code>del</code>\n<code>global</code>\n<code>not</code>\n<code>with</code>\n<code>async</code>\n<code>elif</code>\n<code>if</code>\n<code>or</code>\n<code>yield</code></pre>\n\n\n\n<p>Looking at all the keywords at once and trying to figure out what they mean might be overwhelming.</p>\n\n\n\n<p>If you want to have an overview, here is the complete&nbsp;list of all the keywords&nbsp;with examples.</p>\n\n\n\n<h2 id=\"iden\">Python Identifiers</h2>\n\n\n\n<p>An identifier is a name given to entities like class, functions, variables, etc. It helps to differentiate one entity from another.</p>\n\n\n\n<h3 id=\"rules\">Rules for writing identifiers</h3>\n\n\n\n<ol><li>Identifiers can be a combination of letters in lowercase <strong>(a to z)</strong> or uppercase <strong>(A to Z)</strong> or digits <strong>(0 to 9)</strong> or an underscore <code>_</code>. Names like <code>myClass</code>, <code>var_1</code> and <code>print_this_to_screen</code>, all are valid example.</li><li>An identifier cannot start with a digit. <code>1variable</code> is invalid, but <code>variable1</code> is a valid name.</li><li>Keywords cannot be used as identifiers. <code> </code></li><li>We cannot use special symbols like <strong>!</strong>, <strong>@</strong>, <strong>#</strong>, <strong>$</strong>, <strong>%</strong> etc. in our identifier.<code>a@ = 0</code><br><strong>Output</strong><samp> File &#8220;&lt;interactive input>&#8221;, line 1 a@ = 0 ^ SyntaxError: invalid syntax</samp></li><li>An identifier can be of any length.</li></ol>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about keywords (reserved words in Python) and identifiers (names given to variables, functions, etc.). Python Keywords Keywords are the reserved words in Python. We cannot use a keyword as a&nbsp;variable&nbsp;name,&nbsp;function&nbsp;name or any other identifier. They are used to define the syntax and structure of the Python language. In Python, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5276"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5276"}],"version-history":[{"count":3,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5276/revisions"}],"predecessor-version":[{"id":5297,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5276/revisions/5297"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5276"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5276"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5276"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5279,"date":"2022-01-24T11:37:23","date_gmt":"2022-01-24T11:37:23","guid":{"rendered":"https://python3.foobrdigital.com/?p=5279"},"modified":"2022-01-24T11:59:42","modified_gmt":"2022-01-24T11:59:42","slug":"python-statement-indentation-and-comments","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-statement-indentation-and-comments/","title":{"rendered":"Python Statement, Indentation and Comments"},"content":{"rendered":"\n<p>In this tutorial, you will learn about Python statements, why indentation is important and use of comments in programming.</p>\n\n\n\n<h2 id=\"statement\">Python Statement</h2>\n\n\n\n<p>Instructions that a Python interpreter can execute are called statements. For example,&nbsp;<code>a = 1</code>&nbsp;is an assignment statement.&nbsp;<code>if</code>&nbsp;statement,&nbsp;<code>for</code>&nbsp;statement,&nbsp;<code>while</code>&nbsp;statement, etc. are other kinds of statements which will be discussed later.</p>\n\n\n\n<h3 id=\"multi-line\">Multi-line statement</h3>\n\n\n\n<p>In Python, the end of a statement is marked by a newline character. But we can make a statement extend over multiple lines with the line continuation character (\\). For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 1 + 2 + 3 + \\\n    4 + 5 + 6 + \\\n    7 + 8 + 9</code></pre>\n\n\n\n<p>This is an explicit line continuation. In Python, line continuation is implied inside parentheses&nbsp;<var>( )</var>, brackets&nbsp;<var>[ ]</var>, and braces&nbsp;<var>{ }</var>. For instance, we can implement the above multi-line statement as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = (1 + 2 + 3 +\n    4 + 5 + 6 +\n    7 + 8 + 9)</code></pre>\n\n\n\n<p>Here, the surrounding parentheses&nbsp;<var>( )</var>&nbsp;do the line continuation implicitly. Same is the case with&nbsp;<var>[ ]</var>&nbsp;and&nbsp;<var>{ }</var>. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>colors = &#91;'red',\n          'blue',\n          'green']</code></pre>\n\n\n\n<p>We can also put multiple statements in a single line using semicolons, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 1; b = 2; c = 3</code></pre>\n\n\n\n<h2 id=\"indentation\">Python Indentation</h2>\n\n\n\n<p>Most of the programming languages like C, C++, and Java use braces&nbsp;<var>{ }</var>&nbsp;to define a block of code. Python, however, uses indentation.</p>\n\n\n\n<p>A code block (body of a function, loop, etc.) starts with indentation and ends with the first unindented line. The amount of indentation is up to you, but it must be consistent throughout that block.</p>\n\n\n\n<p>Generally, four whitespaces are used for indentation and are preferred over tabs. Here is an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for i in range(1,11):\n    print(i)\n    if i == 5:\n        break</code></pre>\n\n\n\n<p>The enforcement of indentation in Python makes the code look neat and clean. This results in Python programs that look similar and consistent.</p>\n\n\n\n<p>Indentation can be ignored in line continuation, but it&#8217;s always a good idea to indent. It makes the code more readable. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if True:\n    print('Hello')\n    a = 5</code></pre>\n\n\n\n<p>and</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if True: print('Hello'); a = 5</code></pre>\n\n\n\n<p>both are valid and do the same thing, but the former style is clearer.</p>\n\n\n\n<p>Incorrect indentation will result in&nbsp;<code>IndentationError</code>.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about Python statements, why indentation is important and use of comments in programming. Python Statement Instructions that a Python interpreter can execute are called statements. For example,&nbsp;a = 1&nbsp;is an assignment statement.&nbsp;if&nbsp;statement,&nbsp;for&nbsp;statement,&nbsp;while&nbsp;statement, etc. are other kinds of statements which will be discussed later. Multi-line statement In Python, the end [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5279"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5279"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5279/revisions"}],"predecessor-version":[{"id":5280,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5279/revisions/5280"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5279"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5279"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5279"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5282,"date":"2022-01-24T11:42:17","date_gmt":"2022-01-24T11:42:17","guid":{"rendered":"https://python3.foobrdigital.com/?p=5282"},"modified":"2022-01-24T11:59:42","modified_gmt":"2022-01-24T11:59:42","slug":"python-variables-constants-and-literals","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-variables-constants-and-literals/","title":{"rendered":"Python Variables, Constants and Literals"},"content":{"rendered":"\n<p>In this tutorial, you will learn about Python variables, constants, literals and their use cases.</p>\n\n\n\n<h2 id=\"variable\">Python Variables</h2>\n\n\n\n<p>A variable is a named location used to store data in the memory. It is helpful to think of variables as a container that holds data that can be changed later in the program. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>number = 10\n</code></pre>\n\n\n\n<p>Here, we have created a variable named&nbsp;<var>number</var>. We have assigned the value&nbsp;<samp>10</samp>&nbsp;to the variable.</p>\n\n\n\n<p>You can think of variables as a bag to store books in it and that book can be replaced at any time.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>number = 10\nnumber = 1.1\n</code></pre>\n\n\n\n<p>Initially, the value of&nbsp;<var>number</var>&nbsp;was&nbsp;<samp>10</samp>. Later, it was changed to&nbsp;<samp>1.1</samp>.</p>\n\n\n\n<p><strong>Note</strong>: In Python, we don&#8217;t actually assign values to the variables. Instead, Python gives the reference of the object(value) to the variable.</p>\n\n\n\n<h2 id=\"value-variable\">Assigning values to Variables in Python</h2>\n\n\n\n<p>As you can see from the above example, you can use the assignment operator&nbsp;<code>=</code>&nbsp;to assign a value to a variable.</p>\n\n\n\n<h3>Example 1: Declaring and assigning value to a variable</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>website = \"apple.com\"\nprint(website)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>apple.com\n</samp></code></pre>\n\n\n\n<p>In the above program, we assigned a value&nbsp;<samp>apple.com</samp>&nbsp;to the variable&nbsp;<var>website</var>. Then, we printed out the value assigned to&nbsp;<var>website</var>&nbsp;i.e.&nbsp;<samp>apple.com</samp></p>\n\n\n\n<p><strong>Note</strong>: Python is a type-inferred language, so you don&#8217;t have to explicitly define the variable type. It automatically knows that <samp>apple.com</samp> is a string and declares the <var>website</var> variable as a string.</p>\n\n\n\n<h3>Example 2: Changing the value of a variable</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>website = \"apple.com\"\nprint(website)\n\n# assigning a new value to website\nwebsite = \"programiz.com\"\n\nprint(website)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>apple.com\nprogramiz.com\n</samp></code></pre>\n\n\n\n<p>In the above program, we have assigned&nbsp;<samp>apple.com</samp>&nbsp;to the&nbsp;<var>website</var>&nbsp;variable initially. Then, the value is changed to&nbsp;<samp>programiz.com</samp>.</p>\n\n\n\n<h3>Example 3: Assigning multiple values to multiple variables</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a, b, c = 5, 3.2, \"Hello\"\n\nprint (a)\nprint (b)\nprint (c)\n</code></pre>\n\n\n\n<p>If we want to assign the same value to multiple variables at once, we can do this as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x = y = z = \"same\"\n\nprint (x)\nprint (y)\nprint (z)\n</code></pre>\n\n\n\n<p>The second program assigns the&nbsp;<samp>same</samp>&nbsp;string to all the three variables&nbsp;<var>x</var>,&nbsp;<var>y</var>&nbsp;and&nbsp;<var>z</var>.</p>\n\n\n\n<h2 id=\"constants\">Constants</h2>\n\n\n\n<p>A constant is a type of variable whose value cannot be changed. It is helpful to think of constants as containers that hold information which cannot be changed later.</p>\n\n\n\n<p>You can think of constants as a bag to store some books which cannot be replaced once placed inside the bag.</p>\n\n\n\n<h2 id=\"value-constant\">Assigning value to constant in Python</h2>\n\n\n\n<p>In Python, constants are usually declared and assigned in a module. Here, the module is a new file containing variables, functions, etc which is imported to the main file. Inside the module, constants are written in all capital letters and underscores separating the words.</p>\n\n\n\n<h3>Example 3: Declaring and assigning value to a constant</h3>\n\n\n\n<p>Create a&nbsp;<strong>constant.py</strong>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>PI = 3.14\nGRAVITY = 9.8\n</code></pre>\n\n\n\n<p>Create a&nbsp;<strong>main.py</strong>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import constant\n\nprint(constant.PI)\nprint(constant.GRAVITY)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>3.14\n9.8\n</samp></code></pre>\n\n\n\n<p>In the above program, we create a&nbsp;<strong>constant.py</strong>&nbsp;module file. Then, we assign the constant value to&nbsp;<var>PI</var>&nbsp;and&nbsp;<var>GRAVITY</var>. After that, we create a&nbsp;<strong>main.py</strong>&nbsp;file and import the&nbsp;<code>constant</code>&nbsp;module. Finally, we print the constant value.</p>\n\n\n\n<p><strong>Note</strong>: In reality, we don&#8217;t use constants in Python. Naming them in all capital letters is a convention to separate them from variables, however, it does not actually prevent reassignment.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2 id=\"rules-naming-convention\">Rules and Naming Convention for Variables and constants</h2>\n\n\n\n<ol><li>Constant and variable names should have a combination of letters in lowercase (a to z) or uppercase (<strong>A to Z</strong>) or digits (<strong>0 to 9</strong>) or an underscore (<strong>_</strong>). For example:snake_case MACRO_CASE camelCase CapWords</li><li>Create a name that makes sense. For example,&nbsp;<var>vowel</var>&nbsp;makes more sense than&nbsp;<var>v</var>.</li><li>If you want to create a variable name having two words, use underscore to separate them.&nbsp;For example:my_name current_salary</li><li>Use capital letters possible to declare a constant. For example:PI G MASS SPEED_OF_LIGHT TEMP</li><li>Never use special symbols like !, @, #, $, %, etc.</li><li>Don&#8217;t start a variable name with a digit.</li></ol>\n\n\n\n<h2 id=\"literals\">Literals</h2>\n\n\n\n<p>Literal is a raw data given in a variable or constant. In Python, there are various types of literals they are as follows:</p>\n\n\n\n<h2 id=\"numeric-literals\">Numeric Literals</h2>\n\n\n\n<p>Numeric Literals are immutable (unchangeable). Numeric literals can belong to 3 different numerical types:&nbsp;<code>Integer</code>,&nbsp;<code>Float</code>, and&nbsp;<code>Complex</code>.</p>\n\n\n\n<h3>Example 4: How to use Numeric literals in Python?</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 0b1010 #Binary Literals\nb = 100 #Decimal Literal \nc = 0o310 #Octal Literal\nd = 0x12c #Hexadecimal Literal\n\n#Float Literal\nfloat_1 = 10.5 \nfloat_2 = 1.5e2\n\n#Complex Literal \nx = 3.14j\n\nprint(a, b, c, d)\nprint(float_1, float_2)\nprint(x, x.imag, x.real)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>10 100 200 300\n10.5 150.0\n3.14j 3.14 0.0\n</samp></code></pre>\n\n\n\n<p>In the above program,</p>\n\n\n\n<ul><li>We assigned integer literals into different variables. Here,&nbsp;<var>a</var>&nbsp;is binary literal,&nbsp;<var>b</var>&nbsp;is a decimal literal,&nbsp;<var>c</var>&nbsp;is an octal literal and&nbsp;<var>d</var>&nbsp;is a hexadecimal literal.</li><li>When we print the variables, all the literals are converted into decimal values.</li><li><samp>10.5</samp>&nbsp;and&nbsp;<samp>1.5e2</samp>&nbsp;are floating-point literals.&nbsp;<samp>1.5e2</samp>&nbsp;is expressed with exponential and is equivalent to&nbsp;<samp>1.5 * 10<sup>2</sup></samp>.</li><li>We assigned a complex literal i.e&nbsp;<samp>3.14j</samp>&nbsp;in variable&nbsp;<var>x</var>. Then we use&nbsp;<strong>imaginary</strong>&nbsp;literal (x.imag) and&nbsp;<strong>real</strong>&nbsp;literal (x.real) to create imaginary and real parts of complex numbers.</li></ul>\n\n\n\n<p>To learn more about Numeric Literals, refer to Python Numbers.</p>\n\n\n\n<h2 id=\"string-literals\">String literals</h2>\n\n\n\n<p>A string literal is a sequence of characters surrounded by quotes. We can use both single, double, or triple quotes for a string. And, a character literal is a single character surrounded by single or double quotes.</p>\n\n\n\n<h3>Example 7: How to use string literals in Python?</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>strings = \"This is Python\"\nchar = \"C\"\nmultiline_str = \"\"\"This is a multiline string with more than one line code.\"\"\"\nunicode = u\"\\u00dcnic\\u00f6de\"\nraw_str = r\"raw \\n string\"\n\nprint(strings)\nprint(char)\nprint(multiline_str)\nprint(unicode)\nprint(raw_str)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>This is Python\nC\nThis is a multiline string with more than one line code.\nÜnicöde\nraw \\n string\n</samp></code></pre>\n\n\n\n<p>In the above program,&nbsp;<samp>This is Python</samp>&nbsp;is a string literal and&nbsp;<samp>C</samp>&nbsp;is a character literal.</p>\n\n\n\n<p>The value in triple-quotes&nbsp;<code>\"\"\"</code>&nbsp;assigned to the&nbsp;<var>multiline_str</var>&nbsp;is a multi-line string literal.</p>\n\n\n\n<p>The string&nbsp;<samp>u&#8221;\\u00dcnic\\u00f6de&#8221;</samp>&nbsp;is a Unicode literal which supports characters other than English. In this case,&nbsp;<samp>\\u00dc</samp>&nbsp;represents&nbsp;<code>Ü</code>&nbsp;and&nbsp;<samp>\\u00f6</samp>&nbsp;represents&nbsp;<code>ö</code>.</p>\n\n\n\n<p><samp>r&#8221;raw \\n string&#8221;</samp>&nbsp;is a raw string literal.</p>\n\n\n\n<h2 id=\"boolean-literals\">Boolean literals</h2>\n\n\n\n<p>A Boolean literal can have any of the two values:&nbsp;<code>True</code>&nbsp;or&nbsp;<code>False</code>.</p>\n\n\n\n<h3>Example 8: How to use boolean literals in Python?</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x = (1 == True)\ny = (1 == False)\na = True + 4\nb = False + 10\n\nprint(\"x is\", x)\nprint(\"y is\", y)\nprint(\"a:\", a)\nprint(\"b:\", b)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>x is True\ny is False\na: 5\nb: 10\n</samp></code></pre>\n\n\n\n<p>In the above program, we use boolean literal&nbsp;<code>True</code>&nbsp;and&nbsp;<code>False</code>. In Python,&nbsp;<code>True</code>&nbsp;represents the value as&nbsp;<samp>1</samp>&nbsp;and&nbsp;<code>False</code>&nbsp;as&nbsp;<samp>0</samp>. The value of&nbsp;<var>x</var>&nbsp;is&nbsp;<code>True</code>&nbsp;because&nbsp;<samp>1</samp>&nbsp;is equal to&nbsp;<code>True</code>. And, the value of&nbsp;<var>y</var>&nbsp;is&nbsp;<code>False</code>&nbsp;because&nbsp;<samp>1</samp>&nbsp;is not equal to&nbsp;<code>False</code>.</p>\n\n\n\n<p>Similarly, we can use the&nbsp;<code>True</code>&nbsp;and&nbsp;<code>False</code>&nbsp;in numeric expressions as the value. The value of&nbsp;<var>a</var>&nbsp;is&nbsp;<samp>5</samp>&nbsp;because we add&nbsp;<code>True</code>&nbsp;which has a value of&nbsp;<samp>1</samp>&nbsp;with&nbsp;<samp>4</samp>. Similarly,&nbsp;<var>b</var>&nbsp;is&nbsp;<samp>10</samp>&nbsp;because we add the&nbsp;<code>False</code>&nbsp;having value of&nbsp;<samp>0</samp>&nbsp;with&nbsp;<samp>10</samp>.</p>\n\n\n\n<h2 id=\"special-literals\">Special literals</h2>\n\n\n\n<p>Python contains one special literal i.e.&nbsp;<code>None</code>. We use it to specify that the field has not been created.</p>\n\n\n\n<h3>Example 9: How to use special literals in Python?</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>drink = \"Available\"\nfood = None\n\ndef menu(x):\n    if x == drink:\n        print(drink)\n    else:\n        print(food)\n\nmenu(drink)\nmenu(food)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>Available\nNone\n</samp></code></pre>\n\n\n\n<p>In the above program, we define a&nbsp;<code>menu</code>&nbsp;function. Inside&nbsp;<code>menu</code>, when we set the argument as&nbsp;<code>drink</code>&nbsp;then, it displays&nbsp;<code>Available</code>. And, when the argument is&nbsp;<code>food</code>, it displays&nbsp;<code>None</code>.</p>\n\n\n\n<h2 id=\"literal-collections\">Literal Collections</h2>\n\n\n\n<p>There are four different literal collections List literals, Tuple literals, Dict literals, and Set literals.</p>\n\n\n\n<h3>Example 10: How to use literals collections in Python?</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fruits = &#91;\"apple\", \"mango\", \"orange\"] #list\nnumbers = (1, 2, 3) #tuple\nalphabets = {'a':'apple', 'b':'ball', 'c':'cat'} #dictionary\nvowels = {'a', 'e', 'i' , 'o', 'u'} #set\n\nprint(fruits)\nprint(numbers)\nprint(alphabets)\nprint(vowels)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>&#91;'apple', 'mango', 'orange']\n(1, 2, 3)\n{'a': 'apple', 'b': 'ball', 'c': 'cat'}\n{'e', 'a', 'o', 'i', 'u'}\n</samp></code></pre>\n\n\n\n<p>In the above program, we created a list of&nbsp;<var>fruits</var>, a tuple of&nbsp;<var>numbers</var>, a dictionary&nbsp;<var>dict</var>&nbsp;having values with keys designated to each value and a set of&nbsp;<var>vowels</var>.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about Python variables, constants, literals and their use cases. Python Variables A variable is a named location used to store data in the memory. It is helpful to think of variables as a container that holds data that can be changed later in the program. For example, Here, we [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5282"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5282"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5282/revisions"}],"predecessor-version":[{"id":5283,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5282/revisions/5283"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5282"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5282"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5282"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5285,"date":"2022-01-24T11:48:22","date_gmt":"2022-01-24T11:48:22","guid":{"rendered":"https://python3.foobrdigital.com/?p=5285"},"modified":"2022-01-24T11:59:42","modified_gmt":"2022-01-24T11:59:42","slug":"python-data-types","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-data-types/","title":{"rendered":"Python Data Types"},"content":{"rendered":"\n<p>In this tutorial, you will learn about different data types you can use in Python.</p>\n\n\n\n<h2 id=\"types\">Data types in Python</h2>\n\n\n\n<p>Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.</p>\n\n\n\n<p>There are various data types in Python. Some of the important types are listed below.</p>\n\n\n\n<h2 id=\"number\">Python Numbers</h2>\n\n\n\n<p>Integers, floating point numbers and complex numbers fall under Python numbers category. They are defined as <code>int</code>, <code>float</code> and <code>complex</code> classes in Python.</p>\n\n\n\n<p>We can use the&nbsp;<code>type()</code>&nbsp;function to know which class a variable or a value belongs to. Similarly, the&nbsp;<code>isinstance()</code>&nbsp;function is used to check if an object belongs to a particular class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 5\nprint(a, \"is of type\", type(a))\n\na = 2.0\nprint(a, \"is of type\", type(a))\n\na = 1+2j\nprint(a, \"is complex number?\", isinstance(1+2j,complex))\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>5 is of type &lt;class 'int'&gt;\n2.0 is of type &lt;class 'float'&gt;\n(1+2j) is complex number? True\n</samp></code></pre>\n\n\n\n<p>Integers can be of any length, it is only limited by the memory available.</p>\n\n\n\n<p>A floating-point number is accurate up to 15 decimal places. Integer and floating points are separated by decimal points.&nbsp;<samp>1</samp>&nbsp;is an integer,&nbsp;<samp>1.0</samp>&nbsp;is a floating-point number.</p>\n\n\n\n<p>Complex numbers are written in the form,&nbsp;<code>x + yj</code>, where&nbsp;<var>x</var>&nbsp;is the real part and&nbsp;<var>y</var>&nbsp;is the imaginary part. Here are some examples.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; a = 1234567890123456789\n&gt;&gt;&gt; a\n1234567890123456789\n&gt;&gt;&gt; b = 0.1234567890123456789\n&gt;&gt;&gt; b\n0.12345678901234568\n&gt;&gt;&gt; c = 1+2j\n&gt;&gt;&gt; c\n(1+2j)\n</code></pre>\n\n\n\n<p>Notice that the&nbsp;<code>float</code>&nbsp;variable&nbsp;<var>b</var>&nbsp;got truncated.</p>\n\n\n\n<h2 id=\"list\">Python List</h2>\n\n\n\n<p>List is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.</p>\n\n\n\n<p>Declaring a list is pretty straight forward. Items separated by commas are enclosed within brackets&nbsp;<code>[ ]</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = &#91;1, 2.2, 'python']\n</code></pre>\n\n\n\n<p>We can use the slicing operator&nbsp;<code>[ ]</code>&nbsp;to extract an item or a range of items from a list. The index starts from 0 in Python.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = &#91;5,10,15,20,25,30,35,40]\n\n# a&#91;2] = 15\nprint(\"a&#91;2] = \", a&#91;2])\n\n# a&#91;0:3] = &#91;5, 10, 15]\nprint(\"a&#91;0:3] = \", a&#91;0:3])\n\n# a&#91;5:] = &#91;30, 35, 40]\nprint(\"a&#91;5:] = \", a&#91;5:])\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><samp>a[2] =  15\na[0:3] =  [5, 10, 15]\na[5:] =  [30, 35, 40]\n</samp></pre>\n\n\n\n<p>Lists are mutable, meaning, the value of elements of a list can be altered.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = &#91;1, 2, 3]\na&#91;2] = 4\nprint(a)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>&#91;1, 2, 4]\n</samp></code></pre>\n\n\n\n<h2 id=\"tuple\">Python Tuple</h2>\n\n\n\n<p>Tuple is an ordered sequence of items same as a list. The only difference is that tuples are immutable. Tuples once created cannot be modified.</p>\n\n\n\n<p>Tuples are used to write-protect data and are usually faster than lists as they cannot change dynamically.</p>\n\n\n\n<p>It is defined within parentheses&nbsp;<code>()</code>&nbsp;where items are separated by commas.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>t = (5,'program', 1+3j)\n</code></pre>\n\n\n\n<p>We can use the slicing operator&nbsp;<code>[]</code>&nbsp;to extract items but we cannot change its value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>t = (5,'program', 1+3j)\n\n# t&#91;1] = 'program'\nprint(\"t&#91;1] = \", t&#91;1])\n\n# t&#91;0:3] = (5, 'program', (1+3j))\nprint(\"t&#91;0:3] = \", t&#91;0:3])\n\n# Generates error\n# Tuples are immutable\nt&#91;0] = 10\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>t&#91;1] =  program\nt&#91;0:3] =  (5, 'program', (1+3j))\nTraceback (most recent call last):\n  File \"test.py\", line 11, in &lt;module&gt;\n    t&#91;0] = 10\nTypeError: 'tuple' object does not support item assignment\n</samp></code></pre>\n\n\n\n<h2 id=\"string\">Python Strings</h2>\n\n\n\n<p>String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, <code>'''</code> or <code>\"\"\"</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>s = \"This is a string\"\nprint(s)\ns = '''A multiline\nstring'''\nprint(s)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>This is a string\nA multiline\nstring\n</samp></code></pre>\n\n\n\n<p>Just like a list and tuple, the slicing operator&nbsp;<code>[ ]</code>&nbsp;can be used with strings. Strings, however, are immutable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>s = 'Hello world!'\n\n# s&#91;4] = 'o'\nprint(\"s&#91;4] = \", s&#91;4])\n\n# s&#91;6:11] = 'world'\nprint(\"s&#91;6:11] = \", s&#91;6:11])\n\n# Generates error\n# Strings are immutable in Python\ns&#91;5] ='d'\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>s&#91;4] =  o\ns&#91;6:11] =  world\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 11, in &lt;module&gt;\nTypeError: 'str' object does not support item assignment\n</samp></code></pre>\n\n\n\n<h2 id=\"set\">Python Set</h2>\n\n\n\n<p>Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces <code>{ }</code>. Items in a set are not ordered.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = {5,2,3,1,4}\n\n# printing set variable\nprint(\"a = \", a)\n\n# data type of variable a\nprint(type(a))\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>a =  {1, 2, 3, 4, 5}\n&lt;class 'set'&gt;\n</samp></code></pre>\n\n\n\n<p>We can perform set operations like union, intersection on two sets. Sets have unique values. They eliminate duplicates.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = {1,2,2,3,3,3}\nprint(a)\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>{1, 2, 3}\n</samp></code></pre>\n\n\n\n<p>Since, set are unordered collection, indexing has no meaning. Hence, the slicing operator&nbsp;<code>[]</code>&nbsp;does not work.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; a = {1,2,3}\n&gt;&gt;&gt; a&#91;1]\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 301, in runcode\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: 'set' object does not support indexing\n</code></pre>\n\n\n\n<h2 id=\"dic\">Python Dictionary</h2>\n\n\n\n<p>Dictionary is an unordered collection of key-value pairs.</p>\n\n\n\n<p>It is generally used when we have a huge amount of data. Dictionaries are optimized for retrieving data. We must know the key to retrieve the value.</p>\n\n\n\n<p>In Python, dictionaries are defined within braces&nbsp;<code>{}</code>&nbsp;with each item being a pair in the form&nbsp;<code>key:value</code>. Key and value can be of any type.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; d = {1:'value','key':2}\n&gt;&gt;&gt; type(d)\n&lt;class 'dict'&gt;\n</code></pre>\n\n\n\n<p>We use key to retrieve the respective value. But not the other way around.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>d = {1:'value','key':2}\nprint(type(d))\n\nprint(\"d&#91;1] = \", d&#91;1])\n\nprint(\"d&#91;'key'] = \", d&#91;'key'])\n\n# Generates error\nprint(\"d&#91;2] = \", d&#91;2])\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>&lt;class 'dict'&gt;\nd&#91;1] =  value\nd&#91;'key'] =  2\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 9, in &lt;module&gt;\nKeyError: 2\n</samp></code></pre>\n\n\n\n<h2 id=\"con\">Conversion between data types</h2>\n\n\n\n<p>We can convert between different data types by using different type conversion functions like&nbsp;<code>int()</code>,&nbsp;<code>float()</code>,&nbsp;<code>str()</code>, etc.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; float(5)\n5.0\n</code></pre>\n\n\n\n<p>Conversion from float to int will truncate the value (make it closer to zero).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; int(10.6)\n10\n&gt;&gt;&gt; int(-10.6)\n-10\n</code></pre>\n\n\n\n<p>Conversion to and from string must contain compatible values.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; float('2.5')\n2.5\n&gt;&gt;&gt; str(25)\n'25'\n&gt;&gt;&gt; int('1p')\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 301, in runcode\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: '1p'\n</code></pre>\n\n\n\n<p>We can even convert one sequence to another.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; set(&#91;1,2,3])\n{1, 2, 3}\n&gt;&gt;&gt; tuple({5,6,7})\n(5, 6, 7)\n&gt;&gt;&gt; list('hello')\n&#91;'h', 'e', 'l', 'l', 'o']\n</code></pre>\n\n\n\n<p>To convert to dictionary, each element must be a pair:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; dict(&#91;&#91;1,2],&#91;3,4]])\n{1: 2, 3: 4}\n&gt;&gt;&gt; dict(&#91;(3,26),(4,44)])\n{3: 26, 4: 44}\n</code></pre>\n\n\n\n<p><a href=\"https://www.programiz.com/python-programming/variables-constants-literals\"></a></p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about different data types you can use in Python. Data types in Python Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes. There are various data types in Python. Some [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5285"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5285"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5285/revisions"}],"predecessor-version":[{"id":5286,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5285/revisions/5286"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5285"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5285"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5285"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5287,"date":"2022-01-24T11:50:32","date_gmt":"2022-01-24T11:50:32","guid":{"rendered":"https://python3.foobrdigital.com/?p=5287"},"modified":"2022-01-24T11:59:42","modified_gmt":"2022-01-24T11:59:42","slug":"python-type-conversion-and-type-casting","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-type-conversion-and-type-casting/","title":{"rendered":"Python Type Conversion and Type Casting"},"content":{"rendered":"\n<p>In this article, you will learn about the Type conversion and uses of type conversion.</p>\n\n\n\n<p>Before learning Type Conversion in Python, you should have knowledge about Python Data Types.</p>\n\n\n\n<h2 id=\"type-conversion\">Type Conversion</h2>\n\n\n\n<p>The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion. Python has two types of type conversion.</p>\n\n\n\n<ol><li>Implicit Type Conversion</li><li>Explicit Type Conversion</li></ol>\n\n\n\n<h2 id=\"implicit-conversion\">Implicit Type Conversion</h2>\n\n\n\n<p>In Implicit type conversion, Python automatically converts one data type to another data type. This process doesn&#8217;t need any user involvement.</p>\n\n\n\n<p>Let&#8217;s see an example where Python promotes the conversion of the lower data type (integer) to the higher data type (float) to avoid data loss.</p>\n\n\n\n<h3>Example 1: Converting integer to float</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>num_int = 123\nnum_flo = 1.23\n\nnum_new = num_int + num_flo\n\nprint(\"datatype of num_int:\",type(num_int))\nprint(\"datatype of num_flo:\",type(num_flo))\n\nprint(\"Value of num_new:\",num_new)\nprint(\"datatype of num_new:\",type(num_new))</code></pre>\n\n\n\n<p>When we run the above program, the output will be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>datatype of num_int: &lt;class 'int'&gt;\ndatatype of num_flo: &lt;class 'float'&gt;\n\nValue of num_new: 124.23\ndatatype of num_new: &lt;class 'float'&gt;</samp></code></pre>\n\n\n\n<p>In the above program,</p>\n\n\n\n<ul><li>We add two variables&nbsp;<var>num_int</var>&nbsp;and&nbsp;<var>num_flo</var>, storing the value in&nbsp;<var>num_new</var>.</li><li>We will look at the data type of all three objects respectively.</li><li>In the output, we can see the data type of&nbsp;<var>num_int</var>&nbsp;is an&nbsp;<code>integer</code>&nbsp;while the data type of&nbsp;<var>num_flo</var>&nbsp;is a&nbsp;<code>float</code>.</li><li>Also, we can see the&nbsp;<var>num_new</var>&nbsp;has a&nbsp;<code>float</code>&nbsp;data type because Python always converts smaller data types to larger data types to avoid the loss of data.</li></ul>\n\n\n\n<p>Now, let&#8217;s try adding a string and an integer, and see how Python deals with it.</p>\n\n\n\n<h3>Example 2: Addition of string(higher) data type and integer(lower) datatype</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>num_int = 123\nnum_str = \"456\"\n\nprint(\"Data type of num_int:\",type(num_int))\nprint(\"Data type of num_str:\",type(num_str))\n\nprint(num_int+num_str)</code></pre>\n\n\n\n<p>When we run the above program, the output will be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>Data type of num_int: &lt;class 'int'&gt; \nData type of num_str: &lt;class 'str'&gt; \n\nTraceback (most recent call last): \n  File \"python\", line 7, in &lt;module&gt; \nTypeError: unsupported operand type(s) for +: 'int' and 'str'</samp></code></pre>\n\n\n\n<p>In the above program,</p>\n\n\n\n<ul><li>We add two variables&nbsp;<var>num_int</var>&nbsp;and&nbsp;<var>num_str</var>.</li><li>As we can see from the output, we got&nbsp;<code>TypeError</code>. Python is not able to use Implicit Conversion in such conditions.</li><li>However, Python has a solution for these types of situations which is known as Explicit Conversion.</li></ul>\n\n\n\n<h2 id=\"type-casting\">Explicit Type Conversion</h2>\n\n\n\n<p>In Explicit Type Conversion, users convert the data type of an object to required data type. We use the predefined functions like&nbsp;<code>int()</code>,&nbsp;<code>float()</code>,&nbsp;<code>str()</code>, etc to perform explicit type conversion.</p>\n\n\n\n<p>This type of conversion is also called typecasting because the user casts (changes) the data type of the objects.</p>\n\n\n\n<p>Syntax :</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;required_datatype&gt;(expression)</code></pre>\n\n\n\n<p>Typecasting can be done by assigning the required data type function to the expression.</p>\n\n\n\n<h3>Example 3: Addition of string and integer using explicit conversion</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>num_int = 123\nnum_str = \"456\"\n\nprint(\"Data type of num_int:\",type(num_int))\nprint(\"Data type of num_str before Type Casting:\",type(num_str))\n\nnum_str = int(num_str)\nprint(\"Data type of num_str after Type Casting:\",type(num_str))\n\nnum_sum = num_int + num_str\n\nprint(\"Sum of num_int and num_str:\",num_sum)\nprint(\"Data type of the sum:\",type(num_sum))</code></pre>\n\n\n\n<p>When we run the above program, the output will be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>Data type of num_int: &lt;class 'int'&gt;\nData type of num_str before Type Casting: &lt;class 'str'&gt;\n\nData type of num_str after Type Casting: &lt;class 'int'&gt;\n\nSum of num_int and num_str: 579\nData type of the sum: &lt;class 'int'&gt;</samp></code></pre>\n\n\n\n<p>In the above program,</p>\n\n\n\n<ul><li>We add&nbsp;<var>num_str</var>&nbsp;and&nbsp;<var>num_int</var>&nbsp;variable.</li><li>We converted&nbsp;<var>num_str</var>&nbsp;from string(higher) to integer(lower) type using&nbsp;<code>int()</code>&nbsp;function to perform the addition.</li><li>After converting&nbsp;<var>num_str</var>&nbsp;to an integer value, Python is able to add these two variables.</li><li>We got the&nbsp;<var>num_sum</var>&nbsp;value and data type to be an integer.</li></ul>\n\n\n\n<h2 id=\"key-points\">Key Points to Remember</h2>\n\n\n\n<ol><li>Type Conversion is the conversion of object from one data type to another data type.</li><li>Implicit Type Conversion is automatically performed by the Python interpreter.</li><li>Python avoids the loss of data in Implicit Type Conversion.</li><li>Explicit Type Conversion is also called Type Casting, the data types of objects are converted using predefined functions by the user.</li><li>In Type Casting, loss of data may occur as we enforce the object to a specific data type.</li></ol>\n\n\n\n<p><a href=\"https://www.programiz.com/python-programming/variables-datatypes\"></a></p>\n","protected":false},"excerpt":{"rendered":"<p>In this article, you will learn about the Type conversion and uses of type conversion. Before learning Type Conversion in Python, you should have knowledge about Python Data Types. Type Conversion The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion. Python has two types of type [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5287"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5287"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5287/revisions"}],"predecessor-version":[{"id":5288,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5287/revisions/5288"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5287"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5287"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5287"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5289,"date":"2022-01-24T11:53:17","date_gmt":"2022-01-24T11:53:17","guid":{"rendered":"https://python3.foobrdigital.com/?p=5289"},"modified":"2022-01-24T11:59:42","modified_gmt":"2022-01-24T11:59:42","slug":"python-input-output-and-import","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-input-output-and-import/","title":{"rendered":"Python Input, Output and Import"},"content":{"rendered":"\n<p>This tutorial focuses on two built-in functions print() and input() to perform I/O task in Python. Also, you will learn to import modules and use them in your program.</p>\n\n\n\n<p>Python provides numerous built-in functions that are readily available to us at the Python prompt.</p>\n\n\n\n<p>Some of the functions like <code>input()</code> and <code>print()</code> are widely used for standard input and output operations respectively. Let us see the output section first.</p>\n\n\n\n<h2 id=\"output\">Python Output Using print() function</h2>\n\n\n\n<p>We use the <code>print()</code> function to output data to the standard output device (screen). We can also output data to a file, but this will be discussed later.</p>\n\n\n\n<p>An example of its use is given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nprint('This sentence is output to the screen')</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>This sentence is output to the screen</samp></code></pre>\n\n\n\n<p>Another example is given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 5\nprint('The value of a is', a)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>The value of a is 5</samp></code></pre>\n\n\n\n<p>In the second <code>print()</code> statement, we can notice that space was added between the string and the value of variable <var>a</var>. This is by default, but we can change it.</p>\n\n\n\n<p>The actual syntax of the&nbsp;<code>print()</code>&nbsp;function is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)</code></pre>\n\n\n\n<p>Here,&nbsp;<code>objects</code>&nbsp;is the value(s) to be printed.</p>\n\n\n\n<p>The&nbsp;<code>sep</code>&nbsp;separator is used between the values. It defaults into a space character.</p>\n\n\n\n<p>After all values are printed,&nbsp;<code>end</code>&nbsp;is printed. It defaults into a new line.</p>\n\n\n\n<p>The&nbsp;<code>file</code>&nbsp;is the object where the values are printed and its default value is&nbsp;<code>sys.stdout</code>&nbsp;(screen). Here is an example to illustrate this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print(1, 2, 3, 4)\nprint(1, 2, 3, 4, sep='*')\nprint(1, 2, 3, 4, sep='#', end='&amp;')</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>1 2 3 4\n1*2*3*4\n1#2#3#4&amp;</samp></code></pre>\n\n\n\n<h2 id=\"format\">Output formatting</h2>\n\n\n\n<p>Sometimes we would like to format our output to make it look attractive. This can be done by using the&nbsp;<code>str.format()</code>&nbsp;method. This method is visible to any string object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; x = 5; y = 10\n&gt;&gt;&gt; print('The value of x is {} and y is {}'.format(x,y))\nThe value of x is 5 and y is 10</code></pre>\n\n\n\n<p>Here, the curly braces&nbsp;<code>{}</code>&nbsp;are used as placeholders. We can specify the order in which they are printed by using numbers (tuple index).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print('I love {0} and {1}'.format('bread','butter'))\nprint('I love {1} and {0}'.format('bread','butter'))</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>I love bread and butter\nI love butter and bread</samp></code></pre>\n\n\n\n<p>We can even use keyword arguments to format the string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; print('Hello {name}, {greeting}'.format(greeting = 'Goodmorning', name = 'John'))\nHello John, Goodmorning</code></pre>\n\n\n\n<p>We can also format strings like the old <code>sprintf()</code> style used in C programming language. We use the <code>%</code> operator to accomplish this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; x = 12.3456789\n&gt;&gt;&gt; print('The value of x is %3.2f' %x)\nThe value of x is 12.35\n&gt;&gt;&gt; print('The value of x is %3.4f' %x)\nThe value of x is 12.3457</code></pre>\n\n\n\n<h2 id=\"input\">Python Input</h2>\n\n\n\n<p>Up until now, our programs were static. The value of variables was defined or hard coded into the source code.</p>\n\n\n\n<p>To allow flexibility, we might want to take the input from the user. In Python, we have the&nbsp;<code>input()</code>&nbsp;function to allow this. The syntax for&nbsp;<code>input()</code>&nbsp;is:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">input([prompt])</pre>\n\n\n\n<p>where&nbsp;<code>prompt</code>&nbsp;is the string we wish to display on the screen. It is optional.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; num = input('Enter a number: ')\nEnter a number: 10\n&gt;&gt;&gt; num\n'10'</code></pre>\n\n\n\n<p>Here, we can see that the entered value&nbsp;<code>10</code>&nbsp;is a string, not a number. To convert this into a number we can use&nbsp;<code>int()</code>&nbsp;or&nbsp;<code>float()</code>&nbsp;functions.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; int('10')\n10\n&gt;&gt;&gt; float('10')\n10.0</code></pre>\n\n\n\n<p>This same operation can be performed using the&nbsp;<code>eval()</code>&nbsp;function. But&nbsp;<code>eval</code>&nbsp;takes it further. It can evaluate even expressions, provided the input is a string</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; int('2+3')\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 301, in runcode\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: '2+3'\n&gt;&gt;&gt; eval('2+3')\n5</code></pre>\n\n\n\n<h2 id=\"import\">Python Import</h2>\n\n\n\n<p>When our program grows bigger, it is a good idea to break it into different modules.</p>\n\n\n\n<p>A module is a file containing Python definitions and statements. Python modules have a filename and end with the extension <code>.py</code>.</p>\n\n\n\n<p>Definitions inside a module can be imported to another module or the interactive interpreter in Python. We use the&nbsp;<code>import</code>&nbsp;keyword to do this.</p>\n\n\n\n<p>For example, we can import the&nbsp;<code>math</code>&nbsp;module by typing the following line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import math</code></pre>\n\n\n\n<p>We can use the module in the following ways:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import math\nprint(math.pi)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><samp>3.141592653589793</samp></pre>\n\n\n\n<p>Now all the definitions inside&nbsp;<code>math</code>&nbsp;module are available in our scope. We can also import some specific attributes and functions only, using the&nbsp;<code>from</code>&nbsp;keyword. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; from math import pi\n&gt;&gt;&gt; pi\n3.141592653589793</code></pre>\n\n\n\n<p>While importing a module, Python looks at several places defined in&nbsp;<code>sys.path</code>. It is a list of directory locations.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.path\n&#91;'', \n 'C:\\\\Python33\\\\Lib\\\\idlelib', \n 'C:\\\\Windows\\\\system32\\\\python33.zip', \n 'C:\\\\Python33\\\\DLLs', \n 'C:\\\\Python33\\\\lib', \n 'C:\\\\Python33', \n 'C:\\\\Python33\\\\lib\\\\site-packages']</code></pre>\n\n\n\n<p>We can also add our own location to this list.</p>\n","protected":false},"excerpt":{"rendered":"<p>This tutorial focuses on two built-in functions print() and input() to perform I/O task in Python. Also, you will learn to import modules and use them in your program. Python provides numerous built-in functions that are readily available to us at the Python prompt. Some of the functions like input() and print() are widely used for standard input and output operations [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5289"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5289"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5289/revisions"}],"predecessor-version":[{"id":5290,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5289/revisions/5290"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5289"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5289"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5289"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5291,"date":"2022-01-24T11:56:37","date_gmt":"2022-01-24T11:56:37","guid":{"rendered":"https://python3.foobrdigital.com/?p=5291"},"modified":"2022-01-24T11:59:42","modified_gmt":"2022-01-24T11:59:42","slug":"python-operators","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-operators/","title":{"rendered":"Python Operators"},"content":{"rendered":"\n<p><strong>In this tutorial, you&#8217;ll learn everything about different types of operators in Python, their syntax and how to use them with examples.</strong></p>\n\n\n\n<h2 id=\"what\">What are operators in python?</h2>\n\n\n\n<p>Operators are special symbols in Python that carry out arithmetic or logical computation. The value that the operator operates on is called the operand.</p>\n\n\n\n<p>For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; 2+3\n5</code></pre>\n\n\n\n<p>Here,&nbsp;<code>+</code>&nbsp;is the operator that performs addition.&nbsp;<code>2</code>&nbsp;and&nbsp;<code>3</code>&nbsp;are the operands and&nbsp;<code>5</code>&nbsp;is the output of the operation.</p>\n\n\n\n<h2 id=\"arithmetic\">Arithmetic operators</h2>\n\n\n\n<p>Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication, etc.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Meaning</th><th>Example</th></tr><tr><td>+</td><td>Add two operands or unary plus</td><td>x + y+ 2</td></tr><tr><td>&#8211;</td><td>Subtract right operand from the left or unary minus</td><td>x &#8211; y- 2</td></tr><tr><td>*</td><td>Multiply two operands</td><td>x * y</td></tr><tr><td>/</td><td>Divide left operand by the right one (always results into float)</td><td>x / y</td></tr><tr><td>%</td><td>Modulus &#8211; remainder of the division of left operand by the right</td><td>x % y (remainder of x/y)</td></tr><tr><td>//</td><td>Floor division &#8211; division that results into whole number adjusted to the left in the number line</td><td>x // y</td></tr><tr><td>**</td><td>Exponent &#8211; left operand raised to the power of right</td><td>x**y (x to the power y)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 1: Arithmetic operators in Python</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x = 15\ny = 4\n\n# Output: x + y = 19\nprint('x + y =',x+y)\n\n# Output: x - y = 11\nprint('x - y =',x-y)\n\n# Output: x * y = 60\nprint('x * y =',x*y)\n\n# Output: x / y = 3.75\nprint('x / y =',x/y)\n\n# Output: x // y = 3\nprint('x // y =',x//y)\n\n# Output: x ** y = 50625\nprint('x ** y =',x**y)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>x + y = 19\nx - y = 11\nx * y = 60\nx / y = 3.75\nx // y = 3\nx ** y = 50625</samp></code></pre>\n\n\n\n<h2 id=\"comparison\">Comparison operators</h2>\n\n\n\n<p>Comparison operators are used to compare values. It returns either&nbsp;<code>True</code>&nbsp;or&nbsp;<code>False</code>&nbsp;according to the condition.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Meaning</th><th>Example</th></tr><tr><td>&gt;</td><td>Greater than &#8211; True if left operand is greater than the right</td><td>x &gt; y</td></tr><tr><td>&lt;</td><td>Less than &#8211; True if left operand is less than the right</td><td>x &lt; y</td></tr><tr><td>==</td><td>Equal to &#8211; True if both operands are equal</td><td>x == y</td></tr><tr><td>!=</td><td>Not equal to &#8211; True if operands are not equal</td><td>x != y</td></tr><tr><td>&gt;=</td><td>Greater than or equal to &#8211; True if left operand is greater than or equal to the right</td><td>x &gt;= y</td></tr><tr><td>&lt;=</td><td>Less than or equal to &#8211; True if left operand is less than or equal to the right</td><td>x &lt;= y</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 2: Comparison operators in Python</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x = 10\ny = 12\n\n# Output: x &gt; y is False\nprint('x &gt; y is',x&gt;y)\n\n# Output: x &lt; y is True\nprint('x &lt; y is',x&lt;y)\n\n# Output: x == y is False\nprint('x == y is',x==y)\n\n# Output: x != y is True\nprint('x != y is',x!=y)\n\n# Output: x &gt;= y is False\nprint('x &gt;= y is',x&gt;=y)\n\n# Output: x &lt;= y is True\nprint('x &lt;= y is',x&lt;=y)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>x &gt; y is False\nx &lt; y is True\nx == y is False\nx != y is True\nx &gt;= y is False\nx &lt;= y is True</samp></code></pre>\n\n\n\n<h2 id=\"logical\">Logical operators</h2>\n\n\n\n<p>Logical operators are the&nbsp;<code>and</code>,&nbsp;<code>or</code>,&nbsp;<code>not</code>&nbsp;operators.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Meaning</th><th>Example</th></tr><tr><td>and</td><td>True if both the operands are true</td><td>x and y</td></tr><tr><td>or</td><td>True if either of the operands is true</td><td>x or y</td></tr><tr><td>not</td><td>True if operand is false (complements the operand)</td><td>not x</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 3: Logical Operators in Python</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x = True\ny = False\n\nprint('x and y is',x and y)\n\nprint('x or y is',x or y)\n\nprint('not x is',not x)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>x and y is False\nx or y is True\nnot x is False</samp></code></pre>\n\n\n\n<p>Here is the truth table for these operators.</p>\n\n\n\n<h2 id=\"bitwise\">Bitwise operators</h2>\n\n\n\n<p>Bitwise operators act on operands as if they were strings of binary digits. They operate bit by bit, hence the name.</p>\n\n\n\n<p>For example, 2 is&nbsp;<code>10</code>&nbsp;in binary and 7 is&nbsp;<code>111</code>.</p>\n\n\n\n<p><strong>In the table below:</strong>&nbsp;Let&nbsp;<var>x</var>&nbsp;= 10 (<code>0000 1010</code>&nbsp;in binary) and&nbsp;<var>y</var>&nbsp;= 4 (<code>0000 0100</code>&nbsp;in binary)</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Meaning</th><th>Example</th></tr><tr><td>&amp;</td><td>Bitwise AND</td><td>x &amp; y = 0 (<code>0000 0000</code>)</td></tr><tr><td>|</td><td>Bitwise OR</td><td>x | y = 14 (<code>0000 1110</code>)</td></tr><tr><td>~</td><td>Bitwise NOT</td><td>~x = -11 (<code>1111 0101</code>)</td></tr><tr><td>^</td><td>Bitwise XOR</td><td>x ^ y = 14 (<code>0000 1110</code>)</td></tr><tr><td>&gt;&gt;</td><td>Bitwise right shift</td><td>x &gt;&gt; 2 = 2 (<code>0000 0010</code>)</td></tr><tr><td>&lt;&lt;</td><td>Bitwise left shift</td><td>x &lt;&lt; 2 = 40 (<code>0010 1000</code>)</td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"assignment\">Assignment operators</h2>\n\n\n\n<p>Assignment operators are used in Python to assign values to variables.</p>\n\n\n\n<p><code>a = 5</code>&nbsp;is a simple assignment operator that assigns the value 5 on the right to the variable&nbsp;<var>a</var>&nbsp;on the left.</p>\n\n\n\n<p>There are various compound operators in Python like&nbsp;<code>a += 5</code>&nbsp;that adds to the variable and later assigns the same. It is equivalent to&nbsp;<code>a = a + 5</code>.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Example</th><th>Equivalent to</th></tr><tr><td>=</td><td>x = 5</td><td>x = 5</td></tr><tr><td>+=</td><td>x += 5</td><td>x = x + 5</td></tr><tr><td>-=</td><td>x -= 5</td><td>x = x &#8211; 5</td></tr><tr><td>*=</td><td>x *= 5</td><td>x = x * 5</td></tr><tr><td>/=</td><td>x /= 5</td><td>x = x / 5</td></tr><tr><td>%=</td><td>x %= 5</td><td>x = x % 5</td></tr><tr><td>//=</td><td>x //= 5</td><td>x = x // 5</td></tr><tr><td>**=</td><td>x **= 5</td><td>x = x ** 5</td></tr><tr><td>&amp;=</td><td>x &amp;= 5</td><td>x = x &amp; 5</td></tr><tr><td>|=</td><td>x |= 5</td><td>x = x | 5</td></tr><tr><td>^=</td><td>x ^= 5</td><td>x = x ^ 5</td></tr><tr><td>&gt;&gt;=</td><td>x &gt;&gt;= 5</td><td>x = x &gt;&gt; 5</td></tr><tr><td>&lt;&lt;=</td><td>x &lt;&lt;= 5</td><td>x = x &lt;&lt; 5</td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"special\">Special operators</h2>\n\n\n\n<p>Python language offers some special types of operators like the identity operator or the membership operator. They are described below with examples.</p>\n\n\n\n<h3 id=\"identity\">Identity operators</h3>\n\n\n\n<p><code>is</code>&nbsp;and&nbsp;<code>is not</code>&nbsp;are the identity operators in Python. They are used to check if two values (or variables) are located on the same part of the memory. Two variables that are equal does not imply that they are identical.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Meaning</th><th>Example</th></tr><tr><td>is</td><td>True if the operands are identical (refer to the same object)</td><td>x is True</td></tr><tr><td>is not</td><td>True if the operands are not identical (do not refer to the same object)</td><td>x is not True</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 4: Identity operators in Python</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x1 = 5\ny1 = 5\nx2 = 'Hello'\ny2 = 'Hello'\nx3 = &#91;1,2,3]\ny3 = &#91;1,2,3]\n\n# Output: False\nprint(x1 is not y1)\n\n# Output: True\nprint(x2 is y2)\n\n# Output: False\nprint(x3 is y3)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>False\nTrue\nFalse</samp></code></pre>\n\n\n\n<p>Here, we see that&nbsp;<var>x1</var>&nbsp;and&nbsp;<var>y1</var>&nbsp;are integers of the same values, so they are equal as well as identical. Same is the case with&nbsp;<var>x2</var>&nbsp;and&nbsp;<var>y2</var>&nbsp;(strings).</p>\n\n\n\n<p>But&nbsp;<var>x3</var>&nbsp;and&nbsp;<var>y3</var>&nbsp;are lists. They are equal but not identical. It is because the interpreter locates them separately in memory although they are equal.</p>\n\n\n\n<h3 id=\"membership\">Membership operators</h3>\n\n\n\n<p><code>in</code> and <code>not in</code> are the membership operators in Python. They are used to test whether a value or variable is found in a sequence (string, list, tuple, set and dictionary).</p>\n\n\n\n<p>In a dictionary we can only test for presence of key, not the value.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Meaning</th><th>Example</th></tr><tr><td>in</td><td>True if value/variable is found in the sequence</td><td>5 in x</td></tr><tr><td>not in</td><td>True if value/variable is not found in the sequence</td><td>5 not in x</td></tr></tbody></table></figure>\n\n\n\n<h3>Example #5: Membership operators in Python</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x = 'Hello world'\ny = {1:'a',2:'b'}\n\n# Output: True\nprint('H' in x)\n\n# Output: True\nprint('hello' not in x)\n\n# Output: True\nprint(1 in y)\n\n# Output: False\nprint('a' in y)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>True\nTrue\nTrue\nFalse</samp></code></pre>\n\n\n\n<p>Here, <code>'H'</code> is in <var>x</var> but <code>'hello'</code> is not present in <var>x</var> (remember, Python is case sensitive). Similarly, <code>1</code> is key and <code>'a'</code> is the value in dictionary <var>y</var>. Hence, <code>'a' in y</code> returns <code>False</code>.<a href=\"https://www.programiz.com/python-programming/input-output-import\"></a></p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn everything about different types of operators in Python, their syntax and how to use them with examples. What are operators in python? Operators are special symbols in Python that carry out arithmetic or logical computation. The value that the operator operates on is called the operand. For example: Here,&nbsp;+&nbsp;is the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5291"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5291"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5291/revisions"}],"predecessor-version":[{"id":5292,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5291/revisions/5292"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5291"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5291"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5291"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5293,"date":"2022-01-24T11:59:07","date_gmt":"2022-01-24T11:59:07","guid":{"rendered":"https://python3.foobrdigital.com/?p=5293"},"modified":"2022-01-24T11:59:42","modified_gmt":"2022-01-24T11:59:42","slug":"python-namespace-and-scope","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-namespace-and-scope/","title":{"rendered":"Python Namespace and Scope"},"content":{"rendered":"\n<p>In this tutorial, you will learn about namespace, mapping from names to objects, and scope of a variable.</p>\n\n\n\n<h2 id=\"name\">What is Name in Python?</h2>\n\n\n\n<p>If you have ever read &#8216;The Zen of Python&#8217; (type&nbsp;<code>import this</code>&nbsp;in the Python interpreter), the last line states,&nbsp;<strong>Namespaces are one honking great idea &#8212; let&#8217;s do more of those!</strong>&nbsp;So what are these mysterious namespaces? Let us first look at what name is.</p>\n\n\n\n<p>Name (also called identifier) is simply a name given to objects. Everything in Python is an object. Name is a way to access the underlying object.</p>\n\n\n\n<p>For example, when we do the assignment <code>a = 2</code>, <code>2</code> is an object stored in memory and <var>a</var> is the name we associate it with. We can get the address (in RAM) of some object through the built-in function <code>id()</code>. Let&#8217;s look at how to use it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Note: You may get different values for the id\n\na = 2\nprint('id(2) =', id(2))\n\nprint('id(a) =', id(a))</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>id(2) = 9302208\nid(a) = 9302208</samp></code></pre>\n\n\n\n<p>Here, both refer to the same object&nbsp;<code>2</code>, so they have the same&nbsp;<code>id()</code>. Let&#8217;s make things a little more interesting.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Note: You may get different values for the id\n\na = 2\nprint('id(a) =', id(a))\n\na = a+1\nprint('id(a) =', id(a))\n\nprint('id(3) =', id(3))\n\nb = 2\nprint('id(b) =', id(b))\nprint('id(2) =', id(2))</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>id(a) = 9302208\nid(a) = 9302240\nid(3) = 9302240\nid(b) = 9302208\nid(2) = 9302208</samp></code></pre>\n\n\n\n<p>What is happening in the above sequence of steps? Let&#8217;s use a diagram to explain this:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://cdn.programiz.com/sites/tutorial2program/files/aEquals2.jpg\" alt=\"Memory diagram of a variable\" title=\"Memory Diagram\"/><figcaption>Memory diagram of variables in Python</figcaption></figure>\n\n\n\n<p>Initially, an object&nbsp;<code>2</code>&nbsp;is created and the name&nbsp;<var>a</var>&nbsp;is associated with it, when we do&nbsp;<code>a = a+1</code>, a new object&nbsp;<code>3</code>&nbsp;is created and now&nbsp;<var>a</var>&nbsp;is associated with this object.</p>\n\n\n\n<p>Note that&nbsp;<code>id(a)</code>&nbsp;and&nbsp;<code>id(3)</code>&nbsp;have the same values.</p>\n\n\n\n<p>Furthermore, when&nbsp;<code>b = 2</code>&nbsp;is executed, the new name&nbsp;<var>b</var>&nbsp;gets associated with the previous object&nbsp;<code>2</code>.</p>\n\n\n\n<p>This is efficient as Python does not have to create a new duplicate object. This dynamic nature of name binding makes Python powerful; a name could refer to any type of object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a = 'Hello World!'\n&gt;&gt;&gt; a = &#91;1,2,3]</code></pre>\n\n\n\n<p>All these are valid and <var>a</var> will refer to three different types of objects in different instances. Functions are objects too, so a name can refer to them as well.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def printHello():\n    print(\"Hello\")\n\n\na = printHello\n\na()</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>Hello</samp></code></pre>\n\n\n\n<p>The same name&nbsp;<var>a</var>&nbsp;can refer to a function and we can call the function using this name.</p>\n\n\n\n<h2 id=\"namespace\">What is a Namespace in Python?</h2>\n\n\n\n<p>Now that we understand what names are, we can move on to the concept of namespaces.</p>\n\n\n\n<p>To simply put it, a namespace is a collection of names.</p>\n\n\n\n<p>In Python, you can imagine a namespace as a mapping of every name you have defined to corresponding objects.</p>\n\n\n\n<p>Different namespaces can co-exist at a given time but are completely isolated.</p>\n\n\n\n<p>A namespace containing all the built-in names is created when we start the Python interpreter and exists as long as the interpreter runs.</p>\n\n\n\n<p>This is the reason that built-in functions like <code>id()</code>, <code>print()</code> etc. are always available to us from any part of the program. Each module creates its own global namespace.</p>\n\n\n\n<p>These different namespaces are isolated. Hence, the same name that may exist in different modules does not collide.</p>\n\n\n\n<p>Modules can have various functions and classes. A local namespace is created when a function is called, which has all the names defined in it. Similar is the case with class. The following diagram may help to clarify this concept.</p>\n\n\n\n<h2 id=\"scope\">Python Variable Scope</h2>\n\n\n\n<p>Although there are various unique namespaces defined, we may not be able to access all of them from every part of the program. The concept of scope comes into play.</p>\n\n\n\n<p>A scope is the portion of a program from where a namespace can be accessed directly without any prefix.</p>\n\n\n\n<p>At any given moment, there are at least three nested scopes.</p>\n\n\n\n<ol><li>Scope of the current function which has local names</li><li>Scope of the module which has global names</li><li>Outermost scope which has built-in names</li></ol>\n\n\n\n<p>When a reference is made inside a function, the name is searched in the local namespace, then in the global namespace and finally in the built-in namespace.</p>\n\n\n\n<p>If there is a function inside another function, a new scope is nested inside the local scope.</p>\n\n\n\n<h2 id=\"example\">Example of Scope and Namespace in Python</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>def outer_function():\n    b = 20\n    def inner_func():\n        c = 30\n\na = 10</code></pre>\n\n\n\n<p>Here, the variable&nbsp;<var>a</var>&nbsp;is in the global namespace. Variable&nbsp;<var>b</var>&nbsp;is in the local namespace of&nbsp;<code>outer_function()</code>&nbsp;and&nbsp;<var>c</var>&nbsp;is in the nested local namespace of&nbsp;<code>inner_function()</code>.</p>\n\n\n\n<p>When we are in&nbsp;<code>inner_function()</code>,&nbsp;<var>c</var>&nbsp;is local to us,&nbsp;<var>b</var>&nbsp;is nonlocal and&nbsp;<var>a</var>&nbsp;is global. We can read as well as assign new values to&nbsp;<var>c</var>&nbsp;but can only read&nbsp;<var>b</var>&nbsp;and&nbsp;<var>a</var>&nbsp;from&nbsp;<code>inner_function()</code>.</p>\n\n\n\n<p>If we try to assign as a value to&nbsp;<var>b</var>, a new variable&nbsp;<var>b</var>&nbsp;is created in the local namespace which is different than the nonlocal&nbsp;<var>b</var>. The same thing happens when we assign a value to&nbsp;<var>a</var>.</p>\n\n\n\n<p>However, if we declare&nbsp;<var>a</var>&nbsp;as global, all the reference and assignment go to the global&nbsp;<var>a</var>. Similarly, if we want to rebind the variable&nbsp;<var>b</var>, it must be declared as nonlocal. The following example will further clarify this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def outer_function():\n    a = 20\n\n    def inner_function():\n        a = 30\n        print('a =', a)\n\n    inner_function()\n    print('a =', a)\n\n\na = 10\nouter_function()\nprint('a =', a)</code></pre>\n\n\n\n<p>As you can see, the output of this program is</p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>a = 30\na = 20\na = 10</samp></code></pre>\n\n\n\n<p>In this program, three different variables&nbsp;<var>a</var>&nbsp;are defined in separate namespaces and accessed accordingly. While in the following program,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def outer_function():\n    global a\n    a = 20\n\n    def inner_function():\n        global a\n        a = 30\n        print('a =', a)\n\n    inner_function()\n    print('a =', a)\n\n\na = 10\nouter_function()\nprint('a =', a)</code></pre>\n\n\n\n<p>The output of the program is.</p>\n\n\n\n<pre class=\"wp-block-code\"><code><samp>a = 30\na = 30\na = 30 </samp></code></pre>\n\n\n\n<p>Here, all references and assignments are to the global&nbsp;<var>a</var>&nbsp;due to the use of keyword&nbsp;<code>global</code>.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about namespace, mapping from names to objects, and scope of a variable. What is Name in Python? If you have ever read &#8216;The Zen of Python&#8217; (type&nbsp;import this&nbsp;in the Python interpreter), the last line states,&nbsp;Namespaces are one honking great idea &#8212; let&#8217;s do more of those!&nbsp;So what are these [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[223,1],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5293"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5293"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5293/revisions"}],"predecessor-version":[{"id":5294,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5293/revisions/5294"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5293"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5293"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5293"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]