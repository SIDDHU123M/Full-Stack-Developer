[
  {
    "id": 4080,
    "date": "2020-08-20T05:37:16",
    "date_gmt": "2020-08-20T05:37:16",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=179"
    },
    "modified": "2020-08-20T05:37:16",
    "modified_gmt": "2020-08-20T05:37:16",
    "slug": "bootstrap-overview",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-overview/",
    "title": {
      "rendered": "Bootstrap  Overview"
    },
    "content": {
      "rendered": "\n<h2>What is Twitter Bootstrap?</h2>\n\n\n\n<p>Bootstrap is a sleek, intuitive, and powerful, mobile first front-end framework for faster and easier web development. It uses HTML, CSS and Javascript.</p>\n\n\n\n<h2>History</h2>\n\n\n\n<p>Bootstrap was developed by&nbsp;<em>Mark Otto</em>&nbsp;and&nbsp;<em>Jacob Thornton</em>&nbsp;at&nbsp;<em>Twitter</em>. It was released as an open source product in August 2011 on GitHub.</p>\n\n\n\n<h2>Why Use Bootstrap?</h2>\n\n\n\n<ul><li><strong>Mobile first approach</strong>&nbsp;− Bootstrap 3, framework consists of Mobile first styles throughout the entire library instead them of in separate files.</li><li><strong>Browser Support</strong>&nbsp;− It is supported by all popular browsers.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bootstrap/images/browsers.jpg\" alt=\"Popular Browser\"/></figure>\n\n\n\n<ul><li><strong>Easy to get started</strong> − With just the knowledge of HTML and CSS anyone can get started with Bootstrap. Also the Bootstrap official site has a good documentation.</li><li><strong>Responsive design</strong> − Bootstrap&#8217;s responsive CSS adjusts to Desktops, Tablets and Mobiles. More about the responsive design is in the chapter Bootstrap Responsive Design.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bootstrap/images/responsive.jpg\" alt=\"Responsive Design\"/></figure>\n\n\n\n<ul><li>Provides a clean and uniform solution for building an interface for developers.</li><li>It contains beautiful and functional built-in components which are easy to customize.</li><li>It also provides web based customization.</li><li>And best of all it is an open source.</li></ul>\n\n\n\n<h2>What Bootstrap Package Includes?</h2>\n\n\n\n<ul><li><strong>Scaffolding</strong>&nbsp;− Bootstrap provides a basic structure with Grid System, link styles, and background. This is is covered in detail in the section&nbsp;<strong>Bootstrap Basic Structure</strong></li><li><strong>CSS</strong>&nbsp;− Bootstrap comes with the feature of global CSS settings, fundamental HTML elements styled and enhanced with extensible classes, and an advanced grid system. This is covered in detail in the section&nbsp;<strong>Bootstrap with CSS</strong>.</li><li><strong>Components</strong>&nbsp;− Bootstrap contains over a dozen reusable components built to provide iconography, dropdowns, navigation, alerts, pop-overs, and much more. This is covered in detail in the section&nbsp;<strong>Layout Components</strong>.</li><li><strong>JavaScript Plugins</strong>&nbsp;− Bootstrap contains over a dozen custom jQuery plugins. You can easily include them all, or one by one. This is covered in details in the section&nbsp;<strong>Bootstrap Plugins</strong>.</li><li><strong>Customize</strong>&nbsp;− You can customize Bootstrap&#8217;s components, LESS variables, and jQuery plugins to get your very own version.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Twitter Bootstrap? Bootstrap is a sleek, intuitive, and powerful, mobile first front-end framework for faster and easier web development. It uses HTML, CSS and Javascript. History Bootstrap was developed by&nbsp;Mark Otto&nbsp;and&nbsp;Jacob Thornton&nbsp;at&nbsp;Twitter. It was released as an open source product in August 2011 on GitHub. Why Use Bootstrap? Mobile first approach&nbsp;− Bootstrap 3, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4080"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4080"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4080/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4080"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4080"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4080"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4081,
    "date": "2020-08-20T05:38:38",
    "date_gmt": "2020-08-20T05:38:38",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=181"
    },
    "modified": "2020-08-20T05:38:38",
    "modified_gmt": "2020-08-20T05:38:38",
    "slug": "bootstrap-environment-setup",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-environment-setup/",
    "title": {
      "rendered": "Environment Setup"
    },
    "content": {
      "rendered": "\n<p>It is very easy to setup and start using Bootstrap. This chapter will explain how to download and setup Bootstrap. We will also discuss the Bootstrap file structure, and demonstrate its usage with an example.</p>\n\n\n\n<h2>Download Bootstrap</h2>\n\n\n\n<p>You can download the latest version of Bootstrap from&nbsp;https://getbootstrap.com/. When you click on this link, you will get to see a screen as below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bootstrap/images/bootstrapdownloadscreen.jpg\" alt=\"Bootstrap Download Screen\"/></figure>\n\n\n\n<p>Here you can see two buttons −</p>\n\n\n\n<ul><li><strong><em>Download Bootstrap</em></strong>&nbsp;− Clicking this, you can download the precompiled and minified versions of Bootstrap CSS, JavaScript, and fonts. No documentation or original source code files are included.</li><li><strong><em>Download Source</em></strong>&nbsp;− Clicking this, you can get the latest Bootstrap LESS and JavaScript source code directly from GitHub.</li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you work with Bootstrap&#8217;s uncompiled source code, you need to compile the LESS files to produce usable CSS files. For compiling LESS files into CSS, Bootstrap officially supports only Recess, which is Twitter&#8217;s CSS hinter based on less.js.</p></blockquote>\n\n\n\n<p>For better understanding and ease of use, we shall use precompiled version of Bootstrap throughout the tutorial. As the files are complied and minified you don&#8217;t have to bother every time including separate files for individual functionality. At the time of writing this tutorial the latest version (Bootstrap 3) was downloaded.</p>\n\n\n\n<h2>File structure</h2>\n\n\n\n<h3>Precompiled Bootstrap</h3>\n\n\n\n<p>Once the compiled version Bootstrap is downloaded, extract the ZIP file, and you will see the following file/directory structure −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bootstrap/images/compiledfilestructure.jpg\" alt=\"Compiled Bootstrap File Structure\"/></figure>\n\n\n\n<p>As you can see, there are compiled CSS and JS (bootstrap.*), as well as compiled and minified CSS and JS (bootstrap.min.*). Fonts from Glyphicons are included, as it is the optional Bootstrap theme.</p>\n\n\n\n<h3>Bootstrap Source Code</h3>\n\n\n\n<p>If you have downloaded the Bootstrap source code then the file structure would be as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bootstrap/images/sourcecodefilestructure.jpg\" alt=\"Bootstrap Source code Structure\"/></figure>\n\n\n\n<ul><li>The files under&nbsp;<em>less/</em>,&nbsp;<em>js/</em>, and&nbsp;<em>fonts/</em>&nbsp;are the source code for Bootstrap CSS, JS, and icon fonts (respectively).</li><li>The&nbsp;<em>dist/</em>&nbsp;folder includes everything listed in the precompiled download section above.</li><li><em>docs-assets/</em>,&nbsp;<em>examples/</em>, and all&nbsp;<em>*.html</em>&nbsp;files are Bootstrap documentation.</li></ul>\n\n\n\n<h2>HTML Template</h2>\n\n\n\n<p>A basic HTML template using Bootstrap would look like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   \n   &lt;head>\n      &lt;title>Bootstrap 101 Template&lt;/title>\n      &lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\">\n      \n      &lt;!-- Bootstrap -->\n      &lt;link href = \"css/bootstrap.min.css\" rel = \"stylesheet\">\n      \n      &lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n      &lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n      \n      &lt;!--&#91;if lt IE 9]>\n      &lt;script src = \"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\">&lt;/script>\n      &lt;script src = \"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\">&lt;/script>\n      &lt;!&#91;endif]-->\n      \n   &lt;/head>\n   \n   &lt;body>\n      &lt;h1>Hello, world!&lt;/h1>\n\n      &lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n      &lt;script src = \"https://code.jquery.com/jquery.js\">&lt;/script>\n      \n      &lt;!-- Include all compiled plugins (below), or include individual files as needed -->\n      &lt;script src = \"js/bootstrap.min.js\">&lt;/script>\n      \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Here you can see the&nbsp;<strong>jquery.js</strong>,&nbsp;<strong>bootstrap.min.js</strong>&nbsp;and&nbsp;<strong>bootstrap.min.css</strong>&nbsp;files that are included to make a normal HTM file to the Bootstrapped Template. Just make sure to include jQuery library before you include Bootstrap library.</p>\n\n\n\n<p>More details about each of the elements in this above piece of code will be discussed in the chapter Bootstrap CSS Overview.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let&#8217;s try an example using the above template. Try the following example using Live Demo option available at the top right corner of the below sample code box on our website −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Hello, world!&lt;/h1></code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>In all the subsequent chapters we have used dummy text from the site https://www.lipsum.com/.</p></blockquote>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>It is very easy to setup and start using Bootstrap. This chapter will explain how to download and setup Bootstrap. We will also discuss the Bootstrap file structure, and demonstrate its usage with an example. Download Bootstrap You can download the latest version of Bootstrap from&nbsp;https://getbootstrap.com/. When you click on this link, you will get [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4081"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4081"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4081/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4081"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4081"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4081"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4082,
    "date": "2020-08-20T05:47:24",
    "date_gmt": "2020-08-20T05:47:24",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=183"
    },
    "modified": "2020-08-20T05:47:24",
    "modified_gmt": "2020-08-20T05:47:24",
    "slug": "bootstrap-grid-system",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-grid-system/",
    "title": {
      "rendered": "Grid System"
    },
    "content": {
      "rendered": "\n<p>In this chapter we shall discuss the Bootstrap Grid System.</p>\n\n\n\n<h2>What is a Grid?</h2>\n\n\n\n<p>As put by wikepedia −</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>In graphic design, a grid is a structure (usually two-dimensional) made up of a series of intersecting straight (vertical, horizontal) lines used to structure the content. It is widely used to design layout and content structure in print design. In web design, it is a very effective method to create a consistent layout rapidly and effectively using HTML and CSS.</p></blockquote>\n\n\n\n<p>To put in simple words, grids in web design organise and structure content, makes the websites easy to scan and reduces the cognitive load on users.</p>\n\n\n\n<h2>What is Bootstrap Grid System?</h2>\n\n\n\n<p>As put by the official documentation of Bootstrap for grid system −</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Bootstrap includes a responsive, mobile first fluid grid system that appropriately scales up to 12 columns as the device or viewport size increases. It includes predefined classes for easy layout options, as well as powerful mixins for generating more semantic layouts.</p></blockquote>\n\n\n\n<p>Let us understand the above statement. Bootstrap 3 is mobile first in the sense that the code for Bootstrap now starts by targeting smaller screens like mobile devices, tablets, and then “expands” components and grids for larger screens such as laptops, desktops.</p>\n\n\n\n<h3>Mobile First Strategy</h3>\n\n\n\n<ul><li><strong>Content</strong><ul><li>Determine what is most important.</li></ul></li><li><strong>Layout</strong><ul><li>Design to smaller widths first.</li><li>Base CSS address mobile device first; media queries address for tablet, desktops.</li></ul></li><li><strong>Progressive Enhancement</strong><ul><li>Add elements as screen size increases.</li></ul></li></ul>\n\n\n\n<h2>Working of Bootstrap Grid System</h2>\n\n\n\n<p>Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here&#8217;s how the Bootstrap grid system works −</p>\n\n\n\n<ul><li>Rows must be placed within a&nbsp;<strong>.container</strong>&nbsp;class for proper alignment and padding.</li><li>Use rows to create horizontal groups of columns.</li><li>Content should be placed within the columns, and only columns may be the immediate children of rows.</li><li>Predefined grid classes like&nbsp;<strong>.row and</strong>&nbsp;<strong>.col-xs-4</strong>&nbsp;are available for quickly making grid layouts. LESS mixins can also be used for more semantic layouts.</li><li>Columns create gutters (gaps between column content) via padding. That padding is offset in rows for the first and the last column via negative margin on&nbsp;<strong>.rows</strong>.</li><li>Grid columns are created by specifying the number of twelve available columns you wish to span. For example, three equal columns would use three&nbsp;<strong>.col-xs-4</strong>.</li></ul>\n\n\n\n<h2>Media Queries</h2>\n\n\n\n<p>Media query is a really fancy term for &#8220;conditional CSS rule&#8221;. It simply applies some CSS, based on certain conditions set forth. If those conditions are met, the style is applied.</p>\n\n\n\n<p>Media Queries in Bootstrap allow you to move, show and hide content based on the viewport size. Following media queries are used in LESS files to create the key breakpoints in the Bootstrap grid system.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/* Extra small devices (phones, less than 768px) */\n/* No media query since this is the default in Bootstrap */\n\n/* Small devices (tablets, 768px and up) */\n@media (min-width: @screen-sm-min) { ... }\n\n/* Medium devices (desktops, 992px and up) */\n@media (min-width: @screen-md-min) { ... }\n\n/* Large devices (large desktops, 1200px and up) */\n@media (min-width: @screen-lg-min) { ... }</code></pre>\n\n\n\n<p>Occasionally these are expanded to include a&nbsp;<strong>max-width</strong>&nbsp;to limit CSS to a narrower set of devices.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@media (max-width: @screen-xs-max) { ... }\n@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... }\n@media (min-width: @screen-md-min) and (max-width: @screen-md-max) { ... }\n@media (min-width: @screen-lg-min) { ... }\n</code></pre>\n\n\n\n<p>Media queries have two parts, a device specification and then a size rule. In the above case, the following rule is set −</p>\n\n\n\n<p>Let us consider this line −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... }\n</code></pre>\n\n\n\n<p>For all devices no matter what kind with&nbsp;<em>min-width: @screen-sm-min</em>&nbsp;if the width of the screen gets smaller than&nbsp;<em>@screen-sm-max</em>,&nbsp;<em>then do something</em>.</p>\n\n\n\n<h2>Grid options</h2>\n\n\n\n<p>The following table summarizes aspects of how Bootstrap grid system works across multiple devices −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th></th><th>Extra small devices Phones (&lt;768px)</th><th>Small devices Tablets (≥768px)</th><th>Medium devices Desktops (≥992px)</th><th>Large devices Desktops (≥1200px)</th></tr><tr><td>Grid behavior</td><td>Horizontal at all times</td><td>Collapsed to start, horizontal above breakpoints</td><td>Collapsed to start, horizontal above breakpoints</td><td>Collapsed to start, horizontal above breakpoints</td></tr><tr><td>Max container width</td><td>None (auto)</td><td>750px</td><td>970px</td><td>1170px</td></tr><tr><td>Class prefix</td><td><strong>.col-xs-</strong></td><td><strong>.col-sm-</strong></td><td><strong>.col-md-</strong></td><td><strong>.col-lg-</strong></td></tr><tr><td># of columns</td><td>12</td><td>12</td><td>12</td><td>12</td></tr><tr><td>Max column width</td><td>Auto</td><td>60px</td><td>78px</td><td>95px</td></tr><tr><td>Gutter width</td><td>30px(15px on each side of a column)</td><td>30px(15px on each side of a column)</td><td>30px(15px on each side of a column)</td><td>30px(15px on each side of a column)</td></tr><tr><td>Nestable</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Offsets</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Column ordering</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table></figure>\n\n\n\n<h3>Basic Grid Structure</h3>\n\n\n\n<p>Following is basic structure of Bootstrap grid −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n\n   &lt;div class = \"row\">\n      &lt;div class = \"col-*-*\">&lt;/div>\n      &lt;div class = \"col-*-*\">&lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"row\">...&lt;/div>\n\t\n&lt;/div>\n\n&lt;div class = \"container\">\n   ....\n&lt;/div></code></pre>\n\n\n\n<p>Let us see some simple grid examples −</p>\n\n\n\n<ul><li>Example − Stacked-to-horizontal</li><li>Example − Medium and Large Device</li><li>Example − Mobile, tablet, desktops</li></ul>\n\n\n\n<h2>Responsive column resets</h2>\n\n\n\n<p>With the four tiers of grids available, you are bound to run into issues where at certain breakpoints, the columns don&#8217;t clear quite right as one is taller than the other. To fix that, use a combination of a class <strong>.clearfix</strong> and the responsive utility classes as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n   &lt;div class = \"row\" >\n   \n      &lt;div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/p>\n      &lt;/div>\n      \n      &lt;div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do \n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut \n            enim ad minim veniam, quis nostrud exercitation ullamco laboris \n            nisi ut aliquip ex ea commodo consequat.&lt;/p>\n         \n         &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do \n            eiusmod tempor incididunt ut.&lt;/p>\n      &lt;/div>\n\n      &lt;div class = \"clearfix visible-xs\">&lt;/div>\n      \n      &lt;div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;p>Ut enim ad minim veniam, quis nostrud exercitation ullamco \n            laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>\n      &lt;/div>\n      \n      &lt;div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do \n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut \n            enim ad minim&lt;/p>\n      &lt;/div>\n      \n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>This will produce the following result −https://www.codemeals.com/bootstrap/src/grid_main.htm</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Resize your viewport or check it out on your phone for a desired result of this example.</p></blockquote>\n\n\n\n<h2>Offset Columns</h2>\n\n\n\n<p>Offsets are a useful feature for more specialized layouts. They can be used to push columns over for more spacing, (for example). The&nbsp;<strong>.col-xs = *</strong>&nbsp;classes don’t support offsets, but they are easily replicated by using an empty cell.</p>\n\n\n\n<p>To use offsets on large displays, use the&nbsp;<strong>.col-md-offset-*</strong>&nbsp;classes. These classes increase the left margin of a column by&nbsp;<strong>*</strong>&nbsp;columns where&nbsp;<strong>*</strong>&nbsp;range from&nbsp;<strong>1</strong>&nbsp;to&nbsp;<strong>11</strong>.</p>\n\n\n\n<p>In the following example, we have &lt;div class = &#8220;col-md-6&#8221;&gt;..&lt;/div&gt;, We will center this using class&nbsp;<strong>.col-md-offset-3</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n\n   &lt;h1>Hello, world!&lt;/h1>\n\n   &lt;div class = \"row\" >\n      &lt;div class = \"col-xs-6 col-md-offset-3\" style = \"background-color: #dedef8; \n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/p>\n      &lt;/div>\n\n   &lt;/div>\n\t\n&lt;/div></code></pre>\n\n\n\n<p>This will produce the following result −https://www.codemeals.com/bootstrap/src/offset.htm</p>\n\n\n\n<h2>Nesting columns</h2>\n\n\n\n<p>To nest your content with the default grid, add a new&nbsp;<strong>.row</strong>&nbsp;and set of&nbsp;<strong>.col-md-*</strong>&nbsp;columns within an existing&nbsp;<strong>.col-md-*</strong>&nbsp;column. Nested rows should include a set of columns that add up to 12.</p>\n\n\n\n<p>In the following example, the layout has two columns, with the second one being split into four boxes over two rows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n   &lt;h1>Hello, world!&lt;/h1>\n\n   &lt;div class = \"row\">\n\n      &lt;div class = \"col-md-3\" style = \"background-color: #dedef8; \n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;h4>First Column&lt;/h4>\n         &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/p>\n      &lt;/div>\n\n      &lt;div class = \"col-md-9\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;h4>Second Column- Split into 4 boxes&lt;/h4>\n         &lt;div class = \"row\">\n            \n            &lt;div class = \"col-md-6\" style = \"background-color: #B18904;\n               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n               \n               &lt;p>Consectetur art party Tonx culpa semiotics. \n                  Pinterest assumenda minim organic quis.&lt;/p>\n            &lt;/div>\n            \n            &lt;div class = \"col-md-6\" style = \"background-color: #B18904;\n               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n               \n               &lt;p>sed do eiusmod tempor incididunt ut labore et dolore magna \n                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n                  ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>\n            &lt;/div>\n\t\t\t\t\n         &lt;/div>\n\n         &lt;div class = \"row\">\n\t\t\t\n            &lt;div class = \"col-md-6\" style = \"background-color: #B18904;\n               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n               \n               &lt;p>quis nostrud exercitation ullamco laboris nisi ut aliquip \n                  ex ea commodo consequat.&lt;/p>\n            &lt;/div>   \n            \n            &lt;div class = \"col-md-6\" style = \"background-color: #B18904;\n               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n               \n               &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n                  sed do eiusmod tempor incididunt ut labore et dolore magna \n                  aliqua. Ut enim ad minim.&lt;/p>\n            &lt;/div>\n\t\t\t\t\n         &lt;/div>\n\n      &lt;/div>\n\n   &lt;/div>\n\t\n&lt;/div></code></pre>\n\n\n\n<p>This will produce the following result −https://www.codemeals.com/bootstrap/src/grid_nesting.htm</p>\n\n\n\n<h2>Column Ordering</h2>\n\n\n\n<p>Another nice feature of Bootstrap grid system is that you can easily write the columns in an order, and show them in another one. You can easily change the order of built-in grid columns with&nbsp;<strong>.col-md-push-*</strong>&nbsp;and&nbsp;<strong>.col-md-pull-*</strong>&nbsp;modifier classes where&nbsp;<strong>*</strong>&nbsp;range from&nbsp;<strong>1</strong>&nbsp;to&nbsp;<strong>11</strong>.</p>\n\n\n\n<p>In the following example we have two columns layout with left column being the narrowest and acting as a sidebar. We will swap the order of these columns using&nbsp;<strong>.col-md-push-*</strong>&nbsp;and&nbsp;<strong>.col-md-pull-*</strong>&nbsp;classes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n   &lt;h1>Hello, world!&lt;/h1>\n   \n   &lt;div class = \"row\">\n      &lt;p>Before Ordering&lt;/p>\n      \n      &lt;div class = \"col-md-4\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         I am on left\n      &lt;/div>\n      \n      &lt;div class = \"col-md-8\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         I am on right\n      &lt;/div>\n      \n   &lt;/div>\n\t\n   &lt;br>\n   \n   &lt;div class = \"row\">\n      &lt;p>After Ordering&lt;/p>\n      \n      &lt;div class = \"col-md-4 col-md-push-8\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         I was on left\n      &lt;/div>\n      \n      &lt;div class = \"col-md-8 col-md-pull-4\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         I was on right\n      &lt;/div>\n\t\t\n   &lt;/div>\n\n&lt;/div></code></pre>\n\n\n\n<p>This will produce the following result −https://www.codemeals.com/bootstrap/src/grid_ordering.htm</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter we shall discuss the Bootstrap Grid System. What is a Grid? As put by wikepedia − In graphic design, a grid is a structure (usually two-dimensional) made up of a series of intersecting straight (vertical, horizontal) lines used to structure the content. It is widely used to design layout and content structure [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4082"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4082"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4082/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4082"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4082"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4082"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4083,
    "date": "2020-08-20T05:55:06",
    "date_gmt": "2020-08-20T05:55:06",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=185"
    },
    "modified": "2020-08-20T05:55:06",
    "modified_gmt": "2020-08-20T05:55:06",
    "slug": "bootstrap-css-overview",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-css-overview/",
    "title": {
      "rendered": "CSS Overview"
    },
    "content": {
      "rendered": "\n<p>This chapter provides an overview of the key pieces of Bootstrap&#8217;s infrastructure, including Bootstrap&#8217;s approach to better, faster, stronger web development.</p>\n\n\n\n<h2>HTML5 doctype</h2>\n\n\n\n<p>Bootstrap makes use of certain HTML elements and CSS properties that require the use of the HTML5 doctype. Hence include the below piece of code for HTML5 doctype at the beginning of all your projects using Bootstrap.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   ....\n&lt;/html></code></pre>\n\n\n\n<h2>Mobile First</h2>\n\n\n\n<p>Since Bootstrap 3 has been launched, Bootstrap has become mobile first. It means &#8216;mobile first&#8217; styles can be found throughout the entire library instead of them in separate files. You need to add the&nbsp;<strong>viewport meta tag</strong>&nbsp;to the&nbsp;<strong>&lt;head&gt;</strong>&nbsp;element, to ensure proper rendering and touch zooming on mobile devices.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\"></code></pre>\n\n\n\n<ul><li><em>width</em>&nbsp;property controls the width of the device. Setting it to&nbsp;<em>device-width</em>&nbsp;will make sure that it is rendered across various devices (mobiles, desktops, tablets&#8230;) properly.</li><li><em>initial-scale = 1.0</em>&nbsp;ensures that when loaded, your web page will be rendered at a 1:1 scale, and no zooming will be applied out of the box.</li></ul>\n\n\n\n<p>Add&nbsp;<strong>user-scalable = no</strong>&nbsp;to the&nbsp;<strong>content</strong>&nbsp;attribute to disable zooming capabilities on mobile devices as shown below. Users are only able to scroll and not zoom with this change, and results in your site feeling a bit more like a native application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0, maximum-scale = 1.0, user-scalable = no\"></code></pre>\n\n\n\n<p>Normally&nbsp;<em>maximum-scale = 1.0</em>&nbsp;is used along with&nbsp;<em>user-scalable = no</em>. As mentioned above&nbsp;<strong>user-scalable = no</strong>&nbsp;may give users an experience more like a native app, hence Bootstrap doesn&#8217;t recommend using this attribute.</p>\n\n\n\n<h2>Responsive Images</h2>\n\n\n\n<p>Bootstrap 3 allows you to make the images responsive by adding a class&nbsp;<strong>.img-responsive</strong>&nbsp;to the&nbsp;<strong>&lt;img&gt;</strong>&nbsp;tag. This class applies&nbsp;<strong>max-width: 100%;</strong>&nbsp;and&nbsp;<strong>height: auto;</strong>&nbsp;to the image so that it scales nicely to the parent element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;img src = \"...\" class = \"img-responsive\" alt = \"Responsive image\"></code></pre>\n\n\n\n<h2>Typography and Links</h2>\n\n\n\n<p>Bootstrap sets a basic global display (background), typography, and link styles −</p>\n\n\n\n<ul><li><strong>Basic Global display</strong>&nbsp;− Sets&nbsp;<em>background-color: #fff;</em>&nbsp;on the&nbsp;<em>&lt;body&gt;</em>&nbsp;element.</li><li><strong>Typography</strong>&nbsp;− Uses the&nbsp;<em>@font-family-base</em>,&nbsp;<em>@font-size-base</em>, and&nbsp;<em>@line-height-base</em>&nbsp;attributes as the typographic base.</li><li><strong>Link styles</strong>&nbsp;− Sets the global link color via attribute&nbsp;<em>@link-color</em>&nbsp;and apply link underlines only on&nbsp;<em>:hover</em>.</li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you intend to use LESS code, you may find all these within&nbsp;<em>scaffolding.less</em>.</p></blockquote>\n\n\n\n<h2>Normalize</h2>\n\n\n\n<p>Bootstrap uses Normalize to establish cross browser consistency.</p>\n\n\n\n<p>Normalize.css is a modern, HTML5-ready alternative to CSS resets. It is a small CSS file that provides better cross-browser consistency in the default styling of HTML elements.</p>\n\n\n\n<h2>Containers</h2>\n\n\n\n<p>Use class&nbsp;<strong>.container</strong>&nbsp;to wrap a page&#8217;s content and easily center the content&#8217;s as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n   ...\n&lt;/div></code></pre>\n\n\n\n<p>Take a look at the&nbsp;<strong>.container</strong>&nbsp;class in&nbsp;<em>bootstrap.css</em>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.container {\n   padding-right: 15px;\n   padding-left: 15px;\n   margin-right: auto;\n   margin-left: auto;\n}</code></pre>\n\n\n\n<p>Note that, due to padding and fixed widths, containers are not nestable by default.</p>\n\n\n\n<p>Take a look at&nbsp;<em>bootstrap.css</em>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@media (min-width: 768px) {\n   .container {\n      width: 750px;\n   }\n}</code></pre>\n\n\n\n<p>Here you can see that CSS has media-queries for containers with&nbsp;<strong>width</strong>. This helps for applying responsiveness and within those the container class is modified accordingly to render the grid system properly.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter provides an overview of the key pieces of Bootstrap&#8217;s infrastructure, including Bootstrap&#8217;s approach to better, faster, stronger web development. HTML5 doctype Bootstrap makes use of certain HTML elements and CSS properties that require the use of the HTML5 doctype. Hence include the below piece of code for HTML5 doctype at the beginning of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4083"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4083"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4083/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4083"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4083"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4083"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4084,
    "date": "2020-08-20T05:59:51",
    "date_gmt": "2020-08-20T05:59:51",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=187"
    },
    "modified": "2020-08-20T05:59:51",
    "modified_gmt": "2020-08-20T05:59:51",
    "slug": "bootstrap-typography",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-typography/",
    "title": {
      "rendered": "Typography"
    },
    "content": {
      "rendered": "\n<p>Bootstrap uses Helvetica Neue, Helvetica, Arial, and sans-serif in its default font stack. Using typography feature of Bootstrap you can create headings, paragraphs, lists and other inline elements. Let see learn each one of these in the following sections.</p>\n\n\n\n<h2>Headings</h2>\n\n\n\n<p>All HTML headings (h1 to h6) are styled in Bootstrap. An example is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>I'm Heading1 h1&lt;/h1>\n&lt;h2>I'm Heading2 h2&lt;/h2>\n&lt;h3>I'm Heading3 h3&lt;/h3>\n&lt;h4>I'm Heading4 h4&lt;/h4>\n&lt;h5>I'm Heading5 h5&lt;/h5>\n&lt;h6>I'm Heading6 h6&lt;/h6></code></pre>\n\n\n\n<p>The above code segment with Bootstrap will produce following result −https://www.codemeals.com/bootstrap/src/typo.htm</p>\n\n\n\n<h3>Inline Subheadings</h3>\n\n\n\n<p>To add an inline subheading to any of the headings, simply add &lt;small&gt; around any of the elements or add&nbsp;<strong>.small</strong>&nbsp;class and you will get smaller text in a lighter color as shown in the example below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>I'm Heading1 h1. &lt;small>I'm secondary Heading1 h1&lt;/small>&lt;/h1> \n&lt;h2>I'm Heading2 h2. &lt;small>I'm secondary Heading2 h2&lt;/small>&lt;/h2>\n&lt;h3>I'm Heading3 h3. &lt;small>I'm secondary Heading3 h3&lt;/small>&lt;/h3>\n&lt;h4>I'm Heading4 h4. &lt;small>I'm secondary Heading4 h4&lt;/small>&lt;/h4>\n&lt;h5>I'm Heading5 h5. &lt;small>I'm secondary Heading5 h5&lt;/small>&lt;/h5>\n&lt;h6>I'm Heading6 h6. &lt;small>I'm secondary Heading1 h6&lt;/small>&lt;/h6></code></pre>\n\n\n\n<p>The above code segment with Bootstrap will produce following result −https://www.codemeals.com/bootstrap/src/typo2.htm</p>\n\n\n\n<h2>Lead Body Copy</h2>\n\n\n\n<p>To add some emphasis to a paragraph, add class = &#8220;lead&#8221;. This will give you a larger font size, lighter weight, and a taller line height as in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h2>Lead Example&lt;/h2>\n&lt;p class = \"lead\">This is an example paragraph demonstrating \n   the use of lead body copy. This is an example paragraph \n   demonstrating the use of lead body copy.This is an example \n   paragraph demonstrating the use of lead body copy.This is an \n   example paragraph demonstrating the use of lead body copy.\n   This is an example paragraph demonstrating the use of lead body copy.&lt;/p></code></pre>\n\n\n\n<h2>Emphasis</h2>\n\n\n\n<p>HTML&#8217;s default emphasis tags such as &lt;small&gt; sets text at 85% the size of the parent, &lt;strong&gt; emphasizes a text with heavier font-weight, and &lt;em&gt; emphasizes a text in italics.</p>\n\n\n\n<p>Bootstrap offers a few classes that can be used to provide emphasis on texts as seen in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;small>This content is within tag&lt;/small>&lt;br>\n&lt;strong>This content is within tag&lt;/strong>&lt;br>\n&lt;em>This content is within tag and is rendered as italics&lt;/em>&lt;br>\n\n&lt;p class = \"text-left\">Left aligned text.&lt;/p>\n&lt;p class = \"text-center\">Center aligned text.&lt;/p>\n&lt;p class = \"text-right\">Right aligned text.&lt;/p>\n&lt;p class = \"text-muted\">This content is muted&lt;/p>\n&lt;p class = \"text-primary\">This content carries a primary class&lt;/p>\n&lt;p class = \"text-success\">This content carries a success class&lt;/p>\n&lt;p class = \"text-info\">This content carries a info class&lt;/p>\n&lt;p class = \"text-warning\">This content carries a warning class&lt;/p>\n&lt;p class = \"text-danger\">This content carries a danger class&lt;/p></code></pre>\n\n\n\n<p>The HTML &lt;abbr&gt; element provides markup for abbreviations or acronyms, like WWW or HTTP. Bootstrap styles &lt;abbr&gt; elements with a light dotted border along the bottom and reveals the full text on hover (as long as you add that text to the &lt;abbr&gt; title attribute). To get a a slightly smaller font size add .initialism to &lt;abbr&gt;.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;abbr title = \"World Wide Web\">WWW&lt;/abbr>&lt;br>\n&lt;abbr title = \"Real Simple Syndication\" class = \"initialism\">RSS&lt;/abbr></code></pre>\n\n\n\n<h2>Addresses</h2>\n\n\n\n<p>Using &lt;address&gt; tag you can display the contact information on your web page. Since the &lt;address&gt; defaults to display: block; you’ll need to use</p>\n\n\n\n<p>Tags to add line breaks to the enclosed address text.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;address>\n   &lt;strong>Some Company, Inc.&lt;/strong>&lt;br>\n   007 street&lt;br>\n   Some City, State XXXXX&lt;br>\n   &lt;abbr title = \"Phone\">P:&lt;/abbr> (123) 456-7890\n&lt;/address>\n\n&lt;address>\n   &lt;strong>Full Name&lt;/strong>&lt;br>\n   &lt;a href = \"mailto:#\">mailto@somedomain.com&lt;/a>\n&lt;/address></code></pre>\n\n\n\n<h2>Blockquotes</h2>\n\n\n\n<p>You can use the default &lt;blockquote&gt; around any HTML text. Other options include, adding a &lt;small&gt; tag for identifying the source of the quote and right-aligning the blockquote using class&nbsp;<em>.pull-right</em>. The following example demonstrates all these features −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;blockquote>\n   &lt;p>This is a default blockquote example. This is a default \n      blockquote example. This is a default blockquote \n      example.This is a default blockquote example. This is a \n      default blockquote example.&lt;/p>\n&lt;/blockquote>\n\n&lt;blockquote>\n   This is a blockquote with a source title.\n   &lt;small>Someone famous in &lt;cite title = \"Source Title\">Source Title&lt;/cite>&lt;/small>\n&lt;/blockquote>\n\n&lt;blockquote class = \"pull-right\">This is a blockquote aligned to the right.\n   &lt;small>Someone famous in &lt;cite title = \"Source Title\">Source Title&lt;/cite>&lt;/small>\n&lt;/blockquote></code></pre>\n\n\n\n<h2>Lists</h2>\n\n\n\n<p>Bootstrap supports ordered lists, unordered lists, and definition lists.</p>\n\n\n\n<ul><li><strong>Ordered lists</strong>&nbsp;− An ordered list is a list that falls in some sort of sequential order and is prefaced by numbers.</li><li><strong>Unordered lists</strong>&nbsp;− An unordered list is a list that doesn’t have any particular order and is traditionally styled with bullets. If you do not want the bullets to appear, then you can remove the styling by using the class&nbsp;<em>.list-unstyled</em>. You can also place all list items on a single line using the class&nbsp;<em>.list-inline</em>.</li><li><strong>Definition lists</strong>&nbsp;− In this type of list, each list item can consist of both the &lt;dt&gt; and the &lt;dd&gt; elements. &lt;dt&gt; stands for&nbsp;<em>definition term</em>, and like a dictionary, this is the term (or phrase) that is being defined. Subsequently, the &lt;dd&gt; is the definition of the &lt;dt&gt;. You can make terms and descriptions in &lt;dl&gt; line up side-by-side using class&nbsp;<em>dl-horizontal</em>.</li></ul>\n\n\n\n<p>The following example demonstrates each of these types −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h4>Example of Ordered List&lt;/h4>\n&lt;ol>\n   &lt;li>Item 1&lt;/li>\n   &lt;li>Item 2&lt;/li>\n   &lt;li>Item 3&lt;/li>\n   &lt;li>Item 4&lt;/li>\n&lt;/ol>\n\n&lt;h4>Example of UnOrdered List&lt;/h4>\n\n&lt;ul>\n   &lt;li>Item 1&lt;/li>\n   &lt;li>Item 2&lt;/li>\n   &lt;li>Item 3&lt;/li>\n   &lt;li>Item 4&lt;/li>\n&lt;/ul>\n\n&lt;h4>Example of Unstyled List&lt;/h4>\n\n&lt;ul class = \"list-unstyled\">\n   &lt;li>Item 1&lt;/li>\n   &lt;li>Item 2&lt;/li>\n   &lt;li>Item 3&lt;/li>\n   &lt;li>Item 4&lt;/li>\n&lt;/ul>\n\n&lt;h4>Example of Inline List&lt;/h4>\n\n&lt;ul class = \"list-inline\">\n   &lt;li>Item 1&lt;/li>\n   &lt;li>Item 2&lt;/li>\n   &lt;li>Item 3&lt;/li>\n   &lt;li>Item 4&lt;/li>\n&lt;/ul>\n\n&lt;h4>Example of Definition List&lt;/h4>\n\n&lt;dl>\n   &lt;dt>Description 1&lt;/dt>\n   &lt;dd>Item 1&lt;/dd>\n   &lt;dt>Description 2&lt;/dt>\n   &lt;dd>Item 2&lt;/dd>\n&lt;/dl>\n\n&lt;h4>Example of Horizontal Definition List&lt;/h4>\n\n&lt;dl class = \"dl-horizontal\">\n   &lt;dt>Description 1&lt;/dt>\n   &lt;dd>Item 1&lt;/dd>\n   &lt;dt>Description 2&lt;/dt>\n   &lt;dd>Item 2&lt;/dd>\n&lt;/dl></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Bootstrap uses Helvetica Neue, Helvetica, Arial, and sans-serif in its default font stack. Using typography feature of Bootstrap you can create headings, paragraphs, lists and other inline elements. Let see learn each one of these in the following sections. Headings All HTML headings (h1 to h6) are styled in Bootstrap. An example is shown below [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4084"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4084"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4084/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4084"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4084"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4084"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4085,
    "date": "2020-08-20T06:06:10",
    "date_gmt": "2020-08-20T06:06:10",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=189"
    },
    "modified": "2020-08-20T06:06:10",
    "modified_gmt": "2020-08-20T06:06:10",
    "slug": "bootstrap-code",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-code/",
    "title": {
      "rendered": "Code"
    },
    "content": {
      "rendered": "\n<p>Bootstrap allows you to display code with two different key ways −</p>\n\n\n\n<ul><li>The first is the &lt;code&gt; tag. If you are going to be displaying code inline, you should use the &lt;code&gt; tag.</li><li>Second is the &lt;pre&gt; tag. If the code needs to be displayed as a standalone block element or if it has multiple lines, then you should use the &lt;pre&gt; tag.</li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Make sure that when you use the &lt;pre&gt; and &lt;code&gt; tags, you use the unicode variants for the opening and closing tags −&nbsp;<strong>&amp;lt;</strong>&nbsp;and&nbsp;<strong>&amp;gt;</strong>.</p></blockquote>\n\n\n\n<p>Let us see an example below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;article>\n      &lt;h1>Article Heading&lt;/h1>\n   &lt;/article></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Bootstrap allows you to display code with two different key ways − The first is the &lt;code&gt; tag. If you are going to be displaying code inline, you should use the &lt;code&gt; tag. Second is the &lt;pre&gt; tag. If the code needs to be displayed as a standalone block element or if it has multiple [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4085"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4085"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4085/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4085"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4085"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4085"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4086,
    "date": "2020-08-20T06:14:01",
    "date_gmt": "2020-08-20T06:14:01",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=192"
    },
    "modified": "2020-08-20T06:14:01",
    "modified_gmt": "2020-08-20T06:14:01",
    "slug": "bootstrap-tables",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-tables/",
    "title": {
      "rendered": "Tables"
    },
    "content": {
      "rendered": "\n<p>Bootstrap provides a clean layout for building tables. Some of the table elements supported by Bootstrap are −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Tag &amp; Description</th></tr><tr><td>1</td><td><strong>&lt;table&gt;</strong>Wrapping element for displaying data in a tabular format</td></tr><tr><td>2</td><td><strong>&lt;thead&gt;</strong>Container element for table header rows (&lt;tr&gt;) to label table columns.</td></tr><tr><td>3</td><td><strong>&lt;tbody&gt;</strong>Container element for table rows (&lt;tr&gt;) in the body of the table.</td></tr><tr><td>4</td><td><strong>&lt;tr&gt;</strong>Container element for a set of table cells (&lt;td&gt; or &lt;th&gt;) that appears on a single row.</td></tr><tr><td>5</td><td><strong>&lt;td&gt;</strong>Default table cell.</td></tr><tr><td>6</td><td><strong>&lt;th&gt;</strong>Special table cell for column (or row, depending on scope and placement) labels. Must be used within a &lt;thead&gt;</td></tr><tr><td>7</td><td><strong>&lt;caption&gt;</strong>Description or summary of what the table holds.</td></tr></tbody></table></figure>\n\n\n\n<h2>Basic Table</h2>\n\n\n\n<p>If you want a nice, basic table style with just some light padding and horizontal dividers, add the base class of&nbsp;<em>.table</em>&nbsp;to any table as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;table class = \"table\">\n   &lt;caption>Basic Table Layout&lt;/caption>\n   \n   &lt;thead>\n      &lt;tr>\n         &lt;th>Name&lt;/th>\n         &lt;th>City&lt;/th>\n      &lt;/tr>\n   &lt;/thead>\n   \n   &lt;tbody>\n      &lt;tr>\n         &lt;td>Tanmay&lt;/td>\n         &lt;td>Bangalore&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Sachin&lt;/td>\n         &lt;td>Mumbai&lt;/td>\n      &lt;/tr>\n   &lt;/tbody>\n&lt;/table></code></pre>\n\n\n\n<h2>Optional Table Classes</h2>\n\n\n\n<p>Along with the base table markup and the .table class, there are a few additional classes that you can use to style the markup. Following sections will give you a glimpse of all these classes.</p>\n\n\n\n<h3>Striped Table</h3>\n\n\n\n<p>By adding the&nbsp;<em>.table-striped</em>&nbsp;class, you will get stripes on rows within the &lt;tbody&gt; as seen in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;table class = \"table table-striped\">\n   &lt;caption>Striped Table Layout&lt;/caption>\n   \n   &lt;thead>\n      &lt;tr>\n         &lt;th>Name&lt;/th>\n         &lt;th>City&lt;/th>\n         &lt;th>Pincode&lt;/th>\n      &lt;/tr>\n   &lt;/thead>\n   \n   &lt;tbody>\n      &lt;tr>\n         &lt;td>Tanmay&lt;/td>\n         &lt;td>Bangalore&lt;/td>\n         &lt;td>560001&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Sachin&lt;/td>\n         &lt;td>Mumbai&lt;/td>\n         &lt;td>400003&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Uma&lt;/td>\n         &lt;td>Pune&lt;/td>\n         &lt;td>411027&lt;/td>\n      &lt;/tr>\n   &lt;/tbody>\n&lt;/table></code></pre>\n\n\n\n<h3>Bordered Table</h3>\n\n\n\n<p>By adding the&nbsp;<em>.table-bordered</em>&nbsp;class, you will get borders surrounding every element and rounded corners around the entire table as seen in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;table class = \"table table-bordered\">\n   &lt;caption>Bordered Table Layout&lt;/caption>\n   \n   &lt;thead>\n      &lt;tr>\n         &lt;th>Name&lt;/th>\n         &lt;th>City&lt;/th>\n         &lt;th>Pincode&lt;/th>\n      &lt;/tr>\n   &lt;/thead>\n   \n   &lt;tbody>\n      &lt;tr>\n         &lt;td>Tanmay&lt;/td>\n         &lt;td>Bangalore&lt;/td>\n         &lt;td>560001&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Sachin&lt;/td>\n         &lt;td>Mumbai&lt;/td>\n         &lt;td>400003&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Uma&lt;/td>\n         &lt;td>Pune&lt;/td>\n         &lt;td>411027&lt;/td>\n      &lt;/tr>\n   &lt;/tbody>\n\t\n&lt;/table></code></pre>\n\n\n\n<h3>Hover Table</h3>\n\n\n\n<p>By adding the&nbsp;<em>.table-hover</em>&nbsp;class, a light gray background will be added to rows while the cursor hovers over them, as seen in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;table class = \"table table-hover\">\n   &lt;caption>Hover Table Layout&lt;/caption>\n   \n   &lt;thead>\n      &lt;tr>\n         &lt;th>Name&lt;/th>\n         &lt;th>City&lt;/th>\n         &lt;th>Pincode&lt;/th>\n      &lt;/tr>\n   &lt;/thead>\n   \n   &lt;tbody>\n      &lt;tr>\n         &lt;td>Tanmay&lt;/td>\n         &lt;td>Bangalore&lt;/td>\n         &lt;td>560001&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Sachin&lt;/td>\n         &lt;td>Mumbai&lt;/td>\n         &lt;td>400003&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Uma&lt;/td>\n         &lt;td>Pune&lt;/td>\n         &lt;td>411027&lt;/td>\n      &lt;/tr>\n   &lt;/tbody>\n&lt;/table></code></pre>\n\n\n\n<h3>Condensed </h3>\n\n\n\n<p>By adding the&nbsp;<em>.table-condensed&nbsp;</em>class, row padding is cut in half to condense the table. as seen in the following example. This is useful if you want any denser information.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;table class = \"table table-condensed\">\n   &lt;caption>Condensed Table Layout&lt;/caption>\n   \n   &lt;thead>\n      &lt;tr>\n         &lt;th>Name&lt;/th>\n         &lt;th>City&lt;/th>\n         &lt;th>Pincode&lt;/th>\n      &lt;/tr>\n   &lt;/thead>\n   \n   &lt;tbody>\n      &lt;tr>\n         &lt;td>Tanmay&lt;/td>\n         &lt;td>Bangalore&lt;/td>\n         &lt;td>560001&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Sachin&lt;/td>\n         &lt;td>Mumbai&lt;/td>\n         &lt;td>400003&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Uma&lt;/td>\n         &lt;td>Pune&lt;/td>\n         &lt;td>411027&lt;/td>\n      &lt;/tr>\n   &lt;/tbody>\n&lt;/table></code></pre>\n\n\n\n<h2>Contextual classes</h2>\n\n\n\n<p>The Contextual classes shown in following table will allow you to change the background color of your table rows or individual cells.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Class &amp; Description</th></tr><tr><td>1</td><td><strong>.active</strong>Applies the hover color to a particular row or cell</td></tr><tr><td>2</td><td><strong>.success</strong>Indicates a successful or positive action</td></tr><tr><td>3</td><td><strong>.warning</strong>Indicates a warning that might need attention</td></tr><tr><td>4</td><td><strong>.danger</strong>Indicates a dangerous or potentially negative action</td></tr></tbody></table></figure>\n\n\n\n<p>These classes can be applied to &lt;tr&gt;, &lt;td&gt; or &lt;th&gt;.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;table class = \"table\">\n   &lt;caption>Contextual Table Layout&lt;/caption>\n   \n   &lt;thead>\n      &lt;tr>\n         &lt;th>Product&lt;/th>\n         &lt;th>Payment Date&lt;/th>\n         &lt;th>Status&lt;/th>\n      &lt;/tr>\n   &lt;/thead>\n   \n   &lt;tbody>\n      &lt;tr class = \"active\">\n         &lt;td>Product1&lt;/td>\n         &lt;td>23/11/2013&lt;/td>\n         &lt;td>Pending&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr class = \"success\">\n         &lt;td>Product2&lt;/td>\n         &lt;td>10/11/2013&lt;/td>\n         &lt;td>Delivered&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr class = \"warning\">\n         &lt;td>Product3&lt;/td>\n         &lt;td>20/10/2013&lt;/td>\n         &lt;td>In Call to confirm&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr class = \"danger\">\n         &lt;td>Product4&lt;/td>\n         &lt;td>20/10/2013&lt;/td>\n         &lt;td>Declined&lt;/td>\n      &lt;/tr>\n   &lt;/tbody>\n&lt;/table></code></pre>\n\n\n\n<h2>Responsive Tables</h2>\n\n\n\n<p>By wrapping any&nbsp;<em>.table</em>&nbsp;in&nbsp;<em>.table-responsive</em>&nbsp;class, you will make the table scroll horizontally up to small devices (under 768px). When viewing on anything larger than 768px wide, you will not see any difference in these tables.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"table-responsive\">\n   &lt;table class = \"table\">\n      &lt;caption>Responsive Table Layout&lt;/caption>\n      \n      &lt;thead>\n         &lt;tr>\n            &lt;th>Product&lt;/th>\n            &lt;th>Payment Date&lt;/th>\n            &lt;th>Status&lt;/th>\n         &lt;/tr>\n      &lt;/thead>\n      \n      &lt;tbody>\n         &lt;tr>\n            &lt;td>Product1&lt;/td>\n            &lt;td>23/11/2013&lt;/td>\n            &lt;td>Pending&lt;/td>\n         &lt;/tr>\n         \n         &lt;tr>\n            &lt;td>Product2&lt;/td>\n            &lt;td>10/11/2013&lt;/td>\n            &lt;td>Delivered&lt;/td>\n         &lt;/tr>\n         \n         &lt;tr>\n            &lt;td>Product3&lt;/td>\n            &lt;td>20/10/2013&lt;/td>\n            &lt;td>In Call to confirm&lt;/td>\n         &lt;/tr>\n         \n         &lt;tr>\n            &lt;td>Product4&lt;/td>\n            &lt;td>20/10/2013&lt;/td>\n            &lt;td>Declined&lt;/td>\n         &lt;/tr>\n      &lt;/tbody>\n   &lt;/table>\n&lt;/div>  \t</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Bootstrap provides a clean layout for building tables. Some of the table elements supported by Bootstrap are − Sr.No. Tag &amp; Description 1 &lt;table&gt;Wrapping element for displaying data in a tabular format 2 &lt;thead&gt;Container element for table header rows (&lt;tr&gt;) to label table columns. 3 &lt;tbody&gt;Container element for table rows (&lt;tr&gt;) in the body of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4086"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4086"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4086/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4086"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4086"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4086"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4087,
    "date": "2020-08-20T06:20:46",
    "date_gmt": "2020-08-20T06:20:46",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=194"
    },
    "modified": "2020-08-20T06:20:46",
    "modified_gmt": "2020-08-20T06:20:46",
    "slug": "bootstrap-forms",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-forms/",
    "title": {
      "rendered": "Forms"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will study how to create forms with ease using Bootstrap. Bootstrap makes it easy with the simple HTML markup and extended classes for different styles of forms. In this chapter we will study how to create forms with ease using Bootstrap.</p>\n\n\n\n<h2>Form Layout</h2>\n\n\n\n<p>Bootstrap provides you with following types of form layouts −</p>\n\n\n\n<ul><li>Vertical (default) form</li><li>In-line form</li><li>Horizontal form</li></ul>\n\n\n\n<h3>Vertical or Basic Form</h3>\n\n\n\n<p>The basic form structure comes with Bootstrap; individual form controls automatically receive some global styling. To create a basic form do the following −</p>\n\n\n\n<ul><li>Add a role&nbsp;<em>form</em>&nbsp;to the parent &lt;form&gt; element.</li><li>Wrap labels and controls in a &lt;div&gt; with class&nbsp;<em>.form-group</em>. This is needed for optimum spacing.</li><li>Add a class of&nbsp;<em>.form-control</em>&nbsp;to all textual &lt;input&gt;, &lt;textarea&gt;, and &lt;select&gt; elements.</li></ul>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form role = \"form\">\n\n   &lt;div class = \"form-group\">\n      &lt;label for = \"name\">Name&lt;/label>\n      &lt;input type = \"text\" class = \"form-control\" id = \"name\" placeholder = \"Enter Name\">\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;label for = \"inputfile\">File input&lt;/label>\n      &lt;input type = \"file\" id = \"inputfile\">\n      &lt;p class = \"help-block\">Example block-level help text here.&lt;/p>\n   &lt;/div>\n   \n   &lt;div class = \"checkbox\">\n      &lt;label>&lt;input type = \"checkbox\"> Check me out&lt;/label>\n   &lt;/div>\n   \n   &lt;button type = \"submit\" class = \"btn btn-default\">Submit&lt;/button>\n&lt;/form></code></pre>\n\n\n\n<h3>Inline Form</h3>\n\n\n\n<p>To create a form where all of the elements are inline, left aligned and labels are alongside, add the class&nbsp;<em>.form-inline</em>&nbsp;to the &lt;form&gt; tag.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form class = \"form-inline\" role = \"form\">\n   \n   &lt;div class = \"form-group\">\n      &lt;label class = \"sr-only\" for = \"name\">Name&lt;/label>\n      &lt;input type = \"text\" class = \"form-control\" id = \"name\" placeholder = \"Enter Name\">\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;label class = \"sr-only\" for = \"inputfile\">File input&lt;/label>\n      &lt;input type = \"file\" id = \"inputfile\">\n   &lt;/div>\n   \n   &lt;div class = \"checkbox\">\n      &lt;label>&lt;input type = \"checkbox\"> Check me out&lt;/label>\n   &lt;/div>\n   \n   &lt;button type = \"submit\" class = \"btn btn-default\">Submit&lt;/button>\n&lt;/form></code></pre>\n\n\n\n<ul><li>By default inputs, selects, and textareas have 100% width in Bootstrap. You need to set a width on the form controls when using inline form.</li><li>Using the class&nbsp;<em>.sr-only</em>&nbsp;you can hide the labels of the inline forms.</li></ul>\n\n\n\n<h3>Horizontal Form</h3>\n\n\n\n<p>Horizontal forms stands apart from the others not only in the amount of markup, but also in the presentation of the form. To create a form that uses the horizontal layout, do the following −</p>\n\n\n\n<ul><li>Add a class of&nbsp;<em>.form-horizontal</em>&nbsp;to the parent &lt;form&gt; element.</li><li>Wrap labels and controls in a &lt;div&gt; with class&nbsp;<em>.form-group</em>.</li><li>Add a class of&nbsp;<em>.control-label</em>&nbsp;to the labels.</li></ul>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form class = \"form-horizontal\" role = \"form\">\n   \n   &lt;div class = \"form-group\">\n      &lt;label for = \"firstname\" class = \"col-sm-2 control-label\">First Name&lt;/label>\n\t\t\n      &lt;div class = \"col-sm-10\">\n         &lt;input type = \"text\" class = \"form-control\" id = \"firstname\" placeholder = \"Enter First Name\">\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;label for = \"lastname\" class = \"col-sm-2 control-label\">Last Name&lt;/label>\n\t\t\n      &lt;div class = \"col-sm-10\">\n         &lt;input type = \"text\" class = \"form-control\" id = \"lastname\" placeholder = \"Enter Last Name\">\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;div class = \"col-sm-offset-2 col-sm-10\">\n         &lt;div class = \"checkbox\">\n            &lt;label>&lt;input type = \"checkbox\"> Remember me&lt;/label>\n         &lt;/div>\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;div class = \"col-sm-offset-2 col-sm-10\">\n         &lt;button type = \"submit\" class = \"btn btn-default\">Sign in&lt;/button>\n      &lt;/div>\n   &lt;/div>\n\t\n&lt;/form></code></pre>\n\n\n\n<h2>Supported Form Controls</h2>\n\n\n\n<p>Bootstrap natively supports the most common form controls mainly&nbsp;<em>input, textarea, checkbox, radio, and select.</em></p>\n\n\n\n<h3>Inputs</h3>\n\n\n\n<p>The most common form text field is the input field. This is where users will enter most of the essential form data. Bootstrap offers support for all native HTML5 input types:&nbsp;<em>text, password, datetime, datetime-local, date, month, time, week, number, email, url, search, tel,</em>&nbsp;and&nbsp;<em>color</em>. Proper&nbsp;<em>type</em>&nbsp;declaration is required to make&nbsp;<em>Inputs</em>&nbsp;fully styled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form role = \"form\">\n   \n   &lt;div class = \"form-group\">\n      &lt;label for = \"name\">Label&lt;/label>\n      &lt;input type = \"text\" class = \"form-control\" placeholder = \"Text input\">\n   &lt;/div>\n  \n&lt;/form></code></pre>\n\n\n\n<h3>Textarea</h3>\n\n\n\n<p>The textarea is used when you need multiple lines of input. Change&nbsp;<em>rows</em>&nbsp;attribute as necessary (fewer rows = smaller box, more rows = bigger box).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form role = \"form\">\n   \n   &lt;div class = \"form-group\">\n      &lt;label for = \"name\">Text Area&lt;/label>\n      &lt;textarea class = \"form-control\" rows = \"3\">&lt;/textarea>\n   &lt;/div>\n   \n&lt;/form></code></pre>\n\n\n\n<h3>CheckBoxes and Radio Buttons</h3>\n\n\n\n<p>Checkboxes and radio buttons are great when you want users to choose from a list of preset options.</p>\n\n\n\n<ul><li>When building a form, use&nbsp;<em>checkbox</em>&nbsp;if you want the user to select any number of options from a list. Use&nbsp;<em>radio</em>&nbsp;if you want to limit the user to just one selection.</li><li>Use&nbsp;<em>.checkbox-inline</em>&nbsp;or&nbsp;<em>.radio-inline</em>&nbsp;class to a series of checkboxes or radios for controls appear on the same line.</li></ul>\n\n\n\n<p>The following example demonstrates both (default and inline) types −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;label for = \"name\">Example of Default Checkbox and radio button &lt;/label>\n\n&lt;div class = \"checkbox\">\n   &lt;label>\n      &lt;input type = \"checkbox\" value = \"\">Option 1\n   &lt;/label>\n&lt;/div>\n\n&lt;div class = \"checkbox\">\n   &lt;label>\n      &lt;input type = \"checkbox\" value = \"\">Option 2\n   &lt;/label>\n&lt;/div>\n\n&lt;div class = \"radio\">\n   &lt;label>\n      &lt;input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios1\" value = \"option1\" checked> Option 1\n   &lt;/label>\n&lt;/div>\n\n&lt;div class = \"radio\">\n   &lt;label>\n      &lt;input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios2\" value = \"option2\">\n      Option 2 - selecting it will deselect option 1\n   &lt;/label>\n&lt;/div>\n\n&lt;label for = \"name\">Example of Inline Checkbox and radio button &lt;/label>\n\n&lt;div>\n   &lt;label class = \"checkbox-inline\">\n      &lt;input type = \"checkbox\" id = \"inlineCheckbox1\" value = \"option1\"> Option 1\n   &lt;/label>\n   \n   &lt;label class = \"checkbox-inline\">\n      &lt;input type = \"checkbox\" id = \"inlineCheckbox2\" value = \"option2\"> Option 2\n   &lt;/label>\n   \n   &lt;label class = \"checkbox-inline\">\n      &lt;input type = \"checkbox\" id = \"inlineCheckbox3\" value = \"option3\"> Option 3\n   &lt;/label>\n   \n   &lt;label class = \"checkbox-inline\">\n      &lt;input type = \"radio\" name = \"optionsRadiosinline\" id = \"optionsRadios3\" value = \"option1\" checked> Option 1\n   &lt;/label>\n   \n   &lt;label class = \"checkbox-inline\">\n      &lt;input type = \"radio\" name = \"optionsRadiosinline\" id = \"optionsRadios4\" value = \"option2\"> Option 2\n   &lt;/label>\n&lt;/div></code></pre>\n\n\n\n<h3>Selects</h3>\n\n\n\n<p>A select is used when you want to allow the user to pick from multiple options, but by default it only allows one.</p>\n\n\n\n<ul><li>Use &lt;select&gt; for list options with which the user is familiar, such as states or numbers.</li><li>Use&nbsp;<em>multiple = &#8220;multiple&#8221;</em>&nbsp;to allow the users to select more than one option.</li></ul>\n\n\n\n<p>The following example demonstrates both (select and multiple) types −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form role = \"form\">\n   \n   &lt;div class = \"form-group\">\n      &lt;label for = \"name\">Select list&lt;/label>\n      \n      &lt;select class = \"form-control\">\n         &lt;option>1&lt;/option>\n         &lt;option>2&lt;/option>\n         &lt;option>3&lt;/option>\n         &lt;option>4&lt;/option>\n         &lt;option>5&lt;/option>\n      &lt;/select>\n\n      &lt;label for = \"name\">Mutiple Select list&lt;/label>\n      \n      &lt;select multiple class = \"form-control\">\n         &lt;option>1&lt;/option>\n         &lt;option>2&lt;/option>\n         &lt;option>3&lt;/option>\n         &lt;option>4&lt;/option>\n         &lt;option>5&lt;/option>\n      &lt;/select>\n      \n   &lt;/div>\n\t\n&lt;/form></code></pre>\n\n\n\n<h2>Static Control</h2>\n\n\n\n<p>Use the class&nbsp;<em>.form-control-static</em>&nbsp;on a &lt;p&gt;, when you need to place plain text next to a form label within a horizontal form.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form class = \"form-horizontal\" role = \"form\">\n   &lt;div class = \"form-group\">\n      &lt;label class = \"col-sm-2 control-label\">Email&lt;/label>\n      \n      &lt;div class = \"col-sm-10\">\n         &lt;p class = \"form-control-static\">email@example.com&lt;/p>\n      &lt;/div>\n      \n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;label for = \"inputPassword\" class = \"col-sm-2 control-label\">Password&lt;/label>\n      \n      &lt;div class = \"col-sm-10\">\n         &lt;input type = \"password\" class = \"form-control\" id = \"inputPassword\" placeholder = \"Password\">\n      &lt;/div>\n      \n   &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<h2>Form Control States</h2>\n\n\n\n<p>In addition to the&nbsp;<em>:focus</em>&nbsp;(i.e., a user clicks into the input or tabs onto it) state, Bootstrap offers styling for disabled inputs and classes for form validation.</p>\n\n\n\n<h3>Input Focus</h3>\n\n\n\n<p>When an input receives&nbsp;<em>:focus</em>, the outline of the input is removed and a&nbsp;<em>box-shadow</em>&nbsp;is applied.</p>\n\n\n\n<h3>Disabled lnputs</h3>\n\n\n\n<p>If you need to disable an input, simply adding the&nbsp;<em>disabled</em>&nbsp;attribute will not only disable it; it will also change the styling and the mouse cursor when the cursor hovers over the element.</p>\n\n\n\n<h3>Disabled Fieldsets</h3>\n\n\n\n<p>Add the disabled attribute to a &lt;fieldset&gt; to disable all the controls within the &lt;fieldset&gt; at once.</p>\n\n\n\n<h3>Validation States</h3>\n\n\n\n<p>Bootstrap includes validation styles for errors, warnings, and success messages. To use, simply add the appropriate class (<em>.has-warning, .has-error, or .has-success</em>) to the parent element.</p>\n\n\n\n<p>The following example demonstrates all the form control states −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form class = \"form-horizontal\" role = \"form\">\n   &lt;div class = \"form-group\">\n      &lt;label class = \"col-sm-2 control-label\">Focused&lt;/label>\n      &lt;div class = \"col-sm-10\">\n         &lt;input class = \"form-control\" id = \"focusedInput\" type = \"text\" value = \"This is focused...\">\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;label for = \"inputPassword\" class = \"col-sm-2 control-label\">\n         Disabled\n      &lt;/label>\n      &lt;div class = \"col-sm-10\">\n         &lt;input class = \"form-control\" id = \"disabledInput\" type = \"text\" placeholder = \"Disabled input here...\" disabled>\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;fieldset disabled>\n      &lt;div class = \"form-group\">\n         &lt;label for = \"disabledTextInput\" class = \"col-sm-2 control-label\">\n            Disabled input (Fieldset disabled)\n         &lt;/label>\n         &lt;div class = \"col-sm-10\">\n            &lt;input type = \"text\" id = \"disabledTextInput\" class = \"form-control\" placeholder = \"Disabled input\">\n         &lt;/div> \n      &lt;/div>\n      \n      &lt;div class = \"form-group\">\n         &lt;label for = \"disabledSelect\" class = \"col-sm-2 control-label\"> \n            Disabled select menu (Fieldset disabled)\n         &lt;/label>\n         &lt;div class = \"col-sm-10\">\n            &lt;select id = \"disabledSelect\" class = \"form-control\"> \n               &lt;option>Disabled select&lt;/option>\n            &lt;/select> \n         &lt;/div>\n      &lt;/div> \n   &lt;/fieldset>\n   \n   &lt;div class = \"form-group has-success\">\n      &lt;label class = \"col-sm-2 control-label\" for = \"inputSuccess\">\n         Input with success\n      &lt;/label>\n      &lt;div class = \"col-sm-10\">\n         &lt;input type = \"text\" class = \"form-control\" id = \"inputSuccess\">\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"form-group has-warning\">\n      &lt;label class = \"col-sm-2 control-label\" for = \"inputWarning\">\n         Input with warning\n      &lt;/label>\n      &lt;div class = \"col-sm-10\">\n         &lt;input type = \"text\" class = \"form-control\" id = \"inputWarning\">\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"form-group has-error\">\n      &lt;label class = \"col-sm-2 control-label\" for = \"inputError\">\n         Input with error\n      &lt;/label>\n      &lt;div class = \"col-sm-10\">\n         &lt;input type = \"text\" class = \"form-control\" id = \"inputError\">\n      &lt;/div>\n   &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<h2>Form Control Sizing</h2>\n\n\n\n<p>You can set heights and widths of forms using classes like&nbsp;<em>.input-lg</em>&nbsp;and&nbsp;<em>.col-lg-*</em>&nbsp;respectively. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form role = \"form\">\n\n   &lt;div class = \"form-group\">\n      &lt;input class = \"form-control input-lg\" type = \"text\" placeholder =\".input-lg\">\n   &lt;/div>\n\n   &lt;div class = \"form-group\">\n      &lt;input class = \"form-control\" type = \"text\" placeholder = \"Default input\">\n   &lt;/div>\n\n   &lt;div class = \"form-group\">\n      &lt;input class = \"form-control input-sm\" type = \"text\" placeholder = \".input-sm\">\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">&lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;select class = \"form-control input-lg\">\n         &lt;option value = \"\">.input-lg&lt;/option>\n      &lt;/select>\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;select class = \"form-control\">\n         &lt;option value = \"\">Default select&lt;/option>\n      &lt;/select>\n   &lt;/div>\n   \n   &lt;div class = \"form-group\">\n      &lt;select class = \"form-control input-sm\">\n         &lt;option value = \"\">.input-sm&lt;/option>\n      &lt;/select>\n   &lt;/div>\n\n   &lt;div class = \"row\">\n      &lt;div class = \"col-lg-2\">\n         &lt;input type = \"text\" class = \"form-control\" placeholder = \".col-lg-2\">\n      &lt;/div>\n      \n      &lt;div class = \"col-lg-3\">\n         &lt;input type = \"text\" class = \"form-control\" placeholder = \".col-lg-3\">\n      &lt;/div>\n      \n      &lt;div class = \"col-lg-4\">\n         &lt;input type = \"text\" class = \"form-control\" placeholder = \".col-lg-4\">\n      &lt;/div>\n      \n   &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<h2>Help Text</h2>\n\n\n\n<p>Bootstrap form controls can have a block level help text that flows with the inputs. To add a full width block of content, use the&nbsp;<em>.help-block</em>&nbsp;after the &lt;input&gt;. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form role = \"form\">\n   &lt;span>Example of Help Text&lt;/span>\n   &lt;input class = \"form-control\" type = \"text\" placeholder = \"\">\n   \n   &lt;span class = \"help-block\">\n      A longer block of help text that breaks onto a new line and may extend beyond one line.\n   &lt;/span>\n\t\n&lt;/form></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will study how to create forms with ease using Bootstrap. Bootstrap makes it easy with the simple HTML markup and extended classes for different styles of forms. In this chapter we will study how to create forms with ease using Bootstrap. Form Layout Bootstrap provides you with following types of form [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4087"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4087"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4087/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4087"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4087"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4087"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4088,
    "date": "2020-08-20T06:24:13",
    "date_gmt": "2020-08-20T06:24:13",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=196"
    },
    "modified": "2020-08-20T06:24:13",
    "modified_gmt": "2020-08-20T06:24:13",
    "slug": "bootstrap-buttons",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-buttons/",
    "title": {
      "rendered": "Buttons"
    },
    "content": {
      "rendered": "\n<p>This chapter covers the use age of Bootstrap button with examples. Anything that is given a class of&nbsp;<strong>.btn</strong>&nbsp;will inherit the default look of a gray button with rounded corners. However, Bootstrap provides some options to style buttons, which are summarized in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Class &amp; Description</th></tr><tr><td>1</td><td><strong>btn</strong>Default/ Standard button.</td></tr><tr><td>2</td><td><strong>btn-primary</strong>Provides extra visual weight and identifies the primary action in a set of buttons.</td></tr><tr><td>3</td><td><strong>btn-success</strong>Indicates a successful or positive action.</td></tr><tr><td>4</td><td><strong>btn-info</strong>Contextual button for informational alert messages.</td></tr><tr><td>5</td><td><strong>btn-warning</strong>Indicates caution should be taken with this action.</td></tr><tr><td>6</td><td><strong>btn-danger</strong>Indicates a dangerous or potentially negative action.</td></tr><tr><td>7</td><td><strong>btn-link</strong>Deemphasize a button by making it look like a link while maintaining button behavior.</td></tr></tbody></table></figure>\n\n\n\n<p>The following example demonstrates all the above button classes −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Standard button -->\n&lt;button type = \"button\" class = \"btn btn-default\">Default Button&lt;/button>\n\n&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons -->\n&lt;button type = \"button\" class = \"btn btn-primary\">Primary Button&lt;/button>\n\n&lt;!-- Indicates a successful or positive action -->\n&lt;button type = \"button\" class = \"btn btn-success\">Success Button&lt;/button>\n\n&lt;!-- Contextual button for informational alert messages -->\n&lt;button type = \"button\" class = \"btn btn-info\">Info Button&lt;/button>\n\n&lt;!-- Indicates caution should be taken with this action -->\n&lt;button type = \"button\" class = \"btn btn-warning\">Warning Button&lt;/button>\n\n&lt;!-- Indicates a dangerous or potentially negative action -->\n&lt;button type = \"button\" class = \"btn btn-danger\">Danger Button&lt;/button>\n\n&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior -->\n&lt;button type = \"button\" class = \"btn btn-link\">Link Button&lt;/button></code></pre>\n\n\n\n<h2>Button Size</h2>\n\n\n\n<p>The following table summarizes the classes used to get buttons of various sizes −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Class &amp; Description</th></tr><tr><td>1</td><td><strong>.btn-lg</strong>This makes the button size large.</td></tr><tr><td>2</td><td><strong>.btn-sm</strong>This makes the button size small.</td></tr><tr><td>3</td><td><strong>.btn-xs</strong>This makes the button size extra small.</td></tr><tr><td>4</td><td><strong>.btn-block</strong>This creates block level buttons—those that span the full width of a parent.</td></tr></tbody></table></figure>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-primary btn-lg\">\n      Large Primary button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default btn-lg\">\n      Large button\n   &lt;/button>\n&lt;/p>\n\n&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-primary\">\n      Default size Primary button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default\">\n      Default size button\n   &lt;/button>\n&lt;/p>\n\n&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-primary btn-sm\">\n      Small Primary button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default btn-sm\">\n      Small button\n   &lt;/button>\n&lt;/p>\n\n&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-primary btn-xs\">\n      Extra small Primary button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default btn-xs\">\n      Extra small button\n   &lt;/button>\n&lt;/p>\n\n&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-primary btn-lg btn-block\">\n      Block level Primary button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default btn-lg btn-block\">\n      Block level button\n   &lt;/button>\n&lt;/p></code></pre>\n\n\n\n<h2>Button State</h2>\n\n\n\n<p>Bootstrap provides classes which allow you to change the state of buttons as active, disabled etc. each of which are discussed in the following sections.</p>\n\n\n\n<h3>Active State</h3>\n\n\n\n<p>Buttons will appear pressed (with a darker background, darker border, and inset shadow) when active. The following table summarizes classes used to make button elements and anchor elements active −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Element</th><th>Class</th></tr><tr><td>Button element</td><td>Use&nbsp;<strong>.active</strong>&nbsp;class to show that it is activated.</td></tr><tr><td>Anchor element</td><td>Use&nbsp;<strong>.active</strong>&nbsp;class to &lt;a&gt; buttons to show that it is activated.</td></tr></tbody></table></figure>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-default btn-lg \">\n      Default Button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default btn-lg active\">\n      Active Button\n   &lt;/button>\n&lt;/p>\n\n&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-primary btn-lg\">\n      Primary button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-primary btn-lg active\">\n      Active Primary button\n   &lt;/button>\n&lt;/p></code></pre>\n\n\n\n<h3>Disabled State</h3>\n\n\n\n<p>When you disable a button, it will fade in color by 50%, and lose the gradient.</p>\n\n\n\n<p>The following table summarizes classes used to make button element and anchor element disabled −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Element</th><th>Class</th></tr><tr><td>Button element</td><td>Add the&nbsp;<strong>disabled</strong>&nbsp;<em>attribute</em>&nbsp;to &lt;button&gt; buttons.</td></tr><tr><td>Anchor element</td><td>Add the&nbsp;<strong>disabled</strong>&nbsp;<em>class</em>&nbsp;to &lt;a&gt; buttons.<strong>Note</strong>&nbsp;− This class will only change the &lt;a&gt;&#8217;s appearance, not its functionality. You need to use custom JavaScript to disable links here.</td></tr></tbody></table></figure>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-default btn-lg\">\n      Default Button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default btn-lg\" disabled = \"disabled\">\n      Disabled Button\n   &lt;/button>\n&lt;/p>\n\n&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-primary btn-lg\">\n      Primary button\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-primary btn-lg\" disabled = \"disabled\">\n      Disabled Primary button\n   &lt;/button>\n&lt;/p>\n\n&lt;p>\n   &lt;a href = \"#\" class = \"btn btn-default btn-lg\" role = \"button\">\n      Link\n   &lt;/a>\n   \n   &lt;a href = \"#\" class = \"btn btn-default btn-lg disabled\" role = \"button\">\n      Disabled Link\n   &lt;/a>\n&lt;/p>\n\n&lt;p>\n   &lt;a href = \"#\" class = \"btn btn-primary btn-lg\" role = \"button\">\n      Primary link\n   &lt;/a>\n   \n   &lt;a href = \"#\" class = \"btn btn-primary btn-lg disabled\" role = \"button\">\n      Disabled Primary link\n   &lt;/a>\n&lt;/p></code></pre>\n\n\n\n<h2>Button Tags</h2>\n\n\n\n<p>You may use button classes with &lt;a&gt;, &lt;button&gt;, or &lt;input&gt; element. But it is recommended that you use it with &lt;button&gt; elements mostly to avoid cross browser inconsistency issues.</p>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a class = \"btn btn-default\" href = \"#\" role = \"button\">Link&lt;/a>\n&lt;button class = \"btn btn-default\" type = \"submit\">Button&lt;/button>\n&lt;input class = \"btn btn-default\" type = \"button\" value = \"Input\">\n&lt;input class = \"btn btn-default\" type = \"submit\" value = \"Submit\">f</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter covers the use age of Bootstrap button with examples. Anything that is given a class of&nbsp;.btn&nbsp;will inherit the default look of a gray button with rounded corners. However, Bootstrap provides some options to style buttons, which are summarized in the following table − Sr.No. Class &amp; Description 1 btnDefault/ Standard button. 2 btn-primaryProvides [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4088"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4088"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4088/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4088"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4088"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4088"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4089,
    "date": "2020-08-20T06:24:56",
    "date_gmt": "2020-08-20T06:24:56",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=198"
    },
    "modified": "2020-08-20T06:24:56",
    "modified_gmt": "2020-08-20T06:24:56",
    "slug": "bootstrap-images",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-images/",
    "title": {
      "rendered": "Images"
    },
    "content": {
      "rendered": "\n<p>This chapter covers the Bootstrap support for images. Bootstrap provides three classes that can be used to apply some simple styles to images −</p>\n\n\n\n<ul><li><strong><em>.img-rounded</em></strong>&nbsp;− adds&nbsp;<em>border-radius:6px</em>&nbsp;to give the image rounded corners.</li><li><strong><em>.img-circle</em></strong>&nbsp;− makes the entire image round by adding&nbsp;<em>border-radius:500px</em>.</li><li><strong><em>.img-thumbnail</em></strong>&nbsp;− adds a bit of padding and a gray border −</li></ul>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;img src = \"/bootstrap/images/download.png\" class = \"img-rounded\">\n&lt;img src = \"/bootstrap/images/download.png\" class = \"img-circle\">\n&lt;img src = \"/bootstrap/images/download.png\" class = \"img-thumbnail\"></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter covers the Bootstrap support for images. Bootstrap provides three classes that can be used to apply some simple styles to images − .img-rounded&nbsp;− adds&nbsp;border-radius:6px&nbsp;to give the image rounded corners. .img-circle&nbsp;− makes the entire image round by adding&nbsp;border-radius:500px. .img-thumbnail&nbsp;− adds a bit of padding and a gray border − The following example demonstrates this [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4089"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4089"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4089/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4089"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4089"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4089"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4090,
    "date": "2020-08-20T06:27:05",
    "date_gmt": "2020-08-20T06:27:05",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=200"
    },
    "modified": "2020-08-20T06:27:05",
    "modified_gmt": "2020-08-20T06:27:05",
    "slug": "bootstrap-helper-classes",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-helper-classes/",
    "title": {
      "rendered": "Helper Classes"
    },
    "content": {
      "rendered": "\n<p>This chapter discusses some of the helper classes in Bootstrap that might come in handy.</p>\n\n\n\n<h2>Close icon</h2>\n\n\n\n<p>Use the generic close icon for dismissing content like modals and alerts. Use the class&nbsp;<strong>close</strong>&nbsp;to get the close icon.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Close Icon Example\n   &lt;button type = \"button\" class = \"close\" aria-hidden = \"true\">\n      &amp;times;\n   &lt;/button>\n&lt;/p></code></pre>\n\n\n\n<h2>Carets</h2>\n\n\n\n<p>Use carets to indicate dropdown functionality and direction. To get this functionality use the class&nbsp;<strong>caret</strong>&nbsp;with a &lt;span&gt; element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Caret Example&lt;span class = \"caret\">&lt;/span>&lt;/p></code></pre>\n\n\n\n<h2>Quick Floats</h2>\n\n\n\n<p>You can float an element to the left or right with class&nbsp;<strong>pull-left</strong>&nbsp;or&nbsp;<strong>pull-right</strong>&nbsp;respectively the following example demonstrates this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"pull-left\">Quick Float to left&lt;/div>\n&lt;div class = \"pull-right\">Quick Float to right&lt;/div></code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>To align components in navbars with utility classes, use <strong>.navbar-left</strong> or <strong>.navbar-right</strong> instead. See the navbar chapter for details.</p></blockquote>\n\n\n\n<h2>Center Content Blocks</h2>\n\n\n\n<p>Use class&nbsp;<strong>center-block</strong>&nbsp;to set an element to center.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"row\">\n   &lt;div class = \"center-block\" style = \"width:200px; background-color:#ccc;\">\n      This is an example for center-block\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Clearfix</h2>\n\n\n\n<p>To clear the float of any element, use the&nbsp;<strong>.clearfix</strong>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"clearfix\" style = \"background: #D8D8D8;border: 1px solid #000; padding: 10px;\">\n   \n   &lt;div class = \"pull-left\" style = \"background:#58D3F7;\">\n      Quick Float to left\n   &lt;/div>\n   \n   &lt;div class = \"pull-right\" style = \"background: #DA81F5;\">\n      Quick Float to right\n   &lt;/div>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Showing and Hiding Content</h2>\n\n\n\n<p>You can force an element to be shown or hidden (including for screen readers) with the use of classes&nbsp;<strong>.show</strong>&nbsp;and&nbsp;<strong>.hidden</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"row\" style = \"padding: 91px 100px 19px 50px;\">\n   \n   &lt;div class = \"show\" style = \"left-margin:10px; width:300px; background-color:#ccc;\">\n      This is an example for show class\n   &lt;/div>\n   \n   &lt;div class = \"hidden\" style = \"width:200px; background-color:#ccc;\">\n      This is an example for hide class\n   &lt;/div>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Screen Reader Content</h2>\n\n\n\n<p>You can hide an element to all devices except screen readers with the class&nbsp;<strong>.sr-only</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"row\" style = \"padding: 91px 100px 19px 50px;\">\n   &lt;form class = \"form-inline\" role = \"form\">\n      \n      &lt;div class = \"form-group\">\n         &lt;label class = \"sr-only\" for = \"email\">Email address&lt;/label>\n         &lt;input type = \"email\" class = \"form-control\" placeholder = \"Enter email\">\n      &lt;/div>\n      \n      &lt;div class = \"form-group\">\n         &lt;label class = \"sr-only\" for = \"pass\">Password&lt;/label>\n         &lt;input type = \"password\" class = \"form-control\" placeholder = \"Password\">\n      &lt;/div>\n      \n   &lt;/form>\n&lt;/div></code></pre>\n\n\n\n<p>Here we can see that the label of both the input types is assigned the class&nbsp;<strong>sr-only</strong>, hence labels will be visible to only screen readers.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter discusses some of the helper classes in Bootstrap that might come in handy. Close icon Use the generic close icon for dismissing content like modals and alerts. Use the class&nbsp;close&nbsp;to get the close icon. Carets Use carets to indicate dropdown functionality and direction. To get this functionality use the class&nbsp;caret&nbsp;with a &lt;span&gt; element. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4090"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4090"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4090/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4090"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4090"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4090"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4091,
    "date": "2020-08-20T06:28:04",
    "date_gmt": "2020-08-20T06:28:04",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=202"
    },
    "modified": "2020-08-20T06:28:04",
    "modified_gmt": "2020-08-20T06:28:04",
    "slug": "bootstrap-responsive-utilities",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-responsive-utilities/",
    "title": {
      "rendered": "Responsive Utilities"
    },
    "content": {
      "rendered": "\n<p>Bootstrap provides some handful helper classes, for faster mobile-friendly development. These can be used for showing and hiding content by device via media query, combined with large, small, and medium devices.</p>\n\n\n\n<p>Use these sparingly and avoid creating entirely different versions of the same site.&nbsp;<strong>Responsive utilities are currently only available for block and table toggling</strong>.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Classes</th><th>Devices</th></tr><tr><td>.visible-xs</td><td>Extra small (less than 768px)&nbsp;<em>visible</em></td></tr><tr><td>.visible-sm</td><td>Small (up to 768 px)&nbsp;<em>visible</em></td></tr><tr><td>.visible-md</td><td>Medium (768 px to 991 px)&nbsp;<em>visible</em></td></tr><tr><td>.visible-lg</td><td>Larger (992 px and above)&nbsp;<em>visible</em></td></tr><tr><td>.hidden-xs</td><td>Extra small (less than 768px)&nbsp;<em>hidden</em></td></tr><tr><td>.hidden-sm</td><td>Small (up to 768 px)&nbsp;<em>hidden</em></td></tr><tr><td>.hidden-md</td><td>Medium (768 px to 991 px)&nbsp;<em>hidden</em></td></tr><tr><td>.hidden-lg</td><td>Larger (992 px and above)&nbsp;<em>hidden</em></td></tr></tbody></table></figure>\n\n\n\n<h2>Print Classes</h2>\n\n\n\n<p>The following table lists the print classes. Use these for toggling the content for print.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Classes</th><th>Print</th></tr><tr><td>.visible-print</td><td>Yes Visible</td></tr><tr><td>.hidden-print</td><td>Visible only to browser not to print.</td></tr></tbody></table></figure>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following example demonstrates the use of above listed helper classes. Resize your browser or load the example on different devices to test the responsive utility classes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\" style = \"padding: 40px;\">\n   &lt;div class = \"row visible-on\">\n      \n      &lt;div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;span class = \"hidden-xs\">Extra small&lt;/span>\n         &lt;span class = \"visible-xs\">&#x2714; Visible on x-small&lt;/span>\n      &lt;/div>\n      \n      &lt;div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;span class = \"hidden-sm\">Small&lt;/span>\n         &lt;span class = \"visible-sm\">&#x2714; Visible on small&lt;/span>\n      &lt;/div>\n      \n      &lt;div class = \"clearfix visible-xs\">&lt;/div>\n      \n      &lt;div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;span class = \"hidden-md\">Medium&lt;/span>\n         &lt;span class = \"visible-md\">&#x2714; Visible on medium&lt;/span>\n      &lt;/div>\n      \n      &lt;div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n         \n         &lt;span class = \"hidden-lg\">Large&lt;/span>\n         &lt;span class = \"visible-lg\">&#x2714; Visible on large&lt;/span>\n      &lt;/div>\n      \n   &lt;/div>  \n&lt;/div></code></pre>\n\n\n\n<p><strong>Checkmarks</strong>&nbsp;indicates that the element is visible in your current viewport.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Bootstrap provides some handful helper classes, for faster mobile-friendly development. These can be used for showing and hiding content by device via media query, combined with large, small, and medium devices. Use these sparingly and avoid creating entirely different versions of the same site.&nbsp;Responsive utilities are currently only available for block and table toggling. Classes [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4091"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4091"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4091/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4091"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4091"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4091"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4092,
    "date": "2020-08-20T06:29:03",
    "date_gmt": "2020-08-20T06:29:03",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=204"
    },
    "modified": "2020-08-20T06:29:03",
    "modified_gmt": "2020-08-20T06:29:03",
    "slug": "bootstrap-glyphicons",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-glyphicons/",
    "title": {
      "rendered": "Glyphicons"
    },
    "content": {
      "rendered": "\n<p>This chapter will discuss about Glyphicons, its use and some examples. Bootstrap bundles 200 glyphs in font format. Let us now understand what Glyphicons are.</p>\n\n\n\n<h2>What are Glyphicons?</h2>\n\n\n\n<p>Glyphicons are icon fonts which you can use in your web projects.&nbsp;Glyphicons Halflings&nbsp;are not free and require licensing, however their creator has made them available for Bootstrap projects free of cost.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#8220;It is recommended, as a thank you, we ask you to include an optional link back to GLYPHICONS whenever practical&#8221;. — Bootstrap Documentation</p></blockquote>\n\n\n\n<h2>Where to find Glyphicons?</h2>\n\n\n\n<p>Now that we have downloaded Bootstrap 3.x version and understand its directory structure from the chapter Environment Setup, glyphicons can be found within the <em>fonts</em> folder. This contains the following files −</p>\n\n\n\n<ul><li>glyphicons-halflings-regular.eot</li><li>glyphicons-halflings-regular.svg</li><li>glyphicons-halflings-regular.ttf</li><li>glyphicons-halflings-regular.woff</li></ul>\n\n\n\n<p>Associated CSS rules are present within <em>bootstrap.css</em> and <em>bootstrap-min.css</em> files within css folder of <em>dist</em> folder. You can see the available glyphicons at this link GLYPHICONS.</p>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>To use the icons, simply use the following code just about anywhere in your code. Leave a space between the icon and text for proper padding.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span class = \"glyphicon glyphicon-search\">&lt;/span></code></pre>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>\n   &lt;button type = \"button\" class = \"btn btn-default\">\n      &lt;span class = \"glyphicon glyphicon-sort-by-attributes\">&lt;/span>\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default\">\n      &lt;span class = \"glyphicon glyphicon-sort-by-attributes-alt\">&lt;/span>\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default\">\n      &lt;span class = \"glyphicon glyphicon-sort-by-order\">&lt;/span>\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default\">\n      &lt;span class = \"glyphicon glyphicon-sort-by-order-alt\">&lt;/span>\n   &lt;/button>\n&lt;/p>\n\n&lt;button type = \"button\" class = \"btn btn-default btn-lg\">\n   &lt;span class = \"glyphicon glyphicon-user\">&lt;/span>\n   \n   User\n&lt;/button>\n\n&lt;button type = \"button\" class = \"btn btn-default btn-sm\">\n   &lt;span class = \"glyphicon glyphicon-user\">&lt;/span> \n   \n   User\n&lt;/button>\n\n&lt;button type =\"button\" class = \"btn btn-default btn-xs\">\n   &lt;span class = \"glyphicon glyphicon-user\">&lt;/span> \n   \n   User\n&lt;/button></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter will discuss about Glyphicons, its use and some examples. Bootstrap bundles 200 glyphs in font format. Let us now understand what Glyphicons are. What are Glyphicons? Glyphicons are icon fonts which you can use in your web projects.&nbsp;Glyphicons Halflings&nbsp;are not free and require licensing, however their creator has made them available for Bootstrap [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4092"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4092"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4092/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4092"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4092"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4092"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4093,
    "date": "2020-08-20T06:30:04",
    "date_gmt": "2020-08-20T06:30:04",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=206"
    },
    "modified": "2020-08-20T06:30:04",
    "modified_gmt": "2020-08-20T06:30:04",
    "slug": "bootstrap-dropdowns",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-dropdowns/",
    "title": {
      "rendered": "Dropdowns"
    },
    "content": {
      "rendered": "\n<p>This chapter will highlight about Bootstrap dropdown menus. Dropdown menus are toggleable, contextual menus for displaying links in a list format. This can be made interactive with the&nbsp;dropdown JavaScript plugin.</p>\n\n\n\n<p>To use dropdown, just wrap the dropdown menu within the class&nbsp;<strong>.dropdown</strong>.The following example demonstrates a basic dropdown menu −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"dropdown\">\n   \n   &lt;button type = \"button\" class = \"btn dropdown-toggle\" id = \"dropdownMenu1\" data-toggle = \"dropdown\">\n      Topics\n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"dropdownMenu1\">\n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Java&lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Data Mining&lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">\n            Data Communication/Networking\n         &lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\" class = \"divider\">&lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Separated link&lt;/a>\n      &lt;/li>\n   &lt;/ul>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<h3>Alignment</h3>\n\n\n\n<p>Align the dropdown menu to right by adding the class&nbsp;<strong>.pull-right</strong>&nbsp;to&nbsp;<strong>.dropdown-menu</strong>. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"dropdown\">\n   \n   &lt;button type = \"button\" class = \"btn dropdown-toggle\" id = \"dropdownMenu1\" data-toggle = \"dropdown\">\n      Topics\n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu pull-right\" role = \"menu\" aria-labelledby = \"dropdownMenu1\">\n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Java&lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Data Mining&lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">\n            Data Communication/Networking\n         &lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\" class = \"divider\">&lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Separated link&lt;/a>\n      &lt;/li>\n   &lt;/ul>\n   \n&lt;/div></code></pre>\n\n\n\n<h3>Headers</h3>\n\n\n\n<p>You can add a header to label sections of actions in any dropdown menu by using the class&nbsp;<strong>dropdown-header</strong>. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"dropdown\">\n   \n   &lt;button type = \"button\" class = \"btn dropdown-toggle\" id = \"dropdownMenu1\" data-toggle = \"dropdown\">\n      Topics\n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"dropdownMenu1\">\n      &lt;li role = \"presentation\" class = \"dropdown-header\">Dropdown header&lt;/li>\n      \n      &lt;li role = \"presentation\" >\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Java&lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Data Mining&lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">\n            Data Communication/Networking\n         &lt;/a>\n      &lt;/li>\n      \n      &lt;li role = \"presentation\" class = \"divider\">&lt;/li>\n      &lt;li role = \"presentation\" class = \"dropdown-header\">Dropdown header&lt;/li>\n      \n      &lt;li role = \"presentation\">\n         &lt;a role = \"menuitem\" tabindex = \"-1\" href = \"#\">Separated link&lt;/a>\n      &lt;/li>\n   &lt;/ul>\n   \n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter will highlight about Bootstrap dropdown menus. Dropdown menus are toggleable, contextual menus for displaying links in a list format. This can be made interactive with the&nbsp;dropdown JavaScript plugin. To use dropdown, just wrap the dropdown menu within the class&nbsp;.dropdown.The following example demonstrates a basic dropdown menu − Options Alignment Align the dropdown menu [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4093"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4093"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4093/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4093"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4093"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4093"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4094,
    "date": "2020-08-20T06:31:43",
    "date_gmt": "2020-08-20T06:31:43",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=208"
    },
    "modified": "2020-08-20T06:31:43",
    "modified_gmt": "2020-08-20T06:31:43",
    "slug": "bootstrap-button-groups",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-button-groups/",
    "title": {
      "rendered": "Button Groups"
    },
    "content": {
      "rendered": "\n<p>Button groups allow multiple buttons to be stacked together on a single line. This is useful when you want to place items like alignment buttons together. You can add on optional JavaScript radio and checkbox style behavior with&nbsp;Bootstrap Button Plugin.</p>\n\n\n\n<p>Following table summarizes the important classes Bootstrap provides to use button groups −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Class</th><th>Description</th><th>Code Sample</th></tr><tr><td>.btn-group</td><td>This class is used for a basic button group. Wrap a series of buttons with class&nbsp;<strong>.btn</strong>&nbsp;in&nbsp;<strong>.btn-group</strong>.</td><td>&lt;div class = &#8220;btn-group&#8221;&gt; &lt;button type = &#8220;button&#8221; class = &#8220;btn btn-default&#8221;&gt;Button1&lt;/button&gt; &lt;button type = &#8220;button&#8221; class = &#8220;btn btn-default&#8221;&gt;Button2&lt;/button&gt; &lt;/div&gt;</td></tr><tr><td>.btn-toolbar</td><td>This helps to combine sets of &lt;div class = &#8220;btn-group&#8221;&gt; into a &lt;div class = &#8220;btn-toolbar&#8221;&gt; for more complex components.</td><td>&lt;div class = &#8220;btn-toolbar&#8221; role = &#8220;toolbar&#8221;&gt; &lt;div class = &#8220;btn-group&#8221;&gt;&#8230;&lt;/div&gt; &lt;div class = &#8220;btn-group&#8221;&gt;&#8230;&lt;/div&gt; &lt;/div&gt;</td></tr><tr><td>.btn-group-lg, .btn-group-sm, .btn-group-xs</td><td>These classes can be applied to button group instead of resizing each button.</td><td>&lt;div class = &#8220;btn-group btn-group-lg&#8221;&gt;&#8230;&lt;/div&gt; &lt;div class = &#8220;btn-group btn-group-sm&#8221;&gt;&#8230;&lt;/div&gt; &lt;div class = &#8220;btn-group btn-group-xs&#8221;&gt;&#8230;&lt;/div&gt;</td></tr><tr><td>.btn-group-vertical</td><td>This class make a set of buttons appear vertically stacked rather than horizontally.</td><td>&lt;div class = &#8220;btn-group-vertical&#8221;&gt; &#8230; &lt;/div&gt;</td></tr></tbody></table></figure>\n\n\n\n<h2>Basic Button Group</h2>\n\n\n\n<p>The following example demonstrates the use of class&nbsp;<strong>.btn-group</strong>&nbsp;discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group\">\n   \n   &lt;button type = \"button\" class = \"btn btn-default\">Button 1&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 2&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 3&lt;/button>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Button Toolbar</h2>\n\n\n\n<p>The following example demonstrates the use of class&nbsp;<strong>.btn-toolbar</strong>&nbsp;discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-toolbar\" role = \"toolbar\">\n   \n   &lt;div class = \"btn-group\">\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 1&lt;/button>\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 2&lt;/button>\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 3&lt;/button>\n   &lt;/div>\n   \n   &lt;div class = \"btn-group\">\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 4&lt;/button>\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 5&lt;/button>\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 6&lt;/button>\n   &lt;/div>\n   \n   &lt;div class = \"btn-group\">\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 7&lt;/button>\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 8&lt;/button>\n      &lt;button type = \"button\" class = \"btn btn-default\">Button 9&lt;/button>\n   &lt;/div>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Button Size</h2>\n\n\n\n<p>The following example demonstrates the use of class&nbsp;<strong>.btn-group-*</strong>&nbsp;discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group btn-group-lg\">\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 1&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 2&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 3&lt;/button>\n&lt;/div>\n\n&lt;div class = \"btn-group btn-group-sm\">\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 4&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 5&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 6&lt;/button>\n&lt;/div>\n\n&lt;div class = \"btn-group btn-group-xs\">\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 7&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 8&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 9&lt;/button>\n&lt;/div></code></pre>\n\n\n\n<h2>Nesting</h2>\n\n\n\n<p>You can nest button groups within another button group i.e, place a&nbsp;<strong>.btn-group</strong>&nbsp;within another&nbsp;<strong>.btn-group&nbsp;</strong>. This is done when you want dropdown menus mixed with a series of buttons.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group\">\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 1&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 2&lt;/button>\n   \n   &lt;div class = \"btn-group\">\n      &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" data-toggle = \"dropdown\">\n         Dropdown\n         &lt;span class = \"caret\">&lt;/span>\n      &lt;/button>\n      \n      &lt;ul class = \"dropdown-menu\">\n         &lt;li>&lt;a href = \"#\">Dropdown link 1&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Dropdown link 2&lt;/a>&lt;/li>\n      &lt;/ul>\n   &lt;/div>\n  \n&lt;/div></code></pre>\n\n\n\n<h2>Vertical Buttongroup</h2>\n\n\n\n<p>The following example demonstrates the use of class&nbsp;<strong>.btn-group-vertical</strong>&nbsp;discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group-vertical\">\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 1&lt;/button>\n   &lt;button type = \"button\" class = \"btn btn-default\">Button 2&lt;/button>\n   \n   &lt;div class = \"btn-group-vertical\">\n      &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" data-toggle = \"dropdown\">\n         Dropdown\n         &lt;span class = \"caret\">&lt;/span>\n      &lt;/button>\n      \n      &lt;ul class = \"dropdown-menu\">\n         &lt;li>&lt;a href = \"#\">Dropdown link 1&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Dropdown link 2&lt;/a>&lt;/li>\n      &lt;/ul>\n   &lt;/div>\n  \n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Button groups allow multiple buttons to be stacked together on a single line. This is useful when you want to place items like alignment buttons together. You can add on optional JavaScript radio and checkbox style behavior with&nbsp;Bootstrap Button Plugin. Following table summarizes the important classes Bootstrap provides to use button groups − Class Description [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4094"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4094"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4094/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4094"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4094"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4094"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 213,
    "date": "2020-08-20T06:39:05",
    "date_gmt": "2020-08-20T06:39:05",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=213"
    },
    "modified": "2020-08-20T06:39:05",
    "modified_gmt": "2020-08-20T06:39:05",
    "slug": "bootstrap-button-dropdowns",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-button-dropdowns/",
    "title": {
      "rendered": "Button Dropdowns"
    },
    "content": {
      "rendered": "\n<p>This chapter will discuss about how to add dropdown menu to buttons using Bootstrap classes. To add a dropdown to a button, simply wrap the button and dropdown menu in a&nbsp;<strong>.btn-group</strong>. You can also use &lt;span class = &#8220;caret&#8221;&gt;&lt;/span&gt; to act as an indicator that the button is a dropdown.</p>\n\n\n\n<p>The following example demonstrates a basic single button dropdowns </p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group\">\n   \n   &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" data-toggle = \"dropdown\">\n      Default \n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\">\n      &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n      \n      &lt;li class = \"divider\">&lt;/li>\n      &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n   &lt;/ul>\n&lt;/div>\n\n&lt;div class = \"btn-group\">\n   &lt;button type = \"button\" class = \"btn btn-primary dropdown-toggle\" data-toggle = \"dropdown\">\n      Primary \n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\">\n      &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n      \n      &lt;li class = \"divider\">&lt;/li>\n      &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n   &lt;/ul>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Split Button Dropdowns</h2>\n\n\n\n<p>Split button dropdowns use the same general style as the dropdown button but add a primary action along with the dropdown. Split buttons have the primary action on the left and a toggle on the right that displays the dropdown.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group\">\n   &lt;button type = \"button\" class = \"btn btn-default\">Default&lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" data-toggle = \"dropdown\">\n      &lt;span class = \"caret\">&lt;/span>\n      &lt;span class = \"sr-only\">Toggle Dropdown&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\">\n      &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n      \n      &lt;li class = \"divider\">&lt;/li>\n      &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n   &lt;/ul>\n&lt;/div>\n\n&lt;div class = \"btn-group\">\n   &lt;button type = \"button\" class = \"btn btn-primary\">Primary&lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-primary dropdown-toggle\" data-toggle = \"dropdown\">\n      &lt;span class = \"caret\">&lt;/span>\n      &lt;span class = \"sr-only\">Toggle Dropdown&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\">\n      &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n      \n      &lt;li class = \"divider\">&lt;/li>\n      &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n   &lt;/ul>\n&lt;/div></code></pre>\n\n\n\n<h2>Button Dropdown Size</h2>\n\n\n\n<p>You can use the dropdowns with any button size −&nbsp;<strong>.btn-large, .btn-sm,&nbsp;</strong>or&nbsp;<strong>.btn-xs</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group\">\n   \n   &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle btn-lg\" data-toggle = \"dropdown\">\n      Default\n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\">\n      &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n      \n      &lt;li class = \"divider\">&lt;/li>\n      &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n   &lt;/ul>\n&lt;/div>\n\n&lt;div class = \"btn-group\">\n   &lt;button type = \"button\" class = \"btn btn-primary dropdown-toggle btn-sm\" data-toggle = \"dropdown\">\n      Primary\n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\">\n      &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n      \n      &lt;li class = \"divider\">&lt;/li>\n      &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n   &lt;/ul>\n&lt;/div>\n\n&lt;div class = \"btn-group\">\n   &lt;button type = \"button\" class = \"btn btn-success dropdown-toggle btn-xs\" data-toggle = \"dropdown\">\n      Success\n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/button>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\">\n      &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n      &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n      \n      &lt;li class = \"divider\">&lt;/li>\n      &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n   &lt;/ul>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Dropup Variation</h2>\n\n\n\n<p>Menus can also be built to drop up rather than down. To achieve this, simply add&nbsp;<strong>.dropup</strong>&nbsp;to the parent&nbsp;<strong>.btn-group</strong>&nbsp;container.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"row\" style = \"margin-left:50px; margin-top:200px\">\n   \n   &lt;div class = \"btn-group dropup\">\n      &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" data-toggle = \"dropdown\">\n         Default\n         &lt;span class = \"caret\">&lt;/span>\n      &lt;/button>\n      \n      &lt;ul class = \"dropdown-menu\" role = \"menu\">\n         &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n         \n         &lt;li class = \"divider\">&lt;/li>\n         &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n      &lt;/ul>\n   &lt;/div>\n   \n   &lt;div class = \"btn-group dropup\">\n      &lt;button type = \"button\" class = \"btn btn-primary dropdown-toggle\" data-toggle = \"dropdown\">\n         Primary\n         &lt;span class = \"caret\">&lt;/span>\n      &lt;/button>\n      \n      &lt;ul class = \"dropdown-menu\" role = \"menu\">\n         &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n         \n         &lt;li class = \"divider\">&lt;/li>\n         &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n      &lt;/ul>\n   &lt;/div>\n   \n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter will discuss about how to add dropdown menu to buttons using Bootstrap classes. To add a dropdown to a button, simply wrap the button and dropdown menu in a&nbsp;.btn-group. You can also use &lt;span class = &#8220;caret&#8221;&gt;&lt;/span&gt; to act as an indicator that the button is a dropdown. The following example demonstrates a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/213"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=213"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/213/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=213"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=213"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=213"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4095,
    "date": "2020-08-20T06:57:24",
    "date_gmt": "2020-08-20T06:57:24",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=215"
    },
    "modified": "2020-08-20T06:57:24",
    "modified_gmt": "2020-08-20T06:57:24",
    "slug": "bootstrap-input-groups",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-input-groups/",
    "title": {
      "rendered": "Input Groups"
    },
    "content": {
      "rendered": "\n<p>This chapter explains about one more feature Bootstrap supports, the Input Groups. Input groups are extended&nbsp;Form Controls. Using input groups you can easily prepend and append text or buttons to the text-based inputs.</p>\n\n\n\n<p>By adding prepended and appended content to an input field, you can add common elements to the user’s input. For example, you can add the dollar symbol, the @ for a Twitter username, or anything else that might be common for your application interface.</p>\n\n\n\n<p>To prepend or append elements to a&nbsp;<strong>.form-control</strong>−</p>\n\n\n\n<ul><li>Wrap it in a &lt;div&gt; with class&nbsp;<strong>.input-group</strong></li><li>As a next step, within that same &lt;div&gt; , place your extra content inside a &lt;span&gt; with class&nbsp;<strong>.input-group-addon</strong>.</li><li>Now place this &lt;span&gt; either before or after the &lt;input&gt; element.</li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>For cross browser compatibility, avoid using &lt;select&gt; elements here as they cannot be fully styled in WebKit browsers. Also do not apply input group classes directly to form groups. An input group is an isolated component.</p></blockquote>\n\n\n\n<h2>Basic Input Group</h2>\n\n\n\n<p>The following example demonstrates basic input group −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div style = \"padding: 100px 100px 10px;\">\n   \n   &lt;form class = \"bs-example bs-example-form\" role = \"form\">\n      &lt;div class = \"input-group\">\n         &lt;span class = \"input-group-addon\">@&lt;/span>\n         &lt;input type = \"text\" class = \"form-control\" placeholder = \"twitterhandle\">\n      &lt;/div>\n\t\t\n      &lt;br>\n\n      &lt;div class = \"input-group\">\n         &lt;input type = \"text\" class = \"form-control\">\n         &lt;span class = \"input-group-addon\">.00&lt;/span>\n      &lt;/div>\n\t\t\n      &lt;br>\n      \n      &lt;div class = \"input-group\">\n         &lt;span class = \"input-group-addon\">$&lt;/span>\n         &lt;input type = \"text\" class =\" form-control\">\n         &lt;span class = \"input-group-addon\">.00&lt;/span>\n      &lt;/div>\n   &lt;/form>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Input Group Sizing</h2>\n\n\n\n<p>You can change the size of the input groups, by adding the relative form sizing classes like&nbsp;<strong>.input-group-lg, input-group-sm, input-group-xs</strong>&nbsp;to the&nbsp;<strong>.input-group</strong>&nbsp;itself. The contents within will automatically resize.</p>\n\n\n\n<p>Following examples demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div style = \"padding: 100px 100px 10px;\">\n   \n   &lt;form class = \"bs-example bs-example-form\" role = \"form\">\n      &lt;div class = \"input-group input-group-lg\">\n         &lt;span class = \"input-group-addon\">@&lt;/span>\n         &lt;input type = \"text\" class = \"form-control\" placeholder = \"Twitterhandle\">\n      &lt;/div>\n\t\t\n      &lt;br>\n\n      &lt;div class = \"input-group\">\n         &lt;span class = \"input-group-addon\">@&lt;/span>\n         &lt;input type = \"text\" class = \"form-control\" placeholder = \"Twitterhandle\">\n      &lt;/div>\n\t\t\n      &lt;br>\n\n      &lt;div class = \"input-group input-group-sm\">\n         &lt;span class = \"input-group-addon\">@&lt;/span>\n         &lt;input type = \"text\" class = \"form-control\" placeholder = \"Twitterhandle\">\n      &lt;/div>\n   &lt;/form>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Checkboxes and Radio Addons</h2>\n\n\n\n<p>You can preappend or append radio buttons and checkboxes instead of text as demonstrated in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div style = \"padding: 100px 100px 10px;\">\n   \n   &lt;form class = \"bs-example bs-example-form\" role = \"form\">\n      &lt;div class = \"row\">\n         \n         &lt;div class = \"col-lg-6\">\n            &lt;div class = \"input-group\">\n               \n               &lt;span class = \"input-group-addon\">\n                  &lt;input type = \"checkbox\">\n               &lt;/span>\n               \n               &lt;input type = \"text\" class = \"form-control\">\n            &lt;/div>&lt;!-- /input-group -->\n         &lt;/div>&lt;!-- /.col-lg-6 -->&lt;br>\n         \n         &lt;div class = \"col-lg-6\">\n            &lt;div class = \"input-group\">\n               \n               &lt;span class = \"input-group-addon\">\n                  &lt;input type = \"radio\">\n               &lt;/span>\n               \n               &lt;input type = \"text\" class = \"form-control\">\n            &lt;/div>&lt;!-- /input-group -->\n         &lt;/div>&lt;!-- /.col-lg-6 -->\n         \n      &lt;/div>&lt;!-- /.row -->\n   &lt;/form>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Button Addons</h2>\n\n\n\n<p>You can even preappend or append buttons in input groups. Instead of&nbsp;<strong>.input-group-addon</strong>&nbsp;class, you&#8217;ll need to use class&nbsp;<strong>.input-group-btn</strong>&nbsp;to wrap the buttons. This is required due to the default browser styles that cannot be overridden. Following examples demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div style = \"padding: 100px 100px 10px;\">\n   \n   &lt;form class = \"bs-example bs-example-form\" role = \"form\">\n      &lt;div class = \"row\">\n         \n         &lt;div class = \"col-lg-6\">\n            &lt;div class = \"input-group\">\n               \n               &lt;span class = \"input-group-btn\">\n                  &lt;button class = \"btn btn-default\" type = \"button\">\n                     Go!\n                  &lt;/button>\n               &lt;/span>\n\t\t\t\t\t\n               &lt;input type = \"text\" class = \"form-control\">\n               \n            &lt;/div>&lt;!-- /input-group -->\n         &lt;/div>&lt;!-- /.col-lg-6 -->&lt;br>\n         \n         &lt;div class = \"col-lg-6\">\n            &lt;div class = \"input-group\">\n               &lt;input type = \"text\" class = \"form-control\">\n               \n               &lt;span class = \"input-group-btn\">\n                  &lt;button class = \"btn btn-default\" type = \"button\">\n                     Go!\n                  &lt;/button>\n               &lt;/span>\n               \n            &lt;/div>&lt;!-- /input-group -->\n         &lt;/div>&lt;!-- /.col-lg-6 -->\n         \n      &lt;/div>&lt;!-- /.row -->\n   &lt;/form>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Buttons with Dropdowns</h2>\n\n\n\n<p>Adding buttons with dropdown menus in input groups can be done by simply wrapping the button and dropdown menu in a&nbsp;<strong>.input-group-btn</strong>&nbsp;class as demonstrated in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div style = \"padding: 100px 100px 10px;\">\n   \n   &lt;form class = \"bs-example bs-example-form\" role = \"form\">\n      &lt;div class = \"row\">\n         \n         &lt;div class = \"col-lg-6\">\n            &lt;div class = \"input-group\">\n               \n               &lt;div class = \"input-group-btn\">\n                  &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" \n                     data-toggle = \"dropdown\">\n                     DropdownMenu \n                     &lt;span class = \"caret\">&lt;/span>\n                  &lt;/button>\n                  \n                  &lt;ul class = \"dropdown-menu\">\n                     &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n                     \n                     &lt;li class = \"divider\">&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n                  &lt;/ul>\n               &lt;/div>&lt;!-- /btn-group -->\n               \n               &lt;input type = \"text\" class = \"form-control\">\n            &lt;/div>&lt;!-- /input-group -->\n         &lt;/div>&lt;!-- /.col-lg-6 -->&lt;br>\n         \n         &lt;div class = \"col-lg-6\">\n            &lt;div class = \"input-group\">\n               \n               &lt;input type = \"text\" class = \"form-control\">\n               &lt;div class = \"input-group-btn\">\n                  \n                  &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" \n                     data-toggle = \"dropdown\">\n                     DropdownMenu \n                     &lt;span class = \"caret\">&lt;/span>\n                  &lt;/button>\n                  \n                  &lt;ul class = \"dropdown-menu pull-right\">\n                     &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n                     \n                     &lt;li class = \"divider\">&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n                  &lt;/ul>\n               &lt;/div>&lt;!-- /btn-group -->\n               \n            &lt;/div>&lt;!-- /input-group -->\n         &lt;/div>&lt;!-- /.col-lg-6 -->\n         \n      &lt;/div>&lt;!-- /.row -->\n   &lt;/form>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Segmented Buttons</h2>\n\n\n\n<p>To segment button dropdowns in input groups, use the same general style as the dropdown button, but add a primary action along with the dropdown as can be seen in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div style = \"padding: 100px 100px 10px;\">\n   \n   &lt;form class = \"bs-example bs-example-form\" role = \"form\">\n      &lt;div class = \"row\">\n         \n         &lt;div class = \"col-lg-6\">\n            &lt;div class = \"input-group\">\n               \n               &lt;div class = \"input-group-btn\">\n                  &lt;button type = \"button\" class = \"btn btn-default\" \n                     tabindex = \"-1\">Dropdown Menu&lt;/button>\n                  \n                  &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" \n                     data-toggle = \"dropdown\" tabindex = \"-1\">\n                     &lt;span class = \"caret\">&lt;/span>\n                     &lt;span class = \"sr-only\">Toggle Dropdown&lt;/span>\n                  &lt;/button>\n                  \n                  &lt;ul class = \"dropdown-menu\">\n                     &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n                     &lt;li>&lt;a href =\"#\">Another action&lt;/a>&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n                     \n                     &lt;li class = \"divider\">&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n                  &lt;/ul>\n                  \n               &lt;/div>&lt;!-- /btn-group -->\n               &lt;input type = \"text\" class = \"form-control\">\n               \n            &lt;/div>&lt;!-- /input-group -->\n         &lt;/div>&lt;!-- /.col-lg-6 -->&lt;br>\n         \n         &lt;div class = \"col-lg-6\">\n            &lt;div class = \"input-group\">\n               &lt;input type = \"text\" class = \"form-control\">\n               &lt;div class = \"input-group-btn\">\n                  \n                  &lt;button type = \"button\" class = \"btn btn-default\" tabindex = \"-1\">\n                     Dropdown Menu\n                  &lt;/button>\n                  \n                  &lt;button type = \"button\" class = \"btn btn-default dropdown-toggle\" \n                     data-toggle = \"dropdown\" tabindex = \"-1\">\n                     \n                     &lt;span class = \"caret\">&lt;/span>\n                     &lt;span class = \"sr-only\">Toggle Dropdown&lt;/span>\n                  &lt;/button>\n                  \n                  &lt;ul class = \"dropdown-menu pull-right\">\n                     &lt;li>&lt;a href = \"#\">Action&lt;/a>&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Another action&lt;/a>&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Something else here&lt;/a>&lt;/li>\n                     \n                     &lt;li class = \"divider\">&lt;/li>\n                     &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n                  &lt;/ul>\n               \n               &lt;/div>&lt;!-- /btn-group -->\n            &lt;/div>&lt;!-- /input-group -->\n         &lt;/div>&lt;!-- /.col-lg-6 -->\n         \n      &lt;/div>&lt;!-- /.row -->\n   &lt;/form>\n   \n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter explains about one more feature Bootstrap supports, the Input Groups. Input groups are extended&nbsp;Form Controls. Using input groups you can easily prepend and append text or buttons to the text-based inputs. By adding prepended and appended content to an input field, you can add common elements to the user’s input. For example, you [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4095"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4095"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4095/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4095"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4095"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4095"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4096,
    "date": "2020-08-20T07:02:04",
    "date_gmt": "2020-08-20T07:02:04",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=218"
    },
    "modified": "2020-08-20T07:02:04",
    "modified_gmt": "2020-08-20T07:02:04",
    "slug": "bootstrap-navigation-elements",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-navigation-elements/",
    "title": {
      "rendered": "Navigation Elements"
    },
    "content": {
      "rendered": "\n<p>Bootstrap provides a few different options for styling navigation elements. All of them share the same markup and base class,&nbsp;<strong>.nav</strong>. Bootstrap also provides a helper class, to share markup and states. Swap modifier classes to switch between each style.</p>\n\n\n\n<h2>Tabular Navigation or Tabs</h2>\n\n\n\n<p>To create a tabbed navigation menu −</p>\n\n\n\n<ul><li>Start with a basic unordered list with the base class of&nbsp;<strong>.nav</strong></li><li>Add class&nbsp;<strong>.nav-tabs</strong>.</li></ul>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Tabs Example&lt;/p>\n\n&lt;ul class = \"nav nav-tabs\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Java&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h2>Pills Navigation</h2>\n\n\n\n<h3>Basic Pills</h3>\n\n\n\n<p>To turn the tabs into pills, follow the same steps as above, use the class&nbsp;<strong>.nav-pills</strong>&nbsp;instead of&nbsp;<strong>.nav-tabs</strong>.</p>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Pills Example&lt;/p>\n\n&lt;ul class = \"nav nav-pills\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Java&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h3>Vertical Pills</h3>\n\n\n\n<p>You can stack the pills vertically using the class&nbsp;<strong>.nav-stacked</strong>&nbsp;along with the classes −&nbsp;<strong>.nav, .nav-pills</strong>.</p>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Vertical Pills Example&lt;/p>\n\n&lt;ul class = \"nav nav-pills nav-stacked\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Java&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h2>Justified Nav</h2>\n\n\n\n<p>You can make tabs or pills of equal widths as of their parent at screens wider than 768px using class&nbsp;<strong>.nav-justified</strong>&nbsp;along with&nbsp;<strong>.nav, .nav-tabs</strong>&nbsp;or&nbsp;<strong>.nav, .nav-pills</strong>&nbsp;respectively. On smaller screens, the nav links are stacked.</p>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Justified Nav Elements Example&lt;/p>\n\n&lt;ul class = \"nav nav-pills nav-justified\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Java&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul>\n\n&lt;br>\n&lt;br>\n&lt;br>\n\n&lt;ul class = \"nav nav-tabs nav-justified\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Java&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h2>Disabled Links</h2>\n\n\n\n<p>For each of the <strong>.nav</strong> classes, if you add the <strong>.disabled</strong> class, it will create a gray link that also disables the <strong>:hover</strong> state as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Disabled Link Example&lt;/p>\n\n&lt;ul class = \"nav nav-pills\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   \n   &lt;li class = \"disabled\">&lt;a href = \"#\">iOS(disabled link)&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Java&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul>\n\n&lt;br>\n&lt;br>\n\n&lt;ul class = \"nav nav-tabs\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   \n   &lt;li class = \"disabled\">&lt;a href = \"#\">VB.Net(disabled link)&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Java&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul>\t</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>This class will only change the &lt;a&gt;&#8217;s appearance, not its functionality. Use custom JavaScript to disable links here.</p></blockquote>\n\n\n\n<h2>Dropdowns</h2>\n\n\n\n<p>Navigation menus share a similar syntax with dropdown menus. By default, you have a list item that has an anchor working in conjunction with some data-attributes to trigger an unordered list with a&nbsp;<strong>.dropdown-menu</strong>&nbsp;class.</p>\n\n\n\n<h3>Tabs with Dropdowns</h3>\n\n\n\n<p>To add dropdowns to tab −</p>\n\n\n\n<ul><li>Start with a basic unordered list with the base class of&nbsp;<strong>.nav</strong></li><li>Add the class&nbsp;<strong>.nav-tabs</strong>.</li><li>Now add an unordered list with a&nbsp;<strong>.dropdown-menu</strong>&nbsp;class.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Tabs With Dropdown Example&lt;/p>\n\n&lt;ul class = \"nav nav-tabs\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   \n   &lt;li class = \"dropdown\">\n      &lt;a class = \"dropdown-toggle\" data-toggle = \"dropdown\" href = \"#\">\n         Java \n         &lt;span class = \"caret\">&lt;/span>\n      &lt;/a>\n      \n      &lt;ul class = \"dropdown-menu\">\n         &lt;li>&lt;a href = \"#\">Swing&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">jMeter&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n         &lt;li class = \"divider\">&lt;/li>\n         &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n      &lt;/ul>\n      \n   &lt;/li>\n\t\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h3>Pills with Dropdowns</h3>\n\n\n\n<p>To do the same thing with pills, simply swap the&nbsp;<strong>.nav-tabs</strong>&nbsp;class with&nbsp;<strong>.nav-pills</strong>&nbsp;as shown in the following example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Pills With Dropdown Example&lt;/p>\n\n&lt;ul class = \"nav nav-pills\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   \n   &lt;li class = \"dropdown\">\n      &lt;a class = \"dropdown-toggle\" data-toggle = \"dropdown\" href = \"#\">\n         Java &lt;span class = \"caret\">&lt;/span>\n      &lt;/a>\n      \n      &lt;ul class = \"dropdown-menu\">\n         &lt;li>&lt;a href = \"#\">Swing&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">jMeter&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n         \n         &lt;li class = \"divider\">&lt;/li>\n         &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n      &lt;/ul>\n      \n   &lt;/li>\n\t\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Bootstrap provides a few different options for styling navigation elements. All of them share the same markup and base class,&nbsp;.nav. Bootstrap also provides a helper class, to share markup and states. Swap modifier classes to switch between each style. Tabular Navigation or Tabs To create a tabbed navigation menu − Start with a basic unordered [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4096"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4096"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4096/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4096"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4096"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4096"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4097,
    "date": "2020-08-20T07:05:50",
    "date_gmt": "2020-08-20T07:05:50",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=220"
    },
    "modified": "2020-08-20T07:05:50",
    "modified_gmt": "2020-08-20T07:05:50",
    "slug": "bootstrap-navbar",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-navbar/",
    "title": {
      "rendered": "Bootstrap Navbar"
    },
    "content": {
      "rendered": "\n<p>The navbar is one of the prominent features of Bootstrap sites. Navbars are responsive &#8216;meta&#8217; components that serve as navigation headers for your application or site. Navbars collapse in mobile views and become horizontal as the available viewport width increases. At its core, the navbar includes styling for site names and basic navigation.</p>\n\n\n\n<h2>Default Navbar</h2>\n\n\n\n<p>To create a default navbar −</p>\n\n\n\n<ul><li>Add the classes&nbsp;<strong>.navbar, .navbar-default</strong>&nbsp;to the &lt;nav&gt; tag.</li><li>Add&nbsp;<strong>role = &#8220;navigation&#8221;</strong>&nbsp;to the above element, to help with accessibility.</li><li>Add a header class&nbsp;<strong>.navbar-header</strong>&nbsp;to the &lt;div&gt; element. Include an &lt;a&gt; element with class&nbsp;<strong>navbar-brand</strong>. This will give the text a slightly larger size.</li><li>To add links to the navbar, simply add an unordered list with the classes of&nbsp;<strong>.nav, .navbar-nav</strong>.</li></ul>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n\n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n\t\t\t\n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java \n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n&lt;/nav></code></pre>\n\n\n\n<h2>Responsive Navbar</h2>\n\n\n\n<p>To add responsive features to the navbar, the content that you want to be collapsed needs to be wrapped in a &lt;div> with classes <strong>.collapse, .navbar-collapse</strong>. The collapsing nature is tripped by a button that has the class of <strong>.navbar-toggle</strong> and then features two data- elements. The first, <strong>data-toggle</strong>, is used to tell the JavaScript what to do with the button, and the second, <strong>data-target</strong>, indicates which element to toggle. Then with a class <strong>.icon-bar</strong> create what we like to call the hamburger button. This will toggle the elements that are in the <strong>.nav-collapse</strong> &lt;div>. For this feature to work, you need to include the Bootstrap Collapse Plugin.</p>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;button type = \"button\" class = \"navbar-toggle\" \n         data-toggle = \"collapse\" data-target = \"#example-navbar-collapse\">\n         &lt;span class = \"sr-only\">Toggle navigation&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n      &lt;/button>\n\t\t\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div class = \"collapse navbar-collapse\" id = \"example-navbar-collapse\">\n\t\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n\t\t\t\n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java \n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n&lt;/nav></code></pre>\n\n\n\n<h2>Forms in Navbar</h2>\n\n\n\n<p>Instead of using the default class-based forms from Chapter Bootstrap Forms, forms that are in the navbar, use the <strong>.navbar-form</strong> class. This ensures that the form’s proper vertical alignment and collapsed behavior in narrow viewports. Use the alignment options (explained in Component alignment section) to decide where it resides within the navbar content.</p>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;form class = \"navbar-form navbar-left\" role = \"search\">\n         \n         &lt;div class = \"form-group\">\n            &lt;input type = \"text\" class = \"form-control\" placeholder = \"Search\">\n         &lt;/div>\n         &lt;button type = \"submit\" class = \"btn btn-default\">Submit&lt;/button>\n         \n      &lt;/form>    \n   &lt;/div>\n   \n&lt;/nav></code></pre>\n\n\n\n<h2>Buttons in Navbar</h2>\n\n\n\n<p>You can add buttons using class&nbsp;<strong>.navbar-btn</strong>&nbsp;to &lt;button&gt; elements not residing in a &lt;form&gt; to vertically center them in the navbar.&nbsp;<strong>.navbar-btn</strong>&nbsp;can be used on &lt;a&gt; and &lt;input&gt; elements.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Do not use <strong>.navbar-btn</strong> nor the standard button classes on &lt;a> elements within <strong>.navbar-nav</strong>.</p></blockquote>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;form class = \"navbar-form navbar-left\" role = \"search\">\n         &lt;div class = \"form-group\">\n            &lt;input type = \"text\" class = \"form-control\" placeholder = \"Search\">\n         &lt;/div>\n\t\t\t\n         &lt;button type = \"submit\" class = \"btn btn-default\">Submit Button&lt;/button>\n      &lt;/form>  \n\t\t\n      &lt;button type = \"button\" class = \"btn btn-default navbar-btn\">Navbar Button&lt;/button>\n   &lt;/div>\n&lt;/nav></code></pre>\n\n\n\n<h2>Text in Navbar</h2>\n\n\n\n<p>To wrap strings of text in an element use the class&nbsp;<strong>.navbar-text</strong>. This is usually used with &lt;p&gt; tag for proper leading and color. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;p class = \"navbar-text\">Signed in as Thomas&lt;/p>\n   &lt;/div>\n&lt;/nav></code></pre>\n\n\n\n<h2>Non-nav Links</h2>\n\n\n\n<p>If you want to use the standard links that are not within the regular navbar navigation component, then use the class&nbsp;<strong>navbar-link</strong>&nbsp;to add proper colors for the default and inverse navbar options as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;p class = \"navbar-text navbar-right\">\n         Signed in as \n         &lt;a href = \"#\" class = \"navbar-link\">Thomas&lt;/a>\n      &lt;/p>\n   &lt;/div>\n&lt;/nav></code></pre>\n\n\n\n<h2>Component Alignment</h2>\n\n\n\n<p>You can align the components like&nbsp;<em>nav links, forms, buttons, or text</em>&nbsp;to left or right in a navbar using the utility classes&nbsp;<strong>.navbar-left</strong>&nbsp;or&nbsp;<strong>.navbar-right</strong>. Both classes will add a CSS float in the specified direction. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      \n      &lt;!--Left Align-->\n      &lt;ul class = \"nav navbar-nav navbar-left\">\n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java \n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n      \n      &lt;form class = \"navbar-form navbar-left\" role = \"search\">\n         &lt;button type = \"submit\" class = \"btn btn-default\">Left align-Submit Button&lt;/button>\n      &lt;/form> \n      \n      &lt;p class = \"navbar-text navbar-left\">Left align-Text&lt;/p>\n      \n      &lt;!--Right Align-->\n      &lt;ul class = \"nav navbar-nav navbar-right\">\n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java \n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n      \n      &lt;form class = \"navbar-form navbar-right\" role = \"search\">\n         &lt;button type = \"submit\" class = \"btn btn-default\">\n            Right align-Submit Button\n         &lt;/button>\n      &lt;/form> \n\t\t\n      &lt;p class = \"navbar-text navbar-right\">Right align-Text&lt;/p>\n      \n   &lt;/div>\n&lt;/nav></code></pre>\n\n\n\n<h2>Fixed to Top</h2>\n\n\n\n<p>The Bootstrap navbar can be dynamic in its positioning. By default, it is a block-level element that takes its positioning based on its placement in the HTML. With a few helper classes, you can place it either on the top or bottom of the page, or you can make it scroll statically with the page.</p>\n\n\n\n<p>If you want the navbar fixed to the top, add class&nbsp;<strong>.navbar-fixed-top</strong>&nbsp;to the&nbsp;<strong>.navbar class</strong>. The following example demonstrates this −</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>To prevent the navbar from sitting on top of other content in the body of the page, add at least 50 pixels of padding to the &lt;body&gt; tag or try your own values.</p><p></p></blockquote>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default navbar-fixed-top\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n         \n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java\n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n   \n&lt;/nav></code></pre>\n\n\n\n<h2>Fixed to Bottom</h2>\n\n\n\n<p>If you want the navbar fixed to the bottom of the page, add class&nbsp;<strong>.navbar-fixed-bottom</strong>&nbsp;to the&nbsp;<strong>.navbar class</strong>. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default navbar-fixed-bottom\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href=\"#\">SVN&lt;/a>&lt;/li>\n         \n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java\n               &lt;b class =\"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n&lt;/nav></code></pre>\n\n\n\n<h2>Static Top</h2>\n\n\n\n<p>To create a navbar that scrolls with the page, add the&nbsp;<strong>.navbar-static-top</strong>&nbsp;class. This class does not require adding the padding to the &lt;body&gt;.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default navbar-static-top\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n         \n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java\n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n\t\t\t\t\n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n&lt;/nav></code></pre>\n\n\n\n<h2>Inverted Navbar</h2>\n\n\n\n<p>To create an inverted navbar with a black background and with white text, simply add the&nbsp;<strong>.navbar-inverse</strong>&nbsp;class to the&nbsp;<strong>.navbar</strong>&nbsp;class as demonstrated in the following example −</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>To prevent the navbar from sitting on top of other content in the body of the page, add at least 50 pixels of padding to the &lt;body&gt; tag or try your own values.</p></blockquote>\n\n\n\n<p></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-inverse\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">codemeals&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java\n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n&lt;/nav></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The navbar is one of the prominent features of Bootstrap sites. Navbars are responsive &#8216;meta&#8217; components that serve as navigation headers for your application or site. Navbars collapse in mobile views and become horizontal as the available viewport width increases. At its core, the navbar includes styling for site names and basic navigation. Default Navbar [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4097"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4097"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4097/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4097"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4097"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4097"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4098,
    "date": "2020-08-20T07:06:29",
    "date_gmt": "2020-08-20T07:06:29",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=222"
    },
    "modified": "2020-08-20T07:06:29",
    "modified_gmt": "2020-08-20T07:06:29",
    "slug": "bootstrap-breadcrumb",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-breadcrumb/",
    "title": {
      "rendered": "Bootstrap Breadcrumb"
    },
    "content": {
      "rendered": "\n<p>Breadcrumbs are a great way to show hierarchy-based information for a site. In the case of blogs, breadcrumbs can show the dates of publishing, categories, or tags. They indicate the current page&#8217;s location within a navigational hierarchy.</p>\n\n\n\n<p>A breadcrumb in Bootstrap is simply an unordered list with a class of&nbsp;<strong>.breadcrumb</strong>. The separator is automatically added by CSS (bootstrap.min.css) through the following class −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.breadcrumb > li + li:before {\n   color: #CCCCCC;\n   content: \"/ \";\n   padding: 0 5px;\n}</code></pre>\n\n\n\n<p>The following example demonstrates breadcrumbs −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ol class = \"breadcrumb\">\n   &lt;li>&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">2013&lt;/a>&lt;/li>\n   &lt;li class = \"active\">November&lt;/li>\n&lt;/ol></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Breadcrumbs are a great way to show hierarchy-based information for a site. In the case of blogs, breadcrumbs can show the dates of publishing, categories, or tags. They indicate the current page&#8217;s location within a navigational hierarchy. A breadcrumb in Bootstrap is simply an unordered list with a class of&nbsp;.breadcrumb. The separator is automatically added [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4098"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4098"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4098/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4098"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4098"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4098"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4099,
    "date": "2020-08-20T07:08:30",
    "date_gmt": "2020-08-20T07:08:30",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=224"
    },
    "modified": "2020-08-20T07:08:30",
    "modified_gmt": "2020-08-20T07:08:30",
    "slug": "bootstrap-pagination",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-pagination/",
    "title": {
      "rendered": "Bootstrap Pagination"
    },
    "content": {
      "rendered": "\n<p>This chapter discusses about the pagination feature that Bootstrap supports. Pagination, an unordered list is handled by Bootstrap like a lot of other interface elements.</p>\n\n\n\n<h2>Pagination</h2>\n\n\n\n<p>The following table lists the classes that Bootstrap provides to handle pagination.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Class</th><th>Description</th><th>Sample code</th></tr><tr><td>.pagination</td><td>Add this class to get the pagination on your page.</td><td>&lt;ul class = &#8220;pagination&#8221;&gt; &lt;li&gt;&lt;a href = &#8220;#&#8221;&gt;&amp;laquo;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href = &#8220;#&#8221;&gt;1&lt;/a&gt;&lt;/li&gt; &#8230;&#8230;. &lt;/ul&gt;</td></tr><tr><td>.disabled, .active</td><td>You can customize links by using&nbsp;<strong>.disabled</strong>&nbsp;for unclickable links and&nbsp;<strong>.active</strong>&nbsp;to indicate the current page.</td><td>&lt;ul class = &#8220;pagination&#8221;&gt; &lt;li class = &#8220;disabled&#8221;&gt;&lt;a href = &#8220;#&#8221;&gt;&amp;laquo;&lt;/a&gt;&lt;/li&gt; &lt;li class = &#8220;active&#8221;&gt;&lt;a href = &#8220;#&#8221;&gt;1&lt;span class = &#8220;sr-only&#8221;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#8230;&#8230;. &lt;/ul&gt;</td></tr><tr><td>.pagination-lg, .pagination-sm</td><td>Use these classes to get different size items.</td><td>&lt;ul class = &#8220;pagination pagination-lg&#8221;&gt;&#8230;&lt;/ul&gt; &lt;ul class = &#8220;pagination&#8221;&gt;&#8230;&lt;/ul&gt; &lt;ul class = &#8220;pagination pagination-sm&#8221;&gt;&#8230;&lt;/ul&gt;</td></tr></tbody></table></figure>\n\n\n\n<h3>Default Pagination</h3>\n\n\n\n<p>The following example demonstrates the use of class&nbsp;<strong>.pagination</strong>&nbsp;discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"pagination\">\n   &lt;li>&lt;a href = \"#\">&amp;laquo;&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">1&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">2&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">3&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">4&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">5&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">&amp;raquo;&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h3>States</h3>\n\n\n\n<p>The following example demonstrates the use of class&nbsp;<strong>.disabled, .active</strong>&nbsp;discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"pagination\">\n   &lt;li>&lt;a href = \"#\">&amp;laquo;&lt;/a>&lt;/li>\n   &lt;li class = \"active\">&lt;a href = \"#\">1&lt;/a>&lt;/li>\n   &lt;li class = \"disabled\">&lt;a href = \"#\">2&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">3&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">4&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">5&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">&amp;raquo;&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h3>Sizing</h3>\n\n\n\n<p>The following example demonstrates the use of classes for sizing,&nbsp;<strong>.pagination-*</strong>&nbsp;discussed in the above table </p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"pagination pagination-lg\">\n   &lt;li>&lt;a href = \"#\">&amp;laquo;&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">1&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">2&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">3&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">4&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">5&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">&amp;raquo;&lt;/a>&lt;/li>\n&lt;/ul>\n\n&lt;br>\n\n&lt;ul class = \"pagination\">\n   &lt;li>&lt;a href = \"#\">&amp;laquo;&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">1&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">2&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">3&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">4&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">5&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">&amp;raquo;&lt;/a>&lt;/li>\n&lt;/ul>\n\n&lt;br>\n\n&lt;ul class = \"pagination pagination-sm\">\n   &lt;li>&lt;a href = \"#\">&amp;laquo;&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">1&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">2&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">3&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">4&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">5&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">&amp;raquo;&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h2>Pager</h2>\n\n\n\n<p>If you need to create simple pagination links that go beyond text, the pager can work quite well. Like the pagination links, the pager is an unordered list. By default the links are centered. The following table lists the classes Bootstrap provides for pager.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Class</th><th>Description</th><th>Sample code</th></tr><tr><td>.pager</td><td>Add this class to get the pager links.</td><td>&lt;ul class = &#8220;pager&#8221;&gt; &lt;li&gt;&lt;a href = &#8220;#&#8221;&gt;Previous&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href = &#8220;#&#8221;&gt;Next&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</td></tr><tr><td>.previous, .next</td><td>Use class&nbsp;<strong>.previous</strong>&nbsp;to left align and&nbsp;<strong>.next</strong>&nbsp;to right-align the links.</td><td>&lt;ul class = &#8220;pager&#8221;&gt; &lt;li class = &#8220;previous&#8221;&gt;&lt;a href = &#8220;#&#8221;&gt;&amp;larr; Older&lt;/a&gt;&lt;/li&gt; &lt;li class = &#8220;next&#8221;&gt;&lt;a href = &#8220;#&#8221;&gt;Newer &amp;rarr;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</td></tr><tr><td>.disabled</td><td>Add this class to get a muted look.</td><td>&lt;ul class = &#8220;pager&#8221;&gt; &lt;li class = &#8220;previous disabled&#8221;&gt;&lt;a href = &#8220;#&#8221;&gt;&amp;larr; Older&lt;/a&gt;&lt;/li&gt; &lt;li class = &#8220;next&#8221;&gt;&lt;a href = &#8220;#&#8221;&gt;Newer &amp;rarr;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</td></tr></tbody></table></figure>\n\n\n\n<h3>Default Pager</h3>\n\n\n\n<p>The following example demonstrates the use of class&nbsp;<strong>.pager</strong>&nbsp;discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"pager\">\n   &lt;li>&lt;a href = \"#\">Previous&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Next&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h3>Aligned Links</h3>\n\n\n\n<p>The following example demonstrates the use of classes for alignment,&nbsp;<strong>.previous, .next</strong>&nbsp;discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"pager\">\n   &lt;li class = \"previous\">&lt;a href = \"#\">&amp;larr; Older&lt;/a>&lt;/li>\n   &lt;li class = \"next\">&lt;a href = \"#\">Newer &amp;rarr;&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h3>States</h3>\n\n\n\n<p>The following example demonstrates the use of class <strong>.disabled</strong> discussed in the above table −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"pager\">\n   &lt;li class = \"previous disabled\">&lt;a href = \"#\">&amp;larr; Older&lt;/a>&lt;/li>\n   &lt;li class = \"next\">&lt;a href = \"#\">Newer &amp;rarr;&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter discusses about the pagination feature that Bootstrap supports. Pagination, an unordered list is handled by Bootstrap like a lot of other interface elements. Pagination The following table lists the classes that Bootstrap provides to handle pagination. Class Description Sample code .pagination Add this class to get the pagination on your page. &lt;ul class [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4099"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4099"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4099/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4099"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4099"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4099"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4100,
    "date": "2020-08-20T07:09:19",
    "date_gmt": "2020-08-20T07:09:19",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=226"
    },
    "modified": "2020-08-20T07:09:19",
    "modified_gmt": "2020-08-20T07:09:19",
    "slug": "bootstrap-labels",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-labels/",
    "title": {
      "rendered": "Bootstrap Labels"
    },
    "content": {
      "rendered": "\n<p>This chapter covers Bootstrap labels. Labels are great for offering counts, tips, or other markup for pages. Use class <strong>.label</strong> to display labels as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Example Heading &lt;span class = \"label label-default\">Label&lt;/span>&lt;/h1>\n&lt;h2>Example Heading &lt;span class =\" label label-default\">Label&lt;/span>&lt;/h2>\n&lt;h3>Example Heading &lt;span class = \"label label-default\">Label&lt;/span>&lt;/h3>\n&lt;h4>Example Heading &lt;span class = \"label label-default\">Label&lt;/span>&lt;/h4></code></pre>\n\n\n\n<p>You can modify the appearance of the labels using the modifier classes such as, <strong>label-default, label-primary, label-success, label-info, label-warning, label-danger</strong> as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span class = \"label label-default\">Default Label&lt;/span>\n&lt;span class = \"label label-primary\">Primary Label&lt;/span>\n&lt;span class = \"label label-success\">Success Label&lt;/span>\n&lt;span class = \"label label-info\">Info Label&lt;/span>\n&lt;span class = \"label label-warning\">Warning Label&lt;/span>\n&lt;span class = \"label label-danger\">Danger Label&lt;/span></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter covers Bootstrap labels. Labels are great for offering counts, tips, or other markup for pages. Use class .label to display labels as shown in the following example − You can modify the appearance of the labels using the modifier classes such as, label-default, label-primary, label-success, label-info, label-warning, label-danger as shown in the following example −</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4100"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4100"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4100/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4100"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4100"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4100"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4101,
    "date": "2020-08-20T07:10:34",
    "date_gmt": "2020-08-20T07:10:34",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=228"
    },
    "modified": "2020-08-20T07:10:34",
    "modified_gmt": "2020-08-20T07:10:34",
    "slug": "bootstrap-badges",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-badges/",
    "title": {
      "rendered": "Bootstrap Badges"
    },
    "content": {
      "rendered": "\n<p>This chapter will discuss about Bootstrap badges. Badges are similar to labels; the primary difference is that the corners are more rounded.</p>\n\n\n\n<p>Badges are mainly used to highlight new or unread items. To use badges just add&nbsp;<strong>&lt;span class = &#8220;badge&#8221;&gt;</strong>&nbsp;to links, Bootstrap navs, and more.</p>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Mailbox 50</code></pre>\n\n\n\n<p>When there are no new or unread items, badges will simply collapse via CSS&#8217;s&nbsp;<strong>:empty</strong>&nbsp;selector, provided no content exists within.</p>\n\n\n\n<h2>Active Nav States</h2>\n\n\n\n<p>You can place badges in active states of pill and list navigations. You can achieve this by placing&nbsp;<strong>&lt;span class = &#8220;badge&#8221;&gt;</strong>&nbsp;to active links, as demonstrated in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h4>Example for Active State in Pill &lt;/h4>\n\n&lt;ul class = \"nav nav-pills\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home &lt;span class =\"badge\">42&lt;/span>&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Profile&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">Messages &lt;span class = \"badge\">3&lt;/span>&lt;/a>&lt;/li>\n&lt;/ul>\n\n&lt;br>\n\n&lt;h4>Example for Active State in navigations&lt;/h4>\n\n&lt;ul class = \"nav nav-pills nav-stacked\" style = \"max-width: 260px;\">\n   &lt;li class = \"active\">\n      &lt;a href = \"#\">\n         &lt;span class = \"badge pull-right\">42&lt;/span>\n         Home\n      &lt;/a>\n   &lt;/li>\n\t\n   &lt;li>&lt;a href = \"#\">Profile&lt;/a>&lt;/li>\n\t\n   &lt;li>\n      &lt;a href = \"#\">\n         &lt;span class = \"badge pull-right\">3&lt;/span>\n         Messages\n      &lt;/a>\n   &lt;/li>\n&lt;/ul></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter will discuss about Bootstrap badges. Badges are similar to labels; the primary difference is that the corners are more rounded. Badges are mainly used to highlight new or unread items. To use badges just add&nbsp;&lt;span class = &#8220;badge&#8221;&gt;&nbsp;to links, Bootstrap navs, and more. The following example demonstrates this − When there are no [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4101"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4101"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4101/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4101"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4101"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4101"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4102,
    "date": "2020-08-20T07:11:20",
    "date_gmt": "2020-08-20T07:11:20",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=230"
    },
    "modified": "2020-08-20T07:11:20",
    "modified_gmt": "2020-08-20T07:11:20",
    "slug": "bootstrap-jumbotron",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-jumbotron/",
    "title": {
      "rendered": "Bootstrap Jumbotron"
    },
    "content": {
      "rendered": "\n<p>This chapter will discuss one more feature that Bootstrap supports, the Jumbotron. As the name suggest this component can optionally increase the size of headings and add a lot of margin for landing page content. To use the Jumbotron −</p>\n\n\n\n<ul><li>Create a container &lt;div&gt; with the class of&nbsp;<strong>.jumbotron</strong>.</li><li>In addition to a larger &lt;h1&gt;, the&nbsp;<em>font-weight</em>&nbsp;is reduced to 200px.</li></ul>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n\n   &lt;div class = \"jumbotron\">\n      &lt;h1>Welcome to landing page!&lt;/h1>\n      &lt;p>This is an example for jumbotron.&lt;/p>\n      \n      &lt;p>\n         &lt;a class = \"btn btn-primary btn-lg\" role = \"button\">Learn more&lt;/a>\n      &lt;/p>\n   &lt;/div>\n   \n&lt;/div></code></pre>\n\n\n\n<p>To get a jumbotron of full width, and without rounded corners use the&nbsp;<strong>.jumbotron</strong>&nbsp;class outside all&nbsp;<strong>.container</strong>&nbsp;classes and instead add a&nbsp;<strong>.container</strong>&nbsp;within, as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"jumbotron\">\n   \n   &lt;div class = \"container\">\n      &lt;h1>Welcome to landing page!&lt;/h1>\n      &lt;p>This is an example for jumbotron.&lt;/p>\n      \n      &lt;p>\n         &lt;a class = \"btn btn-primary btn-lg\" role = \"button\">Learn more&lt;/a>\n      &lt;/p>\n   &lt;/div>\n   \n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter will discuss one more feature that Bootstrap supports, the Jumbotron. As the name suggest this component can optionally increase the size of headings and add a lot of margin for landing page content. To use the Jumbotron − Create a container &lt;div&gt; with the class of&nbsp;.jumbotron. In addition to a larger &lt;h1&gt;, the&nbsp;font-weight&nbsp;is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4102"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4102"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4102/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4102"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4102"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4102"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4103,
    "date": "2020-08-20T07:12:09",
    "date_gmt": "2020-08-20T07:12:09",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=232"
    },
    "modified": "2020-08-20T07:12:09",
    "modified_gmt": "2020-08-20T07:12:09",
    "slug": "bootstrap-page-header",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-page-header/",
    "title": {
      "rendered": "Bootstrap Page Header"
    },
    "content": {
      "rendered": "\n<p>The page header is a nice little feature to add appropriate spacing around the headings on a page. This is particularly helpful on a web page where you may have several post titles and need a way to add distinction to each of them. To use a page header, wrap your heading in a &lt;div> with a class of <strong>.page-header</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"page-header\">\n   &lt;h1>\n      Example page header \n      &lt;small>Subtext for header&lt;/small>\n   &lt;/h1>\n&lt;/div>\n\n&lt;p>This is a sample text.This is a sample text.This is a sample text. This is a sample text.&lt;/p></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The page header is a nice little feature to add appropriate spacing around the headings on a page. This is particularly helpful on a web page where you may have several post titles and need a way to add distinction to each of them. To use a page header, wrap your heading in a &lt;div> [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4103"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4103"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4103/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4103"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4103"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4103"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4104,
    "date": "2020-08-20T07:12:57",
    "date_gmt": "2020-08-20T07:12:57",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=234"
    },
    "modified": "2020-08-20T07:12:57",
    "modified_gmt": "2020-08-20T07:12:57",
    "slug": "bootstrap-thumbnails",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-thumbnails/",
    "title": {
      "rendered": "Bootstrap Thumbnails"
    },
    "content": {
      "rendered": "\n<p>This chapter discusses about Bootstrap thumbnails. A lot of sites need a way to lay out images, videos, text, etc, in a grid, and Bootstrap has an easy way to do this with thumbnails. To create thumbnails using Bootstrap −</p>\n\n\n\n<ul><li>Add an &lt;a&gt; tag with the class of&nbsp;<strong>.thumbnail</strong>&nbsp;around an image.</li><li>This adds four pixels of padding and a gray border.</li><li>On hover, an animated glow outlines the image.</li></ul>\n\n\n\n<p>The following example demonstrates a default thumbnail −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"row\">\n   &lt;div class = \"col-sm-6 col-md-3\">\n      &lt;a href = \"#\" class = \"thumbnail\">\n         &lt;img src = \"/bootstrap/images/kittens.jpg\" alt = \"Generic placeholder thumbnail\">\n      &lt;/a>\n   &lt;/div>\n   \n   &lt;div class = \"col-sm-6 col-md-3\">\n      &lt;a href = \"#\" class = \"thumbnail\">\n         &lt;img src = \"/bootstrap/images/kittens.jpg\" alt = \"Generic placeholder thumbnail\">\n      &lt;/a>\n   &lt;/div>\n   \n   &lt;div class = \"col-sm-6 col-md-3\">\n      &lt;a href = \"#\" class = \"thumbnail\">\n         &lt;img src = \"/bootstrap/images/kittens.jpg\" alt = \"Generic placeholder thumbnail\">\n      &lt;/a>\n   &lt;/div>\n   \n   &lt;div class = \"col-sm-6 col-md-3\">\n      &lt;a href = \"#\" class = \"thumbnail\">\n         &lt;img src = \"/bootstrap/images/kittens.jpg\" alt = \"Generic placeholder thumbnail\">\n      &lt;/a>\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Adding Custom Content</h2>\n\n\n\n<p>Now that we have a basic thumbnail, it&#8217;s possible to add any kind of HTML content like headings, paragraphs, or buttons into thumbnails. Follow the steps below −</p>\n\n\n\n<ul><li>Change the &lt;a&gt; tag that has a class of&nbsp;<strong>.thumbnail</strong>&nbsp;to a &lt;div&gt;.</li><li>Inside of that &lt;div&gt;, you can add anything you need. As this is a &lt;div&gt;, we can use the default span-based naming convention for sizing.</li><li>If you want to group multiple images, place them in an unordered list, and each list item will be floated to the left.</li></ul>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"row\">\n   &lt;div class = \"col-sm-6 col-md-3\">\n      &lt;div class = \"thumbnail\">\n         &lt;img src = \"/bootstrap/images/kittens.jpg\" alt = \"Generic placeholder thumbnail\">\n      &lt;/div>\n      \n      &lt;div class = \"caption\">\n         &lt;h3>Thumbnail label&lt;/h3>\n         &lt;p>Some sample text. Some sample text.&lt;/p>\n         \n         &lt;p>\n            &lt;a href = \"#\" class = \"btn btn-primary\" role = \"button\">\n               Button\n            &lt;/a> \n            \n            &lt;a href = \"#\" class = \"btn btn-default\" role = \"button\">\n               Button\n            &lt;/a>\n         &lt;/p>\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"col-sm-6 col-md-3\">\n      &lt;div class = \"thumbnail\">\n         &lt;img src = \"/bootstrap/images/kittens.jpg\" alt = \"Generic placeholder thumbnail\">\n      &lt;/div>\n      \n      &lt;div class = \"caption\">\n         &lt;h3>Thumbnail label&lt;/h3>\n         &lt;p>Some sample text. Some sample text.&lt;/p>\n         \n         &lt;p>\n            &lt;a href = \"#\" class = \"btn btn-primary\" role = \"button\">\n               Button\n            &lt;/a> \n            \n            &lt;a href = \"#\" class = \"btn btn-default\" role = \"button\">\n               Button\n            &lt;/a>\n         &lt;/p>\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"col-sm-6 col-md-3\">\n      &lt;div class = \"thumbnail\">\n         &lt;img src = \"/bootstrap/images/kittens.jpg\" alt = \"Generic placeholder thumbnail\">\n      &lt;/div>\n      \n      &lt;div class = \"caption\">\n         &lt;h3>Thumbnail label&lt;/h3>\n         &lt;p>Some sample text. Some sample text.&lt;/p>\n         \n         &lt;p>\n            &lt;a href = \"#\" class = \"btn btn-primary\" role = \"button\">\n               Button\n            &lt;/a> \n            \n            &lt;a href = \"#\" class = \"btn btn-default\" role =\" button\">\n               Button\n            &lt;/a>\n         &lt;/p>\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"col-sm-6 col-md-3\">\n      &lt;div class = \"thumbnail\">\n         &lt;img src = \"/bootstrap/images/kittens.jpg\" alt = \"Generic placeholder thumbnail\">\n      &lt;/div>\n      \n      &lt;div class = \"caption\">\n         &lt;h3>Thumbnail label&lt;/h3>\n         &lt;p>Some sample text. Some sample text.&lt;/p>\n         \n         &lt;p>\n            &lt;a href = \"#\" class = \"btn btn-primary\" role = \"button\">\n               Button\n            &lt;/a> \n            \n            &lt;a href = \"#\" class = \"btn btn-default\" role = \"button\">\n               Button\n            &lt;/a>\n         &lt;/p>\n      &lt;/div>\n   &lt;/div>\n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter discusses about Bootstrap thumbnails. A lot of sites need a way to lay out images, videos, text, etc, in a grid, and Bootstrap has an easy way to do this with thumbnails. To create thumbnails using Bootstrap − Add an &lt;a&gt; tag with the class of&nbsp;.thumbnail&nbsp;around an image. This adds four pixels of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4104"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4104"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4104/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4104"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4104"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4104"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4105,
    "date": "2020-08-20T07:14:04",
    "date_gmt": "2020-08-20T07:14:04",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=236"
    },
    "modified": "2020-08-20T07:14:04",
    "modified_gmt": "2020-08-20T07:14:04",
    "slug": "bootstrap-alerts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-alerts/",
    "title": {
      "rendered": "Bootstrap Alerts"
    },
    "content": {
      "rendered": "\n<p>This chapter will discuss about alerts and the classes Bootstrap provides for alerts. Alerts provide a way to style messages to the user. They provide contextual feedback messages for typical user actions.</p>\n\n\n\n<p>You can add an optional close icon to alert. For inline dismissal use the&nbsp;Alerts jQuery plugin.</p>\n\n\n\n<p>You can add a basic alert by creating a wrapper &lt;div> and adding a class of <strong>.alert</strong> and one of the four contextual classes (e.g., <strong>.alert-success, .alert-info, .alert-warning, .alert-danger</strong>). The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"alert alert-success\">Success! Well done its submitted.&lt;/div>\n&lt;div class = \"alert alert-info\">Info! take this info.&lt;/div>\n&lt;div class = \"alert alert-warning\">Warning ! Dont submit this.&lt;/div>\n&lt;div class = \"alert alert-danger\">Error ! Change few things.&lt;/div></code></pre>\n\n\n\n<h2>Dismissal Alerts</h2>\n\n\n\n<p>To build a dismissal alert −</p>\n\n\n\n<ul><li>Add a basic alert by creating a wrapper &lt;div&gt; and adding a class of&nbsp;<strong>.alert</strong>&nbsp;and one of the four contextual classes (e.g.,&nbsp;<strong>.alert-success, .alert-info, .alert-warning, .alert-danger</strong>)</li><li>Also add optional&nbsp;<strong>.alert-dismissable</strong>&nbsp;to the above &lt;div&gt; class.</li><li>Add a close button.</li></ul>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Be sure to use the &lt;button&gt; element with the&nbsp;<em>data-dismiss = &#8220;alert&#8221;</em>&nbsp;data attribute.</p></blockquote>\n\n\n\n<h2>Links in Alerts</h2>\n\n\n\n<p>To get links in alerts −</p>\n\n\n\n<ul><li>Add a basic alert by creating a wrapper &lt;div&gt; and adding a class of&nbsp;<strong>.alert</strong>&nbsp;and one of the four contextual classes (e.g.,&nbsp;<strong>.alert-success, .alert-info, .alert-warning, .alert-danger</strong>)</li><li>Use the&nbsp;<strong>.alert-link</strong>&nbsp;utility class to quickly provide matching colored links within any alert.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"alert alert-success alert-dismissable\">\n   &lt;button type = \"button\" class = \"close\" data-dismiss = \"alert\" aria-hidden = \"true\">\n      &amp;times;\n   &lt;/button>\n\t\n   Success! Well done its submitted.\n&lt;/div>\n\n&lt;div class = \"alert alert-info alert-dismissable\">\n   &lt;button type = \"button\" class = \"close\" data-dismiss = \"alert\" aria-hidden = \"true\">\n      &amp;times;\n   &lt;/button>\n\t\n   Info! take this info.\n&lt;/div>\n\n&lt;div class = \"alert alert-warning alert-dismissable\">\n   &lt;button type = \"button\" class = \"close\" data-dismiss = \"alert\" aria-hidden = \"true\">\n      &amp;times;\n   &lt;/button>\n\t\n   Warning ! Dont submit this.\n&lt;/div>\n\n&lt;div class = \"alert alert-danger alert-dismissable\">\n   &lt;button type = \"button\" class = \"close\" data-dismiss = \"alert\" aria-hidden = \"true\">\n      &amp;times;\n   &lt;/button>\n\t\n   Error ! Change few things.\n&lt;/div></code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"alert alert-success\">\n   &lt;a href = \"#\" class = \"alert-link\">Success! Well done its submitted.&lt;/a>\n&lt;/div>\n\n&lt;div class = \"alert alert-info\">\n   &lt;a href = \"#\" class = \"alert-link\">Info! take this info.&lt;/a>\n&lt;/div>\n\n&lt;div class = \"alert alert-warning\">\n   &lt;a href = \"#\" class = \"alert-link\">Warning ! Dont submit this.&lt;/a>\n&lt;/div>\n\n&lt;div class = \"alert alert-danger\">\n   &lt;a href = \"#\" class = \"alert-link\">Error ! Change few things.&lt;/a>\n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter will discuss about alerts and the classes Bootstrap provides for alerts. Alerts provide a way to style messages to the user. They provide contextual feedback messages for typical user actions. You can add an optional close icon to alert. For inline dismissal use the&nbsp;Alerts jQuery plugin. You can add a basic alert by [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4105"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4105"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4105/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4105"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4105"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4105"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4106,
    "date": "2020-08-20T07:15:30",
    "date_gmt": "2020-08-20T07:15:30",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=238"
    },
    "modified": "2020-08-20T07:15:30",
    "modified_gmt": "2020-08-20T07:15:30",
    "slug": "bootstrap-progress-bars",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-progress-bars/",
    "title": {
      "rendered": "Progress Bars"
    },
    "content": {
      "rendered": "\n<p>This chapter discusses about Bootstrap progress bars. The purpose of progress bars is to show that assets are loading, in progress, or that there is action taking place regarding elements on the page.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Progress bars use CSS3 transitions and animations to achieve some of their effects. These features are not supported in Internet Explorer 9 and below or older versions of Firefox. Opera 12 does not support animations.</p></blockquote>\n\n\n\n<h2>Default Progress Bar</h2>\n\n\n\n<p>To create a basic progress bar −</p>\n\n\n\n<ul><li>Add a &lt;div&gt; with a class of&nbsp;<strong>.progress</strong>.</li><li>Next, inside the above &lt;div&gt;, add an empty &lt;div&gt; with a class of&nbsp;<strong>.progress-bar</strong>.</li><li>Add a style attribute with the width expressed as a percentage. Say for example, style = &#8220;60%&#8221;; indicates that the progress bar was at 60%.</li></ul>\n\n\n\n<p>Let us see an example below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"progress\">\n   &lt;div class = \"progress-bar\" role = \"progressbar\" aria-valuenow = \"60\" \n      aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 40%;\">\n      \n      &lt;span class = \"sr-only\">40% Complete&lt;/span>\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Alternate Progress Bar</h2>\n\n\n\n<p>To create a progress bar with different styles −</p>\n\n\n\n<ul><li>Add a &lt;div&gt; with a class of&nbsp;<strong>.progress</strong>.</li><li>Next, inside the above &lt;div&gt;, add an empty &lt;div&gt; with a class of&nbsp;<strong>.progress-bar</strong>&nbsp;and class&nbsp;<strong>progress-bar-*</strong>&nbsp;where * could be&nbsp;<strong>success, info, warning, danger</strong>.</li><li>Add a style attribute with the width expressed as a percentage. Say for example, style = &#8220;60%&#8221;; indicates that the progress bar was at 60%.</li></ul>\n\n\n\n<p>Let us see an example below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"progress\">\n   &lt;div class = \"progress-bar progress-bar-success\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 90%;\">\n      \n      &lt;span class = \"sr-only\">90% Complete (Sucess)&lt;/span>\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"progress\">\n   &lt;div class = \"progress-bar progress-bar-info\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 30%;\">\n      \n      &lt;span class = \"sr-only\">30% Complete (info)&lt;/span>\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"progress\">\n   &lt;div class = \"progress-bar progress-bar-warning\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 20%;\">\n      \n      &lt;span class = \"sr-only\">20%Complete (warning)&lt;/span>\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"progress\">\n   &lt;div class = \"progress-bar progress-bar-danger\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 10%;\">\n      \n      &lt;span class = \"sr-only\">10% Complete (danger)&lt;/span>\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Striped Progress Bar</h2>\n\n\n\n<p>To create a striped progress bar −</p>\n\n\n\n<ul><li>Add a &lt;div&gt; with a class of&nbsp;<strong>.progress</strong>&nbsp;and&nbsp;<strong>.progress-striped</strong>.</li><li>Next, inside the above &lt;div&gt;, add an empty &lt;div&gt; with a class of&nbsp;<strong>.progress-bar</strong>&nbsp;and class&nbsp;<strong>progress-bar-*</strong>&nbsp;where * could be&nbsp;<strong>success, info, warning, danger</strong>.</li><li>Add a style attribute with the width expressed as a percentage. Say for example, style = &#8220;60%&#8221;; indicates that the progress bar was at 60%.</li></ul>\n\n\n\n<p>Let us see an example below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"progress progress-striped\">\n   &lt;div class = \"progress-bar progress-bar-success\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 90%;\">\n      \n      &lt;span class = \"sr-only\">90% Complete (Sucess)&lt;/span>\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"progress progress-striped\">\n   &lt;div class = \"progress-bar progress-bar-info\" role = \"progressbar\"\n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 30%;\">\n      \n      &lt;span class = \"sr-only\">30% Complete (info)&lt;/span>\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"progress progress-striped\">\n   &lt;div class = \"progress-bar progress-bar-warning\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style=\"width: 20%;\">\n      \n      &lt;span class = \"sr-only\">20%Complete (warning)&lt;/span>\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"progress progress-striped\">\n   &lt;div class = \"progress-bar progress-bar-danger\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 10%;\">\n      \n      &lt;span class = \"sr-only\">10% Complete (danger)&lt;/span>\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Animated Progress Bar</h2>\n\n\n\n<p>To create an animated progress bar −</p>\n\n\n\n<ul><li>Add a &lt;div&gt; with a class of&nbsp;<strong>.progress</strong>&nbsp;and&nbsp;<strong>.progress-striped</strong>. Also add class&nbsp;<strong>.active</strong>&nbsp;to&nbsp;<strong>.progress-striped</strong>.</li><li>Next, inside the above &lt;div&gt;, add an empty &lt;div&gt; with a class of&nbsp;<strong>.progress-bar</strong>.</li><li>Add a style attribute with the width expressed as a percentage. Say for example, style = &#8220;60%&#8221;; indicates that the progress bar was at 60%.</li></ul>\n\n\n\n<p>This will animate the stripes right to left.</p>\n\n\n\n<p>Let us see an example below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"progress progress-striped active\">\n   &lt;div class = \"progress-bar progress-bar-success\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 40%;\">\n      \n      &lt;span class = \"sr-only\">40% Complete&lt;/span>\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Stacked Progress Bar</h2>\n\n\n\n<p>You can even stack multiple progress bars. Place the multiple progress bars into the same <strong>.progress</strong> to stack them as seen in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"progress\">\n   \n   &lt;div class = \"progress-bar progress-bar-success\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 40%;\">\n      \n      &lt;span class = \"sr-only\">40% Complete&lt;/span>\n   &lt;/div>\n   \n   &lt;div class = \"progress-bar progress-bar-info\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 30%;\">\n      \n      &lt;span class = \"sr-only\">30% Complete (info)&lt;/span>\n   &lt;/div>\n   \n   &lt;div class = \"progress-bar progress-bar-warning\" role = \"progressbar\" \n      aria-valuenow = \"60\" aria-valuemin = \"0\" aria-valuemax = \"100\" style = \"width: 20%;\">\n      \n      &lt;span class = \"sr-only\">20%Complete (warning)&lt;/span>\n   &lt;/div>\n   \n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter discusses about Bootstrap progress bars. The purpose of progress bars is to show that assets are loading, in progress, or that there is action taking place regarding elements on the page. Progress bars use CSS3 transitions and animations to achieve some of their effects. These features are not supported in Internet Explorer 9 [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4106"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4106"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4106/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4106"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4106"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4106"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4107,
    "date": "2020-08-20T07:16:19",
    "date_gmt": "2020-08-20T07:16:19",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=240"
    },
    "modified": "2020-08-20T07:16:19",
    "modified_gmt": "2020-08-20T07:16:19",
    "slug": "bootstrap-media-object",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-media-object/",
    "title": {
      "rendered": "Bootstrap Media Object"
    },
    "content": {
      "rendered": "\n<p>This chapter discusses about Media object. These are abstract object styles for building various types of components (like blog comments, Tweets, etc.) that feature a left-aligned or right-aligned image alongside the textual content. The goal of the media object is to make the code for developing these blocks of information drastically shorter.</p>\n\n\n\n<p>The goal of media objects (light markup, easy extendability) is achieved by applying classes to some of the simple markup. There are two forms to the media object −</p>\n\n\n\n<ul><li><strong>.media</strong>&nbsp;− This class allows to float a media object (images, video, and audio) to the left or right of a content block.</li><li><strong>.media-list</strong>&nbsp;− If you are preparing a list where the items will be part of an unordered list, use a class. useful for comment threads or articles lists.</li></ul>\n\n\n\n<p>Let us see an example below of default media object −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"media\">\n   &lt;a class = \"pull-left\" href = \"#\">\n      &lt;img class = \"media-object\" src = \"/bootstrap/images/64.jpg\" alt = \"Media Object\">\n   &lt;/a>\n   \n   &lt;div class = \"media-body\">\n      &lt;h4 class = \"media-heading\">Media heading&lt;/h4>\n      This is some sample text. This is some sample text. \n      This is some sample text. This is some sample text.\n      This is some sample text. This is some sample text. \n      This is some sample text. This is some sample text.\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"media\">\n   &lt;a class = \"pull-left\" href = \"#\">\n      &lt;img class = \"media-object\" src = \"/bootstrap/images/64.jpg\" alt = \"Media Object\">\n   &lt;/a>\n   \n   &lt;div class = \"media-body\">\n      &lt;h4 class = \"media-heading\">Media heading&lt;/h4>\n      This is some sample text. This is some sample text. \n      This is some sample text. This is some sample text.\n      This is some sample text. This is some sample text. \n      This is some sample text. This is some sample text.\n      \n      &lt;div class = \"media\">\n         &lt;a class = \"pull-left\" href = \"#\">\n            &lt;img class = \"media-object\" src = \"/bootstrap/images/64.jpg\" alt = \"Media Object\">\n         &lt;/a>\n         \n         &lt;div class = \"media-body\">\n            &lt;h4 class = \"media-heading\">Media heading&lt;/h4>\n            This is some sample text. This is some sample text. \n            This is some sample text. This is some sample text.\n            This is some sample text. This is some sample text. \n            This is some sample text. This is some sample text.\n         &lt;/div>\n      &lt;/div>\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>Let us see an example of media list −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"media-list\">\n   &lt;li class = \"media\">\n      &lt;a class = \"pull-left\" href = \"#\">\n         &lt;img class = \"media-object\" src = \"/bootstrap/images/64.jpg\" alt = \"Generic placeholder image\">\n      &lt;/a>\n      \n      &lt;div class = \"media-body\">\n         &lt;h4 class = \"media-heading\">Media heading&lt;/h4>\n\t\t\t\n         &lt;p>\n            This is some sample text. This is some sample text. \n            This is some sample text. This is some sample text.\n            This is some sample text. This is some sample text. \n            This is some sample text. This is some sample text.\n         &lt;/p>\n         \n         &lt;!-- Nested media object -->\n         &lt;div class = \"media\">\n            &lt;a class = \"pull-left\" href = \"#\">\n               &lt;img class = \"media-object\" src = \"/bootstrap/images/64.jpg\" \n                  alt = \"Generic placeholder image\">\n            &lt;/a>\n            \n            &lt;div class = \"media-body\">\n               &lt;h4 class = \"media-heading\">Nested media heading&lt;/h4>\n               This is some sample text. This is some sample text. \n               This is some sample text. This is some sample text.\n               This is some sample text. This is some sample text. \n               This is some sample text. This is some sample text.\n               \n               &lt;!-- Nested media object -->\n               &lt;div class = \"media\">\n                  &lt;a class = \"pull-left\" href = \"#\">\n                     &lt;img class = \"media-object\" src = \"/bootstrap/images/64.jpg\" \n                        alt = \"Generic placeholder image\">\n                  &lt;/a>\n                  \n                  &lt;div class = \"media-body\">\n                     &lt;h4 class = \"media-heading\">Nested media heading&lt;/h4>\n                     This is some sample text. This is some sample text. \n                     This is some sample text. This is some sample text.\n                     This is some sample text. This is some sample text. \n                     This is some sample text. This is some sample text.\n                  &lt;/div>\n               &lt;/div>\n            &lt;/div>\n         &lt;/div>\n         \n         &lt;!-- Nested media object -->\n         &lt;div class = \"media\">\n            &lt;a class = \"pull-left\" href = \"#\">\n               &lt;img class = \"media-object\" src = \"/bootstrap/images/64.jpg\"\n                  alt = \"Generic placeholder image\">\n            &lt;/a>\n            \n            &lt;div class = \"media-body\">\n               &lt;h4 class = \"media-heading\">Nested media heading&lt;/h4>\n               This is some sample text. This is some sample text. \n               This is some sample text. This is some sample text.\n               This is some sample text. This is some sample text. \n               This is some sample text. This is some sample text.\n            &lt;/div>\n         &lt;/div>\n      &lt;/div>\n   &lt;/li>\n   \n   &lt;li class = \"media\">\n      &lt;a class = \"pull-right\" href = \"#\">\n         &lt;img class = \"media-object\" src = \"/bootstrap/images/64.jpg\" \n            alt = \"Generic placeholder image\">\n      &lt;/a>\n      \n      &lt;div class = \"media-body\">\n         &lt;h4 class = \"media-heading\">Media heading&lt;/h4>\n         This is some sample text. This is some sample text. \n         This is some sample text. This is some sample text.\n         This is some sample text. This is some sample text. \n         This is some sample text. This is some sample text.\n      &lt;/div>\n   &lt;/li>\n&lt;/ul></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter discusses about Media object. These are abstract object styles for building various types of components (like blog comments, Tweets, etc.) that feature a left-aligned or right-aligned image alongside the textual content. The goal of the media object is to make the code for developing these blocks of information drastically shorter. The goal of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4107"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4107"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4107/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4107"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4107"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4107"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4108,
    "date": "2020-08-20T07:17:26",
    "date_gmt": "2020-08-20T07:17:26",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=242"
    },
    "modified": "2020-08-20T07:17:26",
    "modified_gmt": "2020-08-20T07:17:26",
    "slug": "bootstrap-list-group",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-list-group/",
    "title": {
      "rendered": "Bootstrap List Group"
    },
    "content": {
      "rendered": "\n<p>The purpose of list group component is to render complex and customized content in lists. To get a basic list group −</p>\n\n\n\n<ul><li>Add the class&nbsp;<strong>.list-group</strong>&nbsp;to element &lt;ul&gt;.</li><li>Add class&nbsp;<strong>.list-group-item</strong>&nbsp;to &lt;li&gt;.</li></ul>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"list-group\">\n   &lt;li class = \"list-group-item\">Free Domain Name Registration&lt;/li>\n   &lt;li class = \"list-group-item\">Free Window Space hosting&lt;/li>\n   &lt;li class = \"list-group-item\">Number of Images&lt;/li>\n   &lt;li class = \"list-group-item\">24*7 support&lt;/li>\n   &lt;li class = \"list-group-item\">Renewal cost per year&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h2>Adding Badges to List Group</h2>\n\n\n\n<p>We can add the badges component to any list group item and it will automatically be positioned on the right. Just add <strong>&lt;span class = &#8220;badge&#8221;></strong> within the &lt;li> element. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul class = \"list-group\">\n   &lt;li class = \"list-group-item\">Free Domain Name Registration&lt;/li>\n   &lt;li class = \"list-group-item\">Free Window Space hosting&lt;/li>\n   &lt;li class = \"list-group-item\">Number of Images&lt;/li>\n   \n   &lt;li class = \"list-group-item\">\n      &lt;span class = \"badge\">New&lt;/span>\n      24*7 support\n   &lt;/li>\n   \n   &lt;li class = \"list-group-item\">Renewal cost per year&lt;/li>\n   \n   &lt;li class = \"list-group-item\">\n      &lt;span class = \"badge\">New&lt;/span>\n      Disocunt Offer\n   &lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h2>Linking List Group Items</h2>\n\n\n\n<p>By using the anchor tags instead of list items, we can link the list groups. We need to use &lt;div> instead of &lt;ul> element. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a href = \"#\" class = \"list-group-item active\">\n   Free Domain Name Registration\n&lt;/a>\n\n&lt;a href = \"#\" class = \"list-group-item\">24*7 support&lt;/a>\n&lt;a href = \"#\" class = \"list-group-item\">Free Window Space hosting&lt;/a>\n&lt;a href = \"#\" class = \"list-group-item\">Number of Images&lt;/a>\n&lt;a href = \"#\" class = \"list-group-item\">Renewal cost per year&lt;/a></code></pre>\n\n\n\n<h2>Add Custom Content to List Group</h2>\n\n\n\n<p>We can add any HTML content to the above linked list groups. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"list-group\">\n   &lt;a href = \"#\" class = \"list-group-item active\">\n      &lt;h4 class = \"list-group-item-heading\">\n         Starter Website Package\n      &lt;/h4>\n   &lt;/a>\n   \n   &lt;a href = \"#\" class = \"list-group-item\">\n      &lt;h4 class = \"list-group-item-heading\">\n         Free Domain Name Registration\n      &lt;/h4>\n      \n      &lt;p class = \"list-group-item-text\">\n         You will get a free domain registration with website pages.\n      &lt;/p>\n   &lt;/a>\n   \n   &lt;a href = \"#\" class = \"list-group-item\">\n      &lt;h4 class = \"list-group-item-heading\">\n         24*7 support\n      &lt;/h4>\n      \n      &lt;p class = \"list-group-item-text\">\n         We provide 24*7 support.\n      &lt;/p>\n   &lt;/a>\n&lt;/div>\n\n&lt;div class = \"list-group\">\n   &lt;a href = \"#\" class = \"list-group-item active\">\n      &lt;h4 class = \"list-group-item-heading\">\n         Business Website Package\n      &lt;/h4>\n   &lt;/a>\n   \n   &lt;a href = \"#\" class=\"list-group-item\">\n      &lt;h4 class = \"list-group-item-heading\">\n         Free Domain Name Registration\n      &lt;/h4>\n      \n      &lt;p class = \"list-group-item-text\">\n         You will get a free domain registration with website pages.\n      &lt;/p>\n   &lt;/a>\n   \n   &lt;a href = \"#\" class = \"list-group-item\">\n      &lt;h4 class = \"list-group-item-heading\">24*7 support&lt;/h4>\n      &lt;p class = \"list-group-item-text\">We provide 24*7 support.&lt;/p>\n   &lt;/a>\n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The purpose of list group component is to render complex and customized content in lists. To get a basic list group − Add the class&nbsp;.list-group&nbsp;to element &lt;ul&gt;. Add class&nbsp;.list-group-item&nbsp;to &lt;li&gt;. The following example demonstrates this − Adding Badges to List Group We can add the badges component to any list group item and it will [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4108"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4108"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4108/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4108"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4108"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4108"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4109,
    "date": "2020-08-20T07:20:02",
    "date_gmt": "2020-08-20T07:20:02",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=244"
    },
    "modified": "2020-08-20T07:20:02",
    "modified_gmt": "2020-08-20T07:20:02",
    "slug": "bootstrap-panels",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-panels/",
    "title": {
      "rendered": "Bootstrap Panels"
    },
    "content": {
      "rendered": "\n<p>This chapter will discuss about Bootstrap panels. Panel components are used when you want to put your DOM component in a box. To get a basic panel, just add class <strong>.panel</strong> to the &lt;div> element. Also add class <strong>.panel-default</strong> to this element as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel panel-default\">\n   &lt;div class = \"panel-body\">\n      This is a Basic panel\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Panel with Heading</h2>\n\n\n\n<p>There are two ways to add panel heading −</p>\n\n\n\n<ul><li>Use&nbsp;<strong>.panel-heading</strong>&nbsp;class to easily add a heading container to your panel.</li><li>Use any &lt;h1&gt;-&lt;h6&gt; with a&nbsp;<strong>.panel-title</strong>&nbsp;class to add a pre-styled heading.</li></ul>\n\n\n\n<p>The following example demonstrates both the ways −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel panel-default\">\n   &lt;div class = \"panel-heading\">\n      Panel heading without title\n   &lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      Panel content\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"panel panel-default\">\n   &lt;div class = \"panel-heading\">\n      &lt;h3 class = \"panel-title\">\n         Panel With title\n      &lt;/h3>\n   &lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      Panel content\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Panel with Footer</h2>\n\n\n\n<p>You can add footers to panels, by wrapping buttons or secondary text in a &lt;div> containing class <strong>.panel-footer</strong>. The following example demonstrates this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel panel-default\">\n   &lt;div class = \"panel-body\">\n      This is a Basic panel\n   &lt;/div>\n   \n   &lt;div class = \"panel-footer\">Panel footer&lt;/div>\n&lt;/div></code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Panel footers do not inherit colors and borders when using contextual variations as they are not meant to be in the foreground.</p></blockquote>\n\n\n\n<h2>Panel Contextual Alternatives</h2>\n\n\n\n<p>Use contextual state classes such as, <strong>panel-primary, panel-success, panel-info, panel-warning, panel-danger</strong>, to make a panel more meaningful to a particular context.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel panel-primary\">\n   &lt;div class = \"panel-heading\">\n      &lt;h3 class = \"panel-title\">Panel title&lt;/h3>\n   &lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      This is a Basic panel\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"panel panel-success\">\n   &lt;div class = \"panel-heading\">\n      &lt;h3 class = \"panel-title\">Panel title&lt;/h3>\n   &lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      This is a Basic panel\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"panel panel-info\">\n   &lt;div class = \"panel-heading\">\n      &lt;h3 class = \"panel-title\">Panel title&lt;/h3>\n   &lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      This is a Basic panel\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"panel panel-warning\">\n   &lt;div class = \"panel-heading\">\n      &lt;h3 class = \"panel-title\">Panel title&lt;/h3>\n   &lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      This is a Basic panel\n   &lt;/div>\n&lt;/div>\n\n&lt;div class = \"panel panel-danger\">\n   &lt;div class = \"panel-heading\">\n      &lt;h3 class = \"panel-title\">Panel title&lt;/h3>\n   &lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      This is a Basic panel\n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<h2>Panel with Tables</h2>\n\n\n\n<p>To get a non-bordered table within a panel, use the class&nbsp;<strong>.table</strong>&nbsp;within the panel. Suppose there is a &lt;div&gt; containing&nbsp;<strong>.panel-body</strong>, we add an extra border to the top of the table for separation. If there is no &lt;div&gt; containing&nbsp;<strong>.panel-body</strong>, then the component moves from panel header to table without interruption.</p>\n\n\n\n<p>The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel panel-default\">\n   &lt;div class = \"panel-heading\">\n      &lt;h3 class = \"panel-title\">Panel title&lt;/h3>\n   &lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      This is a Basic panel\n   &lt;/div>\n   \n   &lt;table class = \"table\">\n      &lt;tr>\n         &lt;th>Product&lt;/th>\n         &lt;th>Price &lt;/th>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Product A&lt;/td>\n         &lt;td>200&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Product B&lt;/td>\n         &lt;td>400&lt;/td>\n      &lt;/tr>\n   &lt;/table>\n&lt;/div>\n\n&lt;div class = \"panel panel-default\">\n   &lt;div class = \"panel-heading\">Panel Heading&lt;/div>\n   \n   &lt;table class = \"table\">\n      &lt;tr>\n         &lt;th>Product&lt;/th>\n         &lt;th>Price &lt;/th>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Product A&lt;/td>\n         &lt;td>200&lt;/td>\n      &lt;/tr>\n      \n      &lt;tr>\n         &lt;td>Product B&lt;/td>\n         &lt;td>400&lt;/td>\n      &lt;/tr>\n   &lt;/table>\n&lt;/div></code></pre>\n\n\n\n<h2>Panel with List groups</h2>\n\n\n\n<p>You can include list groups within any panel. Create a panel by adding class <strong>.panel</strong> to the &lt;div> element. Also add class <strong>.panel-default</strong> to this element. Now within this panel include your list groups. You can learn to create a list group from chapter </p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel panel-default\">\n   &lt;div class =\"panel-heading\">Panel heading&lt;/div>\n   \n   &lt;div class = \"panel-body\">\n      &lt;p>This is a Basic panel content. This is a Basic panel content.\n         This is a Basic panel content. This is a Basic panel content.\n         This is a Basic panel content. This is a Basic panel content.\n         This is a Basic panel content.&lt;/p>\n   &lt;/div>\n   \n   &lt;ul class = \"list-group\">\n      &lt;li class = \"list-group-item\">Free Domain Name Registration&lt;/li>\n      &lt;li class = \"list-group-item\">Free Window Space hosting&lt;/li>\n      &lt;li class = \"list-group-item\">Number of Images&lt;/li>\n      &lt;li class = \"list-group-item\">24*7 support&lt;/li>\n      &lt;li class = \"list-group-item\">Renewal cost per year&lt;/li>\n   &lt;/ul>\n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter will discuss about Bootstrap panels. Panel components are used when you want to put your DOM component in a box. To get a basic panel, just add class .panel to the &lt;div> element. Also add class .panel-default to this element as shown in the following example − Panel with Heading There are two ways to add panel [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4109"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4109"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4109/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4109"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4109"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4109"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4110,
    "date": "2020-08-20T07:21:12",
    "date_gmt": "2020-08-20T07:21:12",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=246"
    },
    "modified": "2020-08-20T07:21:12",
    "modified_gmt": "2020-08-20T07:21:12",
    "slug": "bootstrap-wells",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-wells/",
    "title": {
      "rendered": "Bootstrap Wells"
    },
    "content": {
      "rendered": "\n<p>A well is a container in &lt;div> that causes the content to appear sunken or an inset effect on the page. To create a well, simply wrap the content that you would like to appear in the well with a &lt;div> containing the class of <strong>.well</strong>. The following example shows a default well −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"well\">Hi, am in well !!&lt;/div></code></pre>\n\n\n\n<h2>Sizing</h2>\n\n\n\n<p>You can change the size of well using the optional classes such as, <strong>well-lg</strong> or <strong>well-lg</strong>. These classes are used in conjunction with <strong>.well</strong> class. These affect the padding, making the well larger or smaller depending on the class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"well well-lg\">Hi, am in large well !!&lt;/div>\n&lt;div class = \"well well-sm\">Hi, am in small well !!&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A well is a container in &lt;div> that causes the content to appear sunken or an inset effect on the page. To create a well, simply wrap the content that you would like to appear in the well with a &lt;div> containing the class of .well. The following example shows a default well − Sizing You [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4110"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4110"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4110/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4110"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4110"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4110"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2900,
    "date": "2020-08-20T07:22:38",
    "date_gmt": "2020-08-20T07:22:38",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=248"
    },
    "modified": "2020-08-20T07:22:38",
    "modified_gmt": "2020-08-20T07:22:38",
    "slug": "bootstrap-plugins-overview",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-plugins-overview/",
    "title": {
      "rendered": "Plugins Overview"
    },
    "content": {
      "rendered": "\n<p>The components discussed in the previous chapters under&nbsp;<strong>Layout Components</strong>&nbsp;are just the beginning. Bootstrap comes bundled with 12 jQuery plugins that extend the features and can add more interaction to your site. To get started with the Bootstrap’s JavaScript plugins, you don’t need to be an advanced JavaScript developer. By utilizing Bootstrap Data API, most of the plugins can be triggered without writing a single line of code.</p>\n\n\n\n<p>Bootstrap Plugins can be included on your site in two forms −</p>\n\n\n\n<ul><li><strong>Individually</strong>&nbsp;− Using Bootstrap&#8217;s individual&nbsp;<em>*.js</em>&nbsp;files. Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs.</li><li>Or&nbsp;<strong>compiled (all at once)</strong>&nbsp;− Using&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>. Do not attempt to include both, as both&nbsp;<em>bootstrap.js</em>&nbsp;and&nbsp;<em>bootstrap.min.js</em>&nbsp;contain all plugins in a single file.</li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>All plugins depend on jQuery. So jQuery must be included before the plugin files. Check&nbsp;<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://github.com/twbs/bootstrap/blob/v3.0.2/bower.json\">bower.json</a>&nbsp;to see which versions of jQuery are supported.</p></blockquote>\n\n\n\n<h2>Data Attributes</h2>\n\n\n\n<ul><li>All of the Bootstrap plugins are accessible using the included Data API. Hence, you don’t need to include a single line of JavaScript to invoke any of the plugin features.</li><li>In some situations it may be desirable to turn this functionality of Data API off. If you need to turn off the Data API, you can unbind the attributes by adding the following line of JavaScript −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$(document).off('.data-api')\n</code></pre>\n\n\n\n<ul><li>To turn off a specific/single plugin, just include the plugin&#8217;s name as a namespace along with the data-api namespace like this −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$(document).off('.alert.data-api')\n</code></pre>\n\n\n\n<h2>Programmatic API</h2>\n\n\n\n<p>The developers of Bootstrap believe that you should be able to use all of the plugins purely through the JavaScript API. All public APIs are single, chainable methods, and return the collection acted upon say for example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(\".btn.danger\").button(\"toggle\").addClass(\"fat\")\n</code></pre>\n\n\n\n<p>All methods accept an optional options object, a string which targets a particular method, or nothing (which initiates a plugin with default behavior) as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// initialized with defaults\n$(\"#myModal\").modal()    \n\n // initialized with no keyboard                  \n$(\"#myModal\").modal({ keyboard: false })  \n\n// initializes and invokes show immediately\n$(\"#myModal\").modal('show')                </code></pre>\n\n\n\n<p>Each plugin also exposes its raw constructor on a&nbsp;<strong>Constructor</strong>&nbsp;property:&nbsp;<em>$.fn.popover.Constructor</em>. If you&#8217;d like to get a particular plugin instance, retrieve it directly from an element −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$('&#91;rel = popover]').data('popover').\n</code></pre>\n\n\n\n<h2>No Conflict</h2>\n\n\n\n<p>Bootstrap plugins can sometimes be used with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. To overcome this call&nbsp;<strong>.noConflict</strong>&nbsp;on the plugin you wish to revert the value of.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// return $.fn.button to previously assigned value\nvar bootstrapButton = $.fn.button.noConflict()\n\n// give $().bootstrapBtn the Bootstrap functionality\n$.fn.bootstrapBtn = bootstrapButton            </code></pre>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>Bootstrap provides custom events for most plugin&#8217;s unique actions. Generally, these events come in two forms −</p>\n\n\n\n<ul><li><strong>Infinitive form</strong>&nbsp;− This is triggered at the start of an event.&nbsp;<em>E.g. show</em>. Infinitive events provide&nbsp;<em>preventDefault</em>&nbsp;functionality. This provides the ability to stop the execution of an action before it starts.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('#myModal').on('show.bs.modal', function (e) {\n   // stops modal from being shown\n   if (!data) return e.preventDefault() \n})</code></pre>\n\n\n\n<ul><li><strong>Past participle form</strong>&nbsp;− This is triggered on the completion of an action.&nbsp;<em>E.g. shown.</em></li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The components discussed in the previous chapters under&nbsp;Layout Components&nbsp;are just the beginning. Bootstrap comes bundled with 12 jQuery plugins that extend the features and can add more interaction to your site. To get started with the Bootstrap’s JavaScript plugins, you don’t need to be an advanced JavaScript developer. By utilizing Bootstrap Data API, most of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2900"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2900"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2900/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2900"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2900"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2900"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2901,
    "date": "2020-08-20T07:30:46",
    "date_gmt": "2020-08-20T07:30:46",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=250"
    },
    "modified": "2020-08-20T07:30:46",
    "modified_gmt": "2020-08-20T07:30:46",
    "slug": "bootstrap-transition-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-transition-plugin/",
    "title": {
      "rendered": "Transition Plugin"
    },
    "content": {
      "rendered": "\n<p>The transition plugin provides a simple transition effects.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need&nbsp;<strong>transition.js</strong>&nbsp;once alongside the other JS files. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<p><em>Transition.js</em>&nbsp;is a basic helper for transitionEnd events as well as a CSS transition emulator. It is used by the other plugins to check for CSS transition support and to catch hanging transitions.</p>\n\n\n\n<h2>Use Cases</h2>\n\n\n\n<p>A few examples of the transition plugin are −</p>\n\n\n\n<ul><li>Sliding or fading in modals. You can find an example in the chapter&nbsp;<a href=\"https://www.tutorialspoint.com/bootstrap/bootstrap_modal_plugin.htm\">Bootstrap Modal Plugin</a>.</li><li>Fading out tabs. You can find an example in the chapter&nbsp;<a href=\"https://www.tutorialspoint.com/bootstrap/bootstrap_tab_plugin.htm\">Bootstrap Tab Plugin</a>.</li><li>Fading out alerts. You can find an example in the chapter&nbsp;<a href=\"https://www.tutorialspoint.com/bootstrap/bootstrap_alerts.htm\">Bootstrap Alerts</a>.</li><li>Sliding carousel panes. You can find an example in the chapter&nbsp;<a href=\"https://www.tutorialspoint.com/bootstrap/bootstrap_carousel_plugin.htm\">Bootstrap Carousel Plugin</a>.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The transition plugin provides a simple transition effects. If you want to include this plugin functionality individually, then you will need&nbsp;transition.js&nbsp;once alongside the other JS files. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include&nbsp;bootstrap.js&nbsp;or the minified&nbsp;bootstrap.min.js. Transition.js&nbsp;is a basic helper for transitionEnd events as well as a CSS transition emulator. It is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2901"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2901"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2901/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2901"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2901"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2901"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2902,
    "date": "2020-08-20T07:32:52",
    "date_gmt": "2020-08-20T07:32:52",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=252"
    },
    "modified": "2020-08-20T07:32:52",
    "modified_gmt": "2020-08-20T07:32:52",
    "slug": "bootstrap-modal-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-modal-plugin/",
    "title": {
      "rendered": "Modal Plugin"
    },
    "content": {
      "rendered": "\n<p>A modal is a child window that is layered over its parent window. Typically, the purpose is to display content from a separate source that can have some interaction without leaving the parent window. Child windows can provide information, interaction, or more.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need&nbsp;<strong>modal.js</strong>. Else, as mentioned in the chapter&nbsp;<a href=\"https://www.tutorialspoint.com/bootstrap/bootstrap_plugins_overview.htm\">Bootstrap Plugins Overview</a>, you can include&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>You can toggle the modal plugin&#8217;s hidden content −</p>\n\n\n\n<ul><li><strong>Via data attributes</strong>&nbsp;− Set attribute&nbsp;<strong>data-toggle = &#8220;modal&#8221;</strong>&nbsp;on a controller element, like a button or link, along with a&nbsp;<strong>data-target = &#8220;#identifier&#8221;</strong>&nbsp;or&nbsp;<strong>href = &#8220;#identifier&#8221;</strong>&nbsp;to target a specific modal (with the id = &#8220;identifier&#8221;) to toggle.</li><li><strong>Via JavaScript</strong>&nbsp;− Using this technique you can call a modal with id = &#8220;identifier&#8221; with a single line of JavaScript −</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">$('#identifier').modal(options)\n</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>A static modal window example is shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h2>Example of creating Modals with Twitter Bootstrap&lt;/h2>\n\n&lt;!-- Button trigger modal -->\n&lt;button class = \"btn btn-primary btn-lg\" data-toggle = \"modal\" data-target = \"#myModal\">\n   Launch demo modal\n&lt;/button>\n\n&lt;!-- Modal -->\n&lt;div class = \"modal fade\" id = \"myModal\" tabindex = \"-1\" role = \"dialog\" \n   aria-labelledby = \"myModalLabel\" aria-hidden = \"true\">\n   \n   &lt;div class = \"modal-dialog\">\n      &lt;div class = \"modal-content\">\n         \n         &lt;div class = \"modal-header\">\n            &lt;button type = \"button\" class = \"close\" data-dismiss = \"modal\" aria-hidden = \"true\">\n                  &amp;times;\n            &lt;/button>\n            \n            &lt;h4 class = \"modal-title\" id = \"myModalLabel\">\n               This Modal title\n            &lt;/h4>\n         &lt;/div>\n         \n         &lt;div class = \"modal-body\">\n            Add some text here\n         &lt;/div>\n         \n         &lt;div class = \"modal-footer\">\n            &lt;button type = \"button\" class = \"btn btn-default\" data-dismiss = \"modal\">\n               Close\n            &lt;/button>\n            \n            &lt;button type = \"button\" class = \"btn btn-primary\">\n               Submit changes\n            &lt;/button>\n         &lt;/div>\n         \n      &lt;/div>&lt;!-- /.modal-content -->\n   &lt;/div>&lt;!-- /.modal-dialog -->\n  \n&lt;/div>&lt;!-- /.modal --></code></pre>\n\n\n\n<p><strong>Details of the preceding code −</strong></p>\n\n\n\n<ul><li>To invoke the modal window, you need to have some kind of a trigger. You can use a button or a link. Here we have used a button.</li><li>If you look in the code above, you will see that in the &lt;button&gt; tag, the&nbsp;<strong>data-target = &#8220;#myModal&#8221;</strong>&nbsp;is the target of the modal that you want to load on the page. This code allows you to create multiple modals on the page and then have different triggers for each of them. Now, to be clear, you don’t load multiple modals at the same time, but you can create many on the pages to be loaded at different times.</li><li>There are two classes to take note of in the modal −<ul><li>The first is&nbsp;<strong>.modal</strong>, which is simply identifying the content of the &lt;div&gt; as a modal.</li><li>And second is the&nbsp;<strong>.fade</strong>&nbsp;class. When the modal is toggled, it will cause the content to fade in and out.</li></ul></li><li><strong>aria-labelledby = &#8220;myModalLabel&#8221;</strong>, attribute reference the modal title.</li><li>The attribute&nbsp;<strong>aria-hidden = &#8220;true&#8221;</strong>&nbsp;is used to keep the Modal Window invisible till a trigger comes (like a click on the associated button).</li><li>&lt;div class = &#8220;modal-header&#8221;&gt;, modal-header is the class to define style for the header of the modal window.</li><li><strong>class = &#8220;close&#8221;</strong>, is a CSS class close that sets style for the Close button of the modal window.</li><li><strong>data-dismiss = &#8220;modal&#8221;</strong>, is a custom HTML5 data attribute. Here it is used to close the modal window.</li><li><strong>class = &#8220;modal-body&#8221;</strong>, is a CSS class of Bootstrap CSS to set style for body of the modal window.</li><li><strong>class = &#8220;modal-footer&#8221;</strong>, is a CSS class of Bootstrap CSS to set style for footer of the modal window.</li><li><strong>data-toggle = &#8220;modal&#8221;</strong>, HTML5 custom data attribute data-toggle is used to open the modal window.</li></ul>\n\n\n\n<h2>Options</h2>\n\n\n\n<p>There are certain options which can be passed via data attributes or JavaScript to customize the look and feel of the Modal Window. Following table lists the options −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Option Name</th><th>Type/Default Value</th><th>Data attribute name</th><th>Description</th></tr><tr><td>backdrop</td><td>boolean or the string &#8216;static&#8217;&nbsp;<em>Default: true</em></td><td>data-backdrop</td><td>Specify static for a backdrop, if you don’t want the modal to be closed when the user clicks outside of the modal.</td></tr><tr><td>keyboard</td><td>boolean&nbsp;<em>Default: true</em></td><td>data-keyboard</td><td>Closes the modal when escape key is pressed; set to false to disable.</td></tr><tr><td>show</td><td>boolean&nbsp;<em>Default: true</em></td><td>data-show</td><td>Shows the modal when initialized.</td></tr><tr><td>remote</td><td>path&nbsp;<em>Default: false</em></td><td>data-remote</td><td>Using the jQuery&nbsp;<em>.load</em>&nbsp;method, inject content into the modal body. If an href with a valid URL is added, it will load that content. An example of this is shown below −&lt;a data-toggle = &#8220;modal&#8221; href = &#8220;remote.html&#8221; data-target = &#8220;#modal&#8221;&gt;Click me&lt;/a&gt;</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>Here are some useful methods that can be used with modal().</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th><th>Example</th></tr><tr><td><strong>Options</strong>&nbsp;− .modal(options)</td><td>Activates your content as a modal. Accepts an optional options object.</td><td>$(&#8216;#identifier&#8217;).modal({ keyboard: false })</td></tr><tr><td><strong>Toggle</strong>&nbsp;− .modal(&#8216;toggle&#8217;)</td><td>Manually toggles a modal.</td><td>$(&#8216;#identifier&#8217;).modal(&#8216;toggle&#8217;)</td></tr><tr><td><strong>Show</strong>&nbsp;− .modal(&#8216;show&#8217;)</td><td>Manually opens a modal.</td><td>$(&#8216;#identifier&#8217;).modal(&#8216;show&#8217;)</td></tr><tr><td><strong>Hide</strong>&nbsp;− .modal(&#8216;hide&#8217;)</td><td>Manually hides a modal.</td><td>$(&#8216;#identifier&#8217;).modal(&#8216;hide&#8217;)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage of methods −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h2>Example of using methods of Modal Plugin&lt;/h2>\n\n&lt;!-- Button trigger modal -->\n&lt;button class = \"btn btn-primary btn-lg\" data-toggle = \"modal\" data-target = \"#myModal\">\n   Launch demo modal\n&lt;/button>\n\n&lt;!-- Modal -->\n&lt;div class = \"modal fade\" id = \"myModal\" tabindex = \"-1\" role = \"dialog\" \n   aria-labelledby = \"myModalLabel\" aria-hidden = \"true\">\n   \n   &lt;div class = \"modal-dialog\">\n      &lt;div class = \"modal-content\">\n         \n         &lt;div class = \"modal-header\">\n            &lt;button type = \"button\" class = \"close\" data-dismiss = \"modal\" aria-hidden = \"true\">\n               ×\n            &lt;/button>\n            \n            &lt;h4 class = \"modal-title\" id = \"myModalLabel\">\n               This Modal title\n            &lt;/h4>\n         &lt;/div>\n         \n         &lt;div class = \"modal-body\">\n            Press ESC button to exit.\n         &lt;/div>\n         \n         &lt;div class = \"modal-footer\">\n            &lt;button type = \"button\" class = \"btn btn-default\" data-dismiss = \"modal\">\n               Close\n            &lt;/button>\n            \n            &lt;button type = \"button\" class = \"btn btn-primary\">\n               Submit changes\n            &lt;/button>\n         &lt;/div>\n         \n      &lt;/div>&lt;!-- /.modal-content -->\n   &lt;/div>&lt;!-- /.modal-dialog -->\n   \n&lt;/div>&lt;!-- /.modal -->\n\n&lt;script>\n   $(function () { $('#myModal').modal({\n      keyboard: true\n   })});\n&lt;/script></code></pre>\n\n\n\n<p>Just click the Esc button and the modal window exits.</p>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>Following table lists the events to work with modal. These events may be used to hook into the function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th><th>Example</th></tr><tr><td>show.bs.modal</td><td>Fired after the show method is called.</td><td>$(&#8216;#identifier&#8217;).on(&#8216;show.bs.modal&#8217;, function () { // do something… })</td></tr><tr><td>shown.bs.modal</td><td>Fired when the modal has been made visible to the user (will wait for CSS transitions to complete).</td><td>$(&#8216;#identifier&#8217;).on(&#8216;shown.bs.modal&#8217;, function () { // do something… })</td></tr><tr><td>hide.bs.modal</td><td>Fired when the hide instance method has been called.</td><td>$(&#8216;#identifier&#8217;).on(&#8216;hide.bs.modal&#8217;, function () { // do something… })</td></tr><tr><td>hidden.bs.modal</td><td>Fired when the modal has finished being hidden from the user.</td><td>$(&#8216;#identifier&#8217;).on(&#8216;hidden.bs.modal&#8217;, function () { // do something… })</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage of events −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h2>Example of using events of Modal Plugin&lt;/h2>\n\n&lt;!-- Button trigger modal -->\n&lt;button class = \"btn btn-primary btn-lg\" data-toggle = \"modal\" data-target = \"#myModal\">\n   Launch demo modal\n&lt;/button>\n\n&lt;!-- Modal -->\n&lt;div class = \"modal fade\" id = \"myModal\" tabindex = \"-1\" role = \"dialog\" \n   aria-labelledby = \"myModalLabel\" aria-hidden = \"true\">\n   \n   &lt;div class = \"modal-dialog\">\n      &lt;div class = \"modal-content\">\n         \n         &lt;div class = \"modal-header\">\n            &lt;button type = \"button\" class = \"close\" data-dismiss = \"modal\" aria-hidden = \"true\">\n               ×\n            &lt;/button>\n            \n            &lt;h4 class = \"modal-title\" id = \"myModalLabel\">\n               This Modal title\n            &lt;/h4>\n         &lt;/div>\n         \n         &lt;div class = \"modal-body\">\n            Click on close button to check Event functionality.\n         &lt;/div>\n         \n         &lt;div class = \"modal-footer\">\n            &lt;button type = \"button\" class = \"btn btn-default\" data-dismiss = \"modal\">\n               Close\n            &lt;/button>\n            \n            &lt;button type = \"button\" class = \"btn btn-primary\">\n               Submit changes\n            &lt;/button>\n         &lt;/div>\n         \n      &lt;/div>&lt;!-- /.modal-content -->\n   &lt;/div>&lt;!-- /.modal-dialog -->\n   \n&lt;/div>&lt;!-- /.modal -->\n\n&lt;script>\n   $(function () { $('#myModal').modal('hide')})});\n&lt;/script>\n\n&lt;script>\n   $(function () { $('#myModal').on('hide.bs.modal', function () {\n      alert('Hey, I heard you like modals...');})\n   });\n&lt;/script></code></pre>\n\n\n\n<p>As seen in the above screen, if you click on the&nbsp;<em>Close</em>&nbsp;button i.e&nbsp;<em>hide</em>&nbsp;event, an alert message is displayed.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A modal is a child window that is layered over its parent window. Typically, the purpose is to display content from a separate source that can have some interaction without leaving the parent window. Child windows can provide information, interaction, or more. If you want to include this plugin functionality individually, then you will need&nbsp;modal.js. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2902"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2902"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2902/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2902"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2902"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2902"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4112,
    "date": "2020-08-20T07:34:16",
    "date_gmt": "2020-08-20T07:34:16",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=254"
    },
    "modified": "2020-08-20T07:34:16",
    "modified_gmt": "2020-08-20T07:34:16",
    "slug": "bootstrap-dropdown-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-dropdown-plugin/",
    "title": {
      "rendered": "Dropdown Plugin"
    },
    "content": {
      "rendered": "\n<p>Using Dropdown plugin you can add dropdown menus to any components like navbars, tabs, pills and buttons.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need&nbsp;<strong>dropdown.js</strong>. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>You can toggle the dropdown plugin&#8217;s hidden content −</p>\n\n\n\n<ul><li><strong>Via data attributes</strong> − Add <strong>data-toggle = &#8220;dropdown&#8221;</strong> to a link or button to toggle a dropdown as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"dropdown\">\n   &lt;a data-toggle = \"dropdown\" href = \"#\">Dropdown trigger&lt;/a>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"dLabel\">\n      ...\n   &lt;/ul>\n\t\n&lt;/div></code></pre>\n\n\n\n<ul><li>If you need to keep links intact (which is useful if the browser is not enabling JavaScript), use the <strong>data-target</strong> attribute instead of <strong>href = &#8220;#&#8221;</strong>−</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"dropdown\">\n   &lt;a id = \"dLabel\" role = \"button\" data-toggle = \"dropdown\" data-target = \"#\" href = \"/page.html\">\n      Dropdown \n      &lt;span class = \"caret\">&lt;/span>\n   &lt;/a>\n   \n   &lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"dLabel\">\n      ...\n   &lt;/ul>\n\t\n&lt;/div></code></pre>\n\n\n\n<ul><li><strong>Via JavaScript</strong>&nbsp;− To call the dropdown toggle via JavaScript, use the following method −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('.dropdown-toggle').dropdown()\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Within Navbar</strong></p>\n\n\n\n<p>The following example demonstrates the usage of dropdown menu within a navbar −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n\n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">TutorialsPoint&lt;/a>\n   &lt;/div>\n   \n   &lt;div>\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n         \n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java \n               &lt;b class=\"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n   \n&lt;/nav></code></pre>\n\n\n\n<p><strong>Within Tabs</strong></p>\n\n\n\n<p>The following example demonstrates the usage of dropdown menu within tabs −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Tabs With Dropdown Example&lt;/p>\n\n&lt;ul class = \"nav nav-tabs\">\n   &lt;li class = \"active\">&lt;a href = \"#\">Home&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n   &lt;li>&lt;a href = \"#\">VB.Net&lt;/a>&lt;/li>\n   \n   &lt;li class = \"dropdown\">\n      &lt;a class = \"dropdown-toggle\" data-toggle = \"dropdown\" href = \"#\">\n         Java \n         &lt;span class = \"caret\">&lt;/span>\n      &lt;/a>\n      \n      &lt;ul class = \"dropdown-menu\">\n         &lt;li>&lt;a href = \"#\">Swing&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">jMeter&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n         \n         &lt;li class = \"divider\">&lt;/li>\n         &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n      &lt;/ul>\n      \n   &lt;/li>\n\t\n   &lt;li>&lt;a href = \"#\">PHP&lt;/a>&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<p><em>There are no options.</em></p>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The dropdown toggle has a simple method to show or hide the dropdown.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$().dropdown('toggle')\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage of dropdown plugin method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class = \"navbar navbar-default\" role = \"navigation\">\n   &lt;div class = \"navbar-header\">\n      &lt;a class = \"navbar-brand\" href = \"#\">TutorialsPoint&lt;/a>\n   &lt;/div>\n\n   &lt;div id = \"myexample\">\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">SVN&lt;/a>&lt;/li>\n\t\t\t\n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" class = \"dropdown-toggle\">Java &lt;b class = \"caret\">&lt;/b>&lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\">\n               &lt;li>&lt;a id = \"action-1\" href = \"#\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">EJB&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jasper Report&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">Separated link&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#\">One more separated link&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n\t\t\t\n      &lt;/ul>\n   &lt;/div>\n   \n&lt;/nav>\n\n&lt;script>\n   $(function(){\n      $(\".dropdown-toggle\").dropdown('toggle');\n   }); \n&lt;/script></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Using Dropdown plugin you can add dropdown menus to any components like navbars, tabs, pills and buttons. If you want to include this plugin functionality individually, then you will need&nbsp;dropdown.js. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include&nbsp;bootstrap.js&nbsp;or the minified&nbsp;bootstrap.min.js. Usage You can toggle the dropdown plugin&#8217;s hidden content − Via data [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4112"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4112"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4112/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4112"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4112"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4112"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2904,
    "date": "2020-08-20T07:35:28",
    "date_gmt": "2020-08-20T07:35:28",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=256"
    },
    "modified": "2020-08-20T07:35:28",
    "modified_gmt": "2020-08-20T07:35:28",
    "slug": "bootstrap-scrollspy-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-scrollspy-plugin/",
    "title": {
      "rendered": "Scrollspy Plugin"
    },
    "content": {
      "rendered": "\n<p>The Scroll spy (auto updating nav) plugin allows you to target sections of the page based on the scroll position. In its basic implementation, as you scroll, you can add&nbsp;<strong>.active</strong>&nbsp;classes to the navbar based on the scroll position.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need&nbsp;<strong>scrollspy.js</strong>. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>You can add scrollspy behavior to your topbar navigation −</p>\n\n\n\n<ul><li><strong>Via data attributes</strong> − add <strong>data-spy = &#8220;scroll&#8221;</strong> to the element you want to spy on (typically the body). Then add attribute <strong>data-target</strong> with the ID or class of the parent element of any Bootstrap <strong>.nav</strong> component. For this to work, you must have elements in the body of the page that have matching IDs of the links that you are spying on.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;body data-spy = \"scroll\" data-target = \".navbar-example\">\n   ...\n   &lt;div class = \"navbar-example\">\n      &lt;ul class = \"nav nav-tabs\">\n         ...\n      &lt;/ul>\n   &lt;/div>\n   ...\n&lt;/body></code></pre>\n\n\n\n<ul><li><strong>Via JavaScript</strong>&nbsp;− You can invoke the scrollspy with JavaScript instead of using the data attributes, by selecting the element to spy on, and then invoking the&nbsp;<strong>.scrollspy()</strong>&nbsp;function −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('body').scrollspy({ target: '.navbar-example' })\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows the use of scrollspy plugin via data attributes −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav id = \"navbar-example\" class = \"navbar navbar-default navbar-static\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;button class = \"navbar-toggle\" type = \"button\" data-toggle = \"collapse\" \n         data-target = \".bs-js-navbar-scrollspy\">\n         &lt;span class = \"sr-only\">Toggle navigation&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n      &lt;/button>\n\t\t\n      &lt;a class = \"navbar-brand\" href = \"#\">Tutorial Name&lt;/a>\n   &lt;/div>\n   \n   &lt;div class = \"collapse navbar-collapse bs-js-navbar-scrollspy\">\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li>&lt;a href = \"#ios\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#svn\">SVN&lt;/a>&lt;/li>\n         \n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" id = \"navbarDrop1\" class = \"dropdown-toggle\" data-toggle = \"dropdown\">\n               Java\n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"navbarDrop1\">\n               &lt;li>&lt;a href = \"#jmeter\" tabindex = \"-1\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#ejb\" tabindex = \"-1\">ejb&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#spring\" tabindex = \"-1\">spring&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n   \n&lt;/nav>\n\n&lt;div data-spy = \"scroll\" data-target = \"#navbar-example\" data-offset = \"0\" \n   style = \"height:200px; overflow:auto; position: relative;\">\n   &lt;h4 id = \"ios\">iOS&lt;/h4>\n\t\n   &lt;p>iOS is a mobile operating system developed and distributed by Apple \n      Inc. Originally released in 2007 for the iPhone, iPod Touch, and Apple \n      TV. iOS is derived from OS X, with which it shares the Darwin \n      foundation. iOS is Apple's mobile version of the OS X operating system \n      used on Apple computers.&lt;/p>\n   \n   &lt;h4 id = \"svn\">SVN&lt;/h4>\n   \n   &lt;p>Apache Subversion which is often abbreviated as SVN, is a software \n      versioning and revision control system distributed under an open source \n      license. Subversion was created by CollabNet Inc. in 2000, but now it \n      is developed as a project of the Apache Software Foundation, and as \n      such is part of a rich community of developers and users.&lt;/p>\n   \n   &lt;h4 id = \"jmeter\">jMeter&lt;/h4>\n   \n   &lt;p>jMeter is an Open Source testing software. It is 100% pure Java \n      application for load and performance testing.&lt;/p>\n   \n   &lt;h4 id = \"ejb\">EJB&lt;/h4>\n   \n   &lt;p>Enterprise Java Beans (EJB) is a development architecture for building \n      highly scalable and robust enterprise level applications to be deployed \n      on J2EE compliant Application Server such as JBOSS, Web Logic etc.&lt;/p>\n   \n   &lt;h4 id = \"spring\">Spring&lt;/h4>\n   \n   &lt;p>Spring framework is an open source Java platform that provides \n      comprehensive infrastructure support for developing robust Java \n      applications very easily and very rapidly.&lt;/p>\n   \n   &lt;p>Spring framework was initially written by Rod Johnson and was first \n      released under the Apache 2.0 license in June 2003.&lt;/p>\n   \n&lt;/div></code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<p>Options can be passed via data attributes or JavaScript. Following table lists the options −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Option Name</th><th>Type/Default Value</th><th>Data attribute name</th><th>Description</th></tr><tr><td>offset</td><td>number&nbsp;<em>Default: 10</em></td><td>data-offset</td><td>Pixels to offset from top when calculating position of scroll.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p><strong>.scrollspy(&#8216;refresh&#8217;)</strong>&nbsp;− When calling the scrollspy via the JavaScript method, you need to call the&nbsp;<strong>.refresh</strong>&nbsp;method to update the DOM. This is helpful if any elements of the DOM have changed i.e if you have added or removed some elements. Following would be the syntax to use this method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$('&#91;data-spy = \"scroll\"]').each(function () {\n   var $spy = $(this).scrollspy('refresh')\n})</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of <strong>.scrollspy(&#8216;refresh&#8217;)</strong> method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav id = \"myScrollspy\" class = \"navbar navbar-default navbar-static\" role = \"navigation\">\n   \n   &lt;div class = \"navbar-header\">\n      &lt;button class = \"navbar-toggle\" type = \"button\" data-toggle = \"collapse\" \n         data-target = \".bs-js-navbar-scrollspy\">\n         &lt;span class = \"sr-only\">Toggle navigation&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n         &lt;span class = \"icon-bar\">&lt;/span>\n      &lt;/button>\n\t\t\n      &lt;a class = \"navbar-brand\" href = \"#\">Tutorial Name&lt;/a>\n   &lt;/div>\n   \n   &lt;div class = \"collapse navbar-collapse bs-js-navbar-scrollspy\">\n      &lt;ul class = \"nav navbar-nav\">\n         &lt;li class = \"active\">&lt;a href = \"#ios\">iOS&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#svn\">SVN&lt;/a>&lt;/li>\n         \n         &lt;li class = \"dropdown\">\n            &lt;a href = \"#\" id = \"navbarDrop1\" class = \"dropdown-toggle\" data-toggle  = \"dropdown\">\n               Java \n               &lt;b class = \"caret\">&lt;/b>\n            &lt;/a>\n            \n            &lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"navbarDrop1\">\n               &lt;li>&lt;a href = \"#jmeter\" tabindex = \"-1\">jmeter&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#ejb\" tabindex = \"-1\">ejb&lt;/a>&lt;/li>\n               \n               &lt;li class = \"divider\">&lt;/li>\n               &lt;li>&lt;a href = \"#spring\" tabindex = \"-1\">spring&lt;/a>&lt;/li>\n            &lt;/ul>\n            \n         &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n   \n&lt;/nav>\n\n&lt;div data-spy = \"scroll\" data-target = \"#myScrollspy\" data-offset = \"0\"  \n   style = \"height:200px; overflow:auto; position: relative;\">\n   \n   &lt;div class = \"section\">\n      &lt;h4 id = \"ios\">iOS&lt;small>&lt;a href = \"#\" onclick = \"removeSection(this);\">\n         &amp;times; Remove this section&lt;/a>&lt;/small>\n      &lt;/h4>\n      \n      &lt;p>iOS is a mobile operating system developed and distributed by \n         Apple Inc. Originally released in 2007 for the iPhone, iPod Touch, and \n         Apple TV. iOS is derived from OS X, with which it shares the Darwin \n         foundation. iOS is Apple's mobile version of the OS X operating system\n         used on Apple computers.&lt;/p>\n   &lt;/div>\n   \n   &lt;div class = \"section\">\n      &lt;h4 id = \"svn\">SVN&lt;small>&lt;/small>&lt;/h4>\n      &lt;p>Apache Subversion which is often abbreviated as SVN, is a software \n         versioning and revision control system distributed under an open source \n         license. Subversion was created by CollabNet Inc. in 2000, but \n         now it is developed as a project of the Apache Software Foundation, \n         and as such is part of a rich community of developers and users.&lt;/p>\n   &lt;/div>\n   \n   &lt;div class = \"section\">\n      &lt;h4 id = \"jmeter\">jMeter&lt;small>&lt;a href = \"#\" onclick = \"removeSection(this);\">\n         &amp;times; Remove this section&lt;/a>&lt;/small>\n      &lt;/h4>\n      \n      &lt;p>jMeter is an Open Source testing software. It is 100% pure Java \n         application for load and performance testing.&lt;/p>\n   &lt;/div>\n   \n   &lt;div class = \"section\">\n      &lt;h4 id = \"ejb\">EJB&lt;/h4>\n      \n      &lt;p>Enterprise Java Beans (EJB) is a development architecture for \n         building highly scalable and robust enterprise level applications \n         to be deployed on J2EE compliant Application Server such as \n         JBOSS, Web Logic etc.&lt;/p>\n   &lt;/div>\n\t\n   &lt;div class = \"section\">\n      &lt;h4 id = \"spring\">Spring&lt;/h4>\n      \n      &lt;p>Spring framework is an open source Java platform that provides \n         comprehensive infrastructure support for developing robust Java \n         applications very easily and very rapidly.&lt;/p>\n      \n      &lt;p>Spring framework was initially written by Rod Johnson and was first \n         released under the Apache 2.0 license in June 2003.&lt;/p>\n   &lt;/div>\n   \n&lt;/div>\n\n&lt;script type = \"text/javascript\">\n   $(function(){\n      removeSection = function(e) {\n         $(e).parents(\".section\").remove();\n         \n         $('&#91;data-spy = \"scroll\"]').each(function () {\n            var $spy = $(this).scrollspy('refresh')\n         });\n      }\n      $(\"#myScrollspy\").scrollspy();\n   });\n&lt;/script></code></pre>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>The following table lists the events to work with scrollspy. This event may be used to hook into the function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th><th>Example</th></tr><tr><td>activate.bs.scrollspy</td><td>This event fires whenever a new item becomes activated by the scrollspy.</td><td>$(&#8216;#myScrollspy&#8217;).on(&#8216;activate.bs.scrollspy&#8217;, function () { // do something… })</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of <strong>activate.bs.scrollspy</strong> event −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;link rel = \"stylesheet\" href = \"bootstrap/css/bootstrap.min.css\">\n      &lt;script src = \"bootstrap/scripts/jquery.min.js\">&lt;/script>\n      &lt;script src = \"bootstrap/js/bootstrap.min.js\">&lt;/script>\n      \n      &lt;script>\n         $(document).ready(function(){\n            removeSection = function(e) {\n               $(e).parents(\".subject\").remove();\n            \n               $('&#91;data-spy=\"scroll\"]').each(function () {\n                  var $spy = $(this).scrollspy('refresh')\n               });\n            }\n         \n            $(\"#Navexample\").scrollspy();\n         \n            // The event is fired when an item gets actived with the scrollspy\n            $(\"#Navexample\").on('activate.bs.scrollspy', function () {\n               var currentSection = $(\".nav li.active > a\").text();\n               $(\"#spyevent\").html(\"Current Item being viewed >> \" + currentSection);\n            })\n\t\t\t\t\n         });\n      &lt;/script>\n   \n      &lt;style>\n         .scroll-box {\n            height: 250px;\n            position: relative;\n            overflow: auto;\n            font-size:2em;\n         }\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"container\">\n         &lt;nav id = \"Navexample\" class = \"navbar navbar-default\" role = \"navigation\">\n      \n            &lt;!-- Nav Bar -->\n            &lt;div class = \"navbar-header\">\n               &lt;button type = \"button\" class = \"navbar-toggle\" \n                  data-toggle = \"collapse\" data-target = \"#navbarCollapse\">\n               \n                  &lt;span class = \"sr-only\">Toggle navigation&lt;/span>\n                  &lt;span class = \"icon-bar\">&lt;/span>\n                  &lt;span class = \"icon-bar\">&lt;/span>\n                  &lt;span class = \"icon-bar\">&lt;/span>\n               &lt;/button>\n\t\t\t\t\t\n               &lt;a class = \"navbar-brand\" href = \"#\">Tutorials Point&lt;/a>\n            &lt;/div>\n            \n            &lt;!-- Links and Sublinks -->\n            &lt;div class = \"collapse navbar-collapse\" id = \"navbarCollapse\">\n               &lt;ul class = \"nav navbar-nav\">\n                  &lt;li class = \"active\">&lt;a href = \"#subject-1\">Subject 1&lt;/a>&lt;/li>\n                  &lt;li>&lt;a href = \"#subject-2\">Subject 2&lt;/a>&lt;/li>\n               \n                  &lt;li class = \"dropdown\">&lt;a href = \"#\" class = \"dropdown-toggle\" \n                     data-toggle = \"dropdown\">Subject 3&lt;b class = \"caret\">&lt;/b>&lt;/a>\n                     \n                     &lt;ul class = \"dropdown-menu\">\n                        &lt;li>&lt;a href = \"#subject-3-1\">Subject 3.1&lt;/a>&lt;/li>\n                        &lt;li>&lt;a href = \"#subject-3-2\">Subject 3.2&lt;/a>&lt;/li>\n                        &lt;li>&lt;a href = \"#subject-3-3\">Subject 3.3&lt;/a>&lt;/li>\n                     &lt;/ul>\n                     \n                  &lt;/li>\n\t\t\t\t\t\t\n                  &lt;li>&lt;a href = \"#subject-4\">Subject 4&lt;/a>&lt;/li>\n               &lt;/ul>\n            &lt;/div>\n            \n         &lt;/nav>\n         \n         &lt;div class = \"scroll-box\" data-spy = \"scroll\" data-offset = \"0\">\n            &lt;div class = \"subject\">\n            \n               &lt;h3 id = \"subject-1\">Subject 1 \n                  &lt;small>&lt;a href = \"#\" onclick = \"removeSubject(this);\">Remove Subject ×&lt;/a>&lt;/small>\n               &lt;/h3>\n            \n               &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna\n                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                  ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>\n            &lt;/div>\n\t\t\t\t\n            &lt;hr>\n         \n            &lt;div class = \"subject\">\n               &lt;h3 id = \"subject-2\">Subject 2 \n                  &lt;small>&lt;a href = \"#\" onclick = \"removeSubject(this);\">Remove Subject ×&lt;/a>&lt;/small>\n               &lt;/h3>\n            \n               &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna\n                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                  ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>\n            &lt;/div>\n\t\t\t\t\n            &lt;hr>\n         \n            &lt;div class = \"subject\">\n               &lt;h3 id = \"subject-3\">Subject 3 \n                  &lt;small>&lt;a href = \"#\" onclick = \"removeSubject(this);\"> Remove Subject ×&lt;/a>&lt;/small>\n               &lt;/h3>\n            \n               &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna\n                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                  ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>&lt;\n            &lt;/div>\n\t\t\t\t\n            &lt;hr>\n            \n            &lt;div class = \"subject\">\n               &lt;h4 id = \"subject-3-1\">Subject 3.1\n                  &lt;small>&lt;a href = \"#\" onclick = \"removeSubject(this);\"> Remove Subject ×&lt;/a>&lt;/small>\n               &lt;/h4>\n               \n               &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna\n                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                  ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>\n            &lt;/div>\n            \n            &lt;div class = \"subject\">\n               &lt;h4 id = \"subject-3-2\">Subject 3.2\n                  &lt;small>&lt;a href = \"#\" onclick = \"removeSubject(this);\"> Remove Subject ×&lt;/a>&lt;/small>\n               &lt;/h4>\n               \n               &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna\n                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                  ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>\n            &lt;/div>\n            \n            &lt;div class = \"subject\">\n               &lt;h4 id = \"subject-3-3\">Subject 3.3 \n                  &lt;small>&lt;a href = \"#\" onclick = \"removeSubject(this);\">Remove Subject ×&lt;/a>&lt;/small>\n               &lt;/h4>\n               \n               &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna\n                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                  ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>\n            &lt;/div>\n\t\t\t\t\n            &lt;hr>\n            \n            &lt;div class = \"subject\">\n               &lt;h3 id = \"subject-4\">Subject 4 \n                  &lt;small>&lt;a href = \"#\" onclick = \"removeSubject(this);\">Remove Subject ×&lt;/a>&lt;/small>\n               &lt;/h3>\n               \n               &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna\n                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                  ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p>\n            &lt;/div>\n            \n         &lt;/div>\n         &lt;hr>\n         \n         &lt;h4 id = \"spyevent\" class = \"text-info\">&lt;/h4>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Scroll spy (auto updating nav) plugin allows you to target sections of the page based on the scroll position. In its basic implementation, as you scroll, you can add&nbsp;.active&nbsp;classes to the navbar based on the scroll position. If you want to include this plugin functionality individually, then you will need&nbsp;scrollspy.js. Else, as mentioned in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2904"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2904"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2904/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2904"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2904"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2904"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4113,
    "date": "2020-08-20T07:37:19",
    "date_gmt": "2020-08-20T07:37:19",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=258"
    },
    "modified": "2020-08-20T07:37:19",
    "modified_gmt": "2020-08-20T07:37:19",
    "slug": "bootstrap-tab-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-tab-plugin/",
    "title": {
      "rendered": "Tab Plugin"
    },
    "content": {
      "rendered": "\n<p>Tabs were introduced in the chapter Bootstrap Navigation Elements. By combining a few data attributes, you can easily create a tabbed interface. With this plug-in you can transition through panes of local content in tabs or pills, even via drop down menus.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need <strong>tab.js</strong>. Else, as mentioned in the chapter Bootstrap Plugins Overview, you can include <em>bootstrap.js</em> or the minified <em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>You can enable tabs in the following two ways −</p>\n\n\n\n<ul><li><strong>Via data attributes</strong>&nbsp;− you need to add&nbsp;<strong>data-toggle = &#8220;tab&#8221;</strong>&nbsp;or&nbsp;<strong>data-toggle = &#8220;pill&#8221;</strong>&nbsp;to the anchors.Adding the&nbsp;<strong>nav</strong>&nbsp;and&nbsp;<strong>nav-tabs</strong>&nbsp;classes to the tab&nbsp;<strong>ul</strong>&nbsp;will apply the Bootstrap&nbsp;<a href=\"https://www.tutorialspoint.com/bootstrap/bootstrap_navigation_elements.htm\">tab styling</a>, while adding the&nbsp;<strong>nav</strong>&nbsp;and&nbsp;<strong>nav-pills</strong>&nbsp;classes will apply&nbsp;<a href=\"https://www.tutorialspoint.com/bootstrap/bootstrap_navigation_elements.htm\">pill styling</a>.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&amp;lt;ul class = \"nav nav-tabs\"&amp;gt;\n   &amp;lt;li&amp;gt;&amp;lt;a href = \"#identifier\" data-toggle = \"tab\"&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n   ...\n&amp;lt;/ul&amp;gt;</code></pre>\n\n\n\n<ul><li><strong>Via JavaScript</strong>&nbsp;− you can enable tabs using Javscript as below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('#myTab a').click(function (e) {\n   e.preventDefault()\n   $(this).tab('show')\n})</code></pre>\n\n\n\n<ul><li>Here’s an example of different ways to activate individual tabs −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>// Select tab by name\n$('#myTab a&#91;href = \"#profile\"]').tab('show')\n \n// Select first tab\n$('#myTab a:first').tab('show') \n\n// Select last tab\n$('#myTab a:last').tab('show') \n\n// Select third tab (0-indexed)\n$('#myTab li:eq(2) a').tab('show') \n</code></pre>\n\n\n\n<h2>Fade Effect</h2>\n\n\n\n<p>To get a fade effect for tabs, add&nbsp;<strong>.fade</strong>&nbsp;to each&nbsp;<strong>.tab-pane</strong>. The first tab pane must also have&nbsp;<strong>.in</strong>&nbsp;to properly fade in initial content −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&amp;lt;div class = \"tab-content\"&amp;gt;\n   &amp;lt;div class = \"tab-pane fade in active\" id = \"home\"&amp;gt;...&amp;lt;/div&amp;gt;\n   &amp;lt;div class = \"tab-pane fade\" id = \"svn\"&amp;gt;...&amp;lt;/div&amp;gt;\n   &amp;lt;div class = \"tab-pane fade\" id = \"ios\"&amp;gt;...&amp;lt;/div&amp;gt;\n   &amp;lt;div class = \"tab-pane fade\" id = \"java\"&amp;gt;...&amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>An example of tab plugin using data attributes and fade effect is as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&amp;lt;ul id = \"myTab\" class = \"nav nav-tabs\"&amp;gt;\n   &amp;lt;li class = \"active\"&amp;gt;\n      &amp;lt;a href = \"#home\" data-toggle = \"tab\"&amp;gt;\n         Tutorial Point Home\n      &amp;lt;/a&amp;gt;\n   &amp;lt;/li&amp;gt;\n   \n   &amp;lt;li&amp;gt;&amp;lt;a href = \"#ios\" data-toggle = \"tab\"&amp;gt;iOS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n\t\n   &amp;lt;li class = \"dropdown\"&amp;gt;\n      &amp;lt;a href = \"#\" id = \"myTabDrop1\" class = \"dropdown-toggle\" data-toggle = \"dropdown\"&amp;gt;\n         Java \n         &amp;lt;b class = \"caret\"&amp;gt;&amp;lt;/b&amp;gt;\n      &amp;lt;/a&amp;gt;\n      \n      &amp;lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"myTabDrop1\"&amp;gt;\n         &amp;lt;li&amp;gt;&amp;lt;a href = \"#jmeter\" tabindex = \"-1\" data-toggle = \"tab\"&amp;gt;jmeter&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n         &amp;lt;li&amp;gt;&amp;lt;a href = \"#ejb\" tabindex = \"-1\" data-toggle = \"tab\"&amp;gt;ejb&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n      &amp;lt;/ul&amp;gt;\n   &amp;lt;/li&amp;gt;\n&amp;lt;/ul&amp;gt;\n\n&amp;lt;div id = \"myTabContent\" class = \"tab-content\"&amp;gt;\n\n   &amp;lt;div class = \"tab-pane fade in active\" id = \"home\"&amp;gt;\n      &amp;lt;p&amp;gt;Tutorials Point is a place for beginners in all technical areas.\n         This website covers most of the latest technologies and explains each of\n         the technology with simple examples.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"ios\"&amp;gt;\n      &amp;lt;p&amp;gt;iOS is a mobile operating system developed and distributed \n         by Apple Inc. Originally released in 2007 for the iPhone, iPod Touch,\n         and Apple TV. iOS is derived from OS X, with which it shares the \n         Darwin foundation. iOS is Apple's mobile version of the OS X \n         operating system used on Apple computers.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"jmeter\"&amp;gt;\n      &amp;lt;p&amp;gt;jMeter is an Open Source testing software. It is 100% pure Java \n         application for load and performance testing.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"ejb\"&amp;gt;\n      &amp;lt;p&amp;gt;Enterprise Java Beans (EJB) is a development architecture for \n         building highly scalable and robust enterprise level applications to be \n         deployed on J2EE compliant Application Server such as JBOSS, Web Logic etc.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n&amp;lt;/div&amp;gt;</code></pre>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p><strong>.$().tab</strong>&nbsp;− This method activates a tab element and content container. Tab should have either a&nbsp;<strong>data-target</strong>&nbsp;or an&nbsp;<strong>href</strong>&nbsp;targeting a container node in the DOM.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&amp;lt;ul class = \"nav nav-tabs\" id = \"myTab\"&amp;gt;\n   &amp;lt;li class = \"active\"&amp;gt;&amp;lt;a href = \"#identifier\" data-toggle = \"tab\"&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n   .....\n&amp;lt;/ul&amp;gt;\n\n&amp;lt;div class = \"tab-content\"&amp;gt;\n   &amp;lt;div class = \"tab-pane active\" id = \"home\"&amp;gt;...&amp;lt;/div&amp;gt;\n   .....\n&amp;lt;/div&amp;gt;\n\n&amp;lt;script&amp;gt;\n   $(function () {\n      $('#myTab a:last').tab('show')\n   })\n&amp;lt;/script&amp;gt;</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows the use of tab plugin method&nbsp;<strong>.tab</strong>. Here in the example the second tab&nbsp;<em>iOS</em>&nbsp;is activated −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&amp;lt;ul id = \"myTab\" class = \"nav nav-tabs\"&amp;gt;\n   &amp;lt;li class = \"active\"&amp;gt;\n      &amp;lt;a href = \"#home\" data-toggle = \"tab\"&amp;gt;\n         Tutorial Point Home\n      &amp;lt;/a&amp;gt;\n   &amp;lt;/li&amp;gt;\n   \n   &amp;lt;li&amp;gt;&amp;lt;a href = \"#ios\" data-toggle = \"tab\"&amp;gt;iOS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n\t\n   &amp;lt;li class = \"dropdown\"&amp;gt;\n\t\n      &amp;lt;a href = \"#\" id = \"myTabDrop1\" class = \"dropdown-toggle\" data-toggle = \"dropdown\"&amp;gt;\n         Java \n         &amp;lt;b class = \"caret\"&amp;gt;&amp;lt;/b&amp;gt;\n      &amp;lt;/a&amp;gt;\n      \n      &amp;lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"myTabDrop1\"&amp;gt;\n         &amp;lt;li&amp;gt;\n            &amp;lt;a href = \"#jmeter\" tabindex = \"-1\" data-toggle = \"tab\"&amp;gt;\n               jmeter\n            &amp;lt;/a&amp;gt;\n         &amp;lt;/li&amp;gt;\n         \n         &amp;lt;li&amp;gt;\n            &amp;lt;a href = \"#ejb\" tabindex = \"-1\" data-toggle = \"tab\"&amp;gt;\n               ejb\n            &amp;lt;/a&amp;gt;\n         &amp;lt;/li&amp;gt;\n      &amp;lt;/ul&amp;gt;\n   &amp;lt;/li&amp;gt;\n&amp;lt;/ul&amp;gt;\n\n&amp;lt;div id = \"myTabContent\" class = \"tab-content\"&amp;gt;\n\n   &amp;lt;div class = \"tab-pane fade in active\" id = \"home\"&amp;gt;\n      &amp;lt;p&amp;gt;Tutorials Point is a place for beginners in all technical areas. \n         This website covers most of the latest technologies and explains each of \n         the technology with simple examples.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"ios\"&amp;gt;\n      &amp;lt;p&amp;gt;iOS is a mobile operating system developed and distributed by \n         Apple Inc. Originally released in 2007 for the iPhone, iPod Touch, and \n         Apple TV. iOS is derived from OS X, with which it shares the Darwin \n         foundation. iOS is Apple's mobile version of the OS X operating system \n         used on Apple computers.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"jmeter\"&amp;gt;\n      &amp;lt;p&amp;gt;jMeter is an Open Source testing software. It is 100% pure Java \n         application for load and performance testing.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"ejb\"&amp;gt;\n      &amp;lt;p&amp;gt;Enterprise Java Beans (EJB) is a development architecture for \n         building highly scalable and robust enterprise level applications to be \n         deployed on J2EE compliant Application Server such as JBOSS, \n         Web Logic etc.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n&amp;lt;/div&amp;gt;\n\n&amp;lt;script&amp;gt;\n   $(function () {\n      $('#myTab li:eq(1) a').tab('show');\n   });\n&amp;lt;/script&amp;gt;</code></pre>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>Following table lists the events to work with tab plugin. This event may be used to hook into the function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th><th>Example</th></tr><tr><td>show.bs.tab</td><td>This event fires on tab show, but before the new tab has been shown. Use&nbsp;<strong>event.target</strong>&nbsp;and&nbsp;<strong>event.relatedTarget</strong>&nbsp;to target the active tab and the previous active tab (if available) respectively.</td><td>$(&#8216;a[data-toggle = &#8220;tab&#8221;]&#8217;).on(&#8216;show.bs.tab&#8217;, function (e) { e.target // activated tab e.relatedTarget // previous tab })</td></tr><tr><td>shown.bs.tab</td><td>This event fires on tab show after a tab has been shown. Use&nbsp;<strong>event.target</strong>&nbsp;and&nbsp;<strong>event.relatedTarget</strong>&nbsp;to target the active tab and the previous active tab (if available) respectively.</td><td>$(&#8216;a[data-toggle = &#8220;tab&#8221;]&#8217;).on(&#8216;shown.bs.tab&#8217;, function (e) { e.target // activated tab e.relatedTarget // previous tab })</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows use of tab plugin events. Here in the example we will display the current and previous visited tabs −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&amp;lt;hr&amp;gt;\n&amp;lt;p class = \"active-tab\"&amp;gt;&amp;lt;strong&amp;gt;Active Tab&amp;lt;/strong&amp;gt;: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;p class = \"previous-tab\"&amp;gt;&amp;lt;strong&amp;gt;Previous Tab&amp;lt;/strong&amp;gt;: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;hr&amp;gt;\n\n&amp;lt;ul id = \"myTab\" class = \"nav nav-tabs\"&amp;gt;\n   &amp;lt;li class = \"active\"&amp;gt;\n      &amp;lt;a href = \"#home\" data-toggle = \"tab\"&amp;gt;\n         Tutorial Point Home\n      &amp;lt;/a&amp;gt;\n   &amp;lt;/li&amp;gt;\n   \n   &amp;lt;li&amp;gt;&amp;lt;a href = \"#ios\" data-toggle = \"tab\"&amp;gt;iOS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n\t\n   &amp;lt;li class = \"dropdown\"&amp;gt;\n      &amp;lt;a href = \"#\" id = \"myTabDrop1\" class = \"dropdown-toggle\" data-toggle = \"dropdown\"&amp;gt;\n         Java \n         &amp;lt;b class = \"caret\"&amp;gt;&amp;lt;/b&amp;gt;\n      &amp;lt;/a&amp;gt;\n      \n      &amp;lt;ul class = \"dropdown-menu\" role = \"menu\" aria-labelledby = \"myTabDrop1\"&amp;gt;\n         &amp;lt;li&amp;gt;\n            &amp;lt;a href = \"#jmeter\" tabindex = \"-1\" data-toggle = \"tab\"&amp;gt;jmeter&amp;lt;/a&amp;gt;\n         &amp;lt;/li&amp;gt;\n         \n         &amp;lt;li&amp;gt;\n            &amp;lt;a href = \"#ejb\" tabindex = \"-1\" data-toggle = \"tab\"&amp;gt;ejb&amp;lt;/a&amp;gt;\n         &amp;lt;/li&amp;gt;\n      &amp;lt;/ul&amp;gt;\n   &amp;lt;/li&amp;gt;\n&amp;lt;/ul&amp;gt;\n\n&amp;lt;div id = \"myTabContent\" class = \"tab-content\"&amp;gt;\n\n   &amp;lt;div class = \"tab-pane fade in active\" id = \"home\"&amp;gt;\n      &amp;lt;p&amp;gt;Tutorials Point is a place for beginners in all technical areas.\n         This website covers most of the latest technologies and explains each of \n         the technology with simple examples.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"ios\"&amp;gt;\n      &amp;lt;p&amp;gt;iOS is a mobile operating system developed and distributed by \n         Apple Inc. Originally released in 2007 for the iPhone, iPod Touch, and \n         Apple TV. iOS is derived from OS X, with which it shares the Darwin\n         foundation. iOS is Apple's mobile version of the OS X operating system\n         used on Apple computers.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"jmeter\"&amp;gt;\n      &amp;lt;p&amp;gt;jMeter is an Open Source testing software. It is 100% pure Java \n         application for load and performance testing.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n   \n   &amp;lt;div class = \"tab-pane fade\" id = \"ejb\"&amp;gt;\n      &amp;lt;p&amp;gt;Enterprise Java Beans (EJB) is a development architecture for\n         building highly scalable and robust enterprise level applications to be \n         deployed on J2EE compliant Application Server such as JBOSS, Web Logic etc.&amp;lt;/p&amp;gt;\n   &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n\n&amp;lt;script&amp;gt;\n   $(function(){\n      $('a&#91;data-toggle = \"tab\"]').on('shown.bs.tab', function (e) {\n         // Get the name of active tab\n         var activeTab = $(e.target).text(); \n         \n         // Get the name of previous tab\n         var previousTab = $(e.relatedTarget).text(); \n         \n         $(\".active-tab span\").html(activeTab);\n         $(\".previous-tab span\").html(previousTab);\n      });\n   });\n&amp;lt;/script&amp;gt;</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Tabs were introduced in the chapter Bootstrap Navigation Elements. By combining a few data attributes, you can easily create a tabbed interface. With this plug-in you can transition through panes of local content in tabs or pills, even via drop down menus. If you want to include this plugin functionality individually, then you will need tab.js. Else, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4113"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4113"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4113/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4113"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4113"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4113"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2906,
    "date": "2020-08-20T07:54:56",
    "date_gmt": "2020-08-20T07:54:56",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=261"
    },
    "modified": "2020-08-20T07:54:56",
    "modified_gmt": "2020-08-20T07:54:56",
    "slug": "bootstrap-tooltip-plug-in",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-tooltip-plug-in/",
    "title": {
      "rendered": "Tooltip Plug-in"
    },
    "content": {
      "rendered": "\n<p>Tooltips are useful when you need to describe a link. The plugin was inspired by&nbsp;<em>jQuery.tipsy</em>&nbsp;plugin written by&nbsp;<em>Jason Frame</em>. Tooltips have since been updated to work without images, animate with a CSS animation, and data-attributes for local title storage.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need&nbsp;<strong>tooltip.js</strong>. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>The tooltip plugin generates content and markup on demand, and by default places tooltips after their trigger element. You can add tooltips in the following two ways −</p>\n\n\n\n<ul><li><strong>Via data attributes</strong>&nbsp;− To add a tooltip, add&nbsp;<strong>data-toggle = &#8220;tooltip&#8221;</strong>&nbsp;to an anchor tag. The title of the anchor will be the text of a tooltip. By default, tooltip is set to top by the plugin.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;a href = \"#\" data-toggle = \"tooltip\" title = \"Example tooltip\"&gt;Hover over me&lt;/a&gt;</pre>\n\n\n\n<ul><li><strong>Via JavaScript</strong>&nbsp;− Trigger the tooltip via JavaScript −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('#identifier').tooltip(options)\n</code></pre>\n\n\n\n<p>Tooltip plugin is NOT only-css plugins like dropdown or other plugins discussed in previous chapters. To use this plugin you MUST activate it using jquery (read javascript). To enable all the tooltips on your page just use this script −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(function () { $(\"&#91;data-toggle = 'tooltip']\").tooltip(); });\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of tooltip plugin via data attributes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h4>Tooltip examples for anchors&lt;/h4>\n\nThis is a &lt;a href = \"#\" class = \"tooltip-test\" data-toggle = \"tooltip\" \n   title = \"Tooltip on left\"> Default Tooltip&lt;/a>.\n\nThis is a &lt;a href = \"#\" class = \"tooltip-test\" data-toggle = \"tooltip\" \n   data-placement = \"left\" title = \"Tooltip on left\">Tooltip on Left&lt;/a>.\n\nThis is a &lt;a href = \"#\" data-toggle = \"tooltip\" data-placement = \"top\" \n   title = \"Tooltip on top\">Tooltip on Top&lt;/a>.\n\nThis is a &lt;a href = \"#\" data-toggle = \"tooltip\" data-placement = \"bottom\"\n   title = \"Tooltip on bottom\">Tooltip on Bottom&lt;/a>.\n\nThis is a &lt;a href = \"#\" data-toggle = \"tooltip\" data-placement = \"right\" \n   title = \"Tooltip on right\">Tooltip on Right&lt;/a>\n\t\n&lt;br>\n\n&lt;h4>Tooltip examples for buttons&lt;/h4>\n\n&lt;button type = \"button\" class = \"btn btn-default\" data-toggle = \"tooltip\" title = \"Tooltip on left\">\n   Default Tooltip\n&lt;/button>\n\n&lt;button type = \"button\" class = \"btn btn-default\" data-toggle = \"tooltip\" \n   data-placement = \"left\" title = \"Tooltip on left\">\n\t\n   Tooltip on left\n&lt;/button>\n\n&lt;button type = \"button\" class = \"btn btn-default\" data-toggle = \"tooltip\" \n   data-placement = \"top\" title = \"Tooltip on top\">\n   \n   Tooltip on top\n&lt;/button>\n\n&lt;button type = \"button\" class = \"btn btn-default\" data-toggle = \"tooltip\" \n   data-placement = \"bottom\" title = \"Tooltip on bottom\">\n   \n   Tooltip on bottom\n&lt;/button>\n\n&lt;button type = \" button\" class = \" btn btn-default\" data-toggle = \"tooltip\" \n   data-placement = \"right\" title = \"Tooltip on right\">\n   \n   Tooltip on right\n&lt;/button>\n\n&lt;script>\n   $(function () { $(\"&#91;data-toggle = 'tooltip']\").tooltip(); });\n&lt;/script></code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<p>There are certain options which can be added via the Bootstrap Data API or invoked via JavaScript. Following table lists the options −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Option Name</th><th>Type/Default Value</th><th>Data attribute name</th><th>Description</th></tr><tr><td>animation</td><td>boolean&nbsp;<em>Default: true</em></td><td>data-animation</td><td>Applies a CSS fade transition to the tooltip.</td></tr><tr><td>html</td><td>boolean&nbsp;<em>Default: false</em></td><td>data-html</td><td>Inserts HTML into the tooltip. If false, jQuery’s text method will be used to insert content into the dom. Use text if you’re worried about XSS attacks.</td></tr><tr><td>placement</td><td>string|function&nbsp;<em>Default: top</em></td><td>data-placement</td><td>Specifies how to position the tooltip (i.e., top|bottom|left|right|auto).When&nbsp;<em>auto</em>&nbsp;is specified, it will dynamically reorient the tooltip. For example, if placement is &#8220;auto left&#8221;, the tooltip will display to the left when possible, otherwise it will display right.</td></tr><tr><td>selector</td><td>string&nbsp;<em>Default: false</em></td><td>data-selector</td><td>If a selector is provided, tooltip objects will be delegated to the specified targets.</td></tr><tr><td>title</td><td>string | function&nbsp;<em>Default: &#8220;</em></td><td>data-title</td><td>The title option is the default title value if the&nbsp;<em>title</em>&nbsp;attribute isn’t present.</td></tr><tr><td>trigger</td><td>string&nbsp;<em>Default: &#8216;hover focus&#8217;</em></td><td>data-trigger</td><td>Defines how the tooltip is triggered:&nbsp;<strong>click| hover | focus | manual</strong>. You may pass multiple triggers; separate them with a space.</td></tr><tr><td>content</td><td>string | function&nbsp;<em>Default: &#8221;</em></td><td>data-content</td><td>Default content value if&nbsp;<em>data-content</em>&nbsp;attribute isn&#8217;t present</td></tr><tr><td>delay</td><td>number | object&nbsp;<em>Default: 0</em></td><td>data-delay</td><td>Delays showing and hiding the tooltip in ms — does not apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is −delay: { show: 500, hide: 100 }</td></tr><tr><td>container</td><td>string | false&nbsp;<em>Default: false</em></td><td>data-container</td><td>Appends the tooltip to a specific element. Example: container: &#8216;body&#8217;</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The following are some useful methods for tooltips −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th><th>Example</th></tr><tr><td><strong>Options</strong>&nbsp;− .tooltip(options)</td><td>Attaches a tooltip handler to an element collection.</td><td>$().tooltip(options)</td></tr><tr><td><strong>Toggle</strong>&nbsp;− .tooltip(&#8216;toggle&#8217;)</td><td>Toggles an element&#8217;s tooltip.</td><td>$(&#8216;#element&#8217;).tooltip(&#8216;toggle&#8217;)</td></tr><tr><td><strong>Show</strong>&nbsp;− .tooltip(&#8216;show&#8217;)</td><td>Reveals an element&#8217;s tooltip.</td><td>$(&#8216;#element&#8217;).tooltip(&#8216;show&#8217;)</td></tr><tr><td><strong>Hide</strong>&nbsp;− .tooltip(&#8216;hide&#8217;)</td><td>Hides an element&#8217;s tooltip.</td><td>$(&#8216;#element&#8217;).tooltip(&#8216;hide&#8217;)</td></tr><tr><td><strong>Destroy</strong>&nbsp;− .tooltip(&#8216;destroy&#8217;)</td><td>Hides and destroys an element&#8217;s tooltip.</td><td>$(&#8216;#element&#8217;).tooltip(&#8216;destroy&#8217;)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of tooltip plugin via data attributes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div style = \"padding: 100px 100px 10px;\">\n   This is a &lt;a href = \"#\" class = \"tooltip-show\" data-toggle = \"tooltip\" \n      title = \"show\">Tooltip on method show&lt;/a>.\n\n   This is a &lt;a href = \"#\" class = \"tooltip-hide\" data-toggle = \"tooltip\" \n      data-placement = \"left\" title = \"hide\">Tooltip on method hide&lt;/a>.\n\n   This is a &lt;a href = \"#\" class = \"tooltip-destroy\" data-toggle = \"tooltip\" \n      data-placement = \"top\" title = \"destroy\">Tooltip on method destroy&lt;/a>.\n\n   This is a &lt;a href = \"#\" class = \"tooltip-toggle\" data-toggle = \"tooltip\" \n      data-placement = \"bottom\" title = \"toggle\">Tooltip on method toggle&lt;/a>.\n   \n   &lt;br>&lt;br>&lt;br>&lt;br>&lt;br>&lt;br>\n   \n   &lt;p class = \"tooltip-options\" >\n      This is a &lt;a href = \"#\" data-toggle = \"tooltip\" title = \"&lt;h2>'am Header2\n         &lt;/h2>\">Tooltip on method options&lt;/a>.\n   &lt;/p>\n\n   &lt;script>\n      $(function () { $('.tooltip-show').tooltip('show');});\n      $(function () { $('.tooltip-hide').tooltip('hide');});\n      $(function () { $('.tooltip-destroy').tooltip('destroy');});\n      $(function () { $('.tooltip-toggle').tooltip('toggle');});\n      $(function () { $(\".tooltip-options a\").tooltip({html : true });});\n   &lt;/script>\n&lt;/div></code></pre>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>Following table lists the events to work with tooltip plugin. This event may be used to hook into the function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th><th>Example</th></tr><tr><td>show.bs.tooltip</td><td>This event fires immediately when the show instance method is called.</td><td>$(&#8216;#myTooltip&#8217;).on(&#8216;show.bs.tooltip&#8217;, function () { // do something })</td></tr><tr><td>shown.bs.tooltip</td><td>This event is fired when the tooltip has been made visible to the user (will wait for CSS transitions to complete).</td><td>$(&#8216;#myTooltip&#8217;).on(&#8216;shown.bs.tooltip&#8217;, function () { // do something })</td></tr><tr><td>hide.bs.tooltip</td><td>This event is fired immediately when the hide instance method has been called.</td><td>$(&#8216;#myTooltip&#8217;).on(&#8216;hide.bs.tooltip&#8217;, function () { // do something })</td></tr><tr><td>hidden.bs.tooltip</td><td>This event is fired when the tooltip has finished being hidden from the user (will wait for CSS transitions to complete).</td><td>$(&#8216;#myTooltip&#8217;).on(&#8216;hidden.bs.tooltip&#8217;, function () { // do something })</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of tooltip plugin via data attributes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h4>Tooltip examples for anchors&lt;/h4>\n\nThis is a &lt;a href = \"#\" class = \"tooltip-show\" data-toggle = \"tooltip\" \n   title = \"Default Tooltip\">Default Tooltip&lt;/a>.\n\n&lt;script>\n   $(function () { $('.tooltip-show').tooltip('show');});\n   \n   $(function () { $('.tooltip-show').on('show.bs.tooltip', function () {\n      alert(\"Alert message on show\");\n   })});\n&lt;/script></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Tooltips are useful when you need to describe a link. The plugin was inspired by&nbsp;jQuery.tipsy&nbsp;plugin written by&nbsp;Jason Frame. Tooltips have since been updated to work without images, animate with a CSS animation, and data-attributes for local title storage. If you want to include this plugin functionality individually, then you will need&nbsp;tooltip.js. Else, as mentioned in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2906"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2906"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2906/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2906"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2906"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2906"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4111,
    "date": "2020-08-20T08:00:54",
    "date_gmt": "2020-08-20T08:00:54",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=263"
    },
    "modified": "2020-08-20T08:00:54",
    "modified_gmt": "2020-08-20T08:00:54",
    "slug": "bootstrap-popover-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-popover-plugin/",
    "title": {
      "rendered": "Popover Plugin"
    },
    "content": {
      "rendered": "\n<p>The popover is similar to tooltip, offering an extended view complete with a heading. For the popover to activate, a user just needs to hover the cursor over the element. The content of the popover can be populated entirely using the Bootstrap Data API. This method requires a tooltip.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need the&nbsp;<strong>popover.js</strong>&nbsp;and it has a dependency of the&nbsp;tooltip plugin. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>The popover plugin generates content and markup on demand, and by default places popover after their trigger element. You can add popover in the following two ways −</p>\n\n\n\n<ul><li><strong>Via data attributes</strong> − To add a popover, add <strong>data-toggle = &#8220;popover&#8221;</strong> to an anchor/button tag. The title of the anchor will be the text of a popover. By default, popover is set to top by the plugin.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a href = \"#\" data-toggle = \"popover\" title = \"Example popover\">\n   Hover over me\n&lt;/a></code></pre>\n\n\n\n<ul><li><strong>Via JavaScript</strong>&nbsp;− Enable popovers via JavaScript using the following syntax −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('#identifier').popover(options)\n</code></pre>\n\n\n\n<p>Popover plugin is NOT only-css plugins like dropdown or other plugins discussed in previous chapters. To use this plugin you MUST activate it using jquery (read javascript). To enable all the popovers on your page just use this script −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(function () { $(\"&#91;data-toggle = 'popover']\").popover(); });\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of popover plugin via data attributes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\" style = \"padding: 100px 50px 10px;\" >\n   &lt;button type = \"button\" class = \"btn btn-default\" title = \"Popover title\"  \n      data-container = \"body\" data-toggle = \"popover\" data-placement = \"left\" \n      data-content = \"Some content in Popover on left\">\n      \n      Popover on left\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-primary\" title = \"Popover title\"  \n      data-container = \"body\" data-toggle = \"popover\" data-placement = \"top\" \n      data-content = \"Some content in Popover on top\">\n      \n      Popover on top\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-success\" title = \"Popover title\"  \n      data-container = \"body\" data-toggle = \"popover\" data-placement = \"bottom\" \n      data-content = \"Some content in Popover on bottom\">\n      \n      Popover on bottom\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-warning\" title = \"Popover title\"  \n      data-container = \"body\" data-toggle = \"popover\" data-placement = \"right\" \n      data-content = \"Some content in Popover on right\">\n      \n      Popover on right\n   &lt;/button>\n   \n&lt;/div>\n\n&lt;script>\n   $(function (){\n      $(\"&#91;data-toggle = 'popover']\").popover();\n   });\n&lt;/script></code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<p>There are certain options which can be added via the Bootstrap Data API or invoked via JavaScript. Following table lists the options −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Option Name</th><th>Type/Default Value</th><th>Data attribute name</th><th>Description</th></tr><tr><td>animation</td><td>boolean&nbsp;<em>Default − true</em></td><td>data-animation</td><td>Applies a CSS fade transition to the popover.</td></tr><tr><td>html</td><td>boolean&nbsp;<em>Default − false</em></td><td>data-html</td><td>Inserts HTML into the popover. If false, jQuery’s text method will be used to insert content into the dom. Use text if you’re worried about XSS attacks.</td></tr><tr><td>placement</td><td>string|function&nbsp;<em>Default − top</em></td><td>data-placement</td><td>Specifies how to position the popover (i.e., top|bottom|left|right|auto). When&nbsp;<em>auto</em>&nbsp;is specified, it will dynamically reorient the popover. For example, if placement is &#8220;auto left&#8221;, the popover will display to the left when possible, otherwise it will display right.</td></tr><tr><td>selector</td><td>string&nbsp;<em>Default − false</em></td><td>data-selector</td><td>If a selector is provided, popover objects will be delegated to the specified targets.</td></tr><tr><td>title</td><td>string | function&nbsp;<em>Default − &#8220;</em></td><td>data-title</td><td>The title option is the default title value if the&nbsp;<em>title</em>&nbsp;attribute isn’t present.</td></tr><tr><td>trigger</td><td>string&nbsp;<em>Default − &#8216;hover focus&#8217;</em></td><td>data-trigger</td><td>Defines how the popover is triggered −&nbsp;<strong>click| hover | focus | manual</strong>. You may pass multiple triggers; separate them with a space.</td></tr><tr><td>delay</td><td>number | object&nbsp;<em>Default − 0</em></td><td>data-delay</td><td>Delays showing and hiding the popover in ms — does not apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is −delay: { show: 500, hide: 100 }</td></tr><tr><td>container</td><td>string | false&nbsp;<em>Default − false</em></td><td>data-container</td><td>Appends the popover to a specific element. Example: container: &#8216;body&#8217;</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The following are some useful methods for popover −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th><th>Example</th></tr><tr><td><strong>Options</strong>&nbsp;− .popover(options)</td><td>Attaches a popover handler to an element collection.</td><td>$().popover(options)</td></tr><tr><td><strong>Toggle</strong>&nbsp;− .popover(&#8216;toggle&#8217;)</td><td>Toggles an element&#8217;s popover.</td><td>$(&#8216;#element&#8217;).popover(&#8216;toggle&#8217;)</td></tr><tr><td><strong>Show</strong>&nbsp;− .popover(&#8216;show&#8217;)</td><td>Reveals an element&#8217;s popover.</td><td>$(&#8216;#element&#8217;).popover(&#8216;show&#8217;)</td></tr><tr><td><strong>Hide</strong>&nbsp;− .popover(&#8216;hide&#8217;)</td><td>Hides an element&#8217;s popover.</td><td>$(&#8216;#element&#8217;).popover(&#8216;hide&#8217;)</td></tr><tr><td><strong>Destroy</strong>&nbsp;− .popover(&#8216;destroy&#8217;)</td><td>Hides and destroys an element&#8217;s popover.</td><td>$(&#8216;#element&#8217;).popover(&#8216;destroy&#8217;)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the popover plugin methods −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\" style = \"padding: 100px 50px 10px;\" >\n   &lt;button type = \"button\" class = \"btn btn-default popover-show\" \n      title = \"Popover title\" data-container = \"body\" \n      data-toggle = \"popover\" data-placement = \"left\" \n      data-content = \"Some content in Popover with show method\">\n      \n      Popover on left\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-primary popover-hide\" \n      title = \"Popover title\" data-container = \"body\" \n      data-toggle = \"popover\" data-placement = \"top\" \n      data-content = \"Some content in Popover-hide method\">\n      \n      Popover on top\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-success popover-destroy\" \n      title = \"Popover title\" data-container = \"body\" \n      data-toggle = \"popover\" data-placement = \"bottom\" \n      data-content = \"Some content in Popover-destroy method\">\n      \n      Popover on bottom\n   &lt;/button>\n   \n   &lt;button type = \"button\" class = \"btn btn-warning popover-toggle\" \n      title = \"Popover title\" data-container = \"body\" \n      data-toggle = \"popover\" data-placement = \"top\" \n      data-content = \"Some content in Popover-toggle method\">\n      \n      Popover on right\n   &lt;/button>\n\t\n   &lt;br>&lt;br>&lt;br>&lt;br>&lt;br>&lt;br>\n   \n   &lt;p class = \"popover-options\">\n      &lt;a href = \"#\" type = \"button\" class = \"btn btn-warning\" \n         title = \"&lt;h2>Title&lt;/h2>\" data-container = \"body\" \n         data-toggle = \"popover\" data-content = \"\n         &lt;h4>Some content in Popover-options method&lt;/h4>\">\n         \n         Popover\n      &lt;/a>\n   &lt;/p>\n   \n   &lt;script>\n      $(function () { $('.popover-show').popover('show');});\n      $(function () { $('.popover-hide').popover('hide');});\n      $(function () { $('.popover-destroy').popover('destroy');});\n      $(function () { $('.popover-toggle').popover('toggle');});\n      $(function () { $(\".popover-options a\").popover({html : true });});\n   &lt;/script>\n\t\n&lt;/div></code></pre>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>Following table lists the events to work with the popover plugin. This event may be used to hook into the function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th><th>Example</th></tr><tr><td>show.bs.popover</td><td>This event fires immediately when the show instance method is called.</td><td>$(&#8216;#mypopover&#8217;).on(&#8216;show.bs.popover&#8217;, function () { // do something })</td></tr><tr><td>shown.bs.popover</td><td>This event is fired when the popover has been made visible to the user (will wait for CSS transitions to complete).</td><td>$(&#8216;#mypopover&#8217;).on(&#8216;shown.bs.popover&#8217;, function () { // do something })</td></tr><tr><td>hide.bs.popover</td><td>This event is fired immediately when the hide instance method has been called.</td><td>$(&#8216;#mypopover&#8217;).on(&#8216;hide.bs.popover&#8217;, function () { // do something })</td></tr><tr><td>hidden.bs.popover</td><td>This event is fired when the popover has finished being hidden from the user (will wait for CSS transitions to complete).</td><td>$(&#8216;#mypopover&#8217;).on(&#8216;hidden.bs.popover&#8217;, function () { // do something })</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the Popover plugin events −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div clas = \"container\" style = \"padding: 100px 50px 10px;\" >\n   &lt;button type = \"button\" class = \"btn btn-primary popover-show\" \n      title = \"Popover title\" data-container = \"body\" data-toggle = \"popover\" \n      data-content = \"Some content in Popover with show method\">\n      \n      Popover on left\n   &lt;/button>\n   \n&lt;/div>\n\n&lt;script>\n   $(function () { $('.popover-show').popover('show');});\n   \n   $(function () { $('.popover-show').on('shown.bs.popover', function () {\n      alert(\"Alert message on show\");\n   })});\n&lt;/script></code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The popover is similar to tooltip, offering an extended view complete with a heading. For the popover to activate, a user just needs to hover the cursor over the element. The content of the popover can be populated entirely using the Bootstrap Data API. This method requires a tooltip. If you want to include this [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4111"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4111"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4111/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4111"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4111"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4111"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4114,
    "date": "2020-08-20T08:02:43",
    "date_gmt": "2020-08-20T08:02:43",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=265"
    },
    "modified": "2020-08-20T08:02:43",
    "modified_gmt": "2020-08-20T08:02:43",
    "slug": "bootstrap-alert-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-alert-plugin/",
    "title": {
      "rendered": "Alert Plugin"
    },
    "content": {
      "rendered": "\n<p>Alert messages are mostly used to display information such as warning or confirmation messages to the end users. Using alert message plugin you can add dismiss functionality to all alert messages.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need the&nbsp;<strong>alert.js</strong>. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include the&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>You can enable dismissal of an alert in the following two ways −</p>\n\n\n\n<ul><li><strong>Via data attributes</strong> − To dismiss via Data API just add <strong>data-dismiss = &#8220;alert&#8221;</strong> to your close button to automatically give an alert close functionality.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a class = \"close\" data-dismiss = \"alert\" href = \"#\" aria-hidden = \"true\">\n   &amp;times;\n&lt;/a></code></pre>\n\n\n\n<ul><li><strong>Via JavaScript</strong>&nbsp;− To dismiss via JavaScript use the following syntax −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$(\".alert\").alert()\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of alert plugin via data attributes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"alert alert-success\">\n   &lt;a href = \"#\" class = \"close\" data-dismiss = \"alert\">\n      &amp;times;\n   &lt;/a>\n   \n   &lt;strong>Warning!&lt;/strong> There was a problem with your network connection.\n&lt;/div></code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<p><em>There are no options here.</em></p>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The following are some useful methods for alert plugin −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th><th>Example</th></tr><tr><td>.alert()</td><td>This method wraps all alerts with close functionality.</td><td>$(&#8216;#identifier&#8217;).alert();</td></tr><tr><td><strong>Close Method</strong>&nbsp;.alert(&#8216;close&#8217;)</td><td>To enable all alerts to be closed, add this method.</td><td>$(&#8216;#identifier&#8217;).alert(&#8216;close&#8217;);</td></tr></tbody></table></figure>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>To enable alerts to animate out when closed, make sure they have the&nbsp;<strong>.fade</strong>&nbsp;and&nbsp;<strong>.in</strong>&nbsp;class already applied to them.</p></blockquote>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of <strong>.alert()</strong> method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h3>Alert messages to demonstrate alert() method &lt;/h3>\n\n&lt;div id = \"myAlert\" class = \"alert alert-success\">\n   &lt;a href = \"#\" class = \"close\" data-dismiss = \"alert\">&amp;times;&lt;/a>\n   &lt;strong>Success!&lt;/strong> the result is successful.\n&lt;/div>\n\n&lt;div id = \"myAlert\" class = \"alert alert-warning\">\n   &lt;a href = \"#\" class = \"close\" data-dismiss = \"alert\">&amp;times;&lt;/a>\n   &lt;strong>Warning!&lt;/strong> There was a problem with your network connection.\n&lt;/div>\n\n&lt;script type = \"text/javascript\">\n   $(function(){\n      $(\".close\").click(function(){\n         $(\"#myAlert\").alert();\n      });\n   });  \n&lt;/script> </code></pre>\n\n\n\n<p>The following example demonstrates the use of <strong>.alert(&#8216;close&#8217;)</strong> method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h3>Alert messages to demonstrate alert('close') method &lt;/h3>\n\n&lt;div id = \"myAlert\" class = \"alert alert-success\">\n   &lt;a href = \"#\" class = \"close\" data-dismiss = \"alert\">&amp;times;&lt;/a>\n   &lt;strong>Success!&lt;/strong> the result is successful.\n&lt;/div>\n\n&lt;div id = \"myAlert\" class = \"alert alert-warning\">\n   &lt;a href = \"#\" class = \"close\" data-dismiss = \"alert\">&amp;times;&lt;/a>\n   &lt;strong>Warning!&lt;/strong> There was a problem with your network connection.\n&lt;/div>\n\n&lt;script type = \"text/javascript\">\n   $(function(){\n      $(\".close\").click(function(){\n         $(\"#myAlert\").alert('close');\n      });\n   });  \n&lt;/script>  </code></pre>\n\n\n\n<p>Try this code using the&nbsp;<strong>Try it</strong>&nbsp;editor. You can see that the close functionality is applied to all the alert messages i.e. close any alert message, rest of the alert messages also gets closed.https://www.tutorialspoint.com/bootstrap/src/alert_plugin_close.htm</p>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>Following table lists the events to work with alert plugin. This event may be used to hook into the alert function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th><th>Example</th></tr><tr><td>close.bs.alert</td><td>This event fires immediately when the&nbsp;<em>close</em>&nbsp;instance method is called.</td><td>$(&#8216;#myalert&#8217;).bind(&#8216;close.bs.alert&#8217;, function () { // do something })</td></tr><tr><td>closed.bs.alert</td><td>This event is fired when the alert has been closed (will wait for CSS transitions to complete).</td><td>$(&#8216;#myalert&#8217;).bind(&#8216;closed.bs.alert&#8217;, function () { // do something })</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the alert plugin events −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"myAlert\" class = \"alert alert-success\">\n   &lt;a href = \"#\" class = \"close\" data-dismiss = \"alert\">&amp;times;&lt;/a>\n   &lt;strong>Success!&lt;/strong> the result is successful.\n&lt;/div>\n\n&lt;script type = \"text/javascript\">\n   $(function(){\n      $(\"#myAlert\").bind('closed.bs.alert', function () {\n         alert(\"Alert message box is closed.\");\n      });\n   });\n&lt;/script>  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Alert messages are mostly used to display information such as warning or confirmation messages to the end users. Using alert message plugin you can add dismiss functionality to all alert messages. If you want to include this plugin functionality individually, then you will need the&nbsp;alert.js. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4114"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4114"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4114/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4114"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4114"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4114"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4115,
    "date": "2020-08-20T08:05:45",
    "date_gmt": "2020-08-20T08:05:45",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=267"
    },
    "modified": "2020-08-20T08:05:45",
    "modified_gmt": "2020-08-20T08:05:45",
    "slug": "bootstrap-button-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-button-plugin/",
    "title": {
      "rendered": "Button Plugin"
    },
    "content": {
      "rendered": "\n<p>Buttons were explained in chapter&nbsp;Bootstrap Buttons. With this plugin you can add in some interaction such as control button states or create groups of buttons for more components like toolbars.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need the&nbsp;<strong>button.js</strong>. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include the&nbsp;<em>bootstrap.js</em>&nbsp;or the minified the&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Loading State</h2>\n\n\n\n<p>To add a loading state to a button, simply add the <strong>data-loading-text = &#8220;Loading&#8230;&#8221;</strong> as an attribute to the button element as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button id = \"fat-btn\" class = \"btn btn-primary\" data-loading-text = \"Loading...\" type = \"button\"> \n   Loading state \n&lt;/button>\n\n&lt;script>\n   $(function() { \n      $(\".btn\").click(function(){\n         $(this).button('loading').delay(1000).queue(function() {\n            // $(this).button('reset');\n         });        \n      });\n   });  \n&lt;/script></code></pre>\n\n\n\n<p>When you click on the button the output would be as seen in the following image −https://www.tutorialspoint.com/bootstrap/src/button_plugin.htm</p>\n\n\n\n<h2>Single toggle</h2>\n\n\n\n<p>To activate toggling (i.e. change the normal state of a button to a push state and vice versa) on a single button, add the <strong>data-toggle = &#8220;button&#8221;</strong> as an attribute to the button element as shown in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button type = \"button\" class = \"btn btn-primary\" data-toggle = \"button\">\n   Single toggle\n&lt;/button></code></pre>\n\n\n\n<h2>Checkbox</h2>\n\n\n\n<p>You can create group of checkboxes and add toggling to it by simply adding the data attribute <strong>data-toggle = &#8220;buttons&#8221;</strong> to the <strong>btn-group.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group\" data-toggle = \"buttons\">\n   &lt;label class = \"btn btn-primary\">\n      &lt;input type = \"checkbox\"> Option 1\n   &lt;/label>\n   \n   &lt;label class = \"btn btn-primary\">\n      &lt;input type = \"checkbox\"> Option 2\n   &lt;/label>\n   \n   &lt;label class = \"btn btn-primary\">\n      &lt;input type = \"checkbox\"> Option 3\n   &lt;/label>\n&lt;/div></code></pre>\n\n\n\n<h2>Radio</h2>\n\n\n\n<p>Similarly you can create a group of radio inputs and add toggling to it by simply adding the data attribute <strong>data-toggle = &#8220;buttons&#8221;</strong> to the <strong>btn-group</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"btn-group\" data-toggle = \"buttons\">\n   &lt;label class = \"btn btn-primary\">\n      &lt;input type = \"radio\" name =\" options\" id = \"option1\"> Option 1\n   &lt;/label>\n   \n   &lt;label class = \"btn btn-primary\">\n      &lt;input type = \"radio\" name = \"options\" id = \"option2\"> Option 2\n   &lt;/label>\n   \n   &lt;label class = \"btn btn-primary\">\n      &lt;input type = \"radio\" name = \"options\" id = \"option3\"> Option 3\n   &lt;/label>\n&lt;/div>\t</code></pre>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>You can enable buttons plugin&nbsp;<strong>via JavaScript</strong>&nbsp;as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$('.btn').button()\n</code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<p><em>There are no options.</em></p>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>Given below are some of the useful methods for buttons plugin −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th><th>Example</th></tr><tr><td>button(&#8216;toggle&#8217;)</td><td>Toggles push state. Gives the button the appearance that it has been activated. You can also enable auto toggling of a button by using the&nbsp;<strong>data-toggle</strong>&nbsp;attribute.</td><td>$().button(&#8216;toggle&#8217;)</td></tr><tr><td>.button(&#8216;loading&#8217;)</td><td>When loading, the button is disabled and the text is changed to the option from the&nbsp;<strong>data-loading-text</strong>&nbsp;attribute of button element</td><td>$().button(&#8216;loading&#8217;)</td></tr><tr><td>.button(&#8216;reset&#8217;)</td><td>Resets button state, bringing the original content back to the text. This method is useful when you need to return the button back to the primary state</td><td>$().button(&#8216;reset&#8217;)</td></tr><tr><td>.button(string)</td><td>String in this method is referring to any string declared by the user. To reset the button state and bring in new content use this method.</td><td>$().button(string)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of the above methods −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h2>Click on each of the buttons to see the effects of methods&lt;/h2>\n&lt;h4>Example to demonstrate .button('toggle') method&lt;/h4>\n\n&lt;div id = \"myButtons1\" class = \"bs-example\">\n   &lt;button type = \"button\" class = \"btn btn-primary\">Primary&lt;/button>\n&lt;/div>\n\n&lt;h4>Example to demonstrate  .button('loading') method&lt;/h4>\n\n&lt;div id = \"myButtons2\" class = \"bs-example\">\n   &lt;button type = \"button\" class = \"btn btn-primary\" data-loading-text = \"Loading...\">\n      Primary\n   &lt;/button>\n&lt;/div>\n\n&lt;h4>Example to demonstrate .button('reset') method&lt;/h4>\n\n&lt;div id = \"myButtons3\" class = \"bs-example\">\n   &lt;button type = \"button\" class = \"btn btn-primary\" data-loading-text = \"Loading...\">\n      Primary\n   &lt;/button>\n&lt;/div>\n\n&lt;h4>Example to demonstrate  .button(string) method&lt;/h4>\n\n&lt;button type = \"button\" class = \"btn btn-primary\" id = \"myButton4\" \n   data-complete-text = \"Loading finished\">\n   Click Me\n&lt;/button>\n\n&lt;script type = \"text/javascript\">\n   $(function () {\n      $(\"#myButtons1 .btn\").click(function(){\n         $(this).button('toggle');\n      });\n   });\n   \n   $(function() { \n      $(\"#myButtons2 .btn\").click(function(){\n         $(this).button('loading').delay(1000).queue(function() {\n         });        \n      });\n   });   \n   \n   $(function() { \n      $(\"#myButtons3 .btn\").click(function(){\n         $(this).button('loading').delay(1000).queue(function() {\n            $(this).button('reset');\n         });        \n      });\n   });  \n   \n   $(function() { \n      $(\"#myButton4\").click(function(){\n         $(this).button('loading').delay(1000).queue(function() {\n            $(this).button('complete');\n         });        \n      });\n   }); \n&lt;/script> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Buttons were explained in chapter&nbsp;Bootstrap Buttons. With this plugin you can add in some interaction such as control button states or create groups of buttons for more components like toolbars. If you want to include this plugin functionality individually, then you will need the&nbsp;button.js. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4115"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4115"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4115/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4115"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4115"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4115"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4116,
    "date": "2020-08-20T08:07:33",
    "date_gmt": "2020-08-20T08:07:33",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=269"
    },
    "modified": "2020-08-20T08:07:33",
    "modified_gmt": "2020-08-20T08:07:33",
    "slug": "bootstrap-collapse-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-collapse-plugin/",
    "title": {
      "rendered": "Collapse Plugin"
    },
    "content": {
      "rendered": "\n<p>The collapse plugin makes it easy to make collapsing divisions of the page. Whether you use it to build an accordion navigation or content boxes, it allows for a lot of content options.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need the&nbsp;<strong>collapse.js</strong>. This also requires the&nbsp;Transition Plugin&nbsp;to be included in your version of Bootstrap. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include the&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<p>You can use the collapse plugin −</p>\n\n\n\n<ul><li><strong>To create collapsible groups or accordion</strong>. This can be created as in the sample example below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel-group\" id = \"accordion\">\n   &lt;div class = \"panel panel-default\">\n      \n      &lt;div class = \"panel-heading\">\n         &lt;h4 class = \"panel-title\">\n            &lt;a data-toggle = \"collapse\" data-parent = \"#accordion\" href = \"#collapseOne\">\n               Click me to expand. Click me again to collapse.Section 1\n            &lt;/a>\n         &lt;/h4>\n      &lt;/div>\n      \n      &lt;div id = \"collapseOne\" class = \"panel-collapse collapse in\">\n         &lt;div class = \"panel-body\">\n            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred \n               nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n         &lt;/div>\n      &lt;/div>\n      \n   &lt;/div>\n   \n   &lt;div class = \"panel panel-default\">\n      &lt;div class = \"panel-heading\">\n         &lt;h4 class = \"panel-title\">\n            &lt;a data-toggle = \"collapse\" data-parent = \"#accordion\" href = \"#collapseTwo\">\n               Click me to expand. Click me again to collapse.Section 2\n            &lt;/a>\n         &lt;/h4>\n      &lt;/div>\n\n      &lt;div id = \"collapseTwo\" class = \"panel-collapse collapse\">\n         &lt;div class = \"panel-body\">\n            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt \n               sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n         &lt;/div>\n      &lt;/div>\n      \n   &lt;/div>\n   \n   &lt;div class = \"panel panel-default\">\n      &lt;div class = \"panel-heading\">\n         &lt;h4 class = \"panel-title\">\n            &lt;a data-toggle = \"collapse\" data-parent = \"#accordion\" href = \"#collapseThree\">\n               Click me to expand. Click me again to collapse.Section 3\n            &lt;/a>\n         &lt;/h4>\n      &lt;/div>\n     \n      &lt;div id = \"collapseThree\" class = \"panel-collapse collapse\">\n         &lt;div class = \"panel-body\">\n            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt \n               sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n         &lt;/div>\n      &lt;/div>\n     \n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<ul><li><strong>data-toggle = &#8220;collapse&#8221;</strong>&nbsp;is added to the link on which you click to expand or collapse the component.</li><li><strong>href</strong>&nbsp;or a&nbsp;<strong>data-target</strong>&nbsp;attribute is added to the parent component, whose value is&nbsp;<em>id</em>&nbsp;of the child component.</li><li><strong>data-parent</strong>&nbsp;attribute is added for creating the accordion like effect.</li></ul>\n\n\n\n<ul><li><em>To create simple collapsible without the accordion markup</em>&nbsp;− This can be created as in the sample example below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button type = \"button\" class = \"btn btn-primary\" data-toggle = \"collapse\" data-target = \"#demo\">\n   simple collapsible\n&lt;/button>\n\n&lt;div id = \"demo\" class = \"collapse in\">\n   Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt\n      sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n&lt;/div></code></pre>\n\n\n\n<p>As you can see in the example we have created a simple collapsible component, unlike accordion, we haven&#8217;t added the attribute&nbsp;<strong>data-parent</strong>.https://www.tutorialspoint.com/bootstrap/src/button_collapse.htm</p>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>Following table lists the classes that the collapse plugin utilizes to handle the heavy lifting −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Class &amp;Description</th></tr><tr><td>1</td><td><strong>.collapse</strong>Hides the content.</td></tr><tr><td>2</td><td><strong>.collapse.in</strong>Shows the content.</td></tr><tr><td>3</td><td><strong>.collapsing</strong>Is added when the transition starts, and removed when it finishes.</td></tr></tbody></table></figure>\n\n\n\n<p>You can use collapse plugin in two ways −</p>\n\n\n\n<ul><li><strong>Via data attributes</strong>&nbsp;− Add&nbsp;<strong>data-toggle = &#8220;collapse&#8221;</strong>&nbsp;and a&nbsp;<strong>data-target</strong>&nbsp;to the element to automatically assign control of a collapsible element. The&nbsp;<strong>data-target</strong>&nbsp;attribute will accept a CSS selector to apply the collapse to. Be sure to add the class&nbsp;<strong>.collapse</strong>&nbsp;to the collapsible element. If you’d like it to default open, include the additional class&nbsp;<strong>.in</strong>.To add accordion-like group management to a collapsible control, add the data attribute&nbsp;<strong>data-parent = &#8220;#selector&#8221;</strong>.</li><li><strong>Via JavaScript</strong>&nbsp;− The collapse method can be activated with JavaScript as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('.collapse').collapse()\n</code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<p>There are certain options which can be passed via data attributes or JavaScript are listed in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Option Name</th><th>Type/Default Value</th><th>Data attribute name</th><th>Description</th></tr><tr><td>parent</td><td>selector&nbsp;<em>Default − false</em></td><td>data-parent</td><td>If selector is false, then all collapsible elements under the specified parent will be closed (similar to traditional accordion behavior &#8211; this dependent on the accordion-group class).</td></tr><tr><td>toggle</td><td>boolean&nbsp;<em>Default − true</em></td><td>data-toggle</td><td>Toggles the collapsible element on invocation.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>Here is a list of some useful methods that are used with collapsible elements.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th><th>Example</th></tr><tr><td><strong>Options</strong>&nbsp;− .collapse(options)</td><td>Activates your content as a collapsible element. Accepts an optional options object.</td><td>$(&#8216;#identifier&#8217;).collapse({ toggle: false })</td></tr><tr><td><strong>Toggle</strong>&nbsp;− .collapse(&#8216;toggle&#8217;)</td><td>Toggles a collapsible element to shown or hidden.</td><td>$(&#8216;#identifier&#8217;).collapse(&#8216;toggle&#8217;)</td></tr><tr><td><strong>Show</strong>&nbsp;− .collapse(&#8216;show&#8217;)</td><td>Shows a collapsible element.</td><td>$(&#8216;#identifier&#8217;).collapse(&#8216;show&#8217;)</td></tr><tr><td><strong>Hide</strong>&nbsp;− .collapse(&#8216;hide&#8217;)</td><td>Hides a collapsible element.</td><td>$(&#8216;#identifier&#8217;).collapse(&#8216;hide&#8217;)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage of methods −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel-group\" id = \"accordion\">\n   &lt;div class = \"panel panel-default\">\n      \n      &lt;div class = \"panel-heading\">\n         &lt;h4 class = \"panel-title\">\n            &lt;a data-toggle = \"collapse\" data-parent = \"#accordion\" href = \"#collapseOne\">\n               Click me to expand. Click me again to collapse. Section 1--hide method\n            &lt;/a>\n         &lt;/h4>\n      &lt;/div>\n      \n      &lt;div id = \"collapseOne\" class = \"panel-collapse collapse in\">\n         &lt;div class = \"panel-body\">\n            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt \n               sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n         &lt;/div>\n      &lt;/div>\n      \n   &lt;/div>\n   \n   &lt;div class = \"panel panel-success\">\n      &lt;div class = \"panel-heading\">\n         &lt;h4 class = \"panel-title\">\n            &lt;a data-toggle = \"collapse\" data-parent = \"#accordion\" href = \"#collapseTwo\">\n               Click me to expand. Click me again to collapse. Section 2--show method\n            &lt;/a>\n         &lt;/h4>\n      &lt;/div>\n      \n      &lt;div id = \"collapseTwo\" class = \"panel-collapse collapse\">\n         &lt;div class = \"panel-body\">\n            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt \n               sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n         &lt;/div>\n      &lt;/div>\n      \n   &lt;/div>\n   \n   &lt;div class = \"panel panel-info\">\n      &lt;div class = \"panel-heading\">\n         &lt;h4 class = \"panel-title\">\n            &lt;a data-toggle = \"collapse\" data-parent = \"#accordion\" href = \"#collapseThree\">\n               Click me to expand. Click me again to collapse. Section 3--toggle method\n            &lt;/a>\n         &lt;/h4>\n      &lt;/div>\n      \n      &lt;div id = \"collapseThree\" class = \"panel-collapse collapse\">\n         &lt;div class = \"panel-body\">\n            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt \n               sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n         &lt;/div>\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;div class = \"panel panel-warning\">\n      &lt;div class = \"panel-heading\">\n         &lt;h4 class = \"panel-title\">\n            &lt;a data-toggle = \"collapse\" data-parent = \"#accordion\" href = \"#collapseFour\">\n               Click me to expand. Click me again to collapse. Section 4--options method\n            &lt;/a>\n         &lt;/h4>\n      &lt;/div>\n      \n      &lt;div id = \"collapseFour\" class = \"panel-collapse collapse\">\n         &lt;div class = \"panel-body\">\n            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt \n               sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n         &lt;/div>\n      &lt;/div>\n      \n   &lt;/div>\n&lt;/div>\n\n&lt;script type = \"text/javascript\">\n   $(function () { $('#collapseFour').collapse({\n      toggle: false\n   })});\n  \n   $(function () { $('#collapseTwo').collapse('show')});\n   $(function () { $('#collapseThree').collapse('toggle')});\n   $(function () { $('#collapseOne').collapse('hide')});\n&lt;/script> </code></pre>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>The following table lists a few events that can be used with the collapse functionality.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th><th>Example</th></tr><tr><td>show.bs.collapse</td><td>Fired after the show method is called.</td><td>$(&#8216;#identifier&#8217;).on(&#8216;show.bs.collapse&#8217;, function () { // do something })</td></tr><tr><td>shown.bs.collapse</td><td>This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).</td><td>$(&#8216;#identifier&#8217;).on(&#8216;shown.bs.collapse&#8217;, function () { // do something })</td></tr><tr><td>hide.bs.collapse</td><td>Fired when the hide instance method has been called.</td><td>$(&#8216;#identifier&#8217;).on(&#8216;hide.bs.collapse&#8217;, function () { // do something })</td></tr><tr><td>hidden.bs.collapse</td><td>This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).</td><td>$(&#8216;#identifier&#8217;).on(&#8216;hidden.bs.collapse&#8217;, function () { // do something })</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage of events −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"panel-group\" id = \"accordion\">\n   &lt;div class = \"panel panel-info\">\n   \n      &lt;div class = \"panel-heading\">\n         &lt;h4 class = \"panel-title\">\n            &lt;a data-toggle = \"collapse\" data-parent = \"#accordion\" href = \"#collapseexample\">\n               Click me to expand. Click me again to collapse. Section --shown event\n            &lt;/a>\n         &lt;/h4>\n      &lt;/div>\n      \n      &lt;div id = \"collapseexample\" class = \"panel-collapse collapse\">\n         &lt;div class = \"panel-body\">\n            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt\n               sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n         &lt;/div>\n      &lt;/div>\n      \n   &lt;/div>\n&lt;/div>\n\n&lt;script type = \"text/javascript\">\n   $(function () { \n      $('#collapseexample').on('show.bs.collapse', function () {\n         alert('Hey, this alert shows up when you expand it');\n      })\n   });\n&lt;/script> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The collapse plugin makes it easy to make collapsing divisions of the page. Whether you use it to build an accordion navigation or content boxes, it allows for a lot of content options. If you want to include this plugin functionality individually, then you will need the&nbsp;collapse.js. This also requires the&nbsp;Transition Plugin&nbsp;to be included in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4116"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4116"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4116/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4116"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4116"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4116"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4117,
    "date": "2020-08-20T08:10:22",
    "date_gmt": "2020-08-20T08:10:22",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=271"
    },
    "modified": "2020-08-20T08:10:22",
    "modified_gmt": "2020-08-20T08:10:22",
    "slug": "bootstrap-carousel-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-carousel-plugin/",
    "title": {
      "rendered": "Carousel Plugin"
    },
    "content": {
      "rendered": "\n<p>The Bootstrap carousel is a flexible, responsive way to add a slider to your site. In addition to being responsive, the content is flexible enough to allow images, iframes, videos, or just about any type of content that you might want.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need the <strong>carousel.js</strong>. Else, as mentioned in the chapter Bootstrap Plugins Overview, you can include the <em>bootstrap.js</em> or the minified <em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>A simple slideshow below shows a generic component for cycling through the elements like a carousel, using the Bootstrap carousel plugin. To implement the carousel, you just need to add the code with the markup. There is no need for data attributes, just simple class-based development.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"myCarousel\" class = \"carousel slide\">\n   \n   &lt;!-- Carousel indicators -->\n   &lt;ol class = \"carousel-indicators\">\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"0\" class = \"active\">&lt;/li>\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"1\">&lt;/li>\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"2\">&lt;/li>\n   &lt;/ol>   \n   \n   &lt;!-- Carousel items -->\n   &lt;div class = \"carousel-inner\">\n      &lt;div class = \"item active\">\n         &lt;img src = \"/bootstrap/images/slide1.png\" alt = \"First slide\">\n      &lt;/div>\n      \n      &lt;div class = \"item\">\n         &lt;img src = \"/bootstrap/images/slide2.png\" alt = \"Second slide\">\n      &lt;/div>\n      \n      &lt;div class = \"item\">\n         &lt;img src = \"/bootstrap/images/slide3.png\" alt = \"Third slide\">\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;!-- Carousel nav -->\n   &lt;a class = \"carousel-control left\" href = \"#myCarousel\" data-slide = \"prev\">&amp;lsaquo;&lt;/a>\n   &lt;a class = \"carousel-control right\" href = \"#myCarousel\" data-slide = \"next\">&amp;rsaquo;&lt;/a>\n   \n&lt;/div></code></pre>\n\n\n\n<h3>Optional Captions</h3>\n\n\n\n<p>You can add captions to your slides easily with the <strong>.carousel-caption</strong> element within any <strong>.item</strong>. Place just about any optional HTML within there and it will be automatically aligned and formatted. The following example demonstrates this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"myCarousel\" class = \"carousel slide\">\n   \n   &lt;!-- Carousel indicators -->\n   &lt;ol class = \"carousel-indicators\">\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"0\" class = \"active\">&lt;/li>\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"1\">&lt;/li>\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"2\">&lt;/li>\n   &lt;/ol>   \n   \n   &lt;!-- Carousel items -->\n   &lt;div class = \"carousel-inner\">\n      &lt;div class = \"item active\">\n         &lt;img src = \"/bootstrap/images/slide1.png\" alt = \"First slide\">\n         &lt;div class = \"carousel-caption\">This Caption 1&lt;/div>\n      &lt;/div>\n      \n      &lt;div class = \"item\">\n         &lt;img src = \"/bootstrap/images/slide2.png\" alt = \"Second slide\">\n         &lt;div class = \"carousel-caption\">This Caption 2&lt;/div>\n      &lt;/div>\n      \n      &lt;div class = \"item\">\n         &lt;img src = \"/bootstrap/images/slide3.png\" alt = \"Third slide\">\n         &lt;div class = \"carousel-caption\">This Caption 3&lt;/div>\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;!-- Carousel nav --> \n   &lt;a class = \"carousel-control left\" href = \"#myCarousel\" data-slide = \"prev\">&amp;lsaquo;&lt;/a>\n   &lt;a class = \"carousel-control right\" href = \"#myCarousel\" data-slide = \"next\">&amp;rsaquo;&lt;/a>+\n&lt;/div> </code></pre>\n\n\n\n<h2>Usage</h2>\n\n\n\n<ul><li><strong>Via data attributes</strong>&nbsp;− Use data attributes to easily control the position of the carousel.<ul><li>Attribute&nbsp;<strong>data-slide</strong>&nbsp;accepts the keywords&nbsp;<em>prev</em>&nbsp;or&nbsp;<em>next</em>, which alters the slide position relative to its current position.</li><li>Use&nbsp;<strong>data-slide-to</strong>&nbsp;to pass a raw slide index to the carousel&nbsp;<strong>data-slide-to = &#8220;2&#8221;</strong>, which shifts the slide position to a particular index beginning with 0.</li><li>The&nbsp;<strong>data-ride = &#8220;carousel&#8221;</strong>&nbsp;attribute is used to mark a carousel as an animation starting at page load.</li></ul></li><li><strong>Via JavaScript</strong>&nbsp;− The carousel can be manually called with JavaScript as below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('.carousel').carousel()\n</code></pre>\n\n\n\n<h2>Options</h2>\n\n\n\n<p>There are certain, options which can be passed via data attributes or JavaScript are listed in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Option Name</th><th>Type/Default Value</th><th>Data attribute name</th><th>Description</th></tr><tr><td>interval</td><td>number&nbsp;<em>Default − 5000</em></td><td>data-interval</td><td>The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.</td></tr><tr><td>pause</td><td>string&nbsp;<em>Default − &#8220;hover&#8221;</em></td><td>data-pause</td><td>Pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on mouseleave.</td></tr><tr><td>wrap</td><td>boolean&nbsp;<em>Default − true</em></td><td>data-wrap</td><td>Whether the carousel should cycle continuously or have hard stops.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>Here is a list of useful methods that can be used with carousel code.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th><th>Example</th></tr><tr><td>.carousel(options)</td><td>Initializes the carousel with an optional options object and starts cycling through items.</td><td>$(&#8216;#identifier&#8217;).carousel({ interval: 2000 })</td></tr><tr><td>.carousel(&#8216;cycle&#8217;)</td><td>Cycles through the carousel items from left to right.</td><td>$(&#8216;#identifier&#8217;).carousel(&#8216;cycle&#8217;)</td></tr><tr><td>.carousel(&#8216;pause&#8217;)</td><td>Stops the carousel from cycling through items.</td><td>$(&#8216;#identifier&#8217;)..carousel(&#8216;pause&#8217;)</td></tr><tr><td>.carousel(number)</td><td>Cycles the carousel to a particular frame (0 based, similar to an array).</td><td>$(&#8216;#identifier&#8217;).carousel(number)</td></tr><tr><td>.carousel(&#8216;prev&#8217;)</td><td>Cycles to the previous item.</td><td>$(&#8216;#identifier&#8217;).carousel(&#8216;prev&#8217;)</td></tr><tr><td>.carousel(&#8216;next&#8217;)</td><td>Cycles to the next item.</td><td>$(&#8216;#identifier&#8217;).carousel(&#8216;next&#8217;)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage of methods −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"myCarousel\" class = \"carousel slide\">\n   \n   &lt;!-- Carousel indicators -->\n   &lt;ol class = \"carousel-indicators\">\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"0\" class = \"active\">&lt;/li>\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"1\">&lt;/li>\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"2\">&lt;/li>\n   &lt;/ol>   \n   \n   &lt;!-- Carousel items -->\n   &lt;div class = \"carousel-inner\">\n      &lt;div class = \"item active\">\n         &lt;img src = \"/bootstrap/images/slide1.png\" alt = \"First slide\">\n      &lt;/div>\n      \n      &lt;div class = \"item\">\n         &lt;img src = \"/bootstrap/images/slide2.png\" alt = \"Second slide\">\n      &lt;/div>\n      \n      &lt;div class = \"item\">\n         &lt;img src = \"/bootstrap/images/slide3.png\" alt = \"Third slide\">\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;!-- Carousel nav -->\n   &lt;a class = \"carousel-control left\" href = \"#myCarousel\" data-slide = \"prev\">&amp;lsaquo;&lt;/a>\n   &lt;a class = \"carousel-control right\" href = \"#myCarousel\" data-slide = \"next\">&amp;rsaquo;&lt;/a>\n   \n   &lt;!-- Controls buttons -->\n   &lt;div style = \"text-align:center;\">\n      &lt;input type = \"button\" class = \"btn prev-slide\" value = \"Previous Slide\">\n      &lt;input type = \"button\" class = \"btn next-slide\" value = \"Next Slide\">\n      &lt;input type = \"button\" class = \"btn slide-one\" value = \"Slide 1\">\n      &lt;input type = \"button\" class = \"btn slide-two\" value = \"Slide 2\">            \n      &lt;input type = \"button\" class = \"btn slide-three\" value = \"Slide 3\">\n   &lt;/div>\n\t\n&lt;/div> \n\n&lt;script>\n   $(function() {\n\t\n      // Cycles to the previous item\n      $(\".prev-slide\").click(function() {\n         $(\"#myCarousel\").carousel('prev');\n      });\n      \n      // Cycles to the next item\n      $(\".next-slide\").click(function() {\n         $(\"#myCarousel\").carousel('next');\n      });\n      \n      // Cycles the carousel to a particular frame \n      $(\".slide-one\").click(function() {\n         $(\"#myCarousel\").carousel(0);\n      });\n      \n      $(\".slide-two\").click(function() {\n         $(\"#myCarousel\").carousel(1);\n      });\n      \n      $(\".slide-three\").click(function() {\n         $(\"#myCarousel\").carousel(2);\n      });\n   });\n&lt;/script></code></pre>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>Bootstrap&#8217;s carousel class exposes two events for hooking into carousel functionality which are listed in the following table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th><th>Example</th></tr><tr><td>slide.bs.carousel</td><td>This event fires immediately when the slide instance method is invoked.</td><td>$(&#8216;#identifier&#8217;).on(&#8216;slide.bs.carousel&#8217;, function () { // do something })</td></tr><tr><td>slid.bs.carousel</td><td>This event is fired when the carousel has completed its slide transition.</td><td>$(&#8216;#identifier&#8217;).on(&#8216;slid.bs.carousel&#8217;, function () { // do something })</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage of events −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"myCarousel\" class = \"carousel slide\">\n   \n   &lt;!-- Carousel indicators -->\n   &lt;ol class = \"carousel-indicators\">\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"0\" class = \"active\">&lt;/li>\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"1\">&lt;/li>\n      &lt;li data-target = \"#myCarousel\" data-slide-to = \"2\">&lt;/li>\n   &lt;/ol>   \n   \n   &lt;!-- Carousel items -->\n   &lt;div class = \"carousel-inner\">\n      &lt;div class = \"item active\">\n         &lt;img src = \"/bootstrap/images/slide1.png\" alt = \"First slide\">\n      &lt;/div>\n      \n      &lt;div class = \"item\">\n         &lt;img src = \"/bootstrap/images/slide2.png\" alt = \"Second slide\">\n      &lt;/div>\n      \n      &lt;div class = \"item\">\n         &lt;img src = \"/bootstrap/images/slide3.png\" alt = \"Third slide\">\n      &lt;/div>\n   &lt;/div>\n   \n   &lt;!-- Carousel nav -->\n   &lt;a class = \"carousel-control left\" href = \"#myCarousel\" data-slide = \"prev\">&amp;lsaquo;&lt;/a>\n   &lt;a class = \"carousel-control right\" href = \"#myCarousel\" data-slide = \"next\">&amp;rsaquo;&lt;/a>\n\t\n&lt;/div> \n\n&lt;script>\n   $(function() {\n      $('#myCarousel').on('slide.bs.carousel', function () {\n         alert(\"This event fires immediately when the slide instance method\" +\"is invoked.\");\n      });\n   });\n&lt;/script></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Bootstrap carousel is a flexible, responsive way to add a slider to your site. In addition to being responsive, the content is flexible enough to allow images, iframes, videos, or just about any type of content that you might want. If you want to include this plugin functionality individually, then you will need the carousel.js. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4117"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4117"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4117/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4117"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4117"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4117"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4118,
    "date": "2020-08-20T08:16:06",
    "date_gmt": "2020-08-20T08:16:06",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=273"
    },
    "modified": "2020-08-20T08:16:06",
    "modified_gmt": "2020-08-20T08:16:06",
    "slug": "bootstrap-affix-plugin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/bootstrap-affix-plugin/",
    "title": {
      "rendered": "Affix Plugin"
    },
    "content": {
      "rendered": "\n<p>The affix plugin allows a &lt;div&gt; to become affixed to a location on the page. You can also toggle it&#8217;s pinning on and off using this plugin. A common example of this are social icons. They will start in a location, but as the page hits a certain mark, the &lt;div&gt; will be locked in place and will stop scrolling with the rest of the page.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you want to include this plugin functionality individually, then you will need the&nbsp;<strong>affix.js</strong>. Else, as mentioned in the chapter&nbsp;Bootstrap Plugins Overview, you can include the&nbsp;<em>bootstrap.js</em>&nbsp;or the minified&nbsp;<em>bootstrap.min.js</em>.</p></blockquote>\n\n\n\n<h2>Usage</h2>\n\n\n\n<p>You can use the affix plugin via data attributes or manually with your own JavaScript as discussed below.</p>\n\n\n\n<ul><li><strong>Via data attributes</strong>&nbsp;− To easily add affix behavior to any element, just add&nbsp;<strong>data-spy = &#8220;affix&#8221;</strong>&nbsp;to the element you want to spy on. Use offsets to define when to toggle the pinning of an element.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage through data attributes −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n   &lt;div class = \"jumbotron\">\n      &lt;h1>Bootstrap Affix Plugin example&lt;/h1>\n   &lt;/div>\n   \n   &lt;div id = \"myNav\"  data-spy = \"affix\" data-offset-top = \"60\" data-offset-bottom = \"200\">\n\t\n      &lt;div class = \"col-md-3\">\n         &lt;ul class = \"nav nav-tabs nav-stacked affix\" data-spy = \"affix\" data-offset-top = \"190\">\n            &lt;li class = \"active\">&lt;a href = \"#one\">Tutorial One&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#two\">Tutorial Two&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#three\">Tutorial Three&lt;/a>&lt;/li>\n         &lt;/ul>\n      &lt;/div>\n      \n      &lt;div class = \"col-md-9\">\n         &lt;h2 id = \"one\">Tutorial One&lt;/h2>\n         \n         &lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n            Nam eu sem tempor, varius quam at, luctus dui. Mauris magna metus,\n            dapibus nec turpis vel, semper malesuada ante. Vestibulum \n            id metus ac nisl bibendum scelerisque non non purus. Suspendisse \n            varius nibh non aliquet sagittis. In tincidunt orci sit amet \n            elementum vestibulum. Vivamus fermentum in arcu in aliquam. Quisque \n            aliquam porta odio in fringilla. Vivamus nisl leo, blandit at bibendum \n            eu, tristique eget risus. Integer aliquet quam ut elit suscipit, \n            id interdum neque porttitor. Integer faucibus ligula.&lt;/p>\n\t\t\t\t\n         &lt;p>Vestibulum quis quam ut magna consequat faucibus. \n            Pellentesque eget nisi a mi suscipit tincidunt. Ut tempus dictum \n            risus. Pellentesque viverra sagittis quam at mattis. Suspendisse\n            potenti. Aliquam sit amet gravida nibh, facilisis gravida odio.\n            Phasellus auctor velit at lacus blandit, commodo iaculis justo\n            viverra. Etiam vitae est arcu. Mauris vel congue dolor. Aliquam eget\n            mi mi. Fusce quam tortor, commodo ac dui quis, bibendum viverra erat.\n            Maecenas mattis lectus enim, quis tincidunt dui molestie euismod.\n            Curabitur et diam tristique, accumsan nunc eu, hendrerit tellus.&lt;/p>\n\t\t\t\t\n         &lt;hr>\n         \n         &lt;h2 id = \"two\">Tutorial Two&lt;/h2>\n\t\t\t\n         &lt;p>Nullam hendrerit justo non leo aliquet imperdiet. Etiam in \n            sagittis lectus. Suspendisse ultrices placerat accumsan. Mauris quis \n            dapibus orci. In dapibus velit blandit pharetra tincidunt. \n            Quisque non sapien nec lacus condimentum facilisis ut iaculis enim.\n            Sed viverra interdum bibendum. Donec ac sollicitudin dolor. Sed \n            fringilla vitae lacus at rutrum. Phasellus congue vestibulum ligula sed consequat.&lt;/p>\n\t\t\t\t\n         &lt;p>Vestibulum consectetur scelerisque lacus, ac fermentum lorem \n            convallis sed. Nam odio tortor, dictum quis malesuada at, \n            pellentesque vitae orci. Vivamus elementum, felis eu auctor lobortis,\n            diam velit egestas lacus, quis fermentum metus ante quis urna. Sed at \n            facilisis libero. Cum sociis natoque penatibus et magnis dis\n            parturient montes, nascetur ridiculus mus. Vestibulum bibendum \n            blandit dolor. Nunc orci dolor, molestie nec nibh in, hendrerit\n            tincidunt ante. Vivamus sem augue, hendrerit non sapien in, \n            mollis ornare augue.&lt;/p>\n\t\t\t\t\n         &lt;hr>\n         \n         &lt;h2 id = \"three\">Tutorial Three&lt;/h2>\n\t\t\t\n         &lt;p>Integer pulvinar leo id risus pellentesque vestibulum. \n            Sed diam libero, sodales eget sapien vel, porttitor bibendum enim. \n            Donec sed nibh vitae lorem porttitor blandit in nec ante. \n            Pellentesque vitae metus ipsum. Phasellus sed nunc ac sem malesuada \n            condimentum. Etiam in aliquam lectus. Nam vel sapien diam. Donec\n            pharetra id arcu eget blandit. Proin imperdiet mattis augue in\n            porttitor. Quisque tempus enim id lobortis feugiat. Suspendisse \n            tincidunt risus quis dolor fringilla blandit. Ut sed sapien at purus\n            lacinia porttitor. Nullam iaculis, felis a pretium ornare, dolor nisl\n            semper tortor, vel sagittis lacus est consequat eros. Sed id pretium\n            nisl. Curabitur dolor nisl, laoreet vitae aliquam id, tincidunt sit \n            amet mauris. &lt;/p>\n\t\t\t\t\n         &lt;p>Phasellus vitae suscipit justo. Mauris pharetra feugiat ante \n            id lacinia. Etiam faucibus mauris id tempor egestas. Duis luctus\n            turpis at accumsan tincidunt. Phasellus risus risus,\n            volutpat vel tellus ac, tincidunt fringilla massa. Etiam hendrerit \n            dolor eget ante rutrum adipiscing. Cras interdum ipsum mattis, \n            tempus mauris vel, semper ipsum. Duis sed dolor ut enim lobortis \n            pellentesque ultricies ac ligula. Pellentesque convallis  elit nisi, id \n            vulputate ipsum ullamcorper ut. Cras ac pulvinar purus, ac viverra est. Suspendisse \n            potenti. Integer pellentesque neque et elementum tempus. \n            Curabitur bibendum in ligula ut rhoncus.&lt;/p>\n\t\t\t\t\n         &lt;p>Quisque pharetra velit id velit iaculis pretium. Nullam a justo \n            sed ligula porta semper eu quis enim. Pellentesque pellentesque,\n            metus at facilisis hendrerit, lectus velit facilisis leo, quis\n            volutpat turpis arcu quis enim. Nulla viverra lorem elementum\n            interdum ultricies. Suspendisse accumsan quam nec ante mollis tempus.\n            Morbi vel accumsan diam, eget convallis tellus. Suspendisse potenti.&lt;/p>\n      &lt;/div>\n      \n   &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<ul><li><strong>Via JavaScript</strong>&nbsp;− You can affix an element manually with JavaScript as shown below</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$('#myAffix').affix({\n   offset: {\n      top: 100, bottom: function () {\n         return (this.bottom = $('.bs-footer').outerHeight(true))\n      }\n   }\n})</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the usage through data attributes −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container\">\n   &lt;div class = \"jumbotron\">\n      &lt;h1>Bootstrap Affix Plugin example&lt;/h1>\n   &lt;/div>\n   \n   &lt;div>\n\t\n      &lt;div class = \"col-md-3\">\n         &lt;ul class = \"nav nav-tabs nav-stacked affix\" id = \"myNav\">\n            &lt;li class = \"active\">&lt;a href = \"#one\">Tutorial One&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#two\">Tutorial Two&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#three\">Tutorial Three&lt;/a>&lt;/li>\n         &lt;/ul>\n      &lt;/div>\n      \n      &lt;div class = \"col-md-9\">\n         &lt;h2 id = \"one\">Tutorial One&lt;/h2>\n\t\t\t\n         &lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n            Nam eu sem tempor, varius quam at, luctus dui. Mauris magna metus, \n            dapibus nec turpis vel, semper malesuada ante. Vestibulum id metus\n            ac nisl bibendum scelerisque non non purus. Suspendisse varius nibh \n            non aliquet sagittis. In tincidunt orci sit amet elementum vestibulum. \n            Vivamus fermentum in arcu in aliquam. Quisque aliquam porta odio \n            in fringilla. Vivamus nisl leo, blandit at bibendum eu, tristique \n            eget risus. Integer aliquet quam ut elit suscipit, id interdum \n            neque porttitor. Integer faucibus ligula.&lt;/p>\n\t\t\t\t\n         &lt;p>Vestibulum quis quam ut magna consequat faucibus. \n            Pellentesque eget nisi a mi suscipit tincidunt. Ut tempus dictum\n            risus. Pellentesque viverra sagittis quam at mattis. Suspendisse\n            potenti. Aliquam sit amet gravida nibh, facilisis gravida odio.\n            Phasellus auctor velit at lacus blandit, commodo iaculis justo\n            viverra. Etiam vitae est arcu. Mauris vel congue dolor. \n            Aliquam eget mi mi. Fusce quam tortor, commodo ac dui quis,\n            bibendum viverra erat. Maecenas mattis lectus enim, quis tincidunt\n            dui molestie euismod. Curabitur et diam tristique, accumsan nunc eu,\n            hendrerit tellus.&lt;/p>\n\t\t\t\t\n         &lt;hr>\n         \n         &lt;h2 id = \"two\">Tutorial Two&lt;/h2>\n\t\t\t\n         &lt;p>Nullam hendrerit justo non leo aliquet imperdiet. Etiam in\n            sagittis lectus. Suspendisse ultrices placerat accumsan. Mauris \n            quis dapibus orci. In dapibus velit blandit pharetra tincidunt.\n            Quisque non sapien nec lacus condimentum facilisis ut iaculis enim.\n            Sed viverra interdum bibendum. Donec ac sollicitudin dolor. \n            Sed fringilla vitae lacus at rutrum. Phasellus congue vestibulum \n            ligula sed consequat.&lt;/p>\n\t\t\t\t\n         &lt;p>Vestibulum consectetur scelerisque lacus, ac fermentum lorem \n            convallis sed. Nam odio tortor, dictum quis malesuada at, \n            pellentesque vitae orci. Vivamus elementum, felis eu auctor lobortis,\n            diam velit egestas lacus, quis fermentum metus ante quis urna. \n            Sed at facilisis libero. Cum sociis natoque penatibus et magnis dis \n            parturient montes, nascetur ridiculus mus. Vestibulum bibendum \n            blandit dolor. Nunc orci dolor, molestie nec nibh in, hendrerit\n            tincidunt ante. Vivamus sem augue, hendrerit non sapien in, \n            mollis ornare augue.&lt;/p>\n\t\t\t\t\n         &lt;hr>\n         \n         &lt;h2 id = \"three\">Tutorial Three&lt;/h2>\n\t\t\t\n         &lt;p>Integer pulvinar leo id risus pellentesque vestibulum. \n            Sed diam libero, sodales eget sapien vel, porttitor bibendum enim. \n            Donec sed nibh vitae lorem porttitor blandit in nec ante. \n            Pellentesque vitae metus ipsum. Phasellus sed nunc ac sem malesuada\n            condimentum. Etiam in aliquam lectus. Nam vel sapien diam. \n            Donec pharetra id arcu eget blandit. Proin imperdiet mattis augue in \n            porttitor. Quisque tempus enim id lobortis feugiat. Suspendisse \n            tincidunt risus quis dolor fringilla blandit. Ut sed sapien at\n            purus lacinia porttitor. Nullam iaculis, felis a pretium ornare,\n            dolor nisl semper tortor, vel sagittis lacus est consequat eros. \n            Sed id pretium nisl. Curabitur dolor nisl, laoreet vitae aliquam id, \n            tincidunt sit amet mauris.&lt;/p>\n\t\t\t\t\n         &lt;p>Phasellus vitae suscipit justo. Mauris pharetra feugiat ante id\n            lacinia. Etiam faucibus mauris id tempor egestas. Duis luctus turpis\n            at accumsan tincidunt. Phasellus risus risus, volutpat vel tellus ac,\n            tincidunt fringilla massa. Etiam hendrerit dolor eget ante \n            rutrum adipiscing. Cras interdum ipsum mattis, tempus mauris vel,\n            semper ipsum. Duis sed dolor ut enim lobortis pellentesque ultricies\n            ac ligula. Pellentesque convallis  elit nisi, id vulputate ipsum\n            ullamcorper ut. Cras ac pulvinar purus, ac viverra est. Suspendisse \n            potenti. Integer pellentesque neque et elementum tempus. \n            Curabitur bibendum in ligula ut rhoncus.&lt;/p>\n\t\t\t\t\n         &lt;p>Quisque pharetra velit id velit iaculis pretium. Nullam a justo\n            sed ligula porta semper eu quis enim. Pellentesque pellentesque,\n            metus at facilisis hendrerit, lectus velit facilisis leo, quis \n            volutpat turpis arcu quis enim. Nulla viverra lorem elementum \n            interdum ultricies. Suspendisse accumsan quam nec ante mollis tempus.\n            Morbi vel accumsan diam, eget convallis tellus. Suspendisse potenti.&lt;/p>\n      &lt;/div>\n      \n   &lt;/div>\n&lt;/div>\n\n&lt;script type = \"text/javascript\">\n   $(function () {\n      $('#myNav').affix({\n         offset: {\n            top: 60  \n         }\n      });\n   });\n&lt;/script></code></pre>\n\n\n\n<h2>Positioning via CSS</h2>\n\n\n\n<p>In both the above situations, you must provide CSS for the positioning of your content. The affix plugin toggles between three classes, each representing a particular state −&nbsp;<em>.affix, .affix-top, and .affix-bottom</em>. Follow the below steps to set your CSS for either of the above usage options.</p>\n\n\n\n<ul><li>To start, the plugin adds&nbsp;<strong>.affix-top</strong>&nbsp;to indicate the element is in its top-most position. At this point no CSS positioning is required.</li><li>Scrolling past the element you want affixed should trigger the actual affixing. This is where&nbsp;<strong>.affix</strong>&nbsp;replaces&nbsp;<strong>.affix-top</strong>&nbsp;and sets&nbsp;<strong>position: fixed;</strong>&nbsp;(provided by Bootstrap&#8217;s code CSS).</li><li>If a bottom offset is defined, scrolling past that should replace&nbsp;<strong>.affix</strong>&nbsp;with&nbsp;<strong>.affix-bottom</strong>. Since offsets are optional, setting one requires you to set the appropriate CSS. In this case, add&nbsp;<strong>position: absolute;</strong>&nbsp;when necessary.</li></ul>\n\n\n\n<h2>Options</h2>\n\n\n\n<p>There are certain options which can be passed via data attributes or JavaScript as listed in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Option Name</th><th>Type/Default Value</th><th>Data attribute name</th><th>Description</th></tr><tr><td>offset</td><td>number | function | object&nbsp;<em>Default: 10</em></td><td>data-offset</td><td>Pixels to offset from screen when calculating position of scroll. If a single number is provided, the offset will be applied in both the top and bottom directions. To provide a unique, bottom and top offset just provide an object offset: { top: 10 } or offset: { top: 10, bottom: 5 }. Use a function when you need to dynamically calculate an offset.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The affix plugin allows a &lt;div&gt; to become affixed to a location on the page. You can also toggle it&#8217;s pinning on and off using this plugin. A common example of this are social icons. They will start in a location, but as the page hits a certain mark, the &lt;div&gt; will be locked in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      58
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4118"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4118"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4118/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4118"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4118"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4118"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]