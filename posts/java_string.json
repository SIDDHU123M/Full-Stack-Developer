[
    {
        "id": 549,
        "date": "2020-06-24T10:14:42",
        "date_gmt": "2020-06-24T10:14:42",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=549"
        },
        "modified": "2020-07-16T10:28:49",
        "modified_gmt": "2020-07-16T10:28:49",
        "slug": "string",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string\/",
        "title": {
            "rendered": "String"
        },
        "content": {
            "rendered": "\n<p>In\u00a0Java, string is basically an object that represents sequence of char values. An\u00a0array\u00a0of characters works same as Java string. For example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>char&#91;] ch={'j','a','v','a','t','p','o','i','n','t'};  \nString s=new String(ch);  <\/code><\/pre>\n\n\n\n<p>is same as:<\/p>\n\n\n\n<ol><li>String&nbsp;s=&#8221;codemeals&#8221;;&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<p><strong>Java String<\/strong>&nbsp;class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc.<\/p>\n\n\n\n<p>The java.lang.String class implements&nbsp;<em>Serializable<\/em>,&nbsp;<em>Comparable<\/em>&nbsp;and&nbsp;<em>CharSequence<\/em>&nbsp;interfaces.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/core\/string-implements.png\" alt=\"String in Java\"\/><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>CharSequence Interface<\/h2>\n\n\n\n<p>The CharSequence interface is used to represent the sequence of characters. String,&nbsp;StringBuffer&nbsp;and&nbsp;StringBuilder&nbsp;classes implement it. It means, we can create strings in java by using these three classes.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/core\/charsequence.png\" alt=\"CharSequence in Java\"\/><\/figure>\n\n\n\n<p>The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes.<\/p>\n\n\n\n<p>We will discuss immutable string later. Let&#8217;s first understand what is String in Java and how to create the String object.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>What is String in java<\/h3>\n\n\n\n<p>Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object.<\/p>\n\n\n\n<h3>How to create a string object?<\/h3>\n\n\n\n<p>There are two ways to create String object:<\/p>\n\n\n\n<ol><li>By string literal<\/li><li>By new keyword<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>1) String Literal<\/h3>\n\n\n\n<p>Java String literal is created by using double quotes. For Example:<\/p>\n\n\n\n<ol><li>String&nbsp;s=&#8221;welcome&#8221;;&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<p>Each time you create a string literal, the JVM checks the &#8220;string constant pool&#8221; first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn&#8217;t exist in the pool, a new string instance is created and placed in the pool. For example:<\/p>\n\n\n\n<ol><li>String&nbsp;s1=&#8221;Welcome&#8221;;&nbsp;&nbsp;<\/li><li class=\"\">String&nbsp;s2=&#8221;Welcome&#8221;;\/\/It&nbsp;doesn&#8217;t&nbsp;create&nbsp;a&nbsp;new&nbsp;instance&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/string.JPG\" alt=\"Java string literal\"\/><\/figure>\n\n\n\n<p>In the above example, only one object will be created. Firstly, JVM will not find any string object with the value &#8220;Welcome&#8221; in string constant pool, that is why it will create a new object. After that it will find the string with the value &#8220;Welcome&#8221; in the pool, it will not create a new object but will return the reference to the same instance.<\/p>\n\n\n\n<h4>Note: String objects are stored in a special memory area known as the &#8220;string constant pool&#8221;.<\/h4>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Why Java uses the concept of String literal?<\/h3>\n\n\n\n<p>To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool).<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>2) By new keyword<\/h3>\n\n\n\n<ol><li>String&nbsp;s=<strong>new<\/strong>&nbsp;String(&#8220;Welcome&#8221;);\/\/creates&nbsp;two&nbsp;objects&nbsp;and&nbsp;one&nbsp;reference&nbsp;variable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<p>In such case,&nbsp;JVM&nbsp;will create a new string object in normal (non-pool) heap memory, and the literal &#8220;Welcome&#8221; will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool).<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java String Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringExample{  \npublic static void main(String args&#91;]){  \nString s1=\"java\";\/\/creating string by java string literal  \nchar ch&#91;]={'s','t','r','i','n','g','s'};  \nString s2=new String(ch);\/\/converting char array to string  \nString s3=new String(\"example\");\/\/creating java string by new keyword  \nSystem.out.println(s1);  \nSystem.out.println(s2);  \nSystem.out.println(s3);  \n}}  \n\n\n<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>java\nstrings\nexample<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java String class methods<\/h3>\n\n\n\n<p>The java.lang.String class provides many useful methods to perform operations on sequence of char values.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>No.<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>char charAt(int index)<\/td><td>returns char value for the particular index<\/td><\/tr><tr><td>2<\/td><td>int length()<\/td><td>returns string length<\/td><\/tr><tr><td>3<\/td><td>static String format(String format, Object&#8230; args)<\/td><td>returns a formatted string.<\/td><\/tr><tr><td>4<\/td><td>static String format(Locale l, String format, Object&#8230; args)<\/td><td>returns formatted string with given locale.<\/td><\/tr><tr><td>5<\/td><td>String substring(int beginIndex)<\/td><td>returns substring for given begin index.<\/td><\/tr><tr><td>6<\/td><td>String substring(int beginIndex, int endIndex)<\/td><td>returns substring for given begin index and end index.<\/td><\/tr><tr><td>7<\/td><td>boolean contains(CharSequence s)<\/td><td>returns true or false after matching the sequence of char value.<\/td><\/tr><tr><td>8<\/td><td>static String join(CharSequence delimiter, CharSequence&#8230; elements)<\/td><td>returns a joined string.<\/td><\/tr><tr><td>9<\/td><td>static String join(CharSequence delimiter, Iterable&lt;? extends CharSequence&gt; elements)<\/td><td>returns a joined string.<\/td><\/tr><tr><td>10<\/td><td>boolean equals(Object another)<\/td><td>checks the equality of string with the given object.<\/td><\/tr><tr><td>11<\/td><td>boolean isEmpty()<\/td><td>checks if string is empty.<\/td><\/tr><tr><td>12<\/td><td>String concat(String str)<\/td><td>concatenates the specified string.<\/td><\/tr><tr><td>13<\/td><td>String replace(char old, char new)<\/td><td>replaces all occurrences of the specified char value.<\/td><\/tr><tr><td>14<\/td><td>String replace(CharSequence old, CharSequence new)<\/td><td>replaces all occurrences of the specified CharSequence.<\/td><\/tr><tr><td>15<\/td><td>static String equalsIgnoreCase(String another)<\/td><td>compares another string. It doesn&#8217;t check case.<\/td><\/tr><tr><td>16<\/td><td>String[] split(String regex)<\/td><td>returns a split string matching regex.<\/td><\/tr><tr><td>17<\/td><td>String[] split(String regex, int limit)<\/td><td>returns a split string matching regex and limit.<\/td><\/tr><tr><td>18<\/td><td>String intern()<\/td><td>returns an interned string.<\/td><\/tr><tr><td>19<\/td><td>int indexOf(int ch)<\/td><td>returns the specified char value index.<\/td><\/tr><tr><td>20<\/td><td>int indexOf(int ch, int fromIndex)<\/td><td>returns the specified char value index starting with given index.<\/td><\/tr><tr><td>21<\/td><td>int indexOf(String substring)<\/td><td>returns the specified substring index.<\/td><\/tr><tr><td>22<\/td><td>int indexOf(String substring, int fromIndex)<\/td><td>returns the specified substring index starting with given index.<\/td><\/tr><tr><td>23<\/td><td>String toLowerCase()<\/td><td>returns a string in lowercase.<\/td><\/tr><tr><td>24<\/td><td>String toLowerCase(Locale l)<\/td><td>returns a string in lowercase using specified locale.<\/td><\/tr><tr><td>25<\/td><td>String toUpperCase()<\/td><td>returns a string in uppercase.<\/td><\/tr><tr><td>26<\/td><td>String toUpperCase(Locale l)<\/td><td>returns a string in uppercase using specified locale.<\/td><\/tr><tr><td>27<\/td><td>String trim()<\/td><td>removes beginning and ending spaces of this string.<\/td><\/tr><tr><td>28<\/td><td>static String valueOf(int value)<\/td><td>converts given type into string. It is an overloaded method.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In\u00a0Java, string is basically an object that represents sequence of char values. An\u00a0array\u00a0of characters works same as Java string. For example: is same as: String&nbsp;s=&#8221;codemeals&#8221;;&nbsp;&nbsp; Java String&nbsp;class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements&nbsp;Serializable,&nbsp;Comparable&nbsp;and&nbsp;CharSequence&nbsp;interfaces. CharSequence Interface [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/549"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=549"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/549\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 915,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/549\/revisions\/915"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=549"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=549"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=549"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 550,
        "date": "2020-06-24T10:17:48",
        "date_gmt": "2020-06-24T10:17:48",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=550"
        },
        "modified": "2020-07-16T10:29:22",
        "modified_gmt": "2020-07-16T10:29:22",
        "slug": "immutable-string",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/immutable-string\/",
        "title": {
            "rendered": "Immutable String"
        },
        "content": {
            "rendered": "\n<p>In java,&nbsp;<strong>string objects are immutable<\/strong>. Immutable simply means unmodifiable or unchangeable.<\/p>\n\n\n\n<p>Once string object is created its data or state can&#8217;t be changed but a new string object is created.<\/p>\n\n\n\n<p>Let&#8217;s try to understand the immutability concept by the example given below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Testimmutablestring{  \n public static void main(String args&#91;]){  \n   String s=\"Sachin\";  \n   s.concat(\" Tendulkar\");\/\/concat() method appends the string at the end  \n   System.out.println(s);\/\/will print Sachin because strings are immutable objects  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Sachin\n<\/code><\/pre>\n\n\n\n<p>Now it can be understood by the diagram given below. Here Sachin is not changed but a new object is created with sachintendulkar. That is why string is known as immutable.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/string2.JPG\" alt=\"Heap diagram\"\/><\/figure>\n\n\n\n<p>As you can see in the above figure that two objects are created but s reference variable still refers to &#8220;Sachin&#8221; not to &#8220;Sachin Tendulkar&#8221;.<\/p>\n\n\n\n<p>But if we explicitely assign it to the reference variable, it will refer to &#8220;Sachin Tendulkar&#8221; object.For example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Testimmutablestring1{  \n public static void main(String args&#91;]){  \n   String s=\"Saqib\";  \n   s=s.concat(\" Khan\");  \n   System.out.println(s);  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Test it Now<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Output:Saqib Khan<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In java,&nbsp;string objects are immutable. Immutable simply means unmodifiable or unchangeable. Once string object is created its data or state can&#8217;t be changed but a new string object is created. Let&#8217;s try to understand the immutability concept by the example given below: Now it can be understood by the diagram given below. Here Sachin is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/550"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=550"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/550\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 916,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/550\/revisions\/916"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=550"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=550"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=550"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 548,
        "date": "2020-06-24T10:20:29",
        "date_gmt": "2020-06-24T10:20:29",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=548"
        },
        "modified": "2020-06-24T10:20:29",
        "modified_gmt": "2020-06-24T10:20:29",
        "slug": "string-compare",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-compare\/",
        "title": {
            "rendered": "String compare"
        },
        "content": {
            "rendered": "\n<p>We can compare string in java on the basis of content and reference.<\/p>\n\n\n\n<p>It is used in&nbsp;<strong>authentication<\/strong>&nbsp;(by equals() method),&nbsp;<strong>sorting<\/strong>&nbsp;(by compareTo() method),&nbsp;<strong>reference matching<\/strong>&nbsp;(by == operator) etc.<\/p>\n\n\n\n<p>There are three ways to compare string in java:<\/p>\n\n\n\n<ol><li>By equals() method<\/li><li>By = = operator<\/li><li>By compareTo() method<\/li><\/ol>\n\n\n\n<h2>1) String compare by equals() method<\/h2>\n\n\n\n<p>The String equals() method compares the original content of the string. It compares values of string for equality. String class provides two methods:<\/p>\n\n\n\n<ul><li><strong>public boolean equals(Object another)<\/strong>\u00a0compares this string to the specified object.<\/li><li><strong>public boolean equalsIgnoreCase(String another)<\/strong>\u00a0compares this String to another string, ignoring case.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class Teststringcomparison1{  \n public static void main(String args&#91;]){  \n   String s1=\"Sachin\";  \n   String s2=\"Sachin\";  \n   String s3=new String(\"Sachin\");  \n   String s4=\"Saurav\";  \n   System.out.println(s1.equals(s2));\/\/true  \n   System.out.println(s1.equals(s3));\/\/true  \n   System.out.println(s1.equals(s4));\/\/false  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\">Output:true\n       true\n       false\n\n\n\n<\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>class Teststringcomparison2{  \n public static void main(String args&#91;]){  \n   String s1=\"Sachin\";  \n   String s2=\"SACHIN\";  \n  \n   System.out.println(s1.equals(s2));\/\/false  \n   System.out.println(s1.equalsIgnoreCase(s2));\/\/true  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\ntrue<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>2) String compare by == operator<\/h2>\n\n\n\n<p>The = = operator compares references not values.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Teststringcomparison3{  \n public static void main(String args&#91;]){  \n   String s1=\"Sachin\";  \n   String s2=\"Sachin\";  \n   String s3=new String(\"Sachin\");  \n   System.out.println(s1==s2);\/\/true (because both refer to same instance)  \n   System.out.println(s1==s3);\/\/false(because s3 refers to instance created in nonpool)  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:true\n       false<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>3) String compare by compareTo() method<\/h2>\n\n\n\n<p>The String compareTo() method compares values lexicographically and returns an integer value that describes if first string is less than, equal to or greater than second string.<\/p>\n\n\n\n<p>Suppose s1 and s2 are two string variables. If:<\/p>\n\n\n\n<ul><li><strong>s1 == s2<\/strong>\u00a0:0<\/li><li><strong>s1 > s2\u00a0<\/strong>\u00a0 :positive value<\/li><li><strong>s1 &lt; s2\u00a0<\/strong>\u00a0 :negative value<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class Teststringcomparison4{  \n public static void main(String args&#91;]){  \n   String s1=\"Sachin\";  \n   String s2=\"Sachin\";  \n   String s3=\"Ratan\";  \n   System.out.println(s1.compareTo(s2));\/\/0  \n   System.out.println(s1.compareTo(s3));\/\/1(because s1>s3)  \n   System.out.println(s3.compareTo(s1));\/\/-1(because s3 &lt; s1 )  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:0\n       1\n       -1<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We can compare string in java on the basis of content and reference. It is used in&nbsp;authentication&nbsp;(by equals() method),&nbsp;sorting&nbsp;(by compareTo() method),&nbsp;reference matching&nbsp;(by == operator) etc. There are three ways to compare string in java: By equals() method By = = operator By compareTo() method 1) String compare by equals() method The String equals() method compares [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/548"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=548"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/548\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 553,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/548\/revisions\/553"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=548"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=548"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=548"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 546,
        "date": "2020-06-24T10:23:06",
        "date_gmt": "2020-06-24T10:23:06",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=546"
        },
        "modified": "2020-06-24T10:23:06",
        "modified_gmt": "2020-06-24T10:23:06",
        "slug": "string-concatenation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-concatenation\/",
        "title": {
            "rendered": "String Concatenation"
        },
        "content": {
            "rendered": "\n<p>In java, string concatenation forms a new string&nbsp;<em>that is<\/em>&nbsp;the combination of multiple strings. There are two ways to concat string in java:<\/p>\n\n\n\n<ol><li>By + (string concatenation) operator<\/li><li>By concat() method<\/li><\/ol>\n\n\n\n<h2>1) String Concatenation by + (string concatenation) operator<\/h2>\n\n\n\n<p>Java string concatenation operator (+) is used to add strings. For Example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class TestStringConcatenation1{  \n public static void main(String args&#91;]){  \n   String s=\"Sachin\"+\" Tendulkar\";  \n   System.out.println(s);\/\/Sachin Tendulkar  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Sachin Tendulkar\n<\/code><\/pre>\n\n\n\n<p>The\u00a0<strong>Java compiler transforms<\/strong>\u00a0above code to this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>String s=(new StringBuilder()).append(\"Sachin\").append(\" Tendulkar).toString();  <\/code><\/pre>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<p>In java, String concatenation is implemented through the StringBuilder (or StringBuffer) class and its append method. String concatenation operator produces a new string by appending the second operand onto the end of the first operand. The string concatenation operator can concat not only string but primitive values also. For Example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class TestStringConcatenation2{  \n public static void main(String args&#91;]){  \n   String s=50+30+\"Sachin\"+40+40;  \n   System.out.println(s);\/\/80Sachin4040  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>80Sachin4040\n<\/code><\/pre>\n\n\n\n<h4>Note: After a string literal, all the + will be treated as string concatenation operator.<\/h4>\n\n\n\n<h3>2) String Concatenation by concat() method<\/h3>\n\n\n\n<p>The String concat() method concatenates the specified string to the end of current string. Syntax:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;String&nbsp;concat(String&nbsp;another)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<p>Let&#8217;s see the example of String concat() method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class TestStringConcatenation3{  \n public static void main(String args&#91;]){  \n   String s1=\"Sachin \";  \n   String s2=\"Tendulkar\";  \n   String s3=s1.concat(s2);  \n   System.out.println(s3);\/\/Sachin Tendulkar  \n  }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Sachin Tendulkar<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In java, string concatenation forms a new string&nbsp;that is&nbsp;the combination of multiple strings. There are two ways to concat string in java: By + (string concatenation) operator By concat() method 1) String Concatenation by + (string concatenation) operator Java string concatenation operator (+) is used to add strings. For Example: The\u00a0Java compiler transforms\u00a0above code to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/546"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=546"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/546\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 554,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/546\/revisions\/554"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=546"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=546"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=546"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 547,
        "date": "2020-06-24T10:24:58",
        "date_gmt": "2020-06-24T10:24:58",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=547"
        },
        "modified": "2020-06-24T10:24:58",
        "modified_gmt": "2020-06-24T10:24:58",
        "slug": "substring",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/substring\/",
        "title": {
            "rendered": "Substring"
        },
        "content": {
            "rendered": "\n<p>A part of string is called&nbsp;<strong>substring<\/strong>. In other words, substring is a subset of another string. In case of substring startIndex is inclusive and endIndex is exclusive.<\/p>\n\n\n\n<h4>Note: Index starts from 0.<\/h4>\n\n\n\n<p>You can get substring from the given string object by one of the two methods:<\/p>\n\n\n\n<ol><li><strong>public String substring(int startIndex):<\/strong>&nbsp;This method returns new String object containing the substring of the given string from specified startIndex (inclusive).<\/li><li><strong>public String substring(int startIndex, int endIndex):&nbsp;<\/strong>This method returns new String object containing the substring of the given string from specified startIndex to endIndex.<\/li><\/ol>\n\n\n\n<p>In case of string:<\/p>\n\n\n\n<ul><li><strong>startIndex:<\/strong>&nbsp;inclusive<\/li><li><strong>endIndex:<\/strong>&nbsp;exclusive<\/li><\/ul>\n\n\n\n<p>Let&#8217;s understand the startIndex and endIndex by the code given below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>String s=\"hello\";  \nSystem.out.println(s.substring(0,2));\/\/he  <\/code><\/pre>\n\n\n\n<p>In the above substring, 0 points to h but 2 points to e (because end index is exclusive).<ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of java substring<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TestSubstring{  \n public static void main(String args&#91;]){  \n   String s=\"SachinTendulkar\";  \n   System.out.println(s.substring(6));\/\/Tendulkar  \n   System.out.println(s.substring(0,6));\/\/Sachin  \n }  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Tendulkar\nSachin<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A part of string is called&nbsp;substring. In other words, substring is a subset of another string. In case of substring startIndex is inclusive and endIndex is exclusive. Note: Index starts from 0. You can get substring from the given string object by one of the two methods: public String substring(int startIndex):&nbsp;This method returns new String [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/547"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=547"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/547\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 555,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/547\/revisions\/555"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=547"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=547"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=547"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 545,
        "date": "2020-06-24T10:27:51",
        "date_gmt": "2020-06-24T10:27:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=545"
        },
        "modified": "2020-06-24T10:27:51",
        "modified_gmt": "2020-06-24T10:27:51",
        "slug": "stringbuffer",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/stringbuffer\/",
        "title": {
            "rendered": "StringBuffer"
        },
        "content": {
            "rendered": "\n<p>Java StringBuffer class is used to create mutable (modifiable) string. The StringBuffer class in java is same as String class except it is mutable i.e. it can be changed.<\/p>\n\n\n\n<h4>Note: Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order.<\/h4>\n\n\n\n<h3>Important Constructors of StringBuffer class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>StringBuffer()<\/td><td>creates an empty string buffer with the initial capacity of 16.<\/td><\/tr><tr><td>StringBuffer(String str)<\/td><td>creates a string buffer with the specified string.<\/td><\/tr><tr><td>StringBuffer(int capacity)<\/td><td>creates an empty string buffer with the specified capacity as length.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Important methods of StringBuffer class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>public synchronized StringBuffer<\/td><td>append(String s)<\/td><td>is used to append the specified string with this string. The append() method is overloaded like append(char), append(boolean), append(int), append(float), append(double) etc.<\/td><\/tr><tr><td>public synchronized StringBuffer<\/td><td>insert(int offset, String s)<\/td><td>is used to insert the specified string with this string at the specified position. The insert() method is overloaded like insert(int, char), insert(int, boolean), insert(int, int), insert(int, float), insert(int, double) etc.<\/td><\/tr><tr><td>public synchronized StringBuffer<\/td><td>replace(int startIndex, int endIndex, String str)<\/td><td>is used to replace the string from specified startIndex and endIndex.<\/td><\/tr><tr><td>public synchronized StringBuffer<\/td><td>delete(int startIndex, int endIndex)<\/td><td>is used to delete the string from specified startIndex and endIndex.<\/td><\/tr><tr><td>public synchronized StringBuffer<\/td><td>reverse()<\/td><td>is used to reverse the string.<\/td><\/tr><tr><td>public int<\/td><td>capacity()<\/td><td>is used to return the current capacity.<\/td><\/tr><tr><td>public void<\/td><td>ensureCapacity(int minimumCapacity)<\/td><td>is used to ensure the capacity at least equal to the given minimum.<\/td><\/tr><tr><td>public char<\/td><td>charAt(int index)<\/td><td>is used to return the character at the specified position.<\/td><\/tr><tr><td>public int<\/td><td>length()<\/td><td>is used to return the length of the string i.e. total number of characters.<\/td><\/tr><tr><td>public String<\/td><td>substring(int beginIndex)<\/td><td>is used to return the substring from the specified beginIndex.<\/td><\/tr><tr><td>public String<\/td><td>substring(int beginIndex, int endIndex)<\/td><td>is used to return the substring from the specified beginIndex and endIndex.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>What is mutable string<\/h3>\n\n\n\n<p>A string that can be modified or changed is known as mutable string. StringBuffer and StringBuilder classes are used for creating mutable string.<\/p>\n\n\n\n<h3>1) StringBuffer append() method<\/h3>\n\n\n\n<p>The append() method concatenates the given argument with this string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBufferExample{  \npublic static void main(String args&#91;]){  \nStringBuffer sb=new StringBuffer(\"Hello \");  \nsb.append(\"Java\");\/\/now original string is changed  \nSystem.out.println(sb);\/\/prints Hello Java  \n}  \n}  <\/code><\/pre>\n\n\n\n<h3>2) StringBuffer insert() method<\/h3>\n\n\n\n<p>The insert() method inserts the given string with this string at the given position.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBufferExample2{  \npublic static void main(String args&#91;]){  \nStringBuffer sb=new StringBuffer(\"Hello \");  \nsb.insert(1,\"Java\");\/\/now original string is changed  \nSystem.out.println(sb);\/\/prints HJavaello  \n}  \n}  <\/code><\/pre>\n\n\n\n<h3>3) StringBuffer replace() method<\/h3>\n\n\n\n<p>The replace() method replaces the given string from the specified beginIndex and endIndex.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBufferExample3{  \npublic static void main(String args&#91;]){  \nStringBuffer sb=new StringBuffer(\"Hello\");  \nsb.replace(1,3,\"Java\");  \nSystem.out.println(sb);\/\/prints HJavalo  \n}  \n}<\/code><\/pre>\n\n\n\n<h3>4) StringBuffer delete() method<\/h3>\n\n\n\n<p>The delete() method of StringBuffer class deletes the string from the specified beginIndex to endIndex.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBufferExample4{  \npublic static void main(String args&#91;]){  \nStringBuffer sb=new StringBuffer(\"Hello\");  \nsb.delete(1,3);  \nSystem.out.println(sb);\/\/prints Hlo  \n}  \n} <\/code><\/pre>\n\n\n\n<h3>5) StringBuffer reverse() method<\/h3>\n\n\n\n<p>The reverse() method of StringBuilder class reverses the current string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBufferExample5{  \npublic static void main(String args&#91;]){  \nStringBuffer sb=new StringBuffer(\"Hello\");  \nsb.reverse();  \nSystem.out.println(sb);\/\/prints olleH  \n}  \n} <\/code><\/pre>\n\n\n\n<h3>6) StringBuffer capacity() method<\/h3>\n\n\n\n<p>The capacity() method of StringBuffer class returns the current capacity of the buffer. The default capacity of the buffer is 16. If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBufferExample6{  \npublic static void main(String args&#91;]){  \nStringBuffer sb=new StringBuffer();  \nSystem.out.println(sb.capacity());\/\/default 16  \nsb.append(\"Hello\");  \nSystem.out.println(sb.capacity());\/\/now 16  \nsb.append(\"java is my favourite language\");  \nSystem.out.println(sb.capacity());\/\/now (16*2)+2=34 i.e (oldcapacity*2)+2  \n}  \n}  <\/code><\/pre>\n\n\n\n<h3>7) StringBuffer ensureCapacity() method<\/h3>\n\n\n\n<p>The ensureCapacity() method of StringBuffer class ensures that the given capacity is the minimum to the current capacity. If it is greater than the current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBufferExample7{  \npublic static void main(String args&#91;]){  \nStringBuffer sb=new StringBuffer();  \nSystem.out.println(sb.capacity());\/\/default 16  \nsb.append(\"Hello\");  \nSystem.out.println(sb.capacity());\/\/now 16  \nsb.append(\"java is my favourite language\");  \nSystem.out.println(sb.capacity());\/\/now (16*2)+2=34 i.e (oldcapacity*2)+2  \nsb.ensureCapacity(10);\/\/now no change  \nSystem.out.println(sb.capacity());\/\/now 34  \nsb.ensureCapacity(50);\/\/now (34*2)+2  \nSystem.out.println(sb.capacity());\/\/now 70  \n}  \n}  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java StringBuffer class is used to create mutable (modifiable) string. The StringBuffer class in java is same as String class except it is mutable i.e. it can be changed. Note: Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order. Important Constructors of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/545"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=545"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/545\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 556,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/545\/revisions\/556"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=545"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=545"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=545"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 542,
        "date": "2020-06-24T10:30:34",
        "date_gmt": "2020-06-24T10:30:34",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=542"
        },
        "modified": "2020-06-24T10:30:34",
        "modified_gmt": "2020-06-24T10:30:34",
        "slug": "stringbuilder",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/stringbuilder\/",
        "title": {
            "rendered": "StringBuilder"
        },
        "content": {
            "rendered": "\n<p>Java StringBuilder class is used to create mutable (modifiable) string. The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. It is available since JDK 1.5.<\/p>\n\n\n\n<h2>Important Constructors of StringBuilder class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>StringBuilder()<\/td><td>creates an empty string Builder with the initial capacity of 16.<\/td><\/tr><tr><td>StringBuilder(String str)<\/td><td>creates a string Builder with the specified string.<\/td><\/tr><tr><td>StringBuilder(int length)<\/td><td>creates an empty string Builder with the specified capacity as length.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Important methods of StringBuilder class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>public StringBuilder append(String s)<\/td><td>is used to append the specified string with this string. The append() method is overloaded like append(char), append(boolean), append(int), append(float), append(double) etc.<\/td><\/tr><tr><td>public StringBuilder insert(int offset, String s)<\/td><td>is used to insert the specified string with this string at the specified position. The insert() method is overloaded like insert(int, char), insert(int, boolean), insert(int, int), insert(int, float), insert(int, double) etc.<\/td><\/tr><tr><td>public StringBuilder replace(int startIndex, int endIndex, String str)<\/td><td>is used to replace the string from specified startIndex and endIndex.<\/td><\/tr><tr><td>public StringBuilder delete(int startIndex, int endIndex)<\/td><td>is used to delete the string from specified startIndex and endIndex.<\/td><\/tr><tr><td>public StringBuilder reverse()<\/td><td>is used to reverse the string.<\/td><\/tr><tr><td>public int capacity()<\/td><td>is used to return the current capacity.<\/td><\/tr><tr><td>public void ensureCapacity(int minimumCapacity)<\/td><td>is used to ensure the capacity at least equal to the given minimum.<\/td><\/tr><tr><td>public char charAt(int index)<\/td><td>is used to return the character at the specified position.<\/td><\/tr><tr><td>public int length()<\/td><td>is used to return the length of the string i.e. total number of characters.<\/td><\/tr><tr><td>public String substring(int beginIndex)<\/td><td>is used to return the substring from the specified beginIndex.<\/td><\/tr><tr><td>public String substring(int beginIndex, int endIndex)<\/td><td>is used to return the substring from the specified beginIndex and endIndex.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java StringBuilder Examples<\/h2>\n\n\n\n<p>Let&#8217;s see the examples of different methods of StringBuilder class.<\/p>\n\n\n\n<h3>1) StringBuilder append() method<\/h3>\n\n\n\n<p>The StringBuilder append() method concatenates the given argument with this string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBuilderExample{  \npublic static void main(String args&#91;]){  \nStringBuilder sb=new StringBuilder(\"Hello \");  \nsb.append(\"Java\");\/\/now original string is changed  \nSystem.out.println(sb);\/\/prints Hello Java  \n}  \n} <\/code><\/pre>\n\n\n\n<h3>2) StringBuilder insert() method<\/h3>\n\n\n\n<p>The StringBuilder insert() method inserts the given string with this string at the given position.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBuilderExample2{  \npublic static void main(String args&#91;]){  \nStringBuilder sb=new StringBuilder(\"Hello \");  \nsb.insert(1,\"Java\");\/\/now original string is changed  \nSystem.out.println(sb);\/\/prints HJavaello  \n}  \n}  <\/code><\/pre>\n\n\n\n<h3>3) StringBuilder replace() method<\/h3>\n\n\n\n<p>The StringBuilder replace() method replaces the given string from the specified beginIndex and endIndex.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBuilderExample3{  \npublic static void main(String args&#91;]){  \nStringBuilder sb=new StringBuilder(\"Hello\");  \nsb.replace(1,3,\"Java\");  \nSystem.out.println(sb);\/\/prints HJavalo  \n}  \n}<\/code><\/pre>\n\n\n\n<h3>4) StringBuilder delete() method<\/h3>\n\n\n\n<p>The delete() method of StringBuilder class deletes the string from the specified beginIndex to endIndex.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBuilderExample4{  \npublic static void main(String args&#91;]){  \nStringBuilder sb=new StringBuilder(\"Hello\");  \nsb.delete(1,3);  \nSystem.out.println(sb);\/\/prints Hlo  \n}  \n}  <\/code><\/pre>\n\n\n\n<h3>5) StringBuilder reverse() method<\/h3>\n\n\n\n<p>The reverse() method of StringBuilder class reverses the current string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBuilderExample5{  \npublic static void main(String args&#91;]){  \nStringBuilder sb=new StringBuilder(\"Hello\");  \nsb.reverse();  \nSystem.out.println(sb);\/\/prints olleH  \n}  \n}  <\/code><\/pre>\n\n\n\n<h3>6) StringBuilder capacity() method<\/h3>\n\n\n\n<p>The capacity() method of StringBuilder class returns the current capacity of the Builder. The default capacity of the Builder is 16. If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBuilderExample6{  \npublic static void main(String args&#91;]){  \nStringBuilder sb=new StringBuilder();  \nSystem.out.println(sb.capacity());\/\/default 16  \nsb.append(\"Hello\");  \nSystem.out.println(sb.capacity());\/\/now 16  \nsb.append(\"java is my favourite language\");  \nSystem.out.println(sb.capacity());\/\/now (16*2)+2=34 i.e (oldcapacity*2)+2  \n}  \n}  <\/code><\/pre>\n\n\n\n<h3>7) StringBuilder ensureCapacity() method<\/h3>\n\n\n\n<p>The ensureCapacity() method of StringBuilder class ensures that the given capacity is the minimum to the current capacity. If it is greater than the current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringBuilderExample7{  \npublic static void main(String args&#91;]){  \nStringBuilder sb=new StringBuilder();  \nSystem.out.println(sb.capacity());\/\/default 16  \nsb.append(\"Hello\");  \nSystem.out.println(sb.capacity());\/\/now 16  \nsb.append(\"java is my favourite language\");  \nSystem.out.println(sb.capacity());\/\/now (16*2)+2=34 i.e (oldcapacity*2)+2  \nsb.ensureCapacity(10);\/\/now no change  \nSystem.out.println(sb.capacity());\/\/now 34  \nsb.ensureCapacity(50);\/\/now (34*2)+2  \nSystem.out.println(sb.capacity());\/\/now 70  \n}  \n}  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java StringBuilder class is used to create mutable (modifiable) string. The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. It is available since JDK 1.5. Important Constructors of StringBuilder class Constructor Description StringBuilder() creates an empty string Builder with the initial capacity of 16. StringBuilder(String str) creates a string Builder [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/542"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=542"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/542\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 557,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/542\/revisions\/557"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=542"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=542"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=542"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 543,
        "date": "2020-06-24T10:32:20",
        "date_gmt": "2020-06-24T10:32:20",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=543"
        },
        "modified": "2020-06-24T10:32:20",
        "modified_gmt": "2020-06-24T10:32:20",
        "slug": "string-and-stringbuffer",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-and-stringbuffer\/",
        "title": {
            "rendered": "String and StringBuffer"
        },
        "content": {
            "rendered": "\n<p>There are many differences between String and StringBuffer. A list of differences between String and StringBuffer are given below:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>No.<\/th><th>String<\/th><th>StringBuffer<\/th><\/tr><tr><td>1)<\/td><td>String class is immutable.<\/td><td>StringBuffer class is mutable.<\/td><\/tr><tr><td>2)<\/td><td>String is slow and consumes more memory when you concat too many strings because every time it creates new instance.<\/td><td>StringBuffer is fast and consumes less memory when you cancat strings.<\/td><\/tr><tr><td>3)<\/td><td>String class overrides the equals() method of Object class. So you can compare the contents of two strings by equals() method.<\/td><td>StringBuffer class doesn&#8217;t override the equals() method of Object class.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/string-vs-stringbuffer.png\" alt=\"String vs StringBuffer\"\/><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Performance Test of String and StringBuffer<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ConcatTest{  \n    public static String concatWithString()    {  \n        String t = \"Java\";  \n        for (int i=0; i&lt;10000; i++){  \n            t = t + \"Tpoint\";  \n        }  \n        return t;  \n    }  \n    public static String concatWithStringBuffer(){  \n        StringBuffer sb = new StringBuffer(\"Java\");  \n        for (int i=0; i&lt;10000; i++){  \n            sb.append(\"Tpoint\");  \n        }  \n        return sb.toString();  \n    }  \n    public static void main(String&#91;] args){  \n        long startTime = System.currentTimeMillis();  \n        concatWithString();  \n        System.out.println(\"Time taken by Concating with String: \"+(System.currentTimeMillis()-startTime)+\"ms\");  \n        startTime = System.currentTimeMillis();  \n        concatWithStringBuffer();  \n        System.out.println(\"Time taken by Concating with  StringBuffer: \"+(System.currentTimeMillis()-startTime)+\"ms\");  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Time taken by Concating with String: 578ms\nTime taken by Concating with  StringBuffer: 0ms<\/code><\/pre>\n\n\n\n<h2>String and StringBuffer HashCode Test<\/h2>\n\n\n\n<p>As you can see in the program given below, String returns new hashcode value when you concat string but StringBuffer returns same.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class InstanceTest{  \n    public static void main(String args&#91;]){  \n        System.out.println(\"Hashcode test of String:\");  \n        String str=\"java\";  \n        System.out.println(str.hashCode());  \n        str=str+\"tpoint\";  \n        System.out.println(str.hashCode());  \n   \n        System.out.println(\"Hashcode test of StringBuffer:\");  \n        StringBuffer sb=new StringBuffer(\"java\");  \n        System.out.println(sb.hashCode());  \n        sb.append(\"tpoint\");  \n        System.out.println(sb.hashCode());  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Hashcode test of String:\n3254818\n229541438\nHashcode test of StringBuffer:\n118352462\n118352462<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There are many differences between String and StringBuffer. A list of differences between String and StringBuffer are given below: No. String StringBuffer 1) String class is immutable. StringBuffer class is mutable. 2) String is slow and consumes more memory when you concat too many strings because every time it creates new instance. StringBuffer is fast [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/543"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=543"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/543\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 558,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/543\/revisions\/558"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=543"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=543"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=543"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 544,
        "date": "2020-06-24T10:33:52",
        "date_gmt": "2020-06-24T10:33:52",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=544"
        },
        "modified": "2020-06-24T10:33:52",
        "modified_gmt": "2020-06-24T10:33:52",
        "slug": "stringbuffer-and-stringbuilder",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/stringbuffer-and-stringbuilder\/",
        "title": {
            "rendered": "StringBuffer and StringBuilder"
        },
        "content": {
            "rendered": "\n<p>Java provides three classes to represent a sequence of characters: String, StringBuffer, and StringBuilder. The String class is an immutable class whereas StringBuffer and StringBuilder classes are mutable. There are many differences between StringBuffer and StringBuilder. The StringBuilder class is introduced since JDK 1.5.<\/p>\n\n\n\n<p>A list of differences between StringBuffer and StringBuilder are given below:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>No.<\/th><th>StringBuffer<\/th><th>StringBuilder<\/th><\/tr><tr><td>1)<\/td><td>StringBuffer is&nbsp;<em>synchronized<\/em>&nbsp;i.e. thread safe. It means two threads can&#8217;t call the methods of StringBuffer simultaneously.<\/td><td>StringBuilder is&nbsp;<em>non-synchronized<\/em>&nbsp;i.e. not thread safe. It means two threads can call the methods of StringBuilder simultaneously.<\/td><\/tr><tr><td>2)<\/td><td>StringBuffer is&nbsp;<em>less efficient<\/em>&nbsp;than StringBuilder.<\/td><td>StringBuilder is&nbsp;<em>more efficient<\/em>&nbsp;than StringBuffer.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/stringbuffer-vs-stringbuilder1.jpg\" alt=\"StringBuffer vs. StringBuilder in Java\"\/><\/figure>\n\n\n\n<h2>StringBuffer Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Java Program to demonstrate the use of StringBuffer class.  \npublic class BufferTest{  \n    public static void main(String&#91;] args){  \n        StringBuffer buffer=new StringBuffer(\"hello\");  \n        buffer.append(\"java\");  \n        System.out.println(buffer);  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>hellojava\n<\/code><\/pre>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>StringBuilder Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Java Program to demonstrate the use of StringBuilder class.  \npublic class BuilderTest{  \n    public static void main(String&#91;] args){  \n        StringBuilder builder=new StringBuilder(\"hello\");  \n        builder.append(\"java\");  \n        System.out.println(builder);  \n    }  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>hellojava\n<\/code><\/pre>\n\n\n\n<h2>Performance Test of StringBuffer and StringBuilder<\/h2>\n\n\n\n<p>Let&#8217;s see the code to check the performance of StringBuffer and StringBuilder classes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Java Program to demonstrate the performance of StringBuffer and StringBuilder classes.  \npublic class ConcatTest{  \n    public static void main(String&#91;] args){  \n        long startTime = System.currentTimeMillis();  \n        StringBuffer sb = new StringBuffer(\"Java\");  \n        for (int i=0; i&lt;10000; i++){  \n            sb.append(\"Tpoint\");  \n        }  \n        System.out.println(\"Time taken by StringBuffer: \" + (System.currentTimeMillis() - startTime) + \"ms\");  \n        startTime = System.currentTimeMillis();  \n        StringBuilder sb2 = new StringBuilder(\"Java\");  \n        for (int i=0; i&lt;10000; i++){  \n            sb2.append(\"Tpoint\");  \n        }  \n        System.out.println(\"Time taken by StringBuilder: \" + (System.currentTimeMillis() - startTime) + \"ms\");  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Time taken by StringBuffer: 16ms\nTime taken by StringBuilder: 0ms<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java provides three classes to represent a sequence of characters: String, StringBuffer, and StringBuilder. The String class is an immutable class whereas StringBuffer and StringBuilder classes are mutable. There are many differences between StringBuffer and StringBuilder. The StringBuilder class is introduced since JDK 1.5. A list of differences between StringBuffer and StringBuilder are given below: [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/544"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=544"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/544\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 559,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/544\/revisions\/559"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=544"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=544"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=544"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 541,
        "date": "2020-06-24T10:34:42",
        "date_gmt": "2020-06-24T10:34:42",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=541"
        },
        "modified": "2020-06-24T10:34:42",
        "modified_gmt": "2020-06-24T10:34:42",
        "slug": "create-immutable-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/create-immutable-class\/",
        "title": {
            "rendered": "create Immutable class"
        },
        "content": {
            "rendered": "\n<p>There are many immutable classes like String, Boolean, Byte, Short, Integer, Long, Float, Double etc. In short, all the wrapper classes and String class is immutable. We can also create immutable class by creating final class that have final data members as the example given below:<\/p>\n\n\n\n<h3>Example to create Immutable class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>In this example, we have created a final class named Employee. It have one final datamember, a parameterized constructor and getter method.<\/td><\/tr><\/tbody><\/table><figcaption><br><br><\/figcaption><\/figure>\n\n\n\n<pre class=\"wp-block-code\"><code>public final class Employee{  \nfinal String pancardNumber;  \n  \npublic Employee(String pancardNumber){  \nthis.pancardNumber=pancardNumber;  \n}  \n  \npublic String getPancardNumber(){  \nreturn pancardNumber;  \n}  \n  \n}  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p>The above class is immutable because:<\/p>\n\n\n\n<ul><li>The instance variable of the class is final i.e. we cannot change the value of it after creating an object.<\/li><li>The class is final so we cannot create the subclass.<\/li><li>There is no setter methods i.e. we have no option to change the value of the instance variable.<\/li><\/ul>\n\n\n\n<p>These points makes this class as immutable.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There are many immutable classes like String, Boolean, Byte, Short, Integer, Long, Float, Double etc. In short, all the wrapper classes and String class is immutable. We can also create immutable class by creating final class that have final data members as the example given below: Example to create Immutable class In this example, we [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/541"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=541"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/541\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 560,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/541\/revisions\/560"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=541"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=541"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=541"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 540,
        "date": "2020-06-24T10:35:51",
        "date_gmt": "2020-06-24T10:35:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=540"
        },
        "modified": "2020-06-24T10:35:51",
        "modified_gmt": "2020-06-24T10:35:51",
        "slug": "tostring-method",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/tostring-method\/",
        "title": {
            "rendered": "toString() method"
        },
        "content": {
            "rendered": "\n<p>If you want to represent any object as a string,&nbsp;<strong>toString() method<\/strong>&nbsp;comes into existence.<\/p>\n\n\n\n<p>The toString() method returns the string representation of the object.<\/p>\n\n\n\n<p>If you print any object, java compiler internally invokes the toString() method on the object. So overriding the toString() method, returns the desired output, it can be the state of an object etc. depends on your implementation.<\/p>\n\n\n\n<h2>Advantage of Java toString() method<\/h2>\n\n\n\n<p>By overriding the toString() method of the Object class, we can return values of the object, so we don&#8217;t need to write much code.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Understanding problem without toString() method<\/h3>\n\n\n\n<p>Let&#8217;s see the simple code that prints reference.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \n int rollno;  \n String name;  \n String city;  \n  \n Student(int rollno, String name, String city){  \n this.rollno=rollno;  \n this.name=name;  \n this.city=city;  \n }  \n  \n public static void main(String args&#91;]){  \n   Student s1=new Student(101,\"Raj\",\"lucknow\");  \n   Student s2=new Student(102,\"Vijay\",\"ghaziabad\");  \n     \n   System.out.println(s1);\/\/compiler writes here s1.toString()  \n   System.out.println(s2);\/\/compiler writes here s2.toString()  \n }  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\">Output:Student@1fee6fc\n       Student@1eed786\n<\/pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>As you can see in the above example, printing s1 and s2 prints the hashcode values of the objects but I want to print the values of these objects. Since java compiler internally calls toString() method, overriding this method will return the specified values. Let&#8217;s understand it with the example given below:<\/td><td><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of Java toString() method<\/h2>\n\n\n\n<p>Now let&#8217;s see the real example of toString() method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \n int rollno;  \n String name;  \n String city;  \n  \n Student(int rollno, String name, String city){  \n this.rollno=rollno;  \n this.name=name;  \n this.city=city;  \n }  \n   \n public String toString(){\/\/overriding the toString() method  \n  return rollno+\" \"+name+\" \"+city;  \n }  \n public static void main(String args&#91;]){  \n   Student s1=new Student(101,\"Raj\",\"lucknow\");  \n   Student s2=new Student(102,\"Vijay\",\"ghaziabad\");  \n     \n   System.out.println(s1);\/\/compiler writes here s1.toString()  \n   System.out.println(s2);\/\/compiler writes here s2.toString()  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>download this example of toString method<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Output:101 Raj lucknow\n       102 Vijay ghaziabad<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>If you want to represent any object as a string,&nbsp;toString() method&nbsp;comes into existence. The toString() method returns the string representation of the object. If you print any object, java compiler internally invokes the toString() method on the object. So overriding the toString() method, returns the desired output, it can be the state of an object [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/540"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=540"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/540\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 561,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/540\/revisions\/561"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=540"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=540"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=540"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 539,
        "date": "2020-06-24T10:41:33",
        "date_gmt": "2020-06-24T10:41:33",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=539"
        },
        "modified": "2020-07-16T10:28:12",
        "modified_gmt": "2020-07-16T10:28:12",
        "slug": "string-charat",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-charat\/",
        "title": {
            "rendered": "String charAt()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string charAt()<\/strong>&nbsp;method returns&nbsp;<em>a char value at the given index number<\/em>.<\/p>\n\n\n\n<p>The index number starts from 0 and goes to n-1, where n is length of the string. It returns&nbsp;<strong>StringIndexOutOfBoundsException<\/strong>&nbsp;if given index number is greater than or equal to this string length or a negative number.<\/p>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public char charAt(int index) {  \n       if ((index &lt; 0) || (index >= value.length)) {  \n           throw new StringIndexOutOfBoundsException(index);  \n       }  \n       return value&#91;index];  \n   }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature of string charAt() method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>char<\/strong>&nbsp;charAt(<strong>int<\/strong>&nbsp;index)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameter<\/h3>\n\n\n\n<p><strong>index<\/strong>&nbsp;: index number, starts with 0<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p><strong>A char value<\/strong><\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Specified by<\/h3>\n\n\n\n<p><strong>CharSequence<\/strong>&nbsp;interface, located inside java.lang package.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Throws<\/h3>\n\n\n\n<p><strong>StringIndexOutOfBoundsException<\/strong>&nbsp;: if index is negative value or greater than this string length.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String charAt() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CharAtExample{  \npublic static void main(String args&#91;]){  \nString name=\"codemeals\";  \nchar ch=name.charAt(4);\/\/returns the char value at the 4th index  \nSystem.out.println(ch);  \n}}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">t\n<\/pre>\n\n\n\n<h2>StringIndexOutOfBoundsException with charAt()<\/h2>\n\n\n\n<p>Let&#8217;s see the example of charAt() method where we are passing greater index value. In such case, it throws StringIndexOutOfBoundsException at run time.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CharAtExample{  \npublic static void main(String args&#91;]){  \nString name=\"codemeals\";  \nchar ch=name.charAt(10);\/\/returns the char value at the 10th index  \nSystem.out.println(ch);  \n}}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: \nString index out of range: 10\nat java.lang.String.charAt(String.java:658)\nat CharAtExample.main(CharAtExample.java:4)<\/code><\/pre>\n\n\n\n<h2>Java String charAt() Example 3<\/h2>\n\n\n\n<p>Let&#8217;s see a simple example where we are accessing first and last character from the provided string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CharAtExample3 {  \n    public static void main(String&#91;] args) {  \n    String str = \"Welcome to codemeals portal\";      \n    int strLength = str.length();      \n    \/\/ Fetching first character  \n    System.out.println(\"Character at 0 index is: \"+ str.charAt(0));      \n    \/\/ The last Character is present at the string length-1 index  \n    System.out.println(\"Character at last index is: \"+ str.charAt(strLength-1));      \n    }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Character at 0 index is: W<br>Character at last index is: l<\/pre>\n\n\n\n<h2>Java String charAt() Example 4<\/h2>\n\n\n\n<p>Let&#8217;s see an example where we are accessing all the elements present at odd index.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CharAtExample4 {  \n    public static void main(String&#91;] args) {  \n        String str = \"Welcome to codemeals portal\";          \n        for (int i=0; i&lt;=str.length()-1; i++) {  \n            if(i%2!=0) {  \n                System.out.println(\"Char at \"+i+\" place \"+str.charAt(i));  \n            }  \n        }  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Char at 1 place e\nChar at 3 place c\nChar at 5 place m\nChar at 7 place  \nChar at 9 place o\nChar at 11 place J\nChar at 13 place v\nChar at 15 place t\nChar at 17 place o\nChar at 19 place n\nChar at 21 place  \nChar at 23 place o\nChar at 25 place t\nChar at 27 place l<\/code><\/pre>\n\n\n\n<h2>Java String charAt() Example 5<\/h2>\n\n\n\n<p>Let&#8217;s see an example where we are counting frequency of a character in the string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CharAtExample5 {  \n    public static void main(String&#91;] args) {  \n        String str = \"Welcome to codemeals portal\";  \n        int count = 0;  \n        for (int i=0; i&lt;=str.length()-1; i++) {  \n            if(str.charAt(i) == 't') {  \n                count++;  \n            }  \n        }  \n        System.out.println(\"Frequency of t is: \"+count);  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Frequency of t is: 4<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string charAt()&nbsp;method returns&nbsp;a char value at the given index number. The index number starts from 0 and goes to n-1, where n is length of the string. It returns&nbsp;StringIndexOutOfBoundsException&nbsp;if given index number is greater than or equal to this string length or a negative number. Internal implementation Signature The signature of string charAt() method [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/539"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=539"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/539\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 914,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/539\/revisions\/914"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=539"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=539"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=539"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 537,
        "date": "2020-06-24T10:44:04",
        "date_gmt": "2020-06-24T10:44:04",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=537"
        },
        "modified": "2020-06-24T10:44:04",
        "modified_gmt": "2020-06-24T10:44:04",
        "slug": "string-compareto",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-compareto\/",
        "title": {
            "rendered": "String compareTo()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string compareTo()<\/strong>&nbsp;method compares the given string with current string lexicographically. It returns positive number, negative number or 0.<\/p>\n\n\n\n<p>It compares strings on the basis of Unicode value of each character in the strings.<\/p>\n\n\n\n<p>If first string is lexicographically greater than second string, it returns positive number (difference of character value). If first string is less than second string lexicographically, it returns negative number and if first string is lexicographically equal to second string, it returns 0.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>if s1 > s2, it returns positive number  \nif s1 &lt; s2, it returns negative number  \nif s1 == s2, it returns 0 <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public boolean equals(Object anObject) {  \n       if (this == anObject) {  \n           return true;  \n       }  \n       if (anObject instanceof String) {  \n           String anotherString = (String) anObject;  \n           int n = value.length;  \n           if (n == anotherString.value.length) {  \n               char v1&#91;] = value;  \n               char v2&#91;] = anotherString.value;  \n               int i = 0;  \n               while (n-- != 0) {  \n                   if (v1&#91;i] != v2&#91;i])  \n                           return false;  \n                   i++;  \n               }  \n               return true;  \n           }  \n       }  \n       return false;  \n   } <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>int<\/strong>&nbsp;compareTo(String&nbsp;anotherString)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameters<\/h3>\n\n\n\n<p><strong>anotherString<\/strong>: represents string that is to be compared with current string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>an integer value<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String compareTo() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CompareToExample{  \npublic static void main(String args&#91;]){  \nString s1=\"hello\";  \nString s2=\"hello\";  \nString s3=\"meklo\";  \nString s4=\"hemlo\";  \nString s5=\"flag\";  \nSystem.out.println(s1.compareTo(s2));\/\/0 because both are equal  \nSystem.out.println(s1.compareTo(s3));\/\/-5 because \"h\" is 5 times lower than \"m\"  \nSystem.out.println(s1.compareTo(s4));\/\/-1 because \"l\" is 1 times lower than \"m\"  \nSystem.out.println(s1.compareTo(s5));\/\/2 because \"h\" is 2 times greater than \"f\"  \n}}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n-5\n-1\n2<\/code><\/pre>\n\n\n\n<h2>Java String compareTo(): empty string<\/h2>\n\n\n\n<p>If you compare string with blank or empty string, it returns length of the string. If second string is empty, result would be positive. If first string is empty, result would be negative.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CompareToExample2{  \npublic static void main(String args&#91;]){  \nString s1=\"hello\";  \nString s2=\"\";  \nString s3=\"me\";  \nSystem.out.println(s1.compareTo(s2));  \nSystem.out.println(s2.compareTo(s3));  \n}}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">5\n-2<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string compareTo()&nbsp;method compares the given string with current string lexicographically. It returns positive number, negative number or 0. It compares strings on the basis of Unicode value of each character in the strings. If first string is lexicographically greater than second string, it returns positive number (difference of character value). If first string is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/537"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=537"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/537\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 563,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/537\/revisions\/563"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=537"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=537"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=537"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 538,
        "date": "2020-06-24T10:46:51",
        "date_gmt": "2020-06-24T10:46:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=538"
        },
        "modified": "2020-07-16T10:26:32",
        "modified_gmt": "2020-07-16T10:26:32",
        "slug": "string-concat",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-concat\/",
        "title": {
            "rendered": "String concat"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string concat()<\/strong>&nbsp;method&nbsp;<em>combines specified string at the end of this string<\/em>. It returns combined string. It is like appending another string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public String concat(String str) {  \n       int otherLen = str.length();  \n       if (otherLen == 0) {  \n           return this;  \n       }  \n       int len = value.length;  \n       char buf&#91;] = Arrays.copyOf(value, len + otherLen);  \n       str.getChars(buf, len);  \n       return new String(buf, true);  \n   } <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature of string concat() method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;String&nbsp;concat(String&nbsp;anotherString)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameter<\/h3>\n\n\n\n<p><strong>anotherString<\/strong>&nbsp;: another string i.e. to be combined at the end of this string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>combined string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String concat() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ConcatExample{  \npublic static void main(String args&#91;]){  \nString s1=\"java string\";  \ns1.concat(\"is immutable\");  \nSystem.out.println(s1);  \ns1=s1.concat(\" is immutable so assign it explicitly\");  \nSystem.out.println(s1);  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>java string\njava string is immutable so assign it explicitly<\/code><\/pre>\n\n\n\n<h2>Java String concat() Method Example 2<\/h2>\n\n\n\n<p>Let&#8217;s see an example where we are concatenating multiple string objects.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ConcatExample2 {  \n    public static void main(String&#91;] args) {      \n        String str1 = \"Hello\";  \n        String str2 = \"codemeals\";  \n        String str3 = \"Reader\";  \n        \/\/ Concatenating one string   \n        String str4 = str1.concat(str2);          \n        System.out.println(str4);  \n        \/\/ Concatenating multiple strings  \n        String str5 = str1.concat(str2).concat(str3);  \n        System.out.println(str5);  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hellocodemeals\nHellocodemealsReader<\/code><\/pre>\n\n\n\n<h2>Java String concat() Method Example 3<\/h2>\n\n\n\n<p>Let&#8217;s see an example where we are concatenating spaces and special chars to the string object.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ConcatExample3 {  \n    public static void main(String&#91;] args) {  \n        String str1 = \"Hello\";  \n        String str2 = \"codemeals\";  \n        String str3 = \"Reader\";  \n        \/\/ Concatenating Space among strings  \n        String str4 = str1.concat(\" \").concat(str2).concat(\" \").concat(str3);  \n        System.out.println(str4);         \n        \/\/ Concatenating Special Chars        \n        String str5 = str1.concat(\"!!!\");  \n        System.out.println(str5);         \n        String str6 = str1.concat(\"@\").concat(str2);  \n        System.out.println(str6);  \n    }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello codemeals Reader\nHello!!!\nHello@codemeals<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string concat()&nbsp;method&nbsp;combines specified string at the end of this string. It returns combined string. It is like appending another string. Internal implementation Signature The signature of string concat() method is given below: public&nbsp;String&nbsp;concat(String&nbsp;anotherString)&nbsp;&nbsp; Parameter anotherString&nbsp;: another string i.e. to be combined at the end of this string. Returns combined string Java String concat() method [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/538"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=538"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/538\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 913,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/538\/revisions\/913"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=538"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=538"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=538"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 536,
        "date": "2020-06-24T10:49:55",
        "date_gmt": "2020-06-24T10:49:55",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=536"
        },
        "modified": "2020-06-25T11:18:30",
        "modified_gmt": "2020-06-25T11:18:30",
        "slug": "string-contains",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-contains\/",
        "title": {
            "rendered": "String contains()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string contains()<\/strong>&nbsp;method searches the sequence of characters in this string. It returns&nbsp;<em>true<\/em>&nbsp;if sequence of char values are found in this string otherwise returns&nbsp;<em>false<\/em>.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature of string contains() method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>boolean<\/strong>&nbsp;contains(CharSequence&nbsp;sequence)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameter<\/h3>\n\n\n\n<p><strong>sequence<\/strong>&nbsp;: specifies the sequence of characters to be searched.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p><strong>true<\/strong>&nbsp;if sequence of char value exists, otherwise&nbsp;<strong>false<\/strong>.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Throws<\/h3>\n\n\n\n<p><strong>NullPointerException<\/strong>&nbsp;: if sequence is null.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String contains() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class ContainsExample{  \npublic static void main(String args&#91;]){  \nString name=\"what do you know about me\";  \nSystem.out.println(name.contains(\"do you know\"));  \nSystem.out.println(name.contains(\"about\"));  \nSystem.out.println(name.contains(\"hello\"));  \n}}  \n\n\n<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>true\ntrue\nfalse<\/code><\/pre>\n\n\n\n<h2>Java String contains() Method Example 2<\/h2>\n\n\n\n<p>The contains() method searches case sensitive char sequence. If the argument is not case sensitive, it returns false. Let&#8217;s see an example below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ContainsExample2 {  \n    public static void main(String&#91;] args) {  \n        String str = \"Hello codemeals readers\";  \n        boolean isContains = str.contains(\"codemeals\");  \n        System.out.println(isContains);  \n        \/\/ Case Sensitive  \n        System.out.println(str.contains(\"codemeals\")); \/\/ false  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\">true\nfalse\n<\/pre>\n\n\n\n<h2>Java String contains() Method Example 3<\/h2>\n\n\n\n<p>The contains() method is helpful to find a char-sequence in the string. We can use it in control structure to produce search based result. Let us see an example below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ContainsExample3 {   \n    public static void main(String&#91;] args) {          \n        String str = \"To learn Java visit codemeals.com\";        \n        if(str.contains(\"codemeals.com\")) {  \n            System.out.println(\"This string contains codemeals.com\");  \n        }else  \n            System.out.println(\"Result not found\");       \n    }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">This string contains codemeals.com<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string contains()&nbsp;method searches the sequence of characters in this string. It returns&nbsp;true&nbsp;if sequence of char values are found in this string otherwise returns&nbsp;false. Internal implementation Signature The signature of string contains() method is given below: public&nbsp;boolean&nbsp;contains(CharSequence&nbsp;sequence)&nbsp;&nbsp; Parameter sequence&nbsp;: specifies the sequence of characters to be searched. Returns true&nbsp;if sequence of char value exists, otherwise&nbsp;false. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/536"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=536"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/536\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 593,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/536\/revisions\/593"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=536"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=536"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=536"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 535,
        "date": "2020-06-24T10:51:10",
        "date_gmt": "2020-06-24T10:51:10",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=535"
        },
        "modified": "2020-07-16T10:25:34",
        "modified_gmt": "2020-07-16T10:25:34",
        "slug": "string-endswith",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-endswith\/",
        "title": {
            "rendered": "String endsWith()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string endsWith()<\/strong>&nbsp;method checks if this string ends with given suffix. It returns true if this string ends with given suffix else returns false.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public boolean endsWith(String suffix) {  \n      return startsWith(suffix, value.length - suffix.value.length);  \n  }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The syntax or signature of endsWith() method is given below.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>boolean<\/strong>&nbsp;endsWith(String&nbsp;suffix)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameter<\/h3>\n\n\n\n<p><strong>suffix<\/strong>&nbsp;: Sequence of character<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>true or false<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String endsWith() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EndsWithExample{  \npublic static void main(String args&#91;]){  \nString s1=\"java by codemeals\";  \nSystem.out.println(s1.endsWith(\"t\"));  \nSystem.out.println(s1.endsWith(\"point\"));  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>true\ntrue<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\ntrue<\/code><\/pre>\n\n\n\n<h2>Java String endsWith() Method Example 2<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EndsWithExample2 {  \n    public static void main(String&#91;] args) {  \n        String str = \"Welcome to codemeals.com\";  \n        System.out.println(str.endsWith(\"point\"));  \n        if(str.endsWith(\".com\")) {  \n            System.out.println(\"String ends with .com\");  \n        }else System.out.println(\"It does not end with .com\");  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\nString ends with .com<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string endsWith()&nbsp;method checks if this string ends with given suffix. It returns true if this string ends with given suffix else returns false. Internal implementation Signature The syntax or signature of endsWith() method is given below. public&nbsp;boolean&nbsp;endsWith(String&nbsp;suffix)&nbsp;&nbsp; Parameter suffix&nbsp;: Sequence of character Returns true or false Java String endsWith() method example Output: Java String [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/535"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=535"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/535\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 912,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/535\/revisions\/912"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=535"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=535"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=535"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 534,
        "date": "2020-06-24T10:52:51",
        "date_gmt": "2020-06-24T10:52:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=534"
        },
        "modified": "2020-06-25T11:19:33",
        "modified_gmt": "2020-06-25T11:19:33",
        "slug": "string-equals",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-equals\/",
        "title": {
            "rendered": "String equals()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string equals()<\/strong>&nbsp;method compares the two given strings based on the content of the string. If any character is not matched, it returns false. If all characters are matched, it returns true.<\/p>\n\n\n\n<p>The String equals() method overrides the equals() method of Object class.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public boolean equals(Object anObject) {  \n      if (this == anObject) {  \n          return true;  \n      }  \n      if (anObject instanceof String) {  \n          String anotherString = (String) anObject;  \n          int n = value.length;  \n          if (n == anotherString.value.length) {  \n              char v1&#91;] = value;  \n              char v2&#91;] = anotherString.value;  \n              int i = 0;  \n              while (n-- != 0) {  \n                  if (v1&#91;i] != v2&#91;i])  \n                          return false;  \n                  i++;  \n              }  \n              return true;  \n          }  \n      }  \n      return false;  \n  } <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>boolean<\/strong>&nbsp;equals(Object&nbsp;anotherObject)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameter<\/h3>\n\n\n\n<p><strong>anotherObject<\/strong>&nbsp;: another object i.e. compared with this string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p><strong>true<\/strong>&nbsp;if characters of both strings are equal otherwise&nbsp;<strong>false<\/strong>.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Overrides<\/h3>\n\n\n\n<p>equals() method of java Object class.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String equals() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EqualsExample{  \npublic static void main(String args&#91;]){  \nString s1=\"codemeals\";  \nString s2=\"codemeals\";  \nString s3=\"codemeals\";  \nString s4=\"python\";  \nSystem.out.println(s1.equals(s2));\/\/true because content and case is same  \nSystem.out.println(s1.equals(s3));\/\/false because case is not same  \nSystem.out.println(s1.equals(s4));\/\/false because content is not same  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>true\nfalse\nfalse<\/code><\/pre>\n\n\n\n<h2>Java String equals() Method Example 2<\/h2>\n\n\n\n<p>The equals() method compares two strings and can be used in if-else control structure.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EqualsExample {  \n    public static void main(String&#91;] args) {  \n        String s1 = \"codemeals\";    \n        String s2 = \"codemeals\";    \n        String s3 = \"codemeals\";  \n        System.out.println(s1.equals(s2)); \/\/ True because content is same    \n        if (s1.equals(s3)) {  \n            System.out.println(\"both strings are equal\");  \n        }else System.out.println(\"both strings are unequal\");     \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>true\nboth strings are unequal<\/code><\/pre>\n\n\n\n<h2>Java String equals() Method Example 3<\/h2>\n\n\n\n<p>Let&#8217;s see one more example to test the equality of string present in the list.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;  \npublic class EqualsExample3 {  \n    public static void main(String&#91;] args) {  \n        String str1 = \"Mukesh\";  \n        ArrayList&lt;String> list = new ArrayList&lt;>();  \n        list.add(\"Ravi\");   \n        list.add(\"Mukesh\");  \n        list.add(\"Ramesh\");  \n        list.add(\"Ajay\");  \n        for (String str : list) {  \n            if (str.equals(str1)) {  \n                System.out.println(\"Mukesh is present\");  \n            }  \n        }  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Mukesh is present<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string equals()&nbsp;method compares the two given strings based on the content of the string. If any character is not matched, it returns false. If all characters are matched, it returns true. The String equals() method overrides the equals() method of Object class. Internal implementation Signature public&nbsp;boolean&nbsp;equals(Object&nbsp;anotherObject)&nbsp;&nbsp; Parameter anotherObject&nbsp;: another object i.e. compared with this [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/534"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=534"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/534\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 595,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/534\/revisions\/595"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=534"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=534"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=534"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 533,
        "date": "2020-06-24T10:54:05",
        "date_gmt": "2020-06-24T10:54:05",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=533"
        },
        "modified": "2020-06-25T11:19:56",
        "modified_gmt": "2020-06-25T11:19:56",
        "slug": "string-equalsignorecase",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-equalsignorecase\/",
        "title": {
            "rendered": "String equalsIgnoreCase()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>String equalsIgnoreCase()<\/strong>&nbsp;method compares the two given strings on the basis of content of the string irrespective of case of the string. It is like equals() method but doesn&#8217;t check case. If any character is not matched, it returns false otherwise it returns true.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public boolean equalsIgnoreCase(String anotherString) {  \n       return (this == anotherString) ? true  \n               : (anotherString != null)  \n               &amp;&amp; (anotherString.value.length == value.length)  \n               &amp;&amp; regionMatches(true, 0, anotherString, 0, value.length);  \n   }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>boolean<\/strong>&nbsp;equalsIgnoreCase(String&nbsp;str)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameter<\/h3>\n\n\n\n<p><strong>str<\/strong>&nbsp;: another string i.e. compared with this string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>It returns&nbsp;<strong>true<\/strong>&nbsp;if characters of both strings are equal ignoring case otherwise&nbsp;<strong>false<\/strong>.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String equalsIgnoreCase() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EqualsIgnoreCaseExample{  \npublic static void main(String args&#91;]){  \nString s1=\"codemeals\";  \nString s2=\"codemeals\";  \nString s3=\"codemeals\";  \nString s4=\"python\";  \nSystem.out.println(s1.equalsIgnoreCase(s2));\/\/true because content and case both are same  \nSystem.out.println(s1.equalsIgnoreCase(s3));\/\/true because case is ignored  \nSystem.out.println(s1.equalsIgnoreCase(s4));\/\/false because content is not same  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>true\ntrue\nfalse<\/code><\/pre>\n\n\n\n<h2>Java String equalsIgnoreCase() Method Example 2<\/h2>\n\n\n\n<p>Let&#8217;s see an example where we are testing string equality among the strings.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;  \npublic class EqualsIgnoreCaseExample2 {  \n    public static void main(String&#91;] args) {  \n        String str1 = \"Mukesh Kumar\";  \n        ArrayList&lt;String> list = new ArrayList&lt;>();  \n        list.add(\"Mohan\");   \n        list.add(\"Mukesh\");  \n        list.add(\"RAVI\");  \n        list.add(\"MuKesH kuMar\");  \n        list.add(\"Suresh\");  \n        for (String str : list) {  \n            if (str.equalsIgnoreCase(str1)) {  \n                System.out.println(\"Mukesh kumar is present\");  \n            }  \n        }  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Mukesh kumar is present<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;String equalsIgnoreCase()&nbsp;method compares the two given strings on the basis of content of the string irrespective of case of the string. It is like equals() method but doesn&#8217;t check case. If any character is not matched, it returns false otherwise it returns true. Internal implementation Signature public&nbsp;boolean&nbsp;equalsIgnoreCase(String&nbsp;str)&nbsp;&nbsp; Parameter str&nbsp;: another string i.e. compared with this [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/533"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=533"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/533\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 596,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/533\/revisions\/596"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=533"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=533"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=533"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 532,
        "date": "2020-06-24T10:55:41",
        "date_gmt": "2020-06-24T10:55:41",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=532"
        },
        "modified": "2020-06-24T10:55:41",
        "modified_gmt": "2020-06-24T10:55:41",
        "slug": "string-getbytes",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-getbytes\/",
        "title": {
            "rendered": "String getBytes()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string getBytes()<\/strong>&nbsp;method returns the byte array of the string. In other words, it returns sequence of bytes.<\/p>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>There are 3 variant of getBytes() method. The signature or syntax of string getBytes() method is given below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public byte&#91;] getBytes()  \npublic byte&#91;] getBytes(Charset charset)  \npublic byte&#91;] getBytes(String charsetName)throws UnsupportedEncodingException  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public byte&#91;] getBytes() {  \n        return StringCoding.encode(value, 0, value.length);  \n    }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>sequence of bytes.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String getBytes() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringGetBytesExample{  \npublic static void main(String args&#91;]){  \nString s1=\"ABCDEFG\";  \nbyte&#91;] barr=s1.getBytes();  \nfor(int i=0;i&lt;barr.length;i++){  \nSystem.out.println(barr&#91;i]);  \n}  \n}}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>65\n66\n67\n68\n69\n70\n71\n\ufeff<\/code><\/pre>\n\n\n\n<h2>Java String getBytes() Method Example 2<\/h2>\n\n\n\n<p>This method returns a byte array that again can be passed to String constructor to get String.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringGetBytesExample2 {  \n    public static void main(String&#91;] args) {  \n        String s1 = \"ABCDEFG\";  \n        byte&#91;] barr = s1.getBytes();  \n        for(int i=0;i&lt;barr.length;i++){  \n            System.out.println(barr&#91;i]);  \n        }  \n        \/\/ Getting string back   \n        String s2 = new String(barr);  \n        System.out.println(s2);  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>65\n66\n67\n68\n69\n70\n71\nABCDEFG<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string getBytes()&nbsp;method returns the byte array of the string. In other words, it returns sequence of bytes. Signature There are 3 variant of getBytes() method. The signature or syntax of string getBytes() method is given below: Internal implementation Returns sequence of bytes. Java String getBytes() method example Output: Java String getBytes() Method Example 2 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/532"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=532"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/532\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 569,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/532\/revisions\/569"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=532"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=532"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=532"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 531,
        "date": "2020-06-24T10:58:19",
        "date_gmt": "2020-06-24T10:58:19",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=531"
        },
        "modified": "2020-06-25T11:20:26",
        "modified_gmt": "2020-06-25T11:20:26",
        "slug": "string-getchars",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-getchars\/",
        "title": {
            "rendered": "String getChars()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string getChars()<\/strong>&nbsp;method copies the content of this string into specified char array. There are 4 arguments passed in getChars() method. The signature of getChars() method is given below:<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>void getChars(char dst&#91;], int dstBegin) {  \n        System.arraycopy(value, 0, dst, dstBegin, value.length);  \n    }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature or syntax of string getChars() method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>void<\/strong>&nbsp;getChars(<strong>int<\/strong>&nbsp;srcBeginIndex,&nbsp;<strong>int<\/strong>&nbsp;srcEndIndex,&nbsp;<strong>char<\/strong>[]&nbsp;destination,&nbsp;<strong>int<\/strong>&nbsp;dstBeginIndex)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>It doesn&#8217;t return any value.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Throws<\/h3>\n\n\n\n<p>It throws StringIndexOutOfBoundsException if beginIndex is greater than endIndex.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String getChars() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringGetCharsExample{  \npublic static void main(String args&#91;]){  \n String str = new String(\"hello codemeals how r u\");  \n      char&#91;] ch = new char&#91;10];  \n      try{  \n         str.getChars(6, 16, ch, 0);  \n         System.out.println(ch);  \n      }catch(Exception ex){System.out.println(ex);}  \n}}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Codemeals<\/pre>\n\n\n\n<h2>Java String getChars() Method Example 2<\/h2>\n\n\n\n<p>It throws an exception if index value exceeds array range. Let&#8217;s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringGetCharsExample2 {  \n    public static void main(String&#91;] args) {  \n        String str = new String(\"Welcome to codemeals\");  \n        char&#91;] ch  = new char&#91;20];  \n        try {  \n            str.getChars(1, 26, ch, 0);  \n            System.out.println(ch);  \n        } catch (Exception e) {  \n            System.out.println(e);  \n        }  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>java.lang.StringIndexOutOfBoundsException: offset 10, count 14, length 20<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string getChars()&nbsp;method copies the content of this string into specified char array. There are 4 arguments passed in getChars() method. The signature of getChars() method is given below: Internal implementation Signature The signature or syntax of string getChars() method is given below: public&nbsp;void&nbsp;getChars(int&nbsp;srcBeginIndex,&nbsp;int&nbsp;srcEndIndex,&nbsp;char[]&nbsp;destination,&nbsp;int&nbsp;dstBeginIndex)&nbsp;&nbsp; Returns It doesn&#8217;t return any value. Throws It throws StringIndexOutOfBoundsException if [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/531"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=531"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/531\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 597,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/531\/revisions\/597"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=531"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=531"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=531"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 530,
        "date": "2020-06-24T10:59:51",
        "date_gmt": "2020-06-24T10:59:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=530"
        },
        "modified": "2020-06-24T10:59:51",
        "modified_gmt": "2020-06-24T10:59:51",
        "slug": "string-indexof",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-indexof\/",
        "title": {
            "rendered": "String indexOf()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string indexOf()<\/strong>&nbsp;method returns index of given character value or substring. If it is not found, it returns -1. The index counter starts from zero.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public int indexOf(int ch) {  \n        return indexOf(ch, 0);  \n    }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>There are 4 types of indexOf method in java. The signature of indexOf methods are given below:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>No.<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>int indexOf(int ch)<\/td><td>returns index position for the given char value<\/td><\/tr><tr><td>2<\/td><td>int indexOf(int ch, int fromIndex)<\/td><td>returns index position for the given char value and from index<\/td><\/tr><tr><td>3<\/td><td>int indexOf(String substring)<\/td><td>returns index position for the given substring<\/td><\/tr><tr><td>4<\/td><td>int indexOf(String substring, int fromIndex)<\/td><td>returns index position for the given substring and from index<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameters<\/h3>\n\n\n\n<p><strong>ch<\/strong>: char value i.e. a single character e.g. &#8216;a&#8217;<\/p>\n\n\n\n<p><strong>fromIndex<\/strong>: index position from where index of the char value or substring is retured<\/p>\n\n\n\n<p><strong>substring<\/strong>: substring to be searched in this string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>index of the string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String indexOf() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class IndexOfExample{  \npublic static void main(String args&#91;]){  \nString s1=\"this is index of example\";  \n\/\/passing substring  \nint index1=s1.indexOf(\"is\");\/\/returns the index of is substring  \nint index2=s1.indexOf(\"index\");\/\/returns the index of index substring  \nSystem.out.println(index1+\"  \"+index2);\/\/2 8  \n  \n\/\/passing substring with from index  \nint index3=s1.indexOf(\"is\",4);\/\/returns the index of is substring after 4th index  \nSystem.out.println(index3);\/\/5 i.e. the index of another is  \n  \n\/\/passing char value  \nint index4=s1.indexOf('s');\/\/returns the index of s char value  \nSystem.out.println(index4);\/\/3  \n}} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>2  8\n5\n3<\/code><\/pre>\n\n\n\n<h2>Java String indexOf(String substring) Method Example<\/h2>\n\n\n\n<p>This method takes substring as an argument and returns index of first character of the substring.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class IndexOfExample2 {  \n    public static void main(String&#91;] args) {  \n        String s1 = \"This is indexOf method\";         \n        \/\/ Passing Substring    \n        int index = s1.indexOf(\"method\"); \/\/Returns the index of this substring  \n        System.out.println(\"index of substring \"+index);          \n    }  \n  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>index of substring 16\n<\/code><\/pre>\n\n\n\n<h2>Java String indexOf(String substring, int fromIndex) Method Example<\/h2>\n\n\n\n<p>This method takes substring and index as arguments and returns index of first character occured after the given\u00a0<em>fromIndex<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class IndexOfExample3 {  \n    public static void main(String&#91;] args) {      \n        String s1 = \"This is indexOf method\";         \n        \/\/ Passing substring and index  \n        int index = s1.indexOf(\"method\", 10); \/\/Returns the index of this substring  \n        System.out.println(\"index of substring \"+index);  \n        index = s1.indexOf(\"method\", 20); \/\/ It returns -1 if substring does not found  \n        System.out.println(\"index of substring \"+index);          \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>index of substring 16\nindex of substring -1<\/code><\/pre>\n\n\n\n<h2>Java String indexOf(int char, int fromIndex) Method Example<\/h2>\n\n\n\n<p>This method takes char and index as arguments and returns index of first character occured after the given\u00a0<em>fromIndex<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class IndexOfExample4 {  \n    public static void main(String&#91;] args) {          \n        String s1 = \"This is indexOf method\";         \n        \/\/ Passing char and index from  \n        int index = s1.indexOf('e', 12); \/\/Returns the index of this char  \n        System.out.println(\"index of char \"+index);       \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>index of char 17<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string indexOf()&nbsp;method returns index of given character value or substring. If it is not found, it returns -1. The index counter starts from zero. Internal implementation Signature There are 4 types of indexOf method in java. The signature of indexOf methods are given below: No. Method Description 1 int indexOf(int ch) returns index position [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/530"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=530"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/530\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 571,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/530\/revisions\/571"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=530"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=530"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=530"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 529,
        "date": "2020-06-24T11:28:07",
        "date_gmt": "2020-06-24T11:28:07",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=529"
        },
        "modified": "2020-06-25T11:21:00",
        "modified_gmt": "2020-06-25T11:21:00",
        "slug": "string-intern",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-intern\/",
        "title": {
            "rendered": "String intern()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string intern()<\/strong>&nbsp;method returns the interned string. It returns the canonical representation of string.<\/p>\n\n\n\n<p>It can be used to return string from memory, if it is created by new keyword. It creates exact copy of heap string object in string constant pool.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature of intern method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;String&nbsp;intern()&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>interned string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String intern() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class InternExample{  \npublic static void main(String args&#91;]){  \nString s1=new String(\"hello\");  \nString s2=\"hello\";  \nString s3=s1.intern();\/\/returns string from pool, now it will be same as s2  \nSystem.out.println(s1==s2);\/\/false because reference variables are pointing to different instance  \nSystem.out.println(s2==s3);\/\/true because reference variables are pointing to same instance  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>false\ntrue<\/code><\/pre>\n\n\n\n<h2>Java String intern() Method Example 2<\/h2>\n\n\n\n<p>Let&#8217;s see one more example to understand the string intern concept.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class InternExample2 {  \n    public static void main(String&#91;] args) {          \n        String s1 = \"codemeals\";  \n        String s2 = s1.intern();  \n        String s3 = new String(\"codemeals\");  \n        String s4 = s3.intern();          \n        System.out.println(s1==s2); \/\/ True  \n        System.out.println(s1==s3); \/\/ False  \n        System.out.println(s1==s4); \/\/ True       \n        System.out.println(s2==s3); \/\/ False  \n        System.out.println(s2==s4); \/\/ True        \n        System.out.println(s3==s4); \/\/ False          \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>true\nfalse\ntrue\nfalse\ntrue\nfalse<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string intern()&nbsp;method returns the interned string. It returns the canonical representation of string. It can be used to return string from memory, if it is created by new keyword. It creates exact copy of heap string object in string constant pool. Signature The signature of intern method is given below: public&nbsp;String&nbsp;intern()&nbsp;&nbsp; Returns interned string [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/529"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=529"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/529\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 598,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/529\/revisions\/598"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=529"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=529"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=529"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 528,
        "date": "2020-06-24T11:29:56",
        "date_gmt": "2020-06-24T11:29:56",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=528"
        },
        "modified": "2020-06-25T11:21:23",
        "modified_gmt": "2020-06-25T11:21:23",
        "slug": "string-isempty",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-isempty\/",
        "title": {
            "rendered": "String isEmpty()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string isEmpty()<\/strong>&nbsp;method checks if this string is empty or not. It returns&nbsp;<em>true<\/em>, if length of string is 0 otherwise&nbsp;<em>false<\/em>. In other words, true is returned if string is empty otherwise it returns false.<\/p>\n\n\n\n<p>The isEmpty() method of String class is included in java string since JDK 1.6.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public boolean isEmpty() {  \n        return value.length == 0;  \n    }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature or syntax of string isEmpty() method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>boolean<\/strong>&nbsp;isEmpty()&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>true if length is 0 otherwise false.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Since<\/h3>\n\n\n\n<p><strong>1.6<\/strong><\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String isEmpty() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class IsEmptyExample{  \npublic static void main(String args&#91;]){  \nString s1=\"\";  \nString s2=\"codemeals\";  \n  \nSystem.out.println(s1.isEmpty());  \nSystem.out.println(s2.isEmpty());  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>true\nfalse<\/code><\/pre>\n\n\n\n<h2>Java String isEmpty() Method Example 2<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class IsEmptyExample2 {  \n    public static void main(String&#91;] args) {  \n        String s1=\"\";    \n        String s2=\"codemeals\";             \n        \/\/ Either length is zero or isEmpty is true  \n        if(s1.length()==0 || s1.isEmpty())  \n            System.out.println(\"String s1 is empty\");  \n        else System.out.println(\"s1\");        \n        if(s2.length()==0 || s2.isEmpty())  \n            System.out.println(\"String s2 is empty\");  \n        else System.out.println(s2);  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>String s1 is empty\nCodemeals<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string isEmpty()&nbsp;method checks if this string is empty or not. It returns&nbsp;true, if length of string is 0 otherwise&nbsp;false. In other words, true is returned if string is empty otherwise it returns false. The isEmpty() method of String class is included in java string since JDK 1.6. Internal implementation Signature The signature or syntax [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/528"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=528"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/528\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 599,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/528\/revisions\/599"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=528"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=528"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=528"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 527,
        "date": "2020-06-24T11:32:22",
        "date_gmt": "2020-06-24T11:32:22",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=527"
        },
        "modified": "2020-06-25T11:21:39",
        "modified_gmt": "2020-06-25T11:21:39",
        "slug": "string-join",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-join\/",
        "title": {
            "rendered": "String join()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string join()<\/strong>&nbsp;method returns a string joined with given delimiter. In string join method, delimiter is copied for each elements.<\/p>\n\n\n\n<p>In case of null element, &#8220;null&#8221; is added. The join() method is included in java string since JDK 1.8.<\/p>\n\n\n\n<p>There are two types of join() methods in java string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature or syntax of string join method is given below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static String join(CharSequence delimiter, CharSequence... elements)  \nand  \npublic static String join(CharSequence delimiter, Iterable&lt;? extends CharSequence> elements)  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameters<\/h3>\n\n\n\n<p><strong>delimiter<\/strong>&nbsp;: char value to be added with each element<\/p>\n\n\n\n<p><strong>elements<\/strong>&nbsp;: char value to be attached with delimiter<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>joined string with delimiter<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Throws<\/h3>\n\n\n\n<p><strong>NullPointerException<\/strong>&nbsp;if element or delimiter is null.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Since<\/h3>\n\n\n\n<p><strong>1.8<\/strong><\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String join() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringJoinExample{  \npublic static void main(String args&#91;]){  \nString joinString1=String.join(\"-\",\"welcome\",\"to\",\"codemeals\");  \nSystem.out.println(joinString1);  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>welcome-to-codemeals\n<\/code><\/pre>\n\n\n\n<h2>Java String join() Method Example 2<\/h2>\n\n\n\n<p>We can use delimeter to format the string as we did in the below example to show date and time.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringJoinExample2 {  \n    public static void main(String&#91;] args) {          \n        String date = String.join(\"\/\",\"25\",\"06\",\"2018\");    \n        System.out.print(date);    \n        String time = String.join(\":\", \"12\",\"10\",\"10\");  \n        System.out.println(\" \"+time);  \n    }  \n} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>25\/06\/2018 12:10:10<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string join()&nbsp;method returns a string joined with given delimiter. In string join method, delimiter is copied for each elements. In case of null element, &#8220;null&#8221; is added. The join() method is included in java string since JDK 1.8. There are two types of join() methods in java string. Signature The signature or syntax of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/527"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=527"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/527\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 600,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/527\/revisions\/600"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=527"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=527"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=527"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 526,
        "date": "2020-06-24T11:35:17",
        "date_gmt": "2020-06-24T11:35:17",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=526"
        },
        "modified": "2020-06-24T11:35:17",
        "modified_gmt": "2020-06-24T11:35:17",
        "slug": "string-lastindexof",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-lastindexof\/",
        "title": {
            "rendered": "String lastIndexOf()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string lastIndexOf()<\/strong>&nbsp;method returns last index of the given character value or substring. If it is not found, it returns -1. The index counter starts from zero.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal Implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public int lastIndexOf(int ch) {  \n       return lastIndexOf(ch, value.length - 1);  \n   }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>There are 4 types of lastIndexOf method in java. The signature of lastIndexOf methods are given below:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>No.<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>int lastIndexOf(int ch)<\/td><td>returns last index position for the given char value<\/td><\/tr><tr><td>2<\/td><td>int lastIndexOf(int ch, int fromIndex)<\/td><td>returns last index position for the given char value and from index<\/td><\/tr><tr><td>3<\/td><td>int lastIndexOf(String substring)<\/td><td>returns last index position for the given substring<\/td><\/tr><tr><td>4<\/td><td>int lastIndexOf(String substring, int fromIndex)<\/td><td>returns last index position for the given substring and from index<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameters<\/h3>\n\n\n\n<p><strong>ch<\/strong>: char value i.e. a single character e.g. &#8216;a&#8217;<\/p>\n\n\n\n<p><strong>fromIndex<\/strong>: index position from where index of the char value or substring is retured<\/p>\n\n\n\n<p><strong>substring<\/strong>: substring to be searched in this string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>last index of the string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String lastIndexOf() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LastIndexOfExample{  \npublic static void main(String args&#91;]){  \nString s1=\"this is index of example\";\/\/there are 2 's' characters in this sentence  \nint index1=s1.lastIndexOf('s');\/\/returns last index of 's' char value  \nSystem.out.println(index1);\/\/6  \n}}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>6\n<\/code><\/pre>\n\n\n\n<h2>Java String lastIndexOf(int ch, int fromIndex) Method Example<\/h2>\n\n\n\n<p>Here, we are finding last index from the string by specifying\u00a0<em>fromIndex<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LastIndexOfExample2 {  \n    public static void main(String&#91;] args) {  \n        String str = \"This is index of example\";  \n        int index = str.lastIndexOf('s',5);  \n        System.out.println(index);        \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>3<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String lastIndexOf(String substring) Method Example<\/h2>\n\n\n\n<p>It returns the last index of the substring.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LastIndexOfExample3 {  \n    public static void main(String&#91;] args) {           \n        String str = \"This is last index of example\";  \n        int index = str.lastIndexOf(\"of\");  \n        System.out.println(index);        \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>19<\/code><\/pre>\n\n\n\n<h2>Java String lastIndexOf(String substring, int fromIndex) Method Example<\/h2>\n\n\n\n<p>It returns the last index of the substring from the\u00a0<em>fromIndex<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LastIndexOfExample4 {  \n    public static void main(String&#91;] args) {           \n        String str = \"This is last index of example\";  \n        int index = str.lastIndexOf(\"of\", 25);  \n        System.out.println(index);  \n        index = str.lastIndexOf(\"of\", 10);  \n        System.out.println(index); \/\/ -1, if not found        \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>19\n-1<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string lastIndexOf()&nbsp;method returns last index of the given character value or substring. If it is not found, it returns -1. The index counter starts from zero. Internal Implementation Signature There are 4 types of lastIndexOf method in java. The signature of lastIndexOf methods are given below: No. Method Description 1 int lastIndexOf(int ch) returns [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/526"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=526"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/526\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 576,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/526\/revisions\/576"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=526"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=526"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=526"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 525,
        "date": "2020-06-24T11:37:10",
        "date_gmt": "2020-06-24T11:37:10",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=525"
        },
        "modified": "2020-06-25T11:22:10",
        "modified_gmt": "2020-06-25T11:22:10",
        "slug": "string-length",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-length\/",
        "title": {
            "rendered": "String length()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string length()<\/strong>&nbsp;method length of the string. It returns count of total number of characters. The length of java string is same as the unicode code units of the string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public int length() {  \n      return value.length;  \n  }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature of the string length() method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>int<\/strong>&nbsp;length()&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Specified by<\/h3>\n\n\n\n<p>CharSequence interface<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>length of characters<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String length() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LengthExample{  \npublic static void main(String args&#91;]){  \nString s1=\"codemeals\";  \nString s2=\"python\";  \nSystem.out.println(\"string length is: \"+s1.length());\/\/10 is the length of codemeals string  \nSystem.out.println(\"string length is: \"+s2.length());\/\/6 is the length of python string  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>string length is: 10\nstring length is: 6<\/code><\/pre>\n\n\n\n<h2>Java String length() Method Example 2<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LengthExample2 {  \n    public static void main(String&#91;] args) {  \n        String str = \"codemeals\";  \n        if(str.length()>0) {  \n            System.out.println(\"String is not empty and length is: \"+str.length());  \n        }  \n        str = \"\";  \n        if(str.length()==0) {  \n            System.out.println(\"String is empty now: \"+str.length());  \n        }  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>String is not empty and length is: 10\nString is empty now: 0<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string length()&nbsp;method length of the string. It returns count of total number of characters. The length of java string is same as the unicode code units of the string. Internal implementation Signature The signature of the string length() method is given below: public&nbsp;int&nbsp;length()&nbsp;&nbsp; Specified by CharSequence interface Returns length of characters Java String length() [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/525"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=525"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/525\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 601,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/525\/revisions\/601"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=525"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=525"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=525"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 524,
        "date": "2020-06-24T11:39:19",
        "date_gmt": "2020-06-24T11:39:19",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=524"
        },
        "modified": "2020-06-25T11:22:22",
        "modified_gmt": "2020-06-25T11:22:22",
        "slug": "string-replace",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-replace\/",
        "title": {
            "rendered": "String replace()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string replace()<\/strong>&nbsp;method returns a string replacing all the old char or CharSequence to new char or CharSequence.<\/p>\n\n\n\n<p>Since JDK 1.5, a new replace() method is introduced, allowing you to replace a sequence of char values.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public String replace(char oldChar, char newChar) {  \n       if (oldChar != newChar) {  \n           int len = value.length;  \n           int i = -1;  \n           char&#91;] val = value; \/* avoid getfield opcode *\/  \n  \n           while (++i &lt; len) {  \n               if (val&#91;i] == oldChar) {  \n                   break;  \n               }  \n           }  \n           if (i &lt; len) {  \n               char buf&#91;] = new char&#91;len];  \n               for (int j = 0; j &lt; i; j++) {  \n                   buf&#91;j] = val&#91;j];  \n               }  \n               while (i &lt; len) {  \n                   char c = val&#91;i];  \n                   buf&#91;i] = (c == oldChar) ? newChar : c;  \n                   i++;  \n               }  \n               return new String(buf, true);  \n           }  \n       }  \n       return this;  \n   }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>There are two type of replace methods in java string.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;String&nbsp;replace(<strong>char<\/strong>&nbsp;oldChar,&nbsp;<strong>char<\/strong>&nbsp;newChar)&nbsp;&nbsp;<\/li><li class=\"\">and&nbsp;&nbsp;<\/li><li><strong>public<\/strong>&nbsp;String&nbsp;replace(CharSequence&nbsp;target,&nbsp;CharSequence&nbsp;replacement)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<p>The second replace method is added since JDK 1.5.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameters<\/h3>\n\n\n\n<p><strong>oldChar<\/strong>&nbsp;: old character<\/p>\n\n\n\n<p><strong>newChar<\/strong>&nbsp;: new character<\/p>\n\n\n\n<p><strong>target<\/strong>&nbsp;: target sequence of characters<\/p>\n\n\n\n<p><strong>replacement<\/strong>&nbsp;: replacement sequence of characters<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>replaced string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String replace(char old, char new) method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ReplaceExample1{  \npublic static void main(String args&#91;]){  \nString s1=\"codemeals is a very good website\";  \nString replaceString=s1.replace('a','e');\/\/replaces all occurrences of 'a' to 'e'  \nSystem.out.println(replaceString);  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals is e very good website\n<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String replace(CharSequence target, CharSequence replacement) method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ReplaceExample2{  \npublic static void main(String args&#91;]){  \nString s1=\"my name is khan my name is java\";  \nString replaceString=s1.replace(\"is\",\"was\");\/\/replaces all occurrences of \"is\" to \"was\"  \nSystem.out.println(replaceString);  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>my name was khan my name was java\n<\/code><\/pre>\n\n\n\n<h2>Java String replace() Method Example 3<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ReplaceExample3 {  \n    public static void main(String&#91;] args) {  \n        String str = \"oooooo-hhhh-oooooo\";  \n        String rs = str.replace(\"h\",\"s\"); \/\/ Replace 'h' with 's'  \n        System.out.println(rs);  \n        rs = rs.replace(\"s\",\"h\"); \/\/ Replace 's' with 'h'  \n        System.out.println(rs);  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>oooooo-ssss-oooooo\noooooo-hhhh-oooooo<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string replace()&nbsp;method returns a string replacing all the old char or CharSequence to new char or CharSequence. Since JDK 1.5, a new replace() method is introduced, allowing you to replace a sequence of char values. Internal implementation Signature There are two type of replace methods in java string. public&nbsp;String&nbsp;replace(char&nbsp;oldChar,&nbsp;char&nbsp;newChar)&nbsp;&nbsp; and&nbsp;&nbsp; public&nbsp;String&nbsp;replace(CharSequence&nbsp;target,&nbsp;CharSequence&nbsp;replacement)&nbsp;&nbsp; The second replace [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/524"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=524"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/524\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 602,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/524\/revisions\/602"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=524"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=524"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=524"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 523,
        "date": "2020-06-24T11:41:26",
        "date_gmt": "2020-06-24T11:41:26",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=523"
        },
        "modified": "2020-06-25T11:22:35",
        "modified_gmt": "2020-06-25T11:22:35",
        "slug": "string-replaceall",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-replaceall\/",
        "title": {
            "rendered": "String replaceAll()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string replaceAll()<\/strong>&nbsp;method returns a string replacing all the sequence of characters matching regex and replacement string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public String replaceAll(String regex, String replacement) {  \n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);  \n} <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;String&nbsp;replaceAll(String&nbsp;regex,&nbsp;String&nbsp;replacement)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameters<\/h3>\n\n\n\n<p><strong>regex<\/strong>&nbsp;: regular expression<\/p>\n\n\n\n<p><strong>replacement<\/strong>&nbsp;: replacement sequence of characters<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>replaced string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String replaceAll() example: replace character<\/h2>\n\n\n\n<p>Let&#8217;s see an example to replace all the occurrences of&nbsp;<strong>a single character<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ReplaceAllExample1{  \npublic static void main(String args&#91;]){  \nString s1=\"codemeals is a very good website\";  \nString replaceString=s1.replaceAll(\"a\",\"e\");\/\/replaces all occurrences of \"a\" to \"e\"  \nSystem.out.println(replaceString);  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals is e very good website\n<\/code><\/pre>\n\n\n\n<h2>Java String replaceAll() example: replace word<\/h2>\n\n\n\n<p>Let&#8217;s see an example to replace all the occurrences of&nbsp;<strong>single word or set of words<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ReplaceAllExample2{  \npublic static void main(String args&#91;]){  \nString s1=\"My name is Khan. My name is Bob. My name is Sonoo.\";  \nString replaceString=s1.replaceAll(\"is\",\"was\");\/\/replaces all occurrences of \"is\" to \"was\"  \nSystem.out.println(replaceString);  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\">My name was Khan. My name was Bob. My name was Sonoo.<\/pre>\n\n\n\n<h2>Java String replaceAll() example: remove white spaces<\/h2>\n\n\n\n<p>Let&#8217;s see an example to remove all the occurrences of&nbsp;<strong>white spaces<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class ReplaceAllExample3{  \npublic static void main(String args&#91;]){  \nString s1=\"My name is Khan. My name is Bob. My name is Sonoo.\";  \nString replaceString=s1.replaceAll(\"\\\\s\",\"\");  \nSystem.out.println(replaceString);  \n}}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>MynameisKhan.MynameisBob.MynameisSonoo.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string replaceAll()&nbsp;method returns a string replacing all the sequence of characters matching regex and replacement string. Internal implementation Signature public&nbsp;String&nbsp;replaceAll(String&nbsp;regex,&nbsp;String&nbsp;replacement)&nbsp;&nbsp; Parameters regex&nbsp;: regular expression replacement&nbsp;: replacement sequence of characters Returns replaced string Java String replaceAll() example: replace character Let&#8217;s see an example to replace all the occurrences of&nbsp;a single character. Java String replaceAll() example: [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/523"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=523"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/523\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 603,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/523\/revisions\/603"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=523"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=523"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=523"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 522,
        "date": "2020-06-24T11:43:22",
        "date_gmt": "2020-06-24T11:43:22",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=522"
        },
        "modified": "2020-06-25T11:22:49",
        "modified_gmt": "2020-06-25T11:22:49",
        "slug": "string-startswith",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-startswith\/",
        "title": {
            "rendered": "String startsWith()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string startsWith()<\/strong>&nbsp;method checks if this string starts with given prefix. It returns true if this string starts with given prefix else returns false.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public boolean startsWith(String prefix, int toffset) {  \n     char ta&#91;] = value;  \n     int to = toffset;  \n     char pa&#91;] = prefix.value;  \n     int po = 0;  \n     int pc = prefix.value.length;  \n     \/\/ Note: toffset might be near -1>>>1.  \n     if ((toffset &lt; 0) || (toffset > value.length - pc)) {  \n         return false;  \n     }  \n     while (--pc >= 0) {  \n         if (ta&#91;to++] != pa&#91;po++]) {  \n             return false;  \n         }  \n     }  \n     return true;  \n }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The syntax or signature of startWith() method is given below.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>boolean<\/strong>&nbsp;startsWith(String&nbsp;prefix)&nbsp;&nbsp;<\/li><li class=\"\"><strong>public<\/strong>&nbsp;<strong>boolean<\/strong>&nbsp;startsWith(String&nbsp;prefix,&nbsp;<strong>int<\/strong>&nbsp;offset)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameter<\/h3>\n\n\n\n<p><strong>prefix<\/strong>&nbsp;: Sequence of character<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>true or false<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String startsWith() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StartsWithExample{  \npublic static void main(String args&#91;]){  \nString s1=\"java string split method by codemeals\";  \nSystem.out.println(s1.startsWith(\"ja\"));  \nSystem.out.println(s1.startsWith(\"java string\"));  \n}} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\ntrue<\/code><\/pre>\n\n\n\n<h2>Java String startsWith(String prefix, int offset) Method Example<\/h2>\n\n\n\n<p>This is overloaded method of startWith() method which is used to pass one extra argument (offset) to the function. This method works from the passed offset. Let&#8217;s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StartsWithExample2 {  \n    public static void main(String&#91;] args) {  \n        String str = \"Codemeals\";  \n        System.out.println(str.startsWith(\"J\")); \/\/ True  \n        System.out.println(str.startsWith(\"a\")); \/\/ False  \n        System.out.println(str.startsWith(\"a\",1)); \/\/ True  \n    }  \n}<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\nfalse\ntrue<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string startsWith()&nbsp;method checks if this string starts with given prefix. It returns true if this string starts with given prefix else returns false. Internal implementation Signature The syntax or signature of startWith() method is given below. public&nbsp;boolean&nbsp;startsWith(String&nbsp;prefix)&nbsp;&nbsp; public&nbsp;boolean&nbsp;startsWith(String&nbsp;prefix,&nbsp;int&nbsp;offset)&nbsp;&nbsp; Parameter prefix&nbsp;: Sequence of character Returns true or false Java String startsWith() method example Output: Java [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/522"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=522"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/522\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 604,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/522\/revisions\/604"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=522"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=522"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=522"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 521,
        "date": "2020-06-24T11:45:03",
        "date_gmt": "2020-06-24T11:45:03",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=521"
        },
        "modified": "2020-06-25T11:23:07",
        "modified_gmt": "2020-06-25T11:23:07",
        "slug": "string-substring",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-substring\/",
        "title": {
            "rendered": "String substring()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string substring()<\/strong>&nbsp;method returns a part of the string.<\/p>\n\n\n\n<p>We pass begin index and end index number position in the java substring method where start index is inclusive and end index is exclusive. In other words, start index starts from 0 whereas end index starts from 1.<\/p>\n\n\n\n<p>There are two types of substring methods in java string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public String substring(int beginIndex) {  \n       if (beginIndex &lt; 0) {  \n           throw new StringIndexOutOfBoundsException(beginIndex);  \n       }  \n       int subLen = value.length - beginIndex;  \n       if (subLen &lt; 0) {  \n           throw new StringIndexOutOfBoundsException(subLen);  \n       }  \n       return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);  \n   } <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;String&nbsp;substring(<strong>int<\/strong>&nbsp;startIndex)&nbsp;&nbsp;<\/li><li class=\"\">and&nbsp;&nbsp;<\/li><li><strong>public<\/strong>&nbsp;String&nbsp;substring(<strong>int<\/strong>&nbsp;startIndex,&nbsp;<strong>int<\/strong>&nbsp;endIndex)&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<p>If you don&#8217;t specify endIndex, java substring() method will return all the characters from startIndex.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Parameters<\/h3>\n\n\n\n<p><strong>startIndex<\/strong>&nbsp;: starting index is inclusive<\/p>\n\n\n\n<p><strong>endIndex<\/strong>&nbsp;: ending index is exclusive<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>specified string<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Throws<\/h3>\n\n\n\n<p><strong>StringIndexOutOfBoundsException<\/strong>&nbsp;if start index is negative value or end index is lower than starting index.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String substring() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SubstringExample{  \npublic static void main(String args&#91;]){  \nString s1=\"codemeals\";  \nSystem.out.println(s1.substring(2,4));\/\/returns va  \nSystem.out.println(s1.substring(2));\/\/returns vatpoint  \n}} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>va\nvatpoint<\/code><\/pre>\n\n\n\n<h2>Java String substring() Method Example 2<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SubstringExample2 {  \n    public static void main(String&#91;] args) {  \n        String s1=\"codemeals\";    \n        String substr = s1.substring(0); \/\/ Starts with 0 and goes to end  \n        System.out.println(substr);  \n        String substr2 = s1.substring(5,10); \/\/ Starts from 5 and goes to 10  \n        System.out.println(substr2);    \n        String substr3 = s1.substring(5,15); \/\/ Returns Exception  \n    }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Codemeals\npoint\nException in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 5, end 15, length 10<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string substring()&nbsp;method returns a part of the string. We pass begin index and end index number position in the java substring method where start index is inclusive and end index is exclusive. In other words, start index starts from 0 whereas end index starts from 1. There are two types of substring methods in [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/521"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=521"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/521\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 605,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/521\/revisions\/605"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=521"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=521"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=521"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 520,
        "date": "2020-06-24T11:46:36",
        "date_gmt": "2020-06-24T11:46:36",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=520"
        },
        "modified": "2020-06-25T11:23:18",
        "modified_gmt": "2020-06-25T11:23:18",
        "slug": "string-tochararray",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-tochararray\/",
        "title": {
            "rendered": "String toCharArray()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string toCharArray()<\/strong>&nbsp;method converts this string into character array. It returns a newly created character array, its length is similar to this string and its contents are initialized with the characters of this string.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public char&#91;] toCharArray() {  \n      \/\/ Cannot use Arrays.copyOf because of class initialization order issues  \n      char result&#91;] = new char&#91;value.length];  \n      System.arraycopy(value, 0, result, 0, value.length);  \n      return result;  \n  }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature or syntax of string toCharArray() method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>char<\/strong>[]&nbsp;toCharArray()&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>character array<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String toCharArray() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringToCharArrayExample{  \npublic static void main(String args&#91;]){  \nString s1=\"hello\";  \nchar&#91;] ch=s1.toCharArray();  \nfor(int i=0;i&lt;ch.length;i++){  \nSystem.out.print(ch&#91;i]);  \n}  \n}} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>hello\n<\/code><\/pre>\n\n\n\n<h2>Java String toCharArray() Method Example 2<\/h2>\n\n\n\n<p>Let&#8217;s see one more example of char array. It is useful method which returns char array from the string without writing any custom code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringToCharArrayExample2 {  \n    public static void main(String&#91;] args) {  \n        String s1 = \"Welcome to codemeals\";  \n        char&#91;] ch = s1.toCharArray();  \n        int len = ch.length;  \n        System.out.println(\"Char Array length: \" + len);  \n        System.out.println(\"Char Array elements: \");  \n        for (int i = 0; i &lt; len; i++) {  \n            System.out.println(ch&#91;i]);  \n        }  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p class=\"has-text-align-right\">Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Char Array length: 21\nChar Array elements: \nW\ne\nl\nc\no\nm\ne\n \nt\no\n \nJ\na\nv\na\nt\np\no\ni\nn\nt<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string toCharArray()&nbsp;method converts this string into character array. It returns a newly created character array, its length is similar to this string and its contents are initialized with the characters of this string. Internal implementation Signature The signature or syntax of string toCharArray() method is given below: public&nbsp;char[]&nbsp;toCharArray()&nbsp;&nbsp; Returns character array Java String toCharArray() [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/520"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=520"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/520\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 606,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/520\/revisions\/606"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=520"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=520"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=520"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 519,
        "date": "2020-06-24T11:48:33",
        "date_gmt": "2020-06-24T11:48:33",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=519"
        },
        "modified": "2020-06-24T11:48:33",
        "modified_gmt": "2020-06-24T11:48:33",
        "slug": "string-trim",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/string-trim\/",
        "title": {
            "rendered": "String trim()"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java string trim()<\/strong>&nbsp;method eliminates leading and trailing spaces. The unicode value of space character is &#8216;\\u0020&#8217;. The trim() method in java string checks this unicode value before and after the string, if it exists then removes the spaces and returns the omitted string.<\/p>\n\n\n\n<h4>The string trim() method doesn&#8217;t omits middle spaces.<\/h4>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Internal implementation<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public String trim() {  \n        int len = value.length;  \n        int st = 0;  \n        char&#91;] val = value;    \/* avoid getfield opcode *\/  \n  \n        while ((st &lt; len) &amp;&amp; (val&#91;st] &lt;= ' ')) {  \n            st++;  \n        }  \n        while ((st &lt; len) &amp;&amp; (val&#91;len - 1] &lt;= ' ')) {  \n            len--;  \n        }  \n        return ((st > 0) || (len &lt; value.length)) ? substring(st, len) : this;  \n    } <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Signature<\/h3>\n\n\n\n<p>The signature or syntax of string trim method is given below:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;String&nbsp;trim()&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Returns<\/h3>\n\n\n\n<p>string with omitted leading and trailing spaces<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java String trim() method example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringTrimExample{  \npublic static void main(String args&#91;]){  \nString s1=\"  hello string   \";  \nSystem.out.println(s1+\"codemeals\");\/\/without trim()  \nSystem.out.println(s1.trim()+\"codemeals\");\/\/with trim()  \n}} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>  hello string   codemeals\nhello stringcodemeals  <\/code><\/pre>\n\n\n\n<h2>Java String trim() Method Example 2<\/h2>\n\n\n\n<p>This example demonstrate the use of trim method. This method removes all the trailing spaces so the length of string also reduces. Let&#8217;s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringTrimExample {  \n    public static void main(String&#91;] args) {  \n        String s1 =\"  hello java string   \";  \n        System.out.println(s1.length());  \n        System.out.println(s1); \/\/Without trim()  \n        String tr = s1.trim();  \n        System.out.println(tr.length());  \n        System.out.println(tr); \/\/With trim()  \n    }  \n} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>22\n  hello java string   \n17\nhello java string<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java string trim()&nbsp;method eliminates leading and trailing spaces. The unicode value of space character is &#8216;\\u0020&#8217;. The trim() method in java string checks this unicode value before and after the string, if it exists then removes the spaces and returns the omitted string. The string trim() method doesn&#8217;t omits middle spaces. Internal implementation Signature The [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            10
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/519"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=519"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/519\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 583,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/519\/revisions\/583"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=519"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=519"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=519"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]