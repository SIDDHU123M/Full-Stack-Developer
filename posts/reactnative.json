[
  {
    "id": 3406,
    "date": "2020-12-18T10:54:51",
    "date_gmt": "2020-12-18T10:54:51",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3406"
    },
    "modified": "2020-12-18T10:54:51",
    "modified_gmt": "2020-12-18T10:54:51",
    "slug": "overview-6-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/overview-6-3/",
    "title": {
      "rendered": "Overview"
    },
    "content": {
      "rendered": "\n<p>For better understanding of React Native concepts, we will borrow a few lines from the official documentation −</p>\n\n\n\n<p>React Native lets you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. With React Native, you don&#8217;t build a mobile web app, an HTML5 app, or a hybrid app; you build a real mobile app that&#8217;s indistinguishable from an app built using Objective-C or Java. React Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just put those building blocks together using JavaScript and React.</p>\n\n\n\n<h2>React Native Features</h2>\n\n\n\n<p>Following are the features of React Native −</p>\n\n\n\n<ul><li><strong>React</strong>&nbsp;− This is a Framework for building web and mobile apps using JavaScript.</li><li><strong>Native</strong>&nbsp;− You can use native components controlled by JavaScript.</li><li><strong>Platforms</strong>&nbsp;− React Native supports IOS and Android platform.</li></ul>\n\n\n\n<h2>React Native Advantages</h2>\n\n\n\n<p>Follow are the advantages of React Native −</p>\n\n\n\n<ul><li><strong>JavaScript</strong>&nbsp;− You can use the existing JavaScript knowledge to build native mobile apps.</li><li><strong>Code sharing</strong>&nbsp;− You can share most of your code on different platforms.</li><li><strong>Community</strong>&nbsp;− The community around React and React Native is large, and you will be able to find any answer you need.</li></ul>\n\n\n\n<h2>React Native Limitations</h2>\n\n\n\n<p>Following are the limitations of React Native −</p>\n\n\n\n<ul><li><strong>Native Components</strong>&nbsp;− If you want to create native functionality which is not created yet, you will need to write some platform specific code.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>For better understanding of React Native concepts, we will borrow a few lines from the official documentation − React Native lets you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. With React Native, you don&#8217;t build a mobile web app, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3406"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3406"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3406/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3406"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3406"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3406"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3408,
    "date": "2020-12-18T10:56:21",
    "date_gmt": "2020-12-18T10:56:21",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3408"
    },
    "modified": "2020-12-18T10:56:21",
    "modified_gmt": "2020-12-18T10:56:21",
    "slug": "environment-setup-3-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/environment-setup-3-2/",
    "title": {
      "rendered": "Environment Setup"
    },
    "content": {
      "rendered": "\n<p>There are a couple of things you need to install to set up the environment for React Native. We will use OSX as our building platform.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Software</th><th>Description</th></tr><tr><td>1</td><td>NodeJS and NPM</td><td>You can follow our NodeJS Environment Setup tutorial to install NodeJS.</td></tr></tbody></table></figure>\n\n\n\n<h2>Step 1: Install create-react-native-app</h2>\n\n\n\n<p>After installing NodeJS and NPM successfully in your system you can proceed with installation of create-react-native-app (globally as shown below).</p>\n\n\n\n<pre class=\"wp-block-code\"><code></code></pre>\n\n\n\n<h2>Step 2: Create project</h2>\n\n\n\n<p>Browse through required folder and create a new react native project as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\Tutorialspoint>cd Desktop\nC:\\Users\\Tutorialspoint\\Desktop>create-react-native-app MyReactNative\n</code></pre>\n\n\n\n<p>After executing the above command, a folder with specifies name is created with the following contents.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/environment_project.jpg\" alt=\"Environment Project\"/></figure>\n\n\n\n<h2>Step 3: NodeJS Python Jdk8</h2>\n\n\n\n<p>Make sure you have Python NodeJS and jdk8 installed in your system if not, install them. In addition to these it is recommended to install latest version of yarn to avoid certain issues.</p>\n\n\n\n<h2>Step 4: Install React Native CLI</h2>\n\n\n\n<p>You can install react native command line interface on npm, using the install -g react-native-cli command as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g react-native-cli\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/environment_commandline.jpg\" alt=\"Environment Commandline\"/></figure>\n\n\n\n<h2>Step 5: Start react native</h2>\n\n\n\n<p>To verify the installation browse through the project folder and try starting the project using the start command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\Tutorialspoint\\Desktop>cd MyReactNative\nC:\\Users\\Tutorialspoint\\Desktop\\MyReactNative>npm start\n</code></pre>\n\n\n\n<p>If everything went well you will get a QR code as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/environment_package_installer.jpg\" alt=\"Environment Package installer\"/></figure>\n\n\n\n<p>As instructed, one way to run react native apps on your android devise is to using expo. Install expo client in your android devise and scan the above obtained QR code.</p>\n\n\n\n<h2>Step 6: Eject the project</h2>\n\n\n\n<p>If you want to run android emulator using android studio, come out of the current command line by pressing&nbsp;<strong>ctrl+c</strong>.</p>\n\n\n\n<p>Then, execute run&nbsp;<strong>eject command</strong>&nbsp;as</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm run eject\n</code></pre>\n\n\n\n<p>This prompts you options to eject, select the first one using arrows and press enter.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/environment_eject_command.jpg\" alt=\"Environment Eject Command\"/></figure>\n\n\n\n<p>Then, you should suggest the name of the app on home screen and project name of the Android studio and Xcode projects.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/environment_eject_command_questions.jpg\" alt=\"Environment Eject Command Questions\"/></figure>\n\n\n\n<p>Though your project ejected successfully, you may get an error as −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/environment_eject_error.jpg\" alt=\"Environment Eject Error\"/></figure>\n\n\n\n<p>Ignore this error and run react native for android using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>react-native run-android\n</code></pre>\n\n\n\n<p>But, before that you need to install android studio.</p>\n\n\n\n<h2>Step 7: Installing Android Studio</h2>\n\n\n\n<p>Visit the web page https://developer.android.com/studio/ and download android studio.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/environment_android_studio.jpg\" alt=\"Environment Android Studio\"/></figure>\n\n\n\n<p>After downloading the installation file of it, double click on it and proceed with the installation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/environment_android_studio3.jpg\" alt=\"Environment Android Studio3\"/></figure>\n\n\n\n<h2>Step 8: Configuring AVD Manager</h2>\n\n\n\n<p>To configure the AVD Manager click on the respective icon in the menu bar.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/configuring_avd_manager.jpg\" alt=\"Configuring AVD Manager\"/></figure>\n\n\n\n<h2>Step 9: Configuring AVD Manager</h2>\n\n\n\n<p>Choose a device definition, Nexus 5X is suggestable.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/choose_device_definition.jpg\" alt=\"Choose Device Definition\"/></figure>\n\n\n\n<p>Click on the Next button you will see a System Image window. Select the&nbsp;<strong>x86 Images</strong>&nbsp;tab.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/system_image.jpg\" alt=\"System Image\"/></figure>\n\n\n\n<p>Then, select Marshmallow and click on next.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/select_system_image.jpg\" alt=\"Select System Image\"/></figure>\n\n\n\n<p>Finally, click on the Finish button to finish the AVD configuration.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/verify_configuration.jpg\" alt=\"Verify Configuration\"/></figure>\n\n\n\n<p>After configuring your virtual device click on the play button under the Actions column to start your android emulator.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/your_virtual_devices.jpg\" alt=\"Your Virtual Devices\"/></figure>\n\n\n\n<h2>Step 10: Running android</h2>\n\n\n\n<p>Open command prompt, browse through your project folder and, execute the&nbsp;<strong>react-native run-android</strong>&nbsp;command.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/running_android.jpg\" alt=\"Running Android\"/></figure>\n\n\n\n<p>Then, your app execution begins in another prompt you can see its status.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/execution_status.jpg\" alt=\"Execution Status\"/></figure>\n\n\n\n<p>In your android emulator you can see the execution of the default app as −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_default_app.jpg\" alt=\"React Native Default App\"/></figure>\n\n\n\n<h2>Step 11: local.properties</h2>\n\n\n\n<p>Open the&nbsp;<strong>android</strong>&nbsp;folder in your project folder&nbsp;<strong><em>SampleReactNative/android</em></strong>&nbsp;(in this case). Create a file with named&nbsp;<strong>local.properties</strong>&nbsp;and add the following path in it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sdk.dir = /C:\\\\Users\\\\Tutorialspoint\\\\AppData\\\\Local\\\\Android\\\\Sdk\n</code></pre>\n\n\n\n<p>here, replace&nbsp;<strong>Tutorialspoint</strong>&nbsp;with your user name.</p>\n\n\n\n<h2>Step 12: Hot Reloading</h2>\n\n\n\n<p>And to build application modify the App.js and the changes will be automatically updated on the android emulator.</p>\n\n\n\n<p>If not, click on the android emulator press&nbsp;<strong>ctrl+m</strong>&nbsp;then, select&nbsp;<strong>Enable Hot Reloading</strong>&nbsp;option.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are a couple of things you need to install to set up the environment for React Native. We will use OSX as our building platform. Sr.No. Software Description 1 NodeJS and NPM You can follow our NodeJS Environment Setup tutorial to install NodeJS. Step 1: Install create-react-native-app After installing NodeJS and NPM successfully in your system [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3408"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3408"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3408/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3408"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3408"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3408"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3410,
    "date": "2020-12-18T10:57:00",
    "date_gmt": "2020-12-18T10:57:00",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3410"
    },
    "modified": "2020-12-18T10:57:00",
    "modified_gmt": "2020-12-18T10:57:00",
    "slug": "app-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/app-2/",
    "title": {
      "rendered": "App"
    },
    "content": {
      "rendered": "\n<p>If you open the default app you can observe that the app.js file looks like</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   render() {\n      return (\n         &lt;View style = {styles.container}>\n            &lt;Text>Open up App.js to start working on your app!&lt;/Text>\n            &lt;Text>Changes you make will automatically reload.&lt;/Text>\n            &lt;Text>Shake your phone to open the developer menu.&lt;/Text>\n         &lt;/View>\n      );\n   }\n}\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n   },\n});</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/working_on_app.jpg\" alt=\"Working on App\"/></figure>\n\n\n\n<h2>Hello world</h2>\n\n\n\n<p>To display a simple message saying “Welcome to Tutorialspoint” remove the CSS part and insert the message to be printed wrapped by the &lt;text&gt;&lt;/text&gt; tags inside &lt;view&gt;&lt;/view&gt; as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Text&gt;Welcome to Tutorialspoint&lt;/Text&gt;\n         &lt;/View&gt;\n      );\n   }\n}</pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/hello_world.jpg\" alt=\"Hello World\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>If you open the default app you can observe that the app.js file looks like Output Hello world To display a simple message saying “Welcome to Tutorialspoint” remove the CSS part and insert the message to be printed wrapped by the &lt;text&gt;&lt;/text&gt; tags inside &lt;view&gt;&lt;/view&gt; as shown below. import React from &#8216;react&#8217;; import { StyleSheet, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3410"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3410"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3410/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3410"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3410"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3410"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3412,
    "date": "2020-12-18T10:57:52",
    "date_gmt": "2020-12-18T10:57:52",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3412"
    },
    "modified": "2020-12-18T10:57:52",
    "modified_gmt": "2020-12-18T10:57:52",
    "slug": "state-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/state-2/",
    "title": {
      "rendered": "State"
    },
    "content": {
      "rendered": "\n<p>The data inside React Components is managed by&nbsp;<strong>state</strong>&nbsp;and&nbsp;<strong>props</strong>. In this chapter, we will talk about&nbsp;<strong>state</strong>.</p>\n\n\n\n<h2>Difference between State and Props</h2>\n\n\n\n<p>The&nbsp;<strong>state</strong>&nbsp;is mutable while&nbsp;<strong>props</strong>&nbsp;are immutable. This means that&nbsp;<strong>state</strong>&nbsp;can be updated in the future while props cannot be updated.</p>\n\n\n\n<h3>Using State</h3>\n\n\n\n<p>This is our root component. We are just importing&nbsp;<strong>Home</strong>&nbsp;which will be used in most of the chapters.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, used do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n      nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n      fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n      culpa qui officia deserunt mollit anim id est laborum.'\n   }\n   render() {\n      return (\n      &lt;View>\n         &lt;Text> {this.state.myState} &lt;/Text>\n      &lt;/View>\n      );\n   }\n}</code></pre>\n\n\n\n<p>We can see in emulator text from the state as in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_state.jpg\" alt=\"React Native State\"/></figure>\n\n\n\n<h3>Updating State</h3>\n\n\n\n<p>Since state is mutable, we can update it by creating the&nbsp;<strong>deleteState</strong>&nbsp;function and call it using the&nbsp;<strong>onPress = {this.deleteText}</strong>&nbsp;event.</p>\n\n\n\n<p><strong>Home.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nclass Home extends Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \n         do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n         Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\n         ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit \n         in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n         Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n         deserunt mollit anim id est laborum.'\n   }\n   updateState = () ⇒ this.setState({ myState: 'The state is updated' })\n   render() {\n      return (\n         &lt;View>\n            &lt;Text onPress = {this.updateState}>\n               {this.state.myState}\n            &lt;/Text>\n         &lt;/View>\n      );\n   }\n}\nexport default Home;</code></pre>\n\n\n\n<p><strong>NOTES</strong>&nbsp;− In all chapters, we will use the class syntax for stateful (container) components and function syntax for stateless (presentational) components. We will learn more about components in the next chapter.</p>\n\n\n\n<p>We will also learn how to use the arrow function syntax for&nbsp;<strong>updateState</strong>. You should keep in mind that this syntax uses the lexical scope, and&nbsp;<strong>this</strong>&nbsp;keyword will be bound to the environment object (Class). This will sometimes lead to unexpected behavior.</p>\n\n\n\n<p>The other way to define methods is to use the EC5 functions but in that case we will need to bind&nbsp;<strong>this</strong>&nbsp;manually in the constructor. Consider the following example to understand this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Home extends Component {\n   constructor() {\n      super()\n      this.updateState = this.updateState.bind(this)\n   }\n   updateState() {\n      //\n   }\n   render() {\n      //\n   }\n}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The data inside React Components is managed by&nbsp;state&nbsp;and&nbsp;props. In this chapter, we will talk about&nbsp;state. Difference between State and Props The&nbsp;state&nbsp;is mutable while&nbsp;props&nbsp;are immutable. This means that&nbsp;state&nbsp;can be updated in the future while props cannot be updated. Using State This is our root component. We are just importing&nbsp;Home&nbsp;which will be used in most of the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3412"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3412"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3412/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3412"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3412"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3412"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3414,
    "date": "2020-12-18T10:58:52",
    "date_gmt": "2020-12-18T10:58:52",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3414"
    },
    "modified": "2020-12-18T10:58:52",
    "modified_gmt": "2020-12-18T10:58:52",
    "slug": "props-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/props-2/",
    "title": {
      "rendered": "Props"
    },
    "content": {
      "rendered": "\n<p>In our last chapter, we showed you how to use mutable&nbsp;<strong>state</strong>. In this chapter, we will show you how to combine the state and the&nbsp;<strong>props</strong>.</p>\n\n\n\n<p>Presentational components should get all data by passing&nbsp;<strong>props</strong>. Only container components should have&nbsp;<strong>state</strong>.</p>\n\n\n\n<h2>Container Component</h2>\n\n\n\n<p>We will now understand what a container component is and also how it works.</p>\n\n\n\n<h3>Theory</h3>\n\n\n\n<p>Now we will update our container component. This component will handle the state and pass the props to the presentational component.</p>\n\n\n\n<p>Container component is only used for handling state. All functionality related to view(styling etc.) will be handled in the presentational component.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>If we want to use example from the last chapter we need to remove the&nbsp;<strong>Text</strong>&nbsp;element from the render function since this element is used for presenting text to the users. This should be inside the presentational component.</p>\n\n\n\n<p>Let us review the code in the example given below. We will import the&nbsp;<strong>PresentationalComponent</strong>&nbsp;and pass it to the render function.</p>\n\n\n\n<p>After we import the&nbsp;<strong>PresentationalComponent</strong>&nbsp;and pass it to the render function, we need to pass the props. We will pass the props by adding&nbsp;<strong>myText = {this.state.myText}</strong>&nbsp;and&nbsp;<strong>deleteText = {this.deleteText}</strong>&nbsp;to&nbsp;<strong>&lt;PresentationalComponent&gt;</strong>. Now, we will be able to access this inside the presentational component.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport PresentationalComponent from './PresentationalComponent'\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, used do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n      nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n      aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat\n      nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui\n      officia deserunt mollit anim id est laborum.'\n   }\n   updateState = () => {\n      this.setState({ myState: 'The state is updated' })\n   }\n   render() {\n      return (\n         &lt;View>\n            &lt;PresentationalComponent myState = {this.state.myState} updateState = {this.updateState}/>\n         &lt;/View>\n      );\n   }\n}</code></pre>\n\n\n\n<h2>Presentational Component</h2>\n\n\n\n<p>We will now understand what a presentational component is and also how it works.</p>\n\n\n\n<h3>Theory</h3>\n\n\n\n<p>Presentational components should be used only for presenting view to the users. These components do not have state. They receive all data and functions as props.</p>\n\n\n\n<p>The best practice is to use as much presentational components as possible.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>As we mentioned in our previous chapter, we are using the EC6 function syntax for presentational components.</p>\n\n\n\n<p>Our component will receive props, return view elements, present text using&nbsp;<strong>{props.myText}</strong>&nbsp;and call the&nbsp;<strong>{props.deleteText}</strong>&nbsp;function when a user clicks on the text.</p>\n\n\n\n<p><strong>PresentationalComponent.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nconst PresentationalComponent = (props) => {\n   return (\n      &lt;View>\n         &lt;Text onPress = {props.updateState}>\n            {props.myState}\n         &lt;/Text>\n      &lt;/View>\n   )\n}\nexport default PresentationalComponent</code></pre>\n\n\n\n<p>Now, we have the same functionality as in our&nbsp;<strong>State</strong>&nbsp;chapter. The only difference is that we refactored our code to the container and the presentational component.</p>\n\n\n\n<p>You can run the app and see the text as in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/reactnative_props.jpg\" alt=\"React Native Props\"/></figure>\n\n\n\n<p>If you click on text, it will be removed from the screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/reactnative_props_updated.jpg\" alt=\"React Native Props updated\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In our last chapter, we showed you how to use mutable&nbsp;state. In this chapter, we will show you how to combine the state and the&nbsp;props. Presentational components should get all data by passing&nbsp;props. Only container components should have&nbsp;state. Container Component We will now understand what a container component is and also how it works. Theory [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3414"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3414"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3414/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3414"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3414"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3414"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3416,
    "date": "2020-12-18T10:59:38",
    "date_gmt": "2020-12-18T10:59:38",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3416"
    },
    "modified": "2020-12-18T10:59:38",
    "modified_gmt": "2020-12-18T10:59:38",
    "slug": "styling",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/styling/",
    "title": {
      "rendered": "Styling"
    },
    "content": {
      "rendered": "\n<p>There are a couple of ways to style your elements in React Native.</p>\n\n\n\n<p>You can use the&nbsp;<strong>style</strong>&nbsp;property to add the styles inline. However, this is not the best practice because it can be hard to read the code.</p>\n\n\n\n<p>In this chapter, we will use the&nbsp;<strong>Stylesheet</strong>&nbsp;for styling.</p>\n\n\n\n<h2>Container Component</h2>\n\n\n\n<p>In this section, we will simplify our container component from our previous chapter.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport PresentationalComponent from './PresentationalComponent'\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'This is my state'\n   }\n   render() {\n      return (\n         &lt;View>\n            &lt;PresentationalComponent myState = {this.state.myState}/>\n         &lt;/View>\n      );\n   }\n}</code></pre>\n\n\n\n<h2>Presentational Component</h2>\n\n\n\n<p>In the following example, we will import the&nbsp;<strong>StyleSheet</strong>. At the bottom of the file, we will create our stylesheet and assign it to the&nbsp;<strong>styles</strong>&nbsp;constant. Note that our styles are in&nbsp;<strong>camelCase</strong>&nbsp;and we do not use&nbsp;<strong>px</strong>&nbsp;or % for styling.</p>\n\n\n\n<p>To apply styles to our text, we need to add&nbsp;<strong>style = {styles.myText}</strong>&nbsp;property to the&nbsp;<strong>Text</strong>&nbsp;element.</p>\n\n\n\n<p><strong>PresentationalComponent.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { Text, View, StyleSheet } from 'react-native'\n\nconst PresentationalComponent = (props) => {\n   return (\n      &lt;View>\n         &lt;Text style = {styles.myState}>\n            {props.myState}\n         &lt;/Text>\n      &lt;/View>\n   )\n}\nexport default PresentationalComponent\n\nconst styles = StyleSheet.create ({\n   myState: {\n      marginTop: 20,\n      textAlign: 'center',\n      color: 'blue',\n      fontWeight: 'bold',\n      fontSize: 20\n   }\n})</code></pre>\n\n\n\n<p>When we run the app, we will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/reactnative_styling.jpg\" alt=\"React Native Styling\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are a couple of ways to style your elements in React Native. You can use the&nbsp;style&nbsp;property to add the styles inline. However, this is not the best practice because it can be hard to read the code. In this chapter, we will use the&nbsp;Stylesheet&nbsp;for styling. Container Component In this section, we will simplify our [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3416"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3416"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3416/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3416"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3416"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3416"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3418,
    "date": "2020-12-18T11:00:40",
    "date_gmt": "2020-12-18T11:00:40",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3418"
    },
    "modified": "2020-12-18T11:00:40",
    "modified_gmt": "2020-12-18T11:00:40",
    "slug": "flexbox",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/flexbox/",
    "title": {
      "rendered": "Flexbox"
    },
    "content": {
      "rendered": "\n<p>To accommodate different screen sizes, React Native offers&nbsp;<strong>Flexbox</strong>&nbsp;support.</p>\n\n\n\n<p>We will use the same code that we used in our&nbsp;<strong>React Native &#8211; Styling</strong>&nbsp;chapter. We will only change the&nbsp;<strong>PresentationalComponent</strong>.</p>\n\n\n\n<h2>Layout</h2>\n\n\n\n<p>To achieve the desired layout, flexbox offers three main properties −&nbsp;<strong>flexDirection justifyContent</strong>&nbsp;and&nbsp;<strong>alignItems</strong>.</p>\n\n\n\n<p>The following table shows the possible options.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Values</th><th>Description</th></tr><tr><td>flexDirection</td><td>&#8216;column&#8217;, &#8216;row&#8217;</td><td>Used to specify if elements will be aligned vertically or horizontally.</td></tr><tr><td>justifyContent</td><td>&#8216;center&#8217;, &#8216;flex-start&#8217;, &#8216;flex-end&#8217;, &#8216;space-around&#8217;, &#8216;space-between&#8217;</td><td>Used to determine how should elements be distributed inside the container.</td></tr><tr><td>alignItems</td><td>&#8216;center&#8217;, &#8216;flex-start&#8217;, &#8216;flex-end&#8217;, &#8216;stretched&#8217;</td><td>Used to determine how should elements be distributed inside the container along the secondary axis (opposite of flexDirection)</td></tr></tbody></table></figure>\n\n\n\n<p>If you want to align the items vertically and centralize them, then you can use the following code.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nconst Home = (props) => {\n   return (\n      &lt;View style = {styles.container}>\n         &lt;View style = {styles.redbox} />\n         &lt;View style = {styles.bluebox} />\n         &lt;View style = {styles.blackbox} />\n      &lt;/View>\n   )\n}\n\nexport default Home\n\nconst styles = StyleSheet.create ({\n   container: {\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'grey',\n      height: 600\n   },\n   redbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n   },\n   bluebox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'blue'\n   },\n   blackbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'black'\n   },\n})</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react-native-flexbox-center.jpg\" alt=\"React Native Flexbox Center\"/></figure>\n\n\n\n<p>If the items need to be moved to the right side and spaces need to be added between them, then we can use the following code.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nconst App = (props) => {\n   return (\n      &lt;View style = {styles.container}>\n         &lt;View style = {styles.redbox} />\n         &lt;View style = {styles.bluebox} />\n         &lt;View style = {styles.blackbox} />\n      &lt;/View>\n   )\n}\n\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'flex-end',\n      backgroundColor: 'grey',\n      height: 600\n   },\n   redbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n   },\n   bluebox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'blue'\n   },\n   blackbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'black'\n   },\n})</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react-native-flexbox-right.jpg\" alt=\"React Native Flexbox Right\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>To accommodate different screen sizes, React Native offers&nbsp;Flexbox&nbsp;support. We will use the same code that we used in our&nbsp;React Native &#8211; Styling&nbsp;chapter. We will only change the&nbsp;PresentationalComponent. Layout To achieve the desired layout, flexbox offers three main properties −&nbsp;flexDirection justifyContent&nbsp;and&nbsp;alignItems. The following table shows the possible options. Property Values Description flexDirection &#8216;column&#8217;, &#8216;row&#8217; Used to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3418"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3418"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3418/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3418"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3418"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3418"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3420,
    "date": "2020-12-18T11:01:29",
    "date_gmt": "2020-12-18T11:01:29",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3420"
    },
    "modified": "2020-12-18T11:01:29",
    "modified_gmt": "2020-12-18T11:01:29",
    "slug": "listview",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/listview/",
    "title": {
      "rendered": "ListView"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to create a list in React Native. We will import&nbsp;<strong>List</strong>&nbsp;in our&nbsp;<strong>Home</strong>&nbsp;component and show it on screen.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport List from './List.js'\n\nconst App = () => {\n   return (\n      &lt;List />\n   )\n}\nexport default App</code></pre>\n\n\n\n<p>To create a list, we will use the&nbsp;<strong>map()</strong>&nbsp;method. This will iterate over an array of items, and render each one.</p>\n\n\n\n<p><strong>List.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native'\n   \nclass List extends Component {\n   state = {\n      names: &#91;\n         {\n            id: 0,\n            name: 'Ben',\n         },\n         {\n            id: 1,\n            name: 'Susan',\n         },\n         {\n            id: 2,\n            name: 'Robert',\n         },\n         {\n            id: 3,\n            name: 'Mary',\n         }\n      ]\n   }\n   alertItemName = (item) => {\n      alert(item.name)\n   }\n   render() {\n      return (\n         &lt;View>\n            {\n               this.state.names.map((item, index) => (\n                  &lt;TouchableOpacity\n                     key = {item.id}\n                     style = {styles.container}\n                     onPress = {() => this.alertItemName(item)}>\n                     &lt;Text style = {styles.text}>\n                        {item.name}\n                     &lt;/Text>\n                  &lt;/TouchableOpacity>\n               ))\n            }\n         &lt;/View>\n      )\n   }\n}\nexport default List\n\nconst styles = StyleSheet.create ({\n   container: {\n      padding: 10,\n      marginTop: 3,\n      backgroundColor: '#d9f9b1',\n      alignItems: 'center',\n   },\n   text: {\n      color: '#4f603c'\n   }\n})</code></pre>\n\n\n\n<p>When we run the app, we will see the list of names.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/list_view.jpg\" alt=\"ListView\"/></figure>\n\n\n\n<p>You can click on each item in the list to trigger an alert with the name.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_list_view.jpg\" alt=\"React Native ListView\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to create a list in React Native. We will import&nbsp;List&nbsp;in our&nbsp;Home&nbsp;component and show it on screen. App.js To create a list, we will use the&nbsp;map()&nbsp;method. This will iterate over an array of items, and render each one. List.js When we run the app, we will see the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3420"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3420"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3420/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3420"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3420"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3420"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3422,
    "date": "2020-12-18T11:02:11",
    "date_gmt": "2020-12-18T11:02:11",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3422"
    },
    "modified": "2020-12-18T11:02:11",
    "modified_gmt": "2020-12-18T11:02:11",
    "slug": "text-input",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/text-input/",
    "title": {
      "rendered": "Text Input"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to work with&nbsp;<strong>TextInput</strong>&nbsp;elements in React Native.</p>\n\n\n\n<p>The Home component will import and render inputs.</p>\n\n\n\n<h2>App.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport Inputs from './inputs.js'\n\nconst App = () => {\n   return (\n      &lt;Inputs />\n   )\n}\nexport default App</code></pre>\n\n\n\n<h2>Inputs</h2>\n\n\n\n<p>We will define the initial state.</p>\n\n\n\n<p>After defining the initial state, we will create the&nbsp;<strong>handleEmail</strong>&nbsp;and the&nbsp;<strong>handlePassword</strong>&nbsp;functions. These functions are used for updating state.</p>\n\n\n\n<p>The&nbsp;<strong>login()</strong>&nbsp;function will just alert the current value of the state.</p>\n\n\n\n<p>We will also add some other properties to text inputs to disable auto capitalisation, remove the bottom border on Android devices and set a placeholder.</p>\n\n\n\n<h2>inputs.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, Text, TouchableOpacity, TextInput, StyleSheet } from 'react-native'\n\nclass Inputs extends Component {\n   state = {\n      email: '',\n      password: ''\n   }\n   handleEmail = (text) => {\n      this.setState({ email: text })\n   }\n   handlePassword = (text) => {\n      this.setState({ password: text })\n   }\n   login = (email, pass) => {\n      alert('email: ' + email + ' password: ' + pass)\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}>\n            &lt;TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Email\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handleEmail}/>\n            \n            &lt;TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Password\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handlePassword}/>\n            \n            &lt;TouchableOpacity\n               style = {styles.submitButton}\n               onPress = {\n                  () => this.login(this.state.email, this.state.password)\n               }>\n               &lt;Text style = {styles.submitButtonText}> Submit &lt;/Text>\n            &lt;/TouchableOpacity>\n         &lt;/View>\n      )\n   }\n}\nexport default Inputs\n\nconst styles = StyleSheet.create({\n   container: {\n      paddingTop: 23\n   },\n   input: {\n      margin: 15,\n      height: 40,\n      borderColor: '#7a42f4',\n      borderWidth: 1\n   },\n   submitButton: {\n      backgroundColor: '#7a42f4',\n      padding: 10,\n      margin: 15,\n      height: 40,\n   },\n   submitButtonText:{\n      color: 'white'\n   }\n})</code></pre>\n\n\n\n<p>Whenever we type in one of the input fields, the state will be updated. When we click on the&nbsp;<strong>Submit</strong>&nbsp;button, text from inputs will be shown inside the dialog box.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/reactnative_text_input.jpg\" alt=\"React Native Text Input\"/></figure>\n\n\n\n<p>Whenever we type in one of the input fields, the state will be updated. When we click on the&nbsp;<strong>Submit</strong>&nbsp;button, text from inputs will be shown inside the dialog box.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react-native-text-input.jpg\" alt=\"React Native Text Input\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to work with&nbsp;TextInput&nbsp;elements in React Native. The Home component will import and render inputs. App.js Inputs We will define the initial state. After defining the initial state, we will create the&nbsp;handleEmail&nbsp;and the&nbsp;handlePassword&nbsp;functions. These functions are used for updating state. The&nbsp;login()&nbsp;function will just alert the current value of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3422"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3422"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3422/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3422"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3422"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3422"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3424,
    "date": "2020-12-18T11:03:04",
    "date_gmt": "2020-12-18T11:03:04",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3424"
    },
    "modified": "2020-12-18T11:03:04",
    "modified_gmt": "2020-12-18T11:03:04",
    "slug": "scrollview",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scrollview/",
    "title": {
      "rendered": "ScrollView"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to work with the&nbsp;<strong>ScrollView</strong>&nbsp;element.</p>\n\n\n\n<p>We will again create&nbsp;<strong>ScrollViewExample.js</strong>&nbsp;and import it in&nbsp;<strong>Home</strong>.</p>\n\n\n\n<h2>App.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport ScrollViewExample from './scroll_view.js';\n\nconst App = () => {\n   return (\n      &lt;ScrollViewExample />\n   )\n}export default App</code></pre>\n\n\n\n<p>Scrollview will render a list of names. We will create it in state.</p>\n\n\n\n<h2>ScrollView.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';\nimport { Text, Image, View, StyleSheet, ScrollView } from 'react-native';\n\nclass ScrollViewExample extends Component {\n   state = {\n      names: &#91;\n         {'name': 'Ben', 'id': 1},\n         {'name': 'Susan', 'id': 2},\n         {'name': 'Robert', 'id': 3},\n         {'name': 'Mary', 'id': 4},\n         {'name': 'Daniel', 'id': 5},\n         {'name': 'Laura', 'id': 6},\n         {'name': 'John', 'id': 7},\n         {'name': 'Debra', 'id': 8},\n         {'name': 'Aron', 'id': 9},\n         {'name': 'Ann', 'id': 10},\n         {'name': 'Steve', 'id': 11},\n         {'name': 'Olivia', 'id': 12}\n      ]\n   }\n   render() {\n      return (\n         &lt;View>\n            &lt;ScrollView>\n               {\n                  this.state.names.map((item, index) => (\n                     &lt;View key = {item.id} style = {styles.item}>\n                        &lt;Text>{item.name}&lt;/Text>\n                     &lt;/View>\n                  ))\n               }\n            &lt;/ScrollView>\n         &lt;/View>\n      )\n   }\n}\nexport default ScrollViewExample\n\nconst styles = StyleSheet.create ({\n   item: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 30,\n      margin: 2,\n      borderColor: '#2a4944',\n      borderWidth: 1,\n      backgroundColor: '#d2f7f1'\n   }\n})</code></pre>\n\n\n\n<p>When we run the app, we will see the scrollable list of names.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/scroll_view.jpg\" alt=\"React Native ScrollView\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to work with the&nbsp;ScrollView&nbsp;element. We will again create&nbsp;ScrollViewExample.js&nbsp;and import it in&nbsp;Home. App.js Scrollview will render a list of names. We will create it in state. ScrollView.js When we run the app, we will see the scrollable list of names.</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3424"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3424"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3424/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3424"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3424"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3424"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3426,
    "date": "2020-12-18T11:04:01",
    "date_gmt": "2020-12-18T11:04:01",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3426"
    },
    "modified": "2020-12-18T11:04:01",
    "modified_gmt": "2020-12-18T11:04:01",
    "slug": "images-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/images-2/",
    "title": {
      "rendered": "Images"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will understand how to work with images in React Native.</p>\n\n\n\n<h2>Adding Image</h2>\n\n\n\n<p>Let us create a new folder&nbsp;<strong>img</strong>&nbsp;inside the&nbsp;<strong>src</strong>&nbsp;folder. We will add our image (<strong>myImage.png</strong>) inside this folder.</p>\n\n\n\n<p>We will show images on the home screen.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport ImagesExample from './ImagesExample.js'\n\nconst App = () => {\n   return (\n      &lt;ImagesExample />\n   )\n}\nexport default App</code></pre>\n\n\n\n<p>Local image can be accessed using the following syntax.</p>\n\n\n\n<h3>image_example.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { Image } from 'react-native'\n\nconst ImagesExample = () => (\n   &lt;Image source = {require('C:/Users/Tutorialspoint/Desktop/NativeReactSample/logo.png')} />\n)\nexport default ImagesExample</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_images.jpg\" alt=\"React Native Images\"/></figure>\n\n\n\n<h2>Screen Density</h2>\n\n\n\n<p>React Native offers a way to optimize images for different devices using&nbsp;<strong>@2x, @3x</strong>&nbsp;suffix. The app will load only the image necessary for particular screen density.</p>\n\n\n\n<p>The following will be the names of the image inside the&nbsp;<strong>img</strong>&nbsp;folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nmy-image@2x.jpg\nmy-image@3x.jpg\n</code></pre>\n\n\n\n<h2>Network Images</h2>\n\n\n\n<p>When using network images, instead of&nbsp;<strong>require</strong>, we need the&nbsp;<strong>source</strong>&nbsp;property. It is recommended to define the&nbsp;<strong>width</strong>&nbsp;and the&nbsp;<strong>height</strong>&nbsp;for network images.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport ImagesExample from './image_example.js'\n\nconst App = () => {\n   return (\n      &lt;ImagesExample />\n   )\n}\nexport default App</code></pre>\n\n\n\n<h3>image_example.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, Image } from 'react-native'\n\nconst ImagesExample = () => (\n   &lt;Image source = {{uri:'https://pbs.twimg.com/profile_images/486929358120964097/gNLINY67_400x400.png'}}\n   style = {{ width: 200, height: 200 }}\n   />\n)\nexport default ImagesExample</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/network_images.jpg\" alt=\"Network Images\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will understand how to work with images in React Native. Adding Image Let us create a new folder&nbsp;img&nbsp;inside the&nbsp;src&nbsp;folder. We will add our image (myImage.png) inside this folder. We will show images on the home screen. App.js Local image can be accessed using the following syntax. image_example.js Output Screen Density React [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3426"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3426"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3426/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3426"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3426"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3426"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3428,
    "date": "2020-12-18T11:04:41",
    "date_gmt": "2020-12-18T11:04:41",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3428"
    },
    "modified": "2020-12-18T11:04:41",
    "modified_gmt": "2020-12-18T11:04:41",
    "slug": "http-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/http-2/",
    "title": {
      "rendered": "HTTP"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to use&nbsp;<strong>fetch</strong>&nbsp;for handling network requests.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport HttpExample from './http_example.js'\n\nconst App = () => {\n   return (\n      &lt;HttpExample />\n   )\n}\nexport default App</code></pre>\n\n\n\n<h2>Using Fetch</h2>\n\n\n\n<p>We will use the&nbsp;<strong>componentDidMount</strong>&nbsp;lifecycle method to load the data from server as soon as the component is mounted. This function will send GET request to the server, return JSON data, log output to console and update our state.</p>\n\n\n\n<h3>http_example.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, Text } from 'react-native'\n\nclass HttpExample extends Component {\n   state = {\n      data: ''\n   }\n   componentDidMount = () => {\n      fetch('https://jsonplaceholder.typicode.com/posts/1', {\n         method: 'GET'\n      })\n      .then((response) => response.json())\n      .then((responseJson) => {\n         console.log(responseJson);\n         this.setState({\n            data: responseJson\n         })\n      })\n      .catch((error) => {\n         console.error(error);\n      });\n   }\n   render() {\n      return (\n         &lt;View>\n            &lt;Text>\n               {this.state.data.body}\n            &lt;/Text>\n         &lt;/View>\n      )\n   }\n}\nexport default HttpExample</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_http.jpg\" alt=\"React Native HTTP\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to use&nbsp;fetch&nbsp;for handling network requests. App.js Using Fetch We will use the&nbsp;componentDidMount&nbsp;lifecycle method to load the data from server as soon as the component is mounted. This function will send GET request to the server, return JSON data, log output to console and update our state. http_example.js [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3428"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3428"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3428/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3428"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3428"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3428"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5633,
    "date": "2020-12-18T11:05:46",
    "date_gmt": "2020-12-18T11:05:46",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3430"
    },
    "modified": "2020-12-18T11:05:46",
    "modified_gmt": "2020-12-18T11:05:46",
    "slug": "buttons",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/buttons/",
    "title": {
      "rendered": "Buttons"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you touchable components in react Native. We call them &#8216;touchable&#8217; because they offer built in animations and we can use the&nbsp;<strong>onPress</strong>&nbsp;prop for handling touch event.</p>\n\n\n\n<p>Facebook offers the&nbsp;<strong>Button</strong>&nbsp;component, which can be used as a generic button. Consider the following example to understand the same.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { Button } from 'react-native'\n\nconst App = () => {\n   const handlePress = () => false\n   return (\n      &lt;Button\n         onPress = {handlePress}\n         title = \"Red button!\"\n         color = \"red\"\n      />\n   )\n}\nexport default App</code></pre>\n\n\n\n<p>If the default&nbsp;<strong>Button</strong>&nbsp;component does not suit your needs, you can use one of the following components instead.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/buttons_redbutton.jpg\" alt=\"Buttons Redbutton\"/></figure>\n\n\n\n<h2>Touchable Opacity</h2>\n\n\n\n<p>This element will change the opacity of an element when touched.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport { TouchableOpacity, StyleSheet, View, Text } from 'react-native'\n\nconst App = () => {\n   return (\n      &lt;View style = {styles.container}>\n         &lt;TouchableOpacity>\n            &lt;Text style = {styles.text}>\n               Button\n            &lt;/Text>\n         &lt;/TouchableOpacity>\n      &lt;/View>\n   )\n}\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/buttons_touchopacity.jpg\" alt=\"Buttons Touchopacity\"/></figure>\n\n\n\n<h2>Touchable Highlight</h2>\n\n\n\n<p>When a user presses the element, it will get darker and the underlying color will show through.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport { View, TouchableHighlight, Text, StyleSheet } from 'react-native'\n\nconst App = (props) => {\n   return (\n      &lt;View style = {styles.container}>\n         &lt;TouchableHighlight>\n            &lt;Text style = {styles.text}>\n               Button\n            &lt;/Text>\n         &lt;/TouchableHighlight>\n      &lt;/View>\n   )\n}\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})</code></pre>\n\n\n\n<h2>Touchable Native Feedback</h2>\n\n\n\n<p>This will simulate ink animation when the element is pressed.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport { View, TouchableNativeFeedback, Text, StyleSheet } from 'react-native'\n\nconst Home = (props) => {\n   return (\n      &lt;View style = {styles.container}>\n         &lt;TouchableNativeFeedback>\n            &lt;Text style = {styles.text}>\n               Button\n            &lt;/Text>\n         &lt;/TouchableNativeFeedback>\n      &lt;/View>\n   )\n}\nexport default Home\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})</code></pre>\n\n\n\n<h2>Touchable Without Feedback</h2>\n\n\n\n<p>This should be used when you want to handle the touch event without any animation Usually, this component is not used much.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;TouchableWithoutFeedback>\n   &lt;Text>\n      Button\n   &lt;/Text>\n&lt;/TouchableWithoutFeedback></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you touchable components in react Native. We call them &#8216;touchable&#8217; because they offer built in animations and we can use the&nbsp;onPress&nbsp;prop for handling touch event. Facebook offers the&nbsp;Button&nbsp;component, which can be used as a generic button. Consider the following example to understand the same. App.js If the default&nbsp;Button&nbsp;component does [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5633"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5633"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5633/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5633"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5633"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5633"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3432,
    "date": "2020-12-18T11:06:28",
    "date_gmt": "2020-12-18T11:06:28",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3432"
    },
    "modified": "2020-12-18T11:06:28",
    "modified_gmt": "2020-12-18T11:06:28",
    "slug": "animations-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/animations-2/",
    "title": {
      "rendered": "Animations"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to use&nbsp;<strong>LayoutAnimation</strong>&nbsp;in React Native.</p>\n\n\n\n<h2>Animations Component</h2>\n\n\n\n<p>We will set&nbsp;<strong>myStyle</strong>&nbsp;as a property of the state. This property is used for styling an element inside&nbsp;<strong>PresentationalAnimationComponent</strong>.</p>\n\n\n\n<p>We will also create two functions −&nbsp;<strong>expandElement</strong>&nbsp;and&nbsp;<strong>collapseElement</strong>. These functions will update values from the state. The first one will use the&nbsp;<strong>spring</strong>&nbsp;preset animation while the second one will have the&nbsp;<strong>linear</strong>&nbsp;preset. We will pass these as props too. The&nbsp;<strong>Expand</strong>&nbsp;and the&nbsp;<strong>Collapse</strong>&nbsp;buttons call the&nbsp;<strong>expandElement()</strong>&nbsp;and&nbsp;<strong>collapseElement()</strong>&nbsp;functions.</p>\n\n\n\n<p>In this example, we will dynamically change the width and the height of the box. Since the&nbsp;<strong>Home</strong>&nbsp;component will be the same, we will only change the&nbsp;<strong>Animations</strong>&nbsp;component.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, StyleSheet, Animated, TouchableOpacity } from 'react-native'\n\nclass Animations extends Component {\n   componentWillMount = () => {\n      this.animatedWidth = new Animated.Value(50)\n      this.animatedHeight = new Animated.Value(100)\n   }\n   animatedBox = () => {\n      Animated.timing(this.animatedWidth, {\n         toValue: 200,\n         duration: 1000\n      }).start()\n      Animated.timing(this.animatedHeight, {\n         toValue: 500,\n         duration: 500\n      }).start()\n   }\n   render() {\n      const animatedStyle = { width: this.animatedWidth, height: this.animatedHeight }\n      return (\n         &lt;TouchableOpacity style = {styles.container} onPress = {this.animatedBox}>\n            &lt;Animated.View style = {&#91;styles.box, animatedStyle]}/>\n         &lt;/TouchableOpacity>\n      )\n   }\n}\nexport default Animations\n\nconst styles = StyleSheet.create({\n   container: {\n      justifyContent: 'center',\n      alignItems: 'center'\n   },\n   box: {\n      backgroundColor: 'blue',\n      width: 50,\n      height: 100\n   }\n})</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to use&nbsp;LayoutAnimation&nbsp;in React Native. Animations Component We will set&nbsp;myStyle&nbsp;as a property of the state. This property is used for styling an element inside&nbsp;PresentationalAnimationComponent. We will also create two functions −&nbsp;expandElement&nbsp;and&nbsp;collapseElement. These functions will update values from the state. The first one will use the&nbsp;spring&nbsp;preset animation while the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3432"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3432"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3432/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3432"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3432"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3432"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5634,
    "date": "2020-12-18T11:06:56",
    "date_gmt": "2020-12-18T11:06:56",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3434"
    },
    "modified": "2020-12-18T11:06:56",
    "modified_gmt": "2020-12-18T11:06:56",
    "slug": "debugging-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/debugging-4/",
    "title": {
      "rendered": "Debugging"
    },
    "content": {
      "rendered": "\n<p>React native offers a couple of methods that help in debugging your code.</p>\n\n\n\n<h2>In App Developer Menu</h2>\n\n\n\n<p>You can open the developer menu on the IOS simulator by pressing&nbsp;<strong>command + D</strong>.</p>\n\n\n\n<p>On Android emulator, you need to press&nbsp;<strong>command + M</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react-native-debugging-developer-menu.jpg\" alt=\"React Native Debugging Developer Menu\"/></figure>\n\n\n\n<ul><li><strong>Reload</strong>&nbsp;− Used for reloading simulator. You can use shortcut&nbsp;<strong>command + R</strong></li><li><strong>Debug JS Remotely</strong>&nbsp;− Used for activating debugging inside browser developer console.</li><li><strong>Enable Live Reload</strong>&nbsp;− Used for enabling live reloading whenever your code is saved. The debugger will open at&nbsp;<strong>localhost:8081/debugger-ui</strong>.</li><li><strong>Start Systrace</strong>&nbsp;− Used for starting Android marker based profiling tool.</li><li><strong>Show Inspector</strong>&nbsp;− Used for opening inspector where you can find info about your components. You can use shortcut&nbsp;<strong>command + I</strong></li><li><strong>Show Perf Monitor</strong>&nbsp;− Perf monitor is used for keeping track of the performance of your app.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>React native offers a couple of methods that help in debugging your code. In App Developer Menu You can open the developer menu on the IOS simulator by pressing&nbsp;command + D. On Android emulator, you need to press&nbsp;command + M. Reload&nbsp;− Used for reloading simulator. You can use shortcut&nbsp;command + R Debug JS Remotely&nbsp;− Used [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5634"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5634"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5634/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5634"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5634"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5634"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3436,
    "date": "2020-12-18T11:08:02",
    "date_gmt": "2020-12-18T11:08:02",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3436"
    },
    "modified": "2020-12-18T11:08:02",
    "modified_gmt": "2020-12-18T11:08:02",
    "slug": "router",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/router/",
    "title": {
      "rendered": "Router"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will understand navigation in React Native.</p>\n\n\n\n<h2>Step 1: Install Router</h2>\n\n\n\n<p>To begin with, we need to install the&nbsp;<strong>Router</strong>. We will use the React Native Router Flux in this chapter. You can run the following command in terminal, from the project folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm i react-native-router-flux --save\n</code></pre>\n\n\n\n<h2>Step 2: Entire Application</h2>\n\n\n\n<p>Since we want our router to handle the entire application, we will add it in&nbsp;<strong>index.ios.js</strong>. For Android, you can do the same in&nbsp;<strong>index.android.js</strong>.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';\nimport { AppRegistry, View } from 'react-native';\nimport Routes from './Routes.js'\n\nclass reactTutorialApp extends Component {\n   render() {\n      return (\n         &lt;Routes />\n      )\n   }\n}\nexport default reactTutorialApp\nAppRegistry.registerComponent('reactTutorialApp', () => reactTutorialApp)</code></pre>\n\n\n\n<h2>Step 3: Add Router</h2>\n\n\n\n<p>Now we will create the&nbsp;<strong>Routes</strong>&nbsp;component inside the components folder. It will return&nbsp;<strong>Router</strong>&nbsp;with several scenes. Each scene will need&nbsp;<strong>key, component</strong>&nbsp;and&nbsp;<strong>title</strong>. Router uses the key property to switch between scenes, component will be rendered on screen and the title will be shown in the navigation bar. We can also set the&nbsp;<strong>initial</strong>&nbsp;property to the scene that is to be rendered initially.</p>\n\n\n\n<h3>Routes.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport { Router, Scene } from 'react-native-router-flux'\nimport Home from './Home.js'\nimport About from './About.js'\n\nconst Routes = () => (\n   &lt;Router>\n      &lt;Scene key = \"root\">\n         &lt;Scene key = \"home\" component = {Home} title = \"Home\" initial = {true} />\n         &lt;Scene key = \"about\" component = {About} title = \"About\" />\n      &lt;/Scene>\n   &lt;/Router>\n)\nexport default Routes</code></pre>\n\n\n\n<h2>Step 4: Create Components</h2>\n\n\n\n<p>We already have the&nbsp;<strong>Home</strong>&nbsp;component from previous chapters; now, we need to add the&nbsp;<strong>About</strong>&nbsp;component. We will add the&nbsp;<strong>goToAbout</strong>&nbsp;and the&nbsp;<strong>goToHome</strong>&nbsp;functions to switch between scenes.</p>\n\n\n\n<h3>Home.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport { TouchableOpacity, Text } from 'react-native';\nimport { Actions } from 'react-native-router-flux';\n\nconst Home = () => {\n   const goToAbout = () => {\n      Actions.about()\n   }\n   return (\n      &lt;TouchableOpacity style = {{ margin: 128 }} onPress = {goToAbout}>\n         &lt;Text>This is HOME!&lt;/Text>\n      &lt;/TouchableOpacity>\n   )\n}\nexport default Home</code></pre>\n\n\n\n<h3>About.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport { TouchableOpacity, Text } from 'react-native'\nimport { Actions } from 'react-native-router-flux'\n\nconst About = () => {\n   const goToHome = () => {\n      Actions.home()\n   }\n   return (\n      &lt;TouchableOpacity style = {{ margin: 128 }} onPress = {goToHome}>\n         &lt;Text>This is ABOUT&lt;/Text>\n      &lt;/TouchableOpacity>\n   )\n}\nexport default About</code></pre>\n\n\n\n<p>The app will render the initial&nbsp;<strong>Home</strong>&nbsp;screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_router.jpg\" alt=\"React Native Router\"/></figure>\n\n\n\n<p>You can press the button to switch to the about screen. The Back arrow will appear; you can use it to get back to the previous screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/reactnative_router.jpg\" alt=\"React Native Router\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will understand navigation in React Native. Step 1: Install Router To begin with, we need to install the&nbsp;Router. We will use the React Native Router Flux in this chapter. You can run the following command in terminal, from the project folder. Step 2: Entire Application Since we want our router to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3436"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3436"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3436/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3436"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3436"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3436"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5635,
    "date": "2020-12-18T11:08:55",
    "date_gmt": "2020-12-18T11:08:55",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3438"
    },
    "modified": "2020-12-18T11:08:55",
    "modified_gmt": "2020-12-18T11:08:55",
    "slug": "running-ios",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/running-ios/",
    "title": {
      "rendered": "Running IOS"
    },
    "content": {
      "rendered": "\n<p>If you want to test your app in the IOS simulator, all you need is to open the root folder of your app in terminal and run −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>react-native run-ios\n</code></pre>\n\n\n\n<p>The above command will start the simulator and run the app.</p>\n\n\n\n<p>We can also specify the device we want to use.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>react-native run-ios --simulator \"iPhone 5s\n</code></pre>\n\n\n\n<p>After you open the app in simulator, you can press&nbsp;<strong>command + D</strong>&nbsp;on IOS to open the developers menu. You can check more about this in our&nbsp;<strong>debugging</strong>&nbsp;chapter.</p>\n\n\n\n<p>You can also reload the IOS simulator by pressing&nbsp;<strong>command + R</strong>.</p>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>If you want to test your app in the IOS simulator, all you need is to open the root folder of your app in terminal and run − The above command will start the simulator and run the app. We can also specify the device we want to use. After you open the app in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5635"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5635"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5635/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5635"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5635"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5635"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3440,
    "date": "2020-12-18T11:09:54",
    "date_gmt": "2020-12-18T11:09:54",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3440"
    },
    "modified": "2020-12-18T11:09:54",
    "modified_gmt": "2020-12-18T11:09:54",
    "slug": "running-android",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/running-android/",
    "title": {
      "rendered": "Running Android"
    },
    "content": {
      "rendered": "\n<p>We can run the React Native app on Android platform by running the following code in the terminal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>react-native run-android\n</code></pre>\n\n\n\n<p>Before you can run your app on Android device, you need to enable&nbsp;<strong>USB Debugging</strong>&nbsp;inside the&nbsp;<strong>Developer Options</strong>.</p>\n\n\n\n<p>When&nbsp;<strong>USB Debugging</strong>&nbsp;is enabled, you can plug in your device and run the code snippet given above.</p>\n\n\n\n<p>The Native Android emulator is slow. We recommend downloading Genymotion for testing your app.</p>\n\n\n\n<p>The developer menu can be accessed by pressing&nbsp;<strong>command + M</strong>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>We can run the React Native app on Android platform by running the following code in the terminal. Before you can run your app on Android device, you need to enable&nbsp;USB Debugging&nbsp;inside the&nbsp;Developer Options. When&nbsp;USB Debugging&nbsp;is enabled, you can plug in your device and run the code snippet given above. The Native Android emulator is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3440"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3440"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3440/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3440"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3440"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3440"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3442,
    "date": "2020-12-18T11:10:33",
    "date_gmt": "2020-12-18T11:10:33",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3442"
    },
    "modified": "2020-12-18T11:10:33",
    "modified_gmt": "2020-12-18T11:10:33",
    "slug": "view",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/view/",
    "title": {
      "rendered": "View"
    },
    "content": {
      "rendered": "\n<p>View is the most common element in React Native. You can consider it as an equivalent of the&nbsp;<strong>div</strong>&nbsp;element used in web development.</p>\n\n\n\n<h2>Use Cases</h2>\n\n\n\n<p>Let us now see a few common use cases.</p>\n\n\n\n<ul><li>When you need to wrap your elements inside the container, you can use&nbsp;<strong>View</strong>&nbsp;as a container element.</li><li>When you want to nest more elements inside the parent element, both parent and child can be&nbsp;<strong>View</strong>. It can have as many children as you want.</li><li>When you want to style different elements, you can place them inside&nbsp;<strong>View</strong>&nbsp;since it supports&nbsp;<strong>style</strong>&nbsp;property,&nbsp;<strong>flexbox</strong>&nbsp;etc.</li><li><strong>View</strong>&nbsp;also supports synthetic touch events, which can be useful for different purposes.</li></ul>\n\n\n\n<p>We already used&nbsp;<strong>View</strong>&nbsp;in our previous chapters and we will use it in almost all subsequent chapters as well. The&nbsp;<strong>View</strong>&nbsp;can be assumed as a default element in React Native. In example given below, we will nest two Views and a text.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, Text } from 'react-native'\n\nconst App = () => {\n   return (\n      &lt;View>\n         &lt;View>\n            &lt;Text>This is my text&lt;/Text>\n         &lt;/View>\n      &lt;/View>\n   )\n}\nexport default App</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/props_updated.jpg\" alt=\"Props Updated\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>View is the most common element in React Native. You can consider it as an equivalent of the&nbsp;div&nbsp;element used in web development. Use Cases Let us now see a few common use cases. When you need to wrap your elements inside the container, you can use&nbsp;View&nbsp;as a container element. When you want to nest more [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3442"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3442"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3442/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3442"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3442"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3442"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3444,
    "date": "2020-12-18T11:11:21",
    "date_gmt": "2020-12-18T11:11:21",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3444"
    },
    "modified": "2020-12-18T11:11:21",
    "modified_gmt": "2020-12-18T11:11:21",
    "slug": "webview",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/webview/",
    "title": {
      "rendered": "WebView"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will learn how to use WebView. It is used when you want to render web page to your mobile app inline.</p>\n\n\n\n<h2>Using WebView</h2>\n\n\n\n<p>The&nbsp;<strong>HomeContainer</strong>&nbsp;will be a container component.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport WebViewExample from './web_view_example.js'\n\nconst App = () => {\n   return (\n      &lt;WebViewExample/>\n   )\n}\nexport default App;</code></pre>\n\n\n\n<p>Let us create a new file called&nbsp;<strong>WebViewExample.js</strong>&nbsp;inside the&nbsp;<strong>src/components/home</strong>&nbsp;folder.</p>\n\n\n\n<h3>web_view_example.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, WebView, StyleSheet }\n\nfrom 'react-native'\nconst WebViewExample = () => {\n   return (\n      &lt;View style = {styles.container}>\n         &lt;WebView\n         source = {{ uri:\n         'https://www.google.com/?gws_rd=cr,ssl&amp;ei=SICcV9_EFqqk6ASA3ZaABA#q=tutorialspoint' }}\n         />\n      &lt;/View>\n   )\n}\nexport default WebViewExample;\n\nconst styles = StyleSheet.create({\n   container: {\n      height: 350,\n   }\n})</code></pre>\n\n\n\n<p>The above program will generate the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_web_view.jpg\" alt=\"React Native WebView\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will learn how to use WebView. It is used when you want to render web page to your mobile app inline. Using WebView The&nbsp;HomeContainer&nbsp;will be a container component. App.js Let us create a new file called&nbsp;WebViewExample.js&nbsp;inside the&nbsp;src/components/home&nbsp;folder. web_view_example.js The above program will generate the following output.</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3444"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3444"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3444/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3444"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3444"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3444"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3446,
    "date": "2020-12-18T11:12:03",
    "date_gmt": "2020-12-18T11:12:03",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3446"
    },
    "modified": "2020-12-18T11:12:03",
    "modified_gmt": "2020-12-18T11:12:03",
    "slug": "modal",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/modal/",
    "title": {
      "rendered": "Modal"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to use the modal component in React Native.</p>\n\n\n\n<p>Let us now create a new file:&nbsp;<strong>ModalExample.js</strong></p>\n\n\n\n<p>We will put logic inside&nbsp;<strong>ModalExample</strong>. We can update the initial state by running the&nbsp;<strong>toggleModal</strong>.</p>\n\n\n\n<p>After updating the initial state by running the&nbsp;<strong>toggleModal</strong>, we will set the&nbsp;<strong>visible</strong>&nbsp;property to our modal. This prop will be updated when the state changes.</p>\n\n\n\n<p>The&nbsp;<strong>onRequestClose</strong>&nbsp;is required for Android devices.</p>\n\n\n\n<h2>App.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport WebViewExample from './modal_example.js'\n\nconst Home = () => {\n   return (\n      &lt;WebViewExample/>\n   )\n}\nexport default Home;</code></pre>\n\n\n\n<h2>modal_example.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';\nimport { Modal, Text, TouchableHighlight, View, StyleSheet}\n\nfrom 'react-native'\nclass ModalExample extends Component {\n   state = {\n      modalVisible: false,\n   }\n   toggleModal(visible) {\n      this.setState({ modalVisible: visible });\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}>\n            &lt;Modal animationType = {\"slide\"} transparent = {false}\n               visible = {this.state.modalVisible}\n               onRequestClose = {() => { console.log(\"Modal has been closed.\") } }>\n               \n               &lt;View style = {styles.modal}>\n                  &lt;Text style = {styles.text}>Modal is open!&lt;/Text>\n                  \n                  &lt;TouchableHighlight onPress = {() => {\n                     this.toggleModal(!this.state.modalVisible)}}>\n                     \n                     &lt;Text style = {styles.text}>Close Modal&lt;/Text>\n                  &lt;/TouchableHighlight>\n               &lt;/View>\n            &lt;/Modal>\n            \n            &lt;TouchableHighlight onPress = {() => {this.toggleModal(true)}}>\n               &lt;Text style = {styles.text}>Open Modal&lt;/Text>\n            &lt;/TouchableHighlight>\n         &lt;/View>\n      )\n   }\n}\nexport default ModalExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n      backgroundColor: '#ede3f2',\n      padding: 100\n   },\n   modal: {\n      flex: 1,\n      alignItems: 'center',\n      backgroundColor: '#f7021a',\n      padding: 100\n   },\n   text: {\n      color: '#3f2949',\n      marginTop: 10\n   }\n})</code></pre>\n\n\n\n<p>Our starting screen will look like this −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_open_modal.jpg\" alt=\"React Native Open Modal\"/></figure>\n\n\n\n<p>If we click the button, the modal will open.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_modal.jpg\" alt=\"React Native Modal\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to use the modal component in React Native. Let us now create a new file:&nbsp;ModalExample.js We will put logic inside&nbsp;ModalExample. We can update the initial state by running the&nbsp;toggleModal. After updating the initial state by running the&nbsp;toggleModal, we will set the&nbsp;visible&nbsp;property to our modal. This prop will [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3446"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3446"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3446/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3446"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3446"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3446"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3448,
    "date": "2020-12-18T11:12:42",
    "date_gmt": "2020-12-18T11:12:42",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3448"
    },
    "modified": "2020-12-18T11:12:42",
    "modified_gmt": "2020-12-18T11:12:42",
    "slug": "activityindicator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/activityindicator/",
    "title": {
      "rendered": "ActivityIndicator"
    },
    "content": {
      "rendered": "\n<p>In this chapter we will show you how to use the activity indicator in React Native.</p>\n\n\n\n<h2>Step 1: App</h2>\n\n\n\n<p><strong>App</strong>&nbsp;component will be used to import and show our&nbsp;<strong>ActivityIndicator</strong>.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport ActivityIndicatorExample from './activity_indicator_example.js'\n\nconst Home = () => {\n   return (\n      &lt;ActivityIndicatorExample />\n   )\n}\nexport default Home</code></pre>\n\n\n\n<h2>Step 2: ActivityIndicatorExample</h2>\n\n\n\n<p>Animating property is a Boolean which is used for showing the activity indicator. The latter closes six seconds after the component is mounted. This is done using the&nbsp;<strong>closeActivityIndicator()</strong>&nbsp;function.</p>\n\n\n\n<h3>activity_indicator_example.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';\nimport { ActivityIndicator, View, Text, TouchableOpacity, StyleSheet } from 'react-native';\n\nclass ActivityIndicatorExample extends Component {\n   state = { animating: true }\n   \n   closeActivityIndicator = () => setTimeout(() => this.setState({\n   animating: false }), 60000)\n   \n   componentDidMount = () => this.closeActivityIndicator()\n   render() {\n      const animating = this.state.animating\n      return (\n         &lt;View style = {styles.container}>\n            &lt;ActivityIndicator\n               animating = {animating}\n               color = '#bc2b78'\n               size = \"large\"\n               style = {styles.activityIndicator}/>\n         &lt;/View>\n      )\n   }\n}\nexport default ActivityIndicatorExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: 70\n   },\n   activityIndicator: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: 80\n   }\n})</code></pre>\n\n\n\n<p>When we run the app, we will see the loader on screen. It will disappear after six seconds.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_activity_indicator.jpg\" alt=\"React Native Activity Indicator\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter we will show you how to use the activity indicator in React Native. Step 1: App App&nbsp;component will be used to import and show our&nbsp;ActivityIndicator. App.js Step 2: ActivityIndicatorExample Animating property is a Boolean which is used for showing the activity indicator. The latter closes six seconds after the component is mounted. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3448"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3448"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3448/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3448"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3448"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3448"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3450,
    "date": "2020-12-18T11:13:24",
    "date_gmt": "2020-12-18T11:13:24",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3450"
    },
    "modified": "2020-12-18T11:13:24",
    "modified_gmt": "2020-12-18T11:13:24",
    "slug": "picker",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/picker/",
    "title": {
      "rendered": "Picker"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will create simple Picker with two available options.</p>\n\n\n\n<h2>Step 1: Create File</h2>\n\n\n\n<p>Here, the&nbsp;<strong>App.js</strong>&nbsp;folder will be used as a presentational component.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport PickerExample from './PickerExample.js'\n\nconst App = () => {\n   return (\n      &lt;PickerExample />\n   )\n}\nexport default App</code></pre>\n\n\n\n<h2>Step 2: Logic</h2>\n\n\n\n<p><strong>this.state.user</strong>&nbsp;is used for picker control.</p>\n\n\n\n<p>The&nbsp;<strong>updateUser</strong>&nbsp;function will be triggered when a user is picked.</p>\n\n\n\n<h3>PickerExample.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';\nimport { View, Text, Picker, StyleSheet } from 'react-native'\n\nclass PickerExample extends Component {\n   state = {user: ''}\n   updateUser = (user) => {\n      this.setState({ user: user })\n   }\n   render() {\n      return (\n         &lt;View>\n            &lt;Picker selectedValue = {this.state.user} onValueChange = {this.updateUser}>\n               &lt;Picker.Item label = \"Steve\" value = \"steve\" />\n               &lt;Picker.Item label = \"Ellen\" value = \"ellen\" />\n               &lt;Picker.Item label = \"Maria\" value = \"maria\" />\n            &lt;/Picker>\n            &lt;Text style = {styles.text}>{this.state.user}&lt;/Text>\n         &lt;/View>\n      )\n   }\n}\nexport default PickerExample\n\nconst styles = StyleSheet.create({\n   text: {\n      fontSize: 30,\n      alignSelf: 'center',\n      color: 'red'\n   }\n})</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_picker.jpg\" alt=\"React Native Picker\"/></figure>\n\n\n\n<p>If you click on the name it prompts you all three options as −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/reactnative_picker.jpg\" alt=\"React Native Picker\"/></figure>\n\n\n\n<p>And you can pick one of them and the output will be like.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/reactnativepicker.jpg\" alt=\"React Native Picker\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will create simple Picker with two available options. Step 1: Create File Here, the&nbsp;App.js&nbsp;folder will be used as a presentational component. App.js Step 2: Logic this.state.user&nbsp;is used for picker control. The&nbsp;updateUser&nbsp;function will be triggered when a user is picked. PickerExample.js Output If you click on the name it prompts you all [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3450"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3450"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3450/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3450"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3450"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3450"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3452,
    "date": "2020-12-18T11:13:57",
    "date_gmt": "2020-12-18T11:13:57",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3452"
    },
    "modified": "2020-12-18T11:13:57",
    "modified_gmt": "2020-12-18T11:13:57",
    "slug": "status-bar",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/status-bar/",
    "title": {
      "rendered": "Status Bar"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to control the status bar appearance in React Native.</p>\n\n\n\n<p>The Status bar is easy to use and all you need to do is set properties to change it.</p>\n\n\n\n<p>The&nbsp;<strong>hidden</strong>&nbsp;property can be used to hide the status bar. In our example it is set to&nbsp;<strong>false</strong>. This is default value.</p>\n\n\n\n<p>The&nbsp;<strong>barStyle</strong>&nbsp;can have three values –&nbsp;<strong>dark-content, light-content</strong>&nbsp;and&nbsp;<strong>default</strong>.</p>\n\n\n\n<p>This component has several other properties that can be used. Some of them are Android or IOS specific. You can check it in official documentation.</p>\n\n\n\n<h2>App.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';\nimport { StatusBar } from 'react-native'\n\nconst App = () => {\n   return (\n      &lt;StatusBar barStyle = \"dark-content\" hidden = {false} backgroundColor = \"#00BCD4\" translucent = {true}/>\n   )\n}\nexport default App</code></pre>\n\n\n\n<p>If we run the app, the status bar will be visible and content will have dark color.</p>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_status_bar.jpg\" alt=\"React Native Status Bar\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to control the status bar appearance in React Native. The Status bar is easy to use and all you need to do is set properties to change it. The&nbsp;hidden&nbsp;property can be used to hide the status bar. In our example it is set to&nbsp;false. This is default [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3452"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3452"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3452/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3452"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3452"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3452"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5636,
    "date": "2020-12-18T11:15:05",
    "date_gmt": "2020-12-18T11:15:05",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3455"
    },
    "modified": "2020-12-18T11:15:05",
    "modified_gmt": "2020-12-18T11:15:05",
    "slug": "switch",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/switch/",
    "title": {
      "rendered": "Switch"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will explain the&nbsp;<strong>Switch</strong>&nbsp;component in a couple of steps.</p>\n\n\n\n<h2>Step 1: Create File</h2>\n\n\n\n<p>We will use the&nbsp;<strong>HomeContainer</strong>&nbsp;component for logic, but we need to create the presentational component.</p>\n\n\n\n<p>Let us now create a new file:&nbsp;<strong>SwitchExample.js</strong>.</p>\n\n\n\n<h2>Step 2: Logic</h2>\n\n\n\n<p>We are passing value from the&nbsp;<strong>state</strong>&nbsp;and functions for toggling switch items to&nbsp;<strong>SwitchExample</strong>&nbsp;component. Toggle functions will be used for updating the state.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View } from 'react-native'\nimport SwitchExample from './switch_example.js'\n\nexport default class HomeContainer extends Component {\n   constructor() {\n      super();\n      this.state = {\n         switch1Value: false,\n      }\n   }\n   toggleSwitch1 = (value) => {\n      this.setState({switch1Value: value})\n      console.log('Switch 1 is: ' + value)\n   }\n   render() {\n      return (\n         &lt;View>\n            &lt;SwitchExample\n            toggleSwitch1 = {this.toggleSwitch1}\n            switch1Value = {this.state.switch1Value}/>\n         &lt;/View>\n      );\n   }\n}</code></pre>\n\n\n\n<h2>Step 3: Presentation</h2>\n\n\n\n<p>Switch component takes two props. The&nbsp;<strong>onValueChange</strong>&nbsp;prop will trigger our toggle functions after a user presses the switch. The&nbsp;<strong>value</strong>&nbsp;prop is bound to the state of the&nbsp;<strong>HomeContainer</strong>&nbsp;component.</p>\n\n\n\n<h3>switch_example.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, Switch, StyleSheet }\n\nfrom 'react-native'\n\nexport default SwitchExample = (props) => {\n   return (\n      &lt;View style = {styles.container}>\n         &lt;Switch\n         onValueChange = {props.toggleSwitch1}\n         value = {props.switch1Value}/>\n      &lt;/View>\n   )\n}\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 100\n   }\n})</code></pre>\n\n\n\n<p>If we press the switch, the state will be updated. You can check values in the console.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_switch.jpg\" alt=\"React Native Switch\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will explain the&nbsp;Switch&nbsp;component in a couple of steps. Step 1: Create File We will use the&nbsp;HomeContainer&nbsp;component for logic, but we need to create the presentational component. Let us now create a new file:&nbsp;SwitchExample.js. Step 2: Logic We are passing value from the&nbsp;state&nbsp;and functions for toggling switch items to&nbsp;SwitchExample&nbsp;component. Toggle functions will [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5636"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5636"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5636/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5636"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5636"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5636"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5637,
    "date": "2020-12-18T11:15:50",
    "date_gmt": "2020-12-18T11:15:50",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3457"
    },
    "modified": "2020-12-18T11:15:50",
    "modified_gmt": "2020-12-18T11:15:50",
    "slug": "text-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/text-2/",
    "title": {
      "rendered": "Text"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will talk about&nbsp;<strong>Text</strong>&nbsp;component in React Native.</p>\n\n\n\n<p>This component can be nested and it can inherit properties from parent to child. This can be useful in many ways. We will show you example of capitalizing the first letter, styling words or parts of the text, etc.</p>\n\n\n\n<h2>Step 1: Create File</h2>\n\n\n\n<p>The file we are going to create is&nbsp;<strong>text_example.js</strong></p>\n\n\n\n<h2>Step 2: App.js</h2>\n\n\n\n<p>In this step, we will just create a simple container.</p>\n\n\n\n<h3>App.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport TextExample from './text_example.js'\n\nconst App = () => {\n   return (\n      &lt;TextExample/>\n   )\n}\nexport default App</code></pre>\n\n\n\n<h2>Step 3: Text</h2>\n\n\n\n<p>In this step, we will use the inheritance pattern.&nbsp;<strong>styles.text</strong>&nbsp;will be applied to all&nbsp;<strong>Text</strong>&nbsp;components.</p>\n\n\n\n<p>You can also notice how we set other styling properties to some parts of the text. It is important to know that all child elements have parent styles passed to them.</p>\n\n\n\n<h3>text_example.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';\nimport { View, Text, Image, StyleSheet } from 'react-native'\n\nconst TextExample = () => {\n   return (\n      &lt;View style = {styles.container}>\n         &lt;Text style = {styles.text}>\n            &lt;Text style = {styles.capitalLetter}>\n               L\n            &lt;/Text>\n            \n            &lt;Text>\n               orem ipsum dolor sit amet, sed do eiusmod.\n            &lt;/Text>\n            \n            &lt;Text>\n               Ut enim ad &lt;Text style = {styles.wordBold}>minim &lt;/Text> veniam,\n               quis aliquip ex ea commodo consequat.\n            &lt;/Text>\n            \n            &lt;Text style = {styles.italicText}>\n               Duis aute irure dolor in reprehenderit in voluptate velit esse cillum.\n            &lt;/Text>\n            \n            &lt;Text style = {styles.textShadow}>\n               Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n               deserunt mollit anim id est laborum.\n            &lt;/Text>\n         &lt;/Text>\n      \n      &lt;/View>\n   )\n}\nexport default TextExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n      marginTop: 100,\n      padding: 20\n   },\n   text: {\n      color: '#41cdf4',\n   },\n   capitalLetter: {\n      color: 'red',\n      fontSize: 20\n   },\n   wordBold: {\n      fontWeight: 'bold',\n      color: 'black'\n   },\n   italicText: {\n      color: '#37859b',\n      fontStyle: 'italic'\n   },\n   textShadow: {\n      textShadowColor: 'red',\n      textShadowOffset: { width: 2, height: 2 },\n      textShadowRadius : 5\n   }\n})</code></pre>\n\n\n\n<p>You will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_text.jpg\" alt=\"React Native Text\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will talk about&nbsp;Text&nbsp;component in React Native. This component can be nested and it can inherit properties from parent to child. This can be useful in many ways. We will show you example of capitalizing the first letter, styling words or parts of the text, etc. Step 1: Create File The file [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5637"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5637"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5637/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5637"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5637"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5637"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5638,
    "date": "2020-12-18T11:16:34",
    "date_gmt": "2020-12-18T11:16:34",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3459"
    },
    "modified": "2020-12-18T11:16:34",
    "modified_gmt": "2020-12-18T11:16:34",
    "slug": "alert",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/alert/",
    "title": {
      "rendered": "Alert"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will understand how to create custom&nbsp;<strong>Alert</strong>&nbsp;component.</p>\n\n\n\n<h2>Step 1: App.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport AlertExample from './alert_example.js'\n\nconst App = () => {\n   return (\n      &lt;AlertExample />\n   )\n}\nexport default App</code></pre>\n\n\n\n<h2>Step 2: alert_example.js</h2>\n\n\n\n<p>We will create a button for triggering the&nbsp;<strong>showAlert</strong>&nbsp;function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport { Alert, Text, TouchableOpacity, StyleSheet } from 'react-native'\n\nconst AlertExample = () => {\n   const showAlert = () =>{\n      Alert.alert(\n         'You need to...'\n      )\n   }\n   return (\n      &lt;TouchableOpacity onPress = {showAlert} style = {styles.button}>\n         &lt;Text>Alert&lt;/Text>\n      &lt;/TouchableOpacity>\n   )\n}\nexport default AlertExample\n\nconst styles = StyleSheet.create ({\n   button: {\n      backgroundColor: '#4ba37b',\n      width: 100,\n      borderRadius: 50,\n      alignItems: 'center',\n      marginTop: 100\n   }\n})</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_alert.jpg\" alt=\"React Native Alert\"/></figure>\n\n\n\n<p>When you click the button, you will see the following −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_alert_button.jpg\" alt=\"React Native Alert Button\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will understand how to create custom&nbsp;Alert&nbsp;component. Step 1: App.js Step 2: alert_example.js We will create a button for triggering the&nbsp;showAlert&nbsp;function. Output When you click the button, you will see the following −</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5638"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5638"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5638/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5638"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5638"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5638"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5639,
    "date": "2020-12-18T11:17:25",
    "date_gmt": "2020-12-18T11:17:25",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3461"
    },
    "modified": "2020-12-18T11:17:25",
    "modified_gmt": "2020-12-18T11:17:25",
    "slug": "geolocation",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/geolocation/",
    "title": {
      "rendered": "Geolocation"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to use&nbsp;<strong>Geolocation</strong>.</p>\n\n\n\n<h2>Step 1: App.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport GeolocationExample from './geolocation_example.js'\n\nconst App = () => {\n   return (\n      &lt;GeolocationExample />\n   )\n}\nexport default App</code></pre>\n\n\n\n<h2>Step 2: Geolocation</h2>\n\n\n\n<p>We will start by setting up the initial state for that will hold the initial and the last position.</p>\n\n\n\n<p>Now, we need to get current position of the device when a component is mounted using the&nbsp;<strong>navigator.geolocation.getCurrentPosition</strong>. We will stringify the response so we can update the state.</p>\n\n\n\n<p><strong>navigator.geolocation.watchPosition</strong>&nbsp;is used for tracking the users’ position. We also clear the watchers in this step.</p>\n\n\n\n<h3>AsyncStorageExample.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { View, Text, Switch, StyleSheet} from 'react-native'\n\nclass SwichExample extends Component {\n   state = {\n      initialPosition: 'unknown',\n      lastPosition: 'unknown',\n   }\n   watchID: ?number = null;\n   componentDidMount = () => {\n      navigator.geolocation.getCurrentPosition(\n         (position) => {\n            const initialPosition = JSON.stringify(position);\n            this.setState({ initialPosition });\n         },\n         (error) => alert(error.message),\n         { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\n      );\n      this.watchID = navigator.geolocation.watchPosition((position) => {\n         const lastPosition = JSON.stringify(position);\n         this.setState({ lastPosition });\n      });\n   }\n   componentWillUnmount = () => {\n      navigator.geolocation.clearWatch(this.watchID);\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}>\n            &lt;Text style = {styles.boldText}>\n               Initial position:\n            &lt;/Text>\n            \n            &lt;Text>\n               {this.state.initialPosition}\n            &lt;/Text>\n            \n            &lt;Text style = {styles.boldText}>\n               Current position:\n            &lt;/Text>\n            \n            &lt;Text>\n               {this.state.lastPosition}\n            &lt;/Text>\n         &lt;/View>\n      )\n   }\n}\nexport default SwichExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 50\n   },\n   boldText: {\n      fontSize: 30,\n      color: 'red',\n   }\n})</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to use&nbsp;Geolocation. Step 1: App.js Step 2: Geolocation We will start by setting up the initial state for that will hold the initial and the last position. Now, we need to get current position of the device when a component is mounted using the&nbsp;navigator.geolocation.getCurrentPosition. We will stringify [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5639"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5639"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5639/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5639"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5639"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5639"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5640,
    "date": "2020-12-18T11:18:12",
    "date_gmt": "2020-12-18T11:18:12",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3463"
    },
    "modified": "2020-12-18T11:18:12",
    "modified_gmt": "2020-12-18T11:18:12",
    "slug": "asyncstorage",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/asyncstorage/",
    "title": {
      "rendered": "AsyncStorage"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will show you how to persist your data using&nbsp;<strong>AsyncStorage</strong>.</p>\n\n\n\n<h2>Step 1: Presentation</h2>\n\n\n\n<p>In this step, we will create the&nbsp;<strong>App.js</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'\nimport AsyncStorageExample from './async_storage_example.js'\n\nconst App = () => {\n   return (\n      &lt;AsyncStorageExample />\n   )\n}\nexport default App</code></pre>\n\n\n\n<h2>Step 2: Logic</h2>\n\n\n\n<p><strong>Name</strong>&nbsp;from the initial state is empty string. We will update it from persistent storage when the component is mounted.</p>\n\n\n\n<p><strong>setName</strong>&nbsp;will take the text from our input field, save it using&nbsp;<strong>AsyncStorage</strong>&nbsp;and update the state.</p>\n\n\n\n<h3>async_storage_example.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react'\nimport { StatusBar } from 'react-native'\nimport { AsyncStorage, Text, View, TextInput, StyleSheet } from 'react-native'\n\nclass AsyncStorageExample extends Component {\n   state = {\n      'name': ''\n   }\n   componentDidMount = () => AsyncStorage.getItem('name').then((value) => this.setState({ 'name': value }))\n   \n   setName = (value) => {\n      AsyncStorage.setItem('name', value);\n      this.setState({ 'name': value });\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}>\n            &lt;TextInput style = {styles.textInput} autoCapitalize = 'none'\n            onChangeText = {this.setName}/>\n            &lt;Text>\n               {this.state.name}\n            &lt;/Text>\n         &lt;/View>\n      )\n   }\n}\nexport default AsyncStorageExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 50\n   },\n   textInput: {\n      margin: 5,\n      height: 100,\n      borderWidth: 1,\n      backgroundColor: '#7685ed'\n   }\n})</code></pre>\n\n\n\n<p>When we run the app, we can update the text by typing into the input field.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/react_native/images/react_native_asyncstorage.jpg\" alt=\"React Native AsyncStorage\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will show you how to persist your data using&nbsp;AsyncStorage. Step 1: Presentation In this step, we will create the&nbsp;App.js&nbsp;file. Step 2: Logic Name&nbsp;from the initial state is empty string. We will update it from persistent storage when the component is mounted. setName&nbsp;will take the text from our input field, save it [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      105
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5640"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5640"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5640/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5640"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5640"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5640"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]