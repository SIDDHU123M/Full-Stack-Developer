[
    {
        "id": 1439,
        "date": "2020-08-04T17:34:15",
        "date_gmt": "2020-08-04T17:34:15",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=91"
        },
        "modified": "2020-08-04T17:34:15",
        "modified_gmt": "2020-08-04T17:34:15",
        "slug": "overview-11",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-11\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>Google Gson is a simple Java-based library to serialize Java objects to JSON and vice versa. It is an open-source library developed by Google.<\/p>\n\n\n\n<p>The following points highlight why you should be using this library \u2212<\/p>\n\n\n\n<ul><li><strong>Standardized<\/strong>&nbsp;\u2212 Gson is a standardized library that is managed by Google.<\/li><li><strong>Efficient<\/strong>&nbsp;\u2212 It is a reliable, fast, and efficient extension to the Java standard library.<\/li><li><strong>Optimized<\/strong>&nbsp;\u2212 The library is highly optimized.<\/li><li><strong>Support Generics<\/strong>&nbsp;\u2212 It provides extensive support for generics.<\/li><li><strong>Supports complex inner classes<\/strong>&nbsp;\u2212 It supports complex objects with deep inheritance hierarchies.<\/li><\/ul>\n\n\n\n<h2>Features of Gson<\/h2>\n\n\n\n<p>Here is a list of some of the most prominent features of Gson \u2212<\/p>\n\n\n\n<ul><li><strong>Easy to use<\/strong>&nbsp;\u2212 Gson API provides a high-level facade to simplify commonly used use-cases.<\/li><li><strong>No need to create mapping<\/strong>&nbsp;\u2212 Gson API provides default mapping for most of the objects to be serialized.<\/li><li><strong>Performance<\/strong>&nbsp;\u2212 Gson is quite fast and is of low memory footprint. It is suitable for large object graphs or systems.<\/li><li><strong>Clean JSON<\/strong>&nbsp;\u2212 Gson creates a clean and compact JSON result which is easy to read.<\/li><li><strong>No Dependency<\/strong>&nbsp;\u2212 Gson library does not require any other library apart from JDK.<\/li><li><strong>Open Source<\/strong>&nbsp;\u2212 Gson library is open source; it is freely available.<\/li><\/ul>\n\n\n\n<h2>Three Ways of Processing JSON<\/h2>\n\n\n\n<p>Gson provides three alternative ways to process JSON \u2212<\/p>\n\n\n\n<h3>Streaming API<\/h3>\n\n\n\n<p>It reads and writes JSON content as discrete events.&nbsp;<strong>JsonReader<\/strong>&nbsp;and&nbsp;<strong>JsonWriter<\/strong>read\/write the data as token, referred as&nbsp;<strong>JsonToken<\/strong>.<\/p>\n\n\n\n<p>It is the most powerful approach among the three approaches to process JSON. It has the lowest overhead and it is quite fast in read\/write operations. It is analogous to Stax parser for XML.<\/p>\n\n\n\n<h3>Tree Model<\/h3>\n\n\n\n<p>It prepares an in-memory tree representation of the JSON document. It builds a tree of JsonObject nodes. It is a flexible approach and is analogous to DOM parser for XML.<\/p>\n\n\n\n<h3>Data Binding<\/h3>\n\n\n\n<p>It converts JSON to and from POJO (Plain Old Java Object) using property accessor. Gson reads\/writes JSON using data type adapters. It is analogous to JAXB parser for XML.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Google Gson is a simple Java-based library to serialize Java objects to JSON and vice versa. It is an open-source library developed by Google. The following points highlight why you should be using this library \u2212 Standardized&nbsp;\u2212 Gson is a standardized library that is managed by Google. Efficient&nbsp;\u2212 It is a reliable, fast, and efficient [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1439"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1439"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1439\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1439"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1439"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1439"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1438,
        "date": "2020-08-04T17:34:55",
        "date_gmt": "2020-08-04T17:34:55",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=90"
        },
        "modified": "2020-08-04T17:34:55",
        "modified_gmt": "2020-08-04T17:34:55",
        "slug": "environment-setup-7",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-7\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<h2>Local Environment Setup<\/h2>\n\n\n\n<p>If you still want to set up a local environment for Java programming language, then this section will guide you on how to download and set up Java on your machine. Please follow the steps given below, to set up the environment.<\/p>\n\n\n\n<p>Java SE is freely available from the link\u00a0Download Java. So you download a version based on your operating system.<\/p>\n\n\n\n<p>Follow the instructions to download Java and run the&nbsp;<strong>.exe<\/strong>&nbsp;to install Java on your machine. Once you have installed Java on your machine, you would need to set the environment variables to point to their correct installation directories.<\/p>\n\n\n\n<h3>Setting up the Path in Windows 2000\/XP<\/h3>\n\n\n\n<p>Assuming you have installed Java in&nbsp;<em>c:\\Program Files\\java\\jdk<\/em>&nbsp;directory \u2212<\/p>\n\n\n\n<ul><li>Right-click on &#8216;My Computer&#8217; and select &#8216;Properties&#8217;.<\/li><li>Click on the &#8216;Environment variables&#8217; button under the &#8216;Advanced&#8217; tab.<\/li><li>Next, alter the &#8216;Path&#8217; variable so that it also contains the path to the Java executable. For example, if the path is currently set to &#8216;C:\\WINDOWS\\SYSTEM32&#8217;, then change your path to read &#8216;C:\\WINDOWS\\SYSTEM32;c:\\Program Files\\java\\jdk\\bin&#8217;.<\/li><\/ul>\n\n\n\n<h3>Setting up the Path in Windows 95 \/ 98 \/ ME<\/h3>\n\n\n\n<p>Assuming you have installed Java in&nbsp;<em>c:\\Program Files\\java\\jdk<\/em>&nbsp;directory \u2212<\/p>\n\n\n\n<ul><li>Edit the &#8216;C:\\autoexec.bat&#8217; file and add the following line at the end: &#8216;SET PATH=%PATH%;C:\\Program Files\\java\\jdk\\bin&#8217;<\/li><\/ul>\n\n\n\n<h3>Setting up the Path for Linux, UNIX, Solaris, FreeBSD<\/h3>\n\n\n\n<p>The environment variable&nbsp;<strong>PATH<\/strong>&nbsp;should be set to point to where the Java binaries have been installed. Refer to your shell documentation if you have trouble doing this.<\/p>\n\n\n\n<p>For example, if you use bash as your shell, then you would add the following line to the end of your &#8216;.bashrc: export PATH=\/path\/to\/java:$PATH&#8217;<\/p>\n\n\n\n<h2>Popular Java Editors<\/h2>\n\n\n\n<p>To write your Java programs, you will need a text editor. There are quite a few sophisticated IDEs available in the market. But for now, you can consider one of the following \u2212<\/p>\n\n\n\n<ul><li><strong>Notepad<\/strong>\u00a0\u2212 On Windows, you can use any simple text editor like Notepad (Recommended for this tutorial) or TextPad.<\/li><li><strong>Netbeans<\/strong>\u00a0\u2212 It is a Java IDE that is open-source and free which can be downloaded from\u00a0https:\/\/netbeans.org\/index.html.<\/li><li><strong>Eclipse<\/strong>\u00a0\u2212 It is also a Java IDE developed by the Eclipse open-source community and can be downloaded from\u00a0https:\/\/www.eclipse.org\/.<\/li><\/ul>\n\n\n\n<h2>Download Gson Archive<\/h2>\n\n\n\n<p>Download the latest version of Gson jar file from&nbsp;<strong>gson-2.3.1.jar<\/strong>. At the time of writing this tutorial, we downloaded gson-2.3.1.jar and copied it into C:\\&gt;gson folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>gson-2.3.1.jar<\/td><\/tr><tr><td>Linux<\/td><td>gson-2.3.1.jar<\/td><\/tr><tr><td>Mac<\/td><td>gson-2.3.1.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Set Gson Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>GSON_HOME<\/strong>&nbsp;environment variable to point to the base directory location where Gson jar is stored on your machine.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable GSON_HOME to C:\\gson<\/td><\/tr><tr><td>Linux<\/td><td>export GSON_HOME=\/usr\/local\/gson<\/td><\/tr><tr><td>Mac<\/td><td>export GSON_HOME=\/Library\/gson<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Set CLASSPATH variable<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>CLASSPATH<\/strong>&nbsp;environment variable to point to the Gson jar location.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable CLASSPATH to %CLASSPATH%;%GSON_HOME%\\gson-2.3.1.jar;.;<\/td><\/tr><tr><td>Linux<\/td><td>export CLASSPATH=$CLASSPATH:$GSON_HOME\/gson-2.3.1.jar:.<\/td><\/tr><tr><td>Mac<\/td><td>export CLASSPATH=$CLASSPATH:$GSON_HOME\/gson-2.3.1.jar:.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Local Environment Setup If you still want to set up a local environment for Java programming language, then this section will guide you on how to download and set up Java on your machine. Please follow the steps given below, to set up the environment. Java SE is freely available from the link\u00a0Download Java. So [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1438"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1438"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1438\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1438"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1438"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1438"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1433,
        "date": "2020-08-04T17:39:57",
        "date_gmt": "2020-08-04T17:39:57",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=83"
        },
        "modified": "2020-08-04T17:39:57",
        "modified_gmt": "2020-08-04T17:39:57",
        "slug": "first-application-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/first-application-2\/",
        "title": {
            "rendered": "First Application"
        },
        "content": {
            "rendered": "\n<p>Before going into the details of the Google Gson library, let&#8217;s see an application in action. In this example, we&#8217;ve created a&nbsp;<strong>Student<\/strong>&nbsp;class. We&#8217;ll create a JSON string with student details and deserialize it to&nbsp;<strong>student<\/strong>&nbsp;object and then serialize it to an JSON String.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Create a Java class file named GsonTester in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson; \nimport com.google.gson.GsonBuilder;  \n\npublic class GsonTester { \n   public static void main(String&#91;] args) { \n      String jsonString = \"{\\\"name\\\":\\\"Mahesh\\\", \\\"age\\\":21}\"; \n      \n      GsonBuilder builder = new GsonBuilder(); \n      builder.setPrettyPrinting(); \n      \n      Gson gson = builder.create(); \n      Student student = gson.fromJson(jsonString, Student.class); \n      System.out.println(student);    \n      \n      jsonString = gson.toJson(student); \n      System.out.println(jsonString);  \n   } \n} \n\nclass Student { \n   private String name; \n   private int age; \n   public Student(){} \n   \n   public String getName() { \n      return name; \n   }\n   \n   public void setName(String name) { \n      this.name = name; \n   } \n   \n   public int getAge() { \n      return age; \n   }\n   \n   public void setAge(int age) { \n      this.age = age; \n   }\n   \n   public String toString() { \n      return \"Student &#91; name: \"+name+\", age: \"+ age+ \" ]\"; \n   }  \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the GsonTester to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Student &#91; name: Mahesh, age: 21 ] \n{ \n   \"name\" : \"Mahesh\", \n   \"age\" : 21 \n}\n\ufeff<\/code><\/pre>\n\n\n\n<h2>Steps to Remember<\/h2>\n\n\n\n<p>Following are the important steps to be considered here.<\/p>\n\n\n\n<h3>Step 1 \u2212 Create Gson object using GsonBuilder<\/h3>\n\n\n\n<p>Create a Gson object. It is a reusable object.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>GsonBuilder builder = new GsonBuilder(); \nbuilder.setPrettyPrinting(); \nGson gson = builder.create();<\/code><\/pre>\n\n\n\n<h3>Step 2 \u2212 Deserialize JSON to Object<\/h3>\n\n\n\n<p>Use fromJson() method to get the Object from the JSON. Pass Json string \/ source of Json string and object type as parameter.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Object to JSON Conversion \nStudent student = gson.fromJson(jsonString, Student.class);<\/code><\/pre>\n\n\n\n<h3>Step 3 \u2212 Serialize Object to JSON<\/h3>\n\n\n\n<p>Use toJson() method to get the JSON string representation of an object.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Object to JSON Conversion   \njsonString = gson.toJson(student);<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Before going into the details of the Google Gson library, let&#8217;s see an application in action. In this example, we&#8217;ve created a&nbsp;Student&nbsp;class. We&#8217;ll create a JSON string with student details and deserialize it to&nbsp;student&nbsp;object and then serialize it to an JSON String. Example Create a Java class file named GsonTester in C:\\&gt;GSON_WORKSPACE. File \u2212 GsonTester.java [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1433"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1433"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1433\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1433"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1433"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1433"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1435,
        "date": "2020-08-04T17:42:45",
        "date_gmt": "2020-08-04T17:42:45",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=85"
        },
        "modified": "2020-08-04T17:42:45",
        "modified_gmt": "2020-08-04T17:42:45",
        "slug": "class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/class\/",
        "title": {
            "rendered": "Class"
        },
        "content": {
            "rendered": "\n<p>Gson is the main actor class of Google Gson library. It provides functionalities to convert Java objects to matching JSON constructs and vice versa. Gson is first constructed using GsonBuilder and then, toJson(Object) or fromJson(String, Class) methods are used to read\/write JSON constructs.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>com.google.gson.Gson<\/strong>\u00a0class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public final class Gson \n   extends Object \n\ufeff<\/code><\/pre>\n\n\n\n<h2>Constructors<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>Constructor &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Gson()<\/strong>Constructs a Gson object with default configuration.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Class Methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>Method &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>&lt;T&gt; T fromJson(JsonElement json, Class&lt;T&gt; classOfT)<\/strong>This method deserializes the Json read from the specified parse tree into an object of the specified type.<\/td><\/tr><tr><td>2<\/td><td><strong>&lt;T&gt; T fromJson(JsonElement json, Type typeOfT)<\/strong>This method deserializes the Json read from the specified parse tree into an object of the specified type.<\/td><\/tr><tr><td>3<\/td><td><strong>&lt;T&gt; T fromJson(JsonReader reader, Type typeOfT)<\/strong>Reads the next JSON value from reader and convert it to an object of type typeOfT.<\/td><\/tr><tr><td>4<\/td><td><strong>&lt;T&gt; T fromJson(Reader json, Class&lt;T&gt; classOfT)<\/strong>This method deserializes the Json read from the specified reader into an object of the specified class.<\/td><\/tr><tr><td>5<\/td><td><strong>&lt;T&gt; T fromJson(Reader json, Type typeOfT)<\/strong>This method deserializes the Json read from the specified reader into an object of the specified type.<\/td><\/tr><tr><td>6<\/td><td><strong>&lt;T&gt; T fromJson(String json, Class&lt;T&gt; classOfT)<\/strong>This method deserializes the specified Json into an object of the specified class.<\/td><\/tr><tr><td>7<\/td><td><strong>&lt;T&gt; T fromJson(String json, Type typeOfT)<\/strong>This method deserializes the specified Json into an object of the specified type.<\/td><\/tr><tr><td>8<\/td><td><strong>&lt;T&gt; TypeAdapter&lt;T&gt; getAdapter(Class&lt;T&gt; type)<\/strong>Returns the type adapter for type.<\/td><\/tr><tr><td>9<\/td><td><strong>&lt;T&gt; TypeAdapter&lt;T&gt; getAdapter(TypeToken&lt;T&gt; type)<\/strong>Returns the type adapter for type.<\/td><\/tr><tr><td>10<\/td><td><strong>&lt;T&gt; TypeAdapter&lt;T&gt; getDelegateAdapter(TypeAdapterFactory skipPast, TypeToken&lt;T&gt; type)<\/strong>This method is used to get an alternate type adapter for the specified type.<\/td><\/tr><tr><td>11<\/td><td><strong>String toJson(JsonElement jsonElement)<\/strong>Converts a tree of JsonElements into its equivalent JSON representation.<\/td><\/tr><tr><td>12<\/td><td><strong>void toJson(JsonElement jsonElement, Appendable writer)<\/strong>Writes out the equivalent JSON for a tree of JsonElements.<\/td><\/tr><tr><td>13<\/td><td><strong>void toJson(JsonElement jsonElement, JsonWriter writer)<\/strong>Writes the JSON for jsonElement to writer.<\/td><\/tr><tr><td>14<\/td><td><strong>String toJson(Object src)<\/strong>This method serializes the specified object into its equivalent Json representation.<\/td><\/tr><tr><td>15<\/td><td><strong>void toJson(Object src, Appendable writer)<\/strong>This method serializes the specified object into its equivalent Json representation.<\/td><\/tr><tr><td>16<\/td><td><strong>String toJson(Object src, Type typeOfSrc)<\/strong>This method serializes the specified object, including those of generic types, into its equivalent Json representation.<\/td><\/tr><tr><td>17<\/td><td><strong>void toJson(Object src, Type typeOfSrc, Appendable writer)<\/strong>This method serializes the specified object, including those of generic types, into its equivalent Json representation.<\/td><\/tr><tr><td>18<\/td><td><strong>void toJson(Object src, Type typeOfSrc, JsonWriter writer)<\/strong>Writes the JSON representation of src of type typeOfSrc to writer.<\/td><\/tr><tr><td>19<\/td><td><strong>JsonElement toJsonTree(Object src)<\/strong>This method serializes the specified object into its equivalent representation as a tree of JsonElements.<\/td><\/tr><tr><td>20<\/td><td><strong>JsonElement toJsonTree(Object src, Type typeOfSrc)<\/strong>This method serializes the specified object, including those of generic types, into its equivalent representation as a tree of JsonElements.<\/td><\/tr><tr><td>21<\/td><td><strong>String toString()<\/strong><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Methods inherited<\/h2>\n\n\n\n<p>This class inherits methods from the following class \u2212<\/p>\n\n\n\n<ul><li>java.lang.Object<\/li><\/ul>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Create the following Java program using any editor of your choice, and save it at, say, C:\/&gt; GSON_WORKSPACE<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson; \nimport com.google.gson.GsonBuilder;  \n\npublic class GsonTester { \n   public static void main(String&#91;] args) { \n      String jsonString = \"{\\\"name\\\":\\\"Mahesh\\\", \\\"age\\\":21}\"; \n      \n      GsonBuilder builder = new GsonBuilder(); \n      builder.setPrettyPrinting(); \n      \n      Gson gson = builder.create(); \n      Student student = gson.fromJson(jsonString, Student.class); \n      System.out.println(student);    \n      \n      jsonString = gson.toJson(student); \n      System.out.println(jsonString);  \n   } \n}  \n\nclass Student { \n   private String name; \n   private int age; \n   public Student(){} \n   \n   public String getName() { \n      return name; \n   } \n   public void setName(String name) { \n      this.name = name; \n   } \n   public int getAge() { \n      return age;\n   } \n   public void setAge(int age) { \n      this.age = age; \n   } \n   public String toString() { \n      return \"Student &#91; name: \"+name+\", age: \"+ age+ \" ]\"; \n   }  \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java \n<\/code><\/pre>\n\n\n\n<p>Now run the geoscientist to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Student &#91; name: Mahesh, age: 21 ] \n{ \n   \"name\" : \"Mahesh\", \n   \"age\" : 21 \n}<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Gson is the main actor class of Google Gson library. It provides functionalities to convert Java objects to matching JSON constructs and vice versa. Gson is first constructed using GsonBuilder and then, toJson(Object) or fromJson(String, Class) methods are used to read\/write JSON constructs. Class Declaration Following is the declaration for\u00a0com.google.gson.Gson\u00a0class \u2212 Constructors Sr.No Constructor &amp; [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1435"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1435"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1435\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1435"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1435"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1435"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1434,
        "date": "2020-08-04T17:47:06",
        "date_gmt": "2020-08-04T17:47:06",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=84"
        },
        "modified": "2020-08-04T17:47:06",
        "modified_gmt": "2020-08-04T17:47:06",
        "slug": "object-serialization",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/object-serialization\/",
        "title": {
            "rendered": "Object Serialization"
        },
        "content": {
            "rendered": "\n<p>Let&#8217;s serialize a Java object to a Json file and then read that Json file to get the object back. In this example, we&#8217;ve created a&nbsp;<strong>Student<\/strong>&nbsp;class. We&#8217;ll create a&nbsp;<strong>student.json<\/strong>&nbsp;file which will have a&nbsp;<strong>json<\/strong>&nbsp;representation of&nbsp;<strong>Student<\/strong>&nbsp;object.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;GSON_WORKSPACE<\/strong>.<\/p>\n\n\n\n<h3>File &#8211; GsonTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.BufferedReader; \nimport java.io.FileNotFoundException; \nimport java.io.FileReader; \nimport java.io.FileWriter; \nimport java.io.IOException;  \n\nimport com.google.gson.Gson; \nimport com.google.gson.GsonBuilder;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      GsonTester tester = new GsonTester(); \n      try { \n         Student student = new Student(); \n         student.setAge(10); \n         student.setName(\"Mahesh\"); \n         tester.writeJSON(student);  \n         Student student1 = tester.readJSON(); \n         System.out.println(student1); \n      } \n      catch(FileNotFoundException e) { \n         e.printStackTrace(); \n      } \n      catch(IOException e) { \n         e.printStackTrace();\n      } \n   } \n   \n   private void writeJSON(Student student) throws IOException { \n      GsonBuilder builder = new GsonBuilder(); \n      Gson gson = builder.create(); \n      FileWriter writer = new FileWriter(\"student.json\");   \n      writer.write(gson.toJson(student));   \n      writer.close(); \n   }  \n   \n   private Student readJSON() throws FileNotFoundException { \n      GsonBuilder builder = new GsonBuilder(); \n      Gson gson = builder.create(); \n      BufferedReader bufferedReader = new BufferedReader(\n         new FileReader(\"student.json\"));   \n      \n      Student student = gson.fromJson(bufferedReader, Student.class); \n      return student; \n   } \n} \n\nclass Student { \n   private String name; \n   private int age; \n   public Student(){} \n   \n   public String getName() { \n      return name; \n   } \n   \n   public void setName(String name) { \n      this.name = name; \n   } \n   \n   public int getAge() { \n      return age; \n   } \n   \n   public void setAge(int age) { \n      this.age = age; \n   } \n   \n   public String toString() { \n      return \"Student &#91; name: \"+name+\", age: \"+ age+ \" ]\";\n   }  \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the GsonTester to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Student &#91; name: Mahesh, age: 10 ]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Let&#8217;s serialize a Java object to a Json file and then read that Json file to get the object back. In this example, we&#8217;ve created a&nbsp;Student&nbsp;class. We&#8217;ll create a&nbsp;student.json&nbsp;file which will have a&nbsp;json&nbsp;representation of&nbsp;Student&nbsp;object. Example Create a Java class file named&nbsp;GsonTester&nbsp;in&nbsp;C:\\&gt;GSON_WORKSPACE. File &#8211; GsonTester.java Verify the result Compile the classes using\u00a0javac\u00a0compiler as follows \u2212 Now [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1434"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1434"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1434\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1434"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1434"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1434"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1432,
        "date": "2020-08-04T17:49:29",
        "date_gmt": "2020-08-04T17:49:29",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=81"
        },
        "modified": "2020-08-04T17:49:29",
        "modified_gmt": "2020-08-04T17:49:29",
        "slug": "data-binding",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/data-binding\/",
        "title": {
            "rendered": "Data Binding"
        },
        "content": {
            "rendered": "\n<p>Data Binding API is used to convert JSON to and from POJO (Plain Old Java Object) using property accessor or using annotations. It is of two types.<\/p>\n\n\n\n<ul><li><strong>Primitives Data Binding<\/strong>&nbsp;\u2212 Converts JSON to and from Java Maps, Lists, Strings, Numbers, Booleans, and NULL objects.<\/li><li><strong>Objects Data Binding<\/strong>&nbsp;\u2212 Converts JSON to and from any JAVA type.<\/li><\/ul>\n\n\n\n<p>Gson reads\/writes JSON for both types of data bindings. Data Binding is analogous to JAXB parser for XML.<\/p>\n\n\n\n<h2>Primitives Data Binding<\/h2>\n\n\n\n<p>Primitives data binding refers to mapping of JSON to JAVA Core data types and inbuilt collections. Gson provides various inbuilt adapters which can be used to serialize\/deserialize primitive data types.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let&#8217;s see primitive data binding in action. Here we&#8217;ll map JAVA basic types directly to JSON and vice versa.<\/p>\n\n\n\n<p>Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;Gson_WORKSPACE<\/strong>.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Arrays; \nimport com.google.gson.Gson;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      Gson gson = new Gson();  \n      String name = \"Mahesh Kumar\"; \n      long rollNo = 1; \n      boolean verified = false; \n      int&#91;] marks = {100,90,85};  \n      \n      \/\/Serialization \n      System.out.println(\"{\"); \n      System.out.println(\"name: \" + gson.toJson(name) +\",\"); \n      System.out.println(\"rollNo: \" + gson.toJson(rollNo) +\",\"); \n      System.out.println(\"verified: \" + gson.toJson(verified) +\",\"); \n      System.out.println(\"marks:\" + gson.toJson(marks)); \n      System.out.println(\"}\");  \n      \n      \/\/De-serialization \n      name = gson.fromJson(\"\\\"Mahesh Kumar\\\"\", String.class); \n      rollNo = gson.fromJson(\"1\", Long.class); \n      verified = gson.fromJson(\"false\", Boolean.class); \n      marks = gson.fromJson(\"&#91;100,90,85]\", int&#91;].class);  \n      \n      System.out.println(\"name: \" + name); \n      System.out.println(\"rollNo: \" + rollNo); \n      System.out.println(\"verified: \" +verified); \n      System.out.println(\"marks:\" + Arrays.toString(marks)); \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{ \n   name: \"Mahesh Kumar\", \n   rollNo: 1, \n   verified: false, \n   marks:&#91;100,90,85] \n} \n\nname: Mahesh Kumar \nrollNo: 1 \nverified: false \nmarks:&#91;100, 90, 85] <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Data Binding API is used to convert JSON to and from POJO (Plain Old Java Object) using property accessor or using annotations. It is of two types. Primitives Data Binding&nbsp;\u2212 Converts JSON to and from Java Maps, Lists, Strings, Numbers, Booleans, and NULL objects. Objects Data Binding&nbsp;\u2212 Converts JSON to and from any JAVA type. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1432"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1432"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1432\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1432"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1432"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1432"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1436,
        "date": "2020-08-04T17:51:08",
        "date_gmt": "2020-08-04T17:51:08",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=87"
        },
        "modified": "2020-08-04T17:51:08",
        "modified_gmt": "2020-08-04T17:51:08",
        "slug": "object-data-binding",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/object-data-binding\/",
        "title": {
            "rendered": "Object Data Binding"
        },
        "content": {
            "rendered": "\n<p>Object data binding refers to mapping of JSON to any JAVA Object.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Create a Gson instance \nGson gson = new Gson();  \n\n\/\/map Student object to JSON content \nString jsonString = gson.toJson(student);   \n\n\/\/map JSON content to Student object \nStudent student1 = gson.fromJson(jsonString, Student.class);<\/code><\/pre>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Let&#8217;s see object data binding in action. Here we&#8217;ll map JAVA Object directly to JSON and vice versa.<\/p>\n\n\n\n<p>Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<h3>File &#8211; GsonTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      Gson gson = new Gson(); \n      Student student = new Student(); \n      student.setAge(10); \n      student.setName(\"Mahesh\"); \n      \n      String jsonString = gson.toJson(student);          \n      System.out.println(jsonString); \n      \n      Student student1 = gson.fromJson(jsonString, Student.class); \n      System.out.println(student1); \n   }   \n} \n\nclass Student { \n   private String name; \n   private int age; \n   public Student(){} \n   \n   public String getName() { \n      return name; \n   } \n   \n   public void setName(String name) { \n      this.name = name; \n   } \n   \n   public int getAge() { \n      return age; \n   } \n   \n   public void setAge(int age) { \n      this.age = age; \n   } \n   \n   public String toString() { \n      return \"Student &#91; name: \"+name+\", age: \"+ age+ \" ]\"; \n   }  \n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"name\":\"Mahesh\",\"age\":10} \nStudent &#91; name: Mahesh, age: 10 ]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Object data binding refers to mapping of JSON to any JAVA Object. Example Let&#8217;s see object data binding in action. Here we&#8217;ll map JAVA Object directly to JSON and vice versa. Create a Java class file named&nbsp;GsonTester&nbsp;in C:\\&gt;GSON_WORKSPACE. File &#8211; GsonTester.java Verify the result Compile the classes using\u00a0javac\u00a0compiler as follows \u2212 Now run the\u00a0GsonTester\u00a0to see [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1436"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1436"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1436\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1436"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1436"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1436"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1437,
        "date": "2020-08-04T17:55:25",
        "date_gmt": "2020-08-04T17:55:25",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=89"
        },
        "modified": "2020-08-04T17:55:25",
        "modified_gmt": "2020-08-04T17:55:25",
        "slug": "tree-model",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/tree-model\/",
        "title": {
            "rendered": "Tree Model"
        },
        "content": {
            "rendered": "\n<p>Tree Model prepares an in-memory tree representation of the JSON document. It builds a tree of JsonObject nodes. It is a flexible approach and is analogous to DOM parser for XML.<\/p>\n\n\n\n<h2>Create Tree from JSON<\/h2>\n\n\n\n<p>JsonParser provides a pointer to the root node of the tree after reading the JSON. Root Node can be used to traverse the complete tree. Consider the following code snippet to get the root node of a provided JSON String.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Create an JsonParser instance \nJsonParser parser = new JsonParser(); \n\nString jsonString = \n\"{\\\"name\\\":\\\"Mahesh Kumar\\\", \\\"age\\\":21,\\\"verified\\\":false,\\\"marks\\\": &#91;100,90,85]}\"; \n\n\/\/create tree from JSON \nJsonElement rootNode = parser.parse(jsonString);\n\ufeff<\/code><\/pre>\n\n\n\n<h2>Traversing Tree Model<\/h2>\n\n\n\n<p>Get each node using relative path to the root node while traversing the tree and process the data. The following code snippet shows how you can traverse a tree.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>JsonObject details = rootNode.getAsJsonObject(); \n\nJsonElement nameNode = details.get(\"name\"); \nSystem.out.println(\"Name: \" +nameNode.getAsString()); \n\nJsonElement ageNode = details.get(\"age\"); \nSystem.out.println(\"Age: \" + ageNode.getAsInt()); <\/code><\/pre>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.JsonArray; \nimport com.google.gson.JsonElement; \nimport com.google.gson.JsonObject; \nimport com.google.gson.JsonParser;\nimport com.google.gson.JsonPrimitive;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      String jsonString = \n         \"{\\\"name\\\":\\\"Mahesh Kumar\\\", \\\"age\\\":21,\\\"verified\\\":false,\\\"marks\\\": &#91;100,90,85]}\";\n      JsonParser parser = new JsonParser();  \n      JsonElement rootNode = parser.parse(jsonString);  \n      \n      if (rootNode.isJsonObject()) { \n         JsonObject details = rootNode.getAsJsonObject();  \n         JsonElement nameNode = details.get(\"name\"); \n         System.out.println(\"Name: \" +nameNode.getAsString());  \n         \n         JsonElement ageNode = details.get(\"age\"); \n         System.out.println(\"Age: \" + ageNode.getAsInt());  \n         \n         JsonElement verifiedNode = details.get(\"verified\"); \n         System.out.println(\"Verified: \" + (verifiedNode.getAsBoolean() ? \"Yes\":\"No\"));  \n         JsonArray marks = details.getAsJsonArray(\"marks\"); \n         \n         for (int i = 0; i &lt; marks.size(); i++) { \n            JsonPrimitive value = marks.get(i).getAsJsonPrimitive(); \n            System.out.print(value.getAsInt() + \" \");  \n         } \n      } \n   }   \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java \n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester \n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name: Mahesh Kumar \nAge: 21 \nVerified: No \n100 90 85<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Tree Model prepares an in-memory tree representation of the JSON document. It builds a tree of JsonObject nodes. It is a flexible approach and is analogous to DOM parser for XML. Create Tree from JSON JsonParser provides a pointer to the root node of the tree after reading the JSON. Root Node can be used [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1437"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1437"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1437\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1437"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1437"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1437"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1431,
        "date": "2020-08-04T17:59:01",
        "date_gmt": "2020-08-04T17:59:01",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=76"
        },
        "modified": "2020-08-04T17:59:01",
        "modified_gmt": "2020-08-04T17:59:01",
        "slug": "streaming",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/streaming\/",
        "title": {
            "rendered": "Streaming"
        },
        "content": {
            "rendered": "\n<p>Streaming API is used to read JSON token by token. It reads and writes JSON content as discrete events.&nbsp;<strong>JsonReader<\/strong>&nbsp;and&nbsp;<strong>JsonWriter<\/strong>&nbsp;read\/write the data as token, referred as&nbsp;<strong>JsonToken<\/strong>.<\/p>\n\n\n\n<p>It is the most powerful approach among the three approaches to process JSON. It has the lowest overhead and it is quite fast in read\/write operations. It is analogous to Stax parser for XML.<\/p>\n\n\n\n<p>In this chapter, we will showcase the usage of GSON streaming APIs to read JSON data. Streaming API works with the concept of token and every details of Json is to be handled carefully.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/create JsonReader object and pass it the json source or json text. \nJsonReader reader = new JsonReader(new StringReader(jsonString));  \n\n\/\/start reading json   \nreader.beginObject(); \n\n\/\/get the next token \nJsonToken token = reader.peek(); \n\n\/\/check the type of the token \nif (token.equals(JsonToken.NAME)) {     \n   \/\/get the current token \n   fieldname = reader.nextName(); \n}<\/code><\/pre>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Let&#8217;s see&nbsp;<strong>JsonReader<\/strong>&nbsp;in action. Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<h3>File &#8211; GsonTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.IOException; \nimport java.io.StringReader;  \n\nimport com.google.gson.stream.JsonReader; \nimport com.google.gson.stream.JsonToken;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      String jsonString = \n         \"{\\\"name\\\":\\\"Mahesh Kumar\\\", \\\"age\\\":21,\\\"verified\\\":false,\\\"marks\\\": &#91;100,90,85]}\";  \n      JsonReader reader = new JsonReader(new StringReader(jsonString));    \n      try { \n         handleJsonObject(reader); \n      } \n      catch (IOException e) { \n         e.printStackTrace(); \n      } \n   } \n   \n   private static void handleJsonObject(JsonReader reader) throws IOException { \n      reader.beginObject(); \n      String fieldname = null; \n      \n      while (reader.hasNext()) { \n         JsonToken token = reader.peek(); \n         \n         if (token.equals(JsonToken.BEGIN_ARRAY)) { \n            System.out.print(\"Marks &#91; \"); \n            handleJsonArray(reader); \n            System.out.print(\"]\"); \n         } else if (token.equals(JsonToken.END_OBJECT)) { \n            reader.endObject(); \n            return; \n         } else {            \n            if (token.equals(JsonToken.NAME)) {     \n               \/\/get the current token \n               fieldname = reader.nextName(); \n            } \n            \n            if (\"name\".equals(fieldname)) {       \n               \/\/move to next token \n               token = reader.peek(); \n               System.out.println(\"Name: \"+reader.nextString());           \n            } \n            \n            if(\"age\".equals(fieldname)) { \n               \/\/move to next token \n               token = reader.peek(); \n               System.out.println(\"Age:\" + reader.nextInt());       \n            } \n            \n            if(\"verified\".equals(fieldname)) { \n               \/\/move to next token \n               token = reader.peek(); \n               System.out.println(\"Verified:\" + reader.nextBoolean());           \n            }             \n         } \n      } \n   }  \n   \n   private static void handleJsonArray(JsonReader reader) throws IOException { \n      reader.beginArray(); \n      String fieldname = null; \n      \n      while (true) { \n         JsonToken token = reader.peek(); \n         \n         if (token.equals(JsonToken.END_ARRAY)) { \n            reader.endArray(); \n            break; \n         } else if (token.equals(JsonToken.BEGIN_OBJECT)) { \n            handleJsonObject(reader); \n         } else if (token.equals(JsonToken.END_OBJECT)) { \n            reader.endObject(); \n         } else {            \n            System.out.print(reader.nextInt() + \" \");            \n         } \n      } \n   } \n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java \n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester \n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name: Mahesh Kumar \nAge:21 \nVerified:false \nMarks &#91; 100 90 85 ] <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Streaming API is used to read JSON token by token. It reads and writes JSON content as discrete events.&nbsp;JsonReader&nbsp;and&nbsp;JsonWriter&nbsp;read\/write the data as token, referred as&nbsp;JsonToken. It is the most powerful approach among the three approaches to process JSON. It has the lowest overhead and it is quite fast in read\/write operations. It is analogous to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1431"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1431"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1431\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1431"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1431"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1431"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1440,
        "date": "2020-08-05T17:18:25",
        "date_gmt": "2020-08-05T17:18:25",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=149"
        },
        "modified": "2020-08-05T17:18:25",
        "modified_gmt": "2020-08-05T17:18:25",
        "slug": "serialization",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/serialization\/",
        "title": {
            "rendered": "Serialization"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will discuss the serialization\/deserialization of arrays, collections, and generics.<\/p>\n\n\n\n<h2>Array Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>int&#91;] marks = {100,90,85}; \n\/\/Serialization \nSystem.out.println(\"marks:\" + gson.toJson(marks));        \n\n\/\/De-serialization \nmarks = gson.fromJson(\"&#91;100,90,85]\", int&#91;].class); \nSystem.out.println(\"marks:\" + Arrays.toString(marks)); <\/code><\/pre>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let&#8217;s see Array serialization\/de-serialization in action. Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Arrays; \nimport com.google.gson.Gson;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      Gson gson = new Gson(); \n      int&#91;] marks = {100,90,85}; \n      String&#91;] names = {\"Ram\",\"Shyam\",\"Mohan\"}; \n      \n      \/\/Serialization \n      System.out.print(\"{\"); \n      System.out.print(\"marks:\" + gson.toJson(marks) + \",\");       \n      System.out.print(\"names:\" + gson.toJson(names));       \n      System.out.println(\"}\");  \n      \n      \/\/De-serialization \n      marks = gson.fromJson(\"&#91;100,90,85]\", int&#91;].class); \n      names = gson.fromJson(\"&#91;\\\"Ram\\\",\\\"Shyam\\\",\\\"Mohan\\\"]\", String&#91;].class);\n      System.out.println(\"marks:\" + Arrays.toString(marks)); \n      System.out.println(\"names:\" + Arrays.toString(names));     \n   }      \n} <\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java \n<\/code><\/pre>\n\n\n\n<p>Now run the GsonTester to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester \n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{marks:&#91;100,90,85],names:&#91;\"Ram\",\"Shyam\",\"Mohan\"]} \nmarks:&#91;100, 90, 85] \nnames:&#91;Ram, Shyam, Mohan]<\/code><\/pre>\n\n\n\n<h2>Collections Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>List marks = new ArrayList(); \n\/\/Serialization \nSystem.out.println(\"marks:\" + gson.toJson(marks));        \n\n\/\/De-serialization \n\/\/get the type of the collection. \nType listType = new TypeToken&lt;list>(){}.getType(); \n\n\/\/pass the type of collection \nmarks = gson.fromJson(\"&#91;100,90,85]\", listType); \nSystem.out.println(\"marks:\" +marks);&lt;\/list><\/code><\/pre>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let&#8217;s see Collection serialization\/de-serialization in action. Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.lang.reflect.Type; \nimport java.util.ArrayList; \nimport java.util.Collection;  \n\nimport com.google.gson.Gson; \nimport com.google.gson.reflect.TypeToken;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      Gson gson = new Gson(); \n      Collection&lt;Integer> marks = new ArrayList&lt;Integer>();  \n      marks.add(100); \n      marks.add(90); \n      marks.add(85);  \n      \n      \/\/Serialization \n      System.out.print(\"{\"); \n      System.out.print(\"marks:\" + gson.toJson(marks));             \n      System.out.println(\"}\");  \n      \n      \/\/De-serialization \n      Type listType = new TypeToken&lt;Collection&lt;Integer>>(){}.getType(); \n      marks = gson.fromJson(\"&#91;100,90,85]\", listType); \n      System.out.println(\"marks:\" +marks);     \n   }      \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java \n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester \n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{marks:&#91;100,90,85]} \nmarks:&#91;100, 90, 85] <\/code><\/pre>\n\n\n\n<h2>Generics Example<\/h2>\n\n\n\n<p>Gson uses Java reflection API to get the type of the object to which a Json text is to be mapped. But with generics, this information is lost during serialization. To counter this problem, Gson provides a class&nbsp;<strong>com.google.gson.reflect.TypeToken<\/strong>&nbsp;to store the type of the generic object.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let&#8217;s see Generics serialization\/de-serialization in action. Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.lang.reflect.Type; \n\nimport com.google.gson.Gson; \nimport com.google.gson.reflect.TypeToken;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      \/\/ create a shape class of type circle. \n      Shape&lt;Circle> shape = new Shape&lt;Circle>();  \n      \n      \/\/ Create a Circle object \n      Circle circle = new Circle(5.0);  \n      \n      \/\/assign circle to shape \n      shape.setShape(circle);  \n      Gson gson = new Gson(); \n      \n      \/\/ Define a Type shapeType of type circle. \n      Type shapeType = new TypeToken&lt;Shape&lt;Circle>>() {}.getType();  \n      \n      \/\/Serialize the json as ShapeType \n      String jsonString = gson.toJson(shape, shapeType); \n      System.out.println(jsonString);  \n      Shape shape1 = gson.fromJson(jsonString, Shape.class); \n      \n      System.out.println(shape1.get().getClass()); \n      System.out.println(shape1.get().toString()); \n      System.out.println(shape1.getArea());  \n      Shape shape2 = gson.fromJson(jsonString, shapeType); \n      System.out.println(shape2.get().getClass()); \n      System.out.println(shape2.get().toString()); \n      System.out.println(shape2.getArea()); \n   }      \n}  \n\nclass Shape &lt;T> { \n   public T shape;  \n   \n   public void setShape(T shape) { \n      this.shape = shape; \n   }  \n   public T get() { \n      return shape; \n   }  \n   public double getArea() { \n      if(shape instanceof Circle) { \n         return ((Circle) shape).getArea(); \n      } else { \n         return 0.0; \n      } \n   } \n}  \n\nclass Circle { \n   private double radius;  \n   \n   public Circle(double radius){ \n      this.radius = radius; \n   }  \n   public String toString() { \n      return \"Circle\"; \n   }  \n   public double getRadius() { \n      return radius; \n   }  \n   public void setRadius(double radius) { \n      this.radius = radius; \n   }  \n   public double getArea() { \n      return (radius*radius*3.14); \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"shape\":{\"radius\":5.0}} \nclass com.google.gson.internal.LinkedTreeMap \n{radius = 5.0} \n0.0 \nclass Circle \nCircle \n78.5<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will discuss the serialization\/deserialization of arrays, collections, and generics. Array Example Example Let&#8217;s see Array serialization\/de-serialization in action. Create a Java class file named&nbsp;GsonTester&nbsp;in C:\\&gt;GSON_WORKSPACE. File \u2212 GsonTester.java Verify the result Compile the classes using\u00a0javac\u00a0compiler as follows \u2212 Now run the GsonTester to see the result \u2212 Verify the output. Collections [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1440"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1440"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1440\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1440"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1440"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1440"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1441,
        "date": "2020-08-05T17:21:33",
        "date_gmt": "2020-08-05T17:21:33",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=150"
        },
        "modified": "2020-08-05T17:21:33",
        "modified_gmt": "2020-08-05T17:21:33",
        "slug": "serializing-inner",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/serializing-inner\/",
        "title": {
            "rendered": "Serializing Inner"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will explain serialization\/deserialization of classes having inner classes.<\/p>\n\n\n\n<h2>Nested Inner Class example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Student student = new Student(); \nstudent.setRollNo(1); \nStudent.Name name = student.new Name(); \nname.firstName = \"Mahesh\"; \nname.lastName = \"Kumar\"; \n\nstudent.setName(name); \n\/\/serialize inner class object \nString nameString = gson.toJson(name); \nSystem.out.println(nameString); \n\n\/\/deserialize inner class object   \nname = gson.fromJson(nameString,Student.Name.class); \nSystem.out.println(name.getClass()); <\/code><\/pre>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let&#8217;s see an example of serialization\/de-serialization of class with an inner class in action. Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      Student student = new Student();  \n      student.setRollNo(1); \n      Student.Name name = student.new Name(); \n      \n      name.firstName = \"Mahesh\"; \n      name.lastName = \"Kumar\"; \n      student.setName(name); \n      Gson gson = new Gson(); \n      \n      String jsonString = gson.toJson(student); \n      System.out.println(jsonString);  \n      student = gson.fromJson(jsonString, Student.class);  \n      \n      System.out.println(\"Roll No: \"+ student.getRollNo()); \n      System.out.println(\"First Name: \"+ student.getName().firstName); \n      System.out.println(\"Last Name: \"+ student.getName().lastName);  \n      \n      String nameString = gson.toJson(name); \n      System.out.println(nameString);  \n      \n      name = gson.fromJson(nameString,Student.Name.class); \n      System.out.println(name.getClass()); \n      System.out.println(\"First Name: \"+ name.firstName); \n      System.out.println(\"Last Name: \"+ name.lastName); \n   }      \n}  \n\nclass Student { \n   private int rollNo; \n   private Name name;  \n   \n   public int getRollNo() { \n      return rollNo; \n   }\n   \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   }  \n   \n   public Name getName() { \n      return name; \n   } \n   \n   public void setName(Name name) { \n      this.name = name; \n   }\n   \n   class Name { \n      public String firstName; \n      public String lastName; \n   } \n} <\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the GsonTester to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"rollNo\":1,\"name\":{\"firstName\":\"Mahesh\",\"lastName\":\"Kumar\"}} \nRoll No: 1 \nFirst Name: Mahesh \nLast Name: Kumar \n\n{\"firstName\":\"Mahesh\",\"lastName\":\"Kumar\"} \nclass Student$Name \nFirst Name: Mahesh \nLast Name: Kumar<\/code><\/pre>\n\n\n\n<h2>Nested Static Inner Class Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Student student = new Student(); \nstudent.setRollNo(1); \nStudent.Name name = new Student.Name(); \n\nname.firstName = \"Mahesh\"; \nname.lastName = \"Kumar\"; \nstudent.setName(name); \n\n\/\/serialize static inner class object \nString nameString = gson.toJson(name); \nSystem.out.println(nameString); \n\n\/\/deserialize static inner class object   \nname = gson.fromJson(nameString,Student.Name.class); \nSystem.out.println(name.getClass()); <\/code><\/pre>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let&#8217;s see an example of serialization\/de-serialization of class with a static inner class in action. Create a Java class file named GsonTester in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      Student student = new Student();  \n      student.setRollNo(1); \n      Student.Name name = new Student.Name(); \n      \n      name.firstName = \"Mahesh\"; \n      name.lastName = \"Kumar\";  \n      student.setName(name); \n      \n      Gson gson = new Gson(); \n      String jsonString = gson.toJson(student); \n      System.out.println(jsonString);  \n      student = gson.fromJson(jsonString, Student.class);  \n      \n      System.out.println(\"Roll No: \"+ student.getRollNo()); \n      System.out.println(\"First Name: \"+ student.getName().firstName); \n      System.out.println(\"Last Name: \"+ student.getName().lastName);  \n      String nameString = gson.toJson(name); \n      System.out.println(nameString);  \n      \n      name = gson.fromJson(nameString,Student.Name.class); \n      System.out.println(name.getClass()); \n      System.out.println(\"First Name: \"+ name.firstName); \n      System.out.println(\"Last Name: \"+ name.lastName); \n   }      \n}  \n\nclass Student { \n   private int rollNo; \n   private Name name;  \n   \n   public int getRollNo() { \n      return rollNo; \n   }  \n   \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   }  \n   \n   public Name getName() { \n      return name; \n   }  \n   \n   public void setName(Name name) { \n      this.name = name; \n   } \n   \n   static class Name { \n      public String firstName; \n      public String lastName; \n   } \n} <\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java \n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester \n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"rollNo\":1,\"name\":{\"firstName\":\"Mahesh\",\"lastName\":\"Kumar\"}} \nRoll No: 1 \nFirst Name: Mahesh \nLast Name: Kumar \n\n{\"firstName\":\"Mahesh\",\"lastName\":\"Kumar\"} \nclass Student$Name \nFirst Name: Mahesh \nLast Name: Kumar <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will explain serialization\/deserialization of classes having inner classes. Nested Inner Class example Example Let&#8217;s see an example of serialization\/de-serialization of class with an inner class in action. Create a Java class file named&nbsp;GsonTester&nbsp;in C:\\&gt;GSON_WORKSPACE. File \u2212 GsonTester.java Verify the result Compile the classes using\u00a0javac\u00a0compiler as follows \u2212 Now run the GsonTester [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1441"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1441"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1441\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1441"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1441"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1441"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1443,
        "date": "2020-08-05T17:24:32",
        "date_gmt": "2020-08-05T17:24:32",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=158"
        },
        "modified": "2020-08-05T17:24:32",
        "modified_gmt": "2020-08-05T17:24:32",
        "slug": "custom-type-adapters",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/custom-type-adapters\/",
        "title": {
            "rendered": "Custom Type Adapters"
        },
        "content": {
            "rendered": "\n<p>Gson performs the serialization\/deserialization of objects using its inbuilt adapters. It also supports custom adapters. Let\u2019s discuss how you can create a custom adapter and how you can use it.<\/p>\n\n\n\n<h2>Create a Custom Adapter<\/h2>\n\n\n\n<p>Create a custom adapter by extending the\u00a0<strong>TypeAdapter<\/strong>\u00a0class and passing it the type of object targeted. Override the\u00a0<strong>read<\/strong>\u00a0and\u00a0<strong>write<\/strong>\u00a0methods to do perform custom deserialization and serialization respectively.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StudentAdapter extends TypeAdapter&lt;Student> { \n   @Override \n   public Student read(JsonReader reader) throws IOException { \n      ... \n   } \n   \n   @Override \n   public void write(JsonWriter writer, Student student) throws IOException { \n   } \n}<\/code><\/pre>\n\n\n\n<h2>Register the Custom Adapter<\/h2>\n\n\n\n<p>Register the custom adapter using GsonBuilder and create a Gson instance using\u00a0<strong>GsonBuilder<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>GsonBuilder builder = new GsonBuilder(); \nbuilder.registerTypeAdapter(Student.class, new StudentAdapter()); \nGson gson = builder.create(); <\/code><\/pre>\n\n\n\n<h2>Use the Adapter<\/h2>\n\n\n\n<p>Gson will now use the custom adapter to convert Json text to object and vice versa.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>String jsonString = \"{\\\"name\\\":\\\"Mahesh\\\", \\\"rollNo\\\":1}\"; \nStudent student = gson.fromJson(jsonString, Student.class); \nSystem.out.println(student);  \njsonString = gson.toJson(student); \nSystem.out.println(jsonString);<\/code><\/pre>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let&#8217;s see an example of custom type adapter in action. Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 geoscientist.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.IOException;  \n\nimport com.google.gson.Gson; \nimport com.google.gson.GsonBuilder; \nimport com.google.gson.TypeAdapter; \nimport com.google.gson.stream.JsonReader; \nimport com.google.gson.stream.JsonToken; \nimport com.google.gson.stream.JsonWriter;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      GsonBuilder builder = new GsonBuilder(); \n      builder.registerTypeAdapter(Student.class, new StudentAdapter()); \n      builder.setPrettyPrinting(); \n      Gson gson = builder.create();  \n      \n      String jsonString = \"{\\\"name\\\":\\\"Mahesh\\\", \\\"rollNo\\\":1}\";  \n      Student student = gson.fromJson(jsonString, Student.class); \n      System.out.println(student);  \n      \n      jsonString = gson.toJson(student); \n      System.out.println(jsonString);  \n   }      \n}  \n\nclass StudentAdapter extends TypeAdapter&lt;Student> { \n   @Override \n   public Student read(JsonReader reader) throws IOException { \n      Student student = new Student(); \n      reader.beginObject(); \n      String fieldname = null; \n      \n      while (reader.hasNext()) { \n         JsonToken token = reader.peek();            \n         \n         if (token.equals(JsonToken.NAME)) {     \n            \/\/get the current token \n            fieldname = reader.nextName(); \n         } \n         \n         if (\"name\".equals(fieldname)) {       \n            \/\/move to next token \n            token = reader.peek(); \n            student.setName(reader.nextString()); \n         } \n         \n         if(\"rollNo\".equals(fieldname)) { \n            \/\/move to next token \n            token = reader.peek(); \n            student.setRollNo(reader.nextInt()); \n         }               \n      } \n      reader.endObject(); \n      return student; \n   }  \n   \n   @Override \n   public void write(JsonWriter writer, Student student) throws IOException { \n      writer.beginObject(); \n      writer.name(\"name\"); \n      writer.value(student.getName()); \n      writer.name(\"rollNo\"); \n      writer.value(student.getRollNo()); \n      writer.endObject(); \n   } \n}  \n\nclass Student { \n   private int rollNo; \n   private String name;  \n   \n   public int getRollNo() { \n      return rollNo; \n   } \n   \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   }  \n   \n   public String getName() { \n      return name; \n   }  \n   \n   public void setName(String name) { \n      this.name = name; \n   }   \n   \n   public String toString() { \n      return \"Student&#91; name = \"+name+\", roll no: \"+rollNo+ \"]\"; \n   } \n} <\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Student&#91; name = Mahesh, roll no: 1] \n{ \n   \"name\": \"Mahesh\", \n   \"rollNo\": 1 \n} <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Gson performs the serialization\/deserialization of objects using its inbuilt adapters. It also supports custom adapters. Let\u2019s discuss how you can create a custom adapter and how you can use it. Create a Custom Adapter Create a custom adapter by extending the\u00a0TypeAdapter\u00a0class and passing it the type of object targeted. Override the\u00a0read\u00a0and\u00a0write\u00a0methods to do perform custom [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1443"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1443"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1443\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1443"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1443"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1443"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 159,
        "date": "2020-08-05T17:38:37",
        "date_gmt": "2020-08-05T17:38:37",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=159"
        },
        "modified": "2020-08-05T17:38:37",
        "modified_gmt": "2020-08-05T17:38:37",
        "slug": "null-object-support",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/null-object-support\/",
        "title": {
            "rendered": "Null Object Support"
        },
        "content": {
            "rendered": "\n<p>Gson by default generates optimized Json content ignoring the NULL values. But GsonBuilder provides flags to show NULL values in the Json output using the\u00a0<strong>GsonBuilder.serializeNulls()<\/strong>\u00a0method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>GsonBuilder builder = new GsonBuilder(); \nbuilder.serializeNulls(); \nGson gson = builder.create(); <\/code><\/pre>\n\n\n\n<h2>Example without serializeNulls Call<\/h2>\n\n\n\n<p>Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<h3>File &#8211; GsonTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      Gson gson = new Gson();  \n      \n      Student student = new Student(); \n      student.setRollNo(1);  \n      String jsonString = gson.toJson(student); \n      \n      System.out.println(jsonString);  \n      student = gson.fromJson(jsonString, Student.class); \n      System.out.println(student); \n   }      \n} \n\nclass Student { \n   private int rollNo; \n   private String name;  \n   \n   public int getRollNo() { \n      return rollNo; \n   }  \n   \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   } \n   \n   public String getName() { \n      return name; \n   }  \n   \n   public void setName(String name) { \n      this.name = name; \n   } \n   \n   public String toString() { \n      return \"Student&#91; name = \"+name+\", roll no: \"+rollNo+ \"]\"; \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the GsonTester to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"rollNo\": 1} \nStudent&#91; name = null, roll no: 1] <\/code><\/pre>\n\n\n\n<h2>Example with serializeNulls call<\/h2>\n\n\n\n<p>Create a Java class file named GsonTester in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<h3>File &#8211; GsonTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson; \nimport com.google.gson.GsonBuilder;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      GsonBuilder builder = new GsonBuilder(); \n      builder.serializeNulls(); \n      builder.setPrettyPrinting(); \n      Gson gson = builder.create();  \n      \n      Student student = new Student(); \n      student.setRollNo(1);  \n      String jsonString = gson.toJson(student); \n      \n      System.out.println(jsonString);  \n      student = gson.fromJson(jsonString, Student.class); \n      System.out.println(student); \n   }      \n} \nclass Student { \n   private int rollNo; \n   private String name;  \n   \n   public int getRollNo() { \n      return rollNo; \n   }  \n   \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   }  \n   \n   public String getName() { \n      return name; \n   }  \n   \n   public void setName(String name) { \n      this.name = name; \n   } \n   \n   public String toString() { \n      return \"Student&#91; name = \"+name+\", roll no: \"+rollNo+ \"]\"; \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{ \n   \"rollNo\": 1, \n   \"name\": null \n} \nStudent&#91; name = null, roll no: 1] <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Gson by default generates optimized Json content ignoring the NULL values. But GsonBuilder provides flags to show NULL values in the Json output using the\u00a0GsonBuilder.serializeNulls()\u00a0method. Example without serializeNulls Call Create a Java class file named&nbsp;GsonTester&nbsp;in C:\\&gt;GSON_WORKSPACE. File &#8211; GsonTester.java Verify the result Compile the classes using\u00a0javac\u00a0compiler as follows \u2212 Now run the GsonTester to see [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/159"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=159"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/159\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=159"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=159"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=159"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 157,
        "date": "2020-08-05T17:52:02",
        "date_gmt": "2020-08-05T17:52:02",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=157"
        },
        "modified": "2020-08-05T17:52:02",
        "modified_gmt": "2020-08-05T17:52:02",
        "slug": "versioning-support",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/versioning-support\/",
        "title": {
            "rendered": "Versioning Support"
        },
        "content": {
            "rendered": "\n<p>Gson provides\u00a0<strong>@Since<\/strong>\u00a0annotation to control the Json serialization\/deserialization of a class based on its various versions. Consider the following class with versioning support. In this class, we&#8217;ve initially defined two variables\u00a0<strong>rollNo<\/strong>\u00a0and\u00a0<strong>name<\/strong>\u00a0and later on, we added\u00a0<strong>verified<\/strong>as a new variable. Using @Since, we&#8217;ve defined\u00a0<strong>rollNo<\/strong>\u00a0and\u00a0<strong>name<\/strong>\u00a0as of version 1.0 and verified to be of version 1.1.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student { \n   @Since(1.0) \n   private int rollNo; \n   \n   @Since(1.0) \n   private String name; \n   \n   @Since(1.1) \n   private boolean verified;  \n}<\/code><\/pre>\n\n\n\n<p>GsonBuilder provides the\u00a0<strong>setVersion()<\/strong>\u00a0method to serialize such versioned class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>GsonBuilder builder = new GsonBuilder(); \nbuilder.setVersion(1.0);   \nGson gson = builder.create();<\/code><\/pre>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Let&#8217;s see an example of versioning support in action. Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<h3>File &#8211; GsonTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson; \nimport com.google.gson.GsonBuilder; \nimport com.google.gson.annotations.Since;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      GsonBuilder builder = new GsonBuilder(); \n      builder.setVersion(1.0);   \n      Gson gson = builder.create();\n      \n      Student student = new Student(); \n      student.setRollNo(1); \n      student.setName(\"Mahesh Kumar\"); \n      student.setVerified(true);  \n      \n      String jsonString = gson.toJson(student); \n      System.out.println(jsonString);  \n      \n      gson = new Gson();     \n      jsonString = gson.toJson(student); \n      System.out.println(jsonString); \n   }      \n} \n\nclass Student { \n   @Since(1.0) \n   private int rollNo; \n   \n   @Since(1.0) \n   private String name; \n   \n   @Since(1.1) \n   private boolean verified;   \n   \n   public int getRollNo() { \n      return rollNo; \n   }  \n   \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   } \n   \n   public String getName() { \n      return name; \n   } \n   \n   public void setName(String name) { \n      this.name = name; \n   }\n   \n   public void setVerified(boolean verified) { \n      this.verified = verified; \n   }  \n   \n   public boolean isVerified() { \n      return verified; \n   } \n} <\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the GsonTester to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"rollNo\":1,\"name\":\"Mahesh Kumar\"} \n{\"rollNo\":1,\"name\":\"Mahesh Kumar\",\"verified\":true} <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Gson provides\u00a0@Since\u00a0annotation to control the Json serialization\/deserialization of a class based on its various versions. Consider the following class with versioning support. In this class, we&#8217;ve initially defined two variables\u00a0rollNo\u00a0and\u00a0name\u00a0and later on, we added\u00a0verifiedas a new variable. Using @Since, we&#8217;ve defined\u00a0rollNo\u00a0and\u00a0name\u00a0as of version 1.0 and verified to be of version 1.1. GsonBuilder provides the\u00a0setVersion()\u00a0method to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/157"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=157"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/157\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=157"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=157"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=157"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1442,
        "date": "2020-08-05T18:03:39",
        "date_gmt": "2020-08-05T18:03:39",
        "guid": {
            "rendered": "http:\/\/androiddev.foobrdigital.com\/?p=156"
        },
        "modified": "2020-08-05T18:03:39",
        "modified_gmt": "2020-08-05T18:03:39",
        "slug": "excluding-fields",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/excluding-fields\/",
        "title": {
            "rendered": "Excluding fields"
        },
        "content": {
            "rendered": "\n<p>By default, GSON excludes transient and static fields from the serialization\/deserialization process. Let\u2019s take a look at the following example.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson; \nimport com.google.gson.GsonBuilder;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      GsonBuilder builder = new GsonBuilder();     \n      Gson gson = builder.create();  \n      \n      Student student = new Student(); \n      student.setRollNo(1); \n      student.setName(\"Mahesh Kumar\"); \n      student.setVerified(true); \n      student.setId(1); \n      student.className = \"VI\";  \n      \n      String jsonString = gson.toJson(student); \n      System.out.println(jsonString);    \n   }      \n} \n\nclass Student { \n   private int rollNo; \n   private String name; \n   private boolean verified;  \n   private transient int id; \n   public static String className;  \n   \n   public int getRollNo() {\n      return rollNo; \n   }  \n   \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   } \n   \n   public String getName() { \n      return name; \n   } \n   \n   public void setName(String name) { \n      this.name = name; \n   }  \n   \n   public void setVerified(boolean verified) { \n      this.verified = verified; \n   }  \n   \n   public boolean isVerified() { \n      return verified; \n   }  \n   \n   public int getId() { \n      return id; \n   } \n   \n   public void setId(int id) { \n      this.id = id; \n   } \n}   <\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java \n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\geoscientist>java GsonTester \n<\/code><\/pre>\n\n\n\n<p>Verify the output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"rollNo\":1,\"name\":\"Mahesh Kumar\",\"verified\":true}\n<\/code><\/pre>\n\n\n\n<h2>Using excludeFieldsWithModifiers<\/h2>\n\n\n\n<p>GsonBuilder provides control over excluding fields with particular modifier using excludeFieldsWithModifiers() method from serialization\/deserialization process. See the following example.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Create a Java class file named GsonTester in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.lang.reflect.Modifier; \n\nimport com.google.gson.Gson; \nimport com.google.gson.GsonBuilder;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      GsonBuilder builder = new GsonBuilder(); \n      builder.excludeFieldsWithModifiers(Modifier.TRANSIENT);    \n      Gson gson = builder.create();  \n      \n      Student student = new Student(); \n      student.setRollNo(1); \n      student.setName(\"Mahesh Kumar\"); \n      student.setVerified(true); \n      student.setId(1); \n      student.className = \"VI\";  \n      \n      String jsonString = gson.toJson(student); \n      System.out.println(jsonString);    \n   }      \n} \n\nclass Student { \n   private int rollNo; \n   private String name;\n   private boolean verified;  \n   private transient int id; \n   public static String className;  \n   \n   public int getRollNo() { \n      return rollNo; \n   }  \n   \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   }  \n   \n   public String getName() { \n      return name; \n   }  \n   \n   public void setName(String name) { \n      this.name = name; \n   }  \n   \n   public void setVerified(boolean verified) { \n      this.verified = verified; \n   }  \n   \n   public boolean isVerified() { \n      return verified; \n   } \n   \n   public int getId() { \n      return id; \n   } \n   \n   public void setId(int id) { \n      this.id = id; \n   } \n} <\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester \n<\/code><\/pre>\n\n\n\n<p>Verify the output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"rollNo\":1,\"name\":\"Mahesh Kumar\",\"verified\":true,\"className\":\"VI\"}\n<\/code><\/pre>\n\n\n\n<h2>Using @Expose Annotation<\/h2>\n\n\n\n<p>Gson provides&nbsp;<strong>@Expose<\/strong>&nbsp;annotation to control the Json serialization\/deserialization of a class based on its scope. Consider the following class with a variable having&nbsp;<strong>@Expose<\/strong>support. In this class,&nbsp;<strong>name<\/strong>&nbsp;and&nbsp;<strong>rollno<\/strong>&nbsp;variables are to be exposed for serialization. Then we&#8217;ve used the&nbsp;<strong>GsonBuilder.excludeFieldsWithoutExposeAnnotation()<\/strong>&nbsp;method to indicate that only exposed variables are to be serialized\/deserialized. See the following example.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Create a Java class file named&nbsp;<strong>GsonTester<\/strong>&nbsp;in C:\\&gt;GSON_WORKSPACE.<\/p>\n\n\n\n<p><strong><em>File \u2212 GsonTester.java<\/em><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import com.google.gson.Gson; \nimport com.google.gson.GsonBuilder; \nimport com.google.gson.annotations.Expose;  \n\npublic class GsonTester { \n   public static void main(String args&#91;]) { \n   \n      GsonBuilder builder = new GsonBuilder();     \n      builder.excludeFieldsWithoutExposeAnnotation(); \n      Gson gson = builder.create();  \n      \n      Student student = new Student(); \n      student.setRollNo(1); \n      student.setName(\"Mahesh Kumar\"); \n      student.setVerified(true); \n      student.setId(1); \n      student.className = \"VI\"; \n      \n      String jsonString = gson.toJson(student); \n      System.out.println(jsonString);    \n   }      \n} \nclass Student { \n   @Expose \n   private int rollNo; \n   \n   @Expose \n   private String name; \n   private boolean verified;  \n   private int id; \n   public static String className;  \n   \n   public int getRollNo() { \n      return rollNo; \n   }  \n   public void setRollNo(int rollNo) { \n      this.rollNo = rollNo; \n   }  \n   public String getName() { \n      return name; \n   }  \n   public void setName(String name) { \n      this.name = name; \n   }  \n   public void setVerified(boolean verified) { \n      this.verified = verified; \n   }  \n   public boolean isVerified() { \n      return verified; \n   }  \n   public int getId() { \n      return id; \n   }  \n   public void setId(int id) { \n      this.id = id; \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Verify the result<\/h3>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>javac GsonTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the\u00a0<strong>GsonTester<\/strong>\u00a0to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\GSON_WORKSPACE>java GsonTester \n<\/code><\/pre>\n\n\n\n<p>Verify the output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"rollNo\":1,\"name\":\"Mahesh Kumar\"} <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>By default, GSON excludes transient and static fields from the serialization\/deserialization process. Let\u2019s take a look at the following example. Example Create a Java class file named&nbsp;GsonTester&nbsp;in C:\\&gt;GSON_WORKSPACE. File \u2212 GsonTester.java Verify the result Compile the classes using\u00a0javac\u00a0compiler as follows \u2212 Now run the\u00a0GsonTester\u00a0to see the result \u2212 Verify the output Using excludeFieldsWithModifiers GsonBuilder provides [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            50
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1442"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1442"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1442\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1442"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1442"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1442"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]