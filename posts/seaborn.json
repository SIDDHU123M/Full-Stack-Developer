[{"id":4989,"date":"2021-03-11T05:54:19","date_gmt":"2021-03-11T05:54:19","guid":{"rendered":"https://python3.foobrdigital.com/?p=4989"},"modified":"2021-03-11T05:54:19","modified_gmt":"2021-03-11T05:54:19","slug":"introduction-17","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-17/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>In the world of Analytics, the best way to get insights is by visualizing the data. Data can be visualized by representing it as plots which is easy to understand, explore and grasp. Such data helps in drawing the attention of key elements.</p>\n\n\n\n<p>To analyse a set of data using Python, we make use of Matplotlib, a widely implemented 2D plotting library. Likewise, Seaborn is a visualization library in Python. It is built on top of Matplotlib.</p>\n\n\n\n<h2>Seaborn Vs Matplotlib</h2>\n\n\n\n<p>It is summarized that if Matplotlib “tries to make easy things easy and hard things possible”, Seaborn tries to make a well-defined set of hard things easy too.”</p>\n\n\n\n<p>Seaborn helps resolve the two major problems faced by Matplotlib; the problems are −</p>\n\n\n\n<ul><li>Default Matplotlib parameters</li><li>Working with data frames</li></ul>\n\n\n\n<p>As Seaborn compliments and extends Matplotlib, the learning curve is quite gradual. If you know Matplotlib, you are already half way through Seaborn.</p>\n\n\n\n<h3>Important Features of Seaborn</h3>\n\n\n\n<p>Seaborn is built on top of Python’s core visualization library Matplotlib. It is meant to serve as a complement, and not a replacement. However, Seaborn comes with some very important features. Let us see a few of them here. The features help in −</p>\n\n\n\n<ul><li>Built in themes for styling matplotlib graphics</li><li>Visualizing univariate and bivariate data</li><li>Fitting in and visualizing linear regression models</li><li>Plotting statistical time series data</li><li>Seaborn works well with NumPy and Pandas data structures</li><li>It comes with built in themes for styling Matplotlib graphics</li></ul>\n\n\n\n<p>In most cases, you will still use Matplotlib for simple plotting. The knowledge of Matplotlib is recommended to tweak Seaborn’s default plots.</p>\n","protected":false},"excerpt":{"rendered":"<p>In the world of Analytics, the best way to get insights is by visualizing the data. Data can be visualized by representing it as plots which is easy to understand, explore and grasp. Such data helps in drawing the attention of key elements. To analyse a set of data using Python, we make use of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4989"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4989"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4989/revisions"}],"predecessor-version":[{"id":4990,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4989/revisions/4990"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4989"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4989"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4989"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4991,"date":"2021-03-11T05:57:04","date_gmt":"2021-03-11T05:57:04","guid":{"rendered":"https://python3.foobrdigital.com/?p=4991"},"modified":"2021-03-11T05:57:04","modified_gmt":"2021-03-11T05:57:04","slug":"environment-setup-8","status":"publish","type":"post","link":"https://python3.foobrdigital.com/environment-setup-8/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>In this chapter, we will discuss the environment setup for Seaborn. Let us begin with the installation and understand how to get started as we move ahead.</p>\n\n\n\n<h2>Installing Seaborn and getting started</h2>\n\n\n\n<p>In this section, we will understand the steps involved in the installation of Seaborn.</p>\n\n\n\n<h3>Using Pip Installer</h3>\n\n\n\n<p>To install the latest release of Seaborn, you can use pip −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install seaborn\n</code></pre>\n\n\n\n<h3>For Windows, Linux &amp; Mac using Anaconda</h3>\n\n\n\n<p>Anaconda (from https://www.anaconda.com/ is a free Python distribution for SciPy stack. It is also available for Linux and Mac.</p>\n\n\n\n<p>It is also possible to install the released version using conda −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>conda install seaborn\n</code></pre>\n\n\n\n<h3>Dependencies</h3>\n\n\n\n<p>Consider the following dependencies of Seaborn −</p>\n\n\n\n<ul><li>Python 2.7 or 3.4+</li><li>numpy</li><li>scipy</li><li>pandas</li><li>matplotlib</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss the environment setup for Seaborn. Let us begin with the installation and understand how to get started as we move ahead. Installing Seaborn and getting started In this section, we will understand the steps involved in the installation of Seaborn. Using Pip Installer To install the latest release of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4991"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4991"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4991/revisions"}],"predecessor-version":[{"id":4992,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4991/revisions/4992"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4991"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4991"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4991"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4993,"date":"2021-03-11T05:59:38","date_gmt":"2021-03-11T05:59:38","guid":{"rendered":"https://python3.foobrdigital.com/?p=4993"},"modified":"2021-03-11T07:04:37","modified_gmt":"2021-03-11T07:04:37","slug":"4993-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/4993-2/","title":{"rendered":"Importing Datasets and Libraries"},"content":{"rendered":"\n<p>In this chapter, we will discuss how to import Datasets and Libraries. Let us begin by understanding how to import libraries.</p>\n\n\n\n<h2>Importing Libraries</h2>\n\n\n\n<p>Let us start by importing Pandas, which is a great library for managing relational (table-format) datasets. Seaborn comes handy when dealing with DataFrames, which is most widely used data structure for data analysis.</p>\n\n\n\n<p>The following command will help you import Pandas −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Pandas for managing datasets\nimport pandas as pd\n</code></pre>\n\n\n\n<p>Now, let us import the Matplotlib library, which helps us customize our plots.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Matplotlib for additional customization\nfrom matplotlib import pyplot as plt\n</code></pre>\n\n\n\n<p>We will import the Seaborn library with the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Seaborn for plotting and styling\nimport seaborn as sb\n</code></pre>\n\n\n\n<h2>Importing Datasets</h2>\n\n\n\n<p>We have imported the required libraries. In this section, we will understand how to import the required datasets.</p>\n\n\n\n<p>Seaborn comes with a few important datasets in the library. When Seaborn is installed, the datasets download automatically.</p>\n\n\n\n<p>You can use any of these datasets for your learning. With the help of the following function you can load the required dataset</p>\n\n\n\n<pre class=\"wp-block-code\"><code>load_dataset()\n</code></pre>\n\n\n\n<h2>Importing Data as Pandas DataFrame</h2>\n\n\n\n<p>In this section, we will import a dataset. This dataset loads as Pandas DataFrame by default. If there is any function in the Pandas DataFrame, it works on this DataFrame.</p>\n\n\n\n<p>The following line of code will help you import the dataset −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Seaborn for plotting and styling\nimport seaborn as sb\ndf = sb.load_dataset('tips')\nprint df.head()\n</code></pre>\n\n\n\n<p>The above line of code will generate the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   total_bill  tip   sex    smoker day  time   size\n0    16.99    1.01   Female  No    Sun  Dinner  2\n1    10.34    1.66   Male    No    Sun  Dinner  3\n2    21.01    3.50   Male    No    Sun  Dinner  3\n3    23.68    3.31   Male    No    Sun  Dinner  2\n4    24.59    3.61   Female  No    Sun  Dinner  4\n</code></pre>\n\n\n\n<p>To view all the available data sets in the Seaborn library, you can use the following command with the&nbsp;<strong>get_dataset_names()</strong>&nbsp;function as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import seaborn as sb\nprint sb.get_dataset_names()\n</code></pre>\n\n\n\n<p>The above line of code will return the list of datasets available as the following output</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;u'anscombe', u'attention', u'brain_networks', u'car_crashes', u'dots', \nu'exercise', u'flights', u'fmri', u'gammas', u'iris', u'planets', u'tips', \nu'titanic']\n</code></pre>\n\n\n\n<p><strong>DataFrames</strong>&nbsp;store data in the form of rectangular grids by which the data can be overviewed easily. Each row of the rectangular grid contains values of an instance, and each column of the grid is a vector that holds data for a specific variable. This means that rows of a DataFrame do not need to contain, values of the same data type, they can be numeric, character, logical, etc. DataFrames for Python comes with the Pandas library, and they are defined as two-dimensional labeled data structures with potentially different types of columns.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss how to import Datasets and Libraries. Let us begin by understanding how to import libraries. Importing Libraries Let us start by importing Pandas, which is a great library for managing relational (table-format) datasets. Seaborn comes handy when dealing with DataFrames, which is most widely used data structure for data [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4993"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4993"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4993/revisions"}],"predecessor-version":[{"id":5021,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4993/revisions/5021"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4993"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4993"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4993"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4995,"date":"2021-03-11T06:09:25","date_gmt":"2021-03-11T06:09:25","guid":{"rendered":"https://python3.foobrdigital.com/?p=4995"},"modified":"2021-03-11T06:09:25","modified_gmt":"2021-03-11T06:09:25","slug":"figure-aesthetic","status":"publish","type":"post","link":"https://python3.foobrdigital.com/figure-aesthetic/","title":{"rendered":"Figure Aesthetic"},"content":{"rendered":"\n<p>Visualizing data is one step and further making the visualized data more pleasing is another step. Visualization plays a vital role in communicating quantitative insights to an audience to catch their attention</p>\n\n\n\n<p>Aesthetics means a set of principles concerned with nature and appreciation of beauty, especially in art. Visualization is the art of representing data in an effective and easiest possible way.</p>\n\n\n\n<p>Matplotlib library highly supports customization, but knowing what settings to tweak to achieve an attractive and anticipated plot is what one should be aware of to make use of it. Unlike Matplotlib, Seaborn comes packed with customized themes and a high-level interface for customizing and controlling the look of Matplotlib figures.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip = 1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5): \n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nsinplot()\nplt.show()\n</code></pre>\n\n\n\n<p>This is how a plot looks with the defaults Matplotlib −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/matplotlib.jpg\" alt=\"matplotlib\"/></figure>\n\n\n\n<p>To change the same plot to Seaborn defaults, use the&nbsp;<strong>set()</strong>&nbsp;function −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip = 1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5):\n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nimport seaborn as sb\nsb.set()\nsinplot()\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/output.jpg\" alt=\"output\"/></figure>\n\n\n\n<p>The above two figures show the difference in the default Matplotlib and Seaborn plots. The representation of data is same, but the representation style varies in both.</p>\n\n\n\n<p>Basically, Seaborn splits the Matplotlib parameters into two groups−</p>\n\n\n\n<ul><li>Plot styles</li><li>Plot scale</li></ul>\n\n\n\n<h2>Seaborn Figure Styles</h2>\n\n\n\n<p>The interface for manipulating the styles is&nbsp;<strong>set_style()</strong>. Using this function you can set the theme of the plot. As per the latest updated version, below are the five themes available.</p>\n\n\n\n<ul><li>Darkgrid</li><li>Whitegrid</li><li>Dark</li><li>White</li><li>Ticks</li></ul>\n\n\n\n<p>Let us try applying a theme from the above-mentioned list. The default theme of the plot will be&nbsp;<strong>darkgrid</strong>&nbsp;which we have seen in the previous example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip=1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5):\n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nimport seaborn as sb\nsb.set_style(\"whitegrid\")\nsinplot()\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/darkside.jpg\" alt=\"Darkside\"/></figure>\n\n\n\n<p>The difference between the above two plots is the background color</p>\n\n\n\n<h2>Removing Axes Spines</h2>\n\n\n\n<p>In the white and ticks themes, we can remove the top and right axis spines using the&nbsp;<strong>despine()</strong>&nbsp;function.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip=1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5):\n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nimport seaborn as sb\nsb.set_style(\"white\")\nsinplot()\nsb.despine()\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/spines.jpg\" alt=\"Spines\"/></figure>\n\n\n\n<p>In the regular plots, we use left and bottom axes only. Using the&nbsp;<strong>despine()</strong>&nbsp;function, we can avoid the unnecessary right and top axes spines, which is not supported in Matplotlib.</p>\n\n\n\n<h2>Overriding the Elements</h2>\n\n\n\n<p>If you want to customize the Seaborn styles, you can pass a dictionary of parameters to the&nbsp;<strong>set_style()&nbsp;</strong>function. Parameters available are viewed using&nbsp;<strong>axes_style()</strong>&nbsp;function.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import seaborn as sb\nprint sb.axes_style\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>{'axes.axisbelow'     : False,\n'axes.edgecolor'      : 'white',\n'axes.facecolor'      : '#EAEAF2',\n'axes.grid'           : True,\n'axes.labelcolor'     : '.15',\n'axes.linewidth'      : 0.0,\n'figure.facecolor'    : 'white',\n'font.family'         : &#91;u'sans-serif'],\n'font.sans-serif'     : &#91;u'Arial', u'Liberation  \n                        Sans', u'Bitstream Vera Sans', u'sans-serif'],\n'grid.color'          : 'white',\n'grid.linestyle'      : u'-',\n'image.cmap'          : u'Greys',\n'legend.frameon'      : False,\n'legend.numpoints'    : 1,\n'legend.scatterpoints': 1,\n'lines.solid_capstyle': u'round',\n'text.color'          : '.15',\n'xtick.color'         : '.15',\n'xtick.direction'     : u'out',\n'xtick.major.size'    : 0.0,\n'xtick.minor.size'    : 0.0,\n'ytick.color'         : '.15',\n'ytick.direction'     : u'out',\n'ytick.major.size'    : 0.0,\n'ytick.minor.size'    : 0.0}\n</code></pre>\n\n\n\n<p>Altering the values of any of the parameter will alter the plot style.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip=1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5):\n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nimport seaborn as sb\nsb.set_style(\"darkgrid\", {'axes.axisbelow': False})\nsinplot()\nsb.despine()\nplt.show()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/elements.jpg\" alt=\"Elements\"/></figure>\n\n\n\n<h2>Scaling Plot Elements</h2>\n\n\n\n<p>We also have control on the plot elements and can control the scale of plot using the&nbsp;<strong>set_context()</strong>&nbsp;function. We have four preset templates for contexts, based on relative size, the contexts are named as follows</p>\n\n\n\n<ul><li>Paper</li><li>Notebook</li><li>Talk</li><li>Poster</li></ul>\n\n\n\n<p>By default, context is set to notebook; and was used in the plots above.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip = 1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5):\n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nimport seaborn as sb\nsb.set_style(\"darkgrid\", {'axes.axisbelow': False})\nsinplot()\nsb.despine()\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/scaling.jpg\" alt=\"Scaling\"/></figure>\n\n\n\n<p>The output size of the actual plot is bigger in size when compared to the above plots.</p>\n","protected":false},"excerpt":{"rendered":"<p>Visualizing data is one step and further making the visualized data more pleasing is another step. Visualization plays a vital role in communicating quantitative insights to an audience to catch their attention Aesthetics means a set of principles concerned with nature and appreciation of beauty, especially in art. Visualization is the art of representing data [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4995"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4995"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4995/revisions"}],"predecessor-version":[{"id":4996,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4995/revisions/4996"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4995"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4995"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4995"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4997,"date":"2021-03-11T06:12:38","date_gmt":"2021-03-11T06:12:38","guid":{"rendered":"https://python3.foobrdigital.com/?p=4997"},"modified":"2021-03-11T06:12:38","modified_gmt":"2021-03-11T06:12:38","slug":"color-palette","status":"publish","type":"post","link":"https://python3.foobrdigital.com/color-palette/","title":{"rendered":"Color Palette"},"content":{"rendered":"\n<p>Color plays an important role than any other aspect in the visualizations. When used effectively, color adds more value to the plot. A palette means a flat surface on which a painter arranges and mixes paints.</p>\n\n\n\n<h2>Building Color Palette</h2>\n\n\n\n<p>Seaborn provides a function called&nbsp;<strong>color_palette()</strong>, which can be used to give colors to plots and adding more aesthetic value to it.</p>\n\n\n\n<h3>Usage</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>seaborn.color_palette(palette = None, n_colors = None, desat = None)\n</code></pre>\n\n\n\n<h3>Parameter</h3>\n\n\n\n<p>The following table lists down the parameters for building color palette −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Palatte &amp; Description</th></tr><tr><td>1</td><td><strong>n_colors</strong>Number of colors in the palette. If None, the default will depend on how palette is specified. By default the value of&nbsp;<strong>n_colors</strong>&nbsp;is 6 colors.</td></tr><tr><td>2</td><td><strong>desat</strong>Proportion to desaturate each color.</td></tr></tbody></table></figure>\n\n\n\n<h3>Return</h3>\n\n\n\n<p>Return refers to the list of RGB tuples. Following are the readily available Seaborn palettes −</p>\n\n\n\n<ul><li>Deep</li><li>Muted</li><li>Bright</li><li>Pastel</li><li>Dark</li><li>Colorblind</li></ul>\n\n\n\n<p>Besides these, one can also generate new palette</p>\n\n\n\n<p>It is hard to decide which palette should be used for a given data set without knowing the characteristics of data. Being aware of it, we will classify the different ways for using&nbsp;<strong>color_palette()</strong>&nbsp;types −</p>\n\n\n\n<ul><li>qualitative</li><li>sequential</li><li>diverging</li></ul>\n\n\n\n<p>We have another function&nbsp;<strong>seaborn.palplot()</strong>&nbsp;which deals with color palettes. This function plots the color palette as horizontal array. We will know more regarding&nbsp;<strong>seaborn.palplot()</strong>&nbsp;in the coming examples.</p>\n\n\n\n<h2>Qualitative Color Palettes</h2>\n\n\n\n<p>Qualitative or categorical palettes are best suitable to plot the categorical data.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from matplotlib import pyplot as plt\nimport seaborn as sb\ncurrent_palette = sb.color_palette()\nsb.palplot(current_palette)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/colour.jpg\" alt=\"Colour\"/></figure>\n\n\n\n<p>We haven’t passed any parameters in&nbsp;<strong>color_palette();</strong>&nbsp;by default, we are seeing 6 colors. You can see the desired number of colors by passing a value to the&nbsp;<strong>n_colors</strong>&nbsp;parameter. Here, the&nbsp;<strong>palplot()</strong>&nbsp;is used to plot the array of colors horizontally.</p>\n\n\n\n<h2>Sequential Color Palettes</h2>\n\n\n\n<p>Sequential plots are suitable to express the distribution of data ranging from relative lower values to higher values within a range.</p>\n\n\n\n<p>Appending an additional character ‘s’ to the color passed to the color parameter will plot the Sequential plot.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from matplotlib import pyplot as plt\nimport seaborn as sb\ncurrent_palette = sb.color_palette()\nsb.palplot(sb.color_palette(\"Greens\"))\nplt.show()\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/grid.jpg\" alt=\"grid\"/></figure>\n\n\n\n<p><strong>Note −</strong>We need to append ‘s’ to the parameter like ‘Greens’ in the above example.</p>\n\n\n\n<h2>Diverging Color Palette</h2>\n\n\n\n<p>Diverging palettes use two different colors. Each color represents variation in the value ranging from a common point in either direction.</p>\n\n\n\n<p>Assume plotting the data ranging from -1 to 1. The values from -1 to 0 takes one color and 0 to +1 takes another color.</p>\n\n\n\n<p>By default, the values are centered from zero. You can control it with parameter center by passing a value.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from matplotlib import pyplot as plt\nimport seaborn as sb\ncurrent_palette = sb.color_palette()\nsb.palplot(sb.color_palette(\"BrBG\", 7))\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/brown.jpg\" alt=\"brown\"/></figure>\n\n\n\n<h2>Setting the Default Color Palette</h2>\n\n\n\n<p>The functions&nbsp;<strong>color_palette()</strong>&nbsp;has a companion called&nbsp;<strong>set_palette()</strong>&nbsp;The relationship between them is similar to the pairs covered in the aesthetics chapter. The arguments are same for both&nbsp;<strong>set_palette()</strong>&nbsp;and&nbsp;<strong>color_palette(),</strong>&nbsp;but the default Matplotlib parameters are changed so that the palette is used for all plots.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip = 1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5):\n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\n\nimport seaborn as sb\nsb.set_style(\"white\")\nsb.set_palette(\"husl\")\nsinplot()\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/pallete.jpg\" alt=\"graph\"/></figure>\n\n\n\n<h2>Plotting Univariate Distribution</h2>\n\n\n\n<p>Distribution of data is the foremost thing that we need to understand while analysing the data. Here, we will see how seaborn helps us in understanding the univariate distribution of the data.</p>\n\n\n\n<p>Function&nbsp;<strong>distplot()</strong>&nbsp;provides the most convenient way to take a quick look at univariate distribution. This function will plot a histogram that fits the kernel density estimation of the data.</p>\n\n\n\n<h3>Usage</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>seaborn.distplot()\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>The following table lists down the parameters and their description −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>data</strong>Series, 1d array or a list</td></tr><tr><td>2</td><td><strong>bins</strong>Specification of hist bins</td></tr><tr><td>3</td><td><strong>hist</strong>bool</td></tr><tr><td>4</td><td><strong>kde</strong>bool</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Color plays an important role than any other aspect in the visualizations. When used effectively, color adds more value to the plot. A palette means a flat surface on which a painter arranges and mixes paints. Building Color Palette Seaborn provides a function called&nbsp;color_palette(), which can be used to give colors to plots and adding [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4997"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4997"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4997/revisions"}],"predecessor-version":[{"id":4998,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4997/revisions/4998"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4997"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4997"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4997"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4999,"date":"2021-03-11T06:14:44","date_gmt":"2021-03-11T06:14:44","guid":{"rendered":"https://python3.foobrdigital.com/?p=4999"},"modified":"2021-03-11T06:14:44","modified_gmt":"2021-03-11T06:14:44","slug":"histogram","status":"publish","type":"post","link":"https://python3.foobrdigital.com/histogram/","title":{"rendered":"Histogram"},"content":{"rendered":"\n<p>Histograms represent the data distribution by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin.</p>\n\n\n\n<p>Seaborn comes with some datasets and we have used few datasets in our previous chapters. We have learnt how to load the dataset and how to lookup the list of available datasets.</p>\n\n\n\n<p>Seaborn comes with some datasets and we have used few datasets in our previous chapters. We have learnt how to load the dataset and how to lookup the list of available datasets.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.distplot(df&#91;'petal_length'],kde = False)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/histogram.jpg\" alt=\"Histogram\"/></figure>\n\n\n\n<p>Here, <strong>KDE</strong> flag is set to False. As a result, the representation of the kernel estimation plot will be removed and the only histogram is plotted.</p>\n","protected":false},"excerpt":{"rendered":"<p>Histograms represent the data distribution by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin. Seaborn comes with some datasets and we have used few datasets in our previous chapters. We have learnt how to load the dataset and how to [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4999"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4999"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4999/revisions"}],"predecessor-version":[{"id":5000,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4999/revisions/5000"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4999"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4999"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4999"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5001,"date":"2021-03-11T06:17:33","date_gmt":"2021-03-11T06:17:33","guid":{"rendered":"https://python3.foobrdigital.com/?p=5001"},"modified":"2021-03-11T06:17:33","modified_gmt":"2021-03-11T06:17:33","slug":"kernel-density-estimates","status":"publish","type":"post","link":"https://python3.foobrdigital.com/kernel-density-estimates/","title":{"rendered":"Kernel Density Estimates"},"content":{"rendered":"\n<p>Kernel Density Estimation (KDE) is a way to estimate the probability density function of a continuous random variable. It is used for non-parametric analysis.</p>\n\n\n\n<p>Setting the&nbsp;<strong>hist</strong>&nbsp;flag to False in&nbsp;<strong>distplot</strong>&nbsp;will yield the kernel density estimation plot.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.distplot(df&#91;'petal_length'],hist=False)\nplt.show()\n</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/curve.jpg\" alt=\"graph\"/></figure>\n\n\n\n<h2>Fitting Parametric Distribution</h2>\n\n\n\n<p><strong>distplot()</strong>&nbsp;is used to visualize the parametric distribution of a dataset.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.distplot(df&#91;'petal_length'])\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/bar.jpg\" alt=\"histogram\"/></figure>\n\n\n\n<h2>Plotting Bivariate Distribution</h2>\n\n\n\n<p>Bivariate Distribution is used to determine the relation between two variables. This mainly deals with relationship between two variables and how one variable is behaving with respect to the other.</p>\n\n\n\n<p>The best way to analyze Bivariate Distribution in seaborn is by using the&nbsp;<strong>jointplot()</strong>&nbsp;function.</p>\n\n\n\n<p>Jointplot creates a multi-panel figure that projects the bivariate relationship between two variables and also the univariate distribution of each variable on separate axes.</p>\n\n\n\n<h2>Scatter Plot</h2>\n\n\n\n<p>Scatter plot is the most convenient way to visualize the distribution where each observation is represented in two-dimensional plot via x and y axis.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.jointplot(x = 'petal_length',y = 'petal_width',data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/clubed.jpg\" alt=\"bar and histogram\"/></figure>\n\n\n\n<p>The above figure shows the relationship between the&nbsp;<strong>petal_length</strong>&nbsp;and&nbsp;<strong>petal_width</strong>&nbsp;in the Iris data. A trend in the plot says that positive correlation exists between the variables under study.</p>\n\n\n\n<h3>Hexbin Plot</h3>\n\n\n\n<p>Hexagonal binning is used in bivariate data analysis when the data is sparse in density i.e., when the data is very scattered and difficult to analyze through scatterplots.</p>\n\n\n\n<p>An addition parameter called ‘kind’ and value ‘hex’ plots the hexbin plot.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.jointplot(x = 'petal_length',y = 'petal_width',data = df,kind = 'hex')\nplt.show()\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/hexagon.jpg\" alt=\"HExagon and bar\"/></figure>\n\n\n\n<h2>Kernel Density Estimation</h2>\n\n\n\n<p>Kernel density estimation is a non-parametric way to estimate the distribution of a variable. In seaborn, we can plot a kde using&nbsp;<strong>jointplot().</strong></p>\n\n\n\n<p>Pass value ‘kde’ to the parameter kind to plot kernel plot.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.jointplot(x = 'petal_length',y = 'petal_width',data = df,kind = 'hex')\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/xray.jpg\" alt=\"xray\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Kernel Density Estimation (KDE) is a way to estimate the probability density function of a continuous random variable. It is used for non-parametric analysis. Setting the&nbsp;hist&nbsp;flag to False in&nbsp;distplot&nbsp;will yield the kernel density estimation plot. Example Output Fitting Parametric Distribution distplot()&nbsp;is used to visualize the parametric distribution of a dataset. Example Output Plotting Bivariate Distribution [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5001"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5001"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5001/revisions"}],"predecessor-version":[{"id":5002,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5001/revisions/5002"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5001"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5001"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5001"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5003,"date":"2021-03-11T06:20:34","date_gmt":"2021-03-11T06:20:34","guid":{"rendered":"https://python3.foobrdigital.com/?p=5003"},"modified":"2021-03-11T06:20:34","modified_gmt":"2021-03-11T06:20:34","slug":"visualizing-pairwise-relationship","status":"publish","type":"post","link":"https://python3.foobrdigital.com/visualizing-pairwise-relationship/","title":{"rendered":"Visualizing Pairwise Relationship"},"content":{"rendered":"\n<p>Datasets under real-time study contain many variables. In such cases, the relation between each and every variable should be analyzed. Plotting Bivariate Distribution for (n,2) combinations will be a very complex and time taking process.</p>\n\n\n\n<p>To plot multiple pairwise bivariate distributions in a dataset, you can use the&nbsp;<strong>pairplot()</strong>&nbsp;function. This shows the relationship for (n,2) combination of variable in a DataFrame as a matrix of plots and the diagonal plots are the univariate plots.</p>\n\n\n\n<h2>Axes</h2>\n\n\n\n<p>In this section, we will learn what are Axes, their usage, parameters, and so on.</p>\n\n\n\n<h3>Usage</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>seaborn.pairplot(data,…)</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>Following table lists down the parameters for Axes −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>data</strong>Dataframe</td></tr><tr><td>2</td><td><strong>hue</strong>Variable in data to map plot aspects to different colors.</td></tr><tr><td>3</td><td><strong>palette</strong>Set of colors for mapping the hue variable</td></tr><tr><td>4</td><td><strong>kind</strong>Kind of plot for the non-identity relationships. {‘scatter’, ‘reg’}</td></tr><tr><td>5</td><td><strong>diag_kind</strong>Kind of plot for the diagonal subplots. {‘hist’, ‘kde’}</td></tr></tbody></table></figure>\n\n\n\n<p>Except data, all other parameters are optional. There are few other parameters which&nbsp;<strong>pairplot</strong>&nbsp;can accept. The above mentioned are often used params.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.set_style(\"ticks\")\nsb.pairplot(df,hue = 'species',diag_kind = \"kde\",kind = \"scatter\",palette = \"husl\")\nplt.show()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/multi.jpg\" alt=\"multigraphs\"/></figure>\n\n\n\n<p>We can observe the variations in each plot. The plots are in matrix format where the row name represents x axis and column name represents the y axis.</p>\n\n\n\n<p>The diagonal plots are kernel density plots where the other plots scatter plots as mentioned.</p>\n","protected":false},"excerpt":{"rendered":"<p>Datasets under real-time study contain many variables. In such cases, the relation between each and every variable should be analyzed. Plotting Bivariate Distribution for (n,2) combinations will be a very complex and time taking process. To plot multiple pairwise bivariate distributions in a dataset, you can use the&nbsp;pairplot()&nbsp;function. This shows the relationship for (n,2) combination [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5003"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5003"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5003/revisions"}],"predecessor-version":[{"id":5004,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5003/revisions/5004"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5003"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5003"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5003"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5005,"date":"2021-03-11T06:22:42","date_gmt":"2021-03-11T06:22:42","guid":{"rendered":"https://python3.foobrdigital.com/?p=5005"},"modified":"2021-03-11T06:22:42","modified_gmt":"2021-03-11T06:22:42","slug":"plotting-categorical-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/plotting-categorical-data/","title":{"rendered":"Plotting Categorical Data"},"content":{"rendered":"\n<p>In our previous chapters we learnt about scatter plots, hexbin plots and kde plots which are used to analyze the continuous variables under study. These plots are not suitable when the variable under study is categorical.</p>\n\n\n\n<p>When one or both the variables under study are categorical, we use plots like striplot(), swarmplot(), etc,. Seaborn provides interface to do so.</p>\n\n\n\n<h2>Categorical Scatter Plots</h2>\n\n\n\n<p>In this section, we will learn about categorical scatter plots.</p>\n\n\n\n<h3>stripplot()</h3>\n\n\n\n<p>stripplot() is used when one of the variable under study is categorical. It represents the data in sorted order along any one of the axis.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.stripplot(x = \"species\", y = \"petal_length\", data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/box.jpg\" alt=\"Box\"/></figure>\n\n\n\n<p>In the above plot, we can clearly see the difference of&nbsp;<strong>petal_length</strong>&nbsp;in each species. But, the major problem with the above scatter plot is that the points on the scatter plot are overlapped. We use the ‘Jitter’ parameter to handle this kind of scenario.</p>\n\n\n\n<p>Jitter adds some random noise to the data. This parameter will adjust the positions along the categorical axis.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.stripplot(x = \"species\", y = \"petal_length\", data = df, jitter = Ture)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/dots.jpg\" alt=\"Dots\"/></figure>\n\n\n\n<p>Now, the distribution of points can be seen easily.</p>\n\n\n\n<h3>Swarmplot()</h3>\n\n\n\n<p>Another option which can be used as an alternate to ‘Jitter’ is function&nbsp;<strong>swarmplot()</strong>. This function positions each point of scatter plot on the categorical axis and thereby avoids overlapping points −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.swarmplot(x = \"species\", y = \"petal_length\", data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/shades.jpg\" alt=\"Shades\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In our previous chapters we learnt about scatter plots, hexbin plots and kde plots which are used to analyze the continuous variables under study. These plots are not suitable when the variable under study is categorical. When one or both the variables under study are categorical, we use plots like striplot(), swarmplot(), etc,. Seaborn provides [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5005"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5005"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5005/revisions"}],"predecessor-version":[{"id":5006,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5005/revisions/5006"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5005"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5005"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5005"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5007,"date":"2021-03-11T06:25:14","date_gmt":"2021-03-11T06:25:14","guid":{"rendered":"https://python3.foobrdigital.com/?p=5007"},"modified":"2021-03-11T06:25:14","modified_gmt":"2021-03-11T06:25:14","slug":"distribution-of-observations","status":"publish","type":"post","link":"https://python3.foobrdigital.com/distribution-of-observations/","title":{"rendered":"Distribution of Observations"},"content":{"rendered":"\n<p>In categorical scatter plots which we dealt in the previous chapter, the approach becomes limited in the information it can provide about the distribution of values within each category. Now, going further, let us see what can facilitate us with performing comparison with in categories.</p>\n\n\n\n<h2>Box Plots</h2>\n\n\n\n<p><strong>Boxplot</strong>&nbsp;is a convenient way to visualize the distribution of data through their quartiles.</p>\n\n\n\n<p>Box plots usually have vertical lines extending from the boxes which are termed as whiskers. These whiskers indicate variability outside the upper and lower quartiles, hence Box Plots are also termed as&nbsp;<strong>box-and-whisker</strong>&nbsp;plot and&nbsp;<strong>box-and-whisker&nbsp;</strong>diagram. Any Outliers in the data are plotted as individual points.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.swarmplot(x = \"species\", y = \"petal_length\", data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/compressed.jpg\" alt=\"Compressed\"/></figure>\n\n\n\n<p>The dots on the plot indicates the outlier.</p>\n\n\n\n<h2>Violin Plots</h2>\n\n\n\n<p>Violin Plots are a combination of the box plot with the kernel density estimates. So, these plots are easier to analyze and understand the distribution of the data.</p>\n\n\n\n<p>Let us use tips dataset called to learn more into violin plots. This dataset contains the information related to the tips given by the customers in a restaurant.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\nsb.violinplot(x = \"day\", y = \"total_bill\", data=df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/stages.jpg\" alt=\"Stages \"/></figure>\n\n\n\n<p>The quartile and whisker values from the boxplot are shown inside the violin. As the violin plot uses KDE, the wider portion of violin indicates the higher density and narrow region represents relatively lower density. The Inter-Quartile range in boxplot and higher density portion in kde fall in the same region of each category of violin plot.</p>\n\n\n\n<p>The above plot shows the distribution of total_bill on four days of the week. But, in addition to that, if we want to see how the distribution behaves with respect to sex, lets explore it in below example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\nsb.violinplot(x = \"day\", y = \"total_bill\",hue = 'sex', data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/differnce.jpg\" alt=\"Difference\"/></figure>\n\n\n\n<p>Now we can clearly see the spending behavior between male and female. We can easily say that, men make more bill than women by looking at the plot.</p>\n\n\n\n<p>And, if the hue variable has only two classes, we can beautify the plot by splitting each violin into two instead of two violins on a given day. Either parts of the violin refer to each class in the hue variable.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\nsb.violinplot(x = \"day\", y=\"total_bill\",hue = 'sex', data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/multistages.jpg\" alt=\"Multistages\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In categorical scatter plots which we dealt in the previous chapter, the approach becomes limited in the information it can provide about the distribution of values within each category. Now, going further, let us see what can facilitate us with performing comparison with in categories. Box Plots Boxplot&nbsp;is a convenient way to visualize the distribution [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5007"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5007"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5007/revisions"}],"predecessor-version":[{"id":5008,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5007/revisions/5008"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5007"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5007"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5007"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5009,"date":"2021-03-11T06:27:17","date_gmt":"2021-03-11T06:27:17","guid":{"rendered":"https://python3.foobrdigital.com/?p=5009"},"modified":"2021-03-11T06:27:17","modified_gmt":"2021-03-11T06:27:17","slug":"statistical-estimation","status":"publish","type":"post","link":"https://python3.foobrdigital.com/statistical-estimation/","title":{"rendered":"Statistical Estimation"},"content":{"rendered":"\n<p>In most of the situations, we deal with estimations of the whole distribution of the data. But when it comes to central tendency estimation, we need a specific way to summarize the distribution. Mean and median are the very often used techniques to estimate the central tendency of the distribution.</p>\n\n\n\n<p>In all the plots that we learnt in the above section, we made the visualization of the whole distribution. Now, let us discuss regarding the plots with which we can estimate the central tendency of the distribution.</p>\n\n\n\n<h2>Bar Plot</h2>\n\n\n\n<p>The&nbsp;<strong>barplot()</strong>&nbsp;shows the relation between a categorical variable and a continuous variable. The data is represented in rectangular bars where the length the bar represents the proportion of the data in that category.</p>\n\n\n\n<p>Bar plot represents the estimate of central tendency. Let us use the ‘titanic’ dataset to learn bar plots.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('titanic')\nsb.barplot(x = \"sex\", y = \"survived\", hue = \"class\", data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/barplot.jpg\" alt=\"barplot\"/></figure>\n\n\n\n<p>In the above example, we can see that the average number of survivals of male and female in each class. From the plot we can understand that more number of females survived than males. In both males and females more number of survivals are from first class.</p>\n\n\n\n<p>A special case in barplot is to show the no of observations in each category rather than computing a statistic for a second variable. For this, we use&nbsp;<strong>countplot().</strong></p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('titanic')\nsb.countplot(x = \" class \", data = df, palette = \"Blues\");\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/bargraph.jpg\" alt=\"Bargraph\"/></figure>\n\n\n\n<p>Plot says that, the number of passengers in the third class are higher than first and second class.</p>\n\n\n\n<h2>Point Plots</h2>\n\n\n\n<p>Point plots serve same as bar plots but in a different style. Rather than the full bar, the value of the estimate is represented by the point at a certain height on the other axis.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('titanic')\nsb.pointplot(x = \"sex\", y = \"survived\", hue = \"class\", data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/z.jpg\" alt=\"zSymbol\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In most of the situations, we deal with estimations of the whole distribution of the data. But when it comes to central tendency estimation, we need a specific way to summarize the distribution. Mean and median are the very often used techniques to estimate the central tendency of the distribution. In all the plots that [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5009"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5009"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5009/revisions"}],"predecessor-version":[{"id":5010,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5009/revisions/5010"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5009"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5009"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5009"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5011,"date":"2021-03-11T06:29:46","date_gmt":"2021-03-11T06:29:46","guid":{"rendered":"https://python3.foobrdigital.com/?p=5011"},"modified":"2021-03-11T06:29:46","modified_gmt":"2021-03-11T06:29:46","slug":"plotting-wide-form-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/plotting-wide-form-data/","title":{"rendered":"Plotting Wide Form Data"},"content":{"rendered":"\n<p>It is always preferable to use ‘long-from’ or ‘tidy’ datasets. But at times when we are left with no option rather than to use a ‘wide-form’ dataset, same functions can also be applied to “wide-form” data in a variety of formats, including Pandas Data Frames or two-dimensional NumPy arrays. These objects should be passed directly to the data parameter the x and y variables must be specified as strings</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.boxplot(data = df, orient = \"h\")\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/models.jpg\" alt=\"Models\"/></figure>\n\n\n\n<p>Additionally, these functions accept vectors of Pandas or NumPy objects rather than variables in a DataFrame.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.boxplot(data = df, orient = \"h\")\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/designs.jpg\" alt=\"Designs\"/></figure>\n\n\n\n<p>The major advantage of using Seaborn for many developers in the Python world is because it can take pandas DataFrame object as the parameter.</p>\n","protected":false},"excerpt":{"rendered":"<p>It is always preferable to use ‘long-from’ or ‘tidy’ datasets. But at times when we are left with no option rather than to use a ‘wide-form’ dataset, same functions can also be applied to “wide-form” data in a variety of formats, including Pandas Data Frames or two-dimensional NumPy arrays. These objects should be passed directly [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5011"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5011"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5011/revisions"}],"predecessor-version":[{"id":5012,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5011/revisions/5012"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5011"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5011"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5011"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5013,"date":"2021-03-11T06:32:19","date_gmt":"2021-03-11T06:32:19","guid":{"rendered":"https://python3.foobrdigital.com/?p=5013"},"modified":"2021-03-11T06:32:19","modified_gmt":"2021-03-11T06:32:19","slug":"multi-panel-categorical-plots","status":"publish","type":"post","link":"https://python3.foobrdigital.com/multi-panel-categorical-plots/","title":{"rendered":"Multi Panel Categorical Plots"},"content":{"rendered":"\n<p>Categorical data can we visualized using two plots, you can either use the functions&nbsp;<strong>pointplot()</strong>, or the higher-level function&nbsp;<strong>factorplot()</strong>.</p>\n\n\n\n<h2>Factorplot</h2>\n\n\n\n<p>Factorplot draws a categorical plot on a FacetGrid. Using ‘kind’ parameter we can choose the plot like boxplot, violinplot, barplot and stripplot. FacetGrid uses pointplot by default.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('exercise')\nsb.factorplot(x = \"time\", y = pulse\", hue = \"kind\",data = df);\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/l.jpg\" alt=\"Lshape\"/></figure>\n\n\n\n<p>We can use different plot to visualize the same data using the&nbsp;<strong>kind</strong>&nbsp;parameter.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('exercise')\nsb.factorplot(x = \"time\", y = \"pulse\", hue = \"kind\", kind = 'violin',data = df);\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/sharp.jpg\" alt=\"Sharp\"/></figure>\n\n\n\n<p>In factorplot, the data is plotted on a facet grid.</p>\n\n\n\n<h2>What is Facet Grid?</h2>\n\n\n\n<p><strong>Facet grid&nbsp;</strong>forms a matrix of panels defined by row and column by dividing the variables. Due of panels, a single plot looks like multiple plots. It is very helpful to analyze all combinations in two discrete variables.</p>\n\n\n\n<p>Let us visualize the above the definition with an example</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('exercise')\nsb.factorplot(x = \"time\", y = \"pulse\", hue = \"kind\", kind = 'violin', col = \"diet\", data = df);\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/two_types.jpg\" alt=\"Two Types\"/></figure>\n\n\n\n<p>The advantage of using Facet is, we can input another variable into the plot. The above plot is divided into two plots based on a third variable called ‘diet’ using the ‘col’ parameter.</p>\n\n\n\n<p>We can make many column facets and align them with the rows of the grid −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('titanic')\nsb.factorplot(\"alive\", col = \"deck\", col_wrap = 3,data = df&#91;df.deck.notnull()],kind = \"count\")\nplt.show()\n</code></pre>\n\n\n\n<h3>output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/varioustypes.jpg\" alt=\"various types\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Categorical data can we visualized using two plots, you can either use the functions&nbsp;pointplot(), or the higher-level function&nbsp;factorplot(). Factorplot Factorplot draws a categorical plot on a FacetGrid. Using ‘kind’ parameter we can choose the plot like boxplot, violinplot, barplot and stripplot. FacetGrid uses pointplot by default. Example Output We can use different plot to visualize [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5013"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5013"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5013/revisions"}],"predecessor-version":[{"id":5014,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5013/revisions/5014"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5013"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5013"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5013"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5015,"date":"2021-03-11T06:34:27","date_gmt":"2021-03-11T06:34:27","guid":{"rendered":"https://python3.foobrdigital.com/?p=5015"},"modified":"2021-03-11T06:34:27","modified_gmt":"2021-03-11T06:34:27","slug":"linear-relationships","status":"publish","type":"post","link":"https://python3.foobrdigital.com/linear-relationships/","title":{"rendered":"Linear Relationships"},"content":{"rendered":"\n<p>Most of the times, we use datasets that contain multiple quantitative variables, and the goal of an analysis is often to relate those variables to each other. This can be done through the regression lines.</p>\n\n\n\n<p>While building the regression models, we often check for&nbsp;<strong>multicollinearity,</strong>&nbsp;where we had to see the correlation between all the combinations of continuous variables and will take necessary action to remove multicollinearity if exists. In such cases, the following techniques helps.</p>\n\n\n\n<h2>Functions to Draw Linear Regression Models</h2>\n\n\n\n<p>There are two main functions in Seaborn to visualize a linear relationship determined through regression. These functions are&nbsp;<strong>regplot()</strong>&nbsp;and&nbsp;<strong>lmplot()</strong>.</p>\n\n\n\n<h3>regplot vs lmplot</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>regplot</th><th>lmplot</th></tr><tr><td>accepts the x and y variables in a variety of formats including simple numpy arrays, pandas Series objects, or as references to variables in a pandas DataFrame</td><td>has data as a required parameter and the x and y variables must be specified as strings. This data format is called “long-form” data</td></tr></tbody></table></figure>\n\n\n\n<p>Let us now draw the plots.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Plotting the regplot and then lmplot with the same data in this example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\nsb.regplot(x = \"total_bill\", y = \"tip\", data = df)\nsb.lmplot(x = \"total_bill\", y = \"tip\", data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>You can see the difference in the size between two plots.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/zoomed_magnifier.jpg\" alt=\"Zoomed and Magnifier\"/></figure>\n\n\n\n<p>We can also fit a linear regression when one of the variables takes discrete values</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\nsb.lmplot(x = \"size\", y = \"tip\", data = df)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/rugged.jpg\" alt=\"Rugged\"/></figure>\n\n\n\n<h2>Fitting Different Kinds of Models</h2>\n\n\n\n<p>The simple linear regression model used above is very simple to fit, but in most of the cases, the data is non-linear and the above methods cannot generalize the regression line.</p>\n\n\n\n<p>Let us use Anscombe’s dataset with the regression plots −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('anscombe')\nsb.lmplot(x=\"x\", y=\"y\", data=df.query(\"dataset == 'I'\"))\nplt.show()\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/dotted.jpg\" alt=\"Dotted Graph\"/></figure>\n\n\n\n<p>In this case, the data is good fit for linear regression model with less variance.</p>\n\n\n\n<p>Let us see another example where the data takes high deviation which shows the line of best fit is not good.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('anscombe')\nsb.lmplot(x = \"x\", y = \"y\", data = df.query(\"dataset == 'II'\"))\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/halfs.jpg\" alt=\"Half\"/></figure>\n\n\n\n<p>The plot shows the high deviation of data points from the regression line. Such non-linear, higher order can be visualized using the&nbsp;<strong>lmplot()</strong>&nbsp;and&nbsp;<strong>regplot()</strong>.These can fit a polynomial regression model to explore simple kinds of nonlinear trends in the dataset −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('anscombe')\nsb.lmplot(x = \"x\", y = \"y\", data = df.query(\"dataset == 'II'\"),order = 2)\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/parabola.jpg\" alt=\"parabola\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Most of the times, we use datasets that contain multiple quantitative variables, and the goal of an analysis is often to relate those variables to each other. This can be done through the regression lines. While building the regression models, we often check for&nbsp;multicollinearity,&nbsp;where we had to see the correlation between all the combinations of [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5015"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5015"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5015/revisions"}],"predecessor-version":[{"id":5016,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5015/revisions/5016"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5015"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5015"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5015"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5017,"date":"2021-03-11T06:36:38","date_gmt":"2021-03-11T06:36:38","guid":{"rendered":"https://python3.foobrdigital.com/?p=5017"},"modified":"2021-03-11T06:36:38","modified_gmt":"2021-03-11T06:36:38","slug":"facet-grid","status":"publish","type":"post","link":"https://python3.foobrdigital.com/facet-grid/","title":{"rendered":"Facet Grid"},"content":{"rendered":"\n<p>A useful approach to explore medium-dimensional data, is by drawing multiple instances of the same plot on different subsets of your dataset.</p>\n\n\n\n<p>This technique is commonly called as “lattice”, or “trellis” plotting, and it is related to the idea of “small multiples”.</p>\n\n\n\n<p>To use these features, your data has to be in a Pandas DataFrame.</p>\n\n\n\n<h2>Plotting Small Multiples of Data Subsets</h2>\n\n\n\n<p>In the previous chapter, we have seen the FacetGrid example where FacetGrid class helps in visualizing distribution of one variable as well as the relationship between multiple variables separately within subsets of your dataset using multiple panels.</p>\n\n\n\n<p>A FacetGrid can be drawn with up to three dimensions − row, col, and hue. The first two have obvious correspondence with the resulting array of axes; think of the hue variable as a third dimension along a depth axis, where different levels are plotted with different colors.</p>\n\n\n\n<p><strong>FacetGrid</strong>&nbsp;object takes a dataframe as input and the names of the variables that will form the row, column, or hue dimensions of the grid.</p>\n\n\n\n<p>The variables should be categorical and the data at each level of the variable will be used for a facet along that axis.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\ng = sb.FacetGrid(df, col = \"time\")\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/graphs.jpg\" alt=\"Graphs\"/></figure>\n\n\n\n<p>In the above example, we have just initialized the&nbsp;<strong>facetgrid</strong>&nbsp;object which doesn’t draw anything on them.</p>\n\n\n\n<p>The main approach for visualizing data on this grid is with the&nbsp;<strong>FacetGrid.map()</strong>&nbsp;method. Let us look at the distribution of tips in each of these subsets, using a histogram.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\ng = sb.FacetGrid(df, col = \"time\")\ng.map(plt.hist, \"tip\")\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/differentiation.jpg\" alt=\"differentiation\"/></figure>\n\n\n\n<p>The number of plots is more than one because of the parameter col. We discussed about col parameter in our previous chapters.</p>\n\n\n\n<p>To make a relational plot, pass the multiple variable names.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\ng = sb.FacetGrid(df, col = \"sex\", hue = \"smoker\")\ng.map(plt.scatter, \"total_bill\", \"tip\")\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/ratio.jpg\" alt=\"Ratio\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>A useful approach to explore medium-dimensional data, is by drawing multiple instances of the same plot on different subsets of your dataset. This technique is commonly called as “lattice”, or “trellis” plotting, and it is related to the idea of “small multiples”. To use these features, your data has to be in a Pandas DataFrame. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5017"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5017"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5017/revisions"}],"predecessor-version":[{"id":5018,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5017/revisions/5018"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5017"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5017"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5017"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5019,"date":"2021-03-11T06:38:51","date_gmt":"2021-03-11T06:38:51","guid":{"rendered":"https://python3.foobrdigital.com/?p=5019"},"modified":"2021-03-11T06:38:51","modified_gmt":"2021-03-11T06:38:51","slug":"pair-grid","status":"publish","type":"post","link":"https://python3.foobrdigital.com/pair-grid/","title":{"rendered":"Pair Grid"},"content":{"rendered":"\n<p>PairGrid allows us to draw a grid of subplots using the same plot type to visualize data.</p>\n\n\n\n<p>Unlike FacetGrid, it uses different pair of variable for each subplot. It forms a matrix of sub-plots. It is also sometimes called as “scatterplot matrix”.</p>\n\n\n\n<p>The usage of pairgrid is similar to facetgrid. First initialise the grid and then pass the plotting function.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\ng = sb.PairGrid(df)\ng.map(plt.scatter);\nplt.show()\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/variousmodels.jpg\" alt=\"Variousmodels\"/></figure>\n\n\n\n<p>It is also possible to plot a different function on the diagonal to show the univariate distribution of the variable in each column.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\ng = sb.PairGrid(df)\ng.map_diag(plt.hist)\ng.map_offdiag(plt.scatter);\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/histogram_dots.jpg\" alt=\"Histogram Dots\"/></figure>\n\n\n\n<p>We can customize the color of these plots using another categorical variable. For example, the iris dataset has four measurements for each of three different species of iris flowers so you can see how they differ.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\ng = sb.PairGrid(df)\ng.map_diag(plt.hist)\ng.map_offdiag(plt.scatter);\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/colored.jpg\" alt=\"Colored \"/></figure>\n\n\n\n<p>We can use a different function in the upper and lower triangles to see different aspects of the relationship.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\ng = sb.PairGrid(df)\ng.map_upper(plt.scatter)\ng.map_lower(sb.kdeplot, cmap = \"Blues_d\")\ng.map_diag(sb.kdeplot, lw = 3, legend = False);\nplt.show()\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/seaborn/images/various_plots.jpg\" alt=\"various plots\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>PairGrid allows us to draw a grid of subplots using the same plot type to visualize data. Unlike FacetGrid, it uses different pair of variable for each subplot. It forms a matrix of sub-plots. It is also sometimes called as “scatterplot matrix”. The usage of pairgrid is similar to facetgrid. First initialise the grid and [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[207],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5019"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=5019"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5019/revisions"}],"predecessor-version":[{"id":5020,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/5019/revisions/5020"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=5019"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=5019"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=5019"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]