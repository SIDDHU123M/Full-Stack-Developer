[{"id":1645,"date":"2020-05-26T20:34:57","date_gmt":"2020-05-26T20:34:57","guid":{"rendered":"http://python3.foobrdigital.com/?p=1645"},"modified":"2020-12-16T16:52:48","modified_gmt":"2020-12-16T16:52:48","slug":"introduction-10","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-10/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>Design patterns are used to represent the pattern used by developers to create software or web application. These patterns are selected based on the requirement analysis. The patterns describe the solution to the problem, when and where to apply the solution and the consequences of the implementation.</p>\n\n\n\n<h2>Structure of a design pattern</h2>\n\n\n\n<p>The documentation of design pattern is maintained in a way that focuses more on the technology that is used and in what ways. The following diagram explains the basic structure of design pattern documentation.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"205\" height=\"395\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-5.jpg\" alt=\"\" class=\"wp-image-1646\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-5.jpg 205w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-5-156x300.jpg 156w\" sizes=\"(max-width: 205px) 100vw, 205px\" /></figure>\n\n\n\n<h3>Pattern Name</h3>\n\n\n\n<p>It describes the pattern in short and effective manner.</p>\n\n\n\n<h3>Intent/Motive</h3>\n\n\n\n<p>It describes what the pattern does.</p>\n\n\n\n<h3>Applicability</h3>\n\n\n\n<p>It describes the list of situations where pattern is applicable.</p>\n\n\n\n<h3>Participants and consequences</h3>\n\n\n\n<p>Participants include classes and objects that participate in the design pattern with a list of consequences that exist with the pattern.</p>\n\n\n\n<h2>Why Python?</h2>\n\n\n\n<p>Python is an open source scripting language. It has libraries that support a variety of design patterns. The syntax of python is easy to understand and uses English keywords.</p>\n\n\n\n<p>Python provides support for the list of design patterns that are mentioned below. These design patterns will be used throughout this tutorial −</p>\n\n\n\n<ul><li>Model View Controller Pattern</li><li>Singleton pattern</li><li>Factory pattern</li><li>Builder Pattern</li><li>Prototype Pattern</li><li>Facade Pattern</li><li>Command Pattern</li><li>Adapter Pattern</li><li>Prototype Pattern</li><li>Decorator Pattern</li><li>Proxy Pattern</li><li>Chain of Responsibility Pattern</li><li>Observer Pattern</li><li>State Pattern</li><li>Strategy Pattern</li><li>Template Pattern</li><li>Flyweight Pattern</li><li>Abstract Factory Pattern</li><li>Object Oriented Pattern</li></ul>\n\n\n\n<h3>Benefits of using design pattern</h3>\n\n\n\n<p>Following are the different benefits of design pattern −</p>\n\n\n\n<ul><li>Patterns provide developer a selection of tried and tested solutions for the specified problems.</li><li>All design patterns are language neutral.</li><li>Patterns help to achieve communication and maintain well documentation.</li><li>It includes a record of accomplishment to reduce any technical risk to the project.</li><li>Design patterns are highly flexible to use and easy to understand.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Design patterns are used to represent the pattern used by developers to create software or web application. These patterns are selected based on the requirement analysis. The patterns describe the solution to the problem, when and where to apply the solution and the consequences of the implementation. Structure of a design pattern The documentation of [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1916,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1645"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1645"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1645/revisions"}],"predecessor-version":[{"id":1647,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1645/revisions/1647"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1916"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1645"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1645"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1645"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1648,"date":"2020-05-26T20:44:02","date_gmt":"2020-05-26T20:44:02","guid":{"rendered":"http://python3.foobrdigital.com/?p=1648"},"modified":"2020-12-16T16:52:48","modified_gmt":"2020-12-16T16:52:48","slug":"gist","status":"publish","type":"post","link":"https://python3.foobrdigital.com/gist/","title":{"rendered":"Gist"},"content":{"rendered":"\n<p>Python is an open source scripting language, which is high-level, interpreted, interactive and object-oriented. It is designed to be highly readable. The syntax of Python language is easy to understand and uses English keywords frequently.</p>\n\n\n\n<h2>Features of Python Language</h2>\n\n\n\n<p>In this section, we will learn about the different features of Python language.</p>\n\n\n\n<h3>Interpreted</h3>\n\n\n\n<p>Python is processed at runtime using the interpreter. There is no need to compile program before execution. It is similar to PERL and PHP.</p>\n\n\n\n<h3>Object-Oriented</h3>\n\n\n\n<p>Python follows object-oriented style and design patterns. It includes class definition with various features like encapsulation, polymorphism and many more.</p>\n\n\n\n<h3>Portable</h3>\n\n\n\n<p>Python code written in Windows operating system and can be used in Mac operating system. The code can be reused and portable as per the requirements.</p>\n\n\n\n<h3>Easy to code</h3>\n\n\n\n<p>Python syntax is easy to understand and code. Any developer can understand the syntax of Python within few hours. Python can be described as “programmer-friendly”</p>\n\n\n\n<h3>Extensible</h3>\n\n\n\n<p>If needed, a user can write some of Python code in C language as well. It is also possible to put python code in source code in different languages like C++. This makes Python an extensible language.</p>\n\n\n\n<h2>Important Points</h2>\n\n\n\n<p>Consider the following important points related to Python programming language −</p>\n\n\n\n<ul><li>It includes functional and structured programming methods as well as object-oriented programming methods.</li><li>It can be used as scripting language or as a programming language.</li><li>It includes automatic garbage collection.</li><li>It includes high-level dynamic data types and supports various dynamic type checking.</li><li>Python includes a feature of integration with C, C++ and languages like Java.</li></ul>\n\n\n\n<h2>How to download python language in your system?</h2>\n\n\n\n<p>To download Python language in your system, follow this link −https://www.python.org/downloads/</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"598\" height=\"248\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-6.jpg\" alt=\"\" class=\"wp-image-1649\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-6.jpg 598w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-6-300x124.jpg 300w\" sizes=\"(max-width: 598px) 100vw, 598px\" /></figure>\n\n\n\n<p>It includes packages for various operating systems like Windows, MacOS and Linux distributions.</p>\n\n\n\n<h2>The Important Tools in Python</h2>\n\n\n\n<p>In this section, we will learn in brief about a few important tools in Python.</p>\n\n\n\n<h3>Python Strings</h3>\n\n\n\n<p>The basic declaration of strings is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>str = 'Hello World!'\n﻿</code></pre>\n\n\n\n<h3>Python Lists</h3>\n\n\n\n<p>The lists of python can be declared as compound data types separated by commas and enclosed within square brackets ([]).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>list = &#91; 'abcd', 786 , 2.23, 'john', 70.2 ]\ntinylist = &#91;123, 'john']\n﻿</code></pre>\n\n\n\n<h3>Python Tuples</h3>\n\n\n\n<p>A tuple is dynamic data type of Python, which consists of number of values separated by commas. Tuples are enclosed with parentheses.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tinytuple = (123, 'john')</code></pre>\n\n\n\n<h3>Python Dictionary</h3>\n\n\n\n<p>Python dictionary is a type of hash table. A dictionary key can be almost any data type of Python. The data types are usually numbers or strings.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tinydict = {'name': 'omkar','code':6734, 'dept': 'sales'}</code></pre>\n\n\n\n<h2>What constitutes a design pattern in Python?</h2>\n\n\n\n<p>Python helps in constituting a design pattern using the following parameters −</p>\n\n\n\n<ul><li>Pattern Name</li><li>Intent</li><li>Aliases</li><li>Motivation</li><li>Problem</li><li>Solution</li><li>Structure</li><li>Participants</li><li>Constraints</li><li>Sample Code</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Python is an open source scripting language, which is high-level, interpreted, interactive and object-oriented. It is designed to be highly readable. The syntax of Python language is easy to understand and uses English keywords frequently. Features of Python Language In this section, we will learn about the different features of Python language. Interpreted Python is [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1917,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1648"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1648"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1648/revisions"}],"predecessor-version":[{"id":1650,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1648/revisions/1650"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1917"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1648"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1648"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1648"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1651,"date":"2020-05-26T20:46:26","date_gmt":"2020-05-26T20:46:26","guid":{"rendered":"http://python3.foobrdigital.com/?p=1651"},"modified":"2020-12-16T16:52:48","modified_gmt":"2020-12-16T16:52:48","slug":"model-view-controller-pattern","status":"publish","type":"post","link":"https://python3.foobrdigital.com/model-view-controller-pattern/","title":{"rendered":"Model View Controller Pattern"},"content":{"rendered":"\n<p>Model View Controller is the most commonly used design pattern. Developers find it easy to implement this design pattern.</p>\n\n\n\n<p>Following is a basic architecture of the Model View Controller −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"430\" height=\"379\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-7.jpg\" alt=\"\" class=\"wp-image-1652\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-7.jpg 430w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-7-300x264.jpg 300w\" sizes=\"(max-width: 430px) 100vw, 430px\" /></figure>\n\n\n\n<p>Let us now see how the structure works.</p>\n\n\n\n<h3>Model</h3>\n\n\n\n<p>It consists of pure application logic, which interacts with the database. It includes all the information to represent data to the end user.</p>\n\n\n\n<h3>View</h3>\n\n\n\n<p>View represents the HTML files, which interact with the end user. It represents the model’s data to user.</p>\n\n\n\n<h3>Controller</h3>\n\n\n\n<p>It acts as an intermediary between view and model. It listens to the events triggered by view and queries model for the same.</p>\n\n\n\n<h3>Python code</h3>\n\n\n\n<p>Let us consider a basic object called “Person” and create an MVC design pattern.</p>\n\n\n\n<p><strong>Model.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import json\n\nclass Person(object):\n   def __init__(self, first_name = None, last_name = None):\n      self.first_name = first_name\n      self.last_name = last_name\n   #returns Person name, ex: John Doe\n   def name(self):\n      return (\"%s %s\" % (self.first_name,self.last_name))\n\t\t\n   @classmethod\n   #returns all people inside db.txt as list of Person objects\n   def getAll(self):\n      database = open('db.txt', 'r')\n      result = &#91;]\n      json_list = json.loads(database.read())\n      for item in json_list:\n         item = json.loads(item)\n         person = Person(item&#91;'first_name'], item&#91;'last_name'])\n         result.append(person)\n      return result</code></pre>\n\n\n\n<p>It calls for a method, which fetches all the records of the Person table in database. The records are presented in JSON format.</p>\n\n\n\n<h3>View</h3>\n\n\n\n<p>It displays all the records fetched within the model. View never interacts with model; controller does this work (communicating with model and view).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from model import Person\ndef showAllView(list):\n   print 'In our db we have %i users. Here they are:' % len(list)\n   for item in list:\n      print item.name()\ndef startView():\n   print 'MVC - the simplest example'\n   print 'Do you want to see everyone in my db?&#91;y/n]'\ndef endView():\n   print 'Goodbye!'</code></pre>\n\n\n\n<h3>Controller</h3>\n\n\n\n<p>Controller interacts with model through the&nbsp;<strong>getAll()</strong>&nbsp;method which fetches all the records displayed to the end user.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from model import Person\nimport view\n\ndef showAll():\n   #gets list of all Person objects\n   people_in_db = Person.getAll()\n   #calls view\n   return view.showAllView(people_in_db)\n\ndef start():\n   view.startView()\n   input = raw_input()\n   if input == 'y':\n      return showAll()\n   else:\n      return view.endView()\n\nif __name__ == \"__main__\":\n   #running controller function\n   start()</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Model View Controller is the most commonly used design pattern. Developers find it easy to implement this design pattern. Following is a basic architecture of the Model View Controller − Let us now see how the structure works. Model It consists of pure application logic, which interacts with the database. It includes all the information [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1918,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1651"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1651"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1651/revisions"}],"predecessor-version":[{"id":1926,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1651/revisions/1926"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1918"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1651"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1651"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1651"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1654,"date":"2020-05-26T20:49:03","date_gmt":"2020-05-26T20:49:03","guid":{"rendered":"http://python3.foobrdigital.com/?p=1654"},"modified":"2020-12-16T16:52:48","modified_gmt":"2020-12-16T16:52:48","slug":"singleton","status":"publish","type":"post","link":"https://python3.foobrdigital.com/singleton/","title":{"rendered":"Singleton"},"content":{"rendered":"\n<p>This pattern restricts the instantiation of a class to one object. It is a type of creational pattern and involves only one class to create methods and specified objects.</p>\n\n\n\n<p>It provides a global point of access to the instance created.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"546\" height=\"359\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-8.jpg\" alt=\"\" class=\"wp-image-1655\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-8.jpg 546w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-8-300x197.jpg 300w\" sizes=\"(max-width: 546px) 100vw, 546px\" /></figure>\n\n\n\n<h2>How to implement a singleton class?</h2>\n\n\n\n<p>The following program demonstrates the implementation of singleton class where it prints the instances created multiple times.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Singleton:\n   __instance = None\n   @staticmethod \n   def getInstance():\n      \"\"\" Static access method. \"\"\"\n      if Singleton.__instance == None:\n         Singleton()\n      return Singleton.__instance\n   def __init__(self):\n      \"\"\" Virtually private constructor. \"\"\"\n      if Singleton.__instance != None:\n         raise Exception(\"This class is a singleton!\")\n      else:\n         Singleton.__instance = self\ns = Singleton()\nprint s\n\ns = Singleton.getInstance()\nprint s\n\ns = Singleton.getInstance()\nprint s</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"198\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-9.jpg\" alt=\"\" class=\"wp-image-1656\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-9.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-9-300x99.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>The number of instances created are same and there is no difference in the objects listed in output.</p>\n","protected":false},"excerpt":{"rendered":"<p>This pattern restricts the instantiation of a class to one object. It is a type of creational pattern and involves only one class to create methods and specified objects. It provides a global point of access to the instance created. How to implement a singleton class? The following program demonstrates the implementation of singleton class [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1919,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1654"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1654"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1654/revisions"}],"predecessor-version":[{"id":1657,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1654/revisions/1657"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1919"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1654"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1654"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1654"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1658,"date":"2020-05-26T20:50:48","date_gmt":"2020-05-26T20:50:48","guid":{"rendered":"http://python3.foobrdigital.com/?p=1658"},"modified":"2020-12-16T16:52:48","modified_gmt":"2020-12-16T16:52:48","slug":"factory","status":"publish","type":"post","link":"https://python3.foobrdigital.com/factory/","title":{"rendered":"Factory"},"content":{"rendered":"\n<p>The factory pattern comes under the creational patterns list category. It provides one of the best ways to create an object. In factory pattern, objects are created without exposing the logic to client and referring to the newly created object using a common interface.</p>\n\n\n\n<p>Factory patterns are implemented in Python using factory method. When a user calls a method such that we pass in a string and the return value as a new object is implemented through factory method. The type of object used in factory method is determined by string which is passed through method.</p>\n\n\n\n<p>In the example below, every method includes object as a parameter, which is implemented through factory method.</p>\n\n\n\n<h2>How to implement a factory pattern?</h2>\n\n\n\n<p>Let us now see how to implement a factory pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Button(object):\n   html = \"\"\n   def get_html(self):\n      return self.html\n\nclass Image(Button):\n   html = \"&lt;img>&lt;/img>\"\n\nclass Input(Button):\n   html = \"&lt;input>&lt;/input>\"\n\nclass Flash(Button):\n   html = \"&lt;obj>&lt;/obj>\"\n\nclass ButtonFactory():\n   def create_button(self, typ):\n      targetclass = typ.capitalize()\n      return globals()&#91;targetclass]()\n\nbutton_obj = ButtonFactory()\nbutton = &#91;'image', 'input', 'flash']\nfor b in button:\n   print button_obj.create_button(b).get_html()</code></pre>\n\n\n\n<p>The button class helps to create the html tags and the associated html page. The client will not have access to the logic of code and the output represents the creation of html page.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"169\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-10.jpg\" alt=\"\" class=\"wp-image-1659\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-10.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-10-300x85.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>The python code includes the logic of html tags, which specified value. The end user can have a look on the HTML file created by the Python code.</p>\n","protected":false},"excerpt":{"rendered":"<p>The factory pattern comes under the creational patterns list category. It provides one of the best ways to create an object. In factory pattern, objects are created without exposing the logic to client and referring to the newly created object using a common interface. Factory patterns are implemented in Python using factory method. When a [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1920,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1658"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1658"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1658/revisions"}],"predecessor-version":[{"id":1660,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1658/revisions/1660"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1920"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1658"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1658"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1658"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1661,"date":"2020-05-26T20:52:40","date_gmt":"2020-05-26T20:52:40","guid":{"rendered":"http://python3.foobrdigital.com/?p=1661"},"modified":"2020-12-16T16:52:48","modified_gmt":"2020-12-16T16:52:48","slug":"builder","status":"publish","type":"post","link":"https://python3.foobrdigital.com/builder/","title":{"rendered":"Builder"},"content":{"rendered":"\n<p>Builder Pattern is a unique design pattern which helps in building complex object using simple objects and uses an algorithmic approach. This design pattern comes under the category of creational pattern. In this design pattern, a builder class builds the final object in step-by-step procedure. This builder is independent of other objects.</p>\n\n\n\n<h3>Advantages of Builder Pattern</h3>\n\n\n\n<ul><li>It provides clear separation and a unique layer between construction and representation of a specified object created by class.</li><li>It provides better control over construction process of the pattern created.</li><li>It gives the perfect scenario to change the internal representation of objects.</li></ul>\n\n\n\n<h2>How to implement builder pattern?</h2>\n\n\n\n<p>In this section, we will learn how to implement the builder pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Director:\n   __builder = None\n   \n   def setBuilder(self, builder):\n      self.__builder = builder\n   \n   def getCar(self):\n      car = Car()\n      \n      # First goes the body\n      body = self.__builder.getBody()\n      car.setBody(body)\n      \n      # Then engine\n      engine = self.__builder.getEngine()\n      car.setEngine(engine)\n      \n      # And four wheels\n      i = 0\n      while i &lt; 4:\n         wheel = self.__builder.getWheel()\n\t\t\tcar.attachWheel(wheel)\n         i += 1\n      return car\n\n# The whole product\nclass Car:\n   def __init__(self):\n      self.__wheels = list()\n      self.__engine = None\n      self.__body = None\n\n   def setBody(self, body):\n      self.__body = body\n\n   def attachWheel(self, wheel):\n      self.__wheels.append(wheel)\n\n   def setEngine(self, engine):\n      self.__engine = engine\n\n   def specification(self):\n      print \"body: %s\" % self.__body.shape\n      print \"engine horsepower: %d\" % self.__engine.horsepower\n      print \"tire size: %d\\'\" % self.__wheels&#91;0].size\n\nclass Builder:\n      def getWheel(self): pass\n      def getEngine(self): pass\n      def getBody(self): pass\n\nclass JeepBuilder(Builder):\n   \n   def getWheel(self):\n      wheel = Wheel()\n      wheel.size = 22\n      return wheel\n   \n   def getEngine(self):\n      engine = Engine()\n      engine.horsepower = 400\n      return engine\n   \n   def getBody(self):\n      body = Body()\n      body.shape = \"SUV\"\n      return body\n\n# Car parts\nclass Wheel:\n   size = None\n\nclass Engine:\n   horsepower = None\n\nclass Body:\n   shape = None\n\ndef main():\n   jeepBuilder = JeepBuilder() # initializing the class\n   \n   director = Director()\n   \n   # Build Jeep\n   print \"Jeep\"\n   director.setBuilder(jeepBuilder)\n   jeep = director.getCar()\n   jeep.specification()\n   print \"\"\n\nif __name__ == \"__main__\":\n   main()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"198\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-11.jpg\" alt=\"\" class=\"wp-image-1662\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-11.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-11-300x99.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>Builder Pattern is a unique design pattern which helps in building complex object using simple objects and uses an algorithmic approach. This design pattern comes under the category of creational pattern. In this design pattern, a builder class builds the final object in step-by-step procedure. This builder is independent of other objects. Advantages of Builder [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1921,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1661"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1661"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1661/revisions"}],"predecessor-version":[{"id":1663,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1661/revisions/1663"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1921"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1661"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1661"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1661"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1664,"date":"2020-05-26T21:03:29","date_gmt":"2020-05-26T21:03:29","guid":{"rendered":"http://python3.foobrdigital.com/?p=1664"},"modified":"2020-12-16T16:52:48","modified_gmt":"2020-12-16T16:52:48","slug":"prototype","status":"publish","type":"post","link":"https://python3.foobrdigital.com/prototype/","title":{"rendered":"Prototype"},"content":{"rendered":"\n<p>Prototype design pattern helps to hide the complexity of the instances created by the class. The concept of the existing object will differ with that of the new object, which is created from scratch.</p>\n\n\n\n<p>The newly copied object may have some changes in the properties if required. This approach saves time and resources that go in for the development of a product.</p>\n\n\n\n<h2>How to implement a prototype pattern?</h2>\n\n\n\n<p>Let us now see how to implement a prototype pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import copy\n\nclass Prototype:\n\n   _type = None\n   _value = None\n\n   def clone(self):\n      pass\n\n   def getType(self):\n      return self._type\n\n   def getValue(self):\n      return self._value\n\nclass Type1(Prototype):\n\n   def __init__(self, number):\n      self._type = \"Type1\"\n      self._value = number\n\n   def clone(self):\n      return copy.copy(self)\n\nclass Type2(Prototype):\n\n   \"\"\" Concrete prototype. \"\"\"\n\n   def __init__(self, number):\n      self._type = \"Type2\"\n      self._value = number\n\n   def clone(self):\n      return copy.copy(self)\n\nclass ObjectFactory:\n\n   \"\"\" Manages prototypes.\n   Static factory, that encapsulates prototype\n   initialization and then allows instatiation\n   of the classes from these prototypes.\n   \"\"\"\n\n   __type1Value1 = None\n   __type1Value2 = None\n   __type2Value1 = None\n   __type2Value2 = None\n\n   @staticmethod\n   def initialize():\n      ObjectFactory.__type1Value1 = Type1(1)\n      ObjectFactory.__type1Value2 = Type1(2)\n      ObjectFactory.__type2Value1 = Type2(1)\n      ObjectFactory.__type2Value2 = Type2(2)\n\n   @staticmethod\n   def getType1Value1():\n      return ObjectFactory.__type1Value1.clone()\n\n   @staticmethod\n   def getType1Value2():\n      return ObjectFactory.__type1Value2.clone()\n\n   @staticmethod\n   def getType2Value1():\n      return ObjectFactory.__type2Value1.clone()\n\n   @staticmethod\n   def getType2Value2():\n      return ObjectFactory.__type2Value2.clone()\n\ndef main():\n   ObjectFactory.initialize()\n   \n   instance = ObjectFactory.getType1Value1()\n   print \"%s: %s\" % (instance.getType(), instance.getValue())\n   \n   instance = ObjectFactory.getType1Value2()\n   print \"%s: %s\" % (instance.getType(), instance.getValue())\n   \n   instance = ObjectFactory.getType2Value1()\n   print \"%s: %s\" % (instance.getType(), instance.getValue())\n   \n   instance = ObjectFactory.getType2Value2()\n   print \"%s: %s\" % (instance.getType(), instance.getValue())\n\nif __name__ == \"__main__\":\n   main()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program will generate the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"198\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-12.jpg\" alt=\"\" class=\"wp-image-1665\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-12.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-12-300x99.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>The output helps in creating new objects with the existing ones and it is clearly visible in the output mentioned above.</p>\n","protected":false},"excerpt":{"rendered":"<p>Prototype design pattern helps to hide the complexity of the instances created by the class. The concept of the existing object will differ with that of the new object, which is created from scratch. The newly copied object may have some changes in the properties if required. This approach saves time and resources that go [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1922,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1664"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1664"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1664/revisions"}],"predecessor-version":[{"id":1666,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1664/revisions/1666"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1922"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1664"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1664"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1664"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1667,"date":"2020-05-26T21:09:01","date_gmt":"2020-05-26T21:09:01","guid":{"rendered":"http://python3.foobrdigital.com/?p=1667"},"modified":"2020-12-16T16:52:48","modified_gmt":"2020-12-16T16:52:48","slug":"facade","status":"publish","type":"post","link":"https://python3.foobrdigital.com/facade/","title":{"rendered":"Facade"},"content":{"rendered":"\n<p>Facade design pattern provides a unified interface to a set of interfaces in a subsystem. It defines a higher-level interface that any subsystem can use.</p>\n\n\n\n<p>A facade class knows which subsystem is responsible for a request.</p>\n\n\n\n<h2>How to design a facade pattern?</h2>\n\n\n\n<p>Let us now see how to design a facade pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class _IgnitionSystem(object):\n   \n   @staticmethod\n   def produce_spark():\n      return True\n\nclass _Engine(object):\n\n   def __init__(self):\n      self.revs_per_minute = 0\n\n   def turnon(self):\n      self.revs_per_minute = 2000\n   \n   def turnoff(self):\n      self.revs_per_minute = 0\n\nclass _FuelTank(object):\n   \n   def __init__(self, level=30):\n      self._level = level\n   \n   @property\n   def level(self):\n      return self._level\n   \n   @level.setter\n\tdef level(self, level):\n      self._level = level\n\nclass _DashBoardLight(object):\n\n   def __init__(self, is_on=False):\n      self._is_on = is_on\n\n   def __str__(self):\n      return self.__class__.__name__\n\n   @property\n   def is_on(self):\n      return self._is_on\n   \n   @is_on.setter\n   def is_on(self, status):\n      self._is_on = status\n   \n   def status_check(self):\n      if self._is_on:\n         print(\"{}: ON\".format(str(self)))\n      else:\n         print(\"{}: OFF\".format(str(self)))\n\nclass _HandBrakeLight(_DashBoardLight):\n   pass\n\nclass _FogLampLight(_DashBoardLight):\n   pass\n\nclass _Dashboard(object):\n   \n   def __init__(self):\n      self.lights = {\"handbreak\": _HandBrakeLight(), \"fog\": _FogLampLight()}\n   \n   def show(self):\n\t   for light in self.lights.values():\n      light.status_check()\n\n# Facade\nclass Car(object):\n   \n   def __init__(self):\n      self.ignition_system = _IgnitionSystem()\n      self.engine = _Engine()\n      self.fuel_tank = _FuelTank()\n      self.dashboard = _Dashboard()\n   \n   @property\n   def km_per_litre(self):\n      return 17.0\n   \n   def consume_fuel(self, km):\n      litres = min(self.fuel_tank.level, km / self.km_per_litre)\n      self.fuel_tank.level -= litres\n   \n   def start(self):\n      print(\"\\nStarting...\")\n      self.dashboard.show()\n      if self.ignition_system.produce_spark():\n         self.engine.turnon()\n      else:\n         print(\"Can't start. Faulty ignition system\")\n   \n   def has_enough_fuel(self, km, km_per_litre):\n      litres_needed = km / km_per_litre\n      if self.fuel_tank.level > litres_needed:\n         return True\n      else:\n         return False\n\t   \n      def drive(self, km = 100):\n         print(\"\\n\")\n         if self.engine.revs_per_minute > 0:\n            while self.has_enough_fuel(km, self.km_per_litre):\n               self.consume_fuel(km)\n               print(\"Drove {}km\".format(km))\n               print(\"{:.2f}l of fuel still left\".format(self.fuel_tank.level))\n         else:\n            print(\"Can't drive. The Engine is turned off!\")\n         \n         def park(self):\n            print(\"\\nParking...\")\n            self.dashboard.lights&#91;\"handbreak\"].is_on = True\n            self.dashboard.show()\n            self.engine.turnoff()\n         \n         def switch_fog_lights(self, status):\n            print(\"\\nSwitching {} fog lights...\".format(status))\n            boolean = True if status == \"ON\" else False\n            self.dashboard.lights&#91;\"fog\"].is_on = boolean\n            self.dashboard.show()\n         \n         def fill_up_tank(self):\n            print(\"\\nFuel tank filled up!\")\n            self.fuel_tank.level = 100\n\t\t\t\t\n# the main function is the Client\ndef main():\n   car = Car()\n   car.start()\n   car.drive()\n   car.switch_fog_lights(\"ON\")\n   car.switch_fog_lights(\"OFF\")\n\tcar.park()\n   car.fill_up_tank()\n   car.drive()\n   car.start()\n   car.drive()\n\nif __name__ == \"__main__\":\n   main()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"646\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-13.jpg\" alt=\"\" class=\"wp-image-1668\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-13.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-13-279x300.jpg 279w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>This program is designed with a scenario. It is that of starting the engine of a car or any driving vehicle. If you observe the code, it includes the associated functions to drive, to park and to consume fuel as well.</p>\n","protected":false},"excerpt":{"rendered":"<p>Facade design pattern provides a unified interface to a set of interfaces in a subsystem. It defines a higher-level interface that any subsystem can use. A facade class knows which subsystem is responsible for a request. How to design a facade pattern? Let us now see how to design a facade pattern. Output The above [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1923,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1667"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1667"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1667/revisions"}],"predecessor-version":[{"id":1669,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1667/revisions/1669"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1923"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1667"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1667"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1667"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1670,"date":"2020-05-26T21:14:39","date_gmt":"2020-05-26T21:14:39","guid":{"rendered":"http://python3.foobrdigital.com/?p=1670"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"command","status":"publish","type":"post","link":"https://python3.foobrdigital.com/command/","title":{"rendered":"Command"},"content":{"rendered":"\n<p>Command Pattern adds a level of abstraction between actions and includes an object, which invokes these actions.</p>\n\n\n\n<p>In this design pattern, client creates a command object that includes a list of commands to be executed. The command object created implements a specific interface.</p>\n\n\n\n<p>Following is the basic architecture of the command pattern −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"487\" height=\"331\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-16.jpg\" alt=\"\" class=\"wp-image-1673\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-16.jpg 487w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-16-300x204.jpg 300w\" sizes=\"(max-width: 487px) 100vw, 487px\" /></figure>\n\n\n\n<h2>How to implement the command pattern?</h2>\n\n\n\n<p>We will now see how to implement the design pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def demo(a,b,c):\n   print 'a:',a\n   print 'b:',b\n   print 'c:',c\n\nclass Command:\n   def __init__(self, cmd, *args):\n      self._cmd=cmd\n      self._args=args\n\n   def __call__(self, *args):\n      return apply(self._cmd, self._args+args)\ncmd = Command(dir,__builtins__)\nprint cmd()\n\ncmd = Command(demo,1,2)\ncmd(3)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"440\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-15.jpg\" alt=\"\" class=\"wp-image-1672\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-15.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-15-300x220.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>The output implements all the commands and keywords listed in Python language. It prints the necessary values of the variables.</p>\n","protected":false},"excerpt":{"rendered":"<p>Command Pattern adds a level of abstraction between actions and includes an object, which invokes these actions. In this design pattern, client creates a command object that includes a list of commands to be executed. The command object created implements a specific interface. Following is the basic architecture of the command pattern − How to [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1924,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1670"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1670"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1670/revisions"}],"predecessor-version":[{"id":1674,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1670/revisions/1674"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1924"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1670"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1670"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1670"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1675,"date":"2020-05-26T21:16:27","date_gmt":"2020-05-26T21:16:27","guid":{"rendered":"http://python3.foobrdigital.com/?p=1675"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"adapter","status":"publish","type":"post","link":"https://python3.foobrdigital.com/adapter/","title":{"rendered":"Adapter"},"content":{"rendered":"\n<p>Adapter pattern works as a bridge between two incompatible interfaces. This type of design pattern comes under structural pattern as this pattern combines the capability of two independent interfaces.</p>\n\n\n\n<p>This pattern involves a single class, which is responsible to join functionalities of independent or incompatible interfaces. A real life example could be the case of a card reader, which acts as an adapter between memory card and a laptop. You plug in the memory card into the card reader and the card reader into the laptop so that memory card can be read via the laptop.</p>\n\n\n\n<p>The adapter design pattern helps to work classes together. It converts the interface of a class into another interface based on requirement. The pattern includes a speciation a polymorphism which names one name and multiple forms. Say for a shape class which can use as per the requirements gathered.</p>\n\n\n\n<p>There are two types of adapter pattern −</p>\n\n\n\n<h3>Object Adapter Pattern</h3>\n\n\n\n<p>This design pattern relies on object implementation. Hence, it is called the Object Adapter Pattern.</p>\n\n\n\n<h3>Class Adapter Pattern</h3>\n\n\n\n<p>This is an alternative way to implement the adapter design pattern. The pattern can be implemented using multiple inheritances.</p>\n\n\n\n<h2>How to implement the adapter pattern?</h2>\n\n\n\n<p>Let us now see how to implement the adapter pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class EuropeanSocketInterface:\n   def voltage(self): pass\n\n   def live(self): pass\n   def neutral(self): pass\n   def earth(self): pass\n\n# Adaptee\nclass Socket(EuropeanSocketInterface):\n   def voltage(self):\n      return 230\n\n\tdef live(self):\n      return 1\n   \n   def neutral(self):\n      return -1\n   \n   def earth(self):\n      return 0\n\n# Target interface\nclass USASocketInterface:\n   def voltage(self): pass\n   def live(self): pass\n   def neutral(self): pass\n\n# The Adapter\nclass Adapter(USASocketInterface):\n   __socket = None\n   def __init__(self, socket):\n      self.__socket = socket\n   \n   def voltage(self):\n      return 110\n   \n   def live(self):\n      return self.__socket.live()\n   \n   def neutral(self):\n      return self.__socket.neutral()\n\n# Client\nclass ElectricKettle:\n   __power = None\n   \n   def __init__(self, power):\n\t   self.__power = power\n   \n   def boil(self):\n      if self.__power.voltage() > 110:\n         print \"Kettle on fire!\"\n      else:\n         if self.__power.live() == 1 and \\\n            self.__power.neutral() == -1:\n            print \"Coffee time!\"\n         else:\n            print \"No power.\"\n\ndef main():\n   # Plug in\n   socket = Socket()\n   adapter = Adapter(socket)\n   kettle = ElectricKettle(adapter)\n\t\n   # Make coffee\n   kettle.boil()\n\t\n   return 0\n\t\nif __name__ == \"__main__\":\n   main()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"155\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-17.jpg\" alt=\"\" class=\"wp-image-1676\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-17.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-17-300x78.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>The code includes adapter interface with various parameters and attributes. It includes Adaptee along with Target interface that implements all the attributes and displays the output as visible.</p>\n","protected":false},"excerpt":{"rendered":"<p>Adapter pattern works as a bridge between two incompatible interfaces. This type of design pattern comes under structural pattern as this pattern combines the capability of two independent interfaces. This pattern involves a single class, which is responsible to join functionalities of independent or incompatible interfaces. A real life example could be the case of [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1925,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1675"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1675"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1675/revisions"}],"predecessor-version":[{"id":1677,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1675/revisions/1677"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1925"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1675"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1675"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1675"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1678,"date":"2020-05-26T21:18:28","date_gmt":"2020-05-26T21:18:28","guid":{"rendered":"http://python3.foobrdigital.com/?p=1678"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"decorator-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/decorator-2/","title":{"rendered":"Decorator"},"content":{"rendered":"\n<p>Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.</p>\n\n\n\n<p>This pattern creates a decorator class, which wraps the original class and provides additional functionality keeping the class methods signature intact.</p>\n\n\n\n<p>The motive of a decorator pattern is to attach additional responsibilities of an object dynamically.</p>\n\n\n\n<h2>How to implement decorator design pattern</h2>\n\n\n\n<p>The code mentioned below is a simple demonstration of how to implement decorator design pattern in Python. The illustration involves demonstration of a coffee shop in the format of class. The coffee class created is an abstract, which means that it cannot be instantiated.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import six\nfrom abc import ABCMeta\n\n@six.add_metaclass(ABCMeta)\nclass Abstract_Coffee(object):\n\n   def get_cost(self):\n      pass\n\n   def get_ingredients(self):\n      pass\n   \n   def get_tax(self):\n      return 0.1*self.get_cost()\n\nclass Concrete_Coffee(Abstract_Coffee):\n   \n   def get_cost(self):\n      return 1.00\n   \n   def get_ingredients(self):\n      return 'coffee'\n\n@six.add_metaclass(ABCMeta)\nclass Abstract_Coffee_Decorator(Abstract_Coffee):\n   \n   def __init__(self,decorated_coffee):\n      self.decorated_coffee = decorated_coffee\n   \n   def get_cost(self):\n      return self.decorated_coffee.get_cost()\n   \n   def get_ingredients(self):\n      return self.decorated_coffee.get_ingredients()\n\nclass Sugar(Abstract_Coffee_Decorator):\n   \n   def __init__(self,decorated_coffee):\n      Abstract_Coffee_Decorator.__init__(self,decorated_coffee)\n   \n   def get_cost(self):\n      return self.decorated_coffee.get_cost()\n   \n   def get_ingredients(self):\n\t   return self.decorated_coffee.get_ingredients() + ', sugar'\n\nclass Milk(Abstract_Coffee_Decorator):\n   \n   def __init__(self,decorated_coffee):\n      Abstract_Coffee_Decorator.__init__(self,decorated_coffee)\n   \n   def get_cost(self):\n      return self.decorated_coffee.get_cost() + 0.25\n   \n   def get_ingredients(self):\n      return self.decorated_coffee.get_ingredients() + ', milk'\n\nclass Vanilla(Abstract_Coffee_Decorator):\n   \n   def __init__(self,decorated_coffee):\n      Abstract_Coffee_Decorator.__init__(self,decorated_coffee)\n   \n   def get_cost(self):\n      return self.decorated_coffee.get_cost() + 0.75\n   \n   def get_ingredients(self):\n      return self.decorated_coffee.get_ingredients() + ', vanilla'</code></pre>\n\n\n\n<p>The implementation of the abstract class of the coffee shop is done with a separate file as mentioned below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import coffeeshop\n\nmyCoffee = coffeeshop.Concrete_Coffee()\nprint('Ingredients: '+myCoffee.get_ingredients()+\n   '; Cost: '+str(myCoffee.get_cost())+'; sales tax = '+str(myCoffee.get_tax()))\n\nmyCoffee = coffeeshop.Milk(myCoffee)\nprint('Ingredients: '+myCoffee.get_ingredients()+\n   '; Cost: '+str(myCoffee.get_cost())+'; sales tax = '+str(myCoffee.get_tax()))\n\nmyCoffee = coffeeshop.Vanilla(myCoffee)\nprint('Ingredients: '+myCoffee.get_ingredients()+\n   '; Cost: '+str(myCoffee.get_cost())+'; sales tax = '+str(myCoffee.get_tax()))\n\nmyCoffee = coffeeshop.Sugar(myCoffee)\nprint('Ingredients: '+myCoffee.get_ingredients()+\n   '; Cost: '+str(myCoffee.get_cost())+'; sales tax = '+str(myCoffee.get_tax()))</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"185\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-18.jpg\" alt=\"\" class=\"wp-image-1679\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-18.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-18-300x93.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class. This pattern creates a decorator class, which wraps the original class and provides additional functionality keeping the class methods [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1889,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1678"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1678"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1678/revisions"}],"predecessor-version":[{"id":1680,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1678/revisions/1680"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1889"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1678"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1678"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1678"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1681,"date":"2020-05-26T21:20:34","date_gmt":"2020-05-26T21:20:34","guid":{"rendered":"http://python3.foobrdigital.com/?p=1681"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"proxy","status":"publish","type":"post","link":"https://python3.foobrdigital.com/proxy/","title":{"rendered":"Proxy"},"content":{"rendered":"\n<p>The proxy design pattern includes a new object, which is called “Proxy” in place of an existing object which is called the “Real Subject”. The proxy object created of the real subject must be on the same interface in such a way that the client should not get any idea that proxy is used in place of the real object. Requests generated by the client to the proxy are passed through the real subject.</p>\n\n\n\n<p>The UML representation of proxy pattern is as follows −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"441\" height=\"255\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-19.jpg\" alt=\"\" class=\"wp-image-1682\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-19.jpg 441w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-19-300x173.jpg 300w\" sizes=\"(max-width: 441px) 100vw, 441px\" /></figure>\n\n\n\n<h2>How to implement the proxy pattern?</h2>\n\n\n\n<p>Let us now see how to implement the proxy pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Image:\n   def __init__( self, filename ):\n      self._filename = filename\n   \n   def load_image_from_disk( self ):\n      print(\"loading \" + self._filename )\n   \n   def display_image( self ):\n      print(\"display \" + self._filename)\n\nclass Proxy:\n   def __init__( self, subject ):\n      self._subject = subject\n      self._proxystate = None\n\nclass ProxyImage( Proxy ):\n   def display_image( self ):\n      if self._proxystate == None:\n         self._subject.load_image_from_disk()\n         self._proxystate = 1\n      print(\"display \" + self._subject._filename )\n\nproxy_image1 = ProxyImage ( Image(\"HiRes_10Mb_Photo1\") )\nproxy_image2 = ProxyImage ( Image(\"HiRes_10Mb_Photo2\") )\n\nproxy_image1.display_image() # loading necessary\nproxy_image1.display_image() # loading unnecessary\nproxy_image2.display_image() # loading necessary\nproxy_image2.display_image() # loading unnecessary\nproxy_image1.display_image() # loading unnecessary</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"213\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-20.jpg\" alt=\"\" class=\"wp-image-1683\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-20.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-20-300x107.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>The proxy pattern design helps in replicating the images that we created. The display_image() function helps to check if the values are getting printed in the command prompt.</p>\n","protected":false},"excerpt":{"rendered":"<p>The proxy design pattern includes a new object, which is called “Proxy” in place of an existing object which is called the “Real Subject”. The proxy object created of the real subject must be on the same interface in such a way that the client should not get any idea that proxy is used in [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1890,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1681"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1681"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1681/revisions"}],"predecessor-version":[{"id":1684,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1681/revisions/1684"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1890"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1681"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1681"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1681"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1685,"date":"2020-05-26T21:22:33","date_gmt":"2020-05-26T21:22:33","guid":{"rendered":"http://python3.foobrdigital.com/?p=1685"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"chain-of-responsibility","status":"publish","type":"post","link":"https://python3.foobrdigital.com/chain-of-responsibility/","title":{"rendered":"Chain of Responsibility"},"content":{"rendered":"\n<p>The chain of responsibility pattern is used to achieve loose coupling in software where a specified request from the client is passed through a chain of objects included in it. It helps in building a chain of objects. The request enters from one end and moves from one object to another.</p>\n\n\n\n<p>This pattern allows an object to send a command without knowing which object will handle the request.</p>\n\n\n\n<h2>How to implement the chain of responsibility pattern?</h2>\n\n\n\n<p>We will now see how to implement the chain of responsibility pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ReportFormat(object):\n   PDF = 0\n   TEXT = 1\nclass Report(object):\n   def __init__(self, format_):\n      self.title = 'Monthly report'\n      self.text = &#91;'Things are going', 'really, really well.']\n      self.format_ = format_\n\nclass Handler(object):\n   def __init__(self):\n      self.nextHandler = None\n\n   def handle(self, request):\n      self.nextHandler.handle(request)\n\nclass PDFHandler(Handler):\n\n   def handle(self, request):\n      if request.format_ == ReportFormat.PDF:\n         self.output_report(request.title, request.text)\n      else:\n         super(PDFHandler, self).handle(request)\n\t\n   def output_report(self, title, text):\n      print '&lt;html>'\n      print ' &lt;head>'\n      print ' &lt;title>%s&lt;/title>' % title\n      print ' &lt;/head>'\n      print ' &lt;body>'\n      for line in text:\n         print ' &lt;p>%s' % line\n      print ' &lt;/body>'\n      print '&lt;/html>'\n\nclass TextHandler(Handler):\n   \n   def handle(self, request):\n      if request.format_ == ReportFormat.TEXT:\n         self.output_report(request.title, request.text)\n      else:\n         super(TextHandler, self).handle(request)\n   \n   def output_report(self, title, text):\n      print 5*'*' + title + 5*'*'\n      for line in text:\n         print line\n\nclass ErrorHandler(Handler):\n   def handle(self, request):\n      print \"Invalid request\"\n\nif __name__ == '__main__':\n   report = Report(ReportFormat.TEXT)\n   pdf_handler = PDFHandler()\n   text_handler = TextHandler()\n\n   pdf_handler.nextHandler = text_handler\n   text_handler.nextHandler = ErrorHandler()\n\tpdf_handler.handle(report)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"177\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-21.jpg\" alt=\"\" class=\"wp-image-1686\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-21.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-21-300x89.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>The above code creates a report for monthly tasks where it sends commands through each function. It takes two handlers – for PDF and for text. It prints the output once the required object executes each function.</p>\n","protected":false},"excerpt":{"rendered":"<p>The chain of responsibility pattern is used to achieve loose coupling in software where a specified request from the client is passed through a chain of objects included in it. It helps in building a chain of objects. The request enters from one end and moves from one object to another. This pattern allows an [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1891,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1685"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1685"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1685/revisions"}],"predecessor-version":[{"id":1687,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1685/revisions/1687"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1891"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1685"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1685"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1685"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1688,"date":"2020-05-26T21:24:52","date_gmt":"2020-05-26T21:24:52","guid":{"rendered":"http://python3.foobrdigital.com/?p=1688"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"observer","status":"publish","type":"post","link":"https://python3.foobrdigital.com/observer/","title":{"rendered":"Observer"},"content":{"rendered":"\n<p>In this pattern, objects are represented as observers that wait for an event to trigger. An observer attaches to the subject once the specified event occurs. As the event occurs, the subject tells the observers that it has occurred.</p>\n\n\n\n<p>The following UML diagram represents the observer pattern −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"390\" height=\"239\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-22.jpg\" alt=\"\" class=\"wp-image-1689\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-22.jpg 390w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-22-300x184.jpg 300w\" sizes=\"(max-width: 390px) 100vw, 390px\" /></figure>\n\n\n\n<h2>How to implement the observer pattern?</h2>\n\n\n\n<p>Let us now see how to implement the observer pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import threading\nimport time\nimport pdb\n\nclass Downloader(threading.Thread):\n   \n   def run(self):\n      print 'downloading'\n      for i in range(1,5):\n         self.i = i\n         time.sleep(2)\n\t\t\tprint 'unfunf'\n         return 'hello world'\n\nclass Worker(threading.Thread):\n   def run(self):\n      for i in range(1,5):\n         print 'worker running: %i (%i)' % (i, t.i)\n         time.sleep(1)\n         t.join()\n\n         print 'done'\n\nt = Downloader()\nt.start()\n\ntime.sleep(1)\n\nt1 = Worker()\nt1.start()\n\nt2 = Worker()\nt2.start()\n\nt3 = Worker()\nt3.start()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"347\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-23.jpg\" alt=\"\" class=\"wp-image-1690\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-23.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-23-300x174.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>The above code explains the procedure of downloading a particular result. As per the observer pattern logic, every object is treated as observer. It prints the output when event is triggered.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this pattern, objects are represented as observers that wait for an event to trigger. An observer attaches to the subject once the specified event occurs. As the event occurs, the subject tells the observers that it has occurred. The following UML diagram represents the observer pattern − How to implement the observer pattern? Let [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1892,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1688"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1688"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1688/revisions"}],"predecessor-version":[{"id":1691,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1688/revisions/1691"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1892"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1688"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1688"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1688"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1692,"date":"2020-05-26T21:26:22","date_gmt":"2020-05-26T21:26:22","guid":{"rendered":"http://python3.foobrdigital.com/?p=1692"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"state","status":"publish","type":"post","link":"https://python3.foobrdigital.com/state/","title":{"rendered":"State"},"content":{"rendered":"\n<p>It provides a module for state machines, which are implemented using subclasses, derived from a specified state machine class. The methods are state independent and cause transitions declared using decorators.</p>\n\n\n\n<h2>How to implement the state pattern?</h2>\n\n\n\n<p>The basic implementation of state pattern is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ComputerState(object):\n\n   name = \"state\"\n   allowed = &#91;]\n\n   def switch(self, state):\n      \"\"\" Switch to new state \"\"\"\n      if state.name in self.allowed:\n         print 'Current:',self,' => switched to new state',state.name\n         self.__class__ = state\n      else:\n         print 'Current:',self,' => switching to',state.name,'not possible.'\n\n   def __str__(self):\n      return self.name\n\nclass Off(ComputerState):\n   name = \"off\"\n   allowed = &#91;'on']\n\nclass On(ComputerState):\n   \"\"\" State of being powered on and working \"\"\"\n   name = \"on\"\n   allowed = &#91;'off','suspend','hibernate']\n\nclass Suspend(ComputerState):\n   \"\"\" State of being in suspended mode after switched on \"\"\"\n   name = \"suspend\"\n   allowed = &#91;'on']\n\nclass Hibernate(ComputerState):\n   \"\"\" State of being in hibernation after powered on \"\"\"\n   name = \"hibernate\"\n   allowed = &#91;'on']\n\nclass Computer(object):\n   \"\"\" A class representing a computer \"\"\"\n   \n   def __init__(self, model='HP'):\n      self.model = model\n      # State of the computer - default is off.\n      self.state = Off()\n   \n   def change(self, state):\n      \"\"\" Change state \"\"\"\n      self.state.switch(state)\n\nif __name__ == \"__main__\":\n   comp = Computer()\n   comp.change(On)\n   comp.change(Off)\n   comp.change(On)\n   comp.change(Suspend)\n   comp.change(Hibernate)\n   comp.change(On)\n   comp.change(Off)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"216\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-24.jpg\" alt=\"\" class=\"wp-image-1693\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-24.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-24-300x108.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>It provides a module for state machines, which are implemented using subclasses, derived from a specified state machine class. The methods are state independent and cause transitions declared using decorators. How to implement the state pattern? The basic implementation of state pattern is shown below − Output The above program generates the following output −</p>\n","protected":false},"author":4,"featured_media":1893,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1692"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1692"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1692/revisions"}],"predecessor-version":[{"id":1694,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1692/revisions/1694"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1893"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1692"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1692"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1692"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1695,"date":"2020-05-26T21:27:41","date_gmt":"2020-05-26T21:27:41","guid":{"rendered":"http://python3.foobrdigital.com/?p=1695"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"strategy","status":"publish","type":"post","link":"https://python3.foobrdigital.com/strategy/","title":{"rendered":"Strategy"},"content":{"rendered":"\n<p>The strategy pattern is a type of behavioral pattern. The main goal of strategy pattern is to enable client to choose from different algorithms or procedures to complete the specified task. Different algorithms can be swapped in and out without any complications for the mentioned task.</p>\n\n\n\n<p>This pattern can be used to improve flexibility when external resources are accessed.</p>\n\n\n\n<h2>How to implement the strategy pattern?</h2>\n\n\n\n<p>The program shown below helps in implementing the strategy pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import types\n\nclass StrategyExample:\n   def __init__(self, func = None):\n      self.name = 'Strategy Example 0'\n      if func is not None:\n         self.execute = types.MethodType(func, self)\n\n   def execute(self):\n      print(self.name)\n\ndef execute_replacement1(self): \n   print(self.name + 'from execute 1')\n\ndef execute_replacement2(self):\n   print(self.name + 'from execute 2')\n\nif __name__ == '__main__':\n   strat0 = StrategyExample()\n   strat1 = StrategyExample(execute_replacement1)\n   strat1.name = 'Strategy Example 1'\n   strat2 = StrategyExample(execute_replacement2)\n   strat2.name = 'Strategy Example 2'\n   strat0.execute()\n   strat1.execute()\n   strat2.execute()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"164\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-25.jpg\" alt=\"\" class=\"wp-image-1696\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-25.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-25-300x82.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>It provides a list of strategies from the functions, which execute the output. The major focus of this behavior pattern is behavior.</p>\n","protected":false},"excerpt":{"rendered":"<p>The strategy pattern is a type of behavioral pattern. The main goal of strategy pattern is to enable client to choose from different algorithms or procedures to complete the specified task. Different algorithms can be swapped in and out without any complications for the mentioned task. This pattern can be used to improve flexibility when [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1894,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1695"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1695"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1695/revisions"}],"predecessor-version":[{"id":1697,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1695/revisions/1697"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1894"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1695"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1695"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1695"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1698,"date":"2020-05-26T21:28:55","date_gmt":"2020-05-26T21:28:55","guid":{"rendered":"http://python3.foobrdigital.com/?p=1698"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"template-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/template-2/","title":{"rendered":"Template"},"content":{"rendered":"\n<p>A template pattern defines a basic algorithm in a base class using abstract operation where subclasses override the concrete behavior. The template pattern keeps the outline of algorithm in a separate method. This method is referred as the template method.</p>\n\n\n\n<p>Following are the different features of the template pattern −</p>\n\n\n\n<ul><li>It defines the skeleton of algorithm in an operation</li><li>It includes subclasses, which redefine certain steps of an algorithm.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MakeMeal:\n\n   def prepare(self): pass\n   def cook(self): pass\n   def eat(self): pass\n\n   def go(self):\n      self.prepare()\n      self.cook()\n      self.eat()\n\nclass MakePizza(MakeMeal):\n   def prepare(self):\n      print \"Prepare Pizza\"\n   \n   def cook(self):\n      print \"Cook Pizza\"\n   \n   def eat(self):\n      print \"Eat Pizza\"\n\nclass MakeTea(MakeMeal):\n   def prepare(self):\n      print \"Prepare Tea\"\n\t\n   def cook(self):\n      print \"Cook Tea\"\n   \n   def eat(self):\n      print \"Eat Tea\"\n\nmakePizza = MakePizza()\nmakePizza.go()\n\nprint 25*\"+\"\n\nmakeTea = MakeTea()\nmakeTea.go()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"216\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-26.jpg\" alt=\"\" class=\"wp-image-1699\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-26.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-26-300x108.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>This code creates a template to prepare meal. Here, each parameter represents the attribute to create a part of meal like tea, pizza, etc.</p>\n\n\n\n<p>The output represents the visualization of attributes.</p>\n","protected":false},"excerpt":{"rendered":"<p>A template pattern defines a basic algorithm in a base class using abstract operation where subclasses override the concrete behavior. The template pattern keeps the outline of algorithm in a separate method. This method is referred as the template method. Following are the different features of the template pattern − It defines the skeleton of [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1895,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1698"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1698"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1698/revisions"}],"predecessor-version":[{"id":1700,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1698/revisions/1700"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1895"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1698"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1698"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1698"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1701,"date":"2020-05-26T21:31:54","date_gmt":"2020-05-26T21:31:54","guid":{"rendered":"http://python3.foobrdigital.com/?p=1701"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"flyweight","status":"publish","type":"post","link":"https://python3.foobrdigital.com/flyweight/","title":{"rendered":"Flyweight"},"content":{"rendered":"\n<p>The flyweight pattern comes under the structural design patterns category. It provides a way to decrease object count. It includes various features that help in improving application structure. The most important feature of the flyweight objects is immutable. This means that they cannot be modified once constructed. The pattern uses a HashMap to store reference objects.</p>\n\n\n\n<h2>How to implement the flyweight pattern?</h2>\n\n\n\n<p>The following program helps in implementing the flyweight pattern −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ComplexGenetics(object):\n   def __init__(self):\n      pass\n   \n   def genes(self, gene_code):\n      return \"ComplexPatter&#91;%s]TooHugeinSize\" % (gene_code)\nclass Families(object):\n   family = {}\n   \n   def __new__(cls, name, family_id):\n      try:\n         id = cls.family&#91;family_id]\n      except KeyError:\n         id = object.__new__(cls)\n         cls.family&#91;family_id] = id\n      return id\n   \n   def set_genetic_info(self, genetic_info):\n      cg = ComplexGenetics()\n      self.genetic_info = cg.genes(genetic_info)\n   \n   def get_genetic_info(self):\n      return (self.genetic_info)\n\ndef test():\n   data = (('a', 1, 'ATAG'), ('a', 2, 'AAGT'), ('b', 1, 'ATAG'))\n   family_objects = &#91;]\n   for i in data:\n      obj = Families(i&#91;0], i&#91;1])\n      obj.set_genetic_info(i&#91;2])\n      family_objects.append(obj)\n   \n   for i in family_objects:\n      print \"id = \" + str(id(i))\n      print i.get_genetic_info()\n   print \"similar id's says that they are same objects \"\n\nif __name__ == '__main__':\n   test()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"212\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-27.jpg\" alt=\"\" class=\"wp-image-1702\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-27.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-27-300x106.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>The flyweight pattern comes under the structural design patterns category. It provides a way to decrease object count. It includes various features that help in improving application structure. The most important feature of the flyweight objects is immutable. This means that they cannot be modified once constructed. The pattern uses a HashMap to store reference [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1896,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1701"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1701"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1701/revisions"}],"predecessor-version":[{"id":2353,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1701/revisions/2353"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1896"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1701"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1701"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1701"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1704,"date":"2020-05-26T21:33:17","date_gmt":"2020-05-26T21:33:17","guid":{"rendered":"http://python3.foobrdigital.com/?p=1704"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"abstract-factory","status":"publish","type":"post","link":"https://python3.foobrdigital.com/abstract-factory/","title":{"rendered":"Abstract Factory"},"content":{"rendered":"\n<p>The abstract factory pattern is also called factory of factories. This design pattern comes under the creational design pattern category. It provides one of the best ways to create an object.</p>\n\n\n\n<p>It includes an interface, which is responsible for creating objects related to Factory.</p>\n\n\n\n<h2>How to implement the abstract factory pattern?</h2>\n\n\n\n<p>The following program helps in implementing the abstract factory pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Window:\n   __toolkit = \"\"\n   __purpose = \"\"\n\n   def __init__(self, toolkit, purpose):\n      self.__toolkit = toolkit\n      self.__purpose = purpose\n   \n   def getToolkit(self):\n      return self.__toolkit\n   \n   def getType(self):\n      return self.__purpose\n\nclass GtkToolboxWindow(Window):\n   def __init__(self):\n      Window.__init__(self, \"Gtk\", \"ToolboxWindow\")\n\nclass GtkLayersWindow(Window):\n   def __init__(self):\n      Window.__init__(self, \"Gtk\", \"LayersWindow\")\n\nclass GtkMainWindow(Window):\n   def __init__(self):\n      Window.__init__(self, \"Gtk\", \"MainWindow\")\n\nclass QtToolboxWindow(Window):\n   def __init__(self):\n      Window.__init__(self, \"Qt\", \"ToolboxWindow\")\n\nclass QtLayersWindow(Window):\n   def __init__(self):\n      Window.__init__(self, \"Qt\", \"LayersWindow\")\n\nclass QtMainWindow(Window):\n   def __init__(self):\n      Window.__init__(self, \"Qt\", \"MainWindow\")\n\n# Abstract factory class\nclass UIFactory:\n   def getToolboxWindow(self): pass\n   def getLayersWindow(self): pass\n   def getMainWindow(self): pass\n\nclass GtkUIFactory(UIFactory):\n   def getToolboxWindow(self):\n      return GtkToolboxWindow()\n   def getLayersWindow(self):\n      return GtkLayersWindow()\n   def getMainWindow(self):\n      return GtkMainWindow()\n\nclass QtUIFactory(UIFactory):\n   def getToolboxWindow(self):\n      return QtToolboxWindow()\n   def getLayersWindow(self):\n      return QtLayersWindow()\n   def getMainWindow(self):\n      return QtMainWindow()\n\nif __name__ == \"__main__\":\n   gnome = True\n   kde = not gnome\n   \n   if gnome:\n      ui = GtkUIFactory()\n   elif kde:\n      ui = QtUIFactory()\n   \n   toolbox = ui.getToolboxWindow()\n   layers = ui.getLayersWindow()\n   main = ui.getMainWindow()\n   \n   print \"%s:%s\" % (toolbox.getToolkit(), toolbox.getType())\n   print \"%s:%s\" % (layers.getToolkit(), layers.getType())\n   print \"%s:%s\" % (main.getToolkit(), main.getType())</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"152\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-28.jpg\" alt=\"\" class=\"wp-image-1705\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-28.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-28-300x76.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>In the above program, the abstract factory creates objects for each window. It calls for each method, which executes the output as expected.</p>\n","protected":false},"excerpt":{"rendered":"<p>The abstract factory pattern is also called factory of factories. This design pattern comes under the creational design pattern category. It provides one of the best ways to create an object. It includes an interface, which is responsible for creating objects related to Factory. How to implement the abstract factory pattern? The following program helps [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1909,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1704"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1704"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1704/revisions"}],"predecessor-version":[{"id":1706,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1704/revisions/1706"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1909"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1704"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1704"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1704"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1707,"date":"2020-05-26T21:35:13","date_gmt":"2020-05-26T21:35:13","guid":{"rendered":"http://python3.foobrdigital.com/?p=1707"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"object-oriented","status":"publish","type":"post","link":"https://python3.foobrdigital.com/object-oriented/","title":{"rendered":"Object Oriented"},"content":{"rendered":"\n<p>The object oriented pattern is the most commonly used pattern. This pattern can be found in almost every programming language.</p>\n\n\n\n<h2>How to implement the object oriented pattern?</h2>\n\n\n\n<p>Let us now see how to implement the object oriented pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Parrot:\n   # class attribute\n   species = \"bird\"\n\t\n   # instance attribute\n   def __init__(self, name, age):\n      self.name = name\n      self.age = age\n\t\t\n# instantiate the Parrot class\nblu = Parrot(\"Blu\", 10)\nwoo = Parrot(\"Woo\", 15)\n\n# access the class attributes\nprint(\"Blu is a {}\".format(blu.__class__.species))\nprint(\"Woo is also a {}\".format(woo.__class__.species))\n\n# access the instance attributes\nprint(\"{} is {} years old\".format( blu.name, blu.age))\nprint(\"{} is {} years old\".format( woo.name, woo.age))</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"230\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-29.jpg\" alt=\"\" class=\"wp-image-1708\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-29.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-29-300x115.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>The code includes class attribute and instance attributes, which are printed as per the requirement of the output. There are various features that form part of the object oriented pattern. The features are explained in the next chapter.</p>\n","protected":false},"excerpt":{"rendered":"<p>The object oriented pattern is the most commonly used pattern. This pattern can be found in almost every programming language. How to implement the object oriented pattern? Let us now see how to implement the object oriented pattern. Output The above program generates the following output Explanation The code includes class attribute and instance attributes, [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1910,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1707"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1707"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1707/revisions"}],"predecessor-version":[{"id":1709,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1707/revisions/1709"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1910"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1707"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1707"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1707"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1710,"date":"2020-05-26T21:36:49","date_gmt":"2020-05-26T21:36:49","guid":{"rendered":"http://python3.foobrdigital.com/?p=1710"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"object-oriented-concepts-implementation","status":"publish","type":"post","link":"https://python3.foobrdigital.com/object-oriented-concepts-implementation/","title":{"rendered":"Object Oriented Concepts Implementation"},"content":{"rendered":"\n<p>In this chapter, we will focus on patterns using object oriented concepts and its implementation in Python. When we design our programs around blocks of statements, which manipulate the data around functions, it is called procedure-oriented programming. In object-oriented programming, there are two main instances called classes and objects.</p>\n\n\n\n<h2>How to implement classes and object variables?</h2>\n\n\n\n<p>The implementation of classes and object variables are as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Robot:\n   population = 0\n   \n   def __init__(self, name):\n      self.name = name\n      print(\"(Initializing {})\".format(self.name))\n      Robot.population += 1\n   \n   def die(self):\n      print(\"{} is being destroyed!\".format(self.name))\n      Robot.population -= 1\n      if Robot.population == 0:\n         print(\"{} was the last one.\".format(self.name))\n      else:\n         print(\"There are still {:d} robots working.\".format(\n            Robot.population))\n   \n   def say_hi(self):\n      print(\"Greetings, my masters call me {}.\".format(self.name))\n   \n   @classmethod\n   def how_many(cls):\n      print(\"We have {:d} robots.\".format(cls.population))\ndroid1 = Robot(\"R2-D2\")\ndroid1.say_hi()\nRobot.how_many()\n\ndroid2 = Robot(\"C-3PO\")\ndroid2.say_hi()\nRobot.how_many()\n\nprint(\"\\nRobots can do some work here.\\n\")\n\nprint(\"Robots have finished their work. So let's destroy them.\")\ndroid1.die()\ndroid2.die()\n\nRobot.how_many()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"298\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-30.jpg\" alt=\"\" class=\"wp-image-1711\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-30.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-30-300x149.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>This illustration helps to demonstrate the nature of class and object variables.</p>\n\n\n\n<ul><li>“population” belongs to the “Robot” class. Hence, it is referred to as a class variable or object.</li><li>Here, we refer to the population class variable as Robot.population and not as self.population.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will focus on patterns using object oriented concepts and its implementation in Python. When we design our programs around blocks of statements, which manipulate the data around functions, it is called procedure-oriented programming. In object-oriented programming, there are two main instances called classes and objects. How to implement classes and object [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1911,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1710"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1710"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1710/revisions"}],"predecessor-version":[{"id":1712,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1710/revisions/1712"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1911"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1710"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1710"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1710"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1713,"date":"2020-05-26T21:38:41","date_gmt":"2020-05-26T21:38:41","guid":{"rendered":"http://python3.foobrdigital.com/?p=1713"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"iterator","status":"publish","type":"post","link":"https://python3.foobrdigital.com/iterator/","title":{"rendered":"Iterator"},"content":{"rendered":"\n<p>The iterator design pattern falls under the behavioral design patterns category. Developers come across the iterator pattern in almost every programming language. This pattern is used in such a way that it helps to access the elements of a collection (class) in sequential manner without understanding the underlying layer design.</p>\n\n\n\n<h2>How to implement the iterator pattern?</h2>\n\n\n\n<p>We will now see how to implement the iterator pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import time\n\ndef fib():\n   a, b = 0, 1\n   while True:\n      yield b\n      a, b = b, a + b\n\ng = fib()\n\ntry:\n   for e in g:\n      print(e)\n      time.sleep(1)\n\nexcept KeyboardInterrupt:\n   print(\"Calculation stopped\")</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"246\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-31.jpg\" alt=\"\" class=\"wp-image-1714\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-31.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-31-300x123.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>If you focus on the pattern, Fibonacci series is printed with the iterator pattern. On forceful termination of user, the following output is printed −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"300\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-32.jpg\" alt=\"\" class=\"wp-image-1715\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-32.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-32-300x150.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>This python code follows the iterator pattern. Here, the increment operators are used to start the count. The count ends on forceful termination by the user.</p>\n","protected":false},"excerpt":{"rendered":"<p>The iterator design pattern falls under the behavioral design patterns category. Developers come across the iterator pattern in almost every programming language. This pattern is used in such a way that it helps to access the elements of a collection (class) in sequential manner without understanding the underlying layer design. How to implement the iterator [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1900,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1713"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1713"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1713/revisions"}],"predecessor-version":[{"id":1716,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1713/revisions/1716"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1900"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1713"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1713"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1713"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1717,"date":"2020-05-26T21:40:13","date_gmt":"2020-05-26T21:40:13","guid":{"rendered":"http://python3.foobrdigital.com/?p=1717"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"dictionaries","status":"publish","type":"post","link":"https://python3.foobrdigital.com/dictionaries/","title":{"rendered":"Dictionaries"},"content":{"rendered":"\n<p>Dictionaries are the data structures, which include a key value combination. These are widely used in place of JSON – JavaScript Object Notation. Dictionaries are used for API (Application Programming Interface) programming. A dictionary maps a set of objects to another set of objects. Dictionaries are mutable; this means they can be changed as and when needed based on the requirements.</p>\n\n\n\n<h2>How to implement dictionaries in Python?</h2>\n\n\n\n<p>The following program shows the basic implementation of dictionaries in Python starting from its creation to its implementation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Create a new dictionary\nd = dict() # or d = {}\n\n# Add a key - value pairs to dictionary\nd&#91;'xyz'] = 123\nd&#91;'abc'] = 345\n\n# print the whole dictionary\nprint(d)\n\n# print only the keys\nprint(d.keys())\n\n# print only values\nprint(d.values())\n\n# iterate over dictionary\nfor i in d :\n   print(\"%s %d\" %(i, d&#91;i]))\n\t\n# another method of iteration\nfor index, value in enumerate(d):\n   print (index, value , d&#91;value])\n\n# check if key exist 23. Python Data Structure –print('xyz' in d)\n\n# delete the key-value pair\ndel d&#91;'xyz']\n\n# check again\nprint(\"xyz\" in d)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"258\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-33.jpg\" alt=\"\" class=\"wp-image-1718\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-33.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-33-300x129.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p><strong>Note −</strong>There are drawbacks related to the implementation of dictionaries in Python.</p>\n\n\n\n<h3>Drawback</h3>\n\n\n\n<p>Dictionaries do not support the sequence operation of the sequence data types like strings, tuples and lists. These belong to the built-in mapping type.</p>\n","protected":false},"excerpt":{"rendered":"<p>Dictionaries are the data structures, which include a key value combination. These are widely used in place of JSON – JavaScript Object Notation. Dictionaries are used for API (Application Programming Interface) programming. A dictionary maps a set of objects to another set of objects. Dictionaries are mutable; this means they can be changed as and [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1901,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1717"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1717"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1717/revisions"}],"predecessor-version":[{"id":1719,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1717/revisions/1719"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1901"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1717"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1717"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1717"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1720,"date":"2020-05-26T21:42:19","date_gmt":"2020-05-26T21:42:19","guid":{"rendered":"http://python3.foobrdigital.com/?p=1720"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"lists-data-structure","status":"publish","type":"post","link":"https://python3.foobrdigital.com/lists-data-structure/","title":{"rendered":"Lists Data Structure"},"content":{"rendered":"\n<p>The Lists data structure is a versatile data type in Python, which can be written as a list of comma separated values between square brackets.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>Here is the basic syntax for the structure −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>List_name = &#91; elements ];</code></pre>\n\n\n\n<p>If you observe, the syntax is declared like arrays with the only difference that lists can include elements with different data types. The arrays include elements of the same data type. A list can contain a combination of strings, integers and objects. Lists can be used for the implementation of stacks and queues.</p>\n\n\n\n<p>Lists are mutable. These can be changed as and when needed.</p>\n\n\n\n<h2>How to implement lists?</h2>\n\n\n\n<p>The following program shows the implementations of lists −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>my_list = &#91;'p','r','o','b','e']\n# Output: p\nprint(my_list&#91;0])\n\n# Output: o\nprint(my_list&#91;2])\n\n# Output: e\nprint(my_list&#91;4])\n\n# Error! Only integer can be used for indexing\n# my_list&#91;4.0]\n\n# Nested List\nn_list = &#91;\"Happy\", &#91;2,0,1,5]]\n\n# Nested indexing\n\n# Output: a\nprint(n_list&#91;0]&#91;1])\n\n# Output: 5\nprint(n_list&#91;1]&#91;3])</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"216\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-34.jpg\" alt=\"\" class=\"wp-image-1721\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-34.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-34-300x108.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>The built-in functions of Python lists are as follows −</p>\n\n\n\n<ul><li><strong>Append()</strong>− It adds element to the end of list.</li><li><strong>Extend()</strong>− It adds elements of the list to another list.</li><li><strong>Insert()</strong>− It inserts an item to the defined index.</li><li><strong>Remove()</strong>− It deletes the element from the specified list.</li><li><strong>Reverse()</strong>− It reverses the elements in list.</li><li><strong>sort()</strong>&nbsp;− It helps to sort elements in chronological order.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>The Lists data structure is a versatile data type in Python, which can be written as a list of comma separated values between square brackets. Syntax Here is the basic syntax for the structure − If you observe, the syntax is declared like arrays with the only difference that lists can include elements with different [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1902,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1720"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1720"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1720/revisions"}],"predecessor-version":[{"id":2354,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1720/revisions/2354"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1902"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1720"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1720"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1720"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1723,"date":"2020-05-26T21:44:31","date_gmt":"2020-05-26T21:44:31","guid":{"rendered":"http://python3.foobrdigital.com/?p=1723"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"sets","status":"publish","type":"post","link":"https://python3.foobrdigital.com/sets/","title":{"rendered":"Sets"},"content":{"rendered":"\n<p>A set can be defined as unordered collection that is iterable, mutable and there is no inclusion of duplicate elements in it. In Python, set class is a notation of mathematical set. The main advantage of using a set is that it includes highly optimized method for checking specific element.</p>\n\n\n\n<p>Python includes a separate category called frozen sets. These sets are immutable objects that only support methods and operators that produce a required result.</p>\n\n\n\n<h2>How to implement sets?</h2>\n\n\n\n<p>The following program helps in the implementation of sets −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Set in Python\n\n# Creating two sets\nset1 = set()\nset2 = set()\n\n# Adding elements to set1\nfor i in range(1, 6):\n   set1.add(i)\n\n# Adding elements to set2\nfor i in range(3, 8):\n   set2.add(i)\n\nprint(\"Set1 = \", set1)\nprint(\"Set2 = \", set2)\nprint(\"\\n\")\n\n# Union of set1 and set2\nset3 = set1 | set2# set1.union(set2)\nprint(\"Union of Set1 &amp; Set2: Set3 = \", set3)\n\n# Intersection of set1 and set2\nset4 = set1 &amp; set2# set1.intersection(set2)\nprint(\"Intersection of Set1 &amp; Set2: Set4 = \", set4)\nprint(\"\\n\")\n\n# Checking relation between set3 and set4\nif set3 > set4: # set3.issuperset(set4)\n   print(\"Set3 is superset of Set4\")\nelif set3 &lt; set4: # set3.issubset(set4)\n   print(\"Set3 is subset of Set4\")\nelse : # set3 == set4\n   print(\"Set3 is same as Set4\")\n\n# displaying relation between set4 and set3\nif set4 &lt; set3: # set4.issubset(set3)\n   print(\"Set4 is subset of Set3\")\n   print(\"\\n\")\n\n# difference between set3 and set4\nset5 = set3 - set4\nprint(\"Elements in Set3 and not in Set4: Set5 = \", set5)\nprint(\"\\n\")\n\n# checkv if set4 and set5 are disjoint sets\nif set4.isdisjoint(set5):\n   print(\"Set4 and Set5 have nothing in common\\n\")\n\n# Removing all the values of set5\nset5.clear()\n\nprint(\"After applying clear on sets Set5: \")\nprint(\"Set5 = \", set5)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"345\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-35.jpg\" alt=\"\" class=\"wp-image-1724\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-35.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-35-300x173.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>The frozen set can be demonstrated using the following program −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>normal_set = set(&#91;\"a\", \"b\",\"c\"])\n\n# Adding an element to normal set is fine\nnormal_set.add(\"d\")\n\nprint(\"Normal Set\")\nprint(normal_set)\n\n# A frozen set\nfrozen_set = frozenset(&#91;\"e\", \"f\", \"g\"])\n\nprint(\"Frozen Set\")\nprint(frozen_set)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"205\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-36.jpg\" alt=\"\" class=\"wp-image-1725\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-36.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-36-300x103.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>A set can be defined as unordered collection that is iterable, mutable and there is no inclusion of duplicate elements in it. In Python, set class is a notation of mathematical set. The main advantage of using a set is that it includes highly optimized method for checking specific element. Python includes a separate category [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1903,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1723"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1723"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1723/revisions"}],"predecessor-version":[{"id":1726,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1723/revisions/1726"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1903"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1723"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1723"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1723"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1727,"date":"2020-05-26T21:47:12","date_gmt":"2020-05-26T21:47:12","guid":{"rendered":"http://python3.foobrdigital.com/?p=1727"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"queues","status":"publish","type":"post","link":"https://python3.foobrdigital.com/queues/","title":{"rendered":"Queues"},"content":{"rendered":"\n<p>Queue is a collection of objects, which define a simple data structure following the FIFO (Fast In Fast Out) and the LIFO (Last In First Out) procedures. The insert and delete operations are referred as&nbsp;<strong>enqueue</strong>&nbsp;and&nbsp;<strong>dequeue</strong>&nbsp;operations.</p>\n\n\n\n<p>Queues do not allow random access to the objects they contain.</p>\n\n\n\n<h2>How to implement the FIFO procedure?</h2>\n\n\n\n<p>The following program helps in the implementation of FIFO −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Queue\n\nq = Queue.Queue()\n\n#put items at the end of the queue\nfor x in range(4):\n   q.put(\"item-\" + str(x))\n\n#remove items from the head of the queue\nwhile not q.empty():\n   print q.get()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"205\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-37.jpg\" alt=\"\" class=\"wp-image-1728\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-37.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-37-300x103.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h2>How to implement the LIFO procedure?</h2>\n\n\n\n<p>The following program helps in the implementation of the LIFO procedure −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Queue\n\nq = Queue.LifoQueue()\n\n#add items at the head of the queue\nfor x in range(4):\n   q.put(\"item-\" + str(x))\n\n#remove items from the head of the queue\nwhile not q.empty():\n   print q.get()</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"203\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-38.jpg\" alt=\"\" class=\"wp-image-1729\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-38.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-38-300x102.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h2>What is a Priority Queue?</h2>\n\n\n\n<p>Priority queue is a container data structure that manages a set of records with the ordered keys to provide quick access to the record with smallest or largest key in specified data structure.</p>\n\n\n\n<h3>How to implement a priority queue?</h3>\n\n\n\n<p>The implementation of priority queue is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Queue\n\nclass Task(object):\n   def __init__(self, priority, name):\n      self.priority = priority\n      self.name = name\n   \n   def __cmp__(self, other):\n      return cmp(self.priority, other.priority)\n\nq = Queue.PriorityQueue()\n\nq.put( Task(100, 'a not agent task') )\nq.put( Task(5, 'a highly agent task') )\nq.put( Task(10, 'an important task') )\n\nwhile not q.empty():\n   cur_task = q.get()\n\tprint 'process task:', cur_task.name</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"206\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-39.jpg\" alt=\"\" class=\"wp-image-1730\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-39.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-39-300x103.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>Queue is a collection of objects, which define a simple data structure following the FIFO (Fast In Fast Out) and the LIFO (Last In First Out) procedures. The insert and delete operations are referred as&nbsp;enqueue&nbsp;and&nbsp;dequeue&nbsp;operations. Queues do not allow random access to the objects they contain. How to implement the FIFO procedure? The following program [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1904,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1727"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1727"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1727/revisions"}],"predecessor-version":[{"id":1731,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1727/revisions/1731"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1904"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1727"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1727"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1727"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1732,"date":"2020-05-26T21:49:00","date_gmt":"2020-05-26T21:49:00","guid":{"rendered":"http://python3.foobrdigital.com/?p=1732"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"strings-and-serialization","status":"publish","type":"post","link":"https://python3.foobrdigital.com/strings-and-serialization/","title":{"rendered":"Strings and Serialization"},"content":{"rendered":"\n<p>String serialization is the process of writing a state of object into a byte stream. In python, the “pickle” library is used for enabling serialization. This module includes a powerful algorithm for serializing and de-serializing a Python object structure. “Pickling” is the process of converting Python object hierarchy into byte stream and “unpickling” is the reverse procedure.</p>\n\n\n\n<p>The demonstration of the pickle module is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pickle\n\n#Here's an example dict\ngrades = { 'Alice': 89, 'Bob': 72, 'Charles': 87 }\n\n#Use dumps to convert the object to a serialized string\nserial_grades = pickle.dumps( grades )\nprint(serial_grades)\n\n#Use loads to de-serialize an object\nreceived_grades = pickle.loads( serial_grades )\nprint(received_grades)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"238\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-40.jpg\" alt=\"\" class=\"wp-image-1733\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-40.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-40-300x119.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>String serialization is the process of writing a state of object into a byte stream. In python, the “pickle” library is used for enabling serialization. This module includes a powerful algorithm for serializing and de-serializing a Python object structure. “Pickling” is the process of converting Python object hierarchy into byte stream and “unpickling” is the [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1905,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1732"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1732"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1732/revisions"}],"predecessor-version":[{"id":1734,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1732/revisions/1734"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1905"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1732"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1732"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1732"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1735,"date":"2020-05-26T21:50:16","date_gmt":"2020-05-26T21:50:16","guid":{"rendered":"http://python3.foobrdigital.com/?p=1735"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"concurrency-in-python","status":"publish","type":"post","link":"https://python3.foobrdigital.com/concurrency-in-python/","title":{"rendered":"Concurrency in Python"},"content":{"rendered":"\n<p>Concurrency is often misunderstood as parallelism. Concurrency implies scheduling independent code to be executed in a systematic manner. This chapter focuses on the execution of concurrency for an operating system using Python.</p>\n\n\n\n<p>The following program helps in the execution of concurrency for an operating system −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import os\nimport time\nimport threading\nimport multiprocessing\n\nNUM_WORKERS = 4\n\ndef only_sleep():\n   print(\"PID: %s, Process Name: %s, Thread Name: %s\" % (\n      os.getpid(),\n      multiprocessing.current_process().name,\n      threading.current_thread().name)\n   )\n   time.sleep(1)\n\ndef crunch_numbers():\n   print(\"PID: %s, Process Name: %s, Thread Name: %s\" % (\n      os.getpid(),\n      multiprocessing.current_process().name,\n      threading.current_thread().name)\n   )\n   x = 0\n   while x &lt; 10000000:\n      x += 1\nfor _ in range(NUM_WORKERS):\n   only_sleep()\nend_time = time.time()\nprint(\"Serial time=\", end_time - start_time)\n\n# Run tasks using threads\nstart_time = time.time()\nthreads = &#91;threading.Thread(target=only_sleep) for _ in range(NUM_WORKERS)]\n&#91;thread.start() for thread in threads]\n&#91;thread.join() for thread in threads]\nend_time = time.time()\n\nprint(\"Threads time=\", end_time - start_time)\n\n# Run tasks using processes\nstart_time = time.time()\nprocesses = &#91;multiprocessing.Process(target=only_sleep()) for _ in range(NUM_WORKERS)]\n&#91;process.start() for process in processes]\n&#91;process.join() for process in processes]\nend_time = time.time()\n\nprint(\"Parallel time=\", end_time - start_time)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"203\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-41.jpg\" alt=\"\" class=\"wp-image-1736\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-41.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-41-300x102.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>“multiprocessing” is a package similar to the threading module. This package supports local and remote concurrency. Due to this module, programmers get the advantage to use multiple processes on the given system.</p>\n","protected":false},"excerpt":{"rendered":"<p>Concurrency is often misunderstood as parallelism. Concurrency implies scheduling independent code to be executed in a systematic manner. This chapter focuses on the execution of concurrency for an operating system using Python. The following program helps in the execution of concurrency for an operating system − Output The above program generates the following output − [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1912,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1735"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1735"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1735/revisions"}],"predecessor-version":[{"id":1737,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1735/revisions/1737"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1912"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1735"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1735"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1735"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1738,"date":"2020-05-26T21:51:41","date_gmt":"2020-05-26T21:51:41","guid":{"rendered":"http://python3.foobrdigital.com/?p=1738"},"modified":"2020-12-16T16:52:47","modified_gmt":"2020-12-16T16:52:47","slug":"anti","status":"publish","type":"post","link":"https://python3.foobrdigital.com/anti/","title":{"rendered":"Anti"},"content":{"rendered":"\n<p>Anti-patterns follow a strategy in opposition to predefined design patterns. The strategy includes common approaches to common problems, which can be formalized and can be generally considered as a good development practice. Usually, anti-patterns are opposite and undesirable. Anti- patterns are certain patterns used in software development, which are considered as bad programming practices.</p>\n\n\n\n<h2>Important features of anti-patterns</h2>\n\n\n\n<p>Let us now see a few important features of anti-patterns.</p>\n\n\n\n<h3>Correctness</h3>\n\n\n\n<p>These patterns literally break your code and make you do wrong things. Following is a simple illustration of this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Rectangle(object):\ndef __init__(self, width, height):\nself._width = width\nself._height = height\nr = Rectangle(5, 6)\n# direct access of protected member\nprint(\"Width: {:d}\".format(r._width))</code></pre>\n\n\n\n<h3>Maintainability</h3>\n\n\n\n<p>A program is said to be maintainable if it is easy to understand and modify as per the requirement. Importing module can be considered as an example of maintainability.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import math\nx = math.ceil(y)\n# or\nimport multiprocessing as mp\npool = mp.pool(8)</code></pre>\n\n\n\n<h3>Example of anti-pattern</h3>\n\n\n\n<p>Following example helps in the demonstration of anti-patterns −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Bad\ndef filter_for_foo(l):\n   r = &#91;e for e in l if e.find(\"foo\") != -1]\n   if not check_some_critical_condition(r):\n      return None\n   return r\n\nres = filter_for_foo(&#91;\"bar\",\"foo\",\"faz\"])\n\nif res is not None:\n   #continue processing\n   pass\n\n#Good\ndef filter_for_foo(l):\n   r = &#91;e for e in l if e.find(\"foo\") != -1]\n   if not check_some_critical_condition(r):\n      raise SomeException(\"critical condition unmet!\")\n   return r\n\ntry:\n   res = filter_for_foo(&#91;\"bar\",\"foo\",\"faz\"])\n   #continue processing\n\nexcept SomeException:\n   i = 0\nwhile i &lt; 10:\n   do_something()\n   #we forget to increment i</code></pre>\n\n\n\n<h3>Explanation</h3>\n\n\n\n<p>The example includes the demonstration of good and bad standards for creating a function in Python.</p>\n","protected":false},"excerpt":{"rendered":"<p>Anti-patterns follow a strategy in opposition to predefined design patterns. The strategy includes common approaches to common problems, which can be formalized and can be generally considered as a good development practice. Usually, anti-patterns are opposite and undesirable. Anti- patterns are certain patterns used in software development, which are considered as bad programming practices. Important [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1913,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1738"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1738"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1738/revisions"}],"predecessor-version":[{"id":1739,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1738/revisions/1739"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1913"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1738"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1738"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1738"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1740,"date":"2020-05-26T21:53:19","date_gmt":"2020-05-26T21:53:19","guid":{"rendered":"http://python3.foobrdigital.com/?p=1740"},"modified":"2020-12-16T16:52:46","modified_gmt":"2020-12-16T16:52:46","slug":"exception-handling","status":"publish","type":"post","link":"https://python3.foobrdigital.com/exception-handling/","title":{"rendered":"Exception Handling"},"content":{"rendered":"\n<p>Handling exceptions is also a primary criterion of design patterns. An exception is an error that happens during the execution of a program. When a particular error occurs, it is important to generate an exception. This helps in curbing program crashes.</p>\n\n\n\n<h2>Why use exceptions?</h2>\n\n\n\n<p>Exceptions are convenient ways of handling errors and special conditions in a program. When a user thinks that the specified code can produce an error then it is important to use exception handling.</p>\n\n\n\n<h3>Example – Division by zero</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\n\nrandomList = &#91;'a', 0, 2]\n\nfor entry in randomList:\n   try:\n      print(\"The entry is\", entry)\n      r = 1/int(entry)\n      break\n   except:\n      print(\"Oops!\",sys.exc_info()&#91;0],\"occured.\")\n      print(\"Next entry.\")\n      print()\nprint(\"The reciprocal of\",entry,\"is\",r)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above program generates the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"234\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-42.jpg\" alt=\"\" class=\"wp-image-1741\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-42.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/Python-42-300x117.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h3>Raising Exceptions</h3>\n\n\n\n<p>In Python programming specifically, exceptions are raised when corresponding error of code occurs at run time. This can be forcefully raised using the&nbsp;<strong>“raise”</strong>&nbsp;keyword.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>   raise KeyboardInterrupt\nTraceback (most recent call last):\n...\nKeyboardInterrupt</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Handling exceptions is also a primary criterion of design patterns. An exception is an error that happens during the execution of a program. When a particular error occurs, it is important to generate an exception. This helps in curbing program crashes. Why use exceptions? Exceptions are convenient ways of handling errors and special conditions in [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1908,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[60,20,140],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1740"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=1740"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1740/revisions"}],"predecessor-version":[{"id":1742,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/1740/revisions/1742"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1908"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=1740"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=1740"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=1740"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]