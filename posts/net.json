[
  {
    "id": 3430,
    "date": "2020-09-07T08:57:47",
    "date_gmt": "2020-09-07T08:57:47",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3430"
    },
    "modified": "2020-09-07T08:57:47",
    "modified_gmt": "2020-09-07T08:57:47",
    "slug": "introduction-7",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-7/",
    "title": {
      "rendered": "Introduction"
    },
    "content": {
      "rendered": "\n<p>ASP.NET is a web development platform, which provides a programming model, a comprehensive software infrastructure and various services required to build up robust web applications for PC, as well as mobile devices.</p>\n\n\n\n<p>ASP.NET works on top of the HTTP protocol, and uses the HTTP commands and policies to set a browser-to-server bilateral communication and cooperation.</p>\n\n\n\n<p>ASP.NET is a part of Microsoft .Net platform. ASP.NET applications are compiled codes, written using the extensible and reusable components or objects present in .Net framework. These codes can use the entire hierarchy of classes in .Net framework.</p>\n\n\n\n<p>The ASP.NET application codes can be written in any of the following languages:</p>\n\n\n\n<ul><li>C#</li><li>Visual Basic.Net</li><li>Jscript</li><li>J#</li></ul>\n\n\n\n<p>ASP.NET is used to produce interactive, data-driven web applications over the internet. It consists of a large number of controls such as text boxes, buttons, and labels for assembling, configuring, and manipulating code to create HTML pages.</p>\n\n\n\n<h2>ASP.NET Web Forms Model</h2>\n\n\n\n<p>ASP.NET web forms extend the event-driven model of interaction to the web applications. The browser submits a web form to the web server and the server returns a full markup page or HTML page in response.</p>\n\n\n\n<p>All client side user activities are forwarded to the server for stateful processing. The server processes the output of the client actions and triggers the reactions.</p>\n\n\n\n<p>Now, HTTP is a stateless protocol. ASP.NET framework helps in storing the information regarding the state of the application, which consists of:</p>\n\n\n\n<ul><li>Page state</li><li>Session state</li></ul>\n\n\n\n<p>The page state is the state of the client, i.e., the content of various input fields in the web form. The session state is the collective information obtained from various pages the user visited and worked with, i.e., the overall session state. To clear the concept, let us take an example of a shopping cart.</p>\n\n\n\n<p>User adds items to a shopping cart. Items are selected from a page, say the items page, and the total collected items and price are shown on a different page, say the cart page. Only HTTP cannot keep track of all the information coming from various pages. ASP.NET session state and server side infrastructure keeps track of the information collected globally over a session.</p>\n\n\n\n<p>The ASP.NET runtime carries the page state to and from the server across page requests while generating ASP.NET runtime codes, and incorporates the state of the server side components in hidden fields.</p>\n\n\n\n<p>This way, the server becomes aware of the overall application state and operates in a two-tiered connected way.</p>\n\n\n\n<h2>The ASP.NET Component Model</h2>\n\n\n\n<p>The ASP.NET component model provides various building blocks of ASP.NET pages. Basically it is an object model, which describes:</p>\n\n\n\n<ul><li>Server side counterparts of almost all HTML elements or tags, such as &lt;form&gt; and &lt;input&gt;.</li><li>Server controls, which help in developing complex user-interface. For example, the Calendar control or the Gridview control.</li></ul>\n\n\n\n<p>ASP.NET is a technology, which works on the .Net framework that contains all web-related functionalities. The .Net framework is made of an object-oriented hierarchy. An ASP.NET web application is made of pages. When a user requests an ASP.NET page, the IIS delegates the processing of the page to the ASP.NET runtime system.</p>\n\n\n\n<p>The ASP.NET runtime transforms the .aspx page into an instance of a class, which inherits from the base class page of the .Net framework. Therefore, each ASP.NET page is an object and all its components i.e., the server-side controls are also objects.</p>\n\n\n\n<h2>Components of .Net Framework 3.5</h2>\n\n\n\n<p>Before going to the next session on Visual Studio.Net, let us go through at the various components of the .Net framework 3.5. The following table describes the components of the .Net framework 3.5 and the job they perform:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Components and their Description</th></tr><tr><td><strong>(1) Common Language Runtime or CLR</strong>It performs memory management, exception handling, debugging, security checking, thread execution, code execution, code safety, verification, and compilation. The code that is directly managed by the CLR is called the managed code. When the managed code is compiled, the compiler converts the source code into a CPU independent intermediate language (IL) code. A Just In Time(JIT) compiler compiles the IL code into native code, which is CPU specific.</td></tr><tr><td><strong>(2) .Net Framework Class Library</strong>It contains a huge library of reusable types. classes, interfaces, structures, and enumerated values, which are collectively called types.</td></tr><tr><td><strong>(3) Common Language Specification</strong>It contains the specifications for the .Net supported languages and implementation of language integration.</td></tr><tr><td><strong>(4) Common Type System</strong>It provides guidelines for declaring, using, and managing types at runtime, and cross-language communication.</td></tr><tr><td><strong>(5) Metadata and Assemblies</strong>Metadata is the binary information describing the program, which is either stored in a portable executable file (PE) or in the memory. Assembly is a logical unit consisting of the assembly manifest, type metadata, IL code, and a set of resources like image files.</td></tr><tr><td><strong>(6) Windows Forms</strong>Windows Forms contain the graphical representation of any window displayed in the application.</td></tr><tr><td><strong>(7) ASP.NET and ASP.NET AJAX</strong>ASP.NET is the web development model and AJAX is an extension of ASP.NET for developing and implementing AJAX functionality. ASP.NET AJAX contains the components that allow the developer to update data on a website without a complete reload of the page.</td></tr><tr><td><strong>(8) ADO.NET</strong>It is the technology used for working with data and databases. It provides access to data sources like SQL server, OLE DB, XML etc. The ADO.NET allows connection to data sources for retrieving, manipulating, and updating data.</td></tr><tr><td><strong>(9) Windows Workflow Foundation (WF)</strong>It helps in building workflow-based applications in Windows. It contains activities, workflow runtime, workflow designer, and a rules engine.</td></tr><tr><td><strong>(10) Windows Presentation Foundation</strong>It provides a separation between the user interface and the business logic. It helps in developing visually stunning interfaces using documents, media, two and three dimensional graphics, animations, and more.</td></tr><tr><td><strong>(11) Windows Communication Foundation (WCF)</strong>It is the technology used for building and executing connected systems.</td></tr><tr><td><strong>(12) Windows CardSpace</strong>It provides safety for accessing resources and sharing personal information on the internet.</td></tr><tr><td><strong>(13) LINQ</strong>It imparts data querying capabilities to .Net languages using a syntax which is similar to the tradition query language SQL.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET is a web development platform, which provides a programming model, a comprehensive software infrastructure and various services required to build up robust web applications for PC, as well as mobile devices. ASP.NET works on top of the HTTP protocol, and uses the HTTP commands and policies to set a browser-to-server bilateral communication and cooperation. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3430"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3430"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3430/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3430"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3430"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3430"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3434,
    "date": "2020-09-07T09:00:25",
    "date_gmt": "2020-09-07T09:00:25",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3434"
    },
    "modified": "2020-09-07T09:00:25",
    "modified_gmt": "2020-09-07T09:00:25",
    "slug": "page-lifecycle",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/page-lifecycle/",
    "title": {
      "rendered": "Environment Setup"
    },
    "content": {
      "rendered": "\n<p>ASP.NET provides an abstraction layer on top of HTTP on which the web applications are built. It provides high-level entities such as classes and components within an object-oriented paradigm.</p>\n\n\n\n<p>The key development tool for building ASP.NET applications and front ends is Visual Studio. In this tutorial, we work with Visual Studio 2008.</p>\n\n\n\n<p>Visual Studio is an integrated development environment for writing, compiling, and debugging the code. It provides a complete set of development tools for building ASP.NET web applications, web services, desktop applications, and mobile applications.</p>\n\n\n\n<h2>Installation</h2>\n\n\n\n<p>Microsoft provides a free version of visual studio which also contains SQL Server and it can be downloaded from&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://www.visualstudio.com/downloads/download-visual-studio-vs/\">www.visualstudio.com</a>.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Once downloading is complete, run the installer. The following dialog will be displayed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/visual_studio_installer.jpg\" alt=\"Visual Studio Installer\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Click on the Install button and it will start the installation process.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/installation_process.jpg\" alt=\"Installation Process\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Once the installation process is completed successfully, you will see the following dialog. Close this dialog and restart your computer if required.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/setup_completed.jpg\" alt=\"Setup Completed\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Open Visual Studio from start Menu which will open the following dialog. It will be a while for the first time for preparation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/visual_studio.jpg\" alt=\"Visual Studio\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Once all is done you will see the main window of Visual studio.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/main_window.jpg\" alt=\"Main Window\"/></figure>\n\n\n\n<p>Let’s create a new project from File → New → Project</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/new_project.jpg\" alt=\"New Project\"/></figure>\n\n\n\n<h2>The Visual Studio IDE</h2>\n\n\n\n<p>The new project window allows choosing an application template from the available templates.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/new_project.jpg\" alt=\"Visual Studio IDE\"/></figure>\n\n\n\n<p>When you start a new web site, ASP.NET provides the starting folders and files for the site, including two files for the first web form of the site.</p>\n\n\n\n<p>The file named Default.aspx contains the HTML and asp code that defines the form, and the file named Default.aspx.cs (for C# coding) or the file named Default.aspx.vb (for VB coding) contains the code in the language you have chosen and this code is responsible for the actions performed on a form.</p>\n\n\n\n<p>The primary window in the Visual Studio IDE is the Web Forms Designer window. Other supporting windows are the Toolbox, the Solution Explorer, and the Properties window. You use the designer to design a web form, to add code to the control on the form so that the form works according to your need, you use the code editor.</p>\n\n\n\n<h2>Working with Views and Windows</h2>\n\n\n\n<p>You can work with windows in the following ways:</p>\n\n\n\n<ul><li>To change the Web Forms Designer from one view to another, click on the Design or source button.</li><li>To close a window, click on the close button on the upper right corner and to redisplay, select it from the View menu.</li><li>To hide a window, click on its Auto Hide button. The window then changes into a tab. To display again, click the Auto Hide button again.</li><li>To change the size of a window, just drag it.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/views_and_windows.jpg\" alt=\"views and windows\"/></figure>\n\n\n\n<h2>Adding Folders and Files to your Website</h2>\n\n\n\n<p>When a new web form is created, Visual Studio automatically generates the starting HTML for the form and displays it in Source view of the web forms designer. The Solution Explorer is used to add any other files, folders or any existing item on the web site.</p>\n\n\n\n<ul><li>To add a standard folder, right-click on the project or folder under which you are going to add the folder in the Solution Explorer and choose New Folder.</li><li>To add an ASP.NET folder, right-click on the project in the Solution Explorer and select the folder from the list.</li><li>To add an existing item to the site, right-click on the project or folder under which you are going to add the item in the Solution Explorer and select from the dialog box.</li></ul>\n\n\n\n<h2>Projects and Solutions</h2>\n\n\n\n<p>A typical ASP.NET application consists of many items: the web content files (.aspx), source files (.cs files), assemblies (.dll and .exe files), data source files (.mdb files), references, icons, user controls and miscellaneous other files and folders. All these files that make up the website are contained in a Solution.</p>\n\n\n\n<p>When a new website is created. VB2008 automatically creates the solution and displays it in the solution explorer.</p>\n\n\n\n<p>Solutions may contain one or more projects. A project contains content files, source files, and other files like data sources and image files. Generally, the contents of a project are compiled into an assembly as an executable file (.exe) or a dynamic link library (.dll) file.</p>\n\n\n\n<p>Typically a project contains the following content files:</p>\n\n\n\n<ul><li>Page file (.aspx)</li><li>User control (.ascx)</li><li>Web service (.asmx)</li><li>Master page (.master)</li><li>Site map (.sitemap)</li><li>Website configuration file (.config)</li></ul>\n\n\n\n<h2>Building and Running a Project</h2>\n\n\n\n<p>You can execute an application by:</p>\n\n\n\n<ul><li>Selecting Start</li><li>Selecting Start Without Debugging from the Debug menu,</li><li>pressing F5</li><li>Ctrl-F5</li></ul>\n\n\n\n<p>The program is built meaning, the .exe or the .dll files are generated by selecting a command from the Build menu.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET provides an abstraction layer on top of HTTP on which the web applications are built. It provides high-level entities such as classes and components within an object-oriented paradigm. The key development tool for building ASP.NET applications and front ends is Visual Studio. In this tutorial, we work with Visual Studio 2008. Visual Studio is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3434"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3434"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3434/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3434"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3434"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3434"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3438,
    "date": "2020-09-07T09:03:15",
    "date_gmt": "2020-09-07T09:03:15",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3438"
    },
    "modified": "2020-09-07T09:03:15",
    "modified_gmt": "2020-09-07T09:03:15",
    "slug": "web-forms",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/web-forms/",
    "title": {
      "rendered": "Life Cycle"
    },
    "content": {
      "rendered": "\n<p>ASP.NET life cycle specifies, how:</p>\n\n\n\n<ul><li>ASP.NET processes pages to produce dynamic output</li><li>The application and its pages are instantiated and processed</li><li>ASP.NET compiles the pages dynamically</li></ul>\n\n\n\n<p>The ASP.NET life cycle could be divided into two groups:</p>\n\n\n\n<ul><li>Application Life Cycle</li><li>Page Life Cycle</li></ul>\n\n\n\n<h2>ASP.NET Application Life Cycle</h2>\n\n\n\n<p>The application life cycle has the following stages:</p>\n\n\n\n<ul><li>User makes a request for accessing application resource, a page. Browser sends this request to the web server.</li><li>A unified pipeline receives the first request and the following events take place:<ul><li>An object of the class ApplicationManager is created.</li><li>An object of the class HostingEnvironment is created to provide information regarding the resources.</li><li>Top level items in the application are compiled.</li></ul></li><li>Response objects are created. The application objects such as HttpContext, HttpRequest and HttpResponse are created and initialized.</li><li>An instance of the HttpApplication object is created and assigned to the request.</li><li>The request is processed by the HttpApplication class. Different events are raised by this class for processing the request.</li></ul>\n\n\n\n<h2>ASP.NET Page Life Cycle</h2>\n\n\n\n<p>When a page is requested, it is loaded into the server memory, processed, and sent to the browser. Then it is unloaded from the memory. At each of these steps, methods and events are available, which could be overridden according to the need of the application. In other words, you can write your own code to override the default code.</p>\n\n\n\n<p>The Page class creates a hierarchical tree of all the controls on the page. All the components on the page, except the directives, are part of this control tree. You can see the control tree by adding trace= &#8220;true&#8221; to the page directive. We will cover page directives and tracing under &#8216;directives&#8217; and &#8216;event handling&#8217;.</p>\n\n\n\n<p>The page life cycle phases are:</p>\n\n\n\n<ul><li>Initialization</li><li>Instantiation of the controls on the page</li><li>Restoration and maintenance of the state</li><li>Execution of the event handler codes</li><li>Page rendering</li></ul>\n\n\n\n<p>Understanding the page cycle helps in writing codes for making some specific thing happen at any stage of the page life cycle. It also helps in writing custom controls and initializing them at right time, populate their properties with view-state data and run control behavior code.</p>\n\n\n\n<p>Following are the different stages of an ASP.NET page:</p>\n\n\n\n<ul><li><strong>Page request</strong>&nbsp;&#8211; When ASP.NET gets a page request, it decides whether to parse and compile the page, or there would be a cached version of the page; accordingly the response is sent.</li><li><strong>Starting of page life cycle</strong>&nbsp;&#8211; At this stage, the Request and Response objects are set. If the request is an old request or post back, the IsPostBack property of the page is set to true. The UICulture property of the page is also set.</li><li><strong>Page initialization</strong>&nbsp;&#8211; At this stage, the controls on the page are assigned unique ID by setting the UniqueID property and the themes are applied. For a new request, postback data is loaded and the control properties are restored to the view-state values.</li><li><strong>Page load</strong>&nbsp;&#8211; At this stage, control properties are set using the view state and control state values.</li><li><strong>Validation</strong>&nbsp;&#8211; Validate method of the validation control is called and on its successful execution, the IsValid property of the page is set to true.</li><li><strong>Postback event handling</strong>&nbsp;&#8211; If the request is a postback (old request), the related event handler is invoked.</li><li><strong>Page rendering</strong>&nbsp;&#8211; At this stage, view state for the page and all controls are saved. The page calls the Render method for each control and the output of rendering is written to the OutputStream class of the Response property of page.</li><li><strong>Unload</strong>&nbsp;&#8211; The rendered page is sent to the client and page properties, such as Response and Request, are unloaded and all cleanup done.</li></ul>\n\n\n\n<h2>ASP.NET Page Life Cycle Events</h2>\n\n\n\n<p>At each stage of the page life cycle, the page raises some events, which could be coded. An event handler is basically a function or subroutine, bound to the event, using declarative attributes such as Onclick or handle.</p>\n\n\n\n<p>Following are the page life cycle events:</p>\n\n\n\n<ul><li><strong>PreInit</strong>&nbsp;&#8211; PreInit is the first event in page life cycle. It checks the IsPostBack property and determines whether the page is a postback. It sets the themes and master pages, creates dynamic controls, and gets and sets profile property values. This event can be handled by overloading the OnPreInit method or creating a Page_PreInit handler.</li><li><strong>Init</strong>&nbsp;&#8211; Init event initializes the control property and the control tree is built. This event can be handled by overloading the OnInit method or creating a Page_Init handler.</li><li><strong>InitComplete</strong>&nbsp;&#8211; InitComplete event allows tracking of view state. All the controls turn on view-state tracking.</li><li><strong>LoadViewState</strong>&nbsp;&#8211; LoadViewState event allows loading view state information into the controls.</li><li><strong>LoadPostData</strong>&nbsp;&#8211; During this phase, the contents of all the input fields are defined with the &lt;form&gt; tag are processed.</li><li><strong>PreLoad</strong>&nbsp;&#8211; PreLoad occurs before the post back data is loaded in the controls. This event can be handled by overloading the OnPreLoad method or creating a Page_PreLoad handler.</li><li><strong>Load</strong>&nbsp;&#8211; The Load event is raised for the page first and then recursively for all child controls. The controls in the control tree are created. This event can be handled by overloading the OnLoad method or creating a Page_Load handler.</li><li><strong>LoadComplete</strong>&nbsp;&#8211; The loading process is completed, control event handlers are run, and page validation takes place. This event can be handled by overloading the OnLoadComplete method or creating a Page_LoadComplete handler</li><li><strong>PreRender</strong>&nbsp;&#8211; The PreRender event occurs just before the output is rendered. By handling this event, pages and controls can perform any updates before the output is rendered.</li><li><strong>PreRenderComplete</strong>&nbsp;&#8211; As the PreRender event is recursively fired for all child controls, this event ensures the completion of the pre-rendering phase.</li><li><strong>SaveStateComplete</strong>&nbsp;&#8211; State of control on the page is saved. Personalization, control state and view state information is saved. The HTML markup is generated. This stage can be handled by overriding the Render method or creating a Page_Render handler.</li><li><strong>UnLoad</strong>&nbsp;&#8211; The UnLoad phase is the last phase of the page life cycle. It raises the UnLoad event for all controls recursively and lastly for the page itself. Final cleanup is done and all resources and references, such as database connections, are freed. This event can be handled by modifying the OnUnLoad method or creating a Page_UnLoad handler.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET life cycle specifies, how: ASP.NET processes pages to produce dynamic output The application and its pages are instantiated and processed ASP.NET compiles the pages dynamically The ASP.NET life cycle could be divided into two groups: Application Life Cycle Page Life Cycle ASP.NET Application Life Cycle The application life cycle has the following stages: User [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3438"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3438"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3438/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3438"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3438"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3438"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4552,
    "date": "2020-09-07T09:04:18",
    "date_gmt": "2020-09-07T09:04:18",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3441"
    },
    "modified": "2020-09-07T09:04:18",
    "modified_gmt": "2020-09-07T09:04:18",
    "slug": "web-forms-features",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/web-forms-features/",
    "title": {
      "rendered": "First Example"
    },
    "content": {
      "rendered": "\n<p>An ASP.NET page is made up of a number of server controls along with HTML controls, text, and images. Sensitive data from the page and the states of different controls on the page are stored in hidden fields that form the context of that page request.</p>\n\n\n\n<p>ASP.NET runtime controls the association between a page instance and its state. An ASP.NET page is an object of the Page or inherited from it.</p>\n\n\n\n<p>All the controls on the pages are also objects of the related control class inherited from a parent Control class. When a page is run, an instance of the object page is created along with all its content controls.</p>\n\n\n\n<p>An ASP.NET page is also a server side file saved with the .aspx extension. It is modular in nature and can be divided into the following core sections:</p>\n\n\n\n<ul><li>Page Directives</li><li>Code Section</li><li>Page Layout</li></ul>\n\n\n\n<h2>Page Directives</h2>\n\n\n\n<p>The page directives set up the environment for the page to run. The @Page directive defines page-specific attributes used by ASP.NET page parser and compiler. Page directives specify how the page should be processed, and which assumptions need to be taken about the page.</p>\n\n\n\n<p>It allows importing namespaces, loading assemblies, and registering new controls with custom tag names and namespace prefixes.</p>\n\n\n\n<h2>Code Section</h2>\n\n\n\n<p>The code section provides the handlers for the page and control events along with other functions required. We mentioned that, ASP.NET follows an object model. Now, these objects raise events when some events take place on the user interface, like a user clicks a button or moves the cursor. The kind of response these events need to reciprocate is coded in the event handler functions. The event handlers are nothing but functions bound to the controls.</p>\n\n\n\n<p>The code section or the code behind file provides all these event handler routines, and other functions used by the developer. The page code could be precompiled and deployed in the form of a binary assembly.</p>\n\n\n\n<h2>Page Layout</h2>\n\n\n\n<p>The page layout provides the interface of the page. It contains the server controls, text, inline JavaScript, and HTML tags.</p>\n\n\n\n<p>The following code snippet provides a sample ASP.NET page explaining Page directives, code section and page layout written in C#:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- directives -->\n&lt;% @Page Language=\"C#\" %>\n\n&lt;!-- code section -->\n&lt;script runat=\"server\">\n\n   private void convertoupper(object sender, EventArgs e)\n   {\n      string str = mytext.Value;\n      changed_text.InnerHtml = str.ToUpper();\n   }\n&lt;/script>\n\n&lt;!-- Layout -->\n&lt;html>\n   &lt;head> \n      &lt;title> Change to Upper Case &lt;/title> \n   &lt;/head>\n   \n   &lt;body>\n      &lt;h3> Conversion to Upper Case &lt;/h3>\n      \n      &lt;form runat=\"server\">\n         &lt;input runat=\"server\" id=\"mytext\" type=\"text\" />\n         &lt;input runat=\"server\" id=\"button1\" type=\"submit\" value=\"Enter...\" OnServerClick=\"convertoupper\"/>\n         \n         &lt;hr />\n         &lt;h3> Results: &lt;/h3>\n         &lt;span runat=\"server\" id=\"changed_text\" />\n      &lt;/form>\n      \n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>Copy this file to the web server root directory. Generally it is c:\\iNETput\\wwwroot. Open the file from the browser to execute it and it generates following result:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_first_example.jpg\" alt=\"ASP.NET First Example\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_first_example.jpg\" alt=\"ASP.NET First Example\"/></figure>\n\n\n\n<h2>Using Visual Studio IDE</h2>\n\n\n\n<p>Let us develop the same example using Visual Studio IDE. Instead of typing the code, you can just drag the controls into the design view:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_first_example2.jpg\" alt=\"ASP.NET First Example 2\"/></figure>\n\n\n\n<p>The content file is automatically developed. All you need to add is the Button1_Click routine, which is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Button1_Click(object sender, EventArgs e)\n{\n   string buf = TextBox1.Text;\n   changed_text.InnerHtml = buf.ToUpper();\n}</code></pre>\n\n\n\n<p>The content file code is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" \n   Inherits=\"firstexample._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n   \n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n         \n            &lt;asp:TextBox ID=\"TextBox1\" runat=\"server\" style=\"width:224px\">\n            &lt;/asp:TextBox>\n            \n            &lt;br />\n            &lt;br />\n            \n            &lt;asp:Button ID=\"Button1\" runat=\"server\" Text=\"Enter...\" style=\"width:85px\" onclick=\"Button1_Click\" />\n            &lt;hr />\n            \n            &lt;h3> Results: &lt;/h3>\n            &lt;span runat=\"server\" id=\"changed_text\" />\n            \n         &lt;/div>\n      &lt;/form>\n      \n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>Execute the example by right clicking on the design view and choosing &#8216;View in Browser&#8217; from the popup menu. This generates the following result:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_first_example3.jpg\" alt=\"ASP.NET First Example 3\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An ASP.NET page is made up of a number of server controls along with HTML controls, text, and images. Sensitive data from the page and the states of different controls on the page are stored in hidden fields that form the context of that page request. ASP.NET runtime controls the association between a page instance [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4552"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4552"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4552/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4552"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4552"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4552"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4553,
    "date": "2020-09-07T09:07:35",
    "date_gmt": "2020-09-07T09:07:35",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3443"
    },
    "modified": "2020-09-07T09:07:35",
    "modified_gmt": "2020-09-07T09:07:35",
    "slug": "web-forms-project",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/web-forms-project/",
    "title": {
      "rendered": "Event Handling"
    },
    "content": {
      "rendered": "\n<p>An event is an action or occurrence such as a mouse click, a key press, mouse movements, or any system-generated notification. A process communicates through events. For example, interrupts are system-generated events. When events occur, the application should be able to respond to it and manage it.</p>\n\n\n\n<p>Events in ASP.NET raised at the client machine, and handled at the server machine. For example, a user clicks a button displayed in the browser. A Click event is raised. The browser handles this client-side event by posting it to the server.</p>\n\n\n\n<p>The server has a subroutine describing what to do when the event is raised; it is called the event-handler. Therefore, when the event message is transmitted to the server, it checks whether the Click event has an associated event handler. If it has, the event handler is executed.</p>\n\n\n\n<h2>Event Arguments</h2>\n\n\n\n<p>ASP.NET event handlers generally take two parameters and return void. The first parameter represents the object raising the event and the second parameter is event argument.</p>\n\n\n\n<p>The general syntax of an event is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>private void EventName (object sender, EventArgs e);</code></pre>\n\n\n\n<h2>Application and Session Events</h2>\n\n\n\n<p>The most important application events are:</p>\n\n\n\n<ul><li><strong>Application_Start</strong>&nbsp;&#8211; It is raised when the application/website is started.</li><li><strong>Application_End</strong>&nbsp;&#8211; It is raised when the application/website is stopped.</li></ul>\n\n\n\n<p>Similarly, the most used Session events are:</p>\n\n\n\n<ul><li><strong>Session_Start</strong>&nbsp;&#8211; It is raised when a user first requests a page from the application.</li><li><strong>Session_End</strong>&nbsp;&#8211; It is raised when the session ends.</li></ul>\n\n\n\n<h2>Page and Control Events</h2>\n\n\n\n<p>Common page and control events are:</p>\n\n\n\n<ul><li><strong>DataBinding</strong>&nbsp;&#8211; It is raised when a control binds to a data source.</li><li><strong>Disposed</strong>&nbsp;&#8211; It is raised when the page or the control is released.</li><li><strong>Error</strong>&nbsp;&#8211; It is a page event, occurs when an unhandled exception is thrown.</li><li><strong>Init</strong>&nbsp;&#8211; It is raised when the page or the control is initialized.</li><li><strong>Load</strong>&nbsp;&#8211; It is raised when the page or a control is loaded.</li><li><strong>PreRender</strong>&nbsp;&#8211; It is raised when the page or the control is to be rendered.</li><li><strong>Unload</strong>&nbsp;&#8211; It is raised when the page or control is unloaded from memory.</li></ul>\n\n\n\n<h2>Event Handling Using Controls</h2>\n\n\n\n<p>All ASP.NET controls are implemented as classes, and they have events which are fired when a user performs a certain action on them. For example, when a user clicks a button the &#8216;Click&#8217; event is generated. For handling events, there are in-built attributes and event handlers. Event handler is coded to respond to an event, and take appropriate action on it.</p>\n\n\n\n<p>By default, Visual Studio creates an event handler by including a Handles clause on the Sub procedure. This clause names the control and event that the procedure handles.</p>\n\n\n\n<p>The ASP tag for a button control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Button ID=\"btnCancel\" runat=\"server\" Text=\"Cancel\" /></code></pre>\n\n\n\n<p>The event handler for the Click event:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Protected Sub btnCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) \n\n   Handles btnCancel.Click\n   \nEnd Sub</code></pre>\n\n\n\n<p>An event can also be coded without Handles clause. Then, the handler must be named according to the appropriate event attribute of the control.</p>\n\n\n\n<p>The ASP tag for a button control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Button ID=\"btnCancel\" runat=\"server\" Text=\"Cancel\" Onclick=\"btnCancel_Click\" /></code></pre>\n\n\n\n<p>The event handler for the Click event:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Protected Sub btnCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs)\n\nEnd Sub</code></pre>\n\n\n\n<p>The common control events are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Attribute</th><th>Controls</th></tr><tr><td>Click</td><td>OnClick</td><td>Button, image button, link button, image map</td></tr><tr><td>Command</td><td>OnCommand</td><td>Button, image button, link button</td></tr><tr><td>TextChanged</td><td>OnTextChanged</td><td>Text box</td></tr><tr><td>SelectedIndexChanged</td><td>OnSelectedIndexChanged</td><td>Drop-down list, list box, radio button list, check box list.</td></tr><tr><td>CheckedChanged</td><td>OnCheckedChanged</td><td>Check box, radio button</td></tr></tbody></table></figure>\n\n\n\n<p>Some events cause the form to be posted back to the server immediately, these are called the postback events. For example, the click event such as, Button.Click.</p>\n\n\n\n<p>Some events are not posted back to the server immediately, these are called non-postback events.</p>\n\n\n\n<p>For example, the change events or selection events such as TextBox.TextChanged or CheckBox.CheckedChanged. The nonpostback events could be made to post back immediately by setting their AutoPostBack property to true.</p>\n\n\n\n<h2>Default Events</h2>\n\n\n\n<p>The default event for the Page object is Load event. Similarly, every control has a default event. For example, default event for the button control is the Click event.</p>\n\n\n\n<p>The default event handler could be created in Visual Studio, just by double clicking the control in design view. The following table shows some of the default events for common controls:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Control</th><th>Default Event</th></tr><tr><td>AdRotator</td><td>AdCreated</td></tr><tr><td>BulletedList</td><td>Click</td></tr><tr><td>Button</td><td>Click</td></tr><tr><td>Calender</td><td>SelectionChanged</td></tr><tr><td>CheckBox</td><td>CheckedChanged</td></tr><tr><td>CheckBoxList</td><td>SelectedIndexChanged</td></tr><tr><td>DataGrid</td><td>SelectedIndexChanged</td></tr><tr><td>DataList</td><td>SelectedIndexChanged</td></tr><tr><td>DropDownList</td><td>SelectedIndexChanged</td></tr><tr><td>HyperLink</td><td>Click</td></tr><tr><td>ImageButton</td><td>Click</td></tr><tr><td>ImageMap</td><td>Click</td></tr><tr><td>LinkButton</td><td>Click</td></tr><tr><td>ListBox</td><td>SelectedIndexChanged</td></tr><tr><td>Menu</td><td>MenuItemClick</td></tr><tr><td>RadioButton</td><td>CheckedChanged</td></tr><tr><td>RadioButtonList</td><td>SelectedIndexChanged</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>This example includes a simple page with a label control and a button control on it. As the page events such as Page_Load, Page_Init, Page_PreRender etc. take place, it sends a message, which is displayed by the label control. When the button is clicked, the Button_Click event is raised and that also sends a message to be displayed on the label.</p>\n\n\n\n<p>Create a new website and drag a label control and a button control on it from the control tool box. Using the properties window, set the IDs of the controls as .lblmessage. and .btnclick. respectively. Set the Text property of the Button control as &#8216;Click&#8217;.</p>\n\n\n\n<p>The markup file (.aspx):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" \n   Inherits=\"eventdemo._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>Untitled Page&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n            &lt;asp:Label ID=\"lblmessage\" runat=\"server\" >\n            \n            &lt;/asp:Label>\n            \n            &lt;br />\n            &lt;br />\n            &lt;br />\n            \n            &lt;asp:Button ID=\"btnclick\" runat=\"server\" Text=\"Click\" onclick=\"btnclick_Click\" />\n         &lt;/div>\n      &lt;/form>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>Double click on the design view to move to the code behind file. The Page_Load event is automatically created without any code in it. Write down the following self-explanatory code lines:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.HtmlControls;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nusing System.Xml.Linq;\n\nnamespace eventdemo {\n\n   public partial class _Default : System.Web.UI.Page {\n   \n      protected void Page_Load(object sender, EventArgs e) {\n         lblmessage.Text += \"Page load event handled. &lt;br />\";\n         \n         if (Page.IsPostBack) {\n            lblmessage.Text += \"Page post back event handled.&lt;br/>\";\n         }\n      }\n      \n      protected void Page_Init(object sender, EventArgs e) {\n         lblmessage.Text += \"Page initialization event handled.&lt;br/>\";\n      }\n      \n      protected void Page_PreRender(object sender, EventArgs e) {\n         lblmessage.Text += \"Page prerender event handled. &lt;br/>\";\n      }\n      \n      protected void btnclick_Click(object sender, EventArgs e) {\n         lblmessage.Text += \"Button click event handled. &lt;br/>\";\n      }\n   }\n}</code></pre>\n\n\n\n<p>Execute the page. The label shows page load, page initialization and, the page pre-render events. Click the button to see effect:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_event_example.jpg\" alt=\"ASP.NET Event Example\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An event is an action or occurrence such as a mouse click, a key press, mouse movements, or any system-generated notification. A process communicates through events. For example, interrupts are system-generated events. When events occur, the application should be able to respond to it and manage it. Events in ASP.NET raised at the client machine, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4553"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4553"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4553/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4553"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4553"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4553"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3454,
    "date": "2020-09-07T09:19:02",
    "date_gmt": "2020-09-07T09:19:02",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3454"
    },
    "modified": "2020-09-07T09:19:02",
    "modified_gmt": "2020-09-07T09:19:02",
    "slug": "server-side",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/server-side/",
    "title": {
      "rendered": "Server Side"
    },
    "content": {
      "rendered": "\n<p>We have studied the page life cycle and how a page contains various controls. The page itself is instantiated as a control object. All web forms are basically instances of the ASP.NET Page class. The page class has the following extremely useful properties that correspond to intrinsic objects:</p>\n\n\n\n<ul><li>Session</li><li>Application</li><li>Cache</li><li>Request</li><li>Response</li><li>Server</li><li>User</li><li>Trace</li></ul>\n\n\n\n<p>We will discuss each of these objects in due time. In this tutorial we will explore the Server object, the Request object, and the Response object.</p>\n\n\n\n<h2>Server Object</h2>\n\n\n\n<p>The Server object in Asp.NET is an instance of the System.Web.HttpServerUtility class. The HttpServerUtility class provides numerous properties and methods to perform various jobs.</p>\n\n\n\n<h3>Properties and Methods of the Server object</h3>\n\n\n\n<p>The methods and properties of the HttpServerUtility class are exposed through the intrinsic Server object provided by ASP.NET.</p>\n\n\n\n<p>The following table provides a list of the properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>MachineName</td><td>Name of server computer</td></tr><tr><td>ScriptTimeOut</td><td>Gets and sets the request time-out value in seconds.</td></tr></tbody></table></figure>\n\n\n\n<p>The following table provides a list of some important methods:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>CreateObject(String)</td><td>Creates an instance of the COM object identified by its ProgID (Programmatic ID).</td></tr><tr><td>CreateObject(Type)</td><td>Creates an instance of the COM object identified by its Type.</td></tr><tr><td>Equals(Object)</td><td>Determines whether the specified Object is equal to the current Object.</td></tr><tr><td>Execute(String)</td><td>Executes the handler for the specified virtual path in the context of the current request.</td></tr><tr><td>Execute(String, Boolean)</td><td>Executes the handler for the specified virtual path in the context of the current request and specifies whether to clear the QueryString and Form collections.</td></tr><tr><td>GetLastError</td><td>Returns the previous exception.</td></tr><tr><td>GetType</td><td>Gets the Type of the current instance.</td></tr><tr><td>HtmlEncode</td><td>Changes an ordinary string into a string with legal HTML characters.</td></tr><tr><td>HtmlDecode</td><td>Converts an Html string into an ordinary string.</td></tr><tr><td>ToString</td><td>Returns a String that represents the current Object.</td></tr><tr><td>Transfer(String)</td><td>For the current request, terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.</td></tr><tr><td>UrlDecode</td><td>Converts an URL string into an ordinary string.</td></tr><tr><td>UrlEncodeToken</td><td>Works same as UrlEncode, but on a byte array that contains Base64-encoded data.</td></tr><tr><td>UrlDecodeToken</td><td>Works same as UrlDecode, but on a byte array that contains Base64-encoded data.</td></tr><tr><td>MapPath</td><td>Return the physical path that corresponds to a specified virtual file path on the server.</td></tr><tr><td>Transfer</td><td>Transfers execution to another web page in the current application.</td></tr></tbody></table></figure>\n\n\n\n<h2>Request Object</h2>\n\n\n\n<p>The request object is an instance of the System.Web.HttpRequest class. It represents the values and properties of the HTTP request that makes the page loading into the browser.</p>\n\n\n\n<p>The information presented by this object is wrapped by the higher level abstractions (the web control model). However, this object helps in checking some information such as the client browser and cookies.</p>\n\n\n\n<h3>Properties and Methods of the Request Object</h3>\n\n\n\n<p>The following table provides some noteworthy properties of the Request object:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>AcceptTypes</td><td>Gets a string array of client-supported MIME accept types.</td></tr><tr><td>ApplicationPath</td><td>Gets the ASP.NET application&#8217;s virtual application root path on the server.</td></tr><tr><td>Browser</td><td>Gets or sets information about the requesting client&#8217;s browser capabilities.</td></tr><tr><td>ContentEncoding</td><td>Gets or sets the character set of the entity-body.</td></tr><tr><td>ContentLength</td><td>Specifies the length, in bytes, of content sent by the client.</td></tr><tr><td>ContentType</td><td>Gets or sets the MIME content type of the incoming request.</td></tr><tr><td>Cookies</td><td>Gets a collection of cookies sent by the client.</td></tr><tr><td>FilePath</td><td>Gets the virtual path of the current request.</td></tr><tr><td>Files</td><td>Gets the collection of files uploaded by the client, in multipart MIME format.</td></tr><tr><td>Form</td><td>Gets a collection of form variables.</td></tr><tr><td>Headers</td><td>Gets a collection of HTTP headers.</td></tr><tr><td>HttpMethod</td><td>Gets the HTTP data transfer method (such as GET, POST, or HEAD) used by the client.</td></tr><tr><td>InputStream</td><td>Gets the contents of the incoming HTTP entity body.</td></tr><tr><td>IsSecureConnection</td><td>Gets a value indicating whether the HTTP connection uses secure sockets (that is, HTTPS).</td></tr><tr><td>QueryString</td><td>Gets the collection of HTTP query string variables.</td></tr><tr><td>RawUrl</td><td>Gets the raw URL of the current request.</td></tr><tr><td>RequestType</td><td>Gets or sets the HTTP data transfer method (GET or POST) used by the client.</td></tr><tr><td>ServerVariables</td><td>Gets a collection of Web server variables.</td></tr><tr><td>TotalBytes</td><td>Gets the number of bytes in the current input stream.</td></tr><tr><td>Url</td><td>Gets information about the URL of the current request.</td></tr><tr><td>UrlReferrer</td><td>Gets information about the URL of the client&#8217;s previous request that is linked to the current URL.</td></tr><tr><td>UserAgent</td><td>Gets the raw user agent string of the client browser.</td></tr><tr><td>UserHostAddress</td><td>Gets the IP host address of the remote client.</td></tr><tr><td>UserHostName</td><td>Gets the DNS name of the remote client.</td></tr><tr><td>UserLanguages</td><td>Gets a sorted string array of client language preferences.</td></tr></tbody></table></figure>\n\n\n\n<p>The following table provides a list of some important methods:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>BinaryRead</td><td>Performs a binary read of a specified number of bytes from the current input stream.</td></tr><tr><td>Equals(Object)</td><td>Determines whether the specified object is equal to the current object. (Inherited from object.)</td></tr><tr><td>GetType</td><td>Gets the Type of the current instance.</td></tr><tr><td>MapImageCoordinates</td><td>Maps an incoming image-field form parameter to appropriate x-coordinate and y-coordinate values.</td></tr><tr><td>MapPath(String)</td><td>Maps the specified virtual path to a physical path.</td></tr><tr><td>SaveAs</td><td>Saves an HTTP request to disk.</td></tr><tr><td>ToString</td><td>Returns a String that represents the current object.</td></tr><tr><td>ValidateInput</td><td>Causes validation to occur for the collections accessed through the Cookies, Form, and QueryString properties.</td></tr></tbody></table></figure>\n\n\n\n<h2>Response Object</h2>\n\n\n\n<p>The Response object represents the server&#8217;s response to the client request. It is an instance of the System.Web.HttpResponse class.</p>\n\n\n\n<p>In ASP.NET, the response object does not play any vital role in sending HTML text to the client, because the server-side controls have nested, object oriented methods for rendering themselves.</p>\n\n\n\n<p>However, the HttpResponse object still provides some important functionalities, like the cookie feature and the Redirect() method. The Response.Redirect() method allows transferring the user to another page, inside as well as outside the application. It requires a round trip.</p>\n\n\n\n<h3>Properties and Methods of the Response Object</h3>\n\n\n\n<p>The following table provides some noteworthy properties of the Response object:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>Buffer</td><td>Gets or sets a value indicating whether to buffer the output and send it after the complete response is finished processing.</td></tr><tr><td>BufferOutput</td><td>Gets or sets a value indicating whether to buffer the output and send it after the complete page is finished processing.</td></tr><tr><td>Charset</td><td>Gets or sets the HTTP character set of the output stream.</td></tr><tr><td>ContentEncoding</td><td>Gets or sets the HTTP character set of the output stream.</td></tr><tr><td>ContentType</td><td>Gets or sets the HTTP MIME type of the output stream.</td></tr><tr><td>Cookies</td><td>Gets the response cookie collection.</td></tr><tr><td>Expires</td><td>Gets or sets the number of minutes before a page cached on a browser expires.</td></tr><tr><td>ExpiresAbsolute</td><td>Gets or sets the absolute date and time at which to remove cached information from the cache.</td></tr><tr><td>HeaderEncoding</td><td>Gets or sets an encoding object that represents the encoding for the current header output stream.</td></tr><tr><td>Headers</td><td>Gets the collection of response headers.</td></tr><tr><td>IsClientConnected</td><td>Gets a value indicating whether the client is still connected to the server.</td></tr><tr><td>Output</td><td>Enables output of text to the outgoing HTTP response stream.</td></tr><tr><td>OutputStream</td><td>Enables binary output to the outgoing HTTP content body.</td></tr><tr><td>RedirectLocation</td><td>Gets or sets the value of the Http Location header.</td></tr><tr><td>Status</td><td>Sets the status line that is returned to the client.</td></tr><tr><td>StatusCode</td><td>Gets or sets the HTTP status code of the output returned to the client.</td></tr><tr><td>StatusDescription</td><td>Gets or sets the HTTP status string of the output returned to the client.</td></tr><tr><td>SubStatusCode</td><td>Gets or sets a value qualifying the status code of the response.</td></tr><tr><td>SuppressContent</td><td>Gets or sets a value indicating whether to send HTTP content to the client.</td></tr></tbody></table></figure>\n\n\n\n<p>The following table provides a list of some important methods:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>AddHeader</td><td>Adds an HTTP header to the output stream. AddHeader is provided for compatibility with earlier versions of ASP.</td></tr><tr><td>AppendCookie</td><td>Infrastructure adds an HTTP cookie to the intrinsic cookie collection.</td></tr><tr><td>AppendHeader</td><td>Adds an HTTP header to the output stream.</td></tr><tr><td>AppendToLog</td><td>Adds custom log information to the InterNET Information Services (IIS) log file.</td></tr><tr><td>BinaryWrite</td><td>Writes a string of binary characters to the HTTP output stream.</td></tr><tr><td>ClearContent</td><td>Clears all content output from the buffer stream.</td></tr><tr><td>Close</td><td>Closes the socket connection to a client.</td></tr><tr><td>End</td><td>Sends all currently buffered output to the client, stops execution of the page, and raises the EndRequest event.</td></tr><tr><td>Equals(Object)</td><td>Determines whether the specified object is equal to the current object.</td></tr><tr><td>Flush</td><td>Sends all currently buffered output to the client.</td></tr><tr><td>GetType</td><td>Gets the Type of the current instance.</td></tr><tr><td>Pics</td><td>Appends a HTTP PICS-Label header to the output stream.</td></tr><tr><td>Redirect(String)</td><td>Redirects a request to a new URL and specifies the new URL.</td></tr><tr><td>Redirect(String, Boolean)</td><td>Redirects a client to a new URL. Specifies the new URL and whether execution of the current page should terminate.</td></tr><tr><td>SetCookie</td><td>Updates an existing cookie in the cookie collection.</td></tr><tr><td>ToString</td><td>Returns a String that represents the current Object.</td></tr><tr><td>TransmitFile(String)</td><td>Writes the specified file directly to an HTTP response output stream, without buffering it in memory.</td></tr><tr><td>Write(Char)</td><td>Writes a character to an HTTP response output stream.</td></tr><tr><td>Write(Object)</td><td>Writes an object to an HTTP response stream.</td></tr><tr><td>Write(String)</td><td>Writes a string to an HTTP response output stream.</td></tr><tr><td>WriteFile(String)</td><td>Writes the contents of the specified file directly to an HTTP response output stream as a file block.</td></tr><tr><td>WriteFile(String, Boolean)</td><td>Writes the contents of the specified file directly to an HTTP response output stream as a memory block.</td></tr></tbody></table></figure>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following simple example has a text box control where the user can enter name, a button to send the information to the server, and a label control to display the URL of the client computer.</p>\n\n\n\n<p>The content file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" \n   Inherits=\"server_side._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>Untitled Page&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n            \n            Enter your name:\n            &lt;br />\n            &lt;asp:TextBox ID=\"TextBox1\" runat=\"server\">&lt;/asp:TextBox>\n            &lt;asp:Button ID=\"Button1\" runat=\"server\" OnClick=\"Button1_Click\" Text=\"Submit\" />\n            &lt;br />\n            &lt;asp:Label ID=\"Label1\" runat=\"server\"/>\n\n         &lt;/div>\n      &lt;/form>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>The code behind Button1_Click:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Button1_Click(object sender, EventArgs e) {\n\n   if (!String.IsNullOrEmpty(TextBox1.Text)) {\n   \n      // Access the HttpServerUtility methods through\n      // the intrinsic Server object.\n      Label1.Text = \"Welcome, \" + Server.HtmlEncode(TextBox1.Text) + \". &lt;br/> The url is \" + Server.UrlEncode(Request.Url.ToString())\n   }\n}</code></pre>\n\n\n\n<p>Run the page to see the following result:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_server_side.jpg\" alt=\"ASP.NET Server Side\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>We have studied the page life cycle and how a page contains various controls. The page itself is instantiated as a control object. All web forms are basically instances of the ASP.NET Page class. The page class has the following extremely useful properties that correspond to intrinsic objects: Session Application Cache Request Response Server User [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3454"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3454"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3454/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3454"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3454"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3454"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3456,
    "date": "2020-09-07T09:21:00",
    "date_gmt": "2020-09-07T09:21:00",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3456"
    },
    "modified": "2020-09-07T09:21:00",
    "modified_gmt": "2020-09-07T09:21:00",
    "slug": "server-controls",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/server-controls/",
    "title": {
      "rendered": "Server Controls"
    },
    "content": {
      "rendered": "\n<p>Controls are small building blocks of the graphical user interface, which include text boxes, buttons, check boxes, list boxes, labels, and numerous other tools. Using these tools, the users can enter data, make selections and indicate their preferences.</p>\n\n\n\n<p>Controls are also used for structural jobs, like validation, data access, security, creating master pages, and data manipulation.</p>\n\n\n\n<p>ASP.NET uses five types of web controls, which are:</p>\n\n\n\n<ul><li>HTML controls</li><li>HTML Server controls</li><li>ASP.NET Server controls</li><li>ASP.NET Ajax Server controls</li><li>User controls and custom controls</li></ul>\n\n\n\n<p>ASP.NET server controls are the primary controls used in ASP.NET. These controls can be grouped into the following categories:</p>\n\n\n\n<ul><li><strong>Validation controls</strong>&nbsp;&#8211; These are used to validate user input and they work by running client-side script.</li><li><strong>Data source controls</strong>&nbsp;&#8211; These controls provides data binding to different data sources.</li><li><strong>Data view controls</strong>&nbsp;&#8211; These are various lists and tables, which can bind to data from data sources for displaying.</li><li><strong>Personalization controls</strong>&nbsp;&#8211; These are used for personalization of a page according to the user preferences, based on user information.</li><li><strong>Login and security controls</strong>&nbsp;&#8211; These controls provide user authentication.</li><li><strong>Master pages</strong>&nbsp;&#8211; These controls provide consistent layout and interface throughout the application.</li><li><strong>Navigation controls</strong>&nbsp;&#8211; These controls help in navigation. For example, menus, tree view etc.</li><li><strong>Rich controls</strong>&nbsp;&#8211; These controls implement special features. For example, AdRotator, FileUpload, and Calendar control.</li></ul>\n\n\n\n<p>The syntax for using server controls is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:controlType  ID =\"ControlID\" runat=\"server\" Property1=value1  &#91;Property2=value2] /></code></pre>\n\n\n\n<p>In addition, visual studio has the following features, to help produce in error-free coding:</p>\n\n\n\n<ul><li>Dragging and dropping of controls in design view</li><li>IntelliSense feature that displays and auto-completes the properties</li><li>The properties window to set the property values directly</li></ul>\n\n\n\n<h2>Properties of the Server Controls</h2>\n\n\n\n<p>ASP.NET server controls with a visual aspect are derived from the WebControl class and inherit all the properties, events, and methods of this class.</p>\n\n\n\n<p>The WebControl class itself and some other server controls that are not visually rendered are derived from the System.Web.UI.Control class. For example, PlaceHolder control or XML control.</p>\n\n\n\n<p>ASP.Net server controls inherit all properties, events, and methods of the WebControl and System.Web.UI.Control class.</p>\n\n\n\n<p>The following table shows the inherited properties, common to all server controls:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>AccessKey</td><td>Pressing this key with the Alt key moves focus to the control.</td></tr><tr><td>Attributes</td><td>It is the collection of arbitrary attributes (for rendering only) that do not correspond to properties on the control.</td></tr><tr><td>BackColor</td><td>Background color.</td></tr><tr><td>BindingContainer</td><td>The control that contains this control&#8217;s data binding.</td></tr><tr><td>BorderColor</td><td>Border color.</td></tr><tr><td>BorderStyle</td><td>Border style.</td></tr><tr><td>BorderWidth</td><td>Border width.</td></tr><tr><td>CausesValidation</td><td>Indicates if it causes validation.</td></tr><tr><td>ChildControlCreated</td><td>It indicates whether the server control&#8217;s child controls have been created.</td></tr><tr><td>ClientID</td><td>Control ID for HTML markup.</td></tr><tr><td>Context</td><td>The HttpContext object associated with the server control.</td></tr><tr><td>Controls</td><td>Collection of all controls contained within the control.</td></tr><tr><td>ControlStyle</td><td>The style of the Web server control.</td></tr><tr><td>CssClass</td><td>CSS class</td></tr><tr><td>DataItemContainer</td><td>Gets a reference to the naming container if the naming container implements IDataItemContainer.</td></tr><tr><td>DataKeysContainer</td><td>Gets a reference to the naming container if the naming container implements IDataKeysControl.</td></tr><tr><td>DesignMode</td><td>It indicates whether the control is being used on a design surface.</td></tr><tr><td>DisabledCssClass</td><td>Gets or sets the CSS class to apply to the rendered HTML element when the control is disabled.</td></tr><tr><td>Enabled</td><td>Indicates whether the control is grayed out.</td></tr><tr><td>EnableTheming</td><td>Indicates whether theming applies to the control.</td></tr><tr><td>EnableViewState</td><td>Indicates whether the view state of the control is maintained.</td></tr><tr><td>Events</td><td>Gets a list of event handler delegates for the control.</td></tr><tr><td>Font</td><td>Font.</td></tr><tr><td>Forecolor</td><td>Foreground color.</td></tr><tr><td>HasAttributes</td><td>Indicates whether the control has attributes set.</td></tr><tr><td>HasChildViewState</td><td>Indicates whether the current server control&#8217;s child controls have any saved view-state settings.</td></tr><tr><td>Height</td><td>Height in pixels or %.</td></tr><tr><td>ID</td><td>Identifier for the control.</td></tr><tr><td>IsChildControlStateCleared</td><td>Indicates whether controls contained within this control have control state.</td></tr><tr><td>IsEnabled</td><td>Gets a value indicating whether the control is enabled.</td></tr><tr><td>IsTrackingViewState</td><td>It indicates whether the server control is saving changes to its view state.</td></tr><tr><td>IsViewStateEnabled</td><td>It indicates whether view state is enabled for this control.</td></tr><tr><td>LoadViewStateById</td><td>It indicates whether the control participates in loading its view state by ID instead of index.</td></tr><tr><td>Page</td><td>Page containing the control.</td></tr><tr><td>Parent</td><td>Parent control.</td></tr><tr><td>RenderingCompatibility</td><td>It specifies the ASP.NET version that the rendered HTML will be compatible with.</td></tr><tr><td>Site</td><td>The container that hosts the current control when rendered on a design surface.</td></tr><tr><td>SkinID</td><td>Gets or sets the skin to apply to the control.</td></tr><tr><td>Style</td><td>Gets a collection of text attributes that will be rendered as a style attribute on the outer tag of the Web server control.</td></tr><tr><td>TabIndex</td><td>Gets or sets the tab index of the Web server control.</td></tr><tr><td>TagKey</td><td>Gets the HtmlTextWriterTag value that corresponds to this Web server control.</td></tr><tr><td>TagName</td><td>Gets the name of the control tag.</td></tr><tr><td>TemplateControl</td><td>The template that contains this control.</td></tr><tr><td>TemplateSourceDirectory</td><td>Gets the virtual directory of the page or control containing this control.</td></tr><tr><td>ToolTip</td><td>Gets or sets the text displayed when the mouse pointer hovers over the web server control.</td></tr><tr><td>UniqueID</td><td>Unique identifier.</td></tr><tr><td>ViewState</td><td>Gets a dictionary of state information that saves and restores the view state of a server control across multiple requests for the same page.</td></tr><tr><td>ViewStateIgnoreCase</td><td>It indicates whether the StateBag object is case-insensitive.</td></tr><tr><td>ViewStateMode</td><td>Gets or sets the view-state mode of this control.</td></tr><tr><td>Visible</td><td>It indicates whether a server control is visible.</td></tr><tr><td>Width</td><td>Gets or sets the width of the Web server control.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods of the Server Controls</h2>\n\n\n\n<p>The following table provides the methods of the server controls:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>AddAttributesToRender</td><td>Adds HTML attributes and styles that need to be rendered to the specified HtmlTextWriterTag.</td></tr><tr><td>AddedControl</td><td>Called after a child control is added to the Controls collection of the control object.</td></tr><tr><td>AddParsedSubObject</td><td>Notifies the server control that an element, either XML or HTML, was parsed, and adds the element to the server control&#8217;s control collection.</td></tr><tr><td>ApplyStyleSheetSkin</td><td>Applies the style properties defined in the page style sheet to the control.</td></tr><tr><td>ClearCachedClientID</td><td>Infrastructure. Sets the cached ClientID value to null.</td></tr><tr><td>ClearChildControlState</td><td>Deletes the control-state information for the server control&#8217;s child controls.</td></tr><tr><td>ClearChildState</td><td>Deletes the view-state and control-state information for all the server control&#8217;s child controls.</td></tr><tr><td>ClearChildViewState</td><td>Deletes the view-state information for all the server control&#8217;s child controls.</td></tr><tr><td>CreateChildControls</td><td>Used in creating child controls.</td></tr><tr><td>CreateControlCollection</td><td>Creates a new ControlCollection object to hold the child controls.</td></tr><tr><td>CreateControlStyle</td><td>Creates the style object that is used to implement all style related properties.</td></tr><tr><td>DataBind</td><td>Binds a data source to the server control and all its child controls.</td></tr><tr><td>DataBind(Boolean)</td><td>Binds a data source to the server control and all its child controls with an option to raise the DataBinding event.</td></tr><tr><td>DataBindChildren</td><td>Binds a data source to the server control&#8217;s child controls.</td></tr><tr><td>Dispose</td><td>Enables a server control to perform final clean up before it is released from memory.</td></tr><tr><td>EnsureChildControls</td><td>Determines whether the server control contains child controls. If it does not, it creates child controls.</td></tr><tr><td>EnsureID</td><td>Creates an identifier for controls that do not have an identifier.</td></tr><tr><td>Equals(Object)</td><td>Determines whether the specified object is equal to the current object.</td></tr><tr><td>Finalize</td><td>Allows an object to attempt to free resources and perform other cleanup operations before the object is reclaimed by garbage collection.</td></tr><tr><td>FindControl(String)</td><td>Searches the current naming container for a server control with the specified id parameter.</td></tr><tr><td>FindControl(String, Int32)</td><td>Searches the current naming container for a server control with the specified id and an integer.</td></tr><tr><td>Focus</td><td>Sets input focus to a control.</td></tr><tr><td>GetDesignModeState</td><td>Gets design-time data for a control.</td></tr><tr><td>GetType</td><td>Gets the type of the current instance.</td></tr><tr><td>GetUniqueIDRelativeTo</td><td>Returns the prefixed portion of the UniqueID property of the specified control.</td></tr><tr><td>HasControls</td><td>Determines if the server control contains any child controls.</td></tr><tr><td>HasEvents</td><td>Indicates whether events are registered for the control or any child controls.</td></tr><tr><td>IsLiteralContent</td><td>Determines if the server control holds only literal content.</td></tr><tr><td>LoadControlState</td><td>Restores control-state information.</td></tr><tr><td>LoadViewState</td><td>Restores view-state information.</td></tr><tr><td>MapPathSecure</td><td>Retrieves the physical path that a virtual path, either absolute or relative, maps to.</td></tr><tr><td>MemberwiseClone</td><td>Creates a shallow copy of the current object.</td></tr><tr><td>MergeStyle</td><td>Copies any nonblank elements of the specified style to the web control, but does not overwrite any existing style elements of the control.</td></tr><tr><td>OnBubbleEvent</td><td>Determines whether the event for the server control is passed up the page&#8217;s UI server control hierarchy.</td></tr><tr><td>OnDataBinding</td><td>Raises the data binding event.</td></tr><tr><td>OnInit</td><td>Raises the Init event.</td></tr><tr><td>OnLoad</td><td>Raises the Load event.</td></tr><tr><td>OnPreRender</td><td>Raises the PreRender event.</td></tr><tr><td>OnUnload</td><td>Raises the Unload event.</td></tr><tr><td>OpenFile</td><td>Gets a Stream used to read a file.</td></tr><tr><td>RemovedControl</td><td>Called after a child control is removed from the controls collection of the control object.</td></tr><tr><td>Render</td><td>Renders the control to the specified HTML writer.</td></tr><tr><td>RenderBeginTag</td><td>Renders the HTML opening tag of the control to the specified writer.</td></tr><tr><td>RenderChildren</td><td>Outputs the contents of a server control&#8217;s children to a provided HtmlTextWriter object, which writes the contents to be rendered on the client.</td></tr><tr><td>RenderContents</td><td>Renders the contents of the control to the specified writer.</td></tr><tr><td>RenderControl(HtmlTextWriter)</td><td>Outputs server control content to a provided HtmlTextWriter object and stores tracing information about the control if tracing is enabled.</td></tr><tr><td>RenderEndTag</td><td>Renders the HTML closing tag of the control into the specified writer.</td></tr><tr><td>ResolveAdapter</td><td>Gets the control adapter responsible for rendering the specified control.</td></tr><tr><td>SaveControlState</td><td>Saves any server control state changes that have occurred since the time the page was posted back to the server.</td></tr><tr><td>SaveViewState</td><td>Saves any state that was modified after the TrackViewState method was invoked.</td></tr><tr><td>SetDesignModeState</td><td>Sets design-time data for a control.</td></tr><tr><td>ToString</td><td>Returns a string that represents the current object.</td></tr><tr><td>TrackViewState</td><td>Causes the control to track changes to its view state so that they can be stored in the object&#8217;s view state property.</td></tr></tbody></table></figure>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let us look at a particular server control &#8211; a tree view control. A Tree view control comes under navigation controls. Other Navigation controls are: Menu control and SiteMapPath control.</p>\n\n\n\n<p>Add a tree view control on the page. Select Edit Nodes&#8230; from the tasks. Edit each of the nodes using the Tree view node editor as shown:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_edit_nodes.jpg\" alt=\"ASP.NET Edit Nodes\"/></figure>\n\n\n\n<p>Once you have created the nodes, it looks like the following in design view:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_edit_nodes2.jpg\" alt=\"ASP.NET Edit Nodes2\"/></figure>\n\n\n\n<p>The AutoFormat&#8230; task allows you to format the tree view as shown:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_autoformat.jpg\" alt=\"ASP.NET AutoFormat\"/></figure>\n\n\n\n<p>Add a label control and a text box control on the page and name them lblmessage and txtmessage respectively.</p>\n\n\n\n<p>Write a few lines of code to ensure that when a particular node is selected, the label control displays the node text and the text box displays all child nodes under it, if any. The code behind the file should look like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.HtmlControls;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nusing System.Xml.Linq;\n \nnamespace eventdemo {\n   public partial class treeviewdemo : System.Web.UI.Page {\n   \n      protected void Page_Load(object sender, EventArgs e) { \n         txtmessage.Text = \" \"; \n      }\n      \n      protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e) {\n      \n         txtmessage.Text = \" \"; \n         lblmessage.Text = \"Selected node changed to: \" + TreeView1.SelectedNode.Text;\n         TreeNodeCollection childnodes = TreeView1.SelectedNode.ChildNodes;\n         \n         if(childnodes != null) {\n            txtmessage.Text = \" \";\n            \n            foreach (TreeNode t in childnodes) {\n               txtmessage.Text += t.Value;\n            }\n         }\n      }\n   }\n}</code></pre>\n\n\n\n<p>Execute the page to see the effects. You will be able to expand and collapse the nodes.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_control_nodes.jpg\" alt=\"ASP.NET Control Nodes\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Controls are small building blocks of the graphical user interface, which include text boxes, buttons, check boxes, list boxes, labels, and numerous other tools. Using these tools, the users can enter data, make selections and indicate their preferences. Controls are also used for structural jobs, like validation, data access, security, creating master pages, and data [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3456"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3456"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3456/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3456"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3456"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3456"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3458,
    "date": "2020-09-07T09:22:18",
    "date_gmt": "2020-09-07T09:22:18",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3458"
    },
    "modified": "2020-09-07T09:22:18",
    "modified_gmt": "2020-09-07T09:22:18",
    "slug": "html-server",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/html-server/",
    "title": {
      "rendered": "HTML Server"
    },
    "content": {
      "rendered": "\n<p>The HTML server controls are basically the standard HTML controls enhanced to enable server side processing. The HTML controls such as the header tags, anchor tags, and input elements are not processed by the server but are sent to the browser for display.</p>\n\n\n\n<p>They are specifically converted to a server control by adding the attribute runat=&#8221;server&#8221; and adding an id attribute to make them available for server-side processing.</p>\n\n\n\n<p>For example, consider the HTML input control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input type=\"text\" size=\"40\"></code></pre>\n\n\n\n<p>It could be converted to a server control, by adding the runat and id attribute:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input type=\"text\" id=\"testtext\" size=\"40\" runat=\"server\"></code></pre>\n\n\n\n<h2>Advantages of using HTML Server Controls</h2>\n\n\n\n<p>Although ASP.NET server controls can perform every job accomplished by the HTML server controls, the later controls are useful in the following cases:</p>\n\n\n\n<ul><li>Using static tables for layout purposes.</li><li>Converting a HTML page to run under ASP.NET</li></ul>\n\n\n\n<p>The following table describes the HTML server controls:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Control Name</th><th>HTML tag</th></tr><tr><td>HtmlHead</td><td>&lt;head&gt;element</td></tr><tr><td>HtmlInputButton</td><td>&lt;input type=button|submit|reset&gt;</td></tr><tr><td>HtmlInputCheckbox</td><td>&lt;input type=checkbox&gt;</td></tr><tr><td>HtmlInputFile</td><td>&lt;input type = file&gt;</td></tr><tr><td>HtmlInputHidden</td><td>&lt;input type = hidden&gt;</td></tr><tr><td>HtmlInputImage</td><td>&lt;input type = image&gt;</td></tr><tr><td>HtmlInputPassword</td><td>&lt;input type = password&gt;</td></tr><tr><td>HtmlInputRadioButton</td><td>&lt;input type = radio&gt;</td></tr><tr><td>HtmlInputReset</td><td>&lt;input type = reset&gt;</td></tr><tr><td>HtmlText</td><td>&lt;input type = text|password&gt;</td></tr><tr><td>HtmlImage</td><td>&lt;img&gt; element</td></tr><tr><td>HtmlLink</td><td>&lt;link&gt; element</td></tr><tr><td>HtmlAnchor</td><td>&lt;a&gt; element</td></tr><tr><td>HtmlButton</td><td>&lt;button&gt; element</td></tr><tr><td>HtmlButton</td><td>&lt;button&gt; element</td></tr><tr><td>HtmlForm</td><td>&lt;form&gt; element</td></tr><tr><td>HtmlTable</td><td>&lt;table&gt; element</td></tr><tr><td>HtmlTableCell</td><td>&lt;td&gt; and &lt;th&gt;</td></tr><tr><td>HtmlTableRow</td><td>&lt;tr&gt; element</td></tr><tr><td>HtmlTitle</td><td>&lt;title&gt; element</td></tr><tr><td>HtmlSelect</td><td>&lt;select&amp;t; element</td></tr><tr><td>HtmlGenericControl</td><td>All HTML controls not listed</td></tr></tbody></table></figure>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following example uses a basic HTML table for layout. It uses some boxes for getting input from the users such as name, address, city, state etc. It also has a button control, which is clicked to get the user data displayed in the last row of the table.</p>\n\n\n\n<p>The page should look like this in the design view:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_server_controls.jpg\" alt=\"ASP.NET Server Controls\"/></figure>\n\n\n\n<p>The code for the content page shows the use of the HTML table element for layout.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"htmlserver._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>Untitled Page&lt;/title>\n      \n      &lt;style type=\"text/css\">\n         .style1\n         {  \n            width: 156px;\n         }\n         .style2\n         {\n            width: 332px;\n         }\n      &lt;/style>\n      \n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n            &lt;table style=\"width: 54%;\">\n               &lt;tr>\n                  &lt;td class=\"style1\">Name:&lt;/td>\n                  &lt;td class=\"style2\">\n                     &lt;asp:TextBox ID=\"txtname\" runat=\"server\"  style=\"width:230px\">\n                     &lt;/asp:TextBox>\n                  &lt;/td>\n               &lt;/tr>\n\t\t\t\t\n               &lt;tr>\n                  &lt;td class=\"style1\">Street&lt;/td>\n                  &lt;td class=\"style2\">\n                     &lt;asp:TextBox ID=\"txtstreet\" runat=\"server\"  style=\"width:230px\">\n                     &lt;/asp:TextBox>\n                  &lt;/td>\n               &lt;/tr>\n\t\t\t\t\n               &lt;tr>\n                  &lt;td class=\"style1\">City&lt;/td>\n                  &lt;td class=\"style2\">\n                     &lt;asp:TextBox ID=\"txtcity\" runat=\"server\"  style=\"width:230px\">\n                     &lt;/asp:TextBox>\n                  &lt;/td>\n               &lt;/tr>\n\t\t\t\t\n               &lt;tr>\n                  &lt;td class=\"style1\">State&lt;/td>\n                  &lt;td class=\"style2\">\n                     &lt;asp:TextBox ID=\"txtstate\" runat=\"server\" style=\"width:230px\">\n                     &lt;/asp:TextBox>\n                  &lt;/td>\n               &lt;/tr>\n\t\t\t\t\n               &lt;tr>\n                  &lt;td class=\"style1\"> &lt;/td>\n                  &lt;td class=\"style2\">&lt;/td>\n               &lt;/tr>\n\t\t\t\t\n               &lt;tr>\n                  &lt;td class=\"style1\">&lt;/td>\n                  &lt;td ID=\"displayrow\" runat =\"server\" class=\"style2\">\n                  &lt;/td>\n               &lt;/tr>\n            &lt;/table>\n            \n         &lt;/div>\n         &lt;asp:Button ID=\"Button1\" runat=\"server\" onclick=\"Button1_Click\" Text=\"Click\" />\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The code behind the button control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Button1_Click(object sender, EventArgs e)\n{\n   string str = \"\";\n   str += txtname.Text + \"&lt;br />\";\n   str += txtstreet.Text + \"&lt;br />\";\n   str += txtcity.Text + \"&lt;br />\";\n   str += txtstate.Text + \"&lt;br />\";\n   displayrow.InnerHtml = str;\n}</code></pre>\n\n\n\n<p>Observe the following:</p>\n\n\n\n<ul><li>The standard HTML tags have been used for the page layout.</li><li>The last row of the HTML table is used for data display. It needed server side processing, so an ID attribute and the runat attribute has been added to it.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The HTML server controls are basically the standard HTML controls enhanced to enable server side processing. The HTML controls such as the header tags, anchor tags, and input elements are not processed by the server but are sent to the browser for display. They are specifically converted to a server control by adding the attribute [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3458"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3458"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3458/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3458"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3458"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3458"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3460,
    "date": "2020-09-07T09:23:32",
    "date_gmt": "2020-09-07T09:23:32",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3460"
    },
    "modified": "2020-09-07T09:23:32",
    "modified_gmt": "2020-09-07T09:23:32",
    "slug": "client-side",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/client-side/",
    "title": {
      "rendered": "Client Side"
    },
    "content": {
      "rendered": "\n<p>ASP.NET client side coding has two aspects:</p>\n\n\n\n<ul><li><strong>Client side scripts</strong>&nbsp;: It runs on the browser and in turn speeds up the execution of page. For example, client side data validation which can catch invalid data and warn the user accordingly without making a round trip to the server.</li><li><strong>Client side source code</strong>&nbsp;: ASP.NET pages generate this. For example, the HTML source code of an ASP.NET page contains a number of hidden fields and automatically injected blocks of JavaScript code, which keeps information like view state or does other jobs to make the page work.</li></ul>\n\n\n\n<h2>Client Side Scripts</h2>\n\n\n\n<p>All ASP.NET server controls allow calling client side code written using JavaScript or VBScript. Some ASP.NET server controls use client side scripting to provide response to the users without posting back to the server. For example, the validation controls.</p>\n\n\n\n<p>Apart from these scripts, the Button control has a property OnClientClick, which allows executing client-side script, when the button is clicked.</p>\n\n\n\n<p>The traditional and server HTML controls have the following events that can execute a script when they are raised:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Event</th><th>Description</th></tr><tr><td>onblur</td><td>When the control loses focus</td></tr><tr><td>onfocus</td><td>When the control receives focus</td></tr><tr><td>onclick</td><td>When the control is clicked</td></tr><tr><td>onchange</td><td>When the value of the control changes</td></tr><tr><td>onkeydown</td><td>When the user presses a key</td></tr><tr><td>onkeypress</td><td>When the user presses an alphanumeric key</td></tr><tr><td>onkeyup</td><td>When the user releases a key</td></tr><tr><td>onmouseover</td><td>When the user moves the mouse pointer over the control</td></tr><tr><td>onserverclick</td><td>It raises the ServerClick event of the control, when the control is clicked</td></tr></tbody></table></figure>\n\n\n\n<h2>Client Side Source Code</h2>\n\n\n\n<p>We have already discussed that, ASP.NET pages are generally written in two files:</p>\n\n\n\n<ul><li>The content file or the markup file ( .aspx)</li><li>The code-behind file</li></ul>\n\n\n\n<p>The content file contains the HTML or ASP.NET control tags and literals to form the structure of the page. The code behind file contains the class definition. At run-time, the content file is parsed and transformed into a page class.</p>\n\n\n\n<p>This class, along with the class definition in the code file, and system generated code, together make the executable code (assembly) that processes all posted data, generates response, and sends it back to the client.</p>\n\n\n\n<p>Consider the simple page:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" \n   Inherits=\"clientside._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n      \n         &lt;div>\n            &lt;asp:TextBox ID=\"TextBox1\" runat=\"server\">&lt;/asp:TextBox>  \n            &lt;asp:Button ID=\"Button1\" runat=\"server\" OnClick=\"Button1_Click\" Text=\"Click\" />\n         &lt;/div>\n         \n         &lt;hr />\n         \n         &lt;h3> &lt;asp:Label ID=\"Msg\" runat=\"server\" Text=\"\"> &lt;/asp:Label> &lt;/h3>\n      &lt;/form>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>When this page is run on the browser, the View Source option shows the HTML page sent to the browser by the ASP.Net runtime:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n \n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head>\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form name=\"form1\" method=\"post\" action=\"Default.aspx\" id=\"form1\">\n      \n         &lt;div>\n            &lt;input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" \n               value=\"/wEPDwUKMTU5MTA2ODYwOWRk31NudGDgvhhA7joJum9Qn5RxU2M=\" />\n         &lt;/div>\n \n         &lt;div>\n            &lt;input type=\"hidden\" name=\"__EVENTVALIDATION\"  id=\"__EVENTVALIDATION\" \n               value=\"/wEWAwKpjZj0DALs0bLrBgKM54rGBhHsyM61rraxE+KnBTCS8cd1QDJ/\"/>\n         &lt;/div>\n\n         &lt;div>\n            &lt;input name=\"TextBox1\" type=\"text\" id=\"TextBox1\" />  \n            &lt;input type=\"submit\" name=\"Button1\" value=\"Click\" id=\"Button1\" />\n         &lt;/div>\n\n         &lt;hr />\n         &lt;h3>&lt;span id=\"Msg\">&lt;/span>&lt;/h3>\n         \n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>If you go through the code properly, you can see that first two &lt;div&gt; tags contain the hidden fields which store the view state and validation information.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET client side coding has two aspects: Client side scripts&nbsp;: It runs on the browser and in turn speeds up the execution of page. For example, client side data validation which can catch invalid data and warn the user accordingly without making a round trip to the server. Client side source code&nbsp;: ASP.NET pages generate [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3460"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3460"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3460/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3460"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3460"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3460"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3462,
    "date": "2020-09-07T09:25:55",
    "date_gmt": "2020-09-07T09:25:55",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3462"
    },
    "modified": "2020-09-07T09:25:55",
    "modified_gmt": "2020-09-07T09:25:55",
    "slug": "basic-controls",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/basic-controls/",
    "title": {
      "rendered": "Basic Controls"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we will discuss the basic controls available in ASP.NET.</p>\n\n\n\n<h2>Button Controls</h2>\n\n\n\n<p>ASP.NET provides three types of button control:</p>\n\n\n\n<ul><li><strong>Button</strong>&nbsp;: It displays text within a rectangular area.</li><li><strong>Link Button</strong>&nbsp;: It displays text that looks like a hyperlink.</li><li><strong>Image Button</strong>&nbsp;: It displays an image.</li></ul>\n\n\n\n<p>When a user clicks a button, two events are raised: Click and Command.</p>\n\n\n\n<p>Basic syntax of button control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Button ID=\"Button1\" runat=\"server\" onclick=\"Button1_Click\" Text=\"Click\" / ></code></pre>\n\n\n\n<p>Common properties of the button control:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>Text</td><td>The text displayed on the button. This is for button and link button controls only.</td></tr><tr><td>ImageUrl</td><td>For image button control only. The image to be displayed for the button.</td></tr><tr><td>AlternateText</td><td>For image button control only. The text to be displayed if the browser cannot display the image.</td></tr><tr><td>CausesValidation</td><td>Determines whether page validation occurs when a user clicks the button. The default is true.</td></tr><tr><td>CommandName</td><td>A string value that is passed to the command event when a user clicks the button.</td></tr><tr><td>CommandArgument</td><td>A string value that is passed to the command event when a user clicks the button.</td></tr><tr><td>PostBackUrl</td><td>The URL of the page that is requested when the user clicks the button.</td></tr></tbody></table></figure>\n\n\n\n<h2>Text Boxes and Labels</h2>\n\n\n\n<p>Text box controls are typically used to accept input from the user. A text box control can accept one or more lines of text depending upon the settings of the TextMode attribute.</p>\n\n\n\n<p>Label controls provide an easy way to display text which can be changed from one execution of a page to the next. If you want to display text that does not change, you use the literal text.</p>\n\n\n\n<p>Basic syntax of text control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:TextBox ID=\"txtstate\" runat=\"server\" >&lt;/asp:TextBox></code></pre>\n\n\n\n<p>Common Properties of the Text Box and Labels:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>TextMode</td><td>Specifies the type of text box. SingleLine creates a standard text box, MultiLIne creates a text box that accepts more than one line of text and the Password causes the characters that are entered to be masked. The default is SingleLine.</td></tr><tr><td>Text</td><td>The text content of the text box.</td></tr><tr><td>MaxLength</td><td>The maximum number of characters that can be entered into the text box.</td></tr><tr><td>Wrap</td><td>It determines whether or not text wraps automatically for multi-line text box; default is true.</td></tr><tr><td>ReadOnly</td><td>Determines whether the user can change the text in the box; default is false, i.e., the user can not change the text.</td></tr><tr><td>Columns</td><td>The width of the text box in characters. The actual width is determined based on the font that is used for the text entry.</td></tr><tr><td>Rows</td><td>The height of a multi-line text box in lines. The default value is 0, means a single line text box.</td></tr></tbody></table></figure>\n\n\n\n<p>The mostly used attribute for a label control is &#8216;Text&#8217;, which implies the text displayed on the label.</p>\n\n\n\n<h2>Check Boxes and Radio Buttons</h2>\n\n\n\n<p>A check box displays a single option that the user can either check or uncheck and radio buttons present a group of options from which the user can select just one option.</p>\n\n\n\n<p>To create a group of radio buttons, you specify the same name for the GroupName attribute of each radio button in the group. If more than one group is required in a single form, then specify a different group name for each group.</p>\n\n\n\n<p>If you want check box or radio button to be selected when the form is initially displayed, set its Checked attribute to true. If the Checked attribute is set to true for multiple radio buttons in a group, then only the last one is considered as true.</p>\n\n\n\n<p>Basic syntax of check box:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:CheckBox ID= \"chkoption\" runat= \"Server\"> \n&lt;/asp:CheckBox></code></pre>\n\n\n\n<p>Basic syntax of radio button:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:RadioButton ID= \"rdboption\" runat= \"Server\"> \n&lt;/asp: RadioButton></code></pre>\n\n\n\n<p>Common properties of check boxes and radio buttons:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>Text</td><td>The text displayed next to the check box or radio button.</td></tr><tr><td>Checked</td><td>Specifies whether it is selected or not, default is false.</td></tr><tr><td>GroupName</td><td>Name of the group the control belongs to.</td></tr></tbody></table></figure>\n\n\n\n<h2>List Controls</h2>\n\n\n\n<p>ASP.NET provides the following controls</p>\n\n\n\n<ul><li>Drop-down list,</li><li>List box,</li><li>Radio button list,</li><li>Check box list,</li><li>Bulleted list.</li></ul>\n\n\n\n<p>These control let a user choose from one or more items from the list. List boxes and drop-down lists contain one or more list items. These lists can be loaded either by code or by the ListItemCollection editor.</p>\n\n\n\n<p>Basic syntax of list box control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:ListBox ID=\"ListBox1\" runat=\"server\" AutoPostBack=\"True\"    OnSelectedIndexChanged=\"ListBox1_SelectedIndexChanged\">\n&lt;/asp:ListBox></code></pre>\n\n\n\n<p>Basic syntax of drop-down list control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:DropDownList ID=\"DropDownList1\" runat=\"server\" AutoPostBack=\"True\"   OnSelectedIndexChanged=\"DropDownList1_SelectedIndexChanged\">\n&lt;/asp:DropDownList></code></pre>\n\n\n\n<p>Common properties of list box and drop-down Lists:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>Items</td><td>The collection of ListItem objects that represents the items in the control. This property returns an object of type ListItemCollection.</td></tr><tr><td>Rows</td><td>Specifies the number of items displayed in the box. If actual list contains more rows than displayed then a scroll bar is added.</td></tr><tr><td>SelectedIndex</td><td>The index of the currently selected item. If more than one item is selected, then the index of the first selected item. If no item is selected, the value of this property is -1.</td></tr><tr><td>SelectedValue</td><td>The value of the currently selected item. If more than one item is selected, then the value of the first selected item. If no item is selected, the value of this property is an empty string (&#8220;&#8221;).</td></tr><tr><td>SelectionMode</td><td>Indicates whether a list box allows single selections or multiple selections.</td></tr></tbody></table></figure>\n\n\n\n<p>Common properties of each list item objects:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>Text</td><td>The text displayed for the item.</td></tr><tr><td>Selected</td><td>Indicates whether the item is selected.</td></tr><tr><td>Value</td><td>A string value associated with the item.</td></tr></tbody></table></figure>\n\n\n\n<p>It is important to notes that:</p>\n\n\n\n<ul><li>To work with the items in a drop-down list or list box, you use the Items property of the control. This property returns a ListItemCollection object which contains all the items of the list.</li><li>The SelectedIndexChanged event is raised when the user selects a different item from a drop-down list or list box.</li></ul>\n\n\n\n<h2>The ListItemCollection</h2>\n\n\n\n<p>The ListItemCollection object is a collection of ListItem objects. Each ListItem object represents one item in the list. Items in a ListItemCollection are numbered from 0.</p>\n\n\n\n<p>When the items into a list box are loaded using strings like: lstcolor.Items.Add(&#8220;Blue&#8221;), then both the Text and Value properties of the list item are set to the string value you specify. To set it differently you must create a list item object and then add that item to the collection.</p>\n\n\n\n<p>The ListItemCollection Editor is used to add item to a drop-down list or list box. This is used to create a static list of items. To display the collection editor, select edit item from the smart tag menu, or select the control and then click the ellipsis button from the Item property in the properties window.</p>\n\n\n\n<p>Common properties of ListItemCollection:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>Item(integer)</td><td>A ListItem object that represents the item at the specified index.</td></tr><tr><td>Count</td><td>The number of items in the collection.</td></tr></tbody></table></figure>\n\n\n\n<p>Common methods of ListItemCollection:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>Add(string)</td><td>Adds a new item at the end of the collection and assigns the string parameter to the Text property of the item.</td></tr><tr><td>Add(ListItem)</td><td>Adds a new item at the end of the collection.</td></tr><tr><td>Insert(integer, string)</td><td>Inserts an item at the specified index location in the collection, and assigns string parameter to the text property of the item.</td></tr><tr><td>Insert(integer, ListItem)</td><td>Inserts the item at the specified index location in the collection.</td></tr><tr><td>Remove(string)</td><td>Removes the item with the text value same as the string.</td></tr><tr><td>Remove(ListItem)</td><td>Removes the specified item.</td></tr><tr><td>RemoveAt(integer)</td><td>Removes the item at the specified index as the integer.</td></tr><tr><td>Clear</td><td>Removes all the items of the collection.</td></tr><tr><td>FindByValue(string)</td><td>Returns the item whose value is same as the string.</td></tr><tr><td>FindByValue(Text)</td><td>Returns the item whose text is same as the string.</td></tr></tbody></table></figure>\n\n\n\n<h2>Radio Button list and Check Box list</h2>\n\n\n\n<p>A radio button list presents a list of mutually exclusive options. A check box list presents a list of independent options. These controls contain a collection of ListItem objects that could be referred to through the Items property of the control.</p>\n\n\n\n<p>Basic syntax of radio button list:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:RadioButtonList ID=\"RadioButtonList1\" runat=\"server\" AutoPostBack=\"True\" \n   OnSelectedIndexChanged=\"RadioButtonList1_SelectedIndexChanged\">\n&lt;/asp:RadioButtonList></code></pre>\n\n\n\n<p>Basic syntax of check box list:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:CheckBoxList ID=\"CheckBoxList1\" runat=\"server\" AutoPostBack=\"True\" \n   OnSelectedIndexChanged=\"CheckBoxList1_SelectedIndexChanged\">\n&lt;/asp:CheckBoxList></code></pre>\n\n\n\n<p>Common properties of check box and radio button lists:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>RepeatLayout</td><td>This attribute specifies whether the table tags or the normal html flow to use while formatting the list when it is rendered. The default is Table.</td></tr><tr><td>RepeatDirection</td><td>It specifies the direction in which the controls to be repeated. The values available are Horizontal and Vertical. Default is Vertical.</td></tr><tr><td>RepeatColumns</td><td>It specifies the number of columns to use when repeating the controls; default is 0.</td></tr></tbody></table></figure>\n\n\n\n<h2>Bulleted lists and Numbered lists</h2>\n\n\n\n<p>The bulleted list control creates bulleted lists or numbered lists. These controls contain a collection of ListItem objects that could be referred to through the Items property of the control.</p>\n\n\n\n<p>Basic syntax of a bulleted list:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:BulletedList ID=\"BulletedList1\" runat=\"server\">\n&lt;/asp:BulletedList></code></pre>\n\n\n\n<p>Common properties of the bulleted list:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>BulletStyle</td><td>This property specifies the style and looks of the bullets, or numbers.</td></tr><tr><td>RepeatDirection</td><td>It specifies the direction in which the controls to be repeated. The values available are Horizontal and Vertical. Default is Vertical.</td></tr><tr><td>RepeatColumns</td><td>It specifies the number of columns to use when repeating the controls; default is 0.</td></tr></tbody></table></figure>\n\n\n\n<h2>HyperLink Control</h2>\n\n\n\n<p>The HyperLink control is like the HTML &lt;a&gt; element.</p>\n\n\n\n<p>Basic syntax for a hyperlink control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:HyperLink ID=\"HyperLink1\" runat=\"server\">\n   HyperLink\n&lt;/asp:HyperLink></code></pre>\n\n\n\n<p>It has the following important properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>ImageUrl</td><td>Path of the image to be displayed by the control.</td></tr><tr><td>NavigateUrl</td><td>Target link URL.</td></tr><tr><td>Text</td><td>The text to be displayed as the link.</td></tr><tr><td>Target</td><td>The window or frame which loads the linked page.</td></tr></tbody></table></figure>\n\n\n\n<h2>Image Control</h2>\n\n\n\n<p>The image control is used for displaying images on the web page, or some alternative text, if the image is not available.</p>\n\n\n\n<p>Basic syntax for an image control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Image ID=\"Image1\" runat=\"server\"></code></pre>\n\n\n\n<p>It has the following important properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>AlternateText</td><td>Alternate text to be displayed in absence of the image.</td></tr><tr><td>ImageAlign</td><td>Alignment options for the control.</td></tr><tr><td>ImageUrl</td><td>Path of the image to be displayed by the control.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we will discuss the basic controls available in ASP.NET. Button Controls ASP.NET provides three types of button control: Button&nbsp;: It displays text within a rectangular area. Link Button&nbsp;: It displays text that looks like a hyperlink. Image Button&nbsp;: It displays an image. When a user clicks a button, two events are raised: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3462"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3462"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3462/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3462"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3462"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3462"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3464,
    "date": "2020-09-07T09:28:01",
    "date_gmt": "2020-09-07T09:28:01",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3464"
    },
    "modified": "2020-09-07T09:28:01",
    "modified_gmt": "2020-09-07T09:28:01",
    "slug": "directives-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/directives-2/",
    "title": {
      "rendered": "Directives"
    },
    "content": {
      "rendered": "\n<p>ASP.NET directives are instructions to specify optional settings, such as registering a custom control and page language. These settings describe how the web forms (.aspx) or user controls (.ascx) pages are processed by the .Net framework.</p>\n\n\n\n<p>The syntax for declaring a directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@  directive_name attribute=value  &#91;attribute=value]  %></code></pre>\n\n\n\n<p>In this section, we will just introduce the ASP.NET directives and we will use most of these directives throughout the tutorials.</p>\n\n\n\n<h2>The Application Directive</h2>\n\n\n\n<p>The Application directive defines application-specific attributes. It is provided at the top of the global.aspx file.</p>\n\n\n\n<p>The basic syntax of Application directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Application Language=\"C#\" %></code></pre>\n\n\n\n<p>The attributes of the Application directive are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attributes</th><th>Description</th></tr><tr><td>Inherits</td><td>The name of the class from which to inherit.</td></tr><tr><td>Description</td><td>The text description of the application. Parsers and compilers ignore this.</td></tr><tr><td>Language</td><td>The language used in code blocks.</td></tr></tbody></table></figure>\n\n\n\n<h2>The Assembly Directive</h2>\n\n\n\n<p>The Assembly directive links an assembly to the page or the application at parse time. This could appear either in the global.asax file for application-wide linking, in the page file, a user control file for linking to a page or user control.</p>\n\n\n\n<p>The basic syntax of Assembly directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Assembly Name =\"myassembly\" %></code></pre>\n\n\n\n<p>The attributes of the Assembly directive are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attributes</th><th>Description</th></tr><tr><td>Name</td><td>The name of the assembly to be linked.</td></tr><tr><td>Src</td><td>The path to the source file to be linked and compiled dynamically.</td></tr></tbody></table></figure>\n\n\n\n<h2>The Control Directive</h2>\n\n\n\n<p>The control directive is used with the user controls and appears in the user control (.ascx) files.</p>\n\n\n\n<p>The basic syntax of Control directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Control Language=\"C#\"  EnableViewState=\"false\" %></code></pre>\n\n\n\n<p>The attributes of the Control directive are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attributes</th><th>Description</th></tr><tr><td>AutoEventWireup</td><td>The Boolean value that enables or disables automatic association of events to handlers.</td></tr><tr><td>ClassName</td><td>The file name for the control.</td></tr><tr><td>Debug</td><td>The Boolean value that enables or disables compiling with debug symbols.</td></tr><tr><td>Description</td><td>The text description of the control page, ignored by compiler.</td></tr><tr><td>EnableViewState</td><td>The Boolean value that indicates whether view state is maintained across page requests.</td></tr><tr><td>Explicit</td><td>For VB language, tells the compiler to use option explicit mode.</td></tr><tr><td>Inherits</td><td>The class from which the control page inherits.</td></tr><tr><td>Language</td><td>The language for code and script.</td></tr><tr><td>Src</td><td>The filename for the code-behind class.</td></tr><tr><td>Strict</td><td>For VB language, tells the compiler to use the option strict mode.</td></tr></tbody></table></figure>\n\n\n\n<h2>The Implements Directive</h2>\n\n\n\n<p>The Implement directive indicates that the web page, master page or user control page must implement the specified .Net framework interface.</p>\n\n\n\n<p>The basic syntax for implements directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Implements  Interface=\"interface_name\" %></code></pre>\n\n\n\n<h2>The Import Directive</h2>\n\n\n\n<p>The Import directive imports a namespace into a web page, user control page of application. If the Import directive is specified in the global.asax file, then it is applied to the entire application. If it is in a page of user control page, then it is applied to that page or control.</p>\n\n\n\n<p>The basic syntax for import directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ namespace=\"System.Drawing\" %></code></pre>\n\n\n\n<h2>The Master Directive</h2>\n\n\n\n<p>The Master directive specifies a page file as being the mater page.</p>\n\n\n\n<p>The basic syntax of sample MasterPage directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ MasterPage Language=\"C#\"  AutoEventWireup=\"true\"  CodeFile=\"SiteMater.master.cs\" Inherits=\"SiteMaster\"  %></code></pre>\n\n\n\n<h2>The MasterType Directive</h2>\n\n\n\n<p>The MasterType directive assigns a class name to the Master property of a page, to make it strongly typed.</p>\n\n\n\n<p>The basic syntax of MasterType directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ MasterType attribute=\"value\"&#91;attribute=\"value\" ...]  %></code></pre>\n\n\n\n<h2>The OutputCache Directive</h2>\n\n\n\n<p>The OutputCache directive controls the output caching policies of a web page or a user control.</p>\n\n\n\n<p>The basic syntax of OutputCache directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ OutputCache Duration=\"15\" VaryByParam=\"None\"  %></code></pre>\n\n\n\n<h2>The Page Directive</h2>\n\n\n\n<p>The Page directive defines the attributes specific to the page file for the page parser and the compiler.</p>\n\n\n\n<p>The basic syntax of Page directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\"  AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\"  Inherits=\"_Default\"  Trace=\"true\" %></code></pre>\n\n\n\n<p>The attributes of the Page directive are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attributes</th><th>Description</th></tr><tr><td>AutoEventWireup</td><td>The Boolean value that enables or disables page events that are being automatically bound to methods; for example, Page_Load.</td></tr><tr><td>Buffer</td><td>The Boolean value that enables or disables HTTP response buffering.</td></tr><tr><td>ClassName</td><td>The class name for the page.</td></tr><tr><td>ClientTarget</td><td>The browser for which the server controls should render content.</td></tr><tr><td>CodeFile</td><td>The name of the code behind file.</td></tr><tr><td>Debug</td><td>The Boolean value that enables or disables compilation with debug symbols.</td></tr><tr><td>Description</td><td>The text description of the page, ignored by the parser.</td></tr><tr><td>EnableSessionState</td><td>It enables, disables, or makes session state read-only.</td></tr><tr><td>EnableViewState</td><td>The Boolean value that enables or disables view state across page requests.</td></tr><tr><td>ErrorPage</td><td>URL for redirection if an unhandled page exception occurs.</td></tr><tr><td>Inherits</td><td>The name of the code behind or other class.</td></tr><tr><td>Language</td><td>The programming language for code.</td></tr><tr><td>Src</td><td>The file name of the code behind class.</td></tr><tr><td>Trace</td><td>It enables or disables tracing.</td></tr><tr><td>TraceMode</td><td>It indicates how trace messages are displayed, and sorted by time or category.</td></tr><tr><td>Transaction</td><td>It indicates if transactions are supported.</td></tr><tr><td>ValidateRequest</td><td>The Boolean value that indicates whether all input data is validated against a hardcoded list of values.</td></tr></tbody></table></figure>\n\n\n\n<h2>The PreviousPageType Directive</h2>\n\n\n\n<p>The PreviousPageType directive assigns a class to a page, so that the page is strongly typed.</p>\n\n\n\n<p>The basic syntax for a sample PreviousPagetype directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ PreviousPageType attribute=\"value\"&#91;attribute=\"value\" ...]   %></code></pre>\n\n\n\n<h2>The Reference Directive</h2>\n\n\n\n<p>The Reference directive indicates that another page or user control should be compiled and linked to the current page.</p>\n\n\n\n<p>The basic syntax of Reference directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Reference Page =\"somepage.aspx\" %></code></pre>\n\n\n\n<h2>The Register Directive</h2>\n\n\n\n<p>The Register derivative is used for registering the custom server controls and user controls.</p>\n\n\n\n<p>The basic syntax of Register directive is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Register Src=\"~/footer.ascx\" TagName=\"footer\" TagPrefix=\"Tfooter\" %></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET directives are instructions to specify optional settings, such as registering a custom control and page language. These settings describe how the web forms (.aspx) or user controls (.ascx) pages are processed by the .Net framework. The syntax for declaring a directive is: In this section, we will just introduce the ASP.NET directives and we [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3464"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3464"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3464/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3464"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3464"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3464"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3466,
    "date": "2020-09-07T09:30:10",
    "date_gmt": "2020-09-07T09:30:10",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3466"
    },
    "modified": "2020-09-07T09:30:10",
    "modified_gmt": "2020-09-07T09:30:10",
    "slug": "managing-state",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/managing-state/",
    "title": {
      "rendered": "Managing State"
    },
    "content": {
      "rendered": "\n<p>Hyper Text Transfer Protocol (HTTP) is a stateless protocol. When the client disconnects from the server, the ASP.NET engine discards the page objects. This way, each web application can scale up to serve numerous requests simultaneously without running out of server memory.</p>\n\n\n\n<p>However, there needs to be some technique to store the information between requests and to retrieve it when required. This information i.e., the current value of all the controls and variables for the current user in the current session is called the State.</p>\n\n\n\n<p>ASP.NET manages four types of states:</p>\n\n\n\n<ul><li>View State</li><li>Control State</li><li>Session State</li><li>Application State</li></ul>\n\n\n\n<h2>View State</h2>\n\n\n\n<p>The view state is the state of the page and all its controls. It is automatically maintained across posts by the ASP.NET framework.</p>\n\n\n\n<p>When a page is sent back to the client, the changes in the properties of the page and its controls are determined, and stored in the value of a hidden input field named _VIEWSTATE. When the page is again posted back, the _VIEWSTATE field is sent to the server with the HTTP request.</p>\n\n\n\n<p>The view state could be enabled or disabled for:</p>\n\n\n\n<ul><li><strong>The entire application</strong>&nbsp;by setting the EnableViewState property in the &lt;pages&gt; section of web.config file.</li><li><strong>A page</strong>&nbsp;by setting the EnableViewState attribute of the Page directive, as &lt;%@ Page Language=&#8221;C#&#8221; EnableViewState=&#8221;false&#8221; %&gt;</li><li><strong>A control</strong>&nbsp;by setting the Control.EnableViewState property.</li></ul>\n\n\n\n<p>It is implemented using a view state object defined by the StateBag class which defines a collection of view state items. The state bag is a data structure containing attribute value pairs, stored as strings associated with objects.</p>\n\n\n\n<p>The StateBag class has the following properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>Item(name)</td><td>The value of the view state item with the specified name. This is the default property of the StateBag class.</td></tr><tr><td>Count</td><td>The number of items in the view state collection.</td></tr><tr><td>Keys</td><td>Collection of keys for all the items in the collection.</td></tr><tr><td>Values</td><td>Collection of values for all the items in the collection.</td></tr></tbody></table></figure>\n\n\n\n<p>The StateBag class has the following methods:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>Add(name, value)</td><td>Adds an item to the view state collection and existing item is updated.</td></tr><tr><td>Clear</td><td>Removes all the items from the collection.</td></tr><tr><td>Equals(Object)</td><td>Determines whether the specified object is equal to the current object.</td></tr><tr><td>Finalize</td><td>Allows it to free resources and perform other cleanup operations.</td></tr><tr><td>GetEnumerator</td><td>Returns an enumerator that iterates over all the key/value pairs of the StateItem objects stored in the StateBag object.</td></tr><tr><td>GetType</td><td>Gets the type of the current instance.</td></tr><tr><td>IsItemDirty</td><td>Checks a StateItem object stored in the StateBag object to evaluate whether it has been modified.</td></tr><tr><td>Remove(name)</td><td>Removes the specified item.</td></tr><tr><td>SetDirty</td><td>Sets the state of the StateBag object as well as the Dirty property of each of the StateItem objects contained by it.</td></tr><tr><td>SetItemDirty</td><td>Sets the Dirty property for the specified StateItem object in the StateBag object.</td></tr><tr><td>ToString</td><td>Returns a string representing the state bag object.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the concept of storing view state. Let us keep a counter, which is incremented each time the page is posted back by clicking a button on the page. A label control shows the value in the counter.</p>\n\n\n\n<p>The markup file code is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"statedemo._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n      \n         &lt;div>\n            &lt;h3>View State demo&lt;/h3>\n         \n            Page Counter:\n            \n            &lt;asp:Label ID=\"lblCounter\" runat=\"server\" />\n            &lt;asp:Button ID=\"btnIncrement\" runat=\"server\" Text=\"Add Count\" onclick=\"btnIncrement_Click\" />\n         &lt;/div>\n         \n      &lt;/form>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>The code behind file for the example is shown here:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public partial class _Default : System.Web.UI.Page\n{\n   public int counter\n   {\n      get\n      {\n         if (ViewState&#91;\"pcounter\"] != null)\n         {\n            return ((int)ViewState&#91;\"pcounter\"]);\n         }\n         else\n         {\n            return 0;\n         }\n      }\n      \n      set\n      {\n         ViewState&#91;\"pcounter\"] = value;\n      }\n   }\n        \n   protected void Page_Load(object sender, EventArgs e)\n   {\n      lblCounter.Text = counter.ToString();\n      counter++;\n   }\n}</code></pre>\n\n\n\n<p>It would produce the following result:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/view_state_demo.jpg\" alt=\"View State Demo\"/></figure>\n\n\n\n<h2>Control State</h2>\n\n\n\n<p>Control state cannot be modified, accessed directly, or disabled.</p>\n\n\n\n<h2>Session State</h2>\n\n\n\n<p>When a user connects to an ASP.NET website, a new session object is created. When session state is turned on, a new session state object is created for each new request. This session state object becomes part of the context and it is available through the page.</p>\n\n\n\n<p>Session state is generally used for storing application data such as inventory, supplier list, customer record, or shopping cart. It can also keep information about the user and his preferences, and keep the track of pending operations.</p>\n\n\n\n<p>Sessions are identified and tracked with a 120-bit SessionID, which is passed from client to server and back as cookie or a modified URL. The SessionID is globally unique and random.</p>\n\n\n\n<p>The session state object is created from the HttpSessionState class, which defines a collection of session state items.</p>\n\n\n\n<p>The HttpSessionState class has the following properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>SessionID</td><td>The unique session identifier.</td></tr><tr><td>Item(name)</td><td>The value of the session state item with the specified name. This is the default property of the HttpSessionState class.</td></tr><tr><td>Count</td><td>The number of items in the session state collection.</td></tr><tr><td>TimeOut</td><td>Gets and sets the amount of time, in minutes, allowed between requests before the session-state provider terminates the session.</td></tr></tbody></table></figure>\n\n\n\n<p>The HttpSessionState class has the following methods:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>Add(name, value)</td><td>Adds an item to the session state collection.</td></tr><tr><td>Clear</td><td>Removes all the items from session state collection.</td></tr><tr><td>Remove(name)</td><td>Removes the specified item from the session state collection.</td></tr><tr><td>RemoveAll</td><td>Removes all keys and values from the session-state collection.</td></tr><tr><td>RemoveAt</td><td>Deletes an item at a specified index from the session-state collection.</td></tr></tbody></table></figure>\n\n\n\n<p>The session state object is a name-value pair to store and retrieve some information from the session state object. You could use the following code for the same:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void StoreSessionInfo()\n{\n   String fromuser = TextBox1.Text;\n   Session&#91;\"fromuser\"] = fromuser;\n}\n\nvoid RetrieveSessionInfo()\n{\n   String fromuser = Session&#91;\"fromuser\"];\n   Label1.Text = fromuser;\n}</code></pre>\n\n\n\n<p>The above code stores only strings in the Session dictionary object, however, it can store all the primitive data types and arrays composed of primitive data types, as well as the DataSet, DataTable, HashTable, and Image objects, as well as any user-defined class that inherits from the ISerializable object.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the concept of storing session state. There are two buttons on the page, a text box to enter string and a label to display the text stored from last session.</p>\n\n\n\n<p>The mark up file code is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\"  CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\"  %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n            &amp;nbsp; &amp;nbsp; &amp;nbsp;\n            \n            &lt;table style=\"width: 568px; height: 103px\">\n            \n               &lt;tr>\n                  &lt;td style=\"width: 209px\">\n                     &lt;asp:Label ID=\"lblstr\" runat=\"server\" Text=\"Enter a String\"  style=\"width:94px\">\n                     &lt;/asp:Label>\n                  &lt;/td>\n\t\t\t\t\t\n                  &lt;td style=\"width: 317px\">\n                     &lt;asp:TextBox ID=\"txtstr\" runat=\"server\" style=\"width:227px\">\n                     &lt;/asp:TextBox>\n                  &lt;/td>\n               &lt;/tr>\n\t\n               &lt;tr>\n                  &lt;td style=\"width: 209px\"> &lt;/td>\n                  &lt;td style=\"width: 317px\"> &lt;/td>\n               &lt;/tr>\n\t\n               &lt;tr>\n                  &lt;td style=\"width: 209px\">\n                     &lt;asp:Button ID=\"btnnrm\" runat=\"server\" \n                        Text=\"No action button\" style=\"width:128px\" />\n                  &lt;/td>\n\t\n                  &lt;td style=\"width: 317px\">\n                     &lt;asp:Button ID=\"btnstr\" runat=\"server\" \n                        OnClick=\"btnstr_Click\" Text=\"Submit the String\" />\n                  &lt;/td> \n               &lt;/tr>\n\t\n               &lt;tr>\n                  &lt;td style=\"width: 209px\">  &lt;/td>\n\t\n                  &lt;td style=\"width: 317px\">  &lt;/td>  \n               &lt;/tr>\n\t\n               &lt;tr>\n                  &lt;td style=\"width: 209px\">\n                     &lt;asp:Label ID=\"lblsession\" runat=\"server\"  style=\"width:231px\"  >\n                     &lt;/asp:Label>\n                  &lt;/td>\n\t\n                  &lt;td style=\"width: 317px\">  &lt;/td>\n               &lt;/tr>\n\t\n               &lt;tr>\n                  &lt;td style=\"width: 209px\">\n                     &lt;asp:Label ID=\"lblshstr\" runat=\"server\">\n                     &lt;/asp:Label>\n                  &lt;/td>\n\t\n                  &lt;td style=\"width: 317px\">  &lt;/td>\n               &lt;/tr>\n               \n            &lt;/table>\n            \n         &lt;/div>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It should look like the following in design view:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/session_design_view.jpg\" alt=\"session design view\"/></figure>\n\n\n\n<p>The code behind file is given here:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public partial class _Default : System.Web.UI.Page \n{\n   String mystr;\n   \n   protected void Page_Load(object sender, EventArgs e)\n   {\n      this.lblshstr.Text = this.mystr;\n      this.lblsession.Text = (String)this.Session&#91;\"str\"];\n   }\n   \n   protected void btnstr_Click(object sender, EventArgs e)\n   {\n      this.mystr = this.txtstr.Text;\n      this.Session&#91;\"str\"] = this.txtstr.Text;\n      this.lblshstr.Text = this.mystr;\n      this.lblsession.Text = (String)this.Session&#91;\"str\"];\n   }\n}</code></pre>\n\n\n\n<p>Execute the file and observe how it works:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/session_run_view.jpg\" alt=\"session run view\"/></figure>\n\n\n\n<h2>Application State</h2>\n\n\n\n<p>The ASP.NET application is the collection of all web pages, code and other files within a single virtual directory on a web server. When information is stored in application state, it is available to all the users.</p>\n\n\n\n<p>To provide for the use of application state, ASP.NET creates an application state object for each application from the HTTPApplicationState class and stores this object in server memory. This object is represented by class file global.asax.</p>\n\n\n\n<p>Application State is mostly used to store hit counters and other statistical data, global application data like tax rate, discount rate etc. and to keep the track of users visiting the site.</p>\n\n\n\n<p>The HttpApplicationState class has the following properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>Item(name)</td><td>The value of the application state item with the specified name. This is the default property of the HttpApplicationState class.</td></tr><tr><td>Count</td><td>The number of items in the application state collection.</td></tr></tbody></table></figure>\n\n\n\n<p>The HttpApplicationState class has the following methods:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>Add(name, value)</td><td>Adds an item to the application state collection.</td></tr><tr><td>Clear</td><td>Removes all the items from the application state collection.</td></tr><tr><td>Remove(name)</td><td>Removes the specified item from the application state collection.</td></tr><tr><td>RemoveAll</td><td>Removes all objects from an HttpApplicationState collection.</td></tr><tr><td>RemoveAt</td><td>Removes an HttpApplicationState object from a collection by index.</td></tr><tr><td>Lock()</td><td>Locks the application state collection so only the current user can access it.</td></tr><tr><td>Unlock()</td><td>Unlocks the application state collection so all the users can access it.</td></tr></tbody></table></figure>\n\n\n\n<p>Application state data is generally maintained by writing handlers for the events:</p>\n\n\n\n<ul><li>Application_Start</li><li>Application_End</li><li>Application_Error</li><li>Session_Start</li><li>Session_End</li></ul>\n\n\n\n<p>The following code snippet shows the basic syntax for storing application state information:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Void Application_Start(object sender, EventArgs e)\n{\n   Application&#91;\"startMessage\"] = \"The application has started.\";\n}\n\nVoid Application_End(object sender, EventArgs e)\n{\n   Application&#91;\"endtMessage\"] = \"The application has ended.\";</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Hyper Text Transfer Protocol (HTTP) is a stateless protocol. When the client disconnects from the server, the ASP.NET engine discards the page objects. This way, each web application can scale up to serve numerous requests simultaneously without running out of server memory. However, there needs to be some technique to store the information between requests [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3466"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3466"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3466/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3466"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3466"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3466"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3468,
    "date": "2020-09-07T09:32:06",
    "date_gmt": "2020-09-07T09:32:06",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3468"
    },
    "modified": "2020-09-07T09:32:06",
    "modified_gmt": "2020-09-07T09:32:06",
    "slug": "validators",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/validators/",
    "title": {
      "rendered": "Validators"
    },
    "content": {
      "rendered": "\n<p>ASP.NET validation controls validate the user input data to ensure that useless, unauthenticated, or contradictory data don&#8217;t get stored.</p>\n\n\n\n<p>ASP.NET provides the following validation controls:</p>\n\n\n\n<ul><li>RequiredFieldValidator</li><li>RangeValidator</li><li>CompareValidator</li><li>RegularExpressionValidator</li><li>CustomValidator</li><li>ValidationSummary</li></ul>\n\n\n\n<h2>BaseValidator Class</h2>\n\n\n\n<p>The validation control classes are inherited from the BaseValidator class hence they inherit its properties and methods. Therefore, it would help to take a look at the properties and the methods of this base class, which are common for all the validation controls:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Members</th><th>Description</th></tr><tr><td>ControlToValidate</td><td>Indicates the input control to validate.</td></tr><tr><td>Display</td><td>Indicates how the error message is shown.</td></tr><tr><td>EnableClientScript</td><td>Indicates whether client side validation will take.</td></tr><tr><td>Enabled</td><td>Enables or disables the validator.</td></tr><tr><td>ErrorMessage</td><td>Indicates error string.</td></tr><tr><td>Text</td><td>Error text to be shown if validation fails.</td></tr><tr><td>IsValid</td><td>Indicates whether the value of the control is valid.</td></tr><tr><td>SetFocusOnError</td><td>It indicates whether in case of an invalid control, the focus should switch to the related input control.</td></tr><tr><td>ValidationGroup</td><td>The logical group of multiple validators, where this control belongs.</td></tr><tr><td>Validate()</td><td>This method revalidates the control and updates the IsValid property.</td></tr></tbody></table></figure>\n\n\n\n<h2>RequiredFieldValidator Control</h2>\n\n\n\n<p>The RequiredFieldValidator control ensures that the required field is not empty. It is generally tied to a text box to force input into the text box.</p>\n\n\n\n<p>The syntax of the control is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:RequiredFieldValidator ID=\"rfvcandidate\" \n   runat=\"server\" ControlToValidate =\"ddlcandidate\"\n   ErrorMessage=\"Please choose a candidate\" \n   InitialValue=\"Please choose a candidate\">\n   \n&lt;/asp:RequiredFieldValidator></code></pre>\n\n\n\n<h2>RangeValidator Control</h2>\n\n\n\n<p>The RangeValidator control verifies that the input value falls within a predetermined range.</p>\n\n\n\n<p>It has three specific properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>Type</td><td>It defines the type of the data. The available values are: Currency, Date, Double, Integer, and String.</td></tr><tr><td>MinimumValue</td><td>It specifies the minimum value of the range.</td></tr><tr><td>MaximumValue</td><td>It specifies the maximum value of the range.</td></tr></tbody></table></figure>\n\n\n\n<p>The syntax of the control is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:RangeValidator ID=\"rvclass\" runat=\"server\" ControlToValidate=\"txtclass\" \n   ErrorMessage=\"Enter your class (6 - 12)\" MaximumValue=\"12\" \n   MinimumValue=\"6\" Type=\"Integer\">\n   \n&lt;/asp:RangeValidator></code></pre>\n\n\n\n<h2>CompareValidator Control</h2>\n\n\n\n<p>The CompareValidator control compares a value in one control with a fixed value or a value in another control.</p>\n\n\n\n<p>It has the following specific properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>Type</td><td>It specifies the data type.</td></tr><tr><td>ControlToCompare</td><td>It specifies the value of the input control to compare with.</td></tr><tr><td>ValueToCompare</td><td>It specifies the constant value to compare with.</td></tr><tr><td>Operator</td><td>It specifies the comparison operator, the available values are: Equal, NotEqual, GreaterThan, GreaterThanEqual, LessThan, LessThanEqual, and DataTypeCheck.</td></tr></tbody></table></figure>\n\n\n\n<p>The basic syntax of the control is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:CompareValidator ID=\"CompareValidator1\" runat=\"server\" \n   ErrorMessage=\"CompareValidator\">\n   \n&lt;/asp:CompareValidator></code></pre>\n\n\n\n<h2>RegularExpressionValidator</h2>\n\n\n\n<p>The RegularExpressionValidator allows validating the input text by matching against a pattern of a regular expression. The regular expression is set in the ValidationExpression property.</p>\n\n\n\n<p>The following table summarizes the commonly used syntax constructs for regular expressions:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Character Escapes</th><th>Description</th></tr><tr><td>\\b</td><td>Matches a backspace.</td></tr><tr><td>\\t</td><td>Matches a tab.</td></tr><tr><td>\\r</td><td>Matches a carriage return.</td></tr><tr><td>\\v</td><td>Matches a vertical tab.</td></tr><tr><td>\\f</td><td>Matches a form feed.</td></tr><tr><td>\\n</td><td>Matches a new line.</td></tr><tr><td>\\</td><td>Escape character.</td></tr></tbody></table></figure>\n\n\n\n<p>Apart from single character match, a class of characters could be specified that can be matched, called the metacharacters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Metacharacters</th><th>Description</th></tr><tr><td>.</td><td>Matches any character except \\n.</td></tr><tr><td>[abcd]</td><td>Matches any character in the set.</td></tr><tr><td>[^abcd]</td><td>Excludes any character in the set.</td></tr><tr><td>[2-7a-mA-M]</td><td>Matches any character specified in the range.</td></tr><tr><td>\\w</td><td>Matches any alphanumeric character and underscore.</td></tr><tr><td>\\W</td><td>Matches any non-word character.</td></tr><tr><td>\\s</td><td>Matches whitespace characters like, space, tab, new line etc.</td></tr><tr><td>\\S</td><td>Matches any non-whitespace character.</td></tr><tr><td>\\d</td><td>Matches any decimal character.</td></tr><tr><td>\\D</td><td>Matches any non-decimal character.</td></tr></tbody></table></figure>\n\n\n\n<p>Quantifiers could be added to specify number of times a character could appear.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Quantifier</th><th>Description</th></tr><tr><td>*</td><td>Zero or more matches.</td></tr><tr><td>+</td><td>One or more matches.</td></tr><tr><td>?</td><td>Zero or one matches.</td></tr><tr><td>{N}</td><td>N matches.</td></tr><tr><td>{N,}</td><td>N or more matches.</td></tr><tr><td>{N,M}</td><td>Between N and M matches.</td></tr></tbody></table></figure>\n\n\n\n<p>The syntax of the control is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:RegularExpressionValidator ID=\"string\" runat=\"server\" ErrorMessage=\"string\"\n   ValidationExpression=\"string\" ValidationGroup=\"string\">\n   \n&lt;/asp:RegularExpressionValidator></code></pre>\n\n\n\n<h2>CustomValidator</h2>\n\n\n\n<p>The CustomValidator control allows writing application specific custom validation routines for both the client side and the server side validation.</p>\n\n\n\n<p>The client side validation is accomplished through the ClientValidationFunction property. The client side validation routine should be written in a scripting language, such as JavaScript or VBScript, which the browser can understand.</p>\n\n\n\n<p>The server side validation routine must be called from the control&#8217;s ServerValidate event handler. The server side validation routine should be written in any .Net language, like C# or VB.Net.</p>\n\n\n\n<p>The basic syntax for the control is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:CustomValidator ID=\"CustomValidator1\" runat=\"server\" \n   ClientValidationFunction=.cvf_func. ErrorMessage=\"CustomValidator\">\n   \n&lt;/asp:CustomValidator></code></pre>\n\n\n\n<h2>ValidationSummary</h2>\n\n\n\n<p>The ValidationSummary control does not perform any validation but shows a summary of all errors in the page. The summary displays the values of the ErrorMessage property of all validation controls that failed validation.</p>\n\n\n\n<p>The following two mutually inclusive properties list out the error message:</p>\n\n\n\n<ul><li><strong>ShowSummary</strong>&nbsp;: shows the error messages in specified format.</li><li><strong>ShowMessageBox</strong>&nbsp;: shows the error messages in a separate window.</li></ul>\n\n\n\n<p>The syntax for the control is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:ValidationSummary ID=\"ValidationSummary1\" runat=\"server\" \n   DisplayMode = \"BulletList\" ShowSummary = \"true\" HeaderText=\"Errors:\" /></code></pre>\n\n\n\n<h2>Validation Groups</h2>\n\n\n\n<p>Complex pages have different groups of information provided in different panels. In such situation, a need might arise for performing validation separately for separate group. This kind of situation is handled using validation groups.</p>\n\n\n\n<p>To create a validation group, you should put the input controls and the validation controls into the same logical group by setting their&nbsp;<em>ValidationGroup</em>&nbsp;property.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following example describes a form to be filled up by all the students of a school, divided into four houses, for electing the school president. Here, we use the validation controls to validate the user input.</p>\n\n\n\n<p>This is the form in design view:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/form_in_design_view.jpg\" alt=\"form in Design view\"/></figure>\n\n\n\n<p>The content file code is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form id=\"form1\" runat=\"server\">\n\n   &lt;table style=\"width: 66%;\">\n   \n      &lt;tr>\n         &lt;td class=\"style1\" colspan=\"3\" align=\"center\">\n         &lt;asp:Label ID=\"lblmsg\" \n            Text=\"President Election Form : Choose your president\" \n            runat=\"server\" />\n         &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style3\">\n            Candidate:\n         &lt;/td>\n\n         &lt;td class=\"style2\">\n            &lt;asp:DropDownList ID=\"ddlcandidate\" runat=\"server\"  style=\"width:239px\">\n               &lt;asp:ListItem>Please Choose a Candidate&lt;/asp:ListItem>\n               &lt;asp:ListItem>M H Kabir&lt;/asp:ListItem>\n               &lt;asp:ListItem>Steve Taylor&lt;/asp:ListItem>\n               &lt;asp:ListItem>John Abraham&lt;/asp:ListItem>\n               &lt;asp:ListItem>Venus Williams&lt;/asp:ListItem>\n            &lt;/asp:DropDownList>\n         &lt;/td>\n\n         &lt;td>\n            &lt;asp:RequiredFieldValidator ID=\"rfvcandidate\" \n               runat=\"server\" ControlToValidate =\"ddlcandidate\"\n               ErrorMessage=\"Please choose a candidate\" \n               InitialValue=\"Please choose a candidate\">\n            &lt;/asp:RequiredFieldValidator>\n         &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style3\">\n            House:\n         &lt;/td>\n\n         &lt;td class=\"style2\">\n            &lt;asp:RadioButtonList ID=\"rblhouse\" runat=\"server\" RepeatLayout=\"Flow\">\n               &lt;asp:ListItem>Red&lt;/asp:ListItem>\n               &lt;asp:ListItem>Blue&lt;/asp:ListItem>\n               &lt;asp:ListItem>Yellow&lt;/asp:ListItem>\n               &lt;asp:ListItem>Green&lt;/asp:ListItem>\n            &lt;/asp:RadioButtonList>\n         &lt;/td>\n\n         &lt;td>\n            &lt;asp:RequiredFieldValidator ID=\"rfvhouse\" runat=\"server\" \n               ControlToValidate=\"rblhouse\" ErrorMessage=\"Enter your house name\" >\n            &lt;/asp:RequiredFieldValidator>\n            &lt;br />\n         &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style3\">\n            Class:\n         &lt;/td>\n\n         &lt;td class=\"style2\">\n            &lt;asp:TextBox ID=\"txtclass\" runat=\"server\">&lt;/asp:TextBox>\n         &lt;/td>\n\n         &lt;td>\n            &lt;asp:RangeValidator ID=\"rvclass\" \n               runat=\"server\" ControlToValidate=\"txtclass\" \n               ErrorMessage=\"Enter your class (6 - 12)\" MaximumValue=\"12\" \n               MinimumValue=\"6\" Type=\"Integer\">\n            &lt;/asp:RangeValidator>\n         &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style3\">\n            Email:\n         &lt;/td>\n\n         &lt;td class=\"style2\">\n            &lt;asp:TextBox ID=\"txtemail\" runat=\"server\" style=\"width:250px\">\n            &lt;/asp:TextBox>\n         &lt;/td>\n\n         &lt;td>\n            &lt;asp:RegularExpressionValidator ID=\"remail\" runat=\"server\" \n               ControlToValidate=\"txtemail\" ErrorMessage=\"Enter your email\" \n               ValidationExpression=\"\\w+(&#91;-+.']\\w+)*@\\w+(&#91;-.]\\w+)*\\.\\w+(&#91;-.]\\w+)*\">\n            &lt;/asp:RegularExpressionValidator>\n         &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style3\" align=\"center\" colspan=\"3\">\n            &lt;asp:Button ID=\"btnsubmit\" runat=\"server\" onclick=\"btnsubmit_Click\" \n               style=\"text-align: center\" Text=\"Submit\" style=\"width:140px\" />\n         &lt;/td>\n      &lt;/tr>\n   &lt;/table>\n   &lt;asp:ValidationSummary ID=\"ValidationSummary1\" runat=\"server\" \n      DisplayMode =\"BulletList\" ShowSummary =\"true\" HeaderText=\"Errors:\" />\n&lt;/form></code></pre>\n\n\n\n<p>The code behind the submit button:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void btnsubmit_Click(object sender, EventArgs e)\n{\n   if (Page.IsValid)\n   {\n      lblmsg.Text = \"Thank You\";\n   }\n   else\n   {\n      lblmsg.Text = \"Fill up all the fields\";\n   }\n}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET validation controls validate the user input data to ensure that useless, unauthenticated, or contradictory data don&#8217;t get stored. ASP.NET provides the following validation controls: RequiredFieldValidator RangeValidator CompareValidator RegularExpressionValidator CustomValidator ValidationSummary BaseValidator Class The validation control classes are inherited from the BaseValidator class hence they inherit its properties and methods. Therefore, it would help to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3468"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3468"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3468/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3468"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3468"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3468"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3492,
    "date": "2020-09-07T15:13:55",
    "date_gmt": "2020-09-07T15:13:55",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3492"
    },
    "modified": "2020-09-07T15:13:55",
    "modified_gmt": "2020-09-07T15:13:55",
    "slug": "database-access",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/database-access/",
    "title": {
      "rendered": "Database Access"
    },
    "content": {
      "rendered": "\n<p>ASP.NET allows the following sources of data to be accessed and used:</p>\n\n\n\n<ul><li>Databases (e.g., Access, SQL Server, Oracle, MySQL)</li><li>XML documents</li><li>Business Objects</li><li>Flat files</li></ul>\n\n\n\n<p>ASP.NET hides the complex processes of data access and provides much higher level of classes and objects through which data is accessed easily. These classes hide all complex coding for connection, data retrieving, data querying, and data manipulation.</p>\n\n\n\n<p>ADO.NET is the technology that provides the bridge between various ASP.NET control objects and the backend data source. In this tutorial, we will look at data access and working with the data in brief.</p>\n\n\n\n<h2>Retrieve and display data</h2>\n\n\n\n<p>It takes two types of data controls to retrieve and display data in ASP.NET:</p>\n\n\n\n<ul><li><strong>A data source control</strong>&nbsp;&#8211; It manages the connection to the data, selection of data, and other jobs such as paging and caching of data etc.</li><li><strong>A data view control</strong>&nbsp;&#8211; It binds and displays the data and allows data manipulation.</li></ul>\n\n\n\n<p>We will discuss the data binding and data source controls in detail later. In this section, we will use a SqlDataSource control to access data and a GridView control to display and manipulate data in this chapter.</p>\n\n\n\n<p>We will also use an Access database, which contains the details about .Net books available in the market. Name of our database is ASPDotNetStepByStep.mdb and we will use the data table DotNetReferences.</p>\n\n\n\n<p>The table has the following columns: ID, Title, AuthorFirstName, AuthorLastName, Topic, and Publisher.</p>\n\n\n\n<p>Here is a snapshot of the data table:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/data_table.jpg\" alt=\"Data Table\"/></figure>\n\n\n\n<p>Let us directly move to action, take the following steps:</p>\n\n\n\n<p><strong>(1)</strong>&nbsp;Create a web site and add a SqlDataSourceControl on the web form.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/sqldatasourcecontrol.jpg\" alt=\"SqlDataSourceControl\"/></figure>\n\n\n\n<p><strong>(2)</strong>&nbsp;Click on the Configure Data Source option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/configure_data_source.jpg\" alt=\"Configure Data Source\"/></figure>\n\n\n\n<p><strong>(3)</strong>&nbsp;Click on the New Connection button to establish connection with a database.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/connection_with_database.jpg\" alt=\"Connection with a database\"/></figure>\n\n\n\n<p><strong>(4)</strong>&nbsp;Once the connection is set up, you may save it for further use. At the next step, you are asked to configure the select statement:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/select_statement.jpg\" alt=\"Select statement\"/></figure>\n\n\n\n<p><strong>(5)</strong>&nbsp;Select the columns and click next to complete the steps. Observe the WHERE, ORDER BY, and the Advanced buttons. These buttons allow you to provide the where clause, order by clause, and specify the insert, update, and delete commands of SQL respectively. This way, you can manipulate the data.</p>\n\n\n\n<p><strong>(6)</strong>&nbsp;Add a GridView control on the form. Choose the data source and format the control using AutoFormat option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/autoformat.jpg\" alt=\"AutoFormat \"/></figure>\n\n\n\n<p><strong>(7)</strong>&nbsp;After this the formatted GridView control displays the column headings, and the application is ready to execute.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/gridview_control.jpg\" alt=\"GridView control\"/></figure>\n\n\n\n<p><strong>(8)</strong>&nbsp;Finally execute the application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/databasse_result.jpg\" alt=\"Database Result\"/></figure>\n\n\n\n<p>The content file code is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"dataaccess.aspx.cs\" \n   Inherits=\"datacaching.WebForm1\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n         \n            &lt;asp:SqlDataSource ID=\"SqlDataSource1\" runat=\"server\" \n               ConnectionString= \"&lt;%$   ConnectionStrings:ASPDotNetStepByStepConnectionString%>\" \n               ProviderName= \"&lt;%$ ConnectionStrings:\n                  ASPDotNetStepByStepConnectionString.ProviderName %>\" \n               SelectCommand=\"SELECT &#91;Title], &#91;AuthorLastName], \n                  &#91;AuthorFirstName], &#91;Topic] FROM &#91;DotNetReferences]\">\n            &lt;/asp:SqlDataSource>\n            \n            &lt;asp:GridView ID=\"GridView1\" runat=\"server\" \n               AutoGenerateColumns=\"False\" CellPadding=\"4\" \n               DataSourceID=\"SqlDataSource1\" ForeColor=\"#333333\" \n               GridLines=\"None\">\n               &lt;RowStyle BackColor=\"#F7F6F3\" ForeColor=\"#333333\" />\n            \n               &lt;Columns>\n                  &lt;asp:BoundField DataField=\"Title\" HeaderText=\"Title\" \n                     SortExpression=\"Title\" />\n                  &lt;asp:BoundField DataField=\"AuthorLastName\" \n                     HeaderText=\"AuthorLastName\" SortExpression=\"AuthorLastName\" />\n                  &lt;asp:BoundField DataField=\"AuthorFirstName\" \n                     HeaderText=\"AuthorFirstName\" SortExpression=\"AuthorFirstName\" />\n                  &lt;asp:BoundField DataField=\"Topic\" \n                     HeaderText=\"Topic\" SortExpression=\"Topic\" />\n               &lt;/Columns>\n               &lt;FooterStyle BackColor=\"#5D7B9D\" \n                  Font-Bold=\"True\" ForeColor=\"White\" />\n               &lt;PagerStyle BackColor=\"#284775\" \n                  ForeColor=\"White\" HorizontalAlign=\"Center\" />\n               &lt;SelectedRowStyle BackColor=\"#E2DED6\" \n                  Font-Bold=\"True\" ForeColor=\"#333333\" />\n               &lt;HeaderStyle BackColor=\"#5D7B9D\" Font-Bold=\"True\"  \n                  ForeColor=\"White\" />\n               &lt;EditRowStyle BackColor=\"#999999\" />\n               &lt;AlternatingRowStyle BackColor=\"White\" ForeColor=\"#284775\" />\n            &lt;/asp:GridView>\n         &lt;/div>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET allows the following sources of data to be accessed and used: Databases (e.g., Access, SQL Server, Oracle, MySQL) XML documents Business Objects Flat files ASP.NET hides the complex processes of data access and provides much higher level of classes and objects through which data is accessed easily. These classes hide all complex coding for [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3492"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3492"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3492/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3492"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3492"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3492"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3494,
    "date": "2020-09-07T15:18:00",
    "date_gmt": "2020-09-07T15:18:00",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3494"
    },
    "modified": "2020-09-07T15:18:00",
    "modified_gmt": "2020-09-07T15:18:00",
    "slug": "ado-net",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/ado-net/",
    "title": {
      "rendered": "ADO.NET"
    },
    "content": {
      "rendered": "\n<p>ADO.NET provides a bridge between the front end controls and the back end database. The ADO.NET objects encapsulate all the data access operations and the controls interact with these objects to display data, thus hiding the details of movement of data.</p>\n\n\n\n<p>The following figure shows the ADO.NET objects at a glance:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/ado.net_objects.jpg\" alt=\"ADO.Net objects\"/></figure>\n\n\n\n<h2>The DataSet Class</h2>\n\n\n\n<p>The dataset represents a subset of the database. It does not have a continuous connection to the database. To update the database a reconnection is required. The DataSet contains DataTable objects and DataRelation objects. The DataRelation objects represent the relationship between two tables.</p>\n\n\n\n<p>Following table shows some important properties of the DataSet class:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>CaseSensitive</td><td>Indicates whether string comparisons within the data tables are case-sensitive.</td></tr><tr><td>Container</td><td>Gets the container for the component.</td></tr><tr><td>DataSetName</td><td>Gets or sets the name of the current data set.</td></tr><tr><td>DefaultViewManager</td><td>Returns a view of data in the data set.</td></tr><tr><td>DesignMode</td><td>Indicates whether the component is currently in design mode.</td></tr><tr><td>EnforceConstraints</td><td>Indicates whether constraint rules are followed when attempting any update operation.</td></tr><tr><td>Events</td><td>Gets the list of event handlers that are attached to this component.</td></tr><tr><td>ExtendedProperties</td><td>Gets the collection of customized user information associated with the DataSet.</td></tr><tr><td>HasErrors</td><td>Indicates if there are any errors.</td></tr><tr><td>IsInitialized</td><td>Indicates whether the DataSet is initialized.</td></tr><tr><td>Locale</td><td>Gets or sets the locale information used to compare strings within the table.</td></tr><tr><td>Namespace</td><td>Gets or sets the namespace of the DataSet.</td></tr><tr><td>Prefix</td><td>Gets or sets an XML prefix that aliases the namespace of the DataSet.</td></tr><tr><td>Relations</td><td>Returns the collection of DataRelation objects.</td></tr><tr><td>Tables</td><td>Returns the collection of DataTable objects.</td></tr></tbody></table></figure>\n\n\n\n<p>The following table shows some important methods of the DataSet class:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>AcceptChanges</td><td>Accepts all changes made since the DataSet was loaded or this method was called.</td></tr><tr><td>BeginInit</td><td>Begins the initialization of the DataSet. The initialization occurs at run time.</td></tr><tr><td>Clear</td><td>Clears data.</td></tr><tr><td>Clone</td><td>Copies the structure of the DataSet, including all DataTable schemas, relations, and constraints. Does not copy any data.</td></tr><tr><td>Copy</td><td>Copies both structure and data.</td></tr><tr><td>CreateDataReader()</td><td>Returns a DataTableReader with one result set per DataTable, in the same sequence as the tables appear in the Tables collection.</td></tr><tr><td>CreateDataReader(DataTable[])</td><td>Returns a DataTableReader with one result set per DataTable.</td></tr><tr><td>EndInit</td><td>Ends the initialization of the data set.</td></tr><tr><td>Equals(Object)</td><td>Determines whether the specified Object is equal to the current Object.</td></tr><tr><td>Finalize</td><td>Free resources and perform other cleanups.</td></tr><tr><td>GetChanges</td><td>Returns a copy of the DataSet with all changes made since it was loaded or the AcceptChanges method was called.</td></tr><tr><td>GetChanges(DataRowState)</td><td>Gets a copy of DataSet with all changes made since it was loaded or the AcceptChanges method was called, filtered by DataRowState.</td></tr><tr><td>GetDataSetSchema</td><td>Gets a copy of XmlSchemaSet for the DataSet.</td></tr><tr><td>GetObjectData</td><td>Populates a serialization information object with the data needed to serialize the DataSet.</td></tr><tr><td>GetType</td><td>Gets the type of the current instance.</td></tr><tr><td>GetXML</td><td>Returns the XML representation of the data.</td></tr><tr><td>GetXMLSchema</td><td>Returns the XSD schema for the XML representation of the data.</td></tr><tr><td>HasChanges()</td><td>Gets a value indicating whether the DataSet has changes, including new, deleted, or modified rows.</td></tr><tr><td>HasChanges(DataRowState)</td><td>Gets a value indicating whether the DataSet has changes, including new, deleted, or modified rows, filtered by DataRowState.</td></tr><tr><td>IsBinarySerialized</td><td>Inspects the format of the serialized representation of the DataSet.</td></tr><tr><td>Load(IDataReader, LoadOption, DataTable[])</td><td>Fills a DataSet with values from a data source using the supplied IDataReader, using an array of DataTable instances to supply the schema and namespace information.</td></tr><tr><td>Load(IDataReader, LoadOption, String[])</td><td>Fills a DataSet with values from a data source using the supplied IDataReader, using an array of strings to supply the names for the tables within the DataSet.</td></tr><tr><td>Merge()</td><td>Merges the data with data from another DataSet. This method has different overloaded forms.</td></tr><tr><td>ReadXML()</td><td>Reads an XML schema and data into the DataSet. This method has different overloaded forms.</td></tr><tr><td>ReadXMLSchema(0)</td><td>Reads an XML schema into the DataSet. This method has different overloaded forms.</td></tr><tr><td>RejectChanges</td><td>Rolls back all changes made since the last call to AcceptChanges.</td></tr><tr><td>WriteXML()</td><td>Writes an XML schema and data from the DataSet. This method has different overloaded forms.</td></tr><tr><td>WriteXMLSchema()</td><td>Writes the structure of the DataSet as an XML schema. This method has different overloaded forms.</td></tr></tbody></table></figure>\n\n\n\n<h2>The DataTable Class</h2>\n\n\n\n<p>The DataTable class represents the tables in the database. It has the following important properties; most of these properties are read only properties except the PrimaryKey property:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>ChildRelations</td><td>Returns the collection of child relationship.</td></tr><tr><td>Columns</td><td>Returns the Columns collection.</td></tr><tr><td>Constraints</td><td>Returns the Constraints collection.</td></tr><tr><td>DataSet</td><td>Returns the parent DataSet.</td></tr><tr><td>DefaultView</td><td>Returns a view of the table.</td></tr><tr><td>ParentRelations</td><td>Returns the ParentRelations collection.</td></tr><tr><td>PrimaryKey</td><td>Gets or sets an array of columns as the primary key for the table.</td></tr><tr><td>Rows</td><td>Returns the Rows collection.</td></tr></tbody></table></figure>\n\n\n\n<p>The following table shows some important methods of the DataTable class:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>AcceptChanges</td><td>Commits all changes since the last AcceptChanges.</td></tr><tr><td>Clear</td><td>Clears all data from the table.</td></tr><tr><td>GetChanges</td><td>Returns a copy of the DataTable with all changes made since the AcceptChanges method was called.</td></tr><tr><td>GetErrors</td><td>Returns an array of rows with errors.</td></tr><tr><td>ImportRows</td><td>Copies a new row into the table.</td></tr><tr><td>LoadDataRow</td><td>Finds and updates a specific row, or creates a new one, if not found any.</td></tr><tr><td>Merge</td><td>Merges the table with another DataTable.</td></tr><tr><td>NewRow</td><td>Creates a new DataRow.</td></tr><tr><td>RejectChanges</td><td>Rolls back all changes made since the last call to AcceptChanges.</td></tr><tr><td>Reset</td><td>Resets the table to its original state.</td></tr><tr><td>Select</td><td>Returns an array of DataRow objects.</td></tr></tbody></table></figure>\n\n\n\n<h2>The DataRow Class</h2>\n\n\n\n<p>The DataRow object represents a row in a table. It has the following important properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>HasErrors</td><td>Indicates if there are any errors.</td></tr><tr><td>Items</td><td>Gets or sets the data stored in a specific column.</td></tr><tr><td>ItemArrays</td><td>Gets or sets all the values for the row.</td></tr><tr><td>Table</td><td>Returns the parent table.</td></tr></tbody></table></figure>\n\n\n\n<p>The following table shows some important methods of the DataRow class:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>AcceptChanges</td><td>Accepts all changes made since this method was called.</td></tr><tr><td>BeginEdit</td><td>Begins edit operation.</td></tr><tr><td>CancelEdit</td><td>Cancels edit operation.</td></tr><tr><td>Delete</td><td>Deletes the DataRow.</td></tr><tr><td>EndEdit</td><td>Ends the edit operation.</td></tr><tr><td>GetChildRows</td><td>Gets the child rows of this row.</td></tr><tr><td>GetParentRow</td><td>Gets the parent row.</td></tr><tr><td>GetParentRows</td><td>Gets parent rows of DataRow object.</td></tr><tr><td>RejectChanges</td><td>Rolls back all changes made since the last call to AcceptChanges.</td></tr></tbody></table></figure>\n\n\n\n<h2>The DataAdapter Object</h2>\n\n\n\n<p>The DataAdapter object acts as a mediator between the DataSet object and the database. This helps the Dataset to contain data from multiple databases or other data source.</p>\n\n\n\n<h2>The DataReader Object</h2>\n\n\n\n<p>The DataReader object is an alternative to the DataSet and DataAdapter combination. This object provides a connection oriented access to the data records in the database. These objects are suitable for read-only access, such as populating a list and then breaking the connection.</p>\n\n\n\n<h2>DbCommand and DbConnection Objects</h2>\n\n\n\n<p>The DbConnection object represents a connection to the data source. The connection could be shared among different command objects.</p>\n\n\n\n<p>The DbCommand object represents the command or a stored procedure sent to the database from retrieving or manipulating data.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>So far, we have used tables and databases already existing in our computer. In this example, we will create a table, add column, rows and data into it and display the table using a GridView object.</p>\n\n\n\n<p>The source file code is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"createdatabase._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n      \n         &lt;div>\n            &lt;asp:GridView ID=\"GridView1\" runat=\"server\">\n            &lt;/asp:GridView>\n         &lt;/div>\n         \n      &lt;/form>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>The code behind file is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>namespace createdatabase\n{\n   public partial class _Default : System.Web.UI.Page\n   {\n      protected void Page_Load(object sender, EventArgs e)\n      {\n         if (!IsPostBack)\n         {\n            DataSet ds = CreateDataSet();\n            GridView1.DataSource = ds.Tables&#91;\"Student\"];\n            GridView1.DataBind();\n         }\n      }\n      \n      private DataSet CreateDataSet()\n      {\n         //creating a DataSet object for tables\n         DataSet dataset = new DataSet();\n\n         // creating the student table\n         DataTable Students = CreateStudentTable();\n         dataset.Tables.Add(Students);\n         return dataset;\n      }\n      \n      private DataTable CreateStudentTable()\n      {\n         DataTable Students = new DataTable(\"Student\");\n\n         // adding columns\n         AddNewColumn(Students, \"System.Int32\", \"StudentID\");\n         AddNewColumn(Students, \"System.String\", \"StudentName\");\n         AddNewColumn(Students, \"System.String\", \"StudentCity\");\n\n         // adding rows\n         AddNewRow(Students, 1, \"M H Kabir\", \"Kolkata\");\n         AddNewRow(Students, 1, \"Shreya Sharma\", \"Delhi\");\n         AddNewRow(Students, 1, \"Rini Mukherjee\", \"Hyderabad\");\n         AddNewRow(Students, 1, \"Sunil Dubey\", \"Bikaner\");\n         AddNewRow(Students, 1, \"Rajat Mishra\", \"Patna\");\n\n         return Students;\n      }\n\n      private void AddNewColumn(DataTable table, string columnType, string  columnName)\n      {\n         DataColumn column = table.Columns.Add(columnName,  Type.GetType(columnType));\n      }\n\n      //adding data into the table\n      private void AddNewRow(DataTable table, int id, string name, string city)\n      {\n         DataRow newrow = table.NewRow();\n         newrow&#91;\"StudentID\"] = id;\n         newrow&#91;\"StudentName\"] = name;\n         newrow&#91;\"StudentCity\"] = city;\n         table.Rows.Add(newrow);\n      }\n   }\n}</code></pre>\n\n\n\n<p>When you execute the program, observe the following:</p>\n\n\n\n<ul><li>The application first creates a data set and binds it with the grid view control using the DataBind() method of the GridView control.</li><li>The Createdataset() method is a user defined function, which creates a new DataSet object and then calls another user defined method CreateStudentTable() to create the table and add it to the Tables collection of the data set.</li><li>The CreateStudentTable() method calls the user defined methods AddNewColumn() and AddNewRow() to create the columns and rows of the table as well as to add data to the rows.</li></ul>\n\n\n\n<p>When the page is executed, it returns the rows of the table as shown:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/ado.net_result.jpg\" alt=\"ADO.Net Result\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ADO.NET provides a bridge between the front end controls and the back end database. The ADO.NET objects encapsulate all the data access operations and the controls interact with these objects to display data, thus hiding the details of movement of data. The following figure shows the ADO.NET objects at a glance: The DataSet Class The [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3494"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3494"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3494/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3494"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3494"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3494"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3496,
    "date": "2020-09-07T15:19:19",
    "date_gmt": "2020-09-07T15:19:19",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3496"
    },
    "modified": "2020-09-07T15:19:19",
    "modified_gmt": "2020-09-07T15:19:19",
    "slug": "file-uploading-9",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/file-uploading-9/",
    "title": {
      "rendered": "File Uploading"
    },
    "content": {
      "rendered": "\n<p>ASP.NET has two controls that allow users to upload files to the web server. Once the server receives the posted file data, the application can save it, check it, or ignore it. The following controls allow the file uploading:</p>\n\n\n\n<ul><li><strong>HtmlInputFile</strong>&nbsp;&#8211; an HTML server control</li><li><strong>FileUpload</strong>&nbsp;&#8211; and ASP.NET web control</li></ul>\n\n\n\n<p>Both controls allow file uploading, but the FileUpload control automatically sets the encoding of the form, whereas the HtmlInputFile does not do so.</p>\n\n\n\n<p>In this tutorial, we use the FileUpload control. The FileUpload control allows the user to browse for and select the file to be uploaded, providing a browse button and a text box for entering the filename.</p>\n\n\n\n<p>Once, the user has entered the filename in the text box by typing the name or browsing, the SaveAs method of the FileUpload control can be called to save the file to the disk.</p>\n\n\n\n<p>The basic syntax of FileUpload is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:FileUpload ID= \"Uploader\" runat = \"server\" /></code></pre>\n\n\n\n<p>The FileUpload class is derived from the WebControl class, and inherits all its members. Apart from those, the FileUpload class has the following read-only properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>FileBytes</td><td>Returns an array of the bytes in a file to be uploaded.</td></tr><tr><td>FileContent</td><td>Returns the stream object pointing to the file to be uploaded.</td></tr><tr><td>FileName</td><td>Returns the name of the file to be uploaded.</td></tr><tr><td>HasFile</td><td>Specifies whether the control has a file to upload.</td></tr><tr><td>PostedFile</td><td>Returns a reference to the uploaded file.</td></tr></tbody></table></figure>\n\n\n\n<p>The posted file is encapsulated in an object of type HttpPostedFile, which could be accessed through the PostedFile property of the FileUpload class.</p>\n\n\n\n<p>The HttpPostedFile class has the following frequently used properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>ContentLength</td><td>Returns the size of the uploaded file in bytes.</td></tr><tr><td>ContentType</td><td>Returns the MIME type of the uploaded file.</td></tr><tr><td>FileName</td><td>Returns the full filename.</td></tr><tr><td>InputStream</td><td>Returns a stream object pointing to the uploaded file.</td></tr></tbody></table></figure>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following example demonstrates the FileUpload control and its properties. The form has a FileUpload control along with a save button and a label control for displaying the file name, file type, and file length.</p>\n\n\n\n<p>In the design view, the form looks as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_fileupload.jpg\" alt=\"File Upload\"/></figure>\n\n\n\n<p>The content file code is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;body>\n   &lt;form id=\"form1\" runat=\"server\">\n   \n      &lt;div>\n         &lt;h3> File Upload:&lt;/h3>\n         &lt;br />\n         &lt;asp:FileUpload ID=\"FileUpload1\" runat=\"server\" />\n         &lt;br />&lt;br />\n         &lt;asp:Button ID=\"btnsave\" runat=\"server\" onclick=\"btnsave_Click\"  Text=\"Save\" style=\"width:85px\" />\n         &lt;br />&lt;br />\n         &lt;asp:Label ID=\"lblmessage\" runat=\"server\" />\n      &lt;/div>\n      \n   &lt;/form>\n&lt;/body></code></pre>\n\n\n\n<p>The code behind the save button is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void btnsave_Click(object sender, EventArgs e)\n{\n   StringBuilder sb = new StringBuilder();\n   \n   if (FileUpload1.HasFile)\n   {\n      try\n      {\n         sb.AppendFormat(\" Uploading file: {0}\", FileUpload1.FileName);\n         \n         //saving the file\n         FileUpload1.SaveAs(\"&lt;c:\\\\SaveDirectory>\" + FileUpload1.FileName);\n      \n         //Showing the file information\n         sb.AppendFormat(\"&lt;br/> Save As: {0}\",  FileUpload1.PostedFile.FileName);\n         sb.AppendFormat(\"&lt;br/> File type: {0}\",    FileUpload1.PostedFile.ContentType);\n         sb.AppendFormat(\"&lt;br/> File length: {0}\",  FileUpload1.PostedFile.ContentLength);\n         sb.AppendFormat(\"&lt;br/> File name: {0}\",  FileUpload1.PostedFile.FileName);\n         \n      }catch (Exception ex)\n      {\n         sb.Append(\"&lt;br/> Error &lt;br/>\");\n         sb.AppendFormat(\"Unable to save file &lt;br/> {0}\", ex.Message);\n      }\n   }\n   else\n   {\n      lblmessage.Text = sb.ToString();\n   }\n}</code></pre>\n\n\n\n<p>Note the following:</p>\n\n\n\n<ul><li>The StringBuilder class is derived from System.IO namespace, so it needs to be included.</li><li>The try and catch blocks are used for catching errors, and display the error message.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET has two controls that allow users to upload files to the web server. Once the server receives the posted file data, the application can save it, check it, or ignore it. The following controls allow the file uploading: HtmlInputFile&nbsp;&#8211; an HTML server control FileUpload&nbsp;&#8211; and ASP.NET web control Both controls allow file uploading, but [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3496"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3496"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3496/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3496"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3496"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3496"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3498,
    "date": "2020-09-07T15:20:24",
    "date_gmt": "2020-09-07T15:20:24",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3498"
    },
    "modified": "2020-09-07T15:20:24",
    "modified_gmt": "2020-09-07T15:20:24",
    "slug": "ad-rotator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/ad-rotator/",
    "title": {
      "rendered": "Ad Rotator"
    },
    "content": {
      "rendered": "\n<p>The AdRotator control randomly selects banner graphics from a list, which is specified in an external XML schedule file. This external XML schedule file is called the advertisement file.</p>\n\n\n\n<p>The AdRotator control allows you to specify the advertisement file and the type of window that the link should follow in the AdvertisementFile and the Target property respectively.</p>\n\n\n\n<p>The basic syntax of adding an AdRotator is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:AdRotator  runat = \"server\" AdvertisementFile = \"adfile.xml\"  Target =  \"_blank\" /></code></pre>\n\n\n\n<p>Before going into the details of the AdRotator control and its properties, let us look into the construction of the advertisement file.</p>\n\n\n\n<h2>The Advertisement File</h2>\n\n\n\n<p>The advertisement file is an XML file, which contains the information about the advertisements to be displayed.</p>\n\n\n\n<p>Extensible Markup Language (XML) is a W3C standard for text document markup. It is a text-based markup language that enables you to store data in a structured format by using meaningful tags. The term &#8216;extensible&#8217; implies that you can extend your ability to describe a document by defining meaningful tags for the application.</p>\n\n\n\n<p>XML is not a language in itself, like HTML, but a set of rules for creating new markup languages. It is a meta-markup language. It allows developers to create custom tag sets for special uses. It structures, stores, and transports the information.</p>\n\n\n\n<p>Following is an example of XML file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;BOOK>\n   &lt;NAME> Learn XML &lt;/NAME>\n   &lt;AUTHOR> Samuel Peterson &lt;/AUTHOR>\n   &lt;PUBLISHER> NSS Publications &lt;/PUBLISHER>\n   &lt;PRICE> $30.00&lt;/PRICE>\n&lt;/BOOK></code></pre>\n\n\n\n<p>Like all XML files, the advertisement file needs to be a structured text file with well-defined tags delineating the data. There are the following standard XML elements that are commonly used in the advertisement file:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Element</th><th>Description</th></tr><tr><td>Advertisements</td><td>Encloses the advertisement file.</td></tr><tr><td>Ad</td><td>Delineates separate ad.</td></tr><tr><td>ImageUrl</td><td>The path of image that will be displayed.</td></tr><tr><td>NavigateUrl</td><td>The link that will be followed when the user clicks the ad.</td></tr><tr><td>AlternateText</td><td>The text that will be displayed instead of the picture if it cannot be displayed.</td></tr><tr><td>Keyword</td><td>Keyword identifying a group of advertisements. This is used for filtering.</td></tr><tr><td>Impressions</td><td>The number indicating how often an advertisement will appear.</td></tr><tr><td>Height</td><td>Height of the image to be displayed.</td></tr><tr><td>Width</td><td>Width of the image to be displayed.</td></tr></tbody></table></figure>\n\n\n\n<p>Apart from these tags, customs tags with custom attributes could also be included. The following code illustrates an advertisement file ads.xml:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Advertisements>\n   &lt;Ad>\n      &lt;ImageUrl>rose1.jpg&lt;/ImageUrl>\n      &lt;NavigateUrl>http://www.1800flowers.com&lt;/NavigateUrl>\n      &lt;AlternateText>\n         Order flowers, roses, gifts and more\n      &lt;/AlternateText>\n      &lt;Impressions>20&lt;/Impressions>\n      &lt;Keyword>flowers&lt;/Keyword>\n   &lt;/Ad>\n\n   &lt;Ad>\n      &lt;ImageUrl>rose2.jpg&lt;/ImageUrl>\n      &lt;NavigateUrl>http://www.babybouquets.com.au&lt;/NavigateUrl>\n      &lt;AlternateText>Order roses and flowers&lt;/AlternateText>\n      &lt;Impressions>20&lt;/Impressions>\n      &lt;Keyword>gifts&lt;/Keyword>\n   &lt;/Ad>\n\n   &lt;Ad>\n      &lt;ImageUrl>rose3.jpg&lt;/ImageUrl>\n      &lt;NavigateUrl>http://www.flowers2moscow.com&lt;/NavigateUrl>\n      &lt;AlternateText>Send flowers to Russia&lt;/AlternateText>\n      &lt;Impressions>20&lt;/Impressions>\n      &lt;Keyword>russia&lt;/Keyword>\n   &lt;/Ad>\n\n   &lt;Ad>\n      &lt;ImageUrl>rose4.jpg&lt;/ImageUrl>\n      &lt;NavigateUrl>http://www.edibleblooms.com&lt;/NavigateUrl>\n      &lt;AlternateText>Edible Blooms&lt;/AlternateText>\n      &lt;Impressions>20&lt;/Impressions>\n      &lt;Keyword>gifts&lt;/Keyword>\n   &lt;/Ad>\n&lt;/Advertisements></code></pre>\n\n\n\n<h2>Properties and Events of the AdRotator Class</h2>\n\n\n\n<p>The AdRotator class is derived from the WebControl class and inherits its properties. Apart from those, the AdRotator class has the following properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>AdvertisementFile</td><td>The path to the advertisement file.</td></tr><tr><td>AlternateTextFeild</td><td>The element name of the field where alternate text is provided. The default value is AlternateText.</td></tr><tr><td>DataMember</td><td>The name of the specific list of data to be bound when advertisement file is not used.</td></tr><tr><td>DataSource</td><td>Control from where it would retrieve data.</td></tr><tr><td>DataSourceID</td><td>Id of the control from where it would retrieve data.</td></tr><tr><td>Font</td><td>Specifies the font properties associated with the advertisement banner control.</td></tr><tr><td>ImageUrlField</td><td>The element name of the field where the URL for the image is provided. The default value is ImageUrl.</td></tr><tr><td>KeywordFilter</td><td>For displaying the keyword based ads only.</td></tr><tr><td>NavigateUrlField</td><td>The element name of the field where the URL to navigate to is provided. The default value is NavigateUrl.</td></tr><tr><td>Target</td><td>The browser window or frame that displays the content of the page linked.</td></tr><tr><td>UniqueID</td><td>Obtains the unique, hierarchically qualified identifier for the AdRotator control.</td></tr></tbody></table></figure>\n\n\n\n<p>Following are the important events of the AdRotator class:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Events</th><th>Description</th></tr><tr><td>AdCreated</td><td>It is raised once per round trip to the server after creation of the control, but before the page is rendered</td></tr><tr><td>DataBinding</td><td>Occurs when the server control binds to a data source.</td></tr><tr><td>DataBound</td><td>Occurs after the server control binds to a data source.</td></tr><tr><td>Disposed</td><td>Occurs when a server control is released from memory, which is the last stage of the server control lifecycle when an ASP.NET page is requested</td></tr><tr><td>Init</td><td>Occurs when the server control is initialized, which is the first step in its lifecycle.</td></tr><tr><td>Load</td><td>Occurs when the server control is loaded into the Page object.</td></tr><tr><td>PreRender</td><td>Occurs after the Control object is loaded but prior to rendering.</td></tr><tr><td>Unload</td><td>Occurs when the server control is unloaded from memory.</td></tr></tbody></table></figure>\n\n\n\n<h2>Working with AdRotator Control</h2>\n\n\n\n<p>Create a new web page and place an AdRotator control on it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form id=\"form1\" runat=\"server\">\n   &lt;div>\n      &lt;asp:AdRotator ID=\"AdRotator1\" runat=\"server\" AdvertisementFile  =\"~/ads.xml\" onadcreated=\"AdRotator1_AdCreated\" />\n   &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<p>The ads.xml file and the image files should be located in the root directory of the web site.</p>\n\n\n\n<p>Try to execute the above application and observe that each time the page is reloaded, the ad is changed.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The AdRotator control randomly selects banner graphics from a list, which is specified in an external XML schedule file. This external XML schedule file is called the advertisement file. The AdRotator control allows you to specify the advertisement file and the type of window that the link should follow in the AdvertisementFile and the Target [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3498"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3498"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3498/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3498"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3498"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3498"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3500,
    "date": "2020-09-07T15:21:38",
    "date_gmt": "2020-09-07T15:21:38",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3500"
    },
    "modified": "2020-09-07T15:21:38",
    "modified_gmt": "2020-09-07T15:21:38",
    "slug": "calendars",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/calendars/",
    "title": {
      "rendered": "Calendars"
    },
    "content": {
      "rendered": "\n<p>The calendar control is a functionally rich web control, which provides the following capabilities:</p>\n\n\n\n<ul><li>Displaying one month at a time</li><li>Selecting a day, a week or a month</li><li>Selecting a range of days</li><li>Moving from month to month</li><li>Controlling the display of the days programmatically</li></ul>\n\n\n\n<p>The basic syntax of a calendar control is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Calender ID = \"Calendar1\" runat = \"server\">\n&lt;/asp:Calender></code></pre>\n\n\n\n<h2>Properties and Events of the Calendar Control</h2>\n\n\n\n<p>The calendar control has many properties and events, using which you can customize the actions and display of the control. The following table provides some important properties of the Calendar control:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>Caption</td><td>Gets or sets the caption for the calendar control.</td></tr><tr><td>CaptionAlign</td><td>Gets or sets the alignment for the caption.</td></tr><tr><td>CellPadding</td><td>Gets or sets the number of spaces between the data and the cell border.</td></tr><tr><td>CellSpacing</td><td>Gets or sets the space between cells.</td></tr><tr><td>DayHeaderStyle</td><td>Gets the style properties for the section that displays the day of the week.</td></tr><tr><td>DayNameFormat</td><td>Gets or sets format of days of the week.</td></tr><tr><td>DayStyle</td><td>Gets the style properties for the days in the displayed month.</td></tr><tr><td>FirstDayOfWeek</td><td>Gets or sets the day of week to display in the first column.</td></tr><tr><td>NextMonthText</td><td>Gets or sets the text for next month navigation control. The default value is &gt;.</td></tr><tr><td>NextPrevFormat</td><td>Gets or sets the format of the next and previous month navigation control.</td></tr><tr><td>OtherMonthDayStyle</td><td>Gets the style properties for the days on the Calendar control that are not in the displayed month.</td></tr><tr><td>PrevMonthText</td><td>Gets or sets the text for previous month navigation control. The default value is &lt;.</td></tr><tr><td>SelectedDate</td><td>Gets or sets the selected date.</td></tr><tr><td>SelectedDates</td><td>Gets a collection of DateTime objects representing the selected dates.</td></tr><tr><td>SelectedDayStyle</td><td>Gets the style properties for the selected dates.</td></tr><tr><td>SelectionMode</td><td>Gets or sets the selection mode that specifies whether the user can select a single day, a week or an entire month.</td></tr><tr><td>SelectMonthText</td><td>Gets or sets the text for the month selection element in the selector column.</td></tr><tr><td>SelectorStyle</td><td>Gets the style properties for the week and month selector column.</td></tr><tr><td>SelectWeekText</td><td>Gets or sets the text displayed for the week selection element in the selector column.</td></tr><tr><td>ShowDayHeader</td><td>Gets or sets the value indicating whether the heading for the days of the week is displayed.</td></tr><tr><td>ShowGridLines</td><td>Gets or sets the value indicating whether the gridlines would be shown.</td></tr><tr><td>ShowNextPrevMonth</td><td>Gets or sets a value indicating whether next and previous month navigation elements are shown in the title section.</td></tr><tr><td>ShowTitle</td><td>Gets or sets a value indicating whether the title section is displayed.</td></tr><tr><td>TitleFormat</td><td>Gets or sets the format for the title section.</td></tr><tr><td>Titlestyle</td><td>Get the style properties of the title heading for the Calendar control.</td></tr><tr><td>TodayDayStyle</td><td>Gets the style properties for today&#8217;s date on the Calendar control.</td></tr><tr><td>TodaysDate</td><td>Gets or sets the value for today&#8217;s date.</td></tr><tr><td>UseAccessibleHeader</td><td>Gets or sets a value that indicates whether to render the table header &lt;th&gt; HTML element for the day headers instead of the table data &lt;td&gt; HTML element.</td></tr><tr><td>VisibleDate</td><td>Gets or sets the date that specifies the month to display.</td></tr><tr><td>WeekendDayStyle</td><td>Gets the style properties for the weekend dates on the Calendar control.</td></tr></tbody></table></figure>\n\n\n\n<p>The Calendar control has the following three most important events that allow the developers to program the calendar control. They are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Events</th><th>Description</th></tr><tr><td>SelectionChanged</td><td>It is raised when a day, a week or an entire month is selected.</td></tr><tr><td>DayRender</td><td>It is raised when each data cell of the calendar control is rendered.</td></tr><tr><td>VisibleMonthChanged</td><td>It is raised when user changes a month.</td></tr></tbody></table></figure>\n\n\n\n<h2>Working with the Calendar Control</h2>\n\n\n\n<p>Putting a bare-bone calendar control without any code behind file provides a workable calendar to a site, which shows the months and days of the year. It also allows navigation to next and previous months.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/calendar.jpg\" alt=\"Calendar\"/></figure>\n\n\n\n<p>Calendar controls allow the users to select a single day, a week, or an entire month. This is done by using the SelectionMode property. This property has the following values:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>Day</td><td>To select a single day.</td></tr><tr><td>DayWeek</td><td>To select a single day or an entire week.</td></tr><tr><td>DayWeekMonth</td><td>To select a single day, a week, or an entire month.</td></tr><tr><td>None</td><td>Nothing can be selected.</td></tr></tbody></table></figure>\n\n\n\n<p>The syntax for selecting days:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Calender ID = \"Calendar1\" runat = \"server\" SelectionMode=\"DayWeekMonth\">\n&lt;/asp:Calender></code></pre>\n\n\n\n<p>When the selection mode is set to the value DayWeekMonth, an extra column with the &gt; symbol appears for selecting the week, and a &gt;&gt; symbol appears to the left of the days name for selecting the month.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/calendar2.jpg\" alt=\"Calendar2\"/></figure>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following example demonstrates selecting a date and displays the date in a label:</p>\n\n\n\n<p>The content file code is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"calendardemo._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n      \n         &lt;div>\n            &lt;h3> Your Birthday:&lt;/h3>\n            &lt;asp:Calendar ID=\"Calendar1\" runat=\"server  SelectionMode=\"DayWeekMonth\" onselectionchanged=\"Calendar1_SelectionChanged\">\n            &lt;/asp:Calendar>\n         &lt;/div>\n         \n         &lt;p>Todays date is: \n            &lt;asp:Label ID=\"lblday\" runat=\"server\">&lt;/asp:Label>\n         &lt;/p>\n         \n         &lt;p>Your Birday is: \n            &lt;asp:Label ID=\"lblbday\" runat=\"server\">&lt;/asp:Label>\n         &lt;/p>\n         \n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The event handler for the event SelectionChanged:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Calendar1_SelectionChanged(object sender, EventArgs e)\n{\n   lblday.Text = Calendar1.TodaysDate.ToShortDateString();\n   lblbday.Text = Calendar1.SelectedDate.ToShortDateString();\n}</code></pre>\n\n\n\n<p>When the file is run, it should produce the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/calendar3.jpg\" alt=\"Calendar3\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The calendar control is a functionally rich web control, which provides the following capabilities: Displaying one month at a time Selecting a day, a week or a month Selecting a range of days Moving from month to month Controlling the display of the days programmatically The basic syntax of a calendar control is: Properties and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3500"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3500"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3500/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3500"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3500"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3500"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3502,
    "date": "2020-09-07T15:22:44",
    "date_gmt": "2020-09-07T15:22:44",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3502"
    },
    "modified": "2020-09-07T15:22:44",
    "modified_gmt": "2020-09-07T15:22:44",
    "slug": "multi-views",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/multi-views/",
    "title": {
      "rendered": "Multi Views"
    },
    "content": {
      "rendered": "\n<p>MultiView and View controls allow you to divide the content of a page into different groups, displaying only one group at a time. Each View control manages one group of content and all the View controls are held together in a MultiView control.</p>\n\n\n\n<p>The MultiView control is responsible for displaying one View control at a time. The View displayed is called the active view.</p>\n\n\n\n<p>The syntax of MultiView control is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:MultView ID= \"MultiView1\" runat= \"server\">\n&lt;/asp:MultiView></code></pre>\n\n\n\n<p>The syntax of View control is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:View ID= \"View1\" runat= \"server\">\n&lt;/asp:View></code></pre>\n\n\n\n<p>However, the View control cannot exist on its own. It would render error if you try to use it stand-alone. It is always used with a Multiview control as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:MultView ID= \"MultiView1\" runat= \"server\">\n   &lt;asp:View ID= \"View1\" runat= \"server\"> &lt;/asp:View>\n&lt;/asp:MultiView></code></pre>\n\n\n\n<h2>Properties of View and MultiView Controls</h2>\n\n\n\n<p>Both View and MultiView controls are derived from Control class and inherit all its properties, methods, and events. The most important property of the View control is Visible property of type Boolean, which sets the visibility of a view.</p>\n\n\n\n<p>The MultiView control has the following important properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>Views</td><td>Collection of View controls within the MultiView.</td></tr><tr><td>ActiveViewIndex</td><td>A zero based index that denotes the active view. If no view is active, then the index is -1.</td></tr></tbody></table></figure>\n\n\n\n<p>The CommandName attribute of the button control associated with the navigation of the MultiView control are associated with some related field of the MultiView control.</p>\n\n\n\n<p>For example, if a button control with CommandName value as NextView is associated with the navigation of the multiview, it automatically navigates to the next view when the button is clicked.</p>\n\n\n\n<p>The following table shows the default command names of the above properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>NextViewCommandName</td><td>NextView</td></tr><tr><td>PreviousViewCommandName</td><td>PrevView</td></tr><tr><td>SwitchViewByIDCommandName</td><td>SwitchViewByID</td></tr><tr><td>SwitchViewByIndexCommandName</td><td>SwitchViewByIndex</td></tr></tbody></table></figure>\n\n\n\n<p>The important methods of the multiview control are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>SetActiveview</td><td>Sets the active view</td></tr><tr><td>GetActiveview</td><td>Retrieves the active view</td></tr></tbody></table></figure>\n\n\n\n<p>Every time a view is changed, the page is posted back to the server and a number of events are raised. Some important events are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Events</th><th>Description</th></tr><tr><td>ActiveViewChanged</td><td>Raised when a view is changed</td></tr><tr><td>Activate</td><td>Raised by the active view</td></tr><tr><td>Deactivate</td><td>Raised by the inactive view</td></tr></tbody></table></figure>\n\n\n\n<p>Apart from the above mentioned properties, methods and events, multiview control inherits the members of the control and object class.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The example page has three views. Each view has two button for navigating through the views.</p>\n\n\n\n<p>The content file code is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"multiviewdemo._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n      \n         &lt;div>\n            &lt;h2>MultiView and View Controls&lt;/h2>\n            \n            &lt;asp:DropDownList ID=\"DropDownList1\" runat=\"server\" onselectedindexchanged=\"DropDownList1_SelectedIndexChanged\">\n            &lt;/asp:DropDownList>\n            \n            &lt;hr />\n            \n            &lt;asp:MultiView ID=\"MultiView1\" runat=\"server\" ActiveViewIndex=\"2\"  onactiveviewchanged=\"MultiView1_ActiveViewChanged\" >\n               &lt;asp:View ID=\"View1\" runat=\"server\">\n                  &lt;h3>This is view 1&lt;/h3>\n                  &lt;br />\n                  &lt;asp:Button CommandName=\"NextView\" ID=\"btnnext1\" runat=\"server\" Text = \"Go To Next\" />\n                  &lt;asp:Button CommandArgument=\"View3\" CommandName=\"SwitchViewByID\" ID=\"btnlast\" runat=\"server\" Text  =\"Go To Last\" />\n               &lt;/asp:View> \n\t\t\t\t\t\n               &lt;asp:View ID=\"View2\" runat=\"server\">\n                  &lt;h3>This is view 2&lt;/h3>\n                  &lt;asp:Button CommandName=\"NextView\" ID=\"btnnext2\" runat=\"server\" Text = \"Go To Next\" />\n                  &lt;asp:Button CommandName=\"PrevView\" ID=\"btnprevious2\" runat=\"server\" Text = \"Go To Previous View\" />\n               &lt;/asp:View> \n\n               &lt;asp:View ID=\"View3\" runat=\"server\">\n                  &lt;h3> This is view 3&lt;/h3>\n                  &lt;br />\n                  &lt;asp:Calendar ID=\"Calender1\" runat=\"server\">&lt;/asp:Calendar>\n                  &lt;br />\n                  &lt;asp:Button  CommandArgument=\"0\" CommandName=\"SwitchViewByIndex\" ID=\"btnfirst\"   runat=\"server\" Text = \"Go To Next\" />\n                  &lt;asp:Button CommandName=\"PrevView\" ID=\"btnprevious\" runat=\"server\" Text = \"Go To Previous View\" />\n               &lt;/asp:View> \n               \n            &lt;/asp:MultiView>\n         &lt;/div>\n         \n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Observe the following:</p>\n\n\n\n<p>The MultiView.ActiveViewIndex determines which view will be shown. This is the only view rendered on the page. The default value for the ActiveViewIndex is -1, when no view is shown. Since the ActiveViewIndex is defined as 2 in the example, it shows the third view, when executed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/multiview.jpg\" alt=\"MultiView\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>MultiView and View controls allow you to divide the content of a page into different groups, displaying only one group at a time. Each View control manages one group of content and all the View controls are held together in a MultiView control. The MultiView control is responsible for displaying one View control at a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3502"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3502"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3502/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3502"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3502"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3502"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3504,
    "date": "2020-09-07T15:24:04",
    "date_gmt": "2020-09-07T15:24:04",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3504"
    },
    "modified": "2020-09-07T15:24:04",
    "modified_gmt": "2020-09-07T15:24:04",
    "slug": "panel-controls",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/panel-controls/",
    "title": {
      "rendered": "Panel Controls"
    },
    "content": {
      "rendered": "\n<p>The Panel control works as a container for other controls on the page. It controls the appearance and visibility of the controls it contains. It also allows generating controls programmatically.</p>\n\n\n\n<p>The basic syntax of panel control is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Panel ID= \"Panel1\"  runat = \"server\">\n&lt;/asp:Panel></code></pre>\n\n\n\n<p>The Panel control is derived from the WebControl class. Hence it inherits all the properties, methods and events of the same. It does not have any method or event of its own. However it has the following properties of its own:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>BackImageUrl</td><td>URL of the background image of the panel.</td></tr><tr><td>DefaultButton</td><td>Gets or sets the identifier for the default button that is contained in the Panel control.</td></tr><tr><td>Direction</td><td>Text direction in the panel.</td></tr><tr><td>GroupingText</td><td>Allows grouping of text as a field.</td></tr><tr><td>HorizontalAlign</td><td>Horizontal alignment of the content in the panel.</td></tr><tr><td>ScrollBars</td><td>Specifies visibility and location of scrollbars within the panel.</td></tr><tr><td>Wrap</td><td>Allows text wrapping.</td></tr></tbody></table></figure>\n\n\n\n<h2>Working with the Panel Control</h2>\n\n\n\n<p>Let us start with a simple scrollable panel of specific height and width and a border style. The ScrollBars property is set to both the scrollbars, hence both the scrollbars are rendered.</p>\n\n\n\n<p>The source file has the following code for the panel tag:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Panel ID=\"Panel1\" runat=\"server\" BorderColor=\"#990000\" BorderStyle=\"Solid\" \n   Borderstyle=\"width:1px\" Height=\"116px\" ScrollBars=\"Both\" style=\"width:278px\">\n   \n   This is a scrollable panel.\n   &lt;br />\n   &lt;br />\n\n   &lt;asp:Button ID=\"btnpanel\" runat=\"server\" Text=\"Button\" style=\"width:82px\" />\n&lt;/asp:Panel></code></pre>\n\n\n\n<p>The panel is rendered as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/panel.jpg\" alt=\"Panel\"/></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates dynamic content generation. The user provides the number of label controls and textboxes to be generated on the panel. The controls are generated programmatically.</p>\n\n\n\n<p>Change the properties of the panel using the properties window. When you select a control on the design view, the properties window displays the properties of that particular control and allows you to make changes without typing.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/panel2.jpg\" alt=\"Panel2\"/></figure>\n\n\n\n<p>The source file for the example is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form id=\"form1\" runat=\"server\">\n   &lt;div>\n      &lt;asp:Panel ID=\"pnldynamic\" runat=\"server\" BorderColor=\"#990000\" \n         BorderStyle=\"Solid\" Borderstyle=\"width:1px\" Height=\"150px\"  ScrollBars=\"Auto\" style=\"width:60%\" BackColor=\"#CCCCFF\"  Font-Names=\"Courier\" HorizontalAlign=\"Center\">\n     \n         This panel shows dynamic control generation:\n         &lt;br />\n         &lt;br />\n      &lt;/asp:Panel>\n   &lt;/div>\n\n   &lt;table style=\"width: 51%;\">\n      &lt;tr>\n         &lt;td class=\"style2\">No of Labels:&lt;/td>\n         &lt;td class=\"style1\">\n            &lt;asp:DropDownList ID=\"ddllabels\" runat=\"server\">\n               &lt;asp:ListItem>0&lt;/asp:ListItem>\n               &lt;asp:ListItem>1&lt;/asp:ListItem>\n               &lt;asp:ListItem>2&lt;/asp:ListItem>\n               &lt;asp:ListItem>3&lt;/asp:ListItem>\n               &lt;asp:ListItem>4&lt;/asp:ListItem>\n            &lt;/asp:DropDownList>\n         &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style2\"> &lt;/td>\n         &lt;td class=\"style1\"> &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style2\">No of Text Boxes :&lt;/td>\n         &lt;td class=\"style1\">\n            &lt;asp:DropDownList ID=\"ddltextbox\" runat=\"server\">\n               &lt;asp:ListItem>0&lt;/asp:ListItem>\n               &lt;asp:ListItem Value=\"1\">&lt;/asp:ListItem>\n               &lt;asp:ListItem>2&lt;/asp:ListItem>\n               &lt;asp:ListItem>3&lt;/asp:ListItem>\n               &lt;asp:ListItem Value=\"4\">&lt;/asp:ListItem>\n            &lt;/asp:DropDownList>\n         &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style2\"> &lt;/td>\n         &lt;td class=\"style1\"> &lt;/td>\n      &lt;/tr>\n\n      &lt;tr>\n         &lt;td class=\"style2\">\n            &lt;asp:CheckBox ID=\"chkvisible\" runat=\"server\" \n               Text=\"Make the Panel Visible\" />\n         &lt;/td>\n\n         &lt;td class=\"style1\">\n            &lt;asp:Button ID=\"btnrefresh\" runat=\"server\" Text=\"Refresh Panel\" \n               style=\"width:129px\" />\n         &lt;/td>\n      &lt;/tr>\n   &lt;/table>\n&lt;/form></code></pre>\n\n\n\n<p>The code behind the Page_Load event is responsible for generating the controls dynamically:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public partial class _Default : System.Web.UI.Page\n{\n   protected void Page_Load(object sender, EventArgs e)\n   {\n      //make the panel visible\n      pnldynamic.Visible = chkvisible.Checked;\n\n      //generating the lable controls:\n      int n = Int32.Parse(ddllabels.SelectedItem.Value);\n      for (int i = 1; i &lt;= n; i++)\n      {\n         Label lbl = new Label();\n         lbl.Text = \"Label\" + (i).ToString();\n         pnldynamic.Controls.Add(lbl);\n         pnldynamic.Controls.Add(new LiteralControl(\"&lt;br />\"));\n      }\n      \n      //generating the text box controls:\n\n      int m = Int32.Parse(ddltextbox.SelectedItem.Value);\n      for (int i = 1; i &lt;= m; i++)\n      {\n         TextBox txt = new TextBox();\n         txt.Text = \"Text Box\" + (i).ToString();\n         pnldynamic.Controls.Add(txt);\n         pnldynamic.Controls.Add(new LiteralControl(\"&lt;br />\"));\n      }\n   }\n}</code></pre>\n\n\n\n<p>When executed, the panel is rendered as:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/panel3.jpg\" alt=\"Panel3\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Panel control works as a container for other controls on the page. It controls the appearance and visibility of the controls it contains. It also allows generating controls programmatically. The basic syntax of panel control is as follows: The Panel control is derived from the WebControl class. Hence it inherits all the properties, methods [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3504"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3504"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3504/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3504"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3504"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3504"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3506,
    "date": "2020-09-07T15:25:29",
    "date_gmt": "2020-09-07T15:25:29",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3506"
    },
    "modified": "2020-09-07T15:25:29",
    "modified_gmt": "2020-09-07T15:25:29",
    "slug": "ajax-control-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/ajax-control-2/",
    "title": {
      "rendered": "Ajax Control"
    },
    "content": {
      "rendered": "\n<p>AJAX stands for Asynchronous JavaScript and XML. This is a cross platform technology which speeds up response time. The AJAX server controls add script to the page which is executed and processed by the browser.</p>\n\n\n\n<p>However like other ASP.NET server controls, these AJAX server controls also can have methods and event handlers associated with them, which are processed on the server side.</p>\n\n\n\n<p>The control toolbox in the Visual Studio IDE contains a group of controls called the &#8216;AJAX Extensions&#8217;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/ajax_extensions.jpg\" alt=\"AJAX Extensions\"/></figure>\n\n\n\n<h2>The ScriptManager Control</h2>\n\n\n\n<p>The ScriptManager control is the most important control and must be present on the page for other controls to work.</p>\n\n\n\n<p>It has the basic syntax:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:ScriptManager ID=\"ScriptManager1\" runat=\"server\">\n&lt;/asp:ScriptManager></code></pre>\n\n\n\n<p>If you create an &#8216;Ajax Enabled site&#8217; or add an &#8216;AJAX Web Form&#8217; from the &#8216;Add Item&#8217; dialog box, the web form automatically contains the script manager control. The ScriptManager control takes care of the client-side script for all the server side controls.</p>\n\n\n\n<h2>The UpdatePanel Control</h2>\n\n\n\n<p>The UpdatePanel control is a container control and derives from the Control class. It acts as a container for the child controls within it and does not have its own interface. When a control inside it triggers a post back, the UpdatePanel intervenes to initiate the post asynchronously and update just that portion of the page.</p>\n\n\n\n<p>For example, if a button control is inside the update panel and it is clicked, only the controls within the update panel will be affected, the controls on the other parts of the page will not be affected. This is called the partial post back or the asynchronous post back.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Add an AJAX web form in your application. It contains the script manager control by default. Insert an update panel. Place a button control along with a label control within the update panel control. Place another set of button and label outside the panel.</p>\n\n\n\n<p>The design view looks as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/scriptmanager.jpg\" alt=\"ScriptManager\"/></figure>\n\n\n\n<p>The source file is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form id=\"form1\" runat=\"server\">\n   &lt;div>\n      &lt;asp:ScriptManager ID=\"ScriptManager1\" runat=\"server\" />\n   &lt;/div>\n   \n   &lt;asp:UpdatePanel ID=\"UpdatePanel1\" runat=\"server\">\n      &lt;ContentTemplate>\n         &lt;asp:Button ID=\"btnpartial\" runat=\"server\" onclick=\"btnpartial_Click\" Text=\"Partial PostBack\"/>\n         &lt;br />\n         &lt;br />\n         &lt;asp:Label ID=\"lblpartial\" runat=\"server\">&lt;/asp:Label>\n      &lt;/ContentTemplate>\n   &lt;/asp:UpdatePanel>\n   \n   &lt;p> &lt;/p>\n   &lt;p>Outside the Update Panel&lt;/p>\n   &lt;p>\n      &lt;asp:Button ID=\"btntotal\" runat=\"server\" onclick=\"btntotal_Click\" Text=\"Total PostBack\" />\n   &lt;/p>\n   \n   &lt;asp:Label ID=\"lbltotal\" runat=\"server\">&lt;/asp:Label>\n&lt;/form></code></pre>\n\n\n\n<p>Both the button controls have same code for the event handler:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>string time = DateTime.Now.ToLongTimeString();\nlblpartial.Text = \"Showing time from panel\" + time;\nlbltotal.Text = \"Showing time from outside\" + time;</code></pre>\n\n\n\n<p>Observe that when the page is executed, if the total post back button is clicked, it updates time in both the labels but if the partial post back button is clicked, it only updates the label within the update panel.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/update_panel.jpg\" alt=\"update panel\"/></figure>\n\n\n\n<p>A page can contain multiple update panels with each panel containing other controls like a grid and displaying different part of data.</p>\n\n\n\n<p>When a total post back occurs, the update panel content is updated by default. This default mode could be changed by changing the UpdateMode property of the control. Let us look at other properties of the update panel.</p>\n\n\n\n<h3>Properties of the UpdatePanel Control</h3>\n\n\n\n<p>The following table shows the properties of the update panel control:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>ChildrenAsTriggers</td><td>This property indicates whether the post backs are coming from the child controls, which cause the update panel to refresh.</td></tr><tr><td>ContentTemplate</td><td>It is the content template and defines what appears in the update panel when it is rendered.</td></tr><tr><td>ContentTemplateContainer</td><td>Retrieves the dynamically created template container object and used for adding child controls programmatically.</td></tr><tr><td>IsInPartialRendering</td><td>Indicates whether the panel is being updated as part of the partial post back.</td></tr><tr><td>RenderMode</td><td>Shows the render modes. The available modes are Block and Inline.</td></tr><tr><td>UpdateMode</td><td>Gets or sets the rendering mode by determining some conditions.</td></tr><tr><td>Triggers</td><td>Defines the collection trigger objects each corresponding to an event causing the panel to refresh automatically.</td></tr></tbody></table></figure>\n\n\n\n<h3>Methods of the UpdatePanel Control</h3>\n\n\n\n<p>The following table shows the methods of the update panel control:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>CreateContentTemplateContainer</td><td>Creates a Control object that acts as a container for child controls that define the UpdatePanel control&#8217;s content.</td></tr><tr><td>CreateControlCollection</td><td>Returns the collection of all controls that are contained in the UpdatePanel control.</td></tr><tr><td>Initialize</td><td>Initializes the UpdatePanel control trigger collection if partial-page rendering is enabled.</td></tr><tr><td>Update</td><td>Causes an update of the content of an UpdatePanel control.</td></tr></tbody></table></figure>\n\n\n\n<p>The behavior of the update panel depends upon the values of the UpdateMode property and ChildrenAsTriggers property.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>UpdateMode</th><th>ChildrenAsTriggers</th><th>Effect</th></tr><tr><td>Always</td><td>False</td><td>Illegal parameters.</td></tr><tr><td>Always</td><td>True</td><td>UpdatePanel refreshes if whole page refreshes or a child control on it posts back.</td></tr><tr><td>Conditional</td><td>False</td><td>UpdatePanel refreshes if whole page refreshes or a triggering control outside it initiates a refresh.</td></tr><tr><td>Conditional</td><td>True</td><td>UpdatePanel refreshes if whole page refreshes or a child control on it posts back or a triggering control outside it initiates a refresh.</td></tr></tbody></table></figure>\n\n\n\n<h2>The UpdateProgress Control</h2>\n\n\n\n<p>The UpdateProgress control provides a sort of feedback on the browser while one or more update panel controls are being updated. For example, while a user logs in or waits for server response while performing some database oriented job.</p>\n\n\n\n<p>It provides a visual acknowledgement like &#8220;Loading page&#8230;&#8221;, indicating the work is in progress.</p>\n\n\n\n<p>The syntax for the UpdateProgress control is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:UpdateProgress ID=\"UpdateProgress1\" runat=\"server\" DynamicLayout=\"true\" AssociatedUpdatePanelID=\"UpdatePanel1\" >\n\n   &lt;ProgressTemplate>\n      Loading...\n   &lt;/ProgressTemplate>\n   \n&lt;/asp:UpdateProgress></code></pre>\n\n\n\n<p>The above snippet shows a simple message within the ProgressTemplate tag. However, it could be an image or other relevant controls. The UpdateProgress control displays for every asynchronous postback unless it is assigned to a single update panel using the AssociatedUpdatePanelID property.</p>\n\n\n\n<h3>Properties of the UpdateProgress Control</h3>\n\n\n\n<p>The following table shows the properties of the update progress control:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>AssociatedUpdatePanelID</td><td>Gets and sets the ID of the update panel with which this control is associated.</td></tr><tr><td>Attributes</td><td>Gets or sets the cascading style sheet (CSS) attributes of the UpdateProgress control.</td></tr><tr><td>DisplayAfter</td><td>Gets and sets the time in milliseconds after which the progress template is displayed. The default is 500.</td></tr><tr><td>DynamicLayout</td><td>Indicates whether the progress template is dynamically rendered.</td></tr><tr><td>ProgressTemplate</td><td>Indicates the template displayed during an asynchronous post back which takes more time than the DisplayAfter time.</td></tr></tbody></table></figure>\n\n\n\n<h3>Methods of the UpdateProgress Control</h3>\n\n\n\n<p>The following table shows the methods of the update progress control:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>GetScriptDescriptors</td><td>Returns a list of components, behaviors, and client controls that are required for the UpdateProgress control&#8217;s client functionality.</td></tr><tr><td>GetScriptReferences</td><td>Returns a list of client script library dependencies for the UpdateProgress control.</td></tr></tbody></table></figure>\n\n\n\n<h2>The Timer Control</h2>\n\n\n\n<p>The timer control is used to initiate the post back automatically. This could be done in two ways:</p>\n\n\n\n<p>(1) Setting the Triggers property of the UpdatePanel control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Triggers> \n   &lt;asp:AsyncPostBackTrigger ControlID=\"btnpanel2\" EventName=\"Click\" />\n&lt;/Triggers></code></pre>\n\n\n\n<p>(2) Placing a timer control directly inside the UpdatePanel to act as a child control trigger. A single timer can be the trigger for multiple UpdatePanels.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:UpdatePanel ID=\"UpdatePanel1\" runat=\"server\" UpdateMode=\"Always\">\n\n   &lt;ContentTemplate>\n      &lt;asp:Timer ID=\"Timer1\" runat=\"server\" Interval=\"1000\">\n         &lt;/asp:Timer>\n         \n      &lt;asp:Label ID=\"Label1\" runat=\"server\" Height=\"101px\" style=\"width:304px\" >\n         &lt;/asp:Label>\n   &lt;/ContentTemplate>\n   \n&lt;/asp:UpdatePanel></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>AJAX stands for Asynchronous JavaScript and XML. This is a cross platform technology which speeds up response time. The AJAX server controls add script to the page which is executed and processed by the browser. However like other ASP.NET server controls, these AJAX server controls also can have methods and event handlers associated with them, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3506"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3506"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3506/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3506"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3506"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3506"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3508,
    "date": "2020-09-07T15:26:46",
    "date_gmt": "2020-09-07T15:26:46",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3508"
    },
    "modified": "2020-09-07T15:26:46",
    "modified_gmt": "2020-09-07T15:26:46",
    "slug": "data-sources",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-sources/",
    "title": {
      "rendered": "Data Sources"
    },
    "content": {
      "rendered": "\n<p>A data source control interacts with the data-bound controls and hides the complex data binding processes. These are the tools that provide data to the data bound controls and support execution of operations like insertions, deletions, sorting, and updates.</p>\n\n\n\n<p>Each data source control wraps a particular data provider-relational databases, XML documents, or custom classes and helps in:</p>\n\n\n\n<ul><li>Managing connection</li><li>Selecting data</li><li>Managing presentation aspects like paging, caching, etc.</li><li>Manipulating data</li></ul>\n\n\n\n<p>There are many data source controls available in ASP.NET for accessing data from SQL Server, from ODBC or OLE DB servers, from XML files, and from business objects.</p>\n\n\n\n<p>Based on type of data, these controls could be divided into two categories:</p>\n\n\n\n<ul><li>Hierarchical data source controls</li><li>Table-based data source controls</li></ul>\n\n\n\n<p>The data source controls used for hierarchical data are:</p>\n\n\n\n<ul><li><strong>XMLDataSource</strong>&nbsp;&#8211; It allows binding to XML files and strings with or without schema information.</li><li><strong>SiteMapDataSource</strong>&nbsp;&#8211; It allows binding to a provider that supplies site map information.</li></ul>\n\n\n\n<p>The data source controls used for tabular data are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Data source controls</th><th>Description</th></tr><tr><td>SqlDataSource</td><td>It represents a connection to an ADO.NET data provider that returns SQL data, including data sources accessible via OLEDB and ODBC.</td></tr><tr><td>ObjectDataSource</td><td>It allows binding to a custom .Net business object that returns data.</td></tr><tr><td>LinqdataSource</td><td>It allows binding to the results of a Linq-to-SQL query (supported by ASP.NET 3.5 only).</td></tr><tr><td>AccessDataSource</td><td>It represents connection to a Microsoft Access database.</td></tr></tbody></table></figure>\n\n\n\n<h2>Data Source Views</h2>\n\n\n\n<p>Data source views are objects of the DataSourceView class. Which represent a customized view of data for different data operations such as sorting, filtering, etc.</p>\n\n\n\n<p>The DataSourceView class serves as the base class for all data source view classes, which define the capabilities of data source controls.</p>\n\n\n\n<p>The following table provides the properties of the DataSourceView class:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>CanDelete</td><td>Indicates whether deletion is allowed on the underlying data source.</td></tr><tr><td>CanInsert</td><td>Indicates whether insertion is allowed on the underlying data source.</td></tr><tr><td>CanPage</td><td>Indicates whether paging is allowed on the underlying data source.</td></tr><tr><td>CanRetrieveTotalRowCount</td><td>Indicates whether total row count information is available.</td></tr><tr><td>CanSort</td><td>Indicates whether the data could be sorted.</td></tr><tr><td>CanUpdate</td><td>Indicates whether updates are allowed on the underlying data source.</td></tr><tr><td>Events</td><td>Gets a list of event-handler delegates for the data source view.</td></tr><tr><td>Name</td><td>Name of the view.</td></tr></tbody></table></figure>\n\n\n\n<p>The following table provides the methods of the DataSourceView class:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>CanExecute</td><td>Determines whether the specified command can be executed.</td></tr><tr><td>ExecuteCommand</td><td>Executes the specific command.</td></tr><tr><td>ExecuteDelete</td><td>Performs a delete operation on the list of data that the DataSourceView object represents.</td></tr><tr><td>ExecuteInsert</td><td>Performs an insert operation on the list of data that the DataSourceView object represents.</td></tr><tr><td>ExecuteSelect</td><td>Gets a list of data from the underlying data storage.</td></tr><tr><td>ExecuteUpdate</td><td>Performs an update operation on the list of data that the DataSourceView object represents.</td></tr><tr><td>Delete</td><td>Performs a delete operation on the data associated with the view.</td></tr><tr><td>Insert</td><td>Performs an insert operation on the data associated with the view.</td></tr><tr><td>Select</td><td>Returns the queried data.</td></tr><tr><td>Update</td><td>Performs an update operation on the data associated with the view.</td></tr><tr><td>OnDataSourceViewChanged</td><td>Raises the DataSourceViewChanged event.</td></tr><tr><td>RaiseUnsupportedCapabilitiesError</td><td>Called by the RaiseUnsupportedCapabilitiesError method to compare the capabilities requested for an ExecuteSelect operation against those that the view supports.</td></tr></tbody></table></figure>\n\n\n\n<h2>The SqlDataSource Control</h2>\n\n\n\n<p>The SqlDataSource control represents a connection to a relational database such as SQL Server or Oracle database, or data accessible through OLEDB or Open Database Connectivity (ODBC). Connection to data is made through two important properties ConnectionString and ProviderName.</p>\n\n\n\n<p>The following code snippet provides the basic syntax of the control:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:SqlDataSource runat=\"server\" ID=\"MySqlSource\"\n   ProviderName='&lt;%$ ConnectionStrings:LocalNWind.ProviderName  %>'\n   ConnectionString='&lt;%$ ConnectionStrings:LocalNWind %>'\n   SelectionCommand= \"SELECT * FROM EMPLOYEES\" />\n\n&lt;asp:GridView ID=\"GridView1\" runat=\"server\" DataSourceID=\"MySqlSource\" /></code></pre>\n\n\n\n<p>Configuring various data operations on the underlying data depends upon the various properties (property groups) of the data source control.</p>\n\n\n\n<p>The following table provides the related sets of properties of the SqlDataSource control, which provides the programming interface of the control:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property Group</th><th>Description</th></tr><tr><td>DeleteCommand,DeleteParameters,DeleteCommandType</td><td>Gets or sets the SQL statement, parameters, and type for deleting rows in the underlying data.</td></tr><tr><td>FilterExpression,FilterParameters</td><td>Gets or sets the data filtering string and parameters.</td></tr><tr><td>InsertCommand,InsertParameters,InsertCommandType</td><td>Gets or sets the SQL statement, parameters, and type for inserting rows in the underlying database.</td></tr><tr><td>SelectCommand,SelectParameters,SelectCommandType</td><td>Gets or sets the SQL statement, parameters, and type for retrieving rows from the underlying database.</td></tr><tr><td>SortParameterName</td><td>Gets or sets the name of an input parameter that the command&#8217;s stored procedure will use to sort data.</td></tr><tr><td>UpdateCommand,UpdateParameters,UpdateCommandType</td><td>Gets or sets the SQL statement, parameters, and type for updating rows in the underlying data store.</td></tr></tbody></table></figure>\n\n\n\n<p>The following code snippet shows a data source control enabled for data manipulation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:SqlDataSource runat=\"server\" ID= \"MySqlSource\"\n   ProviderName='&lt;%$ ConnectionStrings:LocalNWind.ProviderName  %>'\n   ConnectionString=' &lt;%$ ConnectionStrings:LocalNWind %>'\n   SelectCommand= \"SELECT * FROM EMPLOYEES\"\n   UpdateCommand= \"UPDATE EMPLOYEES SET LASTNAME=@lame\"\n   DeleteCommand= \"DELETE FROM EMPLOYEES WHERE EMPLOYEEID=@eid\"\n   FilterExpression= \"EMPLOYEEID > 10\">\n   .....\n   .....\n&lt;/asp:SqlDataSource></code></pre>\n\n\n\n<h2>The ObjectDataSource Control</h2>\n\n\n\n<p>The ObjectDataSource Control enables user-defined classes to associate the output of their methods to data bound controls. The programming interface of this class is almost same as the SqlDataSource control.</p>\n\n\n\n<p>Following are two important aspects of binding business objects:</p>\n\n\n\n<ul><li>The bindable class should have a default constructor, it should be stateless, and have methods that can be mapped to select, update, insert, and delete semantics.</li><li>The object must update one item at a time, batch operations are not supported.</li></ul>\n\n\n\n<p>Let us go directly to an example to work with this control. The student class is the class to be used with an object data source. This class has three properties: a student id, name, and city. It has a default constructor and a GetStudents method for retrieving data.</p>\n\n\n\n<p>The student class:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Student\n{\n   public int StudentID { get; set; }\n   public string Name { get; set; }\n   public string City { get; set; }\n   \n   public Student()\n   { }\n   \n   public DataSet GetStudents()\n   {\n      DataSet ds = new DataSet();\n      DataTable dt = new DataTable(\"Students\");\n      \n      dt.Columns.Add(\"StudentID\", typeof(System.Int32));\n      dt.Columns.Add(\"StudentName\", typeof(System.String));\n      dt.Columns.Add(\"StudentCity\", typeof(System.String));\n      dt.Rows.Add(new object&#91;] { 1, \"M. H. Kabir\", \"Calcutta\" });\n      dt.Rows.Add(new object&#91;] { 2, \"Ayan J. Sarkar\", \"Calcutta\" });\n      ds.Tables.Add(dt);\n      \n      return ds;\n   }\n}</code></pre>\n\n\n\n<p>Take the following steps to bind the object with an object data source and retrieve data:</p>\n\n\n\n<ul><li>Create a new web site.</li><li>Add a class (Students.cs) to it by right clicking the project from the Solution Explorer, adding a class template, and placing the above code in it.</li><li>Build the solution so that the application can use the reference to the class.</li><li>Place an object data source control in the web form.</li><li>Configure the data source by selecting the object.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/selecting_the_object.jpg\" alt=\"selecting the object\"/></figure>\n\n\n\n<ul><li>Select a data method(s) for different operations on data. In this example, there is only one method.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/select_data_method.jpg\" alt=\"Select a data method\"/></figure>\n\n\n\n<ul><li>Place a data bound control such as grid view on the page and select the object data source as its underlying data source.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/data_bound_control.jpg\" alt=\"Data Bound Control\"/></figure>\n\n\n\n<ul><li>At this stage, the design view should look like the following:</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/object_data_source.jpg\" alt=\"Object Data Source\"/></figure>\n\n\n\n<ul><li>Run the project, it retrieves the hard coded tuples from the students class.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/object_data_result.jpg\" alt=\"Object Data Result\"/></figure>\n\n\n\n<h2>The AccessDataSource Control</h2>\n\n\n\n<p>The AccessDataSource control represents a connection to an Access database. It is based on the SqlDataSource control and provides simpler programming interface. The following code snippet provides the basic syntax for the data source:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:AccessDataSource ID=\"AccessDataSource1 runat=\"server\" \n   DataFile=\"~/App_Data/ASPDotNetStepByStep.mdb\" SelectCommand=\"SELECT * FROM  &#91;DotNetReferences]\">\n&lt;/asp:AccessDataSource></code></pre>\n\n\n\n<p>The AccessDataSource control opens the database in read-only mode. However, it can also be used for performing insert, update, or delete operations. This is done using the ADO.NET commands and parameter collection.</p>\n\n\n\n<p>Updates are problematic for Access databases from within an ASP.NET application because an Access database is a plain file and the default account of the ASP.NET application might not have the permission to write to the database file.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A data source control interacts with the data-bound controls and hides the complex data binding processes. These are the tools that provide data to the data bound controls and support execution of operations like insertions, deletions, sorting, and updates. Each data source control wraps a particular data provider-relational databases, XML documents, or custom classes and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3508"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3508"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3508/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3508"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3508"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3508"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3510,
    "date": "2020-09-07T15:28:01",
    "date_gmt": "2020-09-07T15:28:01",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3510"
    },
    "modified": "2020-09-07T15:28:01",
    "modified_gmt": "2020-09-07T15:28:01",
    "slug": "data-binding",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-binding/",
    "title": {
      "rendered": "Data Binding"
    },
    "content": {
      "rendered": "\n<p>Every ASP.NET web form control inherits the DataBind method from its parent Control class, which gives it an inherent capability to bind data to at least one of its properties. This is known as&nbsp;<strong>simple data binding</strong>&nbsp;or&nbsp;<strong>inline data binding</strong>.</p>\n\n\n\n<p>Simple data binding involves attaching any collection (item collection) which implements the IEnumerable interface, or the DataSet and DataTable classes to the DataSource property of the control.</p>\n\n\n\n<p>On the other hand, some controls can bind records, lists, or columns of data into their structure through a DataSource control. These controls derive from the BaseDataBoundControl class. This is called&nbsp;<strong>declarative data binding</strong>.</p>\n\n\n\n<p>The data source controls help the data-bound controls implement functionalities such as, sorting, paging, and editing data collections.</p>\n\n\n\n<p>The BaseDataBoundControl is an abstract class, which is inherited by two more abstract classes:</p>\n\n\n\n<ul><li>DataBoundControl</li><li>HierarchicalDataBoundControl</li></ul>\n\n\n\n<p>The abstract class DataBoundControl is again inherited by two more abstract classes:</p>\n\n\n\n<ul><li>ListControl</li><li>CompositeDataBoundControl</li></ul>\n\n\n\n<p>The controls capable of simple data binding are derived from the ListControl abstract class and these controls are:</p>\n\n\n\n<ul><li>BulletedList</li><li>CheckBoxList</li><li>DropDownList</li><li>ListBox</li><li>RadioButtonList</li></ul>\n\n\n\n<p>The controls capable of declarative data binding (a more complex data binding) are derived from the abstract class CompositeDataBoundControl. These controls are:</p>\n\n\n\n<ul><li>DetailsView</li><li>FormView</li><li>GridView</li><li>RecordList</li></ul>\n\n\n\n<h2>Simple Data Binding</h2>\n\n\n\n<p>Simple data binding involves the read-only selection lists. These controls can bind to an array list or fields from a database. Selection lists takes two values from the database or the data source; one value is displayed by the list and the other is considered as the value corresponding to the display.</p>\n\n\n\n<p>Let us take up a small example to understand the concept. Create a web site with a bulleted list and a SqlDataSource control on it. Configure the data source control to retrieve two values from your database (we use the same DotNetReferences table as in the previous chapter).</p>\n\n\n\n<p>Choosing a data source for the bulleted list control involves:</p>\n\n\n\n<ul><li>Selecting the data source control</li><li>Selecting a field to display, which is called the data field</li><li>Selecting a field for the value</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/choose_data_source.jpg\" alt=\"Choose Data Source\"/></figure>\n\n\n\n<p>When the application is executed, check that the entire title column is bound to the bulleted list and displayed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/choose_data_source2.jpg\" alt=\"Choose Data Source2\"/></figure>\n\n\n\n<h2>Declarative Data Binding</h2>\n\n\n\n<p>We have already used declarative data binding in the previous tutorial using GridView control. The other composite data bound controls capable of displaying and manipulating data in a tabular manner are the DetailsView, FormView, and RecordList control.</p>\n\n\n\n<p>In the next tutorial, we will look into the technology for handling database, i.e, ADO.NET.</p>\n\n\n\n<p>However, the data binding involves the following objects:</p>\n\n\n\n<ul><li>A dataset that stores the data retrieved from the database.</li><li>The data provider, which retrieves data from the database by using a command over a connection.</li><li>The data adapter that issues the select statement stored in the command object; it is also capable of update the data in a database by issuing Insert, Delete, and Update statements.</li></ul>\n\n\n\n<p>Relation between the data binding objects:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/declarative_data_binding.jpg\" alt=\"Declarative Data Binding\"/></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us take the following steps:</p>\n\n\n\n<p><strong>Step (1)</strong>&nbsp;: Create a new website. Add a class named booklist by right clicking on the solution name in the Solution Explorer and choosing the item &#8216;Class&#8217; from the &#8216;Add Item&#8217; dialog box. Name it as booklist.cs.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Data;\nusing System.Configuration;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.HtmlControls;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nusing System.Xml.Linq;\n\nnamespace databinding\n{\n   public class booklist\n   {\n      protected String bookname;\n      protected String authorname;\n      public booklist(String bname, String aname)\n      {\n         this.bookname = bname;\n         this.authorname = aname;\n\n      }\n      \n      public String Book\n      {\n         get\n         {\n            return this.bookname;\n         }\n         set\n         {\n            this.bookname = value;\n         }\n      }\n      \n      public String Author\n      {\n         get\n         {\n            return this.authorname;\n         }\n         set\n         {\n            this.authorname = value;\n         }\n      }\n   }\n}</code></pre>\n\n\n\n<p><strong>Step (2)</strong>&nbsp;: Add four list controls on the page a list box control, a radio button list, a check box list, and a drop down list and four labels along with these list controls. The page should look like this in design view:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/list_box_control.jpg\" alt=\"List box control\"/></figure>\n\n\n\n<p>The source file should look as the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form id=\"form1\" runat=\"server\">\n   &lt;div>\n   \n      &lt;table style=\"width: 559px\">\n         &lt;tr>\n            &lt;td style=\"width: 228px; height: 157px;\">\n               &lt;asp:ListBox ID=\"ListBox1\" runat=\"server\" AutoPostBack=\"True\" \n                  OnSelectedIndexChanged=\"ListBox1_SelectedIndexChanged\">\n               &lt;/asp:ListBox>\n            &lt;/td>\n\n            &lt;td style=\"height: 157px\">\n               &lt;asp:DropDownList ID=\"DropDownList1\" runat=\"server\" \n                  AutoPostBack=\"True\" OnSelectedIndexChanged=\"DropDownList1_SelectedIndexChanged\">\n               &lt;/asp:DropDownList>\n            &lt;/td>             \n         &lt;/tr>\n\n         &lt;tr>\n            &lt;td style=\"width: 228px; height: 40px;\">\n               &lt;asp:Label ID=\"lbllistbox\" runat=\"server\">&lt;/asp:Label>\n            &lt;/td>\n\n            &lt;td style=\"height: 40px\">\n               &lt;asp:Label ID=\"lbldrpdown\" runat=\"server\">\n               &lt;/asp:Label>\n            &lt;/td>\n         &lt;/tr>\n\n         &lt;tr>\n            &lt;td style=\"width: 228px; height: 21px\">\n            &lt;/td>\n\n            &lt;td style=\"height: 21px\">\n            &lt;/td>              \n         &lt;/tr>\n\n         &lt;tr>\n            &lt;td style=\"width: 228px; height: 21px\">\n               &lt;asp:RadioButtonList ID=\"RadioButtonList1\" runat=\"server\"\n                  AutoPostBack=\"True\"  OnSelectedIndexChanged=\"RadioButtonList1_SelectedIndexChanged\">\n               &lt;/asp:RadioButtonList>\n            &lt;/td>\n\n            &lt;td style=\"height: 21px\">\n               &lt;asp:CheckBoxList ID=\"CheckBoxList1\" runat=\"server\" \n                  AutoPostBack=\"True\" OnSelectedIndexChanged=\"CheckBoxList1_SelectedIndexChanged\">\n               &lt;/asp:CheckBoxList>\n            &lt;/td>                \n         &lt;/tr>\n\n         &lt;tr>\n            &lt;td style=\"width: 228px; height: 21px\">\n               &lt;asp:Label ID=\"lblrdlist\" runat=\"server\">\n               &lt;/asp:Label>\n            &lt;/td>\n\n            &lt;td style=\"height: 21px\">\n               &lt;asp:Label ID=\"lblchklist\" runat=\"server\">\n               &lt;/asp:Label>\n            &lt;/td>           \n         &lt;/tr>\n      &lt;/table>      \n      \n   &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<p><strong>Step (3)</strong>&nbsp;: Finally, write the following code behind routines of the application:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public partial class _Default : System.Web.UI.Page\n{\n   protected void Page_Load(object sender, EventArgs e)\n   {\n      IList bklist = createbooklist();\n      \n      if (!this.IsPostBack)\n      {\n         this.ListBox1.DataSource = bklist;\n         this.ListBox1.DataTextField = \"Book\";\n         this.ListBox1.DataValueField = \"Author\";\n         \n         this.DropDownList1.DataSource = bklist;\n         this.DropDownList1.DataTextField = \"Book\";\n         this.DropDownList1.DataValueField = \"Author\";\n         \n         this.RadioButtonList1.DataSource = bklist;\n         this.RadioButtonList1.DataTextField = \"Book\";\n         this.RadioButtonList1.DataValueField = \"Author\";\n         \n         this.CheckBoxList1.DataSource = bklist;\n         this.CheckBoxList1.DataTextField = \"Book\";\n         this.CheckBoxList1.DataValueField = \"Author\";\n         \n         this.DataBind();\n      }\n   }\n   \n   protected IList createbooklist()\n   {\n      ArrayList allbooks = new ArrayList();\n      booklist bl;\n      \n      bl = new booklist(\"UNIX CONCEPTS\", \"SUMITABHA DAS\");\n      allbooks.Add(bl);\n      \n      bl = new booklist(\"PROGRAMMING IN C\", \"RICHI KERNIGHAN\");\n      allbooks.Add(bl);\n      \n      bl = new booklist(\"DATA STRUCTURE\", \"TANENBAUM\");\n      allbooks.Add(bl);\n      \n      bl = new booklist(\"NETWORKING CONCEPTS\", \"FOROUZAN\");\n      allbooks.Add(bl);\n      \n      bl = new booklist(\"PROGRAMMING IN C++\", \"B. STROUSTROUP\");\n      allbooks.Add(bl);\n      \n      bl = new booklist(\"ADVANCED JAVA\", \"SUMITABHA DAS\");\n      allbooks.Add(bl);\n      \n      return allbooks;\n   }\n   \n   protected void ListBox1_SelectedIndexChanged(object sender, EventArgs e)\n   {\n      this.lbllistbox.Text = this.ListBox1.SelectedValue;\n   }\n   \n   protected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)\n   {\n      this.lbldrpdown.Text = this.DropDownList1.SelectedValue;\n   }\n   \n   protected void RadioButtonList1_SelectedIndexChanged(object sender, EventArgs e)\n   {\n      this.lblrdlist.Text = this.RadioButtonList1.SelectedValue;\n   }\n   \n   protected void CheckBoxList1_SelectedIndexChanged(object sender, EventArgs e)\n   {\n      this.lblchklist.Text = this.CheckBoxList1.SelectedValue;\n   }\n}</code></pre>\n\n\n\n<p>Observe the following:</p>\n\n\n\n<ul><li>The booklist class has two properties: bookname and authorname.</li><li>The createbooklist method is a user defined method that creates an array of booklist objects named allbooks.</li><li>The Page_Load event handler ensures that a list of books is created. The list is of IList type, which implements the IEnumerable interface and capable of being bound to the list controls. The page load event handler binds the IList object &#8216;bklist&#8217; with the list controls. The bookname property is to be displayed and the authorname property is considered as the value.</li><li>When the page is run, if the user selects a book, its name is selected and displayed by the list controls whereas the corresponding labels display the author name, which is the corresponding value for the selected index of the list control.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/data_binding_result.jpg\" alt=\"Data Binding Results\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Every ASP.NET web form control inherits the DataBind method from its parent Control class, which gives it an inherent capability to bind data to at least one of its properties. This is known as&nbsp;simple data binding&nbsp;or&nbsp;inline data binding. Simple data binding involves attaching any collection (item collection) which implements the IEnumerable interface, or the DataSet [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3510"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3510"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3510/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3510"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3510"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3510"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3512,
    "date": "2020-09-07T15:30:00",
    "date_gmt": "2020-09-07T15:30:00",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3512"
    },
    "modified": "2020-09-07T15:30:00",
    "modified_gmt": "2020-09-07T15:30:00",
    "slug": "custom-controls",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/custom-controls/",
    "title": {
      "rendered": "Custom Controls"
    },
    "content": {
      "rendered": "\n<p>ASP.NET allows the users to create controls. These user defined controls are categorized into:</p>\n\n\n\n<ul><li>User controls</li><li>Custom controls</li></ul>\n\n\n\n<h2>User Controls</h2>\n\n\n\n<p>User controls behaves like miniature ASP.NET pages or web forms, which could be used by many other pages. These are derived from the System.Web.UI.UserControl class. These controls have the following characteristics:</p>\n\n\n\n<ul><li>They have an .ascx extension.</li><li>They may not contain any &lt;html&gt;, &lt;body&gt;, or &lt;form&gt; tags.</li><li>They have a Control directive instead of a Page directive.</li></ul>\n\n\n\n<p>To understand the concept, let us create a simple user control, which will work as footer for the web pages. To create and use the user control, take the following steps:</p>\n\n\n\n<ul><li>Create a new web application.</li><li>Right click on the project folder on the Solution Explorer and choose Add New Item.<img src=\"https://www.tutorialspoint.com/asp.net/images/add_new_item.jpg\" alt=\"Add New Item\"></li><li>Select Web User Control from the Add New Item dialog box and name it footer.ascx. Initially, the footer.ascx contains only a Control directive.&lt;%@ Control Language=&#8221;C#&#8221; AutoEventWireup=&#8221;true&#8221; CodeBehind=&#8221;footer.ascx.cs&#8221; Inherits=&#8221;customcontroldemo.footer&#8221; %&gt;</li><li>Add the following code to the file:&lt;table&gt; &lt;tr&gt; &lt;td align=&#8221;center&#8221;&gt; Copyright ©2010 TutorialPoints Ltd.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align=&#8221;center&#8221;&gt; Location: Hyderabad, A.P &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</li></ul>\n\n\n\n<p>To add the user control to your web page, you must add the Register directive and an instance of the user control to the page. The following code shows the content file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"customcontroldemo._Default\" %>\n   \n&lt;%@ Register Src=\"~/footer.ascx\" TagName=\"footer\" TagPrefix=\"Tfooter\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n   \n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n         \n            &lt;asp:Label ID=\"Label1\" runat=\"server\" Text=\"Welcome to ASP.Net Tutorials \">&lt;/asp:Label>\n            &lt;br />  &lt;br />\n            &lt;asp:Button ID=\"Button1\" runat=\"server\" onclick=\"Button1_Click\"  Text=\"Copyright Info\" />\n            \n         &lt;/div>\n         &lt;Tfooter:footer ID=\"footer1\" runat=\"server\" />\n      &lt;/form>\n      \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>When executed, the page shows the footer and this control could be used in all the pages of your website.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/custom_result.jpg\" alt=\"Custom Result\"/></figure>\n\n\n\n<p>Observe the following:</p>\n\n\n\n<p><strong>(1)</strong>&nbsp;The Register directive specifies a tag name as well as tag prefix for the control.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Register Src=\"~/footer.ascx\" TagName=\"footer\" TagPrefix=\"Tfooter\" %></code></pre>\n\n\n\n<p><strong>(2)</strong>&nbsp;The following tag name and prefix should be used while adding the user control on the page:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Tfooter:footer ID=\"footer1\" runat=\"server\" /></code></pre>\n\n\n\n<h2>Custom Controls</h2>\n\n\n\n<p>Custom controls are deployed as individual assemblies. They are compiled into a Dynamic Link Library (DLL) and used as any other ASP.NET server control. They could be created in either of the following way:</p>\n\n\n\n<ul><li>By deriving a custom control from an existing control</li><li>By composing a new custom control combing two or more existing controls.</li><li>By deriving from the base control class.</li></ul>\n\n\n\n<p>To understand the concept, let us create a custom control, which will simply render a text message on the browser. To create this control, take the following steps:</p>\n\n\n\n<p>Create a new website. Right click the solution (not the project) at the top of the tree in the Solution Explorer.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/solution_explorer.jpg\" alt=\"Solution Explorer\"/></figure>\n\n\n\n<p>In the New Project dialog box, select ASP.NET Server Control from the project templates.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/project_templates.jpg\" alt=\"project templates\"/></figure>\n\n\n\n<p>The above step adds a new project and creates a complete custom control to the solution, called ServerControl1. In this example, let us name the project CustomControls. To use this control, this must be added as a reference to the web site before registering it on a page. To add a reference to the existing project, right click on the project (not the solution), and click Add Reference.</p>\n\n\n\n<p>Select the CustomControls project from the Projects tab of the Add Reference dialog box. The Solution Explorer should show the reference.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/custom_controls.jpg\" alt=\"Custom Controls\"/></figure>\n\n\n\n<p>To use the control on a page, add the Register directive just below the @Page directive:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Register Assembly=\"CustomControls\"  Namespace=\"CustomControls\"  TagPrefix=\"ccs\" %></code></pre>\n\n\n\n<p>Further, you can use the control, similar to any other controls.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form id=\"form1\" runat=\"server\">\n   &lt;div>\n      &lt;ccs:ServerControl1 runat=\"server\" Text = \"I am a Custom Server Control\" />\n   &lt;/div> \n&lt;/form></code></pre>\n\n\n\n<p>When executed, the Text property of the control is rendered on the browser as shown:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/custom_server_controls.jpg\" alt=\"Custom Server Controls\"/></figure>\n\n\n\n<h2>Working with Custom Controls</h2>\n\n\n\n<p>In the previous example, the value for the Text property of the custom control was set. ASP.NET added this property by default, when the control was created. The following code behind file of the control reveals this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Text;\n\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\n\nnamespace CustomControls\n{\n   &#91;DefaultProperty(\"Text\")]\n   &#91;ToolboxData(\"&lt;{0}:ServerControl1 runat=server>&lt;/{0}:ServerControl1 >\")]\n   \n   public class ServerControl1 : WebControl\n   {\n      &#91;Bindable(true)]\n      &#91;Category(\"Appearance\")]\n      &#91;DefaultValue(\"\")]\n      &#91;Localizable(true)]\n      \n      public string Text\n      {\n         get\n         {\n            String s = (String)ViewState&#91;\"Text\"];\n            return ((s == null) ? \"&#91;\" + this.ID + \"]\" : s);\n         }\n         \n         set\n         {\n            ViewState&#91;\"Text\"] = value;\n         }\n      }\n      \n      protected override void RenderContents(HtmlTextWriter output)\n      {\n         output.Write(Text);\n      }\n   }\n}</code></pre>\n\n\n\n<p>The above code is automatically generated for a custom control. Events and methods could be added to the custom control class.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us expand the previous custom control named SeverControl1. Let us give it a method named checkpalindrome, which gives it a power to check for palindromes.</p>\n\n\n\n<p>Palindromes are words/literals that spell the same when reversed. For example, Malayalam, madam, saras, etc.</p>\n\n\n\n<p>Extend the code for the custom control, which should look as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Text;\n\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\n\nnamespace CustomControls\n{\n   &#91;DefaultProperty(\"Text\")]\n   &#91;ToolboxData(\"&lt;{0}:ServerControl1 runat=server>&lt;/{0}:ServerControl1  >\")]\n   \n   public class ServerControl1 : WebControl\n   {\n      &#91;Bindable(true)]\n      &#91;Category(\"Appearance\")]\n      &#91;DefaultValue(\"\")]\n      &#91;Localizable(true)]\n      \n      public string Text\n      {\n         get\n         {\n            String s = (String)ViewState&#91;\"Text\"];\n            return ((s == null) ? \"&#91;\" + this.ID + \"]\" : s);\n         }\n         \n         set\n         {\n            ViewState&#91;\"Text\"] = value;\n         }\n      }\n      \n      protected override void RenderContents(HtmlTextWriter output)\n      {\n         if (this.checkpanlindrome())\n         {\n            output.Write(\"This is a palindrome: &lt;br />\");\n            output.Write(\"&lt;FONT size=5 color=Blue>\");\n            output.Write(\"&lt;B>\");\n            output.Write(Text);\n            output.Write(\"&lt;/B>\");\n            output.Write(\"&lt;/FONT>\");\n         }\n         else\n         {\n            output.Write(\"This is not a palindrome: &lt;br />\");\n            output.Write(\"&lt;FONT size=5 color=red>\");\n            output.Write(\"&lt;B>\");\n            output.Write(Text);\n            output.Write(\"&lt;/B>\");\n            output.Write(\"&lt;/FONT>\");\n         }\n      }\n      \n      protected bool checkpanlindrome()\n      {\n         if (this.Text != null)\n         {\n            String str = this.Text;\n            String strtoupper = Text.ToUpper();\n            char&#91;] rev = strtoupper.ToCharArray();\n            Array.Reverse(rev);\n            String strrev = new String(rev);\n            \n            if (strtoupper == strrev)\n            {\n               return true;\n            }\n            else\n            {\n               return false;\n            }\n         }\n         else\n         {\n            return false;\n         }\n      }\n   }\n}</code></pre>\n\n\n\n<p>When you change the code for the control, you must build the solution by clicking Build &#8211;&gt; Build Solution, so that the changes are reflected in your project. Add a text box and a button control to the page, so that the user can provide a text, it is checked for palindrome, when the button is clicked.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form id=\"form1\" runat=\"server\">\n   &lt;div>\n      Enter a word:\n      &lt;br />\n      &lt;asp:TextBox ID=\"TextBox1\" runat=\"server\" style=\"width:198px\"> &lt;/asp:TextBox>\n      \n      &lt;br /> &lt;br />\n      \n      &lt;asp:Button ID=\"Button1\" runat=\"server onclick=\"Button1_Click\" Text=\"Check Palindrome\" style=\"width:132px\" />\n      \n      &lt;br /> &lt;br />\n      \n      &lt;ccs:ServerControl1 ID=\"ServerControl11\" runat=\"server\" Text = \"\" />\n   &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<p>The Click event handler for the button simply copies the text from the text box to the text property of the custom control.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Button1_Click(object sender, EventArgs e)\n{\n   this.ServerControl11.Text = this.TextBox1.Text;\n}</code></pre>\n\n\n\n<p>When executed, the control successfully checks palindromes.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/checks_palindromes.jpg\" alt=\"checks palindromes\"/></figure>\n\n\n\n<p>Observe the following:</p>\n\n\n\n<p><strong>(1)</strong>&nbsp;When you add a reference to the custom control, it is added to the toolbox and you can directly use it from the toolbox similar to any other control.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/custom_control_reference.jpg\" alt=\"custom control reference\"/></figure>\n\n\n\n<p><strong>(2)</strong>&nbsp;The RenderContents method of the custom control class is overridden here, as you can add your own methods and events.</p>\n\n\n\n<p><strong>(3)</strong>&nbsp;The RenderContents method takes a parameter of HtmlTextWriter type, which is responsible for rendering on the browser.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ASP.NET allows the users to create controls. These user defined controls are categorized into: User controls Custom controls User Controls User controls behaves like miniature ASP.NET pages or web forms, which could be used by many other pages. These are derived from the System.Web.UI.UserControl class. These controls have the following characteristics: They have an .ascx [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3512"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3512"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3512/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3512"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3512"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3512"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3514,
    "date": "2020-09-07T15:31:18",
    "date_gmt": "2020-09-07T15:31:18",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3514"
    },
    "modified": "2020-09-07T15:31:18",
    "modified_gmt": "2020-09-07T15:31:18",
    "slug": "personalization",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/personalization/",
    "title": {
      "rendered": "Personalization"
    },
    "content": {
      "rendered": "\n<p>Web sites are designed for repeated visits from the users. Personalization allows a site to remember the user identity and other information details, and it presents an individualistic environment to each user.</p>\n\n\n\n<p>ASP.NET provides services for personalizing a web site to suit a particular client&#8217;s taste and preference.</p>\n\n\n\n<h2>Understanding Profiles</h2>\n\n\n\n<p>ASP.NET personalization service is based on user profile. User profile defines the kind of information about the user that the site needs. For example, name, age, address, date of birth, and phone number.</p>\n\n\n\n<p>This information is defined in the web.config file of the application and ASP.NET runtime reads and uses it. This job is done by the personalization providers.</p>\n\n\n\n<p>The user profiles obtained from user data is stored in a default database created by ASP.NET. You can create your own database for storing profiles. The profile data definition is stored in the configuration file web.config.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us create a sample site, where we want our application to remember user details like name, address, date of birth etc. Add the profile details in the web.config file within the &lt;system.web&gt; element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configuration>\n&lt;system.web>\n\n&lt;profile>\n   &lt;properties>\n      &lt;add name=\"Name\" type =\"String\"/>\n      &lt;add name=\"Birthday\" type =\"System.DateTime\"/>\n      \n      &lt;group name=\"Address\">\n         &lt;add name=\"Street\"/>\n         &lt;add name=\"City\"/>\n         &lt;add name=\"State\"/>\n         &lt;add name=\"Zipcode\"/>\n      &lt;/group>\n      \n   &lt;/properties>\n&lt;/profile>\n\n&lt;/system.web>\n&lt;/configuration></code></pre>\n\n\n\n<p>When the profile is defined in the web.config file, the profile could be used through the Profile property found in the current HttpContext and also available via page.</p>\n\n\n\n<p>Add the text boxes to take the user input as defined in the profile and add a button for submitting the data:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/personalization.jpg\" alt=\"Personalization\"/></figure>\n\n\n\n<p>Update Page_load to display profile information:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Data;\nusing System.Configuration;\n\nusing System.Web;\nusing System.Web.Security;\n\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\nusing System.Web.UI.HtmlControls;\n\npublic partial class _Default : System.Web.UI.Page \n{\n   protected void Page_Load(object sender, EventArgs e)\n   {\n      if (!this.IsPostBack)\n      {\n         ProfileCommon pc=this.Profile.GetProfile(Profile.UserName);\n         \n         if (pc != null)\n         {\n            this.txtname.Text = pc.Name;\n            this.txtaddr.Text = pc.Address.Street;\n            this.txtcity.Text = pc.Address.City;\n            this.txtstate.Text = pc.Address.State;\n            this.txtzip.Text = pc.Address.Zipcode;\n            this.Calendar1.SelectedDate = pc.Birthday;\n         }\n      }\n   }\n}</code></pre>\n\n\n\n<p>Write the following handler for the Submit button, for saving the user data into the profile:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void btnsubmit_Click(object sender, EventArgs e)\n{\n   ProfileCommon pc=this.Profile.GetProfile(Profile.UserName);\n   \n   if (pc != null)\n   {\n      pc.Name = this.txtname.Text;\n      pc.Address.Street = this.txtaddr.Text;\n      pc.Address.City = this.txtcity.Text;\n      pc.Address.State = this.txtstate.Text;\n      pc.Address.Zipcode = this.txtzip.Text;\n      pc.Birthday = this.Calendar1.SelectedDate;\n      \n      pc.Save();\n   }\n}</code></pre>\n\n\n\n<p>When the page is executed for the first time, the user needs to enter the information. However, next time the user details would be automatically loaded.</p>\n\n\n\n<h2>Attributes for the &lt;add&gt; Element</h2>\n\n\n\n<p>Apart from the name and type attributes that we have used, there are other attributes to the &lt;add&gt; element. Following table illustrates some of these attributes:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attributes</th><th>Description</th></tr><tr><td>name</td><td>The name of the property.</td></tr><tr><td>type</td><td>By default the type is string but it allows any fully qualified class name as data type.</td></tr><tr><td>serializeAs</td><td>The format to use when serializing this value.</td></tr><tr><td>readOnly</td><td>A read only profile value cannot be changed, by default this property is false.</td></tr><tr><td>defaultValue</td><td>A default value that is used if the profile does not exist or does not have information.</td></tr><tr><td>allowAnonymous</td><td>A Boolean value indicating whether this property can be used with the anonymous profiles.</td></tr><tr><td>Provider</td><td>The profiles provider that should be used to manage just this property.</td></tr></tbody></table></figure>\n\n\n\n<h2>Anonymous Personalization</h2>\n\n\n\n<p>Anonymous personalization allows the user to personalize the site before identifying themselves. For example, Amazon.com allows the user to add items in the shopping cart before they log in. To enable this feature, the web.config file could be configured as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;anonymousIdentification enabled =\"true\" cookieName=\".ASPXANONYMOUSUSER\"\n   cookieTimeout=\"120000\" cookiePath=\"/\" cookieRequiresSSL=\"false\"\n   cookieSlidingExpiration=\"true\" cookieprotection=\"Encryption\"\n   coolieless=\"UseDeviceProfile\"/></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Web sites are designed for repeated visits from the users. Personalization allows a site to remember the user identity and other information details, and it presents an individualistic environment to each user. ASP.NET provides services for personalizing a web site to suit a particular client&#8217;s taste and preference. Understanding Profiles ASP.NET personalization service is based [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3514"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3514"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3514/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3514"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3514"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3514"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3516,
    "date": "2020-09-07T15:32:59",
    "date_gmt": "2020-09-07T15:32:59",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3516"
    },
    "modified": "2020-09-07T15:32:59",
    "modified_gmt": "2020-09-07T15:32:59",
    "slug": "error-handling-5",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/error-handling-5/",
    "title": {
      "rendered": "Error Handling"
    },
    "content": {
      "rendered": "\n<p>Error handling in ASP.NET has three aspects:</p>\n\n\n\n<ul><li><strong>Tracing</strong>&nbsp;&#8211; tracing the program execution at page level or application level.</li><li><strong>Error handling</strong>&nbsp;&#8211; handling standard errors or custom errors at page level or application level.</li><li><strong>Debugging</strong>&nbsp;&#8211; stepping through the program, setting break points to analyze the code</li></ul>\n\n\n\n<p>In this chapter, we will discuss tracing and error handling and in this chapter, we will discuss debugging.</p>\n\n\n\n<p>To understand the concepts, create the following sample application. It has a label control, a dropdown list, and a link. The dropdown list loads an array list of famous quotes and the selected quote is shown in the label below. It also has a hyperlink which has points to a nonexistent link.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"errorhandling._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Tracing, debugging and error handling\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n      \n         &lt;div>\n            &lt;asp:Label ID=\"lblheading\" runat=\"server\" Text=\"Tracing, Debuggin  and Error Handling\">\n            &lt;/asp:Label>\n            \n            &lt;br /> &lt;br />\n            \n            &lt;asp:DropDownList ID=\"ddlquotes\" runat=\"server\" AutoPostBack=\"True\"  onselectedindexchanged=\"ddlquotes_SelectedIndexChanged\">\n            &lt;/asp:DropDownList>\n            \n            &lt;br /> &lt;br />\n            \n            &lt;asp:Label ID=\"lblquotes\" runat=\"server\">\n            &lt;/asp:Label>\n            \n            &lt;br /> &lt;br />\n            \n            &lt;asp:HyperLink ID=\"HyperLink1\" runat=\"server\" NavigateUrl=\"mylink.htm\">Link to:&lt;/asp:HyperLink>\n         &lt;/div>\n         \n      &lt;/form>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>The code behind file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public partial class _Default : System.Web.UI.Page\n{\n   protected void Page_Load(object sender, EventArgs e)\n   {\n      if (!IsPostBack)\n      {\n         string&#91;,] quotes = \n         {\n            {\"Imagination is more important than Knowledge.\", \"Albert Einsten\"},\n            {\"Assume a virtue, if you have it not\" \"Shakespeare\"},\n            {\"A man cannot be comfortable without his own approval\", \"Mark Twain\"},\n            {\"Beware the young doctor and the old barber\", \"Benjamin Franklin\"},\n            {\"Whatever begun in anger ends in shame\", \"Benjamin Franklin\"}\n         };\n         \n         for (int i=0; i&lt;quotes.GetLength(0); i++)\n            ddlquotes.Items.Add(new ListItem(quotes&#91;i,0], quotes&#91;i,1]));\n      }\n   }\n   \n   protected void ddlquotes_SelectedIndexChanged(object sender, EventArgs e)\n   {\n      if (ddlquotes.SelectedIndex != -1)\n      {\n         lblquotes.Text = String.Format(\"{0}, Quote: {1}\", ddlquotes.SelectedItem.Text, ddlquotes.SelectedValue);\n      }\n   }\n}</code></pre>\n\n\n\n<h2>Tracing</h2>\n\n\n\n<p>To enable page level tracing, you need to modify the Page directive and add a Trace attribute as shown:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\"\n   Inherits=\"errorhandling._Default\" Trace =\"true\" %></code></pre>\n\n\n\n<p>Now when you execute the file, you get the tracing information:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/tracing_info.jpg\" alt=\"Tracing Info\"/></figure>\n\n\n\n<p>It provides the following information at the top:</p>\n\n\n\n<ul><li>Session ID</li><li>Status Code</li><li>Time of Request</li><li>Type of Request</li><li>Request and Response Encoding</li></ul>\n\n\n\n<p>The status code sent from the server, each time the page is requested shows the name and time of error if any. The following table shows the common HTTP status codes:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Number</th><th>Description</th></tr><tr><td><strong>Informational (100 &#8211; 199)</strong></td></tr><tr><td>100</td><td>Continue</td></tr><tr><td>101</td><td>Switching protocols</td></tr><tr><td><strong>Successful (200 &#8211; 299)</strong></td></tr><tr><td>200</td><td>OK</td></tr><tr><td>204</td><td>No content</td></tr><tr><td><strong>Redirection (300 &#8211; 399)</strong></td></tr><tr><td>301</td><td>Moved permanently</td></tr><tr><td>305</td><td>Use proxy</td></tr><tr><td>307</td><td>Temporary redirect</td></tr><tr><td><strong>Client Errors (400 &#8211; 499)</strong></td></tr><tr><td>400</td><td>Bad request</td></tr><tr><td>402</td><td>Payment required</td></tr><tr><td>404</td><td>Not found</td></tr><tr><td>408</td><td>Request timeout</td></tr><tr><td>417</td><td>Expectation failed</td></tr><tr><td><strong>Server Errors (500 &#8211; 599)</strong></td></tr><tr><td>500</td><td>Internal server error</td></tr><tr><td>503</td><td>Service unavailable</td></tr><tr><td>505</td><td>HTTP version not supported</td></tr></tbody></table></figure>\n\n\n\n<p>Under the top level information, there is Trace log, which provides details of page life cycle. It provides elapsed time in seconds since the page was initialized.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/tracing_info2.jpg\" alt=\"Tracing Info2\"/></figure>\n\n\n\n<p>The next section is control tree, which lists all controls on the page in a hierarchical manner:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/tracing_info3.jpg\" alt=\"Tracing Info3\"/></figure>\n\n\n\n<p>Last in the Session and Application state summaries, cookies, and headers collections followed by list of all server variables.</p>\n\n\n\n<p>The Trace object allows you to add custom information to the trace output. It has two methods to accomplish this: the Write method and the Warn method.</p>\n\n\n\n<p>Change the Page_Load event handler to check the Write method:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Page_Load(object sender, EventArgs e)\n{\n   Trace.Write(\"Page Load\");\n   \n   if (!IsPostBack)\n   {\n      Trace.Write(\"Not Post Back, Page Load\");\n      string&#91;,] quotes = \n      .......................\n   }\n}</code></pre>\n\n\n\n<p>Run to observe the effects:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/tracing_info4.jpg\" alt=\"Tracing Info4\"/></figure>\n\n\n\n<p>To check the Warn method, let us forcibly enter some erroneous code in the selected index changed event handler:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>try\n{\n   int a = 0;\n   int b = 9 / a;\n}catch (Exception e)\n{\n   Trace.Warn(\"UserAction\", \"processing 9/a\", e);\n}</code></pre>\n\n\n\n<p>Try-Catch is a C# programming construct. The try block holds any code that may or may not produce error and the catch block catches the error. When the program is run, it sends the warning in the trace log.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/tracing_info5.jpg\" alt=\"Tracing Info5\"/></figure>\n\n\n\n<p>Application level tracing applies to all the pages in the web site. It is implemented by putting the following code lines in the web.config file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;system.web>\n   &lt;trace enabled=\"true\" />\n&lt;/system.web></code></pre>\n\n\n\n<h2>Error Handling</h2>\n\n\n\n<p>Although ASP.NET can detect all runtime errors, still some subtle errors may still be there. Observing the errors by tracing is meant for the developers, not for the users.</p>\n\n\n\n<p>Hence, to intercept such occurrence, you can add error handing settings in the web.config file of the application. It is application-wide error handling. For example, you can add the following lines in the web.config file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configuration>\n   &lt;system.web>\n   \n      &lt;customErrors mode=\"RemoteOnly\" defaultRedirect=\"GenericErrorPage.htm\">\n         &lt;error statusCode=\"403\" redirect=\"NoAccess.htm\"\t/>\n         &lt;error statusCode=\"404\" redirect=\"FileNotFound.htm\" />\n      &lt;/customErrors>\n      \n   &lt;/system.web>\n&lt;configuration></code></pre>\n\n\n\n<p>The &lt;customErrors&gt; section has the possible attributes:</p>\n\n\n\n<ul><li><strong>Mode</strong>&nbsp;: It enables or disables custom error pages. It has the three possible values:<ul><li><strong>On</strong>&nbsp;: displays the custom pages.</li><li><strong>Off</strong>&nbsp;: displays ASP.NET error pages (yellow pages)</li><li><strong>remoteOnly</strong>&nbsp;: It displays custom errors to client, display ASP.NET errors locally.</li></ul></li><li><strong>defaultRedirect</strong>&nbsp;: It contains the URL of the page to be displayed in case of unhandled errors.</li></ul>\n\n\n\n<p>To put different custom error pages for different type of errors, the &lt;error&gt; sub tags are used, where different error pages are specified, based on the status code of the errors.</p>\n\n\n\n<p>To implement page level error handling, the Page directive could be modified:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\"\n   Inherits=\"errorhandling._Default\" Trace =\"true\" ErrorPage=\"PageError.htm\" %></code></pre>\n\n\n\n<p>Because ASP.NET Debugging is an important subject in itself, so we would discuss it in the next chapter separately.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Error handling in ASP.NET has three aspects: Tracing&nbsp;&#8211; tracing the program execution at page level or application level. Error handling&nbsp;&#8211; handling standard errors or custom errors at page level or application level. Debugging&nbsp;&#8211; stepping through the program, setting break points to analyze the code In this chapter, we will discuss tracing and error handling and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3516"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3516"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3516/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3516"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3516"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3516"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3518,
    "date": "2020-09-07T15:33:44",
    "date_gmt": "2020-09-07T15:33:44",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3518"
    },
    "modified": "2020-09-07T15:33:44",
    "modified_gmt": "2020-09-07T15:33:44",
    "slug": "debugging-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/debugging-2/",
    "title": {
      "rendered": "Debugging"
    },
    "content": {
      "rendered": "\n<p>Debugging allows the developers to see how the code works in a step-by-step manner, how the values of the variables change, how the objects are created and destroyed, etc.</p>\n\n\n\n<p>When the site is executed for the first time, Visual Studio displays a prompt asking whether it should be enabled for debugging:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/debugging_info.jpg\" alt=\"Debugging Info\"/></figure>\n\n\n\n<p>When debugging is enabled, the following lines of codes are shown in the web.config:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;system.web>\n   &lt;compilation debug=\"true\">\n      &lt;assemblies>\n      ..............\n      &lt;/assemblies>\n   &lt;/compilation>\t\n&lt;/system.web></code></pre>\n\n\n\n<p>The Debug toolbar provides all the tools available for debugging:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/debugging_toolbar.jpg\" alt=\"Debugging toolbar\"/></figure>\n\n\n\n<h2>Breakpoints</h2>\n\n\n\n<p>Breakpoints specifies the runtime to run a specific line of code and then stop execution so that the code could be examined and perform various debugging jobs such as, changing the value of the variables, step through the codes, moving in and out of functions and methods etc.</p>\n\n\n\n<p>To set a breakpoint, right click on the code and choose insert break point. A red dot appears on the left margin and the line of code is highlighted as shown:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/breakpoint_highlighted.jpg\" alt=\"Breaking Highlighted\"/></figure>\n\n\n\n<p>Next when you execute the code, you can observe its behavior.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/breakpoint_highlighted2.jpg\" alt=\"Breaking Highlighted2\"/></figure>\n\n\n\n<p>At this stage, you can step through the code, observe the execution flow and examine the value of the variables, properties, objects, etc.</p>\n\n\n\n<p>You can modify the properties of the breakpoint from the Properties menu obtained by right clicking the breakpoint glyph:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/breakpoint_dropdown.jpg\" alt=\"Breaking Dropdown\"/></figure>\n\n\n\n<p>The location dialog box shows the location of the file, line number and the character number of the selected code. The condition menu item allows you to enter a valid expression, which is evaluated when the program execution reaches the breakpoint:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/breakpoint_condition.jpg\" alt=\"Breaking Condition\"/></figure>\n\n\n\n<p>The Hit Count menu item displays a dialog box that shows the number of times the break point has been executed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/breakpoint_asp.net.jpg\" alt=\"Breaking Point\"/></figure>\n\n\n\n<p>Clicking on any option presented by the drop down list opens an edit field where a target hit count is entered. This is particularly helpful in analyzing loop constructs in code.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/breakpoint_asp.net2.jpg\" alt=\"Breaking Point2\"/></figure>\n\n\n\n<p>The Filter menu item allows setting a filter for specifying machines, processes, or threads or any combination, for which the breakpoint will be effective.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/breakpoint_filters.jpg\" alt=\"Breaking Filters\"/></figure>\n\n\n\n<p>The When Hit menu item allows you to specify what to do when the break point is hit.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/breakpoint_asp.net3.jpg\" alt=\"Breaking Point3\"/></figure>\n\n\n\n<h2>The Debug Windows</h2>\n\n\n\n<p>Visual Studio provides the following debug windows, each of which shows some program information. The following table lists the windows:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Window</th><th>Description</th></tr><tr><td>Immediate</td><td>Displays variables and expressions.</td></tr><tr><td>Autos</td><td>Displays all variables in the current and previous statements.</td></tr><tr><td>Locals</td><td>Displays all variables in the current context.</td></tr><tr><td>Watch</td><td>Displays up to four different sets of variables.</td></tr><tr><td>Call Stack</td><td>Displays all methods in the call stack.</td></tr><tr><td>Threads</td><td>Displays and control threads.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Debugging allows the developers to see how the code works in a step-by-step manner, how the values of the variables change, how the objects are created and destroyed, etc. When the site is executed for the first time, Visual Studio displays a prompt asking whether it should be enabled for debugging: When debugging is enabled, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3518"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3518"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3518/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3518"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3518"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3518"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3520,
    "date": "2020-09-07T15:35:24",
    "date_gmt": "2020-09-07T15:35:24",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3520"
    },
    "modified": "2020-09-07T15:35:24",
    "modified_gmt": "2020-09-07T15:35:24",
    "slug": "linq",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/linq/",
    "title": {
      "rendered": "LINQ"
    },
    "content": {
      "rendered": "\n<p>Most applications are data-centric, however most of the data repositories are relational databases. Over the years, designers and developers have designed applications based on object models.</p>\n\n\n\n<p>The objects are responsible for connecting to the data access components &#8211; called the Data Access Layer (DAL). Here we have three points to consider:</p>\n\n\n\n<ul><li>All the data needed in an application are not stored in the same source. The source could be a relation database, some business object, XML file, or a web service.</li><li>Accessing in-memory object is simpler and less expensive than accessing data from a database or XML file.</li><li>The data accessed are not used directly, but needs to be sorted, ordered, grouped, altered etc.</li></ul>\n\n\n\n<p>Hence if there is one tool that makes all kind of data access easy that allows joining data from such disparate data sources and perform standard data processing operations, in few lines of codes, it would be of great help.</p>\n\n\n\n<p>LINQ or Language-Integrated Query is such a tool. LINQ is set of extensions to the .Net Framework 3.5 and its managed languages that set the query as an object. It defines a common syntax and a programming model to query different types of data using a common language.</p>\n\n\n\n<p>The relational operators like Select, Project, Join, Group, Partition, Set operations etc., are implemented in LINQ and the C# and VB compilers in the .Net framework 3.5, which support the LINQ syntax makes it possible to work with a configured data store without resorting to ADO.NET.</p>\n\n\n\n<p>For example, querying the Customers table in the Northwind database, using LINQ query in C#, the code would be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var data = from c in dataContext.Customers\nwhere c.Country == \"Spain\"\nselect c;</code></pre>\n\n\n\n<p>Where:</p>\n\n\n\n<ul><li>The &#8216;from&#8217; keyword logically loops through the contents of the collection.</li><li>The expression with the &#8216;where&#8217; keyword is evaluated for each object in the collection.</li><li>The &#8216;select&#8217; statement selects the evaluated object to add to the list being returned.</li><li>The &#8216;var&#8217; keyword is for variable declaration. Since the exact type of the returned object is not known, it indicates that the information will be inferred dynamically.</li></ul>\n\n\n\n<p>LINQ query can be applied to any data-bearing class that inherits from IEnumerable&lt;T&gt;, here T is any data type, for example, List&lt;Book&gt;.</p>\n\n\n\n<p>Let us look at an example to understand the concept. The example uses the following class: Books.cs</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Books\n{\n   public string ID {get; set;}\n   public string Title { get; set; }\n   public decimal Price { get; set; }\n   public DateTime DateOfRelease { get; set; }\n\n   public static List&lt;Books> GetBooks()\n   {\n      List&lt;Books> list = new List&lt;Books>();\n      list.Add(new Books { ID = \"001\", \n         Title = \"Programming in C#\", \n         Price = 634.76m, \n         DateOfRelease = Convert.ToDateTime(\"2010-02-05\") });\n     \n      list.Add(new Books { ID = \"002\", \n         Title = \"Learn Java in 30 days\", \n         Price = 250.76m, \n         DateOfRelease = Convert.ToDateTime(\"2011-08-15\") });\n     \n      list.Add(new Books { ID = \"003\", \n         Title = \"Programming in ASP.Net 4.0\", \n         Price = 700.00m, \n         DateOfRelease = Convert.ToDateTime(\"2011-02-05\") });\n     \n      list.Add(new Books { ID = \"004\", \n         Title = \"VB.Net Made Easy\", \n         Price = 500.99m, \n         DateOfRelease = Convert.ToDateTime(\"2011-12-31\") });\n     \n      list.Add(new Books { ID = \"005\", \n         Title = \"Programming in C\", \n         Price = 314.76m, \n         DateOfRelease = Convert.ToDateTime(\"2010-02-05\") });\n     \n      list.Add(new Books { ID = \"006\", \n         Title = \"Programming in C++\", \n         Price = 456.76m, \n         DateOfRelease = Convert.ToDateTime(\"2010-02-05\") });\n     \n      list.Add(new Books { ID = \"007\", \n         Title = \"Datebase Developement\", \n         Price = 1000.76m, \n         DateOfRelease = Convert.ToDateTime(\"2010-02-05\") });\n         \n      return list;\n   }\n}</code></pre>\n\n\n\n<p>The web page using this class has a simple label control, which displays the titles of the books. The Page_Load event creates a list of books and returns the titles by using LINQ query:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public partial class simplequery : System.Web.UI.Page\n{\n   protected void Page_Load(object sender, EventArgs e)\n   {\n      List&lt;Books> books = Books.GetBooks();\n      var booktitles = from b in books select b.Title;\n\n      foreach (var title in booktitles)\n         lblbooks.Text += String.Format(\"{0} &lt;br />\", title);\n   }\n}</code></pre>\n\n\n\n<p>When the page is executed, the label displays the results of the query:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/linq_result.jpg\" alt=\"LINQ Result\"/></figure>\n\n\n\n<p>The above LINQ expression:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var booktitles = \nfrom b in books \nselect b.Title;</code></pre>\n\n\n\n<p>Is equivalent to the following SQL query:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>SELECT Title from Books</code></pre>\n\n\n\n<h2>LINQ Operators</h2>\n\n\n\n<p>Apart from the operators used so far, there are several other operators, which implement all query clauses. Let us look at some of the operators and clauses.</p>\n\n\n\n<h3>The Join clause</h3>\n\n\n\n<p>The &#8216;join clause&#8217; in SQL is used for joining two data tables and displays a data set containing columns from both the tables. LINQ is also capable of that. To check this, add another class named Saledetails.cs in the previous project:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Salesdetails\n{\n   public int sales { get; set; }\n   public int pages { get; set; }\n   public string ID {get; set;}\n\n   public static IEnumerable&lt;Salesdetails> getsalesdetails()\n   { \n      Salesdetails&#91;] sd = \n      {\n         new Salesdetails { ID = \"001\", pages=678, sales = 110000},\n         new Salesdetails { ID = \"002\", pages=789, sales = 60000},\n         new Salesdetails { ID = \"003\", pages=456, sales = 40000},\n         new Salesdetails { ID = \"004\", pages=900, sales = 80000},\n         new Salesdetails { ID = \"005\", pages=456, sales = 90000},\n         new Salesdetails { ID = \"006\", pages=870, sales = 50000},\n         new Salesdetails { ID = \"007\", pages=675, sales = 40000},\n      };\n      \n      return sd.OfType&lt;Salesdetails>();\n   }\n}</code></pre>\n\n\n\n<p>Add the codes in the Page_Load event handler to query on both the tables using the join clause:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Page_Load(object sender, EventArgs e)\n{\n   IEnumerable&lt;Books> books = Books.GetBooks();\n   IEnumerable&lt;Salesdetails> sales = Salesdetails.getsalesdetails();\n   \n   var booktitles = from b in books join s in sales on b.ID equals s.ID\n      select new { Name = b.Title, Pages = s.pages };\n      \n   foreach (var title in booktitles)\n      lblbooks.Text += String.Format(\"{0} &lt;br />\", title);\n}</code></pre>\n\n\n\n<p>The resulting page is as shown:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/linq_result2.jpg\" alt=\"LINQ Result2\"/></figure>\n\n\n\n<h3>The Where clause</h3>\n\n\n\n<p>The &#8216;where clause&#8217; allows adding some conditional filters to the query. For example, if you want to see the books, where the number of pages are more than 500, change the Page_Load event handler to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var booktitles = from b in books join s in sales on b.ID equals s.ID\n   where s.pages > 500 select new { Name = b.Title, Pages = s.pages };</code></pre>\n\n\n\n<p>The query returns only those rows, where the number of pages is more than 500:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/linq_result3.jpg\" alt=\"LINQ Result3\"/></figure>\n\n\n\n<h3>Orderby and Orderbydescending Clauses</h3>\n\n\n\n<p>These clauses allow sorting the query results. To query the titles, number of pages and price of the book, sorted by the price, write the following code in the Page_Load event handler:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var booktitles = from b in books join s in sales on b.ID equals s.ID\n   orderby b.Price select new { Name = b.Title,  Pages = s.pages, Price = b.Price};</code></pre>\n\n\n\n<p>The returned tuples are:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/linq_result4.jpg\" alt=\"LINQ Result4\"/></figure>\n\n\n\n<h3>The Let clause</h3>\n\n\n\n<p>The let clause allows defining a variable and assigning it a value calculated from the data values. For example, to calculate the total sale from the above two sales, you need to calculate:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>TotalSale = Price of the Book * Sales</code></pre>\n\n\n\n<p>To achieve this, add the following code snippets in the Page_Load event handler:</p>\n\n\n\n<p>The let clause allows defining a variable and assigning it a value calculated from the data values. For example, to calculate the total sale from the above two sales, you need to calculate:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var booktitles = from b in book join s in sales on b.ID equals s.ID\n   let totalprofit = (b.Price * s.sales)\n   select new { Name = b.Title, TotalSale = totalprofit};</code></pre>\n\n\n\n<p>The resulting query page is as shown:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/linq_result5.jpg\" alt=\"LINQ Result5\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Most applications are data-centric, however most of the data repositories are relational databases. Over the years, designers and developers have designed applications based on object models. The objects are responsible for connecting to the data access components &#8211; called the Data Access Layer (DAL). Here we have three points to consider: All the data needed [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3520"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3520"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3520/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3520"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3520"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3520"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3522,
    "date": "2020-09-07T15:36:42",
    "date_gmt": "2020-09-07T15:36:42",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3522"
    },
    "modified": "2020-09-07T15:36:42",
    "modified_gmt": "2020-09-07T15:36:42",
    "slug": "security-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/security-4/",
    "title": {
      "rendered": "Security"
    },
    "content": {
      "rendered": "\n<p>Implementing security in a site has the following aspects:</p>\n\n\n\n<ul><li><strong>Authentication</strong>&nbsp;: It is the process of ensuring the user&#8217;s identity and authenticity. ASP.NET allows four types of authentications:<ul><li>Windows Authentication</li><li>Forms Authentication</li><li>Passport Authentication</li><li>Custom Authentication</li></ul></li><li><strong>Authorization</strong>&nbsp;: It is the process of defining and allotting specific roles to specific users.</li><li><strong>Confidentiality</strong>&nbsp;: It involves encrypting the channel between the client browser and the web server.</li><li><strong>Integrity</strong>&nbsp;: It involves maintaining the integrity of data. For example, implementing digital signature.</li></ul>\n\n\n\n<h2>Forms-Based Authentication</h2>\n\n\n\n<p>Traditionally, forms-based authentication involves editing the web.config file and adding a login page with appropriate authentication code.</p>\n\n\n\n<p>The web.config file could be edited and the following codes written on it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configuration>\n\n&lt;system.web>\n   &lt;authentication mode=\"Forms\">\n      &lt;forms loginUrl =\"login.aspx\"/>\n   &lt;/authentication>\n   \n   &lt;authorization>\n      &lt;deny users=\"?\"/>\n   &lt;/authorization>\n&lt;/system.web>\n...\n...\n&lt;/configuration></code></pre>\n\n\n\n<p>The login.aspx page mentioned in the above code snippet could have the following code behind file with the usernames and passwords for authentication hard coded into it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected bool authenticate(String uname, String pass)\n{\n   if(uname == \"Tom\")\n   {\n      if(pass == \"tom123\")\n         return true;\n   }\n   \n   if(uname == \"Dick\")\n   {\n      if(pass == \"dick123\")\n         return true;\n   }\n   \n   if(uname == \"Harry\")\n   {\n      if(pass == \"har123\")\n         return true;\n   }\n   \n   return false;\n}\n\npublic void OnLogin(Object src, EventArgs e)\n{\n   if (authenticate(txtuser.Text, txtpwd.Text))\n   {\n      FormsAuthentication.RedirectFromLoginPage(txtuser.Text, chkrem.Checked);\n   }\n   else\n   {\n      Response.Write(\"Invalid user name or password\");\n   }\n}</code></pre>\n\n\n\n<p>Observe that the FormsAuthentication class is responsible for the process of authentication.</p>\n\n\n\n<p>However, Visual Studio allows you to implement user creation, authentication, and authorization with seamless ease without writing any code, through the Web Site Administration tool. This tool allows creating users and roles.</p>\n\n\n\n<p>Apart from this, ASP.NET comes with readymade login controls set, which has controls performing all the jobs for you.</p>\n\n\n\n<h2>Implementing Forms-Based Security</h2>\n\n\n\n<p>To set up forms-based authentication, you need the following:</p>\n\n\n\n<ul><li>A database of users to support the authentication process</li><li>A website that uses the database</li><li>User accounts</li><li>Roles</li><li>Restriction of users and group activities</li><li>A default page, to display the login status of the users and other information.</li><li>A login page, to allow users to log in, retrieve password, or change password</li></ul>\n\n\n\n<p>To create users, take the following steps:</p>\n\n\n\n<p><strong>Step (1)</strong>&nbsp;: Choose Website -&gt; ASP.NET Configuration to open the Web Application Administration Tool.</p>\n\n\n\n<p><strong>Step (2)</strong>&nbsp;: Click on the Security tab.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/security_tab.jpg\" alt=\"Security tab\"/></figure>\n\n\n\n<p><strong>Step (3)</strong>&nbsp;: Select the authentication type to &#8216;Forms based authentication&#8217; by selecting the &#8216;From the Internet&#8217; radio button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/authentication_type.jpg\" alt=\"Authentication Type\"/></figure>\n\n\n\n<p><strong>Step (4)</strong>&nbsp;: Click on &#8216;Create Users&#8217; link to create some users. If you already had created roles, you could assign roles to the user, right at this stage.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/create_users_link.jpg\" alt=\"Create Users link \"/></figure>\n\n\n\n<p><strong>Step (5)</strong>&nbsp;: Create a web site and add the following pages:</p>\n\n\n\n<ul><li>Welcome.aspx</li><li>Login.aspx</li><li>CreateAccount.aspx</li><li>PasswordRecovery.aspx</li><li>ChangePassword.aspx</li></ul>\n\n\n\n<p><strong>Step (6)</strong>&nbsp;: Place a LoginStatus control on the Welcome.aspx from the login section of the toolbox. It has two templates: LoggedIn and LoggedOut.</p>\n\n\n\n<p>In LoggedOut template, there is a login link and in the LoggedIn template, there is a logout link on the control. You can change the login and logout text properties of the control from the Properties window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/login_status_control.jpg\" alt=\"Login Status control\"/></figure>\n\n\n\n<p><strong>Step (7)</strong>&nbsp;: Place a LoginView control from the toolbox below the LoginStatus control. Here, you can put texts and other controls (hyperlinks, buttons etc.), which are displayed based on whether the user is logged in or not.</p>\n\n\n\n<p>This control has two view templates: Anonymous template and LoggedIn template. Select each view and write some text for the users to be displayed for each template. The text should be placed on the area marked red.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/login_view_control.jpg\" alt=\"Login View control\"/></figure>\n\n\n\n<p><strong>Step (8)</strong>&nbsp;: The users for the application are created by the developer. You might want to allow a visitor to create a user account. For this, add a link beneath the LoginView control, which should link to the CreateAccount.aspx page.</p>\n\n\n\n<p><strong>Step (9)</strong>&nbsp;: Place a CreateUserWizard control on the create account page. Set the ContinueDestinationPageUrl property of this control to Welcome.aspx.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/createuserwizard_control.jpg\" alt=\"CreateUserWizard control\"/></figure>\n\n\n\n<p><strong>Step (10)</strong>&nbsp;: Create the Login page. Place a Login control on the page. The LoginStatus control automatically links to the Login.aspx. To change this default, make the following changes in the web.config file.</p>\n\n\n\n<p>For example, if you want to name your log in page as signup.aspx, add the following lines to the &lt;authentication&gt; section of the web.config:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configuration>\n   &lt;system.web>\n      &lt;authentication mode=\"Forms\">\n         &lt;forms loginUrl =\"signup.aspx\" defaultUrl = â€œWelcome.aspxâ€ />\n      &lt;/authentication>\n   &lt;/system.web>\n&lt;/configuration></code></pre>\n\n\n\n<p><strong>Step (11)</strong>&nbsp;: Users often forget passwords. The PasswordRecovery control helps the user gain access to the account. Select the Login control. Open its smart tag and click &#8216;Convert to Template&#8217;.</p>\n\n\n\n<p>Customize the UI of the control to place a hyperlink control under the login button, which should link to the PassWordRecovery.aspx.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/passwordrecovery_control.jpg\" alt=\"PasswordRecovery control\"/></figure>\n\n\n\n<p><strong>Step (12)</strong>&nbsp;: Place a PasswordRecovery control on the password recovery page. This control needs an email server to send the passwords to the users.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/passwordrecovery_control2.jpg\" alt=\"PasswordRecovery control2\"/></figure>\n\n\n\n<p><strong>Step (13)</strong>&nbsp;: Create a link to the ChangePassword.aspx page in the LoggedIn template of the LoginView control in Welcome.aspx.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/changepassword_control.jpg\" alt=\"ChangePassword control\"/></figure>\n\n\n\n<p><strong>Step (14)</strong>&nbsp;: Place a ChangePassword control on the change password page. This control also has two views.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/changepassword_control2.jpg\" alt=\"ChangePassword control2\"/></figure>\n\n\n\n<p>Now run the application and observe different security operations.</p>\n\n\n\n<p>To create roles, go back to the Web Application Administration Tools and click on the Security tab. Click on &#8216;Create Roles&#8217; and create some roles for the application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/web_application_administration.jpg\" alt=\"Web Application Administration\"/></figure>\n\n\n\n<p>Click on the &#8216;Manage Users&#8217; link and assign roles to the users.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/manage_users.jpg\" alt=\"Manage Users\"/></figure>\n\n\n\n<h2>IIS Authentication: SSL</h2>\n\n\n\n<p>The Secure Socket Layer or SSL is the protocol used to ensure a secure connection. With SSL enabled, the browser encrypts all data sent to the server and decrypts all data coming from the server. At the same time, the server encrypts and decrypts all data to and from browser.</p>\n\n\n\n<p>The URL for a secure connection starts with HTTPS instead of HTTP. A small lock is displayed by a browser using a secure connection. When a browser makes an initial attempt to communicate with a server over a secure connection using SSL, the server authenticates itself by sending its digital certificate.</p>\n\n\n\n<p>To use the SSL, you need to buy a digital secure certificate from a trusted Certification Authority (CA) and install it in the web server. Following are some of the trusted and reputed certification authorities:</p>\n\n\n\n<ul><li>www.verisign.com</li><li>www.geotrust.com</li><li>www.thawte.com</li></ul>\n\n\n\n<p>SSL is built into all major browsers and servers. To enable SSL, you need to install the digital certificate. The strength of various digital certificates varies depending upon the length of the key generated during encryption. More the length, more secure is the certificate, hence the connection.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Strength</th><th>Description</th></tr><tr><td>40 bit</td><td>Supported by most browsers but easy to break.</td></tr><tr><td>56 bit</td><td>Stronger than 40-bit.</td></tr><tr><td>128 bit</td><td>Extremely difficult to break but all the browsers do not support it.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Implementing security in a site has the following aspects: Authentication&nbsp;: It is the process of ensuring the user&#8217;s identity and authenticity. ASP.NET allows four types of authentications: Windows Authentication Forms Authentication Passport Authentication Custom Authentication Authorization&nbsp;: It is the process of defining and allotting specific roles to specific users. Confidentiality&nbsp;: It involves encrypting the channel [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3522"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3522"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3522/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3522"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3522"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3522"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3524,
    "date": "2020-09-07T15:38:30",
    "date_gmt": "2020-09-07T15:38:30",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3524"
    },
    "modified": "2020-09-07T15:38:30",
    "modified_gmt": "2020-09-07T15:38:30",
    "slug": "data-caching",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-caching/",
    "title": {
      "rendered": "Data Caching"
    },
    "content": {
      "rendered": "\n<h2>What is Caching?</h2>\n\n\n\n<p>Caching is a technique of storing frequently used data/information in memory, so that, when the same data/information is needed next time, it could be directly retrieved from the memory instead of being generated by the application.</p>\n\n\n\n<p>Caching is extremely important for performance boosting in ASP.NET, as the pages and controls are dynamically generated here. It is especially important for data related transactions, as these are expensive in terms of response time.</p>\n\n\n\n<p>Caching places frequently used data in quickly accessed media such as the random access memory of the computer. The ASP.NET runtime includes a key-value map of CLR objects called cache. This resides with the application and is available via the HttpContext and System.Web.UI.Page.</p>\n\n\n\n<p>In some respect, caching is similar to storing the state objects. However, the storing information in state objects is deterministic, i.e., you can count on the data being stored there, and caching of data is nondeterministic.</p>\n\n\n\n<p>The data will not be available in the following cases:</p>\n\n\n\n<ul><li>If its lifetime expires,</li><li>If the application releases its memory,</li><li>If caching does not take place for some reason.</li></ul>\n\n\n\n<p>You can access items in the cache using an indexer and may control the lifetime of objects in the cache and set up links between the cached objects and their physical sources.</p>\n\n\n\n<h2>Caching in ASP.Net</h2>\n\n\n\n<p>ASP.NET provides the following different types of caching:</p>\n\n\n\n<ul><li><strong>Output Caching</strong>&nbsp;: Output cache stores a copy of the finally rendered HTML pages or part of pages sent to the client. When the next client requests for this page, instead of regenerating the page, a cached copy of the page is sent, thus saving time.</li><li><strong>Data Caching</strong>&nbsp;: Data caching means caching data from a data source. As long as the cache is not expired, a request for the data will be fulfilled from the cache. When the cache is expired, fresh data is obtained by the data source and the cache is refilled.</li><li><strong>Object Caching</strong>&nbsp;: Object caching is caching the objects on a page, such as data-bound controls. The cached data is stored in server memory.</li><li><strong>Class Caching</strong>&nbsp;: Web pages or web services are compiled into a page class in the assembly, when run for the first time. Then the assembly is cached in the server. Next time when a request is made for the page or service, the cached assembly is referred to. When the source code is changed, the CLR recompiles the assembly.</li><li><strong>Configuration Caching</strong>&nbsp;: Application wide configuration information is stored in a configuration file. Configuration caching stores the configuration information in the server memory.</li></ul>\n\n\n\n<p>In this tutorial, we will consider output caching, data caching, and object caching.</p>\n\n\n\n<h2>Output Caching</h2>\n\n\n\n<p>Rendering a page may involve some complex processes such as, database access, rendering complex controls etc. Output caching allows bypassing the round trips to server by caching data in memory. Even the whole page could be cached.</p>\n\n\n\n<p>The OutputCache directive is responsible of output caching. It enables output caching and provides certain control over its behaviour.</p>\n\n\n\n<p>Syntax for OutputCache directive:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ OutputCache Duration=\"15\" VaryByParam=\"None\" %></code></pre>\n\n\n\n<p>Put this directive under the page directive. This tells the environment to cache the page for 15 seconds. The following event handler for page load would help in testing that the page was really cached.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Page_Load(object sender, EventArgs e)\n{\n   Thread.Sleep(10000);  \n   Response.Write(\"This page was generated and cache at:\" +\n   DateTime.Now.ToString());\n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>Thread.Sleep()</strong>&nbsp;method stops the process thread for the specified time. In this example, the thread is stopped for 10 seconds, so when the page is loaded for first time, it takes 10 seconds. However, next time you refresh the page it does not take any time, as the page is retrieved from the cache without being loaded.</p>\n\n\n\n<p>The OutputCache directive has the following attributes, which helps in controlling the behaviour of the output cache:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attribute</th><th>Values</th><th>Description</th></tr><tr><td>DiskCacheable</td><td>true/false</td><td>Specifies that output could be written to a disk based cache.</td></tr><tr><td>NoStore</td><td>true/false</td><td>Specifies that the &#8220;no store&#8221; cache control header is sent or not.</td></tr><tr><td>CacheProfile</td><td>String name</td><td>Name of a cache profile as to be stored in web.config.</td></tr><tr><td>VaryByParam</td><td>None*Param- name</td><td>Semicolon delimited list of string specifies query string values in a GET request or variable in a POST request.</td></tr><tr><td>VaryByHeader</td><td>*Header names</td><td>Semicolon delimited list of strings specifies headers that might be submitted by a client.</td></tr><tr><td>VaryByCustom</td><td>BrowserCustom string</td><td>Tells ASP.NET to vary the output cache by browser name and version or by a custom string.</td></tr><tr><td>Location</td><td>AnyClientDownstreamServerNone</td><td>Any: page may be cached anywhere.Client: cached content remains at browser.Downstream: cached content stored in downstream and server both.Server: cached content saved only on server.None: disables caching.</td></tr><tr><td>Duration</td><td>Number</td><td>Number of seconds the page or control is cached.</td></tr></tbody></table></figure>\n\n\n\n<p>Let us add a text box and a button to the previous example and add this event handler for the button.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void btnmagic_Click(object sender, EventArgs e)\n{\n   Response.Write(\"&lt;br>&lt;br>\");\n   Response.Write(\"&lt;h2> Hello, \" + this.txtname.Text + \"&lt;/h2>\");\n}</code></pre>\n\n\n\n<p>Change the OutputCache directive:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ OutputCache Duration=\"60\" VaryByParam=\"txtname\" %></code></pre>\n\n\n\n<p>When the program is executed, ASP.NET caches the page on the basis of the name in the text box.</p>\n\n\n\n<h2>Data Caching</h2>\n\n\n\n<p>The main aspect of data caching is caching the data source controls. We have already discussed that the data source controls represent data in a data source, like a database or an XML file. These controls derive from the abstract class DataSourceControl and have the following inherited properties for implementing caching:</p>\n\n\n\n<ul><li><strong>CacheDuration</strong>&nbsp;&#8211; It sets the number of seconds for which the data source will cache data.</li><li><strong>CacheExpirationPolicy</strong>&nbsp;&#8211; It defines the cache behavior when the data in cache has expired.</li><li><strong>CacheKeyDependency</strong>&nbsp;&#8211; It identifies a key for the controls that auto-expires the content of its cache when removed.</li><li><strong>EnableCaching</strong>&nbsp;&#8211; It specifies whether or not to cache the data.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>To demonstrate data caching, create a new website and add a new web form on it. Add a SqlDataSource control with the database connection already used in the data access tutorials.</p>\n\n\n\n<p>For this example, add a label to the page, which would show the response time for the page.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:Label ID=\"lbltime\" runat=\"server\">&lt;/asp:Label></code></pre>\n\n\n\n<p>Apart from the label, the content page is same as in the data access tutorial. Add an event handler for the page load event:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Page_Load(object sender, EventArgs e)\n{\n   lbltime.Text = String.Format(\"Page posted at: {0}\", DateTime.Now.ToLongTimeString());\n}</code></pre>\n\n\n\n<p>The designed page should look as shown:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/data_caching.jpg\" alt=\"Data Caching\"/></figure>\n\n\n\n<p>When you execute the page for the first time, nothing different happens, the label shows that, each time you refresh the page, the page is reloaded and the time shown on the label changes.</p>\n\n\n\n<p>Next, set the EnableCaching attribute of the data source control to be &#8216;true&#8217; and set the Cacheduration attribute to &#8217;60&#8217;. It will implement caching and the cache will expire every 60 seconds.</p>\n\n\n\n<p>The timestamp changes with every refresh, but if you change the data in the table within these 60 seconds, it is not shown before the cache expires.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;asp:SqlDataSource ID = \"SqlDataSource1\" runat = \"server\" \n   ConnectionString = \"&lt;%$ ConnectionStrings: ASPDotNetStepByStepConnectionString %>\" \n   ProviderName = \"&lt;%$ ConnectionStrings: ASPDotNetStepByStepConnectionString.ProviderName %>\" \n   SelectCommand = \"SELECT * FROM &#91;DotNetReferences]\"\n   EnableCaching = \"true\" CacheDuration = \"60\">         \n&lt;/asp:SqlDataSource></code></pre>\n\n\n\n<h2>Object Caching</h2>\n\n\n\n<p>Object caching provides more flexibility than other cache techniques. You can use object caching to place any object in the cache. The object can be of any type &#8211; a data type, a web control, a class, a dataset object, etc. The item is added to the cache simply by assigning a new key name, shown as follows Like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cache&#91;\"key\"] = item;</code></pre>\n\n\n\n<p>ASP.NET also provides the Insert() method for inserting an object to the cache. This method has four overloaded versions. Let us see them:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Overload</th><th>Description</th></tr><tr><td>Cache.Insert((key, value);</td><td>Inserts an item into the cache with the key name and value with default priority and expiration.</td></tr><tr><td>Cache.Insert(key, value, dependencies);</td><td>Inserts an item into the cache with key, value, default priority, expiration and a CacheDependency name that links to other files or items so that when these change the cache item remains no longer valid.</td></tr><tr><td>Cache.Insert(key, value, dependencies, absoluteExpiration, slidingExpiration);</td><td>This indicates an expiration policy along with the above issues.</td></tr><tr><td>Cache.Insert(key, value, dependencies, absoluteExpiration, slidingExpiration, priority, onRemoveCallback);</td><td>This along with the parameters also allows you to set a priority for the cache item and a delegate that, points to a method to be invoked when the item is removed.</td></tr></tbody></table></figure>\n\n\n\n<p>Sliding expiration is used to remove an item from the cache when it is not used for the specified time span. The following code snippet stores an item with a sliding expiration of 10 minutes with no dependencies.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cache.Insert(\"my_item\", obj, null, DateTime.MaxValue, TimeSpan.FromMinutes(10));</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a page with just a button and a label. Write the following code in the page load event:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void Page_Load(object sender, EventArgs e)\n{\n   if (this.IsPostBack)\n   {\n      lblinfo.Text += \"Page Posted Back.&lt;br/>\";\n   }\n   else\n   {\n      lblinfo.Text += \"page Created.&lt;br/>\";\n   }\n   \n   if (Cache&#91;\"testitem\"] == null)\n   {\n      lblinfo.Text += \"Creating test item.&lt;br/>\";\n      DateTime testItem = DateTime.Now;\n      lblinfo.Text += \"Storing test item in cache \";\n      lblinfo.Text += \"for 30 seconds.&lt;br/>\";\n      Cache.Insert(\"testitem\", testItem, null, \n      DateTime.Now.AddSeconds(30), TimeSpan.Zero);\n   }\n   else\n   {\n      lblinfo.Text += \"Retrieving test item.&lt;br/>\";\n      DateTime testItem = (DateTime)Cache&#91;\"testitem\"];\n      lblinfo.Text += \"Test item is: \" + testItem.ToString();\n      lblinfo.Text += \"&lt;br/>\";\n   }\n      \n   lblinfo.Text += \"&lt;br/>\";\n}</code></pre>\n\n\n\n<p>When the page is loaded for the first time, it says:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Page Created.\nCreating test item.\nStoring test item in cache for 30 seconds.\n</code></pre>\n\n\n\n<p>If you click on the button again within 30 seconds, the page is posted back but the label control gets its information from the cache as shown:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Page Posted Back.\nRetrieving test item.\nTest item is: 14-07-2010 01:25:04</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Caching? Caching is a technique of storing frequently used data/information in memory, so that, when the same data/information is needed next time, it could be directly retrieved from the memory instead of being generated by the application. Caching is extremely important for performance boosting in ASP.NET, as the pages and controls are dynamically [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3524"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3524"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3524/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3524"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3524"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3524"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3526,
    "date": "2020-09-07T15:41:09",
    "date_gmt": "2020-09-07T15:41:09",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3526"
    },
    "modified": "2020-09-07T15:41:09",
    "modified_gmt": "2020-09-07T15:41:09",
    "slug": "web-services-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/web-services-2/",
    "title": {
      "rendered": "Web Services"
    },
    "content": {
      "rendered": "\n<p>A web service is a web-based functionality accessed using the protocols of the web to be used by the web applications. There are three aspects of web service development:</p>\n\n\n\n<ul><li>Creating the web service</li><li>Creating a proxy</li><li>Consuming the web service</li></ul>\n\n\n\n<h2>Creating a Web Service</h2>\n\n\n\n<p>A web service is a web application which is basically a class consisting of methods that could be used by other applications. It also follows a code-behind architecture such as the ASP.NET web pages, although it does not have a user interface.</p>\n\n\n\n<p>To understand the concept let us create a web service to provide stock price information. The clients can query about the name and price of a stock based on the stock symbol. To keep this example simple, the values are hardcoded in a two-dimensional array. This web service has three methods:</p>\n\n\n\n<ul><li>A default HelloWorld method</li><li>A GetName Method</li><li>A GetPrice Method</li></ul>\n\n\n\n<p>Take the following steps to create the web service:</p>\n\n\n\n<p><strong>Step (1)</strong>&nbsp;: Select File -&gt; New -&gt; Web Site in Visual Studio, and then select ASP.NET Web Service.</p>\n\n\n\n<p><strong>Step (2)</strong>&nbsp;: A web service file called Service.asmx and its code behind file, Service.cs is created in the App_Code directory of the project.</p>\n\n\n\n<p><strong>Step (3)</strong>&nbsp;: Change the names of the files to StockService.asmx and StockService.cs.</p>\n\n\n\n<p><strong>Step (4)</strong>&nbsp;: The .asmx file has simply a WebService directive on it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ WebService Language=\"C#\" CodeBehind=\"~/App_Code/StockService.cs\" Class=\"StockService\" %></code></pre>\n\n\n\n<p><strong>Step (5)</strong>&nbsp;: Open the StockService.cs file, the code generated in it is the basic Hello World service. The default web service code behind file looks like the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Services;\nusing System.Web.Services.Protocols;\n\nusing System.Xml.Linq;\n\nnamespace StockService\n{\n   // &lt;summary>\n   // Summary description for Service1\n   // &lt;summary>\n   \n   &#91;WebService(Namespace = \"http://tempuri.org/\")]\n   &#91;WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]\n   &#91;ToolboxItem(false)]\n   \n   // To allow this Web Service to be called from script, \n   // using ASP.NET AJAX, uncomment the following line. \n   // &#91;System.Web.Script.Services.ScriptService]\n   \n   public class Service1 : System.Web.Services.WebService\n   {\n      &#91;WebMethod]\n      \n      public string HelloWorld()\n      {\n         return \"Hello World\";\n      }\n   }\n}</code></pre>\n\n\n\n<p><strong>Step (6)</strong>&nbsp;: Change the code behind file to add the two dimensional array of strings for stock symbol, name and price and two web methods for getting the stock information.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Services;\nusing System.Web.Services.Protocols;\n\nusing System.Xml.Linq;\n\n&#91;WebService(Namespace = \"http://tempuri.org/\")]\n&#91;WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]\n\n// To allow this Web Service to be called from script, \n// using ASP.NET AJAX, uncomment the following line. \n// &#91;System.Web.Script.Services.ScriptService]\n\npublic class StockService : System.Web.Services.WebService\n{\n   public StockService () {\n      //Uncomment the following if using designed components \n      //InitializeComponent(); \n   }\n   \n   string&#91;,] stocks =\n   {\n      {\"RELIND\", \"Reliance Industries\", \"1060.15\"},\n      {\"ICICI\", \"ICICI Bank\", \"911.55\"},\n      {\"JSW\", \"JSW Steel\", \"1201.25\"},\n      {\"WIPRO\", \"Wipro Limited\", \"1194.65\"},\n      {\"SATYAM\", \"Satyam Computers\", \"91.10\"}\n   };\n\n   &#91;WebMethod]\n   public string HelloWorld() {\n      return \"Hello World\";\n   }\n   \n   &#91;WebMethod]\n   public double GetPrice(string symbol)\n   { \n      //it takes the symbol as parameter and returns price\n      for (int i = 0; i &lt; stocks.GetLength(0); i++)\n      {\n         if (String.Compare(symbol, stocks&#91;i, 0], true) == 0)\n         return Convert.ToDouble(stocks&#91;i, 2]);\n      }\n      \n      return 0;\n   }\n   \n   &#91;WebMethod]\n   public string GetName(string symbol)\n   {\n      // It takes the symbol as parameter and \n      // returns name of the stock\n      for (int i = 0; i &lt; stocks.GetLength(0); i++)\n      {\n         if (String.Compare(symbol, stocks&#91;i, 0], true) == 0)\n         return stocks&#91;i, 1];\n      }\n      \n      return \"Stock Not Found\";\n   }\n}</code></pre>\n\n\n\n<p><strong>Step (7)</strong>&nbsp;: Running the web service application gives a web service test page, which allows testing the service methods.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/stock_service.jpg\" alt=\"Stock Service\"/></figure>\n\n\n\n<p><strong>Step (8)</strong>&nbsp;: Click on a method name, and check whether it runs properly.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/get_name_service.jpg\" alt=\"Get Name\"/></figure>\n\n\n\n<p><strong>Step (9)</strong>&nbsp;: For testing the GetName method, provide one of the stock symbols, which are hard coded, it returns the name of the stock</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/name_of_stock.jpg\" alt=\"the name of the stock\"/></figure>\n\n\n\n<h2>Consuming the Web Service</h2>\n\n\n\n<p>For using the web service, create a web site under the same solution. This could be done by right clicking on the Solution name in the Solution Explorer. The web page calling the web service should have a label control to display the returned results and two button controls one for post back and another for calling the service.</p>\n\n\n\n<p>The content file for the web application is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"wsclient._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n   \n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n         \n            &lt;h3>Using the Stock Service&lt;/h3>\n            \n            &lt;br /> &lt;br />\n            \n            &lt;asp:Label ID=\"lblmessage\" runat=\"server\">&lt;/asp:Label>\n            \n            &lt;br /> &lt;br />\n            \n            &lt;asp:Button ID=\"btnpostback\" runat=\"server\" onclick=\"Button1_Click\" Text=\"Post Back\" style=\"width:132px\" />\n               \n            &lt;asp:Button ID=\"btnservice\" runat=\"server\" onclick=\"btnservice_Click\"  Text=\"Get Stock\" style=\"width:99px\" />\n            \n         &lt;/div>\n      &lt;/form>\n      \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The code behind file for the web application is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.HtmlControls;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nusing System.Xml.Linq;\n\n//this is the proxy\nusing localhost;\n\nnamespace wsclient\n{\n   public partial class _Default : System.Web.UI.Page\n   {\n      protected void Page_Load(object sender, EventArgs e)\n      {\n         if (!IsPostBack)\n         {\n            lblmessage.Text = \"First Loading Time: \" +  DateTime.Now.ToLongTimeString\n         }\n         else\n         {\n            lblmessage.Text = \"PostBack at: \" + DateTime.Now.ToLongTimeString();\n         }\n      }\n      \n      protected void btnservice_Click(object sender, EventArgs e)\n      {\n         StockService proxy = new StockService();\n         lblmessage.Text = String.Format(\"Current SATYAM Price:{0}\",\n         proxy.GetPrice(\"SATYAM\").ToString());\n      }\n   }\n}</code></pre>\n\n\n\n<h2>Creating the Proxy</h2>\n\n\n\n<p>A proxy is a stand-in for the web service codes. Before using the web service, a proxy must be created. The proxy is registered with the client application. Then the client application makes the calls to the web service as it were using a local method.</p>\n\n\n\n<p>The proxy takes the calls, wraps it in proper format and sends it as a SOAP request to the server. SOAP stands for Simple Object Access Protocol. This protocol is used for exchanging web service data.</p>\n\n\n\n<p>When the server returns the SOAP package to the client, the proxy decodes everything and presents it to the client application.</p>\n\n\n\n<p>Before calling the web service using the btnservice_Click, a web reference should be added to the application. This creates a proxy class transparently, which is used by the btnservice_Click event.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void btnservice_Click(object sender, EventArgs e)\n{\n   StockService proxy = new StockService();\n   lblmessage.Text = String.Format(\"Current SATYAM Price: {0}\", \n   proxy.GetPrice(\"SATYAM\").ToString());\n}</code></pre>\n\n\n\n<p>Take the following steps for creating the proxy:</p>\n\n\n\n<p><strong>Step (1)</strong>&nbsp;: Right click on the web application entry in the Solution Explorer and click on &#8216;Add Web Reference&#8217;.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/add_web_reference.jpg\" alt=\"Add Web Reference\"/></figure>\n\n\n\n<p><strong>Step (2)</strong>&nbsp;: Select &#8216;Web Services in this solution&#8217;. It returns the StockService reference.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/select_web_services.jpg\" alt=\"Select Web Services\"/></figure>\n\n\n\n<p><strong>Step (3)</strong>&nbsp;: Clicking on the service opens the test web page. By default the proxy created is called &#8216;localhost&#8217;, you can rename it. Click on &#8216;Add Reference&#8217; to add the proxy to the client application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/stock_service2.jpg\" alt=\"Stock Service 2\"/></figure>\n\n\n\n<p>Include the proxy in the code behind file by adding:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using localhost; </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A web service is a web-based functionality accessed using the protocols of the web to be used by the web applications. There are three aspects of web service development: Creating the web service Creating a proxy Consuming the web service Creating a Web Service A web service is a web application which is basically a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3526"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3526"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3526/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3526"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3526"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3526"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3528,
    "date": "2020-09-07T15:42:32",
    "date_gmt": "2020-09-07T15:42:32",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3528"
    },
    "modified": "2020-09-07T15:42:32",
    "modified_gmt": "2020-09-07T15:42:32",
    "slug": "multi-threading",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/multi-threading/",
    "title": {
      "rendered": "Multi Threading"
    },
    "content": {
      "rendered": "\n<p>A thread is defined as the execution path of a program. Each thread defines a unique flow of control. If your application involves complicated and time consuming operations such as database access or some intense I/O operations, then it is often helpful to set different execution paths or threads, with each thread performing a particular job.</p>\n\n\n\n<p>Threads are lightweight processes. One common example of use of thread is implementation of concurrent programming by modern operating systems. Use of threads saves wastage of CPU cycle and increases efficiency of an application.</p>\n\n\n\n<p>So far we compiled programs where a single thread runs as a single process which is the running instance of the application. However, this way the application can perform one job at a time. To make it execute multiple tasks at a time, it could be divided into smaller threads.</p>\n\n\n\n<p>In .Net, the threading is handled through the &#8216;System.Threading&#8217; namespace. Creating a variable of the&nbsp;<em>System.Threading.Thread</em>&nbsp;type allows you to create a new thread to start working with. It allows you to create and access individual threads in a program.</p>\n\n\n\n<h2>Creating Thread</h2>\n\n\n\n<p>A thread is created by creating a Thread object, giving its constructor a ThreadStart reference.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ThreadStart childthreat = new ThreadStart(childthreadcall);</code></pre>\n\n\n\n<h2>Thread Life Cycle</h2>\n\n\n\n<p>The life cycle of a thread starts when an object of the System.Threading.Thread class is created and ends when the thread is terminated or completes execution.</p>\n\n\n\n<p>Following are the various states in the life cycle of a thread:</p>\n\n\n\n<ul><li><strong>The Unstarted State</strong>&nbsp;: It is the situation when the instance of the thread is created but the Start method is not called.</li><li><strong>The Ready State</strong>&nbsp;: It is the situation when the thread is ready to execute and waiting CPU cycle.</li><li><strong>The Not Runnable State</strong>&nbsp;: a thread is not runnable, when:<ul><li>Sleep method has been called</li><li>Wait method has been called</li><li>Blocked by I/O operations</li></ul></li><li><strong>The Dead State</strong>&nbsp;: It is the situation when the thread has completed execution or has been aborted.</li></ul>\n\n\n\n<h2>Thread Priority</h2>\n\n\n\n<p>The Priority property of the Thread class specifies the priority of one thread with respect to other. The .Net runtime selects the ready thread with the highest priority.</p>\n\n\n\n<p>The priorities could be categorized as:</p>\n\n\n\n<ul><li>Above normal</li><li>Below normal</li><li>Highest</li><li>Lowest</li><li>Normal</li></ul>\n\n\n\n<p>Once a thread is created, its priority is set using the Priority property of the thread class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>NewThread.Priority = ThreadPriority.Highest;</code></pre>\n\n\n\n<h2>Thread Properties &amp; Methods</h2>\n\n\n\n<p>The Thread class has the following important properties:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>CurrentContext</td><td>Gets the current context in which the thread is executing.</td></tr><tr><td>CurrentCulture</td><td>Gets or sets the culture for the current thread.</td></tr><tr><td>CurrentPrinciple</td><td>Gets or sets the thread&#8217;s current principal for role-based security.</td></tr><tr><td>CurrentThread</td><td>Gets the currently running thread.</td></tr><tr><td>CurrentUICulture</td><td>Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</td></tr><tr><td>ExecutionContext</td><td>Gets an ExecutionContext object that contains information about the various contexts of the current thread.</td></tr><tr><td>IsAlive</td><td>Gets a value indicating the execution status of the current thread.</td></tr><tr><td>IsBackground</td><td>Gets or sets a value indicating whether or not a thread is a background thread.</td></tr><tr><td>IsThreadPoolThread</td><td>Gets a value indicating whether or not a thread belongs to the managed thread pool.</td></tr><tr><td>ManagedThreadId</td><td>Gets a unique identifier for the current managed thread.</td></tr><tr><td>Name</td><td>Gets or sets the name of the thread.</td></tr><tr><td>Priority</td><td>Gets or sets a value indicating the scheduling priority of a thread.</td></tr><tr><td>ThreadState</td><td>Gets a value containing the states of the current thread.</td></tr></tbody></table></figure>\n\n\n\n<p>The Thread class has the following important methods:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods</th><th>Description</th></tr><tr><td>Abort</td><td>Raises a ThreadAbortException in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.</td></tr><tr><td>AllocateDataSlot</td><td>Allocates an unnamed data slot on all the threads. For better performance, use fields that are marked with the ThreadStaticAttribute attribute instead.</td></tr><tr><td>AllocateNamedDataSlot</td><td>Allocates a named data slot on all threads. For better performance, use fields that are marked with the ThreadStaticAttribute attribute instead.</td></tr><tr><td>BeginCriticalRegion</td><td>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might endanger other tasks in the application domain.</td></tr><tr><td>BeginThreadAffinity</td><td>Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</td></tr><tr><td>EndCriticalRegion</td><td>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</td></tr><tr><td>EndThreadAffinity</td><td>Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</td></tr><tr><td>FreeNamedDataSlot</td><td>Eliminates the association between a name and a slot, for all threads in the process. For better performance, use fields that are marked with the ThreadStaticAttribute attribute instead.</td></tr><tr><td>GetData</td><td>Retrieves the value from the specified slot on the current thread, within the current thread&#8217;s current domain. For better performance, use fields that are marked with the ThreadStaticAttribute attribute instead.</td></tr><tr><td>GetDomain</td><td>Returns the current domain in which the current thread is running.</td></tr><tr><td>GetDomainID</td><td>Returns a unique application domain identifier.</td></tr><tr><td>GetNamedDataSlot</td><td>Looks up a named data slot. For better performance, use fields that are marked with the ThreadStaticAttribute attribute instead.</td></tr><tr><td>Interrupt</td><td>Interrupts a thread that is in the WaitSleepJoin thread state.</td></tr><tr><td>Join</td><td>Blocks the calling thread until a thread terminates, while continuing to perform standard COM and SendMessage pumping. This method has different overloaded forms.</td></tr><tr><td>MemoryBarrier</td><td>Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to MemoryBarrier execute after memory accesses that follow the call to MemoryBarrier.</td></tr><tr><td>ResetAbort</td><td>Cancels an Abort requested for the current thread.</td></tr><tr><td>SetData</td><td>Sets the data in the specified slot on the currently running thread, for that thread&#8217;s current domain. For better performance, use fields marked with the ThreadStaticAttribute attribute instead.</td></tr><tr><td>Start</td><td>Starts a thread.</td></tr><tr><td>Sleep</td><td>Makes the thread pause for a period of time.</td></tr><tr><td>SpinWait</td><td>Causes a thread to wait the number of times defined by the iterations parameter.</td></tr><tr><td>VolatileRead()</td><td>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache. This method has different overloaded forms.</td></tr><tr><td>VolatileWrite()</td><td>Writes a value to a field immediately, so that the value is visible to all processors in the computer. This method has different overloaded forms.</td></tr><tr><td>Yield</td><td>Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example illustrates the uses of the Thread class. The page has a label control for displaying messages from the child thread. The messages from the main program are directly displayed using the Response.Write() method. Hence they appear on the top of the page.</p>\n\n\n\n<p>The source file is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"threaddemo._Default\" %>\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n   &lt;head runat=\"server\">\n      &lt;title>\n         Untitled Page\n      &lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id=\"form1\" runat=\"server\">\n         &lt;div>\n            &lt;h3>Thread Example&lt;/h3>\n         &lt;/div>\n         \n         &lt;asp:Label ID=\"lblmessage\" runat=\"server\" Text=\"Label\">\n         &lt;/asp:Label>\n      &lt;/form>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>The code behind file is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.HtmlControls;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nusing System.Xml.Linq;\nusing System.Threading;\n\nnamespace threaddemo\n{\n   public partial class _Default : System.Web.UI.Page\n   {\n      protected void Page_Load(object sender, EventArgs e)\n      {\n         ThreadStart childthreat = new ThreadStart(childthreadcall);\n         Response.Write(\"Child Thread Started &lt;br/>\");\n         Thread child = new Thread(childthreat);\n         \n         child.Start();\n         \n         Response.Write(\"Main sleeping  for 2 seconds.......&lt;br/>\");\n         Thread.Sleep(2000);\n         Response.Write(\"&lt;br/>Main aborting child thread&lt;br/>\");\n         \n         child.Abort();\n      }\n      \n      public void childthreadcall()\n      {\n         try{\n            lblmessage.Text = \"&lt;br />Child thread started &lt;br/>\";\n            lblmessage.Text += \"Child Thread: Coiunting to 10\";\n            \n            for( int i =0; i&lt;10; i++)\n            {\n               Thread.Sleep(500);\n               lblmessage.Text += \"&lt;br/> in Child thread &lt;/br>\";\n            }\n            \n            lblmessage.Text += \"&lt;br/> child thread finished\";\n            \n         }catch(ThreadAbortException e){\n         \n            lblmessage.Text += \"&lt;br /> child thread - exception\";\n            \n         }finally{\n            lblmessage.Text += \"&lt;br /> child thread - unable to catch the  exception\";\n         }\n      }\n   }\n}</code></pre>\n\n\n\n<h2>Observe the following</h2>\n\n\n\n<ul><li>When the page is loaded, a new thread is started with the reference of the method childthreadcall(). The main thread activities are displayed directly on the web page.</li><li>The second thread runs and sends messages to the label control.</li><li>The main thread sleeps for 2000 ms, during which the child thread executes.</li><li>The child thread runs till it is aborted by the main thread. It raises the ThreadAbortException and is terminated.</li><li>Control returns to the main thread.</li></ul>\n\n\n\n<p>When executed the program sends the following messages:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/asp.net_thread.jpg\" alt=\"ASP.NET Thread\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A thread is defined as the execution path of a program. Each thread defines a unique flow of control. If your application involves complicated and time consuming operations such as database access or some intense I/O operations, then it is often helpful to set different execution paths or threads, with each thread performing a particular [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3528"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3528"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3528/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3528"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3528"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3528"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3530,
    "date": "2020-09-07T15:45:00",
    "date_gmt": "2020-09-07T15:45:00",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3530"
    },
    "modified": "2020-09-07T15:45:00",
    "modified_gmt": "2020-09-07T15:45:00",
    "slug": "configuration-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/configuration-4/",
    "title": {
      "rendered": "Configuration"
    },
    "content": {
      "rendered": "\n<p>The behavior of an ASP.NET application is affected by different settings in the configuration files:</p>\n\n\n\n<ul><li>machine.config</li><li>web.config</li></ul>\n\n\n\n<p>The machine.config file contains default and the machine-specific value for all supported settings. The machine settings are controlled by the system administrator and applications are generally not given access to this file.</p>\n\n\n\n<p>An application however, can override the default values by creating web.config files in its roots folder. The web.config file is a subset of the machine.config file.</p>\n\n\n\n<p>If the application contains child directories, it can define a web.config file for each folder. Scope of each configuration file is determined in a hierarchical top-down manner.</p>\n\n\n\n<p>Any web.config file can locally extend, restrict, or override any settings defined on the upper level.</p>\n\n\n\n<p>Visual Studio generates a default web.config file for each project. An application can execute without a web.config file, however, you cannot debug an application without a web.config file.</p>\n\n\n\n<p>The following figure shows the Solution Explorer for the sample example used in the web services tutorial:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/solution_explorer2.jpg\" alt=\"Solution Explorer-2\"/></figure>\n\n\n\n<p>In this application, there are two web.config files for two projects i.e., the web service and the web site calling the web service.</p>\n\n\n\n<p>The web.config file has the configuration element as the root node. Information inside this element is grouped into two main areas: the configuration section-handler declaration area, and the configuration section settings area.</p>\n\n\n\n<p>The following code snippet shows the basic syntax of a configuration file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configuration>\n\n   &lt;!-- Configuration section-handler declaration area. -->\n      &lt;configSections>\n         &lt;section name=\"section1\" type=\"section1Handler\" />\n         &lt;section name=\"section2\" type=\"section2Handler\" />\n      &lt;/configSections>\n   &lt;!-- Configuration section settings area. -->\n   \n   &lt;section1>\n      &lt;s1Setting1 attribute1=\"attr1\" />\n   &lt;/section1>\n   \n   &lt;section2>\n      &lt;s2Setting1 attribute1=\"attr1\" />\n   &lt;/section2>\n   \n   &lt;system.web>\n      &lt;authentication mode=\"Windows\" />\n   &lt;/system.web>\n   \n&lt;/configuration></code></pre>\n\n\n\n<h2>Configuration Section Handler declarations</h2>\n\n\n\n<p>The configuration section handlers are contained within the &lt;configSections&gt; tags. Each configuration handler specifies name of a configuration section, contained within the file, which provides some configuration data. It has the following basic syntax:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configSections>\n   &lt;section />\n   &lt;sectionGroup />\n   &lt;remove />\n   &lt;clear/>\n&lt;/configSections></code></pre>\n\n\n\n<p>It has the following elements:</p>\n\n\n\n<ul><li><strong>Clear</strong>&nbsp;&#8211; It removes all references to inherited sections and section groups.</li><li><strong>Remove</strong>&nbsp;&#8211; It removes a reference to an inherited section and section group.</li><li><strong>Section</strong>&nbsp;&#8211; It defines an association between a configuration section handler and a configuration element.</li><li><strong>Section group</strong>&nbsp;&#8211; It defines an association between a configuration section handler and a configuration section.</li></ul>\n\n\n\n<h2>Application Settings</h2>\n\n\n\n<p>The application settings allow storing application-wide name-value pairs for read-only access. For example, you can define a custom application setting as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configuration>\n   &lt;appSettings>\n      &lt;add key=\"Application Name\" value=\"MyApplication\" /> \n   &lt;/appSettings>\n&lt;/configuration></code></pre>\n\n\n\n<p>For example, you can also store the name of a book and its ISBN number:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configuration>\n   &lt;appSettings>\n      &lt;add key=\"appISBN\" value=\"0-273-68726-3\" />\n      &lt;add key=\"appBook\" value=\"Corporate Finance\" />\n   &lt;/appSettings>\n&lt;/configuration></code></pre>\n\n\n\n<h2>Connection Strings</h2>\n\n\n\n<p>The connection strings show which database connection strings are available to the website. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;connectionStrings>\n   &lt;add name=\"ASPDotNetStepByStepConnectionString\" \n      connectionString=\"Provider=Microsoft.Jet.OLEDB.4.0;\n      Data Source=E:\\\\projects\\datacaching\\ /\n      datacaching\\App_Data\\ASPDotNetStepByStep.mdb\"\n      providerName=\"System.Data.OleDb\" />\n      \n   &lt;add name=\"booksConnectionString\" \n      connectionString=\"Provider=Microsoft.Jet.OLEDB.4.0;\n      Data Source=C:\\ \\databinding\\App_Data\\books.mdb\"\n      providerName=\"System.Data.OleDb\" />\n&lt;/connectionStrings></code></pre>\n\n\n\n<h2>System.Web Element</h2>\n\n\n\n<p>The system.web element specifies the root element for the ASP.NET configuration section and contains configuration elements that configure ASP.NET Web applications and control how the applications behave.</p>\n\n\n\n<p>It holds most of the configuration elements needed to be adjusted in common applications. The basic syntax for the element is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;system.web> \n   &lt;anonymousIdentification> \n   &lt;authentication> \n   &lt;authorization> \n   &lt;browserCaps> \n   &lt;caching> \n   &lt;clientTarget> \n   &lt;compilation> \n   &lt;customErrors> \n   &lt;deployment> \n   &lt;deviceFilters> \n   &lt;globalization> \n   &lt;healthMonitoring> \n   &lt;hostingEnvironment> \n   &lt;httpCookies> \n   &lt;httpHandlers> \n   &lt;httpModules> \n   &lt;httpRuntime> \n   &lt;identity> \n   &lt;machineKey> \n   &lt;membership> \n   &lt;mobileControls> \n   &lt;pages> \n   &lt;processModel> \n   &lt;profile> \n   &lt;roleManager> \n   &lt;securityPolicy> \n   &lt;sessionPageState> \n   &lt;sessionState> \n   &lt;siteMap> \n   &lt;trace> \n   &lt;trust> \n   &lt;urlMappings> \n   &lt;webControls> \n   &lt;webParts> \n   &lt;webServices> \n   &lt;xhtmlConformance> \n&lt;/system.web></code></pre>\n\n\n\n<p>The following table provides brief description of some of common sub elements of the&nbsp;<strong>system.web</strong>&nbsp;element:</p>\n\n\n\n<h3>AnonymousIdentification</h3>\n\n\n\n<p>This is required to identify users who are not authenticated when authorization is required.</p>\n\n\n\n<h3>Authentication</h3>\n\n\n\n<p>It configures the authentication support. The basic syntax is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;authentication mode=\"&#91;Windows|Forms|Passport|None]\"> \n   &lt;forms>...&lt;/forms>\n   &lt;passport/>\n&lt;/authentication></code></pre>\n\n\n\n<h3>Authorization</h3>\n\n\n\n<p>It configures the authorization support. The basic syntax is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;authorization> \n   &lt;allow .../>\n   &lt;deny .../>\n&lt;/authorization></code></pre>\n\n\n\n<h3>Caching</h3>\n\n\n\n<p>It Configures the cache settings. The basic syntax is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;caching>\n   &lt;cache>...&lt;/cache>\n   &lt;outputCache>...&lt;/outputCache>\n   &lt;outputCacheSettings>...&lt;/outputCacheSettings>\n   &lt;sqlCacheDependency>...&lt;/sqlCacheDependency>\n&lt;/caching></code></pre>\n\n\n\n<h3>CustomErrors</h3>\n\n\n\n<p>It defines custom error messages. The basic syntax is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;customErrors defaultRedirect=\"url\" mode=\"On|Off|RemoteOnly\">\n   &lt;error. . ./>\n&lt;/customErrors></code></pre>\n\n\n\n<h3>Deployment</h3>\n\n\n\n<p>It defines configuration settings used for deployment. The basic syntax is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;deployment retail=\"true|false\" /></code></pre>\n\n\n\n<h3>HostingEnvironment</h3>\n\n\n\n<p>It defines configuration settings for hosting environment. The basic syntax is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;hostingEnvironment idleTimeout=\"HH:MM:SS\" shadowCopyBinAssemblies=\"true|false\" \n   shutdownTimeout=\"number\" urlMetadataSlidingExpiration=\"HH:MM:SS\" /></code></pre>\n\n\n\n<h3>Identity</h3>\n\n\n\n<p>It configures the identity of the application. The basic syntax is as given:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;identity impersonate=\"true|false\" userName=\"domain\\username\"\n   password=\"&lt;secure password>\"/></code></pre>\n\n\n\n<h3>MachineKey</h3>\n\n\n\n<p>It configures keys to use for encryption and decryption of Forms authentication cookie data.</p>\n\n\n\n<p>It also allows configuring a validation key that performs message authentication checks on view-state data and forms authentication tickets. The basic syntax is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;machineKey validationKey=\"AutoGenerate,IsolateApps\" &#91;String]\n   decryptionKey=\"AutoGenerate,IsolateApps\" &#91;String]\n   validation=\"HMACSHA256\" &#91;SHA1 | MD5 | 3DES | AES | HMACSHA256 | \n   HMACSHA384 | HMACSHA512 | alg:algorithm_name]\n   decryption=\"Auto\" &#91;Auto | DES | 3DES | AES | alg:algorithm_name]\n/></code></pre>\n\n\n\n<h3>Membership</h3>\n\n\n\n<p>This configures parameters of managing and authenticating user accounts. The basic syntax is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;membership defaultProvider=\"provider name\"\n   userIsOnlineTimeWindow=\"number of minutes\" hashAlgorithmType=\"SHA1\">\n   &lt;providers>...&lt;/providers>\n&lt;/membership></code></pre>\n\n\n\n<h3>Pages</h3>\n\n\n\n<p>It provides page-specific configurations. The basic syntax is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;pages asyncTimeout=\"number\" autoEventWireup=\"&#91;True|False]\"\n      buffer=\"&#91;True|False]\" clientIDMode=\"&#91;AutoID|Predictable|Static]\"\n      compilationMode=\"&#91;Always|Auto|Never]\" \n      controlRenderingCompatibilityVersion=\"&#91;3.5|4.0]\"\n      enableEventValidation=\"&#91;True|False]\"\n      enableSessionState=\"&#91;True|False|ReadOnly]\"\n      enableViewState=\"&#91;True|False]\"\n      enableViewStateMac=\"&#91;True|False]\"\n      maintainScrollPositionOnPostBack=\"&#91;True|False]\" \n      masterPageFile=\"file path\" \n      maxPageStateFieldLength=\"number\" \n      pageBaseType=\"typename, assembly\"\n      pageParserFilterType=\"string\" \n      smartNavigation=\"&#91;True|False]\"\n      styleSheetTheme=\"string\"\n      theme=\"string\"\n      userControlBaseType=\"typename\"\n      validateRequest=\"&#91;True|False]\"\n      viewStateEncryptionMode=\"&#91;Always|Auto|Never]\" >\n   \n   &lt;controls>...&lt;/controls>\n   &lt;namespaces>...&lt;/namespaces>\n   &lt;tagMapping>...&lt;/tagMapping>\n   &lt;ignoreDeviceFilters>...&lt;/ignoreDeviceFilters>\n&lt;/pages></code></pre>\n\n\n\n<h3>Profile</h3>\n\n\n\n<p>It configures user profile parameters. The basic syntax is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;profile enabled=\"true|false\" inherits=\"fully qualified type reference\"\n   automaticSaveEnabled=\"true|false\" defaultProvider=\"provider name\">\n   \n   &lt;properties>...&lt;/properties>\n   &lt;providers>...&lt;/providers>\n   \n&lt;/profile></code></pre>\n\n\n\n<h3>RoleManager</h3>\n\n\n\n<p>It configures settings for user roles. The basic syntax is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;roleManager cacheRolesInCookie=\"true|false\" cookieName=\"name\"\n   cookiePath=\"/\" cookieProtection=\"All|Encryption|Validation|None\"\n   cookieRequireSSL=\"true|false \" cookieSlidingExpiration=\"true|false \"\n   cookieTimeout=\"number of minutes\" createPersistentCookie=\"true|false\"\n   defaultProvider=\"provider name\" domain=\"cookie domain\"> \n   enabled=\"true|false\"\n   maxCachedResults=\"maximum number of role names cached\"\n   \n   &lt;providers>...&lt;/providers>\n&lt;/roleManager></code></pre>\n\n\n\n<h3>SecurityPolicy</h3>\n\n\n\n<p>It configures the security policy. The basic syntax is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;securityPolicy>\n   &lt;trustLevel />\n&lt;/securityPolicy></code></pre>\n\n\n\n<h3>UrlMappings</h3>\n\n\n\n<p>It defines mappings to hide the original URL and provide a more user friendly URL. The basic syntax is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;urlMappings enabled=\"true|false\">\n   &lt;add.../>\n   &lt;clear />\n   &lt;remove.../>\n&lt;/urlMappings></code></pre>\n\n\n\n<h3>WebControls</h3>\n\n\n\n<p>It provides the name of shared location for client scripts. The basic syntax is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;webControls clientScriptsLocation=\"String\" /></code></pre>\n\n\n\n<h3>WebServices</h3>\n\n\n\n<p>This configures the web services.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The behavior of an ASP.NET application is affected by different settings in the configuration files: machine.config web.config The machine.config file contains default and the machine-specific value for all supported settings. The machine settings are controlled by the system administrator and applications are generally not given access to this file. An application however, can override the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3530"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3530"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3530/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3530"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3530"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3530"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3532,
    "date": "2020-09-07T15:45:50",
    "date_gmt": "2020-09-07T15:45:50",
    "guid": {
      "rendered": "http://backend.foobrdigital.com/?p=3532"
    },
    "modified": "2020-09-07T15:45:50",
    "modified_gmt": "2020-09-07T15:45:50",
    "slug": "deployment-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/deployment-4/",
    "title": {
      "rendered": "Deployment"
    },
    "content": {
      "rendered": "\n<p>There are two categories of ASP.NET deployment:</p>\n\n\n\n<ul><li><strong>Local deployment</strong>&nbsp;: In this case, the entire application is contained within a virtual directory and all the contents and assemblies are contained within it and available to the application.</li><li><strong>Global deployment</strong>&nbsp;: In this case, assemblies are available to every application running on the server.</li></ul>\n\n\n\n<p>There are different techniques used for deployment, however, we will discuss the following most common and easiest ways of deployment:</p>\n\n\n\n<ul><li>XCOPY deployment</li><li>Copying a Website</li><li>Creating a set up project</li></ul>\n\n\n\n<h2>XCOPY Deployment</h2>\n\n\n\n<p>XCOPY deployment means making recursive copies of all the files to the target folder on the target machine. You can use any of the commonly used techniques:</p>\n\n\n\n<ul><li>FTP transfer</li><li>Using Server management tools that provide replication on a remote site</li><li>MSI installer application</li></ul>\n\n\n\n<p>XCOPY deployment simply copies the application file to the production server and sets a virtual directory there. You need to set a virtual directory using the Internet Information Manager Microsoft Management Console (MMC snap-in).</p>\n\n\n\n<h2>Copying a Website</h2>\n\n\n\n<p>The Copy Web Site option is available in Visual Studio. It is available from the Website -&gt; Copy Web Site menu option. This menu item allows copying the current web site to another local or remote location. It is a sort of integrated FTP tool.</p>\n\n\n\n<p>Using this option, you connect to the target destination, select the desired copy mode:</p>\n\n\n\n<ul><li>Overwrite</li><li>Source to Target Files</li><li>Sync UP Source And Target Projects</li></ul>\n\n\n\n<p>Then proceed with copying the files physically. Unlike the XCOPY deployment, this process of deployment is done from Visual Studio environment. However, there are following problems with both the above deployment methods:</p>\n\n\n\n<ul><li>You pass on your source code.</li><li>There is no pre-compilation and related error checking for the files.</li><li>The initial page load will be slow.</li></ul>\n\n\n\n<h2>Creating a Setup Project</h2>\n\n\n\n<p>In this method, you use Windows Installer and package your web applications so it is ready to deploy on the production server. Visual Studio allows you to build deployment packages. Let us test this on one of our existing project, say the data binding project.</p>\n\n\n\n<p>Open the project and take the following steps:</p>\n\n\n\n<p><strong>Step (1)</strong>&nbsp;: Select File -&gt; Add -&gt; New Project with the website root directory highlighted in the Solution Explorer.</p>\n\n\n\n<p><strong>Step (2)</strong>&nbsp;: Select Setup and Deployment, under Other Project Types. Select Setup Wizard.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/select_setup_wizard.jpg\" alt=\"Select Setup Wizard\"/></figure>\n\n\n\n<p><strong>Step (3)</strong>&nbsp;: Choosing the default location ensures that the set up project will be located in its own folder under the root directory of the site. Click on okay to get the first splash screen of the wizard.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/splash_screen_wizard.jpg\" alt=\"splash screen Wizard\"/></figure>\n\n\n\n<p><strong>Step (4)</strong>&nbsp;: Choose a project type. Select &#8216;Create a setup for a web application&#8217;.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/splash_screen_wizard2.jpg\" alt=\"splash screen Wizard2\"/></figure>\n\n\n\n<p><strong>Step (5)</strong>&nbsp;: Next, the third screen asks to choose project outputs from all the projects in the solution. Check the check box next to &#8216;Content Files from&#8230;&#8217;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/splash_screen_wizard3.jpg\" alt=\"splash screen Wizard3\"/></figure>\n\n\n\n<p><strong>Step (6)</strong>&nbsp;: The fourth screen allows including other files like ReadMe. However, in our case there is no such file. Click on finish.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/splash_screen_wizard4.jpg\" alt=\"splash screen Wizard4\"/></figure>\n\n\n\n<p><strong>Step (7)</strong>&nbsp;: The final screen displays a summary of settings for the set up project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/splash_screen_wizard5.jpg\" alt=\"splash screen Wizard5\"/></figure>\n\n\n\n<p><strong>Step (8)</strong>&nbsp;: The Set up project is added to the Solution Explorer and the main design window shows a file system editor.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/splash_screen_wizard6.jpg\" alt=\"splash screen Wizard6\"/></figure>\n\n\n\n<p><strong>Step (9)</strong>&nbsp;: Next step is to build the setup project. Right click on the project name in the Solution Explorer and select Build.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/splash_screen_wizard7.jpg\" alt=\"splash screen Wizard7\"/></figure>\n\n\n\n<p><strong>Step (10)</strong>&nbsp;: When build is completed, you get the following message in the Output window:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net/images/splash_screen_wizard8.jpg\" alt=\"splash screen Wizard8\"/></figure>\n\n\n\n<p>Two files are created by the build process:</p>\n\n\n\n<ul><li>Setup.exe</li><li>Setup-databinding.msi</li></ul>\n\n\n\n<p>You need to copy these files to the server. Double-click the setup file to install the content of the .msi file on the local machine.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are two categories of ASP.NET deployment: Local deployment&nbsp;: In this case, the entire application is contained within a virtual directory and all the contents and assemblies are contained within it and available to the application. Global deployment&nbsp;: In this case, assemblies are available to every application running on the server. There are different techniques [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      69
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3532"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3532"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3532/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3532"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3532"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3532"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]