[
    {
        "id": 694,
        "date": "2020-05-13T06:05:12",
        "date_gmt": "2020-05-13T06:05:12",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=694"
        },
        "modified": "2020-12-25T19:04:32",
        "modified_gmt": "2020-12-25T19:04:32",
        "slug": "overview-3",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/overview-3\/",
        "title": {
            "rendered": "Introduction"
        },
        "content": {
            "rendered": "\n<p>Electron enables you to create desktop applications with pure JavaScript by providing a runtime with rich native (operating system) APIs.<\/p>\n\n\n\n<p>This does not mean Electron is a JavaScript binding to graphical user interface (GUI) libraries. Instead, Electron uses web pages as its GUI, so you can also see it as a minimal Chromium browser, controlled by JavaScript. So all the electron apps are technically web pages running in a browser that can leverage your OS APIs.<\/p>\n\n\n\n<p>Before Electron, you could not make a cross-platform desktop app with web technologies.<\/p>\n\n\n\n<p>On the Mac, there were frameworks like MacGap that let you create an application which basically embedded a Safari page (WebView), and you could load your JavaScript into that.<\/p>\n\n\n\n<p>Being a Mac application, you had the option to write native code using Objective-C, and access the system APIs, but this was not portable outside the Mac platform. No chance to make this work on Linux or Windows, and I\u2019m sure those had their own tools to do this kind of thing.<\/p>\n\n\n\n<h2>Who Uses Electron?<\/h2>\n\n\n\n<p>Github developed Electron for creating the text editor Atom. They were both open sourced in 2014. Electron is used by many companies like Microsoft, Github, Slack, etc.<\/p>\n\n\n\n<p>Electron has been used to create a number of apps. Following are a few notable apps \u2212<\/p>\n\n\n\n<ul><li>Slack desktop<\/li><li>WordPress desktop app<\/li><li>Visual Studio Code<\/li><li>Caret Markdown Editor<\/li><li>Nylas Email App<\/li><li>GitKraken git client<\/li><\/ul>\n\n\n\n<h2 id=\"which-kind-of-apps-you-can-do\">Which kind of apps you can do<\/h2>\n\n\n\n<p>You can do lots of different kind of apps, including<\/p>\n\n\n\n<ul><li>regular apps, with a dock icon, and a window<\/li><li>menu bar apps, which don\u2019t have any dock icon<\/li><li>daemons<\/li><li>command line utilities<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Electron enables you to create desktop applications with pure JavaScript by providing a runtime with rich native (operating system) APIs. This does not mean Electron is a JavaScript binding to graphical user interface (GUI) libraries. Instead, Electron uses web pages as its GUI, so you can also see it as a minimal Chromium browser, controlled [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1172,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/694"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=694"
                }
            ],
            "version-history": [
                {
                    "count": 5,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/694\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1200,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/694\/revisions\/1200"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1172"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=694"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=694"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=694"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 697,
        "date": "2020-05-13T06:08:38",
        "date_gmt": "2020-05-13T06:08:38",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=697"
        },
        "modified": "2020-12-25T19:04:32",
        "modified_gmt": "2020-12-25T19:04:32",
        "slug": "installation-3",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/installation-3\/",
        "title": {
            "rendered": "Installation"
        },
        "content": {
            "rendered": "\n<p>To get started with developing using the Electron, you need to have Node and npm(node package manager) installed. If you do not already have these, head over to&nbsp;Node setup&nbsp;to install node on your local system. Confirm that node and npm are installed by running the following commands in your terminal.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>node --version\nnpm --version<\/code><\/pre>\n\n\n\n<p>The above command will generate the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>v10.19.0\n6.14.4<\/code><\/pre>\n\n\n\n<p>Whenever we create a project using npm, we need to provide a&nbsp;<strong>package.json<\/strong>&nbsp;file, which has all the details about our project. npm makes it easy for us to set up this file. Let us set up our development project.<\/p>\n\n\n\n<ul><li>Fire up your terminal\/cmd, create a new folder named hello-world and open that folder using the cd command.<\/li><li>Now to create the package.json file using npm, use the following command.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>npm init<\/code><\/pre>\n\n\n\n<ul><li>It will ask you for the following information \u2212<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/environment_npm.jpg\" alt=\"Package.json creation\"\/><\/figure>\n\n\n\n<p>Just keep pressing Enter, and enter your name at the \u201cauthor name\u201d field.<\/p>\n\n\n\n<p>Create a new folder and open it using the cd command. Now run the following command to install Electron globally.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g electron-prebuilt<\/code><\/pre>\n\n\n\n<p>Once it executes, you can check if Electron is installed the right way by running the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron --version\n<\/code><\/pre>\n\n\n\n<p>You should get the output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>8.3.0<\/code><\/pre>\n\n\n\n<p>Now that we have set up Electron, let us move on to creating our first app using it.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>To get started with developing using the Electron, you need to have Node and npm(node package manager) installed. If you do not already have these, head over to&nbsp;Node setup&nbsp;to install node on your local system. Confirm that node and npm are installed by running the following commands in your terminal. The above command will generate [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1174,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/697"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=697"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/697\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1175,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/697\/revisions\/1175"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1174"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=697"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=697"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=697"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 707,
        "date": "2020-05-13T06:18:38",
        "date_gmt": "2020-05-13T06:18:38",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=707"
        },
        "modified": "2020-12-25T19:04:32",
        "modified_gmt": "2020-12-25T19:04:32",
        "slug": "how-electron-works",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/how-electron-works\/",
        "title": {
            "rendered": "Electron Internals"
        },
        "content": {
            "rendered": "\n<p>Electron is basically bundling the Chromium rendering library and Node.js (Chromium the open source project made by Google, on which they build the Chrome browser).<\/p>\n\n\n\n<p>You have both access to a canvas powered by Chromium, which runs the V8 JavaScript engine, and use any Node.js package, and run your own Node.js code.<\/p>\n\n\n\n<p>It\u2019s a sort of Node.js for the desktop, if you wish. It does not provide any kind of GUI elements, but rather lets you create UIs using HTML, CSS and JavaScript.<\/p>\n\n\n\n<p>Electron aims to be fast, small in size, and as slim as possible, yet providing the core features that all apps can rely upon.<\/p>\n\n\n\n<p>Electron takes a main file defined in your&nbsp;<em>package.json<\/em>&nbsp;file and executes it. This main file creates application windows that contain rendered web pages and interaction with the native GUI of your Operating System.<\/p>\n\n\n\n<p>As you start an application using Electron, the&nbsp;<strong>main process<\/strong>&nbsp;is created. This main process is responsible for interacting with the native GUI of the Operating System. It creates the GUI of your application.<\/p>\n\n\n\n<p>Just starting the main process does not give the users of your application any application window. These are created by the main process in the main file by using the\u00a0<em>Browser Window<\/em>\u00a0module. Each browser window then runs its own\u00a0renderer process. The renderer process takes an HTML file that references the usual CSS files, JavaScript files, images, etc. and renders it in the window.<\/p>\n\n\n\n<p>The main process can access the native GUI through modules available directly in Electron. The desktop application can access all Node modules like the file system module for handling files, request to make HTTP calls, etc.<\/p>\n\n\n\n<h2>Difference between Main and Renderer processes<\/h2>\n\n\n\n<p>The main process creates web pages by creating the&nbsp;<em>BrowserWindow<\/em>&nbsp;instances. Each&nbsp;<em>BrowserWindow<\/em>&nbsp;instance runs the web page in its own renderer process. When a&nbsp;<em>BrowserWindow<\/em>&nbsp;instance is destroyed, the corresponding renderer process is also terminated.<\/p>\n\n\n\n<p>The main process manages all web pages and their corresponding renderer processes. Each renderer process is isolated and only cares about the web page running in it.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Electron is basically bundling the Chromium rendering library and Node.js (Chromium the open source project made by Google, on which they build the Chrome browser). You have both access to a canvas powered by Chromium, which runs the V8 JavaScript engine, and use any Node.js package, and run your own Node.js code. It\u2019s a sort [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1177,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/707"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=707"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/707\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1961,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/707\/revisions\/1961"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1177"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=707"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=707"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=707"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 708,
        "date": "2020-05-13T06:20:50",
        "date_gmt": "2020-05-13T06:20:50",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=708"
        },
        "modified": "2020-12-25T19:04:32",
        "modified_gmt": "2020-12-25T19:04:32",
        "slug": "hello-world",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/hello-world\/",
        "title": {
            "rendered": "First App"
        },
        "content": {
            "rendered": "\n<p>We have created a&nbsp;<strong>package.json<\/strong>&nbsp;file for our project. Now we will create our first desktop app using Electron.<\/p>\n\n\n\n<p>Create a new file called&nbsp;<em>main.js<\/em>. Enter the following code in it \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron') \nconst url = require('url') \nconst path = require('path')  \n\nlet win  \n\nfunction createWindow() { \n   win = new BrowserWindow({width: 800, height: 600}) \n   win.loadURL(url.format ({ \n      pathname: path.join(__dirname, 'index.html'), \n      protocol: 'file:', \n      slashes: true \n   })) \n}  \n\napp.on('ready', createWindow) <\/code><\/pre>\n\n\n\n<p>Create another file, this time an HTML file called&nbsp;<em>index.html<\/em>. Enter the following code in it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>Hello Electron&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;h1>Hello Electron&lt;\/h1>\n      We are using node &lt;script>document.write(process.versions.node)&lt;\/script>,\n      Chrome &lt;script>document.write(process.versions.chrome)&lt;\/script>,\n      and Electron &lt;script>document.write(process.versions.electron)&lt;\/script>.\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Run this app using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js<\/code><\/pre>\n\n\n\n<h2>How Does This App Work?<\/h2>\n\n\n\n<p>We created a main file and an HTML file. The main file uses two modules \u2013\u00a0<em>app<\/em>\u00a0and\u00a0<em>BrowserWindow<\/em>. The app module is used to control your application\u2019s event life-cycle while the BrowserWindow module is used to create and control browser windows.<\/p>\n\n\n\n<p>We defined a&nbsp;<em>createWindow<\/em>&nbsp;function, where we are creating a new BrowserWindow and attaching a URL to this BrowserWindow. This is the HTML file that is rendered and shown to us when we run the app.<\/p>\n\n\n\n<p>We have used a native Electron object process in our html file. This object is extended from the Node.js process object and includes all of&nbsp;<strong>t=its<\/strong>&nbsp;functionalities while adding many more.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We have created a&nbsp;package.json&nbsp;file for our project. Now we will create our first desktop app using Electron. Create a new file called&nbsp;main.js. Enter the following code in it \u2212 Create another file, this time an HTML file called&nbsp;index.html. Enter the following code in it. Run this app using the following command \u2212 How Does This [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1180,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/708"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=708"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/708\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1962,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/708\/revisions\/1962"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1180"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=708"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=708"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=708"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 709,
        "date": "2020-05-13T06:23:44",
        "date_gmt": "2020-05-13T06:23:44",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=709"
        },
        "modified": "2020-12-25T19:04:32",
        "modified_gmt": "2020-12-25T19:04:32",
        "slug": "building-uis",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/building-uis\/",
        "title": {
            "rendered": "Building Interface"
        },
        "content": {
            "rendered": "\n<p>The User Interface of Electron apps is built using HTML, CSS and JS. So we can leverage all the available tools for front-end web development here as well. You can use the tools such as Angular, Backbone, React, Bootstrap, and Foundation, to build the apps.<\/p>\n\n\n\n<p>You can use Bower to manage these front-end dependencies. Install bower using \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g bower<\/code><\/pre>\n\n\n\n<p>Now you can get all the available JS and CSS frameworks, libraries, plugins, etc. using bower. For example, to get the latest stable version of bootstrap, enter the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ bower install bootstrap<\/code><\/pre>\n\n\n\n<p>This will download bootstrap in&nbsp;<em>bower_components<\/em>. Now you can reference this library in your HTML. Let us create a simple page using these libraries.<\/p>\n\n\n\n<p>Let us now install JQuery using the npm command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save jquery<\/code><\/pre>\n\n\n\n<p>Further, this will be&nbsp;<em>required<\/em>&nbsp;in our view.js file. We already have a main.js setup as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron')\nconst url = require('url')\nconst path = require('path')\n\nlet win\n\nfunction createWindow() {\n   win = new BrowserWindow({width: 900, height: 600})\n   win.loadURL(url.format ({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n   }))\n}\n\napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>Open your&nbsp;<strong>index.html<\/strong>&nbsp;file and enter the following code in it \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>Hello World!&lt;\/title>\n      &lt;link rel = \"stylesheet\" \n         href = \".\/bower_components\/bootstrap\/dist\/css\/bootstrap.min.css\" \/>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;div class = \"container\">\n         &lt;h1>This page is using Bootstrap and jQuery!&lt;\/h1>\n         &lt;h3 id = \"click-counter\">&lt;\/h3>\n         &lt;button class = \"btn btn-success\" id = \"countbtn\">Click here&lt;\/button>\n         &lt;script src = \".\/view.js\" >&lt;\/script>\n      &lt;\/div>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Create&nbsp;<strong>view.js<\/strong>&nbsp;and enter the click counter logic in it \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>let $ = require('jquery')  \/\/ jQuery now loaded and assigned to $\nlet count = 0\n$('#click-counter').text(count.toString())\n$('#countbtn').on('click', () => {\n   count ++ \n   $('#click-counter').text(count)\n}) <\/code><\/pre>\n\n\n\n<p>Run the app using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js\n<\/code><\/pre>\n\n\n\n<p>The above command will generate the output as in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/ui.jpg\" alt=\"UI\"\/><\/figure>\n\n\n\n<p>You can build your native app just like you build websites. If you do not want users to be restricted to an exact window size, you can leverage the responsive design and allow users to use your app in a flexible manner.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The User Interface of Electron apps is built using HTML, CSS and JS. So we can leverage all the available tools for front-end web development here as well. You can use the tools such as Angular, Backbone, React, Bootstrap, and Foundation, to build the apps. You can use Bower to manage these front-end dependencies. Install [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1183,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/709"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=709"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/709\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1963,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/709\/revisions\/1963"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1183"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=709"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=709"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=709"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 710,
        "date": "2020-05-13T06:25:09",
        "date_gmt": "2020-05-13T06:25:09",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=710"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "file-handling",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/file-handling\/",
        "title": {
            "rendered": "File Handling"
        },
        "content": {
            "rendered": "\n<p>File handling is a very important part of building a desktop application. Almost all desktop apps interact with files.<\/p>\n\n\n\n<p>We will create a form in our app that will take as input, a Name and an Email address. This form will be saved to a file and a list will be created that will show this as output.<\/p>\n\n\n\n<p>Set up your main process using the following code in the&nbsp;<strong>main.js<\/strong>&nbsp;file \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron')\nconst url = require('url')\nconst path = require('path')\n\nlet win\n\nfunction createWindow() {\n   win = new BrowserWindow({width: 800, height: 600})\n   win.loadURL(url.format ({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n   }))\n}\n\napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>Now open the&nbsp;<strong>index.html<\/strong>&nbsp;file and enter the following code in it \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>File System&lt;\/title>\n      &lt;link rel = \"stylesheet\" \n         href = \".\/bower_components\/bootstrap\/dist\/css\/bootstrap.min.css\" \/>\n      \n      &lt;style type = \"text\/css\">\n         #contact-list {\n            height: 150px;\n            overflow-y: auto;\n         }\n      &lt;\/style>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;div class = \"container\">\n         &lt;h1>Enter Names and Email addresses of your contacts&lt;\/h1>\n         &lt;div class = \"form-group\">\n            &lt;label for = \"Name\">Name&lt;\/label>\n            &lt;input type = \"text\" name = \"Name\" value = \"\" id = \"Name\" \n               placeholder = \"Name\" class = \"form-control\" required>\n         &lt;\/div>\n         \n         &lt;div class = \"form-group\">\n            &lt;label for = \"Email\">Email&lt;\/label>\n            &lt;input type = \"email\" name = \"Email\" value = \"\" id = \"Email\" \n               placeholder = \"Email\" class = \"form-control\" required>\n         &lt;\/div>\n         \n         &lt;div class = \"form-group\">\n            &lt;button class = \"btn btn-primary\" id = \"add-to-list\">Add to list!&lt;\/button>\n         &lt;\/div>\n         \n         &lt;div id = \"contact-list\">\n            &lt;table class = \"table-striped\" id = \"contact-table\">\n               &lt;tr>\n                  &lt;th class = \"col-xs-2\">S. No.&lt;\/th>\n                  &lt;th class = \"col-xs-4\">Name&lt;\/th>\n                  &lt;th class = \"col-xs-6\">Email&lt;\/th>\n               &lt;\/tr>\n            &lt;\/table>\n         &lt;\/div>\n         \n         &lt;script src = \".\/view.js\" >&lt;\/script>\n      &lt;\/div>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Now we need to handle the addition event. We will do this in our&nbsp;<strong>view.js<\/strong>&nbsp;file.<\/p>\n\n\n\n<p>We will create a function<strong>\u00a0<em>loadAndDisplayContacts()<\/em><\/strong>\u00a0that will initially load contacts from the file. After creating the\u00a0<em><strong>loadAndDisplayContacts()<\/strong><\/em>\u00a0function, we will create a click handler on our\u00a0<strong>add to list<\/strong>\u00a0button. This will add the entry to both the file and the table.<\/p>\n\n\n\n<p>In your view.js file, enter the following code \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>let $ = require('jquery')\nlet fs = require('fs')\nlet filename = 'contacts'\nlet sno = 0\n\n$('#add-to-list').on('click', () => {\n   let name = $('#Name').val()\n   let email = $('#Email').val()\n\n   fs.appendFile('contacts', name + ',' + email + '\\n')\n\n   addEntry(name, email)\n})\n\nfunction addEntry(name, email) {\n   if(name &amp;&amp; email) {\n      sno++\n      let updateString = '&lt;tr>&lt;td>'+ sno + '&lt;\/td>&lt;td>'+ name +'&lt;\/td>&lt;td>' \n         + email +'&lt;\/td>&lt;\/tr>'\n      $('#contact-table').append(updateString)\n   }\n}\n\nfunction loadAndDisplayContacts() {  \n   \n   \/\/Check if file exists\n   if(fs.existsSync(filename)) {\n      let data = fs.readFileSync(filename, 'utf8').split('\\n')\n      \n      data.forEach((contact, index) => {\n         let &#91; name, email ] = contact.split(',')\n         addEntry(name, email)\n      })\n   \n   } else {\n      console.log(\"File Doesn\\'t Exist. Creating new file.\")\n      fs.writeFile(filename, '', (err) => {\n         if(err)\n            console.log(err)\n      })\n   }\n}\n\nloadAndDisplayContacts()<\/code><\/pre>\n\n\n\n<p>Now run the application, using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js\n<\/code><\/pre>\n\n\n\n<p>For more&nbsp;<strong>fs module API calls<\/strong>, please refer to&nbsp;Node File System tutorial.<\/p>\n\n\n\n<p>Now we can handle files using Electron. We will look at how to call the save and open dialog boxes(native) for files in the dialogs chapter.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>File handling is a very important part of building a desktop application. Almost all desktop apps interact with files. We will create a form in our app that will take as input, a Name and an Email address. This form will be saved to a file and a list will be created that will show [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1187,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/710"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=710"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/710\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1188,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/710\/revisions\/1188"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1187"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=710"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=710"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=710"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 716,
        "date": "2020-05-13T06:26:51",
        "date_gmt": "2020-05-13T06:26:51",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=716"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "native-node-libraries",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/native-node-libraries\/",
        "title": {
            "rendered": "Native Node Libraries"
        },
        "content": {
            "rendered": "\n<p>We used a node module, fs, in the previous chapter. We will now look at some other node modules that we can use with Electron.<\/p>\n\n\n\n<h2>OS module<\/h2>\n\n\n\n<p>Using the OS module, we can get a lot of information about the system our application is running on. Following are a few methods that help while the app is being created. These methods help us customize the apps according to the OS that they are running on.<\/p>\n\n\n\n<table><tbody><tr><th>Sr.No<\/th><th>Function &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>os.userInfo([options])<\/strong>The&nbsp;<strong>os.userInfo()<\/strong>&nbsp;method returns information about the currently effective user. This information can be used to personalize the application for the user even without explicitly asking for information.<\/td><\/tr><tr><td>2<\/td><td><strong>os.platform()<\/strong>The&nbsp;<strong>os.platform()<\/strong>&nbsp;method returns a string identifying the operating system platform. This can be used to customize the app according to the user OS.<\/td><\/tr><tr><td>3<\/td><td><strong>os.homedir()<\/strong>The&nbsp;<strong>os.homedir()<\/strong>&nbsp;method returns the home directory of the current user as a string. Generally, configs of all users reside in the home directory of the user. So this can be used for the same purpose for our app.<\/td><\/tr><tr><td>4<\/td><td><strong>os.arch()<\/strong>The&nbsp;<strong>os.arch()<\/strong>&nbsp;method returns a string identifying the operating system CPU architecture. This can be used when running on exotic architectures to adapt your application for that system.<\/td><\/tr><tr><td>5<\/td><td><strong>os.EOL<\/strong>A string constant defining the operating system-specific end-ofline marker. This should be used whenever ending lines in files on the host OS.<\/td><\/tr><\/tbody><\/table>\n\n\n\n<p>Using the same main.js file and the following HTML file, we can print these properties on the screen \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>OS Module&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;script>\n         let os = require('os')\n         document.write('User Info: ' + JSON.stringify(os.userInfo()) + '&lt;br>' + \n            'Platform: ' + os.platform() + '&lt;br>' + \n            'User home directory: ' +  os.homedir() + '&lt;br>' + \n            'OS Architecture: ' + os.arch() + '&lt;br>')\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Now run the app using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js\n<\/code><\/pre>\n\n\n\n<p>The above command will generate the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>User Info: {\"uid\":1000,\"gid\":1000,\"username\":\"ayushgp\",\"homedir\":\"\/home\/ayushgp\",\n   \"shell\":\"\/usr\/bin\/zsh\"}\nPlatform: linux\nUser home directory: \/home\/ayushgp\nOS Architecture: x64<\/code><\/pre>\n\n\n\n<h2>Net Module<\/h2>\n\n\n\n<p>The net module is used for network related work in the app. We can create both servers and socket connections using this module. Generally, the use of wrapper module from npm is recommended over the use of the net module for networking related tasks.<\/p>\n\n\n\n<p>The following tables lists down the most useful methods from the module \u2212<\/p>\n\n\n\n<table><tbody><tr><th>Sr.No<\/th><th>Function &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>net.createServer([options][, connectionListener])<\/strong>Creates a new TCP server. The connectionListener argument is automatically set as a listener for the &#8216;connection&#8217; event.<\/td><\/tr><tr><td>2<\/td><td><strong>net.createConnection(options[, connectionListener])<\/strong>A factory method, which returns a new &#8216;net.Socket&#8217; and connects to the supplied address and port.<\/td><\/tr><tr><td>3<\/td><td><strong>net.Server.listen(port[, host][, backlog][, callback])<\/strong>Begin accepting connections on the specified port and host. If the host is omitted, the server will accept connections directed to any IPv4 address.<\/td><\/tr><tr><td>4<\/td><td><strong>net.Server.close([callback])<\/strong>Finally closed when all connections are ended and the server emits a &#8216;close&#8217; event.<\/td><\/tr><tr><td>5<\/td><td><strong>net.Socket.connect(port[, host][, connectListener])<\/strong>Opens the connection for a given socket. If port and host are given, then the socket will be opened as a TCP socket.<\/td><\/tr><\/tbody><\/table>\n\n\n\n<p>The net module comes with a few other methods too. To get a more comprehensive list, see&nbsp;this.<\/p>\n\n\n\n<p>Now, let us create an electron app that uses the net module to create connections to the server. We will need to create a new file,&nbsp;<strong>server.js<\/strong>&nbsp;\u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var net = require('net');\nvar server = net.createServer(function(connection) { \n   console.log('Client Connected');\n   \n   connection.on('end', function() {\n      console.log('client disconnected');\n   });\n   \n   connection.write('Hello World!\\r\\n');\n   connection.pipe(connection);\n});\n\nserver.listen(8080, function() { \n   console.log('Server running on http:\/\/localhost:8080');\n});<\/code><\/pre>\n\n\n\n<p>Using the same main.js file, replace the HTML file with the following \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>net Module&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;script>\n         var net = require('net');\n         var client = net.connect({port: 8080}, function() {\n            console.log('Connection established!');  \n         });\n         \n         client.on('data', function(data) {\n            document.write(data.toString());\n            client.end();\n         });\n         \n         client.on('end', function() { \n            console.log('Disconnected :(');\n         });\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Run the server using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node server.js<\/code><\/pre>\n\n\n\n<p>Run the application using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js<\/code><\/pre>\n\n\n\n<p>The above command will generate the following output \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/netModule.jpg\" alt=\"Net Module\"\/><\/figure>\n\n\n\n<p>Observe that we connect to the server automatically and automatically get disconnected too.<\/p>\n\n\n\n<p>We also have a few other node modules that we can be used directly on the front-end using Electron. The usage of these modules depends on the scenario you use them in.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We used a node module, fs, in the previous chapter. We will now look at some other node modules that we can use with Electron. OS module Using the OS module, we can get a lot of information about the system our application is running on. Following are a few methods that help while the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1189,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/716"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=716"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/716\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2263,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/716\/revisions\/2263"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1189"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=716"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=716"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=716"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 711,
        "date": "2020-05-13T06:32:47",
        "date_gmt": "2020-05-13T06:32:47",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=711"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "system-dialogs",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/system-dialogs\/",
        "title": {
            "rendered": "System Dialogs"
        },
        "content": {
            "rendered": "\n<p>It is very important for any app to be a user-friendly one. As a result you should not create dialog boxes using alert() calls. Electron provides a pretty good interface to accomplish the task of creating dialog boxes. Let us have a look at it.<\/p>\n\n\n\n<p>Electron provides a&nbsp;<strong>dialog<\/strong>&nbsp;module that we can use for displaying native system dialogs for opening and saving files, alerting, etc.<\/p>\n\n\n\n<p>Let us directly jump into an example and create an app to display simple text files.<\/p>\n\n\n\n<p>Create a new main.js file and enter the following code in it \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron') \nconst url = require('url') \nconst path = require('path') \nconst {ipcMain} = require('electron')  \n\nlet win  \n\nfunction createWindow() { \n   win = new BrowserWindow({width: 800, height: 600}) \n   win.loadURL(url.format ({ \n      pathname: path.join(__dirname, 'index.html'), \n      protocol: 'file:', \n      slashes: true \n   })) \n}  \n\nipcMain.on('openFile', (event, path) => { \n   const {dialog} = require('electron') \n   const fs = require('fs') \n   dialog.showOpenDialog(function (fileNames) { \n      \n      \/\/ fileNames is an array that contains all the selected \n      if(fileNames === undefined) { \n         console.log(\"No file selected\"); \n      \n      } else { \n         readFile(fileNames&#91;0]); \n      } \n   });\n   \n   function readFile(filepath) { \n      fs.readFile(filepath, 'utf-8', (err, data) => { \n         \n         if(err){ \n            alert(\"An error ocurred reading the file :\" + err.message) \n            return \n         } \n         \n         \/\/ handle the file content \n         event.sender.send('fileData', data) \n      }) \n   } \n})  \napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>This code will pop open the open dialog box whenever our main process receives a &#8216;openFile&#8217; message from a renderer process. This message will redirect the file content back to the renderer process. Now, we will have to print the content.<\/p>\n\n\n\n<p>Now, create a new&nbsp;<strong>index.html<\/strong>&nbsp;file with the following content \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html> \n   &lt;head> \n      &lt;meta charset = \"UTF-8\"> \n      &lt;title>File read using system dialogs&lt;\/title> \n   &lt;\/head> \n   \n   &lt;body> \n      &lt;script type = \"text\/javascript\"> \n         const {ipcRenderer} = require('electron') \n         ipcRenderer.send('openFile', () => { \n            console.log(\"Event sent.\"); \n         }) \n         \n         ipcRenderer.on('fileData', (event, data) => { \n            document.write(data) \n         }) \n      &lt;\/script> \n   &lt;\/body> \n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Now whenever we run our app, a native open dialog box will pop up as shown in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/opendialog.jpg\" alt=\"Open Dialog\"\/><\/figure>\n\n\n\n<p>Once we select a file to display, its contents will be displayed on the app window. This was just one of the four dialogs that Electron provides. They all have similar usage though. Once you learn how to do it using&nbsp;<strong>showOpenDialog<\/strong>, then you can use any of the other dialogs.<\/p>\n\n\n\n<p>The dialogs having the same functionality are \u2212<\/p>\n\n\n\n<ul><li>showSaveDialog([browserWindow, ]options[, callback])<\/li><li>showMessageDialog([browserWindow, ]options[, callback])<\/li><li>showErrorDialog(title, content)<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>It is very important for any app to be a user-friendly one. As a result you should not create dialog boxes using alert() calls. Electron provides a pretty good interface to accomplish the task of creating dialog boxes. Let us have a look at it. Electron provides a&nbsp;dialog&nbsp;module that we can use for displaying native [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1192,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/711"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=711"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/711\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1964,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/711\/revisions\/1964"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1192"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=711"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=711"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=711"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 712,
        "date": "2020-05-13T06:34:07",
        "date_gmt": "2020-05-13T06:34:07",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=712"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "menus",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/menus\/",
        "title": {
            "rendered": "Menus"
        },
        "content": {
            "rendered": "\n<p>The desktop apps come with two types of menus \u2013 the&nbsp;<strong>application menu<\/strong>(on the top bar) and a&nbsp;<strong>context menu<\/strong>(right-click menu). We will learn how to create both of these in this chapter.<\/p>\n\n\n\n<p>We will be using two modules \u2013 the\u00a0<em><strong>Menu<\/strong><\/em>\u00a0and the\u00a0<em><strong>MenuItem<\/strong><\/em>\u00a0modules. Note that the\u00a0<em>Menu<\/em>\u00a0and the\u00a0<em>MenuItem<\/em>\u00a0modules are only available in the main process. For using these modules in the renderer process, you need the\u00a0<em>remote<\/em>\u00a0module. We will come across this when we create a context menu.<\/p>\n\n\n\n<p>Now, let us create a new&nbsp;<strong>main.js<\/strong>&nbsp;file for the main process \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow, Menu, MenuItem} = require('electron')\nconst url = require('url')\nconst path = require('path')\n\nlet win\n\nfunction createWindow() {\n   win = new BrowserWindow({width: 800, height: 600})\n   win.loadURL(url.format ({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n   }))\n}\n\nconst template = &#91;\n   {\n      label: 'Edit',\n      submenu: &#91;\n         {\n            role: 'undo'\n         },\n         {\n            role: 'redo'\n         },\n         {\n            type: 'separator'\n         },\n         {\n            role: 'cut'\n         },\n         {\n            role: 'copy'\n         },\n         {\n            role: 'paste'\n         }\n      ]\n   },\n   \n   {\n      label: 'View',\n      submenu: &#91;\n         {\n            role: 'reload'\n         },\n         {\n            role: 'toggledevtools'\n         },\n         {\n            type: 'separator'\n         },\n         {\n            role: 'resetzoom'\n         },\n         {\n            role: 'zoomin'\n         },\n         {\n            role: 'zoomout'\n         },\n         {\n            type: 'separator'\n         },\n         {\n            role: 'togglefullscreen'\n         }\n      ]\n   },\n   \n   {\n      role: 'window',\n      submenu: &#91;\n         {\n            role: 'minimize'\n         },\n         {\n            role: 'close'\n         }\n      ]\n   },\n   \n   {\n      role: 'help',\n      submenu: &#91;\n         {\n            label: 'Learn More'\n         }\n      ]\n   }\n]\n\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu)\napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>We are building a menu from a template here. This means that we provide the menu as a JSON to the function and it will take care of the rest. Now we have to set this menu as the Application menu.<\/p>\n\n\n\n<p>Now create an empty HTML file called index.html and run this application using \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js\n<\/code><\/pre>\n\n\n\n<p>On the normal position of application menus, you will see a menu based on the above template.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/menu.jpg\" alt=\"Application Menus\"\/><\/figure>\n\n\n\n<p>We created this menu from the main process. Let us now create a context menu for our app. We will do this in our HTML file \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>Menus&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;script type = \"text\/javascript\">\n         const {remote} = require('electron')\n         const {Menu, MenuItem} = remote\n\n         const menu = new Menu()\n\n         \/\/ Build menu one item at a time, unlike\n         menu.append(new MenuItem ({\n            label: 'MenuItem1',\n            click() { \n               console.log('item 1 clicked')\n            }\n         }))\n         \n         menu.append(new MenuItem({type: 'separator'}))\n         menu.append(new MenuItem({label: 'MenuItem2', type: 'checkbox', checked: true}))\n         menu.append(new MenuItem ({\n            label: 'MenuItem3',\n            click() {\n               console.log('item 3 clicked')\n            }\n         }))\n\n         \/\/ Prevent default action of right click in chromium. Replace with our menu.\n         window.addEventListener('contextmenu', (e) => {\n            e.preventDefault()\n            menu.popup(remote.getCurrentWindow())\n         }, false)\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>We imported the Menu and MenuItem modules using the remote module; then, we created a menu and appended our menuitems to it one by one. Further, we prevented the default action of right-click in chromium and replaced it with our menu.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/contextmenu.jpg\" alt=\"Context Menu\"\/><\/figure>\n\n\n\n<p>The creation of menus in the Electron is a very simple task. Now you can attach your event handlers to these items and handle the events according to your needs.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The desktop apps come with two types of menus \u2013 the&nbsp;application menu(on the top bar) and a&nbsp;context menu(right-click menu). We will learn how to create both of these in this chapter. We will be using two modules \u2013 the\u00a0Menu\u00a0and the\u00a0MenuItem\u00a0modules. Note that the\u00a0Menu\u00a0and the\u00a0MenuItem\u00a0modules are only available in the main process. For using these modules [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1194,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/712"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=712"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/712\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1196,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/712\/revisions\/1196"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1194"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=712"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=712"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=712"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 714,
        "date": "2020-05-13T06:35:15",
        "date_gmt": "2020-05-13T06:35:15",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=714"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "system-tray",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/system-tray\/",
        "title": {
            "rendered": "System Tray"
        },
        "content": {
            "rendered": "\n<p>System tray is a menu outside of your application window. On MacOS and Ubuntu, it is located on the top right corner of your screen. On Windows it is on the bottom right corner. We can create menus for our application in system trays using Electron.<\/p>\n\n\n\n<p>Create a new&nbsp;<strong>main.js<\/strong>&nbsp;file and add the following code to it. Have a png file ready to use for the system tray icon.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron')\nconst url = require('url')\nconst path = require('path')\n\nlet win\n\nfunction createWindow() {\n   win = new BrowserWindow({width: 800, height: 600})\n   win.loadURL(url.format ({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n   }))\n}\n\napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>After having set up a basic browser window, we will create a new&nbsp;<strong>index.html<\/strong>&nbsp;file with the following content \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>Menus&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;script type = \"text\/javascript\">\n         const {remote} = require('electron')\n         const {Tray, Menu} = remote\n         const path = require('path')\n\n         let trayIcon = new Tray(path.join('','\/home\/ayushgp\/Desktop\/images.png'))\n\n         const trayMenuTemplate = &#91;\n            {\n               label: 'Empty Application',\n               enabled: false\n            },\n            \n            {\n               label: 'Settings',\n               click: function () {\n                  console.log(\"Clicked on settings\")\n               }\n            },\n            \n            {\n               label: 'Help',\n               click: function () {\n                  console.log(\"Clicked on Help\")\n               }\n            }\n         ]\n         \n         let trayMenu = Menu.buildFromTemplate(trayMenuTemplate)\n         trayIcon.setContextMenu(trayMenu)\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>We created the tray using the Tray sub-module. We then created a menu using a template and further attached the menu to our tray object.<\/p>\n\n\n\n<p>Run the application using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js\n<\/code><\/pre>\n\n\n\n<p>When you run the above command, check your system tray for the icon you used. I used a smiley face for my application. The above command will generate the following output \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/tray.jpg\" alt=\"tray\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>System tray is a menu outside of your application window. On MacOS and Ubuntu, it is located on the top right corner of your screen. On Windows it is on the bottom right corner. We can create menus for our application in system trays using Electron. Create a new&nbsp;main.js&nbsp;file and add the following code to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1197,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/714"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=714"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/714\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1965,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/714\/revisions\/1965"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1197"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=714"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=714"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=714"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 715,
        "date": "2020-05-13T06:37:17",
        "date_gmt": "2020-05-13T06:37:17",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=715"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "notifications",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/notifications\/",
        "title": {
            "rendered": "Notifications"
        },
        "content": {
            "rendered": "\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"626\" height=\"416\" src=\"https:\/\/angular.foobrdigital.com\/wp-content\/uploads\/2020\/05\/illustration-notification-icon-blue-background_53876-8400.jpg\" alt=\"\" class=\"wp-image-1204\" srcset=\"https:\/\/angular.foobrdigital.com\/wp-content\/uploads\/2020\/05\/illustration-notification-icon-blue-background_53876-8400.jpg 626w, https:\/\/angular.foobrdigital.com\/wp-content\/uploads\/2020\/05\/illustration-notification-icon-blue-background_53876-8400-300x199.jpg 300w\" sizes=\"(max-width: 626px) 100vw, 626px\" \/><\/figure>\n\n\n\n<p>Electron provides native notifications API only for MacOS. So we are not going to use that, instead, we&#8217;ll be using an npm module called&nbsp;node-notifier. It allows us to notify users on Windows, macOS, and Linux.<\/p>\n\n\n\n<p>Install the node-notifier module in your app folder using the following command in that folder \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save node-notifier<\/code><\/pre>\n\n\n\n<p>Let us now create an app that has a button that will generate a notification every time we click on this button.<\/p>\n\n\n\n<p>Create a new&nbsp;<strong>main.js<\/strong>&nbsp;file and enter the following code in it \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron')\nconst url = require('url')\nconst path = require('path')\n\nlet win\n\nfunction createWindow() {\n   win = new BrowserWindow({width: 800, height: 600})\n   win.loadURL(url.format ({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n   }))\n}\n\napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>Let us now create our webpage and script that will trigger the notification. Create a new&nbsp;<strong>index.html<\/strong>&nbsp;file with the following code \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>Menus&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;button type = \"button\" id = \"notify\" name = \"button\">\n         Click here to trigger a notification!&lt;\/button>\n      &lt;script type = \"text\/javascript\">\n         const notifier = require('node-notifier')\n         const path = require('path');\n         \n         document.getElementById('notify').onclick = (event) => {\n            notifier.notify ({\n               title: 'My awesome title',\n               message: 'Hello from electron, Mr. User!',\n               icon: path.join('','\/home\/ayushgp\/Desktop\/images.png'),  \/\/ Absolute path \n                  (doesn't work on balloons)\n               sound: true,  \/\/ Only Notification Center or Windows Toasters\n               wait: true    \/\/ Wait with callback, until user action is taken \n               against notification\n            \n            }, function (err, response) {\n               \/\/ Response is response from notification\n            });\n\n            notifier.on('click', function (notifierObject, options) {\n               console.log(\"You clicked on the notification\")\n            });\n\n            notifier.on('timeout', function (notifierObject, options) {\n               console.log(\"Notification timed out!\")\n            });\n         }\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>The\u00a0<strong>notify<\/strong>\u00a0method allows us to pass it an\u00a0<strong>object with<\/strong>\u00a0information like the title, message, thumbnail, etc. which help us customize the notification. We can also set some event listeners on the notification.<\/p>\n\n\n\n<p>Now, run the app using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js\n<\/code><\/pre>\n\n\n\n<p>When you click on the button that we created, you will see a native notification from your operating system as shown in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/notification.jpg\" alt=\"Notification\"\/><\/figure>\n\n\n\n<p>We have also handled the events wherein, the user clicks the notification or the notification times out. These methods help us make the app more interactive if its running in the background.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Electron provides native notifications API only for MacOS. So we are not going to use that, instead, we&#8217;ll be using an npm module called&nbsp;node-notifier. It allows us to notify users on Windows, macOS, and Linux. Install the node-notifier module in your app folder using the following command in that folder \u2212 Let us now create [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1202,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/715"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=715"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/715\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1966,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/715\/revisions\/1966"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1202"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=715"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=715"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=715"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 698,
        "date": "2020-05-13T06:38:34",
        "date_gmt": "2020-05-13T06:38:34",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=698"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "webview",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/webview\/",
        "title": {
            "rendered": "Webview"
        },
        "content": {
            "rendered": "\n<p>The webview tag is used to embed the &#8216;guest&#8217; content like web pages in your Electron app. This content is contained within the webview container. An embedded page within your app controls how this content will be displayed.<\/p>\n\n\n\n<p>The webview runs in a separate process than your app. To ensure security from malicious content, the webview doesn&#8217;t have same permissions as your web page. This keeps your app safe from the embedded content. All interactions between your app and the embedded page will be asynchronous.<\/p>\n\n\n\n<p>Let us consider an example to understand the embedding of an external webpage in our Electron app. We will embed the codemeals website in our app on the right side. Create a new&nbsp;<strong>main.js<\/strong>&nbsp;file with the following content \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron')\nconst url = require('url')\nconst path = require('path')\n\nlet win\n\nfunction createWindow() {\n   win = new BrowserWindow({width: 800, height: 600})\n   win.loadURL(url.format ({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n   }))\n}\n\napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>Now that we have set up our main process, let us create the HTML file that will embed the codemeals website. Create a file called index.html with the following content \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>Menus&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;div>\n         &lt;div>\n            &lt;h2>We have the website embedded below!&lt;\/h2>\n         &lt;\/div>\n         &lt;webview id = \"foo\" src = \"https:\/\/www.tutorialspoint.com\/\" style = \n            \"width:400px; height:480px;\">\n            &lt;div class = \"indicator\">&lt;\/div>\n         &lt;\/webview>\n      &lt;\/div>\n      \n      &lt;script type = \"text\/javascript\">\n         \/\/ Event handlers for loading events.\n         \/\/ Use these to handle loading screens, transitions, etc\n         onload = () => {\n            const webview = document.getElementById('foo')\n            const indicator = document.querySelector('.indicator')\n\n            const loadstart = () => {\n               indicator.innerText = 'loading...'\n            }\n\n            const loadstop = () => {\n               indicator.innerText = ''\n            }\n\n            webview.addEventListener('did-start-loading', loadstart)\n            webview.addEventListener('did-stop-loading', loadstop)\n         }\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Run the app using the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron .\/main.js<\/code><\/pre>\n\n\n\n<p>The above command will generate the output \u2212<\/p>\n\n\n\n<p>The webview tag can be used for other resources as well. The webview element has a list of events that it emits listed on the official docs. You can use these events to improve the functionality depending on the things that take place in the webview.<\/p>\n\n\n\n<p>Whenever you are embedding scripts or other resources from the Internet, it is advisable to use webview. This is recommended as it comes with great security benefits and does not hinder normal behaviour.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The webview tag is used to embed the &#8216;guest&#8217; content like web pages in your Electron app. This content is contained within the webview container. An embedded page within your app controls how this content will be displayed. The webview runs in a separate process than your app. To ensure security from malicious content, the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1324,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/698"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=698"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/698\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2264,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/698\/revisions\/2264"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1324"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=698"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=698"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=698"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 699,
        "date": "2020-05-13T06:40:01",
        "date_gmt": "2020-05-13T06:40:01",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=699"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "audio-and-video-capturing",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/audio-and-video-capturing\/",
        "title": {
            "rendered": "Audio and Video Capturing"
        },
        "content": {
            "rendered": "\n<p>Audio and video capturing are important characteristics if you are building apps for screen sharing, voice memos, etc. They are also useful if you require an application to capture the profile picture.<\/p>\n\n\n\n<p>We will be using the&nbsp;<em>getUserMedia<\/em>&nbsp;HTML5 API for capturing audio and video streams with Electron. Let us first set up our main process in the&nbsp;<strong>main.js<\/strong>&nbsp;file as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron')\nconst url = require('url')\nconst path = require('path')\n\nlet win\n\n\/\/ Set the path where recordings will be saved\napp.setPath(\"userData\", __dirname + \"\/saved_recordings\")\n\nfunction createWindow() {\n   win = new BrowserWindow({width: 800, height: 600})\n   win.loadURL(url.format({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n   }))\n}\n\napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>Now that we have set up our main process, let us create the HTML file that will be capturing this content. Create a file called&nbsp;<strong>index.html<\/strong>&nbsp;with the following content \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>Audio and Video&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;video autoplay>&lt;\/video>\n      &lt;script type = \"text\/javascript\">\n         function errorCallback(e) {\n            console.log('Error', e)\n         }\n\n         navigator.getUserMedia({video: true, audio: true}, (localMediaStream) => {\n            var video = document.querySelector('video')\n            video.src = window.URL.createObjectURL(localMediaStream)\n            video.onloadedmetadata = (e) => {\n               \/\/ Ready to go. Do some stuff.\n            };\n         }, errorCallback)\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>The above program will generate the following output \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/audiovideo.jpg\" alt=\"Audio and Video Stream\"\/><\/figure>\n\n\n\n<p>You now have the stream from both your webcam and your microphone. You can send this stream over the network or save this in a format you like.<\/p>\n\n\n\n<p>Have a look at the&nbsp;MDN Documentation&nbsp;for capturing images to get the images from your webcam and store them. This was done using the HTML5&nbsp;<em>getUserMedia<\/em>&nbsp;API. You can also capture the user desktop using the&nbsp;<em>desktopCapturer<\/em>&nbsp;module that comes with Electron. Let us now see an example of how to get the screen stream.<\/p>\n\n\n\n<p>Use the same main.js file as above and edit the index.html file to have the following content \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>desktopCapturer.getSources({types: &#91;'window', 'screen']}, (error, sources) => {\n   if (error) throw error\n   for (let i = 0; i &lt; sources.length; ++i) {\n      if (sources&#91;i].name === 'Your Window Name here!') {\n         navigator.webkitGetUserMedia({\n            audio: false,\n            video: {\n               mandatory: {\n                  chromeMediaSource: 'desktop',\n                  chromeMediaSourceId: sources&#91;i].id,\n                  minWidth: 1280,\n                  maxWidth: 1280,\n                  minHeight: 720,\n                  maxHeight: 720\n               }\n            }\n         }, handleStream, handleError)\n         return\n      }\n   }\n})\n\nfunction handleStream (stream) {\n   document.querySelector('video').src = URL.createObjectURL(stream)\n}\n\nfunction handleError (e) {\n   console.log(e)\n}<\/code><\/pre>\n\n\n\n<p>We have used the&nbsp;<em>desktopCapturer<\/em>&nbsp;module to get the information about each open window. Now you can capture the events of a specific application or of the entire screen depending on the name you pass to the above&nbsp;<strong>if statement<\/strong>. This will stream only that which is happening on that screen to your app.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/desktopcapture.jpg\" alt=\"Desktop capturer\"\/><\/figure>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Audio and video capturing are important characteristics if you are building apps for screen sharing, voice memos, etc. They are also useful if you require an application to capture the profile picture. We will be using the&nbsp;getUserMedia&nbsp;HTML5 API for capturing audio and video streams with Electron. Let us first set up our main process in [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1316,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/699"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=699"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/699\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1322,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/699\/revisions\/1322"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1316"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=699"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=699"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=699"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 764,
        "date": "2020-05-13T06:42:30",
        "date_gmt": "2020-05-13T06:42:30",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=764"
        },
        "modified": "2020-12-25T19:04:31",
        "modified_gmt": "2020-12-25T19:04:31",
        "slug": "defining-shortcuts",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/defining-shortcuts\/",
        "title": {
            "rendered": "Defining Shortcuts"
        },
        "content": {
            "rendered": "\n<p>We typically have memorized certain shortcuts for all the apps that we use on our PC daily. To make your applications feel intuitive and easily accessible to the user, you must allow the user to use shortcuts.<\/p>\n\n\n\n<p>We will use the globalShortcut module to define shortcuts in our app. Note that&nbsp;<strong>Accelerators<\/strong>&nbsp;are Strings that can contain multiple modifiers and key codes, combined by the + character. These accelerators are used to define keyboard shortcuts throughout our application.<\/p>\n\n\n\n<p>Let us consider an example and create a shortcut. For this, we will follow the dialog boxes example where we used the open dialog box for opening files. We will register a\u00a0<strong>Command Or Control + O<\/strong>\u00a0shortcut to bring up the dialog box.<\/p>\n\n\n\n<p>Our&nbsp;<strong>main.js<\/strong>&nbsp;code will remain the same as before. So create a new&nbsp;<strong>main.js<\/strong>&nbsp;file and enter the following code in it \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const {app, BrowserWindow} = require('electron')\nconst url = require('url')\nconst path = require('path')\nconst {ipcMain} = require('electron')\n\nlet win\n\nfunction createWindow() {\n   win = new BrowserWindow({width: 800, height: 600})\n   win.loadURL(url.format ({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n   }))\n}\n\nipcMain.on('openFile', (event, path) => {\n   const {dialog} = require('electron')\n   const fs = require('fs')\n   dialog.showOpenDialog(function (fileNames) {\n         \n      \/\/ fileNames is an array that contains all the selected\n      if(fileNames === undefined)\n         console.log(\"No file selected\")\n      else\n         readFile(fileNames&#91;0])\n   })\n\n   function readFile(filepath){\n      fs.readFile(filepath, 'utf-8', (err, data) => {\n         if(err){\n            alert(\"An error ocurred reading the file :\" + err.message)\n            return\n         }\n         \n         \/\/ handle the file content\n         event.sender.send('fileData', data)\n      })\n   }\n})\n\napp.on('ready', createWindow)<\/code><\/pre>\n\n\n\n<p>This code will pop open the open dialog box whenever our main process receives a &#8216;openFile&#8217; message from a renderer process. Earlier this dialog box popped up whenever the app was run. Let us now limit it to open only when we press\u00a0<strong>Command Or Control+O<\/strong>.<\/p>\n\n\n\n<p>Now create a new&nbsp;<strong>index.html<\/strong>&nbsp;file with the following content \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>File read using system dialogs&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;p>Press CTRL\/CMD + O to open a file. &lt;\/p>\n      &lt;script type = \"text\/javascript\">\n         const {ipcRenderer, remote} = require('electron')\n         const {globalShortcut} = remote\n         globalShortcut.register('CommandOrControl+O', () => {\n            ipcRenderer.send('openFile', () => {\n               console.log(\"Event sent.\");\n            })\n            \n            ipcRenderer.on('fileData', (event, data) => {\n               document.write(data)\n            })\n         })\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>We registered a new shortcut and passed a callback that will be executed whenever we press this shortcut. We can register shortcuts as and when we do not require them.<\/p>\n\n\n\n<p>Now once the app is opened, we will get the message to open the file using the shortcut we just defined.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/opendialog.jpg\" alt=\"Open dialog\"\/><\/figure>\n\n\n\n<p>These shortcuts can be made customizable by allowing the user to choose his own shortcuts for defined actions.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We typically have memorized certain shortcuts for all the apps that we use on our PC daily. To make your applications feel intuitive and easily accessible to the user, you must allow the user to use shortcuts. We will use the globalShortcut module to define shortcuts in our app. Note that&nbsp;Accelerators&nbsp;are Strings that can contain [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1314,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/764"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=764"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/764\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1969,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/764\/revisions\/1969"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1314"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=764"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=764"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=764"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 765,
        "date": "2020-05-13T06:43:14",
        "date_gmt": "2020-05-13T06:43:14",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=765"
        },
        "modified": "2020-12-25T19:04:30",
        "modified_gmt": "2020-12-25T19:04:30",
        "slug": "environment-variables",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/environment-variables\/",
        "title": {
            "rendered": "Environment Variables"
        },
        "content": {
            "rendered": "\n<p>Environment Variables control application configuration and behavior without changing code. Certain Electron behaviors are controlled by environment variables because they are initialized earlier than the command line flags and the app\u2019s code.<\/p>\n\n\n\n<p>There are two kinds of environment variables encoded in electron \u2013&nbsp;<strong>Production variables<\/strong>&nbsp;and&nbsp;<strong>Development variables.<\/strong><\/p>\n\n\n\n<h2>Production Variables<\/h2>\n\n\n\n<p>The following environment variables are intended for use at runtime in packaged Electron applications.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>Variable &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>GOOGLE_API_KEY<\/strong> Electron includes a hard coded API key for making requests to Google\u2019s geocoding web-service. Because this API key is included in every version of Electron, it often exceeds its usage quota.To work around this, you can supply your own Google API key in the environment. Place the following code in your main process file, before opening any browser windows that will make geocoding requests \u2212process.env.GOOGLE_API_KEY = &#8216;YOUR_KEY_HERE&#8217;<\/td><\/tr><tr><td>2<\/td><td><strong>ELECTRON_RUN_AS_NODE<\/strong> Starts the process as a normal Node.js process.<\/td><\/tr><tr><td>3<\/td><td><strong>ELECTRON_FORCE_WINDOW_MENU_BAR (Linux Only)<\/strong> Do not use the global menu bar on Linux.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Development Variables<\/h2>\n\n\n\n<p>The following environment variables are intended primarily for development and debugging purposes.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>Variable &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>ELECTRON_ENABLE_LOGGING<\/strong> Prints Chrome\u2019s internal logging to the console.<\/td><\/tr><tr><td>2<\/td><td><strong>ELECTRON_ENABLE_STACK_DUMPING<\/strong> Prints the stack trace to the console when Electron crashes.<\/td><\/tr><tr><td>3<\/td><td><strong>ELECTRON_DEFAULT_ERROR_MODE<\/strong> Shows the Windows\u2019s crash dialog when Electron crashes.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>To set any of these environment variables as true, set it in your console. For example, if you want to enable logging, then use the following commands \u2212<\/p>\n\n\n\n<h3>For Windows<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>> set ELECTRON_ENABLE_LOGGING=true\n<\/code><\/pre>\n\n\n\n<h3>For Linux<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$ export ELECTRON_ENABLE_LOGGING=true<\/code><\/pre>\n\n\n\n<p>Note that you will need to set these environment variables every time you restart your computer. If you want to avoid doing so, add these lines to your&nbsp;<strong>.bashrc<\/strong>&nbsp;files.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Environment Variables control application configuration and behavior without changing code. Certain Electron behaviors are controlled by environment variables because they are initialized earlier than the command line flags and the app\u2019s code. There are two kinds of environment variables encoded in electron \u2013&nbsp;Production variables&nbsp;and&nbsp;Development variables. Production Variables The following environment variables are intended for use [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1323,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/765"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=765"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/765\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2118,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/765\/revisions\/2118"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1323"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=765"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=765"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=765"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 766,
        "date": "2020-05-13T06:44:10",
        "date_gmt": "2020-05-13T06:44:10",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=766"
        },
        "modified": "2020-12-25T19:04:30",
        "modified_gmt": "2020-12-25T19:04:30",
        "slug": "debugging-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/debugging-2\/",
        "title": {
            "rendered": "Debugging"
        },
        "content": {
            "rendered": "\n<p>We have two processes that run our application \u2013 the main process and the renderer process.<\/p>\n\n\n\n<p>Since the renderer process is the one being executed in our browser window, we can use the Chrome Devtools to debug it. To open DevTools, use the shortcut &#8220;Ctrl+Shift+I&#8221; or the &lt;F12&gt; key. You can check out how to use devtools&nbsp;here.<\/p>\n\n\n\n<p>When you open the DevTools, your app will look like as shown in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/devtools.jpg\" alt=\"DevTools\"\/><\/figure>\n\n\n\n<h2>Debugging the Main Process<\/h2>\n\n\n\n<p>The DevTools in an Electron browser window can only debug JavaScript that is executed in that window (i.e., the web pages). To debug JavaScript that is executed in the main process you will need to use an external debugger and launch Electron with the&nbsp;<em>&#8211;debug<\/em>&nbsp;or the&nbsp;<em>&#8211;debug-brk<\/em>&nbsp;switch.<\/p>\n\n\n\n<p>Electron will listen for the V8 debugger protocol messages on the specified port; an external debugger will need to connect on this port. The default port is 5858.<\/p>\n\n\n\n<p>Run your app using the following \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ electron --debug = 5858 .\/main.js\n<\/code><\/pre>\n\n\n\n<p>Now you will need a debugger that supports the V8 debugger protocol. You can use VSCode or node-inspector for this purpose. For example, let us follow these steps and set up VSCode for this purpose. Follow these steps to set it up \u2212<\/p>\n\n\n\n<p>Download and install&nbsp;VSCode. Open your Electron project in VSCode.<\/p>\n\n\n\n<p>Add a file&nbsp;<strong>.vscode\/launch.json<\/strong>&nbsp;with the following configuration \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"version\": \"1.0.0\",\n   \"configurations\": &#91;\n      {\n         \"name\": \"Debug Main Process\",\n         \"type\": \"node\",\n         \"request\": \"launch\",\n         \"cwd\": \"${workspaceRoot}\",\n         \"runtimeExecutable\": \"${workspaceRoot}\/node_modules\/.bin\/electron\",\n         \"program\": \"${workspaceRoot}\/main.js\"\n      }\n   ]\n}<\/code><\/pre>\n\n\n\n<p><strong>Note<\/strong>&nbsp;\u2212 For Windows, use&nbsp;<strong>&#8220;${workspaceRoot}\/node_modules\/.bin\/electron.cmd&#8221;<\/strong>&nbsp;for&nbsp;<strong>runtimeExecutable<\/strong>.<\/p>\n\n\n\n<p>Set some breakpoints in&nbsp;<strong>main.js<\/strong>, and start debugging in the Debug View. When you hit the breakpoints, the screen will look something like this \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/electron\/images\/debug.jpg\" alt=\"Debugger\"\/><\/figure>\n\n\n\n<p>The VSCode debugger is very powerful and will help you rectify errors quickly. You also have other options like&nbsp;<strong>node-inspector<\/strong>&nbsp;for debugging electron apps.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We have two processes that run our application \u2013 the main process and the renderer process. Since the renderer process is the one being executed in our browser window, we can use the Chrome Devtools to debug it. To open DevTools, use the shortcut &#8220;Ctrl+Shift+I&#8221; or the &lt;F12&gt; key. You can check out how to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1317,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/766"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=766"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/766\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1320,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/766\/revisions\/1320"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1317"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=766"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=766"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=766"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 700,
        "date": "2020-05-13T06:45:02",
        "date_gmt": "2020-05-13T06:45:02",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=700"
        },
        "modified": "2020-12-25T19:04:30",
        "modified_gmt": "2020-12-25T19:04:30",
        "slug": "packaging-apps",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/packaging-apps\/",
        "title": {
            "rendered": "Packaging Apps"
        },
        "content": {
            "rendered": "\n<p>Packaging and distributing apps is an integral part of the development process of a desktop application. Since Electron is a cross-platform desktop application development framework, packaging and distribution of apps for all the platforms should also be a seamless experience.<\/p>\n\n\n\n<p>The electron community has created a project,&nbsp;electron-packager&nbsp;that takes care of the same for us. It allows us to package and distribute our Electron app with OS-specific bundles (.app, .exe etc) via JS or CLI.<\/p>\n\n\n\n<h2>Supported Platforms<\/h2>\n\n\n\n<p>Electron Packager runs on the following host platforms \u2212<\/p>\n\n\n\n<ul><li>Windows (32\/64 bit)<\/li><li>OS X<\/li><li>Linux (x86\/x86_64)<\/li><\/ul>\n\n\n\n<p>It generates executables\/bundles for the following target platforms \u2212<\/p>\n\n\n\n<ul><li>Windows (also known as win32, for both 32\/64 bit)<\/li><li>OS X (also known as Darwin) \/ Mac App Store (also known as mas)<\/li><li>Linux (for x86, x86_64, and armv7l architectures)<\/li><\/ul>\n\n\n\n<h2>Installation<\/h2>\n\n\n\n<p>Install the electron packager using \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># for use in npm scripts\n$ npm install electron-packager --save-dev\n\n# for use from cli\n$ npm install electron-packager -g<\/code><\/pre>\n\n\n\n<h2>Packaging Apps<\/h2>\n\n\n\n<p>In this section, we will see how to run the packager from the command line. The basic form of the command is \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>electron-packager &lt;sourcedir> &lt;appname> --platform=&lt;platform> --arch=&lt;arch> &#91;optional flags...]<\/code><\/pre>\n\n\n\n<p>This will \u2212<\/p>\n\n\n\n<ul><li>Find or download the correct release of Electron.<\/li><li>Use that version of Electron to create a app in &lt;output-folder&gt;\/&lt;appname&gt;-&lt;platform&gt;-&lt;arch&gt;.<\/li><\/ul>\n\n\n\n<p><strong>&#8211;platform<\/strong>&nbsp;and&nbsp;<strong>&#8211;arch<\/strong>&nbsp;can be omitted, in two cases. If you specify&nbsp;<strong>&#8211;all<\/strong>&nbsp;instead, bundles for all valid combinations of target platforms\/architectures will be created. Otherwise, a single bundle for the host platform\/architecture will be created.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Packaging and distributing apps is an integral part of the development process of a desktop application. Since Electron is a cross-platform desktop application development framework, packaging and distribution of apps for all the platforms should also be a seamless experience. The electron community has created a project,&nbsp;electron-packager&nbsp;that takes care of the same for us. It [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1318,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            16,
            77,
            115,
            173
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/700"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=700"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/700\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1971,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/700\/revisions\/1971"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1318"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=700"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=700"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=700"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]