[
    {
        "id": 1724,
        "date": "2021-03-15T09:22:23",
        "date_gmt": "2021-03-15T09:22:23",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1724"
        },
        "modified": "2021-03-15T09:22:23",
        "modified_gmt": "2021-03-15T09:22:23",
        "slug": "overview-16",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-16\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>One of the key components of Spring Framework is the&nbsp;<strong>Aspect Oriented Programming (AOP)<\/strong>&nbsp;framework. Aspect Oriented Programming entails breaking down program logic into distinct parts called&nbsp;<strong>so-called concerns<\/strong>. The functions that span multiple points of an application are called cross-cutting concerns. These&nbsp;<strong>cross-cutting concerns<\/strong>&nbsp;are conceptually separate from the application&#8217;s business logic. There are various common good examples of aspects such as logging, auditing, declarative transactions, security, caching, etc.<\/p>\n\n\n\n<p>The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. Dependency Injection helps you decouple your application objects from each other, while AOP helps you decouple cross-cutting concerns from the objects that they affect. AOP is like triggers in programming languages such as Perl, .NET, Java, and others.<\/p>\n\n\n\n<p>Spring AOP module lets interceptors intercept an application. For example, when a method is executed, you can add extra functionality before or after the method execution.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>One of the key components of Spring Framework is the&nbsp;Aspect Oriented Programming (AOP)&nbsp;framework. Aspect Oriented Programming entails breaking down program logic into distinct parts called&nbsp;so-called concerns. The functions that span multiple points of an application are called cross-cutting concerns. These&nbsp;cross-cutting concerns&nbsp;are conceptually separate from the application&#8217;s business logic. There are various common good examples of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1724"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1724"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1724\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1725,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1724\/revisions\/1725"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1724"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1724"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1724"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1726,
        "date": "2021-03-15T09:25:28",
        "date_gmt": "2021-03-15T09:25:28",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1726"
        },
        "modified": "2021-03-15T09:25:28",
        "modified_gmt": "2021-03-15T09:25:28",
        "slug": "environment-setup-12",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-12\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<p>This chapter takes you through the process of setting up Spring AOP on Windows and Linux based systems. Spring AOP can be easily installed and integrated with your current Java environment and MAVEN by following a few simple steps without any complex setup procedures. User administration is required while installation.<\/p>\n\n\n\n<h2>System Requirements<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>JDK<\/td><td>Java SE 2 JDK 1.5 or above<\/td><\/tr><tr><td>Memory<\/td><td>1 GB RAM (recommended)<\/td><\/tr><tr><td>Disk Space<\/td><td>No minimum requirement<\/td><\/tr><tr><td>Operating System Version<\/td><td>Windows XP or above, Linux<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let us now look at the steps to install Spring AOP.<\/p>\n\n\n\n<h2>Step 1: Verify your Java Installation<\/h2>\n\n\n\n<p>First of all, you need to have Java Software Development Kit (SDK) installed on your system. To verify this, execute any of the following two commands depending on the platform you are working on.<\/p>\n\n\n\n<p>If the Java installation has been done properly, then it will display the current version and specification of your Java installation. A sample output is given in the following table.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Platform<\/th><th>Command<\/th><th>Sample Output<\/th><\/tr><tr><td>Windows<\/td><td>Open command console and type \u2212<strong>\\&gt;java -version<\/strong><\/td><td>Java version &#8220;1.7.0_60&#8243;Java (TM) SE Run Time Environment (build 1.7.0_60-b19)Java Hotspot (TM) 64-bit Server VM (build 24.60-b09,mixed mode)<\/td><\/tr><tr><td>Linux<\/td><td>Open command terminal and type \u2212<strong>$java -version<\/strong><\/td><td>java version &#8220;1.7.0_25&#8243;Open JDK Runtime Environment (rhel-2.3.10.4.el6_4-x86_64)Open JDK 64-Bit Server VM (build 23.7-b01, mixed mode)<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>We assume the readers of this tutorial have Java SDK version 1.7.0_60 installed on their system.<\/p>\n\n\n\n<p>In case you do not have Java SDK, download its current version from\u00a0https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html\u00a0and have it installed.<\/p>\n\n\n\n<h2>Step 2: Set your Java Environment<\/h2>\n\n\n\n<p>Set the environment variable JAVA_HOME to point to the base directory location where Java is installed on your machine. For example,<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Platform &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Set JAVA_HOME to C:\\ProgramFiles\\java\\jdk1.7.0_60<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>Export JAVA_HOME = \/usr\/local\/java-current<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append the full path of Java compiler location to the System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Platform &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Append the String &#8220;C:\\Program Files\\Java\\jdk1.7.0_60\\bin&#8221; to the end of the system variable Path.<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>Export PATH = $PATH:$JAVA_HOME\/bin\/<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Execute the command&nbsp;<strong>java -version<\/strong>&nbsp;from the command prompt as explained above.<\/p>\n\n\n\n<h2>Step 3: Download Maven Archive<\/h2>\n\n\n\n<p>Download Maven 3.3.3 from\u00a0https:\/\/maven.apache.org\/download.cgi<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive Name<\/th><\/tr><tr><td>Windows<\/td><td>apache-maven-3.3.3-bin.zip<\/td><\/tr><tr><td>Linux<\/td><td>apache-maven-3.3.3-bin.tar.gz<\/td><\/tr><tr><td>Mac<\/td><td>apache-maven-3.3.3-bin.tar.gz<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 4: Extract the Maven Archive<\/h2>\n\n\n\n<p>Extract the archive, to the directory you wish to install Maven 3.3.3. The subdirectory apache-maven-3.3.3 will be created from the archive.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Location (can be different based on your installation)<\/th><\/tr><tr><td>Windows<\/td><td>C:\\Program Files\\Apache Software Foundation\\apache-maven-3.3.3<\/td><\/tr><tr><td>Linux<\/td><td>\/usr\/local\/apache-maven<\/td><\/tr><tr><td>Mac<\/td><td>\/usr\/local\/apache-maven<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 5: Set Maven Environment Variables<\/h2>\n\n\n\n<p>Add M2_HOME, M2, MAVEN_OPTS to environment variables.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variables using system properties.<em>M2_HOME = C:\\Program Files\\Apache Software Foundation\\apache-maven-3.3.3<\/em><em>M2 = %M2_HOME%\\bin<\/em><em>MAVEN_OPTS = -Xms256m -Xmx512m<\/em><\/td><\/tr><tr><td>Linux<\/td><td>Open command terminal and set environment variables.<br><em>export M2_HOME = \/usr\/local\/apache-maven\/apache-maven-3.3.3<\/em><em>export M2 = $M2_HOME\/bin<\/em><em>export MAVEN_OPTS = -Xms256m -Xmx512m<\/em><\/td><\/tr><tr><td>Mac<\/td><td>Open command terminal and set environment variables.<em>export M2_HOME = \/usr\/local\/apache-maven\/apache-maven-3.3.3<\/em><em>export M2 = $M2_HOME\/bin<\/em><em>export MAVEN_OPTS = -Xms256m -Xmx512m<\/em><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 6: Add Maven Bin Directory Location to System Path<\/h2>\n\n\n\n<p>Now append the M2 variable to System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Append the string ;%M2% to the end of the system variable, Path.<\/td><\/tr><tr><td>Linux<\/td><td>export PATH = $M2:$PATH<\/td><\/tr><tr><td>Mac<\/td><td>export PATH = $M2:$PATH<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 7: Verify Maven installation<\/h2>\n\n\n\n<p>Now open console, and execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Task<\/th><th>Command<\/th><\/tr><tr><td>Windows<\/td><td>Open Command Console<\/td><td>c:\\&gt; mvn &#8211;version<\/td><\/tr><tr><td>Linux<\/td><td>Open Command Terminal<\/td><td>$ mvn &#8211;version<\/td><\/tr><tr><td>Mac<\/td><td>Open Terminal<\/td><td>machine:&lt; joseph$ mvn &#8211;version<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Finally, verify the output of the above commands, which should be something as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: C:\\Program Files\\Apache Software Foundation\\apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: C:\\Program Files\\Java\\jdk1.7.0_75\\jreDefault locale: en_US, platform encoding: Cp1252<\/td><\/tr><tr><td>Linux<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: \/usr\/local\/apache-maven\/apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: \/usr\/local\/java-current\/jdk1.7.0_75\/jre<\/td><\/tr><tr><td>Mac<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: \/usr\/local\/apache-maven\/apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: \/Library\/Java\/Home\/jdk1.7.0_75\/jre<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 8 &#8211; Set Up Eclipse IDE<\/h2>\n\n\n\n<p>All the examples in this tutorial have been written using Eclipse IDE. So I would suggest you should have the latest version of Eclipse installed on your machine.<\/p>\n\n\n\n<p>To install Eclipse IDE, download the latest Eclipse binaries from\u00a0https:\/\/www.eclipse.org\/downloads\/. Once you download the installation, unpack the binary distribution into a convenient location. For example, in C:\\eclipse on Windows, or \/usr\/local\/eclipse on Linux\/Unix and finally set PATH variable appropriately.<\/p>\n\n\n\n<p>Eclipse can be started by executing the following commands on Windows machine, or you can double-click on eclipse.exe<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> %C:\\eclipse\\eclipse.exe<\/code><\/pre>\n\n\n\n<p>Eclipse can be started by executing the following commands on Unix (Solaris, Linux, etc.) machine \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$\/usr\/local\/eclipse\/eclipse<\/code><\/pre>\n\n\n\n<p>After a successful startup, if everything is fine then it should display the following result \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springaop\/images\/eclipsehomepage.jpg\" alt=\"Eclipse Home page\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This chapter takes you through the process of setting up Spring AOP on Windows and Linux based systems. Spring AOP can be easily installed and integrated with your current Java environment and MAVEN by following a few simple steps without any complex setup procedures. User administration is required while installation. System Requirements JDK Java SE [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1726"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1726"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1726\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1727,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1726\/revisions\/1727"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1726"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1726"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1726"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1728,
        "date": "2021-03-15T09:26:52",
        "date_gmt": "2021-03-15T09:26:52",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1728"
        },
        "modified": "2021-03-15T09:26:52",
        "modified_gmt": "2021-03-15T09:26:52",
        "slug": "core-concepts",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/core-concepts\/",
        "title": {
            "rendered": "Core Concepts"
        },
        "content": {
            "rendered": "\n<p>Before we start working with AOP, let us become familiar with the AOP concepts and terminologies. These terms are not specific to Spring, rather they are related to AOP.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Terms &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Aspect<\/strong>A module which has a set of APIs providing cross-cutting requirements. For example, a logging module would be called AOP aspect for logging. An application can have any number of aspects depending on the requirement.<\/td><\/tr><tr><td>2<\/td><td><strong>Join point<\/strong>This represents a point in your application where you can plug-in AOP aspect. You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework.<\/td><\/tr><tr><td>3<\/td><td><strong>Advice<\/strong>This is the actual action to be taken either before or after the method execution. This is the actual piece of code that is invoked during program execution by Spring AOP framework.<\/td><\/tr><tr><td>4<\/td><td><strong>PointCut<\/strong>This is a set of one or more joinpoints where an advice should be executed. You can specify PointCuts using expressions or patterns as we will see in our AOP examples.<\/td><\/tr><tr><td>5<\/td><td><strong>Introduction<\/strong>An introduction allows you to add new methods or attributes to existing classes.<\/td><\/tr><tr><td>6<\/td><td><strong>Target object<\/strong>The object being advised by one or more aspects. This object will always be a proxied object. Also referred to as the advised object.<\/td><\/tr><tr><td>7<\/td><td><strong>Weaving<\/strong>Weaving is the process of linking aspects with other application types or objects to create an advised object. This can be done at compile time, load time, or at runtime.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Before we start working with AOP, let us become familiar with the AOP concepts and terminologies. These terms are not specific to Spring, rather they are related to AOP. Sr.No. Terms &amp; Description 1 AspectA module which has a set of APIs providing cross-cutting requirements. For example, a logging module would be called AOP aspect [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1728"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1728"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1728\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1729,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1728\/revisions\/1729"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1728"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1728"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1728"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1730,
        "date": "2021-03-15T09:28:37",
        "date_gmt": "2021-03-15T09:28:37",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1730"
        },
        "modified": "2021-03-15T09:28:37",
        "modified_gmt": "2021-03-15T09:28:37",
        "slug": "advice-types",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/advice-types\/",
        "title": {
            "rendered": "Advice Types"
        },
        "content": {
            "rendered": "\n<p>Spring aspects can work with five kinds of advice mentioned in the following table.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Advice &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>before<\/strong>Run advice before the method execution.<\/td><\/tr><tr><td>2<\/td><td><strong>after<\/strong>Run advice after the method execution, regardless of its outcome.<\/td><\/tr><tr><td>3<\/td><td><strong>after-returning<\/strong>Run advice after the method execution, only if the method completes successfully.<\/td><\/tr><tr><td>4<\/td><td><strong>after-throwing<\/strong>Run advice after the method execution, only if the method exits by throwing an exception.<\/td><\/tr><tr><td>5<\/td><td><strong>around<\/strong>Run advice before and after the advised method is invoked.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Spring aspects can work with five kinds of advice mentioned in the following table. Sr.No. Advice &amp; Description 1 beforeRun advice before the method execution. 2 afterRun advice after the method execution, regardless of its outcome. 3 after-returningRun advice after the method execution, only if the method completes successfully. 4 after-throwingRun advice after the method [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1730"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1730"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1730\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1731,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1730\/revisions\/1731"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1730"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1730"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1730"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1732,
        "date": "2021-03-15T09:32:01",
        "date_gmt": "2021-03-15T09:32:01",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1732"
        },
        "modified": "2021-03-16T05:58:32",
        "modified_gmt": "2021-03-16T05:58:32",
        "slug": "implementations",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/implementations\/",
        "title": {
            "rendered": "Implementations"
        },
        "content": {
            "rendered": "\n<p>Spring supports the&nbsp;<strong>@AspectJ annotation style<\/strong>&nbsp;approach and the&nbsp;<strong>schema-based<\/strong>&nbsp;approach to implement custom aspects.<\/p>\n\n\n\n<h2>XML Schema Based<\/h2>\n\n\n\n<p>Aspects are implemented using regular classes along with XML based configuration.<\/p>\n\n\n\n<p>To use the AOP namespace tags described in this section, you need to import the spring AOP schema, described as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \"&gt;\n\n   &lt;!-- bean definition &amp; AOP specific configuration --&gt;\n\n&lt;\/beans&gt;<\/code><\/pre>\n\n\n\n<h2>Declaring an Aspect<\/h2>\n\n\n\n<p>An&nbsp;<strong>aspect<\/strong>&nbsp;is declared using the&nbsp;<strong>&lt;aop:aspect&gt;<\/strong>&nbsp;element, and the backing bean is referenced using the&nbsp;<strong>ref<\/strong>&nbsp;attribute as follows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"myAspect\" ref = \"aBean\"&gt;\n   ...\n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;\n\n&lt;bean id = \"aBean\" class = \"...\"&gt;\n   ...\n&lt;\/bean&gt;<\/code><\/pre>\n\n\n\n<p>Here &#8220;aBean&#8221; will be configured and dependency injected just like any other Spring bean as you have seen in the previous chapters.<\/p>\n\n\n\n<h2>Declaring a PointCut<\/h2>\n\n\n\n<p>A&nbsp;<strong>PointCut<\/strong>&nbsp;helps in determining the join points (i.e. methods) of interest to be executed with different advices. While working with XML Schema based configuration, PointCut will be defined as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"myAspect\" ref = \"aBean\"&gt;\n\n   &lt;aop:PointCut id = \"businessService\"\n      expression = \"execution(* com.xyz.myapp.service.*.*(..))\"\/&gt;\n      ...\n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;\n\n&lt;bean id = \"aBean\" class = \"...\"&gt;\n   ...\n&lt;\/bean&gt;<\/code><\/pre>\n\n\n\n<p>The following example defines a PointCut named &#8216;businessService&#8217; that will match the execution of getName() method available in Student class under the package com.tutorialspoint.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config>\n   &lt;aop:aspect id = \"myAspect\" ref = \"aBean\">\n\n   &lt;aop:PointCut id = \"businessService\"\n      expression = \"execution(* com.codemeals.Student.getName(..))\"\/>\n   ...\n   &lt;\/aop:aspect>\n&lt;\/aop:config>\n\n&lt;bean id = \"aBean\" class = \"...\">\n   ...\n&lt;\/bean><\/code><\/pre>\n\n\n\n<h2>Declaring Advices<\/h2>\n\n\n\n<p>You can declare any of the five advices inside an &lt;aop:aspect&gt; using the &lt;aop:{ADVICE NAME}&gt; element as follows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"myAspect\" ref = \"aBean\"&gt;\n      &lt;aop:PointCut id = \"businessService\"\n         expression = \"execution(* com.xyz.myapp.service.*.*(..))\"\/&gt;\n\n      &lt;!-- a before advice definition --&gt;\n      &lt;aop:before PointCut-ref = \"businessService\" \n         method = \"doRequiredTask\"\/&gt;\n\n      &lt;!-- an after advice definition --&gt;\n      &lt;aop:after PointCut-ref = \"businessService\" \n         method = \"doRequiredTask\"\/&gt;\n\n      &lt;!-- an after-returning advice definition --&gt;\n      &lt;!--The doRequiredTask method must have parameter named retVal --&gt;\n      &lt;aop:after-returning PointCut-ref = \"businessService\"\n         returning = \"retVal\"\n         method = \"doRequiredTask\"\/&gt;\n\n      &lt;!-- an after-throwing advice definition --&gt;\n      &lt;!--The doRequiredTask method must have parameter named ex --&gt;\n      &lt;aop:after-throwing PointCut-ref = \"businessService\"\n        throwing = \"ex\"\n         method = \"doRequiredTask\"\/&gt;\n\n      &lt;!-- an around advice definition --&gt;\n      &lt;aop:around PointCut-ref = \"businessService\" \n         method = \"doRequiredTask\"\/&gt;\n   ...\n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;\n\n&lt;bean id = \"aBean\" class = \"...\"&gt;\n   ...\n&lt;\/bean&gt;<\/code><\/pre>\n\n\n\n<p>You can use same&nbsp;<strong>doRequiredTask<\/strong>&nbsp;or different methods for different advices. These methods will be defined as a part of aspect module.<\/p>\n\n\n\n<h2>@AspectJ based<\/h2>\n\n\n\n<p>@AspectJ refers to a style of declaring aspects as regular Java classes annotated with Java 5 annotations. The @AspectJ support is enabled by including the following element inside your XML Schema-based configuration file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:aspectj-autoproxy\/&gt;<\/code><\/pre>\n\n\n\n<h2>Declaring an Aspect<\/h2>\n\n\n\n<p>Aspects classes are like any other normal bean and may have methods and fields just like any other class, except that they will be annotated with @Aspect as follows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package org.xyz;\n\nimport org.aspectj.lang.annotation.Aspect;\n\n@Aspect\npublic class AspectModule {\n\n}<\/code><\/pre>\n\n\n\n<p>They will be configured in XML like any other bean as follows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"myAspect\" class = \"org.xyz.AspectModule\"&gt;\n   &lt;!-- configure properties of aspect here as normal --&gt;\n&lt;\/bean&gt;<\/code><\/pre>\n\n\n\n<h2>Declaring a PointCut<\/h2>\n\n\n\n<p>A&nbsp;<strong>PointCut<\/strong>&nbsp;helps in determining the join points (i.e. methods) of interest to be executed with different advices. While working with @AspectJ based configuration, PointCut declaration has two parts \u2212<\/p>\n\n\n\n<ul><li>A PointCut expression that determines exactly which method executions we are interested in.<\/li><li>A PointCut signature comprising a name and any number of parameters. The actual body of the method is irrelevant and in fact should be empty.<\/li><\/ul>\n\n\n\n<p>The following example defines a PointCut named &#8216;businessService&#8217; that will match the execution of every method available in the classes under the package com.xyz.myapp.service.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.aspectj.lang.annotation.PointCut;\n\n@PointCut(\"execution(* com.xyz.myapp.service.*.*(..))\") \/\/ expression \nprivate void businessService() {}  \/\/ signature<\/code><\/pre>\n\n\n\n<p>The following example defines a PointCut named &#8216;getname&#8217; that will match the execution of getName() method available in Student class under the package com.tutorialspoint.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.aspectj.lang.annotation.PointCut;\n\n@PointCut(\"execution(* com.codemeals.Student.getName(..))\") \nprivate void getname() {}<\/code><\/pre>\n\n\n\n<h2>Declaring Advices<\/h2>\n\n\n\n<p>You can declare any of the five advices using @{ADVICE-NAME} annotations as given below. This assumes that you already have defined a PointCut signature method businessService().<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Before(\"businessService()\")\npublic void doBeforeTask(){\n   ...\n}\n\n@After(\"businessService()\")\npublic void doAfterTask(){\n   ...\n}\n\n@AfterReturning(PointCut = \"businessService()\", returning = \"retVal\")\npublic void doAfterReturnningTask(Object retVal){\n   \/\/ you can intercept retVal here.\n   ...\n}\n\n@AfterThrowing(PointCut = \"businessService()\", throwing = \"ex\")\npublic void doAfterThrowingTask(Exception ex){\n   \/\/ you can intercept thrown exception here.\n   ...\n}\n\n@Around(\"businessService()\")\npublic void doAroundTask(){\n   ...\n}<\/code><\/pre>\n\n\n\n<p>You can define PointCut inline for any of the advice. Following is an example to define inline PointCut for before advice.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Before(\"execution(* com.xyz.myapp.service.*.*(..))\")\npublic doBeforeTask(){\n   ...\n}<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Spring supports the&nbsp;@AspectJ annotation style&nbsp;approach and the&nbsp;schema-based&nbsp;approach to implement custom aspects. XML Schema Based Aspects are implemented using regular classes along with XML based configuration. To use the AOP namespace tags described in this section, you need to import the spring AOP schema, described as follows \u2212 Declaring an Aspect An&nbsp;aspect&nbsp;is declared using the&nbsp;&lt;aop:aspect&gt;&nbsp;element, and [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1732"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1732"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1732\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1793,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1732\/revisions\/1793"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1732"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1732"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1732"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1735,
        "date": "2021-03-15T09:53:32",
        "date_gmt": "2021-03-15T09:53:32",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1735"
        },
        "modified": "2021-03-16T05:55:39",
        "modified_gmt": "2021-03-16T05:55:39",
        "slug": "xml-based-application",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-based-application\/",
        "title": {
            "rendered": "XML Based Application"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will write actual AOP applications using Spring AOP Framework. Before you start writing your first example using the Spring-WS framework, you have to make sure that you have set up your Spring AOP environment properly as explained in&nbsp;Spring Web Services &#8211; Environment Setup&nbsp;chapter.<\/p>\n\n\n\n<p>Now, proceed to write a simple console-ased Spring AOP Application, which will demonstrate AOP concepts.<\/p>\n\n\n\n<h2>Create a Project<\/h2>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Open a command console, go the C:\\MVN directory and execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN&gt;mvn archetype:generate -DgroupId = com.codemeals-DartifactId = Student\n\t-DarchetypeArtifactId = maven-archetype-quickstart -DinteractiveMode = false<\/code><\/pre>\n\n\n\n<p>Maven will start processing and will create the complete Java application project structure.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building Maven Stub Project (No POM) 1\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO]\n&#91;INFO] &gt;&gt;&gt; maven-archetype-plugin:2.4:generate (default-cli) &gt; generate-sources\n@ standalone-pom &gt;&gt;&gt;\n&#91;INFO]\n&#91;INFO] &lt;&lt;&lt; maven-archetype-plugin:2.4:generate (default-cli) &lt; generate-sources\n@ standalone-pom &lt;&lt;&lt;\n&#91;INFO]\n&#91;INFO] --- maven-archetype-plugin:2.4:generate (default-cli) @ standalone-pom --\n-\n&#91;INFO] Generating project in Batch mode\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/archetypes\/ma\nven-archetype-quickstart\/1.0\/maven-archetype-quickstart-1.0.jar\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/archetypes\/mav\nen-archetype-quickstart\/1.0\/maven-archetype-quickstart-1.0.jar (5 KB at 1.1 KB\/s\nec)\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/archetypes\/ma\nven-archetype-quickstart\/1.0\/maven-archetype-quickstart-1.0.pom\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/archetypes\/mav\nen-archetype-quickstart\/1.0\/maven-archetype-quickstart-1.0.pom (703 B at 1.2 KB\/\nsec)\n&#91;INFO] -------------------------------------------------------------------------\n---\n&#91;INFO] Using following parameters for creating project from Old (1.x) Archetype:\n maven-archetype-quickstart:1.0\n&#91;INFO] -------------------------------------------------------------------------\n---\n&#91;INFO] Parameter: groupId, Value: com.codemeals\n&#91;INFO] Parameter: packageName, Value: com.codemeals\n&#91;INFO] Parameter: package, Value: com.codemeals.&#91;INFO] Parameter: artifactId, Value: Student\n&#91;INFO] Parameter: basedir, Value: C:\\MVN\n&#91;INFO] Parameter: version, Value: 1.0-SNAPSHOT\n&#91;INFO] project created from Old (1.x) Archetype in dir: C:\\MVN\\Student\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 01:17 min\n&#91;INFO] Finished at: 2017-02-19T21:11:14+05:30\n&#91;INFO] Final Memory: 15M\/114M\n&#91;INFO] ------------------------------------------------------------------------<\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Go to C:\/MVN directory. You&#8217;ll see a Java application project created, named student (as specified in artifactId). Update the POM.xml to include Spring-AOP dependencies. Add MainApp.java, Student.java, and Logging.java files.<\/p>\n\n\n\n<p><strong>POM.xml<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;project xmlns = \"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"http:\/\/maven.apache.org\/POM\/4.0.0 \n   http:\/\/maven.apache.org\/maven-v4_0_0.xsd\"&gt;\n   &lt;modelVersion&gt;4.0.0&lt;\/modelVersion&gt;\n   &lt;groupId&gt;com.tutorialspoint&lt;\/groupId&gt;\n   &lt;artifactId&gt;Student&lt;\/artifactId&gt;\n   &lt;packaging&gt;jar&lt;\/packaging&gt;\n   &lt;version&gt;1.0-SNAPSHOT&lt;\/version&gt;\n   &lt;name&gt;Student&lt;\/name&gt;\n   &lt;url&gt;http:\/\/maven.apache.org&lt;\/url&gt;\n   \n   &lt;dependencies&gt;\n      &lt;dependency&gt;\n         &lt;groupId&gt;junit&lt;\/groupId&gt;\n         &lt;artifactId&gt;junit&lt;\/artifactId&gt;\n         &lt;version&gt;3.8.1&lt;\/version&gt;\n         &lt;scope&gt;test&lt;\/scope&gt;\n      &lt;\/dependency&gt;\n      \n      &lt;dependency&gt;\n         &lt;groupId&gt;org.springframework&lt;\/groupId&gt;\n         &lt;artifactId&gt;spring-aop&lt;\/artifactId&gt;\n         &lt;version&gt;4.1.0.RELEASE&lt;\/version&gt;\n      &lt;\/dependency&gt;\n      \n      &lt;dependency&gt;\n         &lt;groupId&gt;org.springframework&lt;\/groupId&gt;\n         &lt;artifactId&gt;spring-context&lt;\/artifactId&gt;\n         &lt;version&gt;4.1.4.RELEASE&lt;\/version&gt;\n      &lt;\/dependency&gt;\n      \n      &lt;dependency&gt;\n         &lt;groupId&gt;org.aspectj&lt;\/groupId&gt;\n         &lt;artifactId&gt;aspectjweaver&lt;\/artifactId&gt;\n         &lt;version&gt;1.6.8&lt;\/version&gt;\n      &lt;\/dependency&gt;\n      \n   &lt;\/dependencies&gt;\n&lt;\/project&gt;\npackage com.codemeals;\n\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * before a selected method execution.\n    *\/\n   public void beforeAdvice() {\n      System.out.println(\"Going to setup student profile.\");\n   }\n\n   \/** \n    * This is the method which I would like to execute\n    * after a selected method execution.\n    *\/\n   public void afterAdvice() {\n      System.out.println(\"Student profile has been setup.\");\n   }\n\n   \/** \n    * This is the method which I would like to execute\n    * when any method returns.\n    *\/\n   public void afterReturningAdvice(Object retVal){\n      System.out.println(\"Returning:\" + retVal.toString() );\n   }\n\n   \/**\n    * This is the method which I would like to execute\n    * if there is an exception raised.\n    *\/\n   public void AfterThrowingAdvice(IllegalArgumentException ex) {\n      System.out.println(\"There has been an exception: \" + ex.toString());   \n   }\n   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();\n      \n      student.printThrowException();\n   }\n}<\/code><\/pre>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212 Add the configuration file&nbsp;<strong>Beans.xml<\/strong>&nbsp;under&nbsp;<strong>src &gt; main &gt; resources&nbsp;<\/strong>folder.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:config>\n      &lt;aop:aspect id = \"log\" ref = \"logging\">\n         &lt;aop:PointCut id = \"selectAll\" \n            expression = \"execution(* com.codemeals.*.*(..))\"\/>\n         &lt;aop:before PointCut-ref = \"selectAll\" method = \"beforeAdvice\"\/>\n         &lt;aop:after PointCut-ref = \"selectAll\" method = \"afterAdvice\"\/>\n         &lt;aop:after-returning PointCut-ref = \"selectAll\" \n            returning = \"retVal\"\n            method = \"afterReturningAdvice\"\/>\n         &lt;aop:after-throwing PointCut-ref = \"selectAll\" \n            throwing = \"ex\"\n            method = \"AfterThrowingAdvice\"\/>\n      &lt;\/aop:aspect>\n   &lt;\/aop:config>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p><strong>Step 4<\/strong>&nbsp;\u2212 Open the command console, go the C:\\MVN directory and execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN&gt;Student&gt; mvn package<\/code><\/pre>\n\n\n\n<p>Maven will start processing and downloading the required libraries.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building Student 1.0-SNAPSHOT\n&#91;INFO] ------------------------------------------------------------------------\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/plugins\/maven\n-jar-plugin\/2.4\/maven-jar-plugin-2.4.pom\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/plugins\/maven-\njar-plugin\/2.4\/maven-jar-plugin-2.4.pom (6 KB at 2.2 KB\/sec)\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/plugins\/maven\n-jar-plugin\/2.4\/maven-jar-plugin-2.4.jar\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/plugins\/maven-\njar-plugin\/2.4\/maven-jar-plugin-2.4.jar (34 KB at 31.6 KB\/sec)\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-aop\n\/4.1.0.RELEASE\/spring-aop-4.1.0.RELEASE.pom\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-aop\/\n4.1.0.RELEASE\/spring-aop-4.1.0.RELEASE.pom (3 KB at 3.7 KB\/sec)\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-bea\nns\/4.1.0.RELEASE\/spring-beans-4.1.0.RELEASE.pom\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-bean\ns\/4.1.0.RELEASE\/spring-beans-4.1.0.RELEASE.pom (3 KB at 4.1 KB\/sec)\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-cor\ne\/4.1.0.RELEASE\/spring-core-4.1.0.RELEASE.pom\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-core\n\/4.1.0.RELEASE\/spring-core-4.1.0.RELEASE.pom (3 KB at 4.0 KB\/sec)\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-aop\n\/4.1.0.RELEASE\/spring-aop-4.1.0.RELEASE.jar\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-cor\ne\/4.1.0.RELEASE\/spring-core-4.1.0.RELEASE.jar\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-bea\nns\/4.1.0.RELEASE\/spring-beans-4.1.0.RELEASE.jar\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-aop\/\n4.1.0.RELEASE\/spring-aop-4.1.0.RELEASE.jar (351 KB at 43.9 KB\/sec)\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-bean\ns\/4.1.0.RELEASE\/spring-beans-4.1.0.RELEASE.jar (685 KB at 37.5 KB\/sec)\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/springframework\/spring-core\n\/4.1.0.RELEASE\/spring-core-4.1.0.RELEASE.jar (982 KB at 47.1 KB\/sec)\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ Student --\n-\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] skip non existing resourceDirectory C:\\MVN\\Student\\src\\main\\resources\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ Student ---\n&#91;INFO] Changes detected - recompiling the module!\n&#91;WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. b\nuild is platform dependent!\n&#91;INFO] Compiling 1 source file to C:\\MVN\\Student\\target\\classes\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ St\nudent ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] skip non existing resourceDirectory C:\\MVN\\Student\\src\\test\\resources\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ Student\n ---\n&#91;INFO] Changes detected - recompiling the module!\n&#91;WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. b\nuild is platform dependent!\n&#91;INFO] Compiling 1 source file to C:\\MVN\\Student\\target\\test-classes\n&#91;INFO]\n&#91;INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ Student ---\n&#91;INFO] Surefire report directory: C:\\MVN\\Student\\target\\surefire-reports\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/surefire\/sure\nfire-junit3\/2.12.4\/surefire-junit3-2.12.4.pom\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/surefire\/suref\nire-junit3\/2.12.4\/surefire-junit3-2.12.4.pom (2 KB at 1.3 KB\/sec)\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/surefire\/sure\nfire-junit3\/2.12.4\/surefire-junit3-2.12.4.jar\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/surefire\/suref\nire-junit3\/2.12.4\/surefire-junit3-2.12.4.jar (26 KB at 27.7 KB\/sec)\n\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.codemeals.AppTest\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec\n\nResults :\n\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\n&#91;INFO]\n&#91;INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ Student ---\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/classworlds\/classworlds\/1.1-al\npha-2\/classworlds-1.1-alpha-2.jar\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/classworlds\/classworlds\/1.1-alp\nha-2\/classworlds-1.1-alpha-2.jar (37 KB at 35.8 KB\/sec)\n&#91;INFO] Building jar: C:\\MVN\\Student\\target\\Student-1.0-SNAPSHOT.jar\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 38.441 s\n&#91;INFO] Finished at: 2017-02-19T21:18:59+05:30\n&#91;INFO] Final Memory: 18M\/109M\n&#91;INFO] ------------------------------------------------------------------------<\/code><\/pre>\n\n\n\n<h2>Import Project in Eclipse<\/h2>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Open Eclipse.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Select&nbsp;<strong>File \u2192 Import \u2192<\/strong>&nbsp;option.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212 Select Maven Projects Option. Click the Next Button.<\/p>\n\n\n\n<p><strong>Step 4<\/strong>&nbsp;\u2212 Select Project location, where Student project was created using Maven.<\/p>\n\n\n\n<p><strong>Step 5<\/strong>&nbsp;\u2212 Click Finish Button.<\/p>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nName : Zara\nStudent profile has been setup.\nReturning:Zara\nGoing to setup student profile.\nAge : 11\nStudent profile has been setup.\nReturning:11\nGoing to setup student profile.\nException raised\nStudent profile has been setup.\nThere has been an exception: java.lang.IllegalArgumentException\nException in thread \"main\" java.lang.IllegalArgumentException\n   at com.codemeals.Student.printThrowException(Student.java:25)\n   \n   at com.codemeals.Student$$FastClassBySpringCGLIB$$7dc55815.invoke(&lt;generated>)\n   \n   at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n   \n   at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n   \n   at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n   \n   at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:43)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n   \n   at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n   \n   at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:58)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n   \n   at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n   \n   at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)\n   \n   at com.codemeals.Student$$EnhancerBySpringCGLIB$$56a970f2.printThrowException(&lt;generated>)\n   \n   at com.codemeals.MainApp.main(MainApp.java:16)<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will write actual AOP applications using Spring AOP Framework. Before you start writing your first example using the Spring-WS framework, you have to make sure that you have set up your Spring AOP environment properly as explained in&nbsp;Spring Web Services &#8211; Environment Setup&nbsp;chapter. Now, proceed to write a simple console-ased Spring [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1735"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1735"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1735\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1790,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1735\/revisions\/1790"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1735"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1735"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1735"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1738,
        "date": "2021-03-15T09:57:06",
        "date_gmt": "2021-03-15T09:57:06",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1738"
        },
        "modified": "2021-03-15T11:22:43",
        "modified_gmt": "2021-03-15T11:22:43",
        "slug": "xml-based-pointcut",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-based-pointcut\/",
        "title": {
            "rendered": "XML Based PointCut"
        },
        "content": {
            "rendered": "\n<h2>Join Point<\/h2>\n\n\n\n<p>A JoinPoint represents a point in your application where you can plug-in AOP aspect. You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework. Consider the following examples \u2212<\/p>\n\n\n\n<ul><li>All methods classes contained in a package(s).<\/li><li>A particular methods of a class.<\/li><\/ul>\n\n\n\n<h2>PointCut<\/h2>\n\n\n\n<p>PointCut is a set of one or more JoinPoints where an advice should be executed. You can specify PointCuts using expressions or patterns as we will see in our AOP examples. In Spring, PointCut helps to use specific JoinPoints to apply the advice. Consider the following examples \u2212<\/p>\n\n\n\n<ul><li>expression = &#8220;execution(* com.codemeals.*.*(..))&#8221;<\/li><li>expression = &#8220;execution(* com.codemeals.Student.getName(..))&#8221;<\/li><\/ul>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"log\" ref = \"adviceClass\"&gt;\n      &lt;aop:PointCut id = \"PointCut-id\" expression = \"execution( expression )\"\/&gt;    \n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>adviceClass<\/strong>&nbsp;\u2212 ref of the class containing advice methods<\/li><li><strong>PointCut-id<\/strong>&nbsp;\u2212 id of the PointCut<\/li><li><strong>execution( expression )<\/strong>&nbsp;\u2212 Expression covering methods on which advice is to be applied.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to JoinPoint and PointCut, let us write an example which will implement few of the PointCuts. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project&nbsp;<i>Student-created<\/i> under chapter&nbsp;Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * before a selected method execution.\n    *\/\n   public void beforeAdvice(){\n      System.out.println(\"Going to setup student profile.\");\n   }   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:config>\n      &lt;aop:aspect id = \"log\" ref = \"logging\">\n         &lt;aop:PointCut id = \"selectAll\" \n         expression = \"execution(* com.codemeals.*.*(..))\"\/>\n         &lt;aop:before PointCut-ref = \"selectAll\" method = \"beforeAdvice\"\/>         \n      &lt;\/aop:aspect>\n   &lt;\/aop:config>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done with creating the source and bean configuration files, run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nName : Zara\nGoing to setup student profile.\nAge : 11\n<\/code><\/pre>\n\n\n\n<p>The above-defined &lt;aop:pointcut&gt; selects all the methods defined under the package com.tutorialspoint. Let us suppose, you want to execute your advice before or after a particular method, you can define your PointCut to narrow down your execution by replacing stars (*) in PointCut definition with actual class and method names. Following is a modified XML configuration file to show the concept.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:config>\n      &lt;aop:aspect id = \"log\" ref = \"logging\">\n         &lt;aop:PointCut id = \"selectAll\" \n            expression = \"execution(* com.codemeals.Student.getName(..))\"\/>\n         &lt;aop:before PointCut-ref = \"selectAll\" method = \"beforeAdvice\"\/>\n      &lt;\/aop:aspect>\n   &lt;\/aop:config>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nName : Zara\nAge : 11 <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Join Point A JoinPoint represents a point in your application where you can plug-in AOP aspect. You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework. Consider the following examples \u2212 All methods classes contained in a package(s). A particular methods of a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1738"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1738"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1738\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1786,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1738\/revisions\/1786"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1738"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1738"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1738"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1740,
        "date": "2021-03-15T09:59:13",
        "date_gmt": "2021-03-15T09:59:13",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1740"
        },
        "modified": "2021-03-15T11:19:14",
        "modified_gmt": "2021-03-15T11:19:14",
        "slug": "xml-based-before-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-based-before-advice\/",
        "title": {
            "rendered": "XML Based Before Advice"
        },
        "content": {
            "rendered": "\n<p><strong>Before<\/strong>&nbsp;is an advice type which ensures that an advice runs before the method execution. Following is the syntax of before advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"log\" ref = \"logging\"&gt;\n      &lt;aop:PointCut id = \"PointCut-id\" expression = \"execution( expression )\"\/&gt;    \n      &lt;aop:before PointCut-ref = \"PointCut-id\" method = \"methodName\"\/&gt;\n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>PointCut-id<\/strong>&nbsp;\u2212 id of the PointCut.<\/li><li><strong>methodName<\/strong>&nbsp;\u2212 Method name of the function to be called before a called function.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Before Advice, let us write an example, which will implement Before Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project&nbsp;<i>Student-created<\/i> under chapter&nbsp;Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * before a selected method execution.\n    *\/\n   public void beforeAdvice(){\n      System.out.println(\"Going to setup student profile.\");\n   }   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:config>\n      &lt;aop:aspect id = \"log\" ref = \"logging\">\n         &lt;aop:PointCut id = \"selectAll\" \n            expression = \"execution(* com.codemeals.Student.getName(..))\"\/>\n         &lt;aop:before PointCut-ref = \"selectAll\" method = \"beforeAdvice\"\/>\n      &lt;\/aop:aspect>\n   &lt;\/aop:config>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating source and configuration files, run your application. Right-click on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nName : Zara\nAge : 11 <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Before&nbsp;is an advice type which ensures that an advice runs before the method execution. Following is the syntax of before advice. Syntax Where, PointCut-id&nbsp;\u2212 id of the PointCut. methodName&nbsp;\u2212 Method name of the function to be called before a called function. To understand the above-mentioned concepts related to Before Advice, let us write an example, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1740"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1740"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1740\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1784,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1740\/revisions\/1784"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1740"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1740"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1740"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1742,
        "date": "2021-03-15T10:01:15",
        "date_gmt": "2021-03-15T10:01:15",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1742"
        },
        "modified": "2021-03-15T11:17:04",
        "modified_gmt": "2021-03-15T11:17:04",
        "slug": "xml-based-after-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-based-after-advice\/",
        "title": {
            "rendered": "XML Based After Advice"
        },
        "content": {
            "rendered": "\n<p><strong>After<\/strong>&nbsp;is an advice type which ensures that an advice runs after the method execution. Following is the syntax of after advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"log\" ref = \"logging\"&gt;\n      &lt;aop:PointCut id = \"PointCut-id\" expression = \"execution( expression )\"\/&gt;    \n      &lt;aop:after PointCut-ref = \"PointCut-id\" method = \"methodName\"\/&gt;\n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>PointCut-id<\/strong>&nbsp;\u2212 id of the PointCut.<\/li><li><strong>methodName<\/strong>&nbsp;\u2212 Method name of the function to be called after a called function.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to After Advice, let us write an example which will implement After Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project&nbsp;<i>Student-created<\/i> under chapter&nbsp;Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * after a selected method execution.\n    *\/\n   public void afterAdvice(){\n      System.out.println(\"Student profile setup complete.\");\n   }   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:config>\n      &lt;aop:aspect id = \"log\" ref = \"logging\">\n         &lt;aop:PointCut id = \"selectAll\" \n            expression = \"execution(* com.codemeals.Student.getAge(..))\"\/>\n         &lt;aop:after PointCut-ref = \"selectAll\" method = \"afterAdvice\"\/>\n      &lt;\/aop:aspect>\n   &lt;\/aop:config>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating source and configuration files, run your application. Right-click on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, this will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name : Zara\nAge : 11\nStudent profile setup complete.<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>After&nbsp;is an advice type which ensures that an advice runs after the method execution. Following is the syntax of after advice. Syntax Where, PointCut-id&nbsp;\u2212 id of the PointCut. methodName&nbsp;\u2212 Method name of the function to be called after a called function. To understand the above-mentioned concepts related to After Advice, let us write an example [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1742"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1742"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1742\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1782,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1742\/revisions\/1782"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1742"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1742"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1742"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1744,
        "date": "2021-03-15T10:03:20",
        "date_gmt": "2021-03-15T10:03:20",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1744"
        },
        "modified": "2021-03-15T11:14:24",
        "modified_gmt": "2021-03-15T11:14:24",
        "slug": "xml-based-after-returning-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-based-after-returning-advice\/",
        "title": {
            "rendered": "XML Based After Returning Advice"
        },
        "content": {
            "rendered": "\n<p><strong>After<\/strong>&nbsp;is an advice type which ensures that an advice runs after the method execution only if the method completes successfully. Following is the syntax of after advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"log\" ref = \"logging\"&gt;\n      &lt;aop:PointCut id = \"PointCut-id\" expression = \"execution( expression )\"\/&gt;    \n      &lt;aop:after-returning PointCut-ref = \"PointCut-id\" \n         returning = \"retVal\" method = \"methodName\"\/&gt;\n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>PointCut-id<\/strong>&nbsp;\u2212 id of the PointCut.<\/li><li><strong>methodName<\/strong>&nbsp;\u2212 Method name of the function to be called after a called function returns successfully.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to After Returning Advice, let us write an example which will implement After Returning advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project&nbsp;<i>Student-<\/i>created under chapter&nbsp;Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * when any method returns.\n    *\/\n   public void afterReturningAdvice(Object retVal){\n      System.out.println(\"Returning:\" + retVal.toString() );\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:config>\n      &lt;aop:aspect id = \"log\" ref = \"logging\">\n         &lt;aop:PointCut id = \"selectAll\" \n         expression = \"execution(* com.codemeals.*.*(..))\"\/>\n         &lt;aop:after-returning PointCut-ref = \"selectAll\" \n            method = \"afterReturningAdvice\" returning = \"retVal\"\/>         \n      &lt;\/aop:aspect>\n   &lt;\/aop:config>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name : Zara\nReturning : Name\nAge : 11\nException raised<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>After&nbsp;is an advice type which ensures that an advice runs after the method execution only if the method completes successfully. Following is the syntax of after advice. Syntax Where, PointCut-id&nbsp;\u2212 id of the PointCut. methodName&nbsp;\u2212 Method name of the function to be called after a called function returns successfully. To understand the above-mentioned concepts related [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1744"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1744"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1744\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1780,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1744\/revisions\/1780"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1744"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1744"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1744"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1747,
        "date": "2021-03-15T10:06:52",
        "date_gmt": "2021-03-15T10:06:52",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1747"
        },
        "modified": "2021-03-15T10:34:19",
        "modified_gmt": "2021-03-15T10:34:19",
        "slug": "xml-based-after-throwing-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-based-after-throwing-advice\/",
        "title": {
            "rendered": "XML Based After Throwing Advice"
        },
        "content": {
            "rendered": "\n<p><strong>After-throwing<\/strong>&nbsp;is an advice type which ensures that an advice runs after the method execution, only if the method exits by throwing an exception. Following is the syntax of after-throwing advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"log\" ref = \"logging\"&gt;\n      &lt;aop:PointCut id = \"PointCut-id\" expression = \"execution( expression )\"\/&gt;    \n      &lt;aop:after-throwing PointCut-ref = \"PointCut-id\" throwing = \"ex\" \n         method = \"methodName\"\/&gt;\n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>PointCut-id<\/strong>&nbsp;\u2212 id of the PointCut.<\/li><li><strong>ex<\/strong>&nbsp;\u2212 Exception to be thrown.<\/li><li><strong>methodName<\/strong>&nbsp;\u2212 Method name of the function to be called when a called function throws an exception and exits.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to After Throwing Advice, let us write an example which will implement After Throwing Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project&nbsp;<i>Student-created<\/i> under chapter&nbsp;Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Logging {\n   \/**\n    * This is the method which I would like to execute\n    * if there is an exception raised.\n    *\/\n   public void afterThrowingAdvice(IllegalArgumentException ex) {\n      System.out.println(\"There has been an exception: \" + ex.toString());   \n   } \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n\t  return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.printThrowException();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:config>\n      &lt;aop:aspect id = \"log\" ref = \"logging\">\n         &lt;aop:PointCut id = \"selectAll\" \n         expression = \"execution(* com.codemeals.*.*(..))\"\/>\n         &lt;aop:after-throwing PointCut-ref = \"selectAll\" \n            throwing = \"ex\" method = \"afterThrowingAdvice\"\/>         \n      &lt;\/aop:aspect>\n   &lt;\/aop:config>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception raised\nThere has been an exception: java.lang.IllegalArgumentException\nException in thread \"main\" java.lang.IllegalArgumentException\n   at com.tutorialspoint.Student.printThrowException(Student.java:25)\n\t\n   at com.tutorialspoint.Student$$FastClassBySpringCGLIB$$7dc55815.invoke(&lt;generated>>)\n\t\n   at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\t\n   at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)\n\t\n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\t\n   at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:58)\n\t\n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\t\n   at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n\t\n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\t\n   at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)\n\t\n   at com.tutorialspoint.Student$$EnhancerBySpringCGLIB$$8514cd8.printThrowException(&lt;generated>)\n\t\n   at com.codemeals.MainApp.main(MainApp.java:15)<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>After-throwing&nbsp;is an advice type which ensures that an advice runs after the method execution, only if the method exits by throwing an exception. Following is the syntax of after-throwing advice. Syntax Where, PointCut-id&nbsp;\u2212 id of the PointCut. ex&nbsp;\u2212 Exception to be thrown. methodName&nbsp;\u2212 Method name of the function to be called when a called function [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1747"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1747"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1747\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1765,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1747\/revisions\/1765"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1747"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1747"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1747"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1750,
        "date": "2021-03-15T10:09:11",
        "date_gmt": "2021-03-15T10:09:11",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1750"
        },
        "modified": "2021-03-15T10:31:39",
        "modified_gmt": "2021-03-15T10:31:39",
        "slug": "xml-based-around-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-based-around-advice\/",
        "title": {
            "rendered": "XML Based Around Advice"
        },
        "content": {
            "rendered": "\n<p><strong>Around<\/strong>&nbsp;is an advice type which ensures that an advice runs before and after the method execution. Following is the syntax of around advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;aop:config&gt;\n   &lt;aop:aspect id = \"log\" ref = \"logging\"&gt;\n      &lt;aop:PointCut id = \"PointCut-id\" expression = \"execution( expression )\"\/&gt;    \n      &lt;aop:around PointCut-ref = \"PointCut-id\" method = \"methodName\"\/&gt;\n   &lt;\/aop:aspect&gt;\n&lt;\/aop:config&gt;<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>PointCut-id<\/strong>&nbsp;\u2212 id of the PointCut.<\/li><li><strong>methodName<\/strong>&nbsp;\u2212 Method name of the function to be called before a called function.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Around Advice, let us write an example which will implement Around Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project&nbsp;<i>Student-created<\/i> under chapter&nbsp;Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\nimport org.aspectj.lang.ProceedingJoinPoint;\n\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * around a selected method execution.\n    *\/\n   public String aroundAdvice(ProceedingJoinPoint jp) throws Throwable{\n      System.out.println(\"Around advice\");\n      Object&#91;] args = jp.getArgs();\n      if(args.length>0){\n         System.out.print(\"Arguments passed: \" );\n         for (int i = 0; i &lt; args.length; i++) {\n            System.out.print(\"arg \"+(i+1)+\": \"+args&#91;i]);\n         }\n      }\n\n      Object result = jp.proceed(args);\n      System.out.println(\"Returning \" + result);\n      return result.toString();\n   }   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();    \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:config>\n      &lt;aop:aspect id = \"log\" ref = \"logging\">\n         &lt;aop:PointCut id = \"selectName\" \n            expression = \"execution(* com.codemeals.Student.getName(..))\"\/>\n         &lt;aop:around PointCut-ref = \"selectName\" method = \"aroundAdvice\"\/>\n      &lt;\/aop:aspect>\n   &lt;\/aop:config>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Around advice\nName : Zara\nReturning Zara<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Around&nbsp;is an advice type which ensures that an advice runs before and after the method execution. Following is the syntax of around advice. Syntax Where, PointCut-id&nbsp;\u2212 id of the PointCut. methodName&nbsp;\u2212 Method name of the function to be called before a called function. To understand the above-mentioned concepts related to Around Advice, let us write [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1750"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1750"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1750\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1763,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1750\/revisions\/1763"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1750"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1750"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1750"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1752,
        "date": "2021-03-15T10:11:30",
        "date_gmt": "2021-03-15T10:11:30",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1752"
        },
        "modified": "2021-03-15T10:28:15",
        "modified_gmt": "2021-03-15T10:28:15",
        "slug": "annotation-based-application",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/annotation-based-application\/",
        "title": {
            "rendered": "Annotation Based Application"
        },
        "content": {
            "rendered": "\n<p>Let us write an example which will implement advice using Annotation based configuration. For this, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project&nbsp;<i>Student-created<\/i> under chapter&nbsp;Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.PointCut;\n\n@Aspect\npublic class Logging {\n\n   \/** Following is the definition for a PointCut to select\n    *  all the methods available. So advice will be called\n    *  for all the methods.\n    *\/\n   @PointCut(\"execution(* com.codemeals.*.*(..))\")\n   private void selectAll(){}\n\n   \/** \n    * This is the method which I would like to execute\n    * before a selected method execution.\n    *\/\n   @Before(\"selectAll()\")\n   public void beforeAdvice(){\n      System.out.println(\"Going to setup student profile.\");\n   }  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();   \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:aspectj-autoproxy\/>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nName : Zara\nGoing to setup student profile.\nAge : 11<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Let us write an example which will implement advice using Annotation based configuration. For this, let us have a working Eclipse IDE in place and use the following steps to create a Spring application. Step Description 1 Update the project&nbsp;Student-created under chapter&nbsp;Spring AOP &#8211; Application. 2 Update the bean configuration and run the application as [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1752"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1752"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1752\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1761,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1752\/revisions\/1761"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1752"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1752"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1752"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1754,
        "date": "2021-03-15T10:14:16",
        "date_gmt": "2021-03-15T10:14:16",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1754"
        },
        "modified": "2021-03-15T10:25:38",
        "modified_gmt": "2021-03-15T10:25:38",
        "slug": "annotation-based-pointcut",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/annotation-based-pointcut\/",
        "title": {
            "rendered": "Annotation Based PointCut"
        },
        "content": {
            "rendered": "\n<h2>JoinPoint<\/h2>\n\n\n\n<p>A JoinPoint represents a point in your application where you can plug-in AOP aspect. You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework. Consider the following examples \u2212<\/p>\n\n\n\n<ul><li>All methods classes contained in a package(s).<\/li><li>A particular method of a class.<\/li><\/ul>\n\n\n\n<h2>PointCut<\/h2>\n\n\n\n<p>PointCut is a set of one or more JoinPoint where an advice should be executed. You can specify PointCuts using expressions or patterns as we will see in our AOP examples. In Spring, PointCut helps to use specific JoinPoints to apply the advice. Consider the following examples \u2212<\/p>\n\n\n\n<ul><li>@PointCut(&#8220;execution(* com.codemeals.*.*(..))&#8221;)<\/li><li>@PointCut(&#8220;execution(* com.codemeals.Student.getName(..))&#8221;)<\/li><\/ul>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>@Aspect\npublic class Logging {\n\n   @PointCut(\"execution(* com.codemeals.*.*(..))\")\n   private void selectAll(){}\n\n}<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>@Aspect<\/strong>&nbsp;\u2212 Mark a class as a class containing advice methods.<\/li><li><strong>@PointCut<\/strong>&nbsp;\u2212 Mark a function as a PointCut<\/li><li><strong>execution( expression )<\/strong>&nbsp;\u2212 Expression covering methods on which advice is to be applied.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to JoinPoint and PointCut, let us write an example which will implement few of the PointCuts. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project&nbsp;<i>Student-created<\/i> under chapter&nbsp;Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.PointCut;\nimport org.aspectj.lang.annotation.Before;\n\n@Aspect\npublic class Logging {\n\n   \/** Following is the definition for a PointCut to select\n    *  all the methods available. So advice will be called\n    *  for all the methods.\n    *\/\n   @PointCut(\"execution(* com.codemeals.*.*(..))\")\n   private void selectAll(){}\n\n   \/** \n    * This is the method which I would like to execute\n    * before a selected method execution.\n    *\/\n   @Before(\"selectAll()\")\n   public void beforeAdvice(){\n      System.out.println(\"Going to setup student profile.\");\n   }  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:aspectj-autoproxy\/>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nName : Zara\nGoing to setup student profile.\nAge : 11\n<\/code><\/pre>\n\n\n\n<p>The above-defined @Pointcut uses an expression to select all the methods defined under the package com. tutorials point. @Before advice uses the above-defined PointCut as a parameter. Effectively beforeAdvice() method will be called before every method covered by above PointCut.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JoinPoint A JoinPoint represents a point in your application where you can plug-in AOP aspect. You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework. Consider the following examples \u2212 All methods classes contained in a package(s). A particular method of a class. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1754"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1754"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1754\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1759,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1754\/revisions\/1759"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1754"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1754"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1754"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1756,
        "date": "2021-03-15T10:21:12",
        "date_gmt": "2021-03-15T10:21:12",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1756"
        },
        "modified": "2021-03-15T10:21:12",
        "modified_gmt": "2021-03-15T10:21:12",
        "slug": "annotation-based-before-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/annotation-based-before-advice\/",
        "title": {
            "rendered": "Annotation Based Before Advice"
        },
        "content": {
            "rendered": "\n<p><strong>@Before<\/strong>&nbsp;is an advice type which ensures that an advice runs before the method execution. Following is the syntax of @Before advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>@PointCut(\"execution(* com.codemeals.Student.getName(..))\")\nprivate void selectGetName(){}\n\n@Before(\"selectGetName()\")\npublic void beforeAdvice(){\n   System.out.println(\"Going to setup student profile.\");\n} <\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>@PointCut<\/strong>&nbsp;\u2212 Mark a function as a PointCut<\/li><li><strong>execution( expression )<\/strong>&nbsp;\u2212 Expression covering methods on which advice is to be applied.<\/li><li><strong>@Before<\/strong>&nbsp;\u2212 Mark a function as an advice to be executed before method(s) covered by PointCut.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to @Before Advice, let us write an example which will implement @Before Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.PointCut;\nimport org.aspectj.lang.annotation.Before;\n\n@Aspect\npublic class Logging {\n\n   \/** Following is the definition for a PointCut to select\n    *  all the methods available. So advice will be called\n    *  for all the methods.\n    *\/\n   @PointCut(\"execution(* codemeals.com Student.getName(..))\")\n   private void selectGetName(){}\n\n   \/** \n    * This is the method which I would like to execute\n    * before a selected method execution.\n    *\/\n   @Before(\"selectGetName()\")\n   public void beforeAdvice(){\n      System.out.println(\"Going to setup student profile.\");\n   }  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:aspectj-autoproxy\/>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nName : Zara\nAge : 11\n<\/code><\/pre>\n\n\n\n<p>The above-defined @Pointcut uses an expression to select method getAge() defined in class(es) under the package com.tutorials point. @After advice uses the above-defined PointCut as a parameter. Effectively after advice() method will be called before every method covered by the above PointCut.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>@Before&nbsp;is an advice type which ensures that an advice runs before the method execution. Following is the syntax of @Before advice. Syntax Where, @PointCut&nbsp;\u2212 Mark a function as a PointCut execution( expression )&nbsp;\u2212 Expression covering methods on which advice is to be applied. @Before&nbsp;\u2212 Mark a function as an advice to be executed before method(s) [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1756"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1756"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1756\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1757,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1756\/revisions\/1757"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1756"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1756"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1756"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1767,
        "date": "2021-03-15T10:42:00",
        "date_gmt": "2021-03-15T10:42:00",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1767"
        },
        "modified": "2021-03-15T10:42:00",
        "modified_gmt": "2021-03-15T10:42:00",
        "slug": "annotation-based-after-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/annotation-based-after-advice\/",
        "title": {
            "rendered": "Annotation Based After Advice"
        },
        "content": {
            "rendered": "\n<p><strong>@After<\/strong>&nbsp;is an advice type which ensures that an advice runs after the method execution. Following is the syntax of @After advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>@PointCut(\"execution(* com.codemeals.Student.getAge(..))\")\nprivate void selectGetName(){}\n\n@After(\"selectGetAge()\")\npublic void afterAdvice(){\n   System.out.println(\"Student profile setup completed.\");\n} <\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>@PointCut<\/strong>&nbsp;\u2212 Mark a function as a PointCut<\/li><li><strong>execution( expression )<\/strong>&nbsp;\u2212 Expression covering methods on which advice is to be applied.<\/li><li><strong>@After<\/strong>&nbsp;\u2212 Mark a function as an advice to be executed before method(s) covered by PointCut.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to @After Advice, let us write an example which will implement @After Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-cr<\/i>eated under chapter\u00a0Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.PointCut;\nimport org.aspectj.lang.annotation.After;\n\n@Aspect\npublic class Logging {\n\n   \/** Following is the definition for a PointCut to select\n    *  all the methods available. So advice will be called\n    *  for all the methods.\n    *\/\n   @PointCut(\"execution(* com.codemeals.Student.getAge(..))\")\n   private void selectGetAge(){}\n\n   \/** \n    * This is the method which I would like to execute\n    * after a selected method execution.\n    *\/\n   @After(\"selectGetAge()\")\n   public void afterAdvice(){\n      System.out.println(\"Student profile setup completed.\");\n   }  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:aspectj-autoproxy\/>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name : Zara\nAge : 11\nStudent profile setup completed.\n<\/code><\/pre>\n\n\n\n<p>The above-defined @Pointcut uses an expression to select method getAge() defined in the class(es) under the package com.code meals. @After advice uses the above-defined PointCut as a parameter. Effectively after advice() method will be called before every method covered by the above PointCut.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>@After&nbsp;is an advice type which ensures that an advice runs after the method execution. Following is the syntax of @After advice. Syntax Where, @PointCut&nbsp;\u2212 Mark a function as a PointCut execution( expression )&nbsp;\u2212 Expression covering methods on which advice is to be applied. @After&nbsp;\u2212 Mark a function as an advice to be executed before method(s) [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1767"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1767"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1767\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1768,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1767\/revisions\/1768"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1767"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1767"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1767"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1769,
        "date": "2021-03-15T10:48:36",
        "date_gmt": "2021-03-15T10:48:36",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1769"
        },
        "modified": "2021-03-15T10:48:36",
        "modified_gmt": "2021-03-15T10:48:36",
        "slug": "annotation-based-after-returning-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/annotation-based-after-returning-advice\/",
        "title": {
            "rendered": "Annotation Based After Returning Advice"
        },
        "content": {
            "rendered": "\n<p><strong>@AfterReturning<\/strong>&nbsp;is an advice type, which ensures that an advice runs after the method executes successfully. Following is the syntax of @AfterReturning advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>@AfterReturning(PointCut = \"execution(* com.codemeals.Student.*(..))\", \n   returning = \"retVal\")\npublic void afterReturningAdvice(JoinPoint jp, Object retVal){\n   System.out.println(\"Method Signature: \"  + jp.getSignature());  \n   System.out.println(\"Returning:\" + retVal.toString() );\n}<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>@AfterReturning<\/strong>&nbsp;\u2212 Mark a function as an advice to be executed before method(s) covered by PointCut, if the method returns successfully.<\/li><li><strong>PointCut<\/strong>&nbsp;\u2212 Provides an expression to select a function<\/li><li><strong>execution( expression )<\/strong>&nbsp;\u2212 Expression covering methods on which advice is to be applied.<\/li><li><strong>returning<\/strong>&nbsp;\u2212 Name of the variable to be returned.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to @AfterReturning Advice, let us write an example, which will implement @AfterReturning Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.JoinPoint;  \nimport org.aspectj.lang.annotation.AfterReturning; \n\n@Aspect\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * after a selected method execution.\n    *\/\n   @AfterReturning(PointCut = \"execution(* com.codemeals.Student.*(..))\", \n      returning = \"retVal\")\n   public void afterReturningAdvice(JoinPoint jp, Object retVal){\n      System.out.println(\"Method Signature: \"  + jp.getSignature());  \n      System.out.println(\"Returning:\" + retVal.toString() );\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:aspectj-autoproxy\/>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.tutorialspoint.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age : 11\nMethod Signature: Integer com.codemeals.Student.getAge()  \nReturning 11<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>@AfterReturning&nbsp;is an advice type, which ensures that an advice runs after the method executes successfully. Following is the syntax of @AfterReturning advice. Syntax Where, @AfterReturning&nbsp;\u2212 Mark a function as an advice to be executed before method(s) covered by PointCut, if the method returns successfully. PointCut&nbsp;\u2212 Provides an expression to select a function execution( expression )&nbsp;\u2212 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1769"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1769"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1769\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1770,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1769\/revisions\/1770"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1769"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1769"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1769"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1771,
        "date": "2021-03-15T10:54:47",
        "date_gmt": "2021-03-15T10:54:47",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1771"
        },
        "modified": "2021-03-15T10:54:47",
        "modified_gmt": "2021-03-15T10:54:47",
        "slug": "annotation-based-after-throwing-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/annotation-based-after-throwing-advice\/",
        "title": {
            "rendered": "Annotation Based After Throwing Advice"
        },
        "content": {
            "rendered": "\n<p><strong>@AfterThrowing<\/strong>&nbsp;is an advice type which ensures that an advice runs if the method throws an exception. Following is the syntax of @AfterThrowing advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>@AfterThrowing(PointCut = \"execution(* com.codemeals.Student.*(..))\", \n   throwing = \"error\")\npublic void afterThrowingAdvice(JoinPoint jp, Throwable error){\n   System.out.println(\"Method Signature: \"  + jp.getSignature());  \n   System.out.println(\"Exception: \"+error);  \n}<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>@AfterThrowing<\/strong>&nbsp;\u2212 Mark a function as an advice to be executed before method(s) covered by PointCut, if the method throws an exception.<\/li><li><strong>PointCut<\/strong>&nbsp;\u2212 Provides an expression to select a function.<\/li><li><strong>execution( expression )<\/strong>&nbsp;\u2212 Expression covering methods on which advice is to be applied.<\/li><li><strong>throwing<\/strong>&nbsp;\u2212 Name of the exception to be returned.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to @AfterThrowing Advice, let us write an example which will implement @AfterThrowing Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<span style=\"background-color: rgba(30, 30, 30, 0.2);\"><i>Studen<\/i><\/span><em>t-created<\/em> under chapter\u00a0Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.JoinPoint;  \nimport org.aspectj.lang.annotation.AfterThrowing;  \n\n@Aspect\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * after a selected method execution throws exception.\n    *\/\n   @AfterThrowing(PointCut = \"execution(* com.codemeals.Student.*(..))\", \n      throwing = \"error\")\n   public void afterThrowingAdvice(JoinPoint jp, Throwable error){\n      System.out.println(\"Method Signature: \"  + jp.getSignature());  \n      System.out.println(\"Exception: \"+error);  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.printThrowException();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:aspectj-autoproxy\/>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception raised\nMethod Signature: void com.codemeals.Student.printThrowException()\nException: java.lang.IllegalArgumentException\nException in thread \"main\" java.lang.IllegalArgumentException\n   \n   at com.codemeals.Student.printThrowException(Student.java:25)\n   \n   at com.codemeals.Student$$FastClassBySpringCGLIB$$7dc55815.invoke(&lt;generated>)\n   \n   at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n   \n   at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n   \n   at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:58)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n   \n   at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n   \n   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n   \n   at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)\n   \n   at com.tutorialspoint.Student$$EnhancerBySpringCGLIB$$99b0a988.printThrowException(&lt;generated>)\n   \n   at com.codemeals.MainApp.main(MainApp.java:13)<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>@AfterThrowing&nbsp;is an advice type which ensures that an advice runs if the method throws an exception. Following is the syntax of @AfterThrowing advice. Syntax Where, @AfterThrowing&nbsp;\u2212 Mark a function as an advice to be executed before method(s) covered by PointCut, if the method throws an exception. PointCut&nbsp;\u2212 Provides an expression to select a function. execution( [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1771"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1771"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1771\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1772,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1771\/revisions\/1772"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1771"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1771"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1771"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1773,
        "date": "2021-03-15T10:59:22",
        "date_gmt": "2021-03-15T10:59:22",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1773"
        },
        "modified": "2021-03-15T10:59:22",
        "modified_gmt": "2021-03-15T10:59:22",
        "slug": "annotation-based-around-advice",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/annotation-based-around-advice\/",
        "title": {
            "rendered": "Annotation Based Around Advice"
        },
        "content": {
            "rendered": "\n<p><strong>@Around<\/strong>&nbsp;is an advice type, which ensures that an advice can run before and after the method execution. Following is the syntax of @Around advice.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>@PointCut(\"execution(* com.codemeals.Student.getAge(..))\")\nprivate void selectGetName(){}\n\n@Around(\"selectGetAge()\")\npublic void aroundAdvice(ProceedingJoinPoint proceedingJoinPoint){\n   System.out.println(\"Around advice\");\n   Object&#91;] args = jp.getArgs();\n   if(args.length>0){\n      System.out.print(\"Arguments passed: \" );\n      for (int i = 0; i &lt; args.length; i++) {\n         System.out.print(\"arg \"+(i+1)+\": \"+args&#91;i]);\n      }\n   }\n\n   Object result = jp.proceed(args);\n   System.out.println(\"Returning \" + result);\n   return result.toString();   \n} <\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>@PointCut<\/strong>&nbsp;\u2212 Mark a function as a PointCut<\/li><li><strong>execution( expression )<\/strong>&nbsp;\u2212 Expression covering methods on which advice is to be applied.<\/li><li><strong>@Around<\/strong>&nbsp;\u2212 Mark a function as an advice to be executed before method(s) covered by PointCut.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to @Around Advice, let us write an example which will implement @Around Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.PointCut;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.ProceedingJoinPoint; \n\n@Aspect\npublic class Logging {\n\n   \/** Following is the definition for a PointCut to select\n    *  all the methods available. So advice will be called\n    *  for all the methods.\n    *\/\n   @PointCut(\"execution(* com.codemeals.Student.getAge(..))\")\n   private void selectGetAge(){}\n\n   \/** \n    * This is the method which I would like to execute\n    * around a selected method execution.\n    *\/\n   @Around(\"selectGetAge()\")\n   public void aroundAdvice(ProceedingJoinPoint proceedingJoinPoint) throws Throwable{\n      System.out.println(\"Around advice\");\n      Object&#91;] args = proceedingJoinPoint.getArgs();\n      if(args.length>0){\n         System.out.print(\"Arguments passed: \" );\n         for (int i = 0; i &lt; args.length; i++) {\n            System.out.print(\"arg \"+(i+1)+\": \"+args&#91;i]);\n         }\n      }\n\n      Object result = proceedingJoinPoint.proceed(args);\n      System.out.println(\"Returning \" + result);\n   }  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:aspectj-autoproxy\/>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Around advice\nAge : 11\nReturning 11<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>@Around&nbsp;is an advice type, which ensures that an advice can run before and after the method execution. Following is the syntax of @Around advice. Syntax Where, @PointCut&nbsp;\u2212 Mark a function as a PointCut execution( expression )&nbsp;\u2212 Expression covering methods on which advice is to be applied. @Around&nbsp;\u2212 Mark a function as an advice to be [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1773"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1773"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1773\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1774,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1773\/revisions\/1774"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1773"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1773"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1773"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1775,
        "date": "2021-03-15T11:03:16",
        "date_gmt": "2021-03-15T11:03:16",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1775"
        },
        "modified": "2021-03-15T11:03:16",
        "modified_gmt": "2021-03-15T11:03:16",
        "slug": "proxy",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/proxy\/",
        "title": {
            "rendered": "Proxy"
        },
        "content": {
            "rendered": "\n<p>So far, we&#8217;ve declared aspects using&nbsp;<strong>&lt;aop:config&gt;<\/strong>&nbsp;or&nbsp;<strong>&lt; aop:aspectj-autoproxy&gt;<\/strong>. We can create a proxy programmatically as well as invoke the aspects programmatically using the proxy object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Create object to be proxied\nStudent student = new Student();\n\n\/\/Create the Proxy Factory\nAspectJProxyFactory proxyFactory = new AspectJProxyFactory(student);\n\n\/\/Add Aspect class to the factory\nproxyFactory.addAspect(Logging.class);\n\n\/\/Get the proxy object\nStudent proxyStudent = proxyFactory.getProxy();\n\n\/\/Invoke the proxied method.\nproxyStudent.getAge();<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>AspectJProxyFactory<\/strong>&nbsp;\u2212 Factory class to create a proxy object.<\/li><li><strong>Logging.class<\/strong>&nbsp;\u2212 Class of the Aspect containing advices.<\/li><li><strong>Student<\/strong>&nbsp;\u2212 Business class to be advised.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to proxy, let us write an example which will implement proxy. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.PointCut;\nimport org.aspectj.lang.annotation.Before;\n\n@Aspect\npublic class Logging {\n\n   \/** Following is the definition for a PointCut to select\n    *  all the methods available. So advice will be called\n    *  for all the methods.\n    *\/\n   @PointCut(\"execution(* com.codemeals.Student.getAge(..))\")\n   private void selectGetAge(){}\n\n   \/** \n    * This is the method which I would like to execute\n    * before a selected method execution.\n    *\/\n   @Before(\"selectGetAge()\")\n   public void beforeAdvice(){\n      System.out.println(\"Going to setup student profile.\");\n   }  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n  \n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      \/\/Create the Proxy Factory\n      AspectJProxyFactory proxyFactory = new AspectJProxyFactory(student);\n\n      \/\/Add Aspect class to the factory\n      proxyFactory.addAspect(Logging.class);\n\n      \/\/Get the proxy object\n      Student proxyStudent = proxyFactory.getProxy();\n\n      \/\/Invoke the proxied method.\n      proxyStudent.getAge();\n \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nAge : 11<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>So far, we&#8217;ve declared aspects using&nbsp;&lt;aop:config&gt;&nbsp;or&nbsp;&lt; aop:aspectj-autoproxy&gt;. We can create a proxy programmatically as well as invoke the aspects programmatically using the proxy object. Syntax Where, AspectJProxyFactory&nbsp;\u2212 Factory class to create a proxy object. Logging.class&nbsp;\u2212 Class of the Aspect containing advices. Student&nbsp;\u2212 Business class to be advised. To understand the above-mentioned concepts related to proxy, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1775"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1775"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1775\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1776,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1775\/revisions\/1776"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1775"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1775"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1775"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1777,
        "date": "2021-03-15T11:07:16",
        "date_gmt": "2021-03-15T11:07:16",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1777"
        },
        "modified": "2021-03-15T11:07:16",
        "modified_gmt": "2021-03-15T11:07:16",
        "slug": "custom-annotation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/custom-annotation\/",
        "title": {
            "rendered": "Custom Annotation"
        },
        "content": {
            "rendered": "\n<p>As per PointCut expressions, it may be the case that they get applied to some other beans for which advice is not intended. For example, consider the following expression.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>execution(* com.codemeals.*.getAge(..)) <\/code><\/pre>\n\n\n\n<p>A new spring bean is added with getAge() method and the advice will start getting applied to it although it may not be intended. To achieve this, we can create a custom annotation and annotate the methods on which the advice is to be applied.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Before(\"@annotation(com.codemeals.Loggable)\")<\/code><\/pre>\n\n\n\n<p>To understand the above-mentioned concepts related to @Before Advice, let us write an example which will implement @Before Advice. To write our example with few advices, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0Spring AOP &#8211; Application.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of&nbsp;<strong>Logging.java<\/strong>&nbsp;file. This is actually a sample of aspect module, which defines the methods to be called at various points.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\n\n@Aspect\npublic class Logging {\n\n   \/** \n    * This is the method which I would like to execute\n    * before a selected method execution.\n    *\/\n   @Before(\"@annotation(com.codemeals.Loggable)\")\n   public void beforeAdvice(){\n      System.out.println(\"Going to setup student profile.\");\n   }  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Loggable.java<\/strong>&nbsp;file \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic @interface Loggable {\n\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   \n   public Integer getAge() {\n      System.out.println(\"Age : \" + age );\n      return age;\n   }\n   \n   public void setName(String name) {\n      this.name = name;\n   }\n   \n   @Loggable\n   public String getName() {\n      System.out.println(\"Name : \" + name );\n      return name;\n   }\n   \n   public void printThrowException(){\n      System.out.println(\"Exception raised\");\n      throw new IllegalArgumentException();\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      Student student = (Student) context.getBean(\"student\");\n\n      student.getName();\n      student.getAge();     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:aop = \"http:\/\/www.springframework.org\/schema\/aop\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \n   http:\/\/www.springframework.org\/schema\/aop \n   http:\/\/www.springframework.org\/schema\/aop\/spring-aop-3.0.xsd \">\n\n   &lt;aop:aspectj-autoproxy\/>\n\n   &lt;!-- Definition for student bean -->\n   &lt;bean id = \"student\" class = \"com.codemeals.Student\">\n      &lt;property name = \"name\"  value = \"Zara\" \/>\n      &lt;property name = \"age\"  value = \"11\"\/>      \n   &lt;\/bean>\n\n   &lt;!-- Definition for logging aspect -->\n   &lt;bean id = \"logging\" class = \"com.codemeals.Logging\"\/> \n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run Project<\/h2>\n\n\n\n<p>Once you are done creating the source and configuration files, run your application. Rightclick on MainApp.java in your application and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Going to setup student profile.\nName : Zara\nAge : 11<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>As per PointCut expressions, it may be the case that they get applied to some other beans for which advice is not intended. For example, consider the following expression. A new spring bean is added with getAge() method and the advice will start getting applied to it although it may not be intended. To achieve [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            73
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1777"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1777"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1777\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1778,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1777\/revisions\/1778"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1777"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1777"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1777"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]