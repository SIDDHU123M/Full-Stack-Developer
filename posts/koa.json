[{"id":4012,"date":"2020-07-24T05:18:40","date_gmt":"2020-07-24T05:18:40","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=104"},"modified":"2020-07-24T05:18:40","modified_gmt":"2020-07-24T05:18:40","slug":"koa-js-overview","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-overview/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>A web application framework provides you with a simple API to build websites, web apps, and backends. You need not worry about low level protocols, processes, etc.</p>\n\n\n\n<h2>What is Koa?</h2>\n\n\n\n<p>Koa provides a minimal interface to build applications. It is a very small framework (600 LoC) which provides the required tools to build apps and is quite flexible. There are numerous modules available on npm for Koa, which can be directly plugged into it. Koa can be thought of as the core of express.js without all the bells and whistles.</p>\n\n\n\n<h2>Why Koa?</h2>\n\n\n\n<p>Koa has a small footprint (600 LoC) and is a very thin layer of abstraction over the node to create server side apps. It is completely pluggable and has a huge community. This also allows us to easily extend Koa and use it according to our needs. It is built using the bleeding edge technology (ES6) which gives it an edge over older frameworks such as express.</p>\n\n\n\n<h3>Pug</h3>\n\n\n\n<p>Pug (earlier known as Jade) is a terse language for writing HTML templates.</p>\n\n\n\n<ul><li>Produces HTML</li><li>Supports dynamic code</li><li>Supports reusability (DRY)</li></ul>\n\n\n\n<p>It is one of the most popular templating language used with Koa.</p>\n\n\n\n<h3>MongoDB and Mongoose</h3>\n\n\n\n<p>MongoDB is an open-source, document database designed for ease of development and scaling. We&#8217;ll use this database to store data.</p>\n\n\n\n<p>Mongoose is a client API for node.js which makes it easy to access our database from our Koa application.</p>\n","protected":false},"excerpt":{"rendered":"<p>A web application framework provides you with a simple API to build websites, web apps, and backends. You need not worry about low level protocols, processes, etc. What is Koa? Koa provides a minimal interface to build applications. It is a very small framework (600 LoC) which provides the required tools to build apps and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4012"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4012"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4012/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4012"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4012"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4012"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4013,"date":"2020-07-24T06:02:37","date_gmt":"2020-07-24T06:02:37","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=106"},"modified":"2020-07-24T06:02:37","modified_gmt":"2020-07-24T06:02:37","slug":"koa-js-environment","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-environment/","title":{"rendered":"Environment"},"content":{"rendered":"\n<p>To get started with developing using the Koa framework, you need to have Node and npm (node package manager) installed. If you don’t already have these, head over to&nbsp;Node setup&nbsp;to install node on your local system. Confirm that node and npm are installed by running the following commands in your terminal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node --version\n$ npm --version</code></pre>\n\n\n\n<p>You should receive an output similar to −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>v5.0.0\n3.5.2</code></pre>\n\n\n\n<p>Please ensure your node version is above 6.5.0. Now that we have Node and npm set up, let us understand what npm is and how to use it.</p>\n\n\n\n<h2>Node Package Manager (npm)</h2>\n\n\n\n<p>npm is the package manager for node. The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps, mobile apps, robots, routers, and countless other needs of the JavaScript community. npm allows us to access all these packages and install them locally. You can browse through the list of packages available on npm at&nbsp;npmJS.</p>\n\n\n\n<h3>How to Use npm?</h3>\n\n\n\n<p>There are two ways to install a package using npm − globally and locally.</p>\n\n\n\n<p><strong>Globally</strong>&nbsp;− This method is generally used to install development tools and CLI based packages. To install a package globally, use the following command.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g &lt;package-name>\n</code></pre>\n\n\n\n<p><strong>Locally</strong>&nbsp;− This method is generally used to install frameworks and libraries. A locally installed package can be used only within the directory it is installed. To install a package locally, use the same command as above without the −<strong>g</strong>&nbsp;flag.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install &lt;package-name>\n</code></pre>\n\n\n\n<p>Whenever we create a project using npm, we need to provide a package.json file, which has all the details about our project. npm makes it easy for us to set up this file. Let us set up our development project.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Fire up your terminal/cmd, create a new folder named hello-world and cd into it −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/environment_mkdir.jpg\" alt=\"Environment mkdir\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Now to create the package.json file using npm, use the following.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm init\n</code></pre>\n\n\n\n<p>It’ll ask you for the following information −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/environment_npm.jpg\" alt=\"Environment NPM\"/></figure>\n\n\n\n<p>Just keep pressing enter, and enter your name in the “author name” field.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Now we have our package.json file set up, we’ll install Koa. To install Koa and add it in our package.json file, use the following command.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save koa\n</code></pre>\n\n\n\n<p>To confirm Koa installed correctly, run the following command.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ls node_modules #(dir node_modules for windows)\n</code></pre>\n\n\n\n<p><strong>Tip</strong>&nbsp;− The&nbsp;<strong>&#8211;save</strong>&nbsp;flag can be replaced by&nbsp;<strong>-S</strong>&nbsp;flag. This flag ensures that Koa is added as a dependency to our package.json file. This has an advantage, the next time we need to install all the dependencies of our project, we just need to run the command npm install and it’ll find the dependencies in this file and install them for us.</p>\n\n\n\n<p>This is all we need to start development using the Koa framework. To make our development process a lot easier, we will install a tool from npm, nodemon. What this tool does is, it restarts our server as soon as we make a change in any of our files, otherwise we need to restart the server manually after each file modification. To install nodemon, use the following command.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g nodemon\n</code></pre>\n\n\n\n<p>Now we are all ready to dive into Koa!</p>\n","protected":false},"excerpt":{"rendered":"<p>To get started with developing using the Koa framework, you need to have Node and npm (node package manager) installed. If you don’t already have these, head over to&nbsp;Node setup&nbsp;to install node on your local system. Confirm that node and npm are installed by running the following commands in your terminal. You should receive an [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4013"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4013"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4013/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4013"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4013"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4013"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4014,"date":"2020-07-24T06:03:34","date_gmt":"2020-07-24T06:03:34","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=108"},"modified":"2020-07-24T06:03:34","modified_gmt":"2020-07-24T06:03:34","slug":"koa-js-hello-world","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-hello-world/","title":{"rendered":"Hello World"},"content":{"rendered":"\n<p>Once we have set up the development, it is time to start developing our first app using Koa. Create a new file called&nbsp;<strong>app.js</strong>&nbsp;and type the following in it.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar app = new koa();\n\napp.use(function* (){\n   this.body = 'Hello world!';\n});\n\napp.listen(3000, function(){\n   console.log('Server running on https://localhost:3000')\n});</code></pre>\n\n\n\n<p>Save the file, go to your terminal and type.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ nodemon app.js\n</code></pre>\n\n\n\n<p>This will start the server. To test this app, open your browser and go to&nbsp;<strong>https://localhost:3000</strong>&nbsp;and you should receive the following message.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/hello_world.jpg\" alt=\"Hello world\"/></figure>\n\n\n\n<h2>How This App Works?</h2>\n\n\n\n<p>The first line imports Koa in our file. We have access to its API through the variable Koa. We use it to create an application and assign it to var app.</p>\n\n\n\n<p><strong>app.use(function)</strong>&nbsp;− This function is a middleware, which gets called whenever our server gets a request. We&#8217;ll learn more about middleware in the subsequent chapters. The callback function is a generator, which we&#8217;ll see in the next chapter. The context of this generator is called context in Koa. This context is used to access and modify the request and response objects. We are setting the body of this response to be&nbsp;<strong>Hello world!</strong>.</p>\n\n\n\n<p><strong>app.listen(port, function)</strong>&nbsp;− This function binds and listens for connections on the specified port. Port is the only required parameter here. The callback function is executed, if the app runs successfully.</p>\n","protected":false},"excerpt":{"rendered":"<p>Once we have set up the development, it is time to start developing our first app using Koa. Create a new file called&nbsp;app.js&nbsp;and type the following in it. Save the file, go to your terminal and type. This will start the server. To test this app, open your browser and go to&nbsp;https://localhost:3000&nbsp;and you should receive [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4014"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4014"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4014/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4014"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4014"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4014"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4015,"date":"2020-07-24T06:04:32","date_gmt":"2020-07-24T06:04:32","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=110"},"modified":"2020-07-24T06:04:32","modified_gmt":"2020-07-24T06:04:32","slug":"koa-js-generators","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-generators/","title":{"rendered":"Generators"},"content":{"rendered":"\n<p>One of the most exciting new features of JavaScript ES6 is a new breed of function, called a generator. Before generators, the whole script was used to usually execute in a top to bottom order, without an easy way to stop code execution and resuming with the same stack later. Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n\n\n\n<p>Generators allow us to stop code execution in between. Hence, let’s take a look at a simple generator.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var generator_func = function* (){\n   yield 1;\n   yield 2;\n};\n\nvar itr = generator_func();\nconsole.log(itr.next());\nconsole.log(itr.next());\nconsole.log(itr.next());</code></pre>\n\n\n\n<p>When running the above code, following will be the result.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{ value: 1, done: false }\n{ value: 2, done: false }\n{ value: undefined, done: true }</code></pre>\n\n\n\n<p>Let’s look inside the above code. We first create a generator called&nbsp;<strong>generator_func()</strong>. We created an instance of this weird looking function and assigned it to&nbsp;<strong>itr</strong>. Then we started calling&nbsp;<strong>next()</strong>&nbsp;on this itr variable.</p>\n\n\n\n<p>Calling next() starts the generator and it runs until it hits a yield. Then it returns the object with value and done, where the value has the expression value. This expression can be anything. At this point, it pauses execution. Again when we call this function(next), the generator resumes execution from the last yield point with the function state being the same at the time of pause, till the next yield point. This is done till there are no more yield points in the code.</p>\n\n\n\n<h2>Generators in Koa</h2>\n\n\n\n<p>So why are we discussing generators in this tutorial. As you might remember from the hello world program, we used a&nbsp;<strong>function* ()</strong>&nbsp;notation to pass a callback to app.use(). Koa is an object, which contains an array of middleware generator functions, all of which are composed and executed in a stack-like manner upon each request. Koa also implements downstreaming followed by upstreaming of control flow.</p>\n\n\n\n<p>Take a look at the following example to understand this in a better way.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar app = koa();\n \napp.use(function* (next) {\n   //do something before yielding to next generator function \n   \n   //in line which will be 1st event in downstream\n   console.log(\"1\");\n   yield next;\n \n   //do something when the execution returns upstream, \n   //this will be last event in upstream\n   console.log(\"2\");\n});\napp.use(function* (next) {\n   // This shall be 2nd event downstream\n   console.log(\"3\");\n   yield next;\n \n   // This would be 2nd event upstream\n   console.log(\"4\");\n});\napp.use(function* () { \n   // Here it would be last function downstream\n   console.log(\"5\");\n   \n   // Set response body\n   this.body = \"Hello Generators\";\n\n   // First event of upstream (from the last to first)\n   console.log(\"6\");\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>When running the above code and navigating to&nbsp;<strong>https://localhost:3000/</strong>&nbsp;we get the following output on our console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n3\n5\n6\n4\n2</code></pre>\n\n\n\n<p>This is essentially how Koa uses generators. It allows us to create compact middleware using this property and write code for both upstream and downstream functionalities, thus saving us from callbacks.</p>\n","protected":false},"excerpt":{"rendered":"<p>One of the most exciting new features of JavaScript ES6 is a new breed of function, called a generator. Before generators, the whole script was used to usually execute in a top to bottom order, without an easy way to stop code execution and resuming with the same stack later. Generators are functions which can [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4015"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4015"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4015/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4015"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4015"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4015"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4016,"date":"2020-07-24T06:05:07","date_gmt":"2020-07-24T06:05:07","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=112"},"modified":"2020-07-24T06:05:07","modified_gmt":"2020-07-24T06:05:07","slug":"koa-js-routing","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-routing/","title":{"rendered":"Routing"},"content":{"rendered":"\n<p>Web frameworks provide resources such as HTML pages, scripts, images, etc. at different routes. Koa does not support routes in the core module. We need to use the Koa-router module to easily create routes in Koa. Install this module using the following command.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save koa-router\n</code></pre>\n\n\n\n<p>Now that we have Koa-router installed, let’s look at a simple GET route example.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar _ = router();              //Instantiate the router\n_.get('/hello', getMessage);   // Define routes\n\nfunction *getMessage() {\n   this.body = \"Hello world!\";\n};\n\napp.use(_.routes());           //Use the routes defined using the router\napp.listen(3000);</code></pre>\n\n\n\n<p>If we run our application and go to localhost:3000/hello, the server receives a get request at route &#8220;/hello&#8221;. Our Koa app executes the callback function attached to this route and sends &#8220;Hello World!&#8221; as the response.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/routing_hello.jpg\" alt=\"Routing Hello\"/></figure>\n\n\n\n<p>We can also have multiple different methods at the same route. For example,</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar _ = router(); //Instantiate the router\n\n_.get('/hello', getMessage);\n_.post('/hello', postMessage);\n\nfunction *getMessage() {\n\tthis.body = \"Hello world!\";\n};\nfunction *postMessage() {\n   this.body = \"You just called the post method at '/hello'!\\n\";\n};\napp.use(_.routes()); //Use the routes defined using the router\napp.listen(3000);</code></pre>\n\n\n\n<p>To test this request, open your terminal and use cURL to execute the following request</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -X POST \"https://localhost:3000/hello\"\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/routing_curl.jpg\" alt=\"Curl Routing\"/></figure>\n\n\n\n<p>A special method,&nbsp;<strong>all</strong>, is provided by express to handle all types of http methods at a particular route using the same function. To use this method, try the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>_.all('/test', allMessage);\n\nfunction *allMessage(){\n   this.body = \"All HTTP calls regardless of the verb will get this response\";\n};</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Web frameworks provide resources such as HTML pages, scripts, images, etc. at different routes. Koa does not support routes in the core module. We need to use the Koa-router module to easily create routes in Koa. Install this module using the following command. Now that we have Koa-router installed, let’s look at a simple GET [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4016"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4016"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4016/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4016"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4016"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4016"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4017,"date":"2020-07-24T06:06:03","date_gmt":"2020-07-24T06:06:03","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=114"},"modified":"2020-07-24T06:06:03","modified_gmt":"2020-07-24T06:06:03","slug":"koa-js-url-building","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-url-building/","title":{"rendered":"URL Building"},"content":{"rendered":"\n<p>We can now define routes; they are either static or fixed. To use dynamic routes, we need to provide different types of routes. Using dynamic routes allow us to pass parameters and process based on them. Following is an example of a dynamic route.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar _ = router();\n\n_.get('/:id', sendID);\n\nfunction *sendID() {\n   this.body = 'The id you specified is ' + this.params.id;\n}\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>To test this go to&nbsp;<strong>https://localhost:3000/123</strong>. You will get the following response.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/url_building_id.jpg\" alt=\"URL Building ID\"/></figure>\n\n\n\n<p>You can replace &#8216;123&#8217; in the URL with anything else and it&#8217;ll be reflected in the response. Following is a complex example of the above.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar _ = router();\n\n_.get('/things/:name/:id', sendIdAndName);\n\nfunction *sendIdAndName(){\n   this.body = 'id: ' + this.params.id + ' and name: ' + this.params.name;\n};\n\napp.use(_.routes());\n\napp.listen(3000);</code></pre>\n\n\n\n<p>You can use the&nbsp;<strong><em>this.params</em></strong>&nbsp;object to access all the parameters you pass in the URL. Note that the above two have different paths. They will never overlap. Also if you want to execute the code when you get &#8216;/things&#8217;, then you need to define it separately.</p>\n\n\n\n<h2>Pattern Matched Routes</h2>\n\n\n\n<p>You can also use regex to restrict URL parameter matching. Let&#8217;s say you need the id to be five digits long number. You can use the following route definition.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar _ = router();\n\n_.get('/things/:id(&#91;0-9]{5})', sendID);\n\nfunction *sendID(){\n   this.body = 'id: ' + this.params.id;\n}\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>Note that this will&nbsp;<strong>only</strong>&nbsp;match the requests that have a 5-digit long id. You can use more complex regexes to match/validate your routes. If none of your routes match the request, you&#8217;ll get a Not found message as response.</p>\n\n\n\n<p>For example, if we define the same routes as above, on requesting with a valid URL, we get −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/url_matching_correct.jpg\" alt=\"URL Matching Correct\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>We can now define routes; they are either static or fixed. To use dynamic routes, we need to provide different types of routes. Using dynamic routes allow us to pass parameters and process based on them. Following is an example of a dynamic route. To test this go to&nbsp;https://localhost:3000/123. You will get the following response. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4017"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4017"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4017/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4017"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4017"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4017"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4018,"date":"2020-07-24T06:06:31","date_gmt":"2020-07-24T06:06:31","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=116"},"modified":"2020-07-24T06:06:31","modified_gmt":"2020-07-24T06:06:31","slug":"koa-js-http-methods","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-http-methods/","title":{"rendered":"HTTP Methods"},"content":{"rendered":"\n<p>The HTTP method is supplied in the request and specifies the operation that the client has requested. The following table summarizes the commonly used HTTP methods.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td><strong>GET</strong>The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect.</td></tr><tr><td>2</td><td><strong>POST</strong>The POST method requests that the server accept the data enclosed in the request as a new object/entity of the resource identified by the URI.</td></tr><tr><td>3</td><td><strong>PUT</strong>The PUT method requests that the server accept the data enclosed in the request as a modification to the existing object identified by the URI. If it does not exist, then PUT method should create one.</td></tr><tr><td>4</td><td><strong>DELETE</strong>The DELETE method requests that the server delete the specified resource.</td></tr></tbody></table></figure>\n\n\n\n<p>These are the most common HTTP methods. To learn more about them, head over to https://www.codemeals.com/http/http_methods.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>The HTTP method is supplied in the request and specifies the operation that the client has requested. The following table summarizes the commonly used HTTP methods. Sr.No. Method &amp; Description 1 GETThe GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. 2 [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4018"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4018"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4018/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4018"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4018"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4018"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4019,"date":"2020-07-24T06:07:33","date_gmt":"2020-07-24T06:07:33","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=118"},"modified":"2020-07-24T06:07:33","modified_gmt":"2020-07-24T06:07:33","slug":"koa-js-request-object","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-request-object/","title":{"rendered":"Request Object"},"content":{"rendered":"\n<p>A Koa Request object is an abstraction on top of node&#8217;s vanilla request object, providing additional functionality that is useful for everyday HTTP server development. The Koa request object is embedded in the context object,&nbsp;<strong>this</strong>. Let’s log out the request object whenever we get a request.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar _ = router();\n\n_.get('/hello', getMessage);\n\nfunction *getMessage(){\n   console.log(this.request);\n   this.body = 'Your request has been logged.';\n}\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>When you run this code and navigate to&nbsp;<strong>https://localhost:3000/hello</strong>, then you will receive the following response.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/request_object.jpg\" alt=\"Request Object\"/></figure>\n\n\n\n<p>On your console, you&#8217;ll get the request object logged out.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{ \n   method: 'GET',\n   url: '/hello/',\n   header: \n   { \n      host: 'localhost:3000',\n      connection: 'keep-alive',\n      'upgrade-insecure-requests': '1',\n      'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) \n         AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',\n      accept: 'text/html,application/xhtml+xml,\n         application/xml;q = 0.9,image/webp,*/*;q = 0.8',\n      dnt: '1',\n      'accept-encoding': 'gzip, deflate, sdch',\n      'accept-language': 'en-US,en;q = 0.8' \n   }\n}</code></pre>\n\n\n\n<p>We have access to many useful properties of the request using this object. Let us look at some examples.</p>\n\n\n\n<h2>request.header</h2>\n\n\n\n<p>Provides all the request headers.</p>\n\n\n\n<h2>request.method</h2>\n\n\n\n<p>Provides the request method(GET, POST, etc.)</p>\n\n\n\n<h2>request.href</h2>\n\n\n\n<p>Provides the full request URL.</p>\n\n\n\n<h2>request.path</h2>\n\n\n\n<p>Provides the path of the request. Without query string and base url.</p>\n\n\n\n<h2>request.query</h2>\n\n\n\n<p>Gives the parsed query string. For example, if we log this on a request such as&nbsp;<strong>https://localhost:3000/hello/?name=Ayush&amp;age=20&amp;country=India</strong>, then we&#8217;ll get the following object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   name: 'Ayush',\n   age: '20',\n   country: 'India'\n}\n﻿</code></pre>\n\n\n\n<h2>request.accepts(type)</h2>\n\n\n\n<p>This function returns true or false based on whether the requested resources accept the given request type.</p>\n\n\n\n<p>You can read more about the request object in the docs at&nbsp;<a href=\"http://koajs.com/#request\" target=\"_blank\" rel=\"noreferrer noopener\">Request</a>.</p>\n","protected":false},"excerpt":{"rendered":"<p>A Koa Request object is an abstraction on top of node&#8217;s vanilla request object, providing additional functionality that is useful for everyday HTTP server development. The Koa request object is embedded in the context object,&nbsp;this. Let’s log out the request object whenever we get a request. When you run this code and navigate to&nbsp;https://localhost:3000/hello, then [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4019"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4019"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4019/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4019"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4019"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4019"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4020,"date":"2020-07-24T06:08:30","date_gmt":"2020-07-24T06:08:30","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=120"},"modified":"2020-07-24T06:08:30","modified_gmt":"2020-07-24T06:08:30","slug":"koa-js-response-object","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-response-object/","title":{"rendered":"Response Object"},"content":{"rendered":"\n<p>A Koa Response object is an abstraction on top of node&#8217;s vanilla response object, providing additional functionality that is useful for everyday HTTP server development. The Koa response object is embedded in the context object,&nbsp;<strong>this</strong>. Let’s log out the response object whenever we get a request.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar _ = router();\n\n_.get('/hello', getMessage);\n\nfunction *getMessage(){\n   this.body = 'Your request has been logged.';\n   console.log(this.response);\n}\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>When you run this code and navigate to&nbsp;<strong>https://localhost:3000/hello</strong>&nbsp;then you&#8217;ll receive the following response.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/request_object.jpg\" alt=\"Request Object\"/></figure>\n\n\n\n<p>On your console, you&#8217;ll get the request object logged out.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{ \n   status: 200,\n   message: 'OK',\n   header: \n   {\n      'content-type': 'text/plain; charset=utf-8',\n      'content-length': '12' \n   },\n   body: 'Your request has been logged.' \n}\n﻿</code></pre>\n\n\n\n<p>The status and message are automatically set by Koa but can be modified by us. If we don’t set the response body, the status code is set to 404. Once we set the response body, the status is set to 200 by default. We can explicitly override this behavior.</p>\n\n\n\n<p>We have access to many useful properties of the response using this object. Let us look at some examples −</p>\n\n\n\n<h2>response.header</h2>\n\n\n\n<p>Provides all the response headers.</p>\n\n\n\n<h2>response.status</h2>\n\n\n\n<p>Provides the response status (200, 404, 500, etc). This property is also used to set the response status.</p>\n\n\n\n<h2>response.message</h2>\n\n\n\n<p>Provides the response message. This property is also used to set custom messages with responses. It is associated with response.status.</p>\n\n\n\n<h2>response.body</h2>\n\n\n\n<p>Get or set the response body. Usually, we access it using the context object. This is just another way to access it. The body could be of the type: String, Buffer, Stream, Object or Null.</p>\n\n\n\n<h2>response.type</h2>\n\n\n\n<p>Get or set the content type of the current response.</p>\n\n\n\n<h2>response.get(field)</h2>\n\n\n\n<p>This function is used to get the values of headers with case insensitive value field.</p>\n\n\n\n<h2>response.set(field, value)</h2>\n\n\n\n<p>This function is used to set a header on the response using field and value pair.</p>\n\n\n\n<h2>response.remove(field)</h2>\n\n\n\n<p>This function is used to unset a header on the response using a field name.</p>\n\n\n\n<p>You can read more about the response object in the docs at&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http://koajs.com/#response\">Response</a>.</p>\n","protected":false},"excerpt":{"rendered":"<p>A Koa Response object is an abstraction on top of node&#8217;s vanilla response object, providing additional functionality that is useful for everyday HTTP server development. The Koa response object is embedded in the context object,&nbsp;this. Let’s log out the response object whenever we get a request. When you run this code and navigate to&nbsp;https://localhost:3000/hello&nbsp;then you&#8217;ll [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4020"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4020"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4020/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4020"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4020"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4020"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4021,"date":"2020-07-24T06:09:07","date_gmt":"2020-07-24T06:09:07","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=122"},"modified":"2020-07-24T06:09:07","modified_gmt":"2020-07-24T06:09:07","slug":"koa-js-redirects","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-redirects/","title":{"rendered":"Redirects"},"content":{"rendered":"\n<p>Redirection is very important when creating websites. If a malformed URL is requested or there are some errors on your server, you should redirect them to the respective error pages. Redirects can also be used to keep people out of restricted areas of your website.</p>\n\n\n\n<p>Let us create an error page and redirect to that page whenever someone requests a malformed URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\nvar _ = router();\n\n_.get('/not_found', printErrorMessage);\n_.get('/hello', printHelloMessage);\n\napp.use(_.routes());\napp.use(handle404Errors);\n\nfunction *printErrorMessage() {\n   this.status = 404;\n   this.body = \"Sorry we do not have this resource.\";\n}\nfunction *printHelloMessage() {\n   this.status = 200;\n   this.body = \"Hey there!\";\n}\nfunction *handle404Errors(next) {\n   if (404 != this.status) return;\n   this.redirect('/not_found');\n}\napp.listen(3000);</code></pre>\n\n\n\n<p>When we run this code and navigate to any route other than /hello, we&#8217;ll be redirected to /not_found. We have placed the middleware at the end (app.use function call to this middleware). This ensures we reach the middleware at last and send the corresponding response. Following are the results we see when we run the above code.</p>\n\n\n\n<p>When we navigate to&nbsp;<strong>https://localhost:3000/hello</strong>, we get −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/redirect_hello.jpg\" alt=\"Redirect Hello\"/></figure>\n\n\n\n<p>If we navigate to any other route, we get −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/redirect_error.jpg\" alt=\"Redirect Error\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Redirection is very important when creating websites. If a malformed URL is requested or there are some errors on your server, you should redirect them to the respective error pages. Redirects can also be used to keep people out of restricted areas of your website. Let us create an error page and redirect to that [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4021"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4021"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4021/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4021"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4021"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4021"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4022,"date":"2020-07-24T06:09:48","date_gmt":"2020-07-24T06:09:48","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=124"},"modified":"2020-07-24T06:09:48","modified_gmt":"2020-07-24T06:09:48","slug":"koa-js-error-handling","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-error-handling/","title":{"rendered":"Error Handling"},"content":{"rendered":"\n<p>Error handling plays an important part in building web applications. Koa uses middleware for this purpose as well.</p>\n\n\n\n<p>In Koa, you add a middleware that does&nbsp;<strong>try { yield next }</strong>&nbsp;as one of the first middleware. If we encounter any error downstream, we return to the associated catch clause and handle the error here. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar app = koa();\n\n//Error handling middleware\napp.use(function *(next) {\n   try {\n      yield next;\n   } catch (err) {\n      this.status = err.status || 500;\n      this.body = err.message;\n      this.app.emit('error', err, this);\n   }\n});\n\n//Create an error in the next middleware\n//Set the error message and status code and throw it using context object\n\napp.use(function *(next) {\n   //This will set status and message\n   this.throw('Error Message', 500);\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>We have deliberately created an error in the above code and are handling the error in our first middleware&#8217;s catch block. This is then emitted to our console as well as sent as the response to our client. Following is the error message we get when we trigger this error.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>InternalServerError: Error Message\n   at Object.module.exports.throw \n      (/home/ayushgp/learning/koa.js/node_modules/koa/lib/context.js:91:23)\n   at Object.&lt;anonymous> (/home/ayushgp/learning/koa.js/error.js:18:13)\n   at next (native)\n   at onFulfilled (/home/ayushgp/learning/koa.js/node_modules/co/index.js:65:19)\n   at /home/ayushgp/learning/koa.js/node_modules/co/index.js:54:5\n   at Object.co (/home/ayushgp/learning/koa.js/node_modules/co/index.js:50:10)\n   at Object.toPromise (/home/ayushgp/learning/koa.js/node_modules/co/index.js:118:63)\n   at next (/home/ayushgp/learning/koa.js/node_modules/co/index.js:99:29)\n   at onFulfilled (/home/ayushgp/learning/koa.js/node_modules/co/index.js:69:7)\n   at /home/ayushgp/learning/koa.js/node_modules/co/index.js:54:5</code></pre>\n\n\n\n<p>Right now any request sent to the server will result in this error.</p>\n","protected":false},"excerpt":{"rendered":"<p>Error handling plays an important part in building web applications. Koa uses middleware for this purpose as well. In Koa, you add a middleware that does&nbsp;try { yield next }&nbsp;as one of the first middleware. If we encounter any error downstream, we return to the associated catch clause and handle the error here. For example [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4022"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4022"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4022/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4022"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4022"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4022"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4023,"date":"2020-07-24T06:10:38","date_gmt":"2020-07-24T06:10:38","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=126"},"modified":"2020-07-24T06:10:38","modified_gmt":"2020-07-24T06:10:38","slug":"koa-js-cascading","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-cascading/","title":{"rendered":"Cascading"},"content":{"rendered":"\n<p>Middleware functions are functions that have access to the&nbsp;<strong>context object</strong>&nbsp;and the next middleware function in the application’s request-response cycle. These functions are used to modify the request and response objects for tasks such as parsing request bodies, adding response headers, etc. Koa goes a step further by yielding&nbsp;<strong>&#8216;downstream&#8217;</strong>, then flowing the control back&nbsp;<strong>&#8216;upstream&#8217;</strong>. This effect is called&nbsp;<strong>cascading</strong>.</p>\n\n\n\n<p>Following is a simple example of a middleware function in action.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar app = koa();\nvar _ = router();\n\n//Simple request time logger\napp.use(function* (next) {\n   console.log(\"A new request received at \" + Date.now());\n   \n   //This function call is very important. It tells that more processing is \n   //required for the current request and is in the next middleware function/route handler.\n   yield next;\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>The above middleware is called for every request on the server. Thus after every request, we will get the following message in the console.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>A new request received at 1467267512545\n</code></pre>\n\n\n\n<p>To restrict it to a specific route (and all its subroutes), we just need to create the routes like we did for routing. Actually its these middleware only that handle our request.</p>\n\n\n\n<p>For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar _ = router();\n\n//Simple request time logger\n_.get('/request/*', function* (next) {\n   console.log(\"A new request received at \" + Date.now());\n   yield next;\n});\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>Now whenever you request any subroute of &#8216;/request&#8217;, only then it&#8217;ll log the time.</p>\n\n\n\n<h2>Order of Middleware Calls</h2>\n\n\n\n<p>One of the most important things about middleware in Koa is that the order in which they are written/included in your file, are the order in which they are executed downstream. As soon as we hit a yield statement in a middleware, it switches to the next middleware in line, till we reach the last. Then again we start moving back up and resuming functions from yield statements.</p>\n\n\n\n<p>For example, in the following code snippet, the first function executes first till yield, then the second middleware till yield, then the third. As we have no more middleware here, we start moving back up, executing in a reverse order, i.e., third, second, first. This example summarizes how to use middleware the Koa way.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar app = koa();\n\n//Order of middlewares\napp.use(first);\napp.use(second);\napp.use(third);\n\nfunction *first(next) {\n   console.log(\"I'll be logged first. \");\n   \n   //Now we yield to the next middleware\n   yield next;\n   \n   //We'll come back here at the end after all other middlewares have ended\n   console.log(\"I'll be logged last. \");\n};\n\nfunction *second(next) {\n   console.log(\"I'll be logged second. \");\n   yield next;\n   console.log(\"I'll be logged fifth. \");\n};\n\nfunction *third(next) {\n   console.log(\"I'll be logged third. \");\n   yield next;\n   console.log(\"I'll be logged fourth. \");\n};\n\napp.listen(3000);</code></pre>\n\n\n\n<p>When we visit &#8216;/&#8217; after running this code, on our console we will get −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>I'll be logged first. \nI'll be logged second. \nI'll be logged third. \nI'll be logged fourth. \nI'll be logged fifth. \nI'll be logged last. </code></pre>\n\n\n\n<p>The following diagram summarizes what is actually happening in the above example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/middleware_desc.jpg\" alt=\"Middleware Desc\"/></figure>\n\n\n\n<p>Now that we know how to create our own middleware, let us discuss some of the most commonly used community created middleware.</p>\n\n\n\n<h3>Third Party Middleware</h3>\n\n\n\n<p>A list of third party middleware for express is available&nbsp;<a href=\"https://github.com/koajs/koa/wiki\" target=\"_blank\" rel=\"noreferrer noopener\">here.</a>&nbsp;Following are some of the most commonly used middleware −</p>\n\n\n\n<ul><li>koa-bodyparser</li><li>koa-router</li><li>koa-static</li><li>koa-compress</li></ul>\n\n\n\n<p>We&#8217;ll discuss multiple middleware in the subsequent chapters.</p>\n","protected":false},"excerpt":{"rendered":"<p>Middleware functions are functions that have access to the&nbsp;context object&nbsp;and the next middleware function in the application’s request-response cycle. These functions are used to modify the request and response objects for tasks such as parsing request bodies, adding response headers, etc. Koa goes a step further by yielding&nbsp;&#8216;downstream&#8217;, then flowing the control back&nbsp;&#8216;upstream&#8217;. This effect [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4023"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4023"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4023/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4023"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4023"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4023"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4024,"date":"2020-07-24T06:11:58","date_gmt":"2020-07-24T06:11:58","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=128"},"modified":"2020-07-24T06:11:58","modified_gmt":"2020-07-24T06:11:58","slug":"koa-js-templating","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-templating/","title":{"rendered":"Templating"},"content":{"rendered":"\n<p>Pug is a templating engine. Templating engines are used to remove the cluttering of our server code with HTML, concatenating strings wildly to existing HTML templates. Pug is a very powerful templating engine, which has a variety of features such as&nbsp;<strong>filters, includes, inheritance, interpolation</strong>, etc. There is a lot of ground to cover on this.</p>\n\n\n\n<p>To use Pug with Koa, we need to install it using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save pug koa-pug</code></pre>\n\n\n\n<p>Once pug is installed, set it as the templating engine for your app. Add the following code to your app.js file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar Pug = require('koa-pug');\nvar pug = new Pug({\n   viewPath: './views',\n   basedir: './views',\n   app: app //Equivalent to app.use(pug)\n});\n\nvar _ = router(); //Instantiate the router\n\napp.use(_.routes()); //Use the routes defined using the router\napp.listen(3000);</code></pre>\n\n\n\n<p>Now, create a new directory called views. Inside the directory, create a file named first_view.pug, and enter the following data in it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>doctype html\nhtml\n   head\n      title = \"Hello Pug\"\n   body\n      p.greetings#people Hello Views!</code></pre>\n\n\n\n<p>To run this page, add the following route to your app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>_.get('/hello', getMessage); // Define routes\n\nfunction *getMessage(){\n   this.render('first_view');\n};</code></pre>\n\n\n\n<p>You&#8217;ll receive the output as −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/hello_views.jpg\" alt=\"Hello Views\"/></figure>\n\n\n\n<p>What Pug does is, it converts this very simple looking markup to html. We don’t need to keep track of closing our tags, no need to use class and id keywords, rather use &#8216;.&#8217; and &#8216;#&#8217; to define them. The above code first gets converted to</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello Pug&lt;/title>\n   &lt;/head>\n    \n   &lt;body>\n      &lt;p class = \"greetings\" id = \"people\">Hello Views!&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Pug is capable of doing much more than simplifying HTML markup. Let’s explore some of these features of Pug.</p>\n\n\n\n<h2>Simple Tags</h2>\n\n\n\n<p>Tags are nested according to their indentation. Like in the above example,&nbsp;<strong>&lt;title&gt;</strong>&nbsp;was indented within the&nbsp;<strong>&lt;head&gt;</strong>&nbsp;tag, so it was inside it. However, the&nbsp;<strong>&lt;body&gt;</strong>&nbsp;tag was on the same indentation, thus it was a sibling of&nbsp;<strong>&lt;head&gt;</strong>&nbsp;tag.</p>\n\n\n\n<p>We don’t need to close tags. As soon as Pug encounters the next tag on the same or the outer indentation level, it closes the tag for us.</p>\n\n\n\n<p>There are three methods to put text inside of a tag −</p>\n\n\n\n<ul><li>Space seperated −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>h1 Welcome to Pug</code></pre>\n\n\n\n<ul><li>Piped text −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>div\n   | To insert multiline text, \n   | You can use the pipe operator.</code></pre>\n\n\n\n<ul><li>Block of text −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>div.\n   But that gets tedious if you have a lot of text. \n   You can use \".\" at the end of tag to denote block of text. \n   To put tags inside this block, simply enter tag in a new line and \n   indent it accordingly.</code></pre>\n\n\n\n<h2>Comments</h2>\n\n\n\n<p>Pug uses the same syntax as JavaScript(//) for creating comments. These comments are converted to html comments(&lt;!&#8211;comment&#8211;&gt;). For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//This is a Pug comment\n</code></pre>\n\n\n\n<p>This comment gets converted to −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!--This is a Pug comment-->\n</code></pre>\n\n\n\n<h2>Attributes</h2>\n\n\n\n<p>To define attributes, we use a comma separated list of attributes, in parenthesis. Class and ID attributes have special representations. The following line of code covers defining attributes, classes, and id for a given html tag.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>div.container.column.main#division(width = \"100\",height = \"100\")\n</code></pre>\n\n\n\n<p>This line of code, gets converted to −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"container column main\" id = \"division\" width = \"100\" height = \"100\">&lt;/div>\n</code></pre>\n\n\n\n<h2>Passing Values to Templates</h2>\n\n\n\n<p>When we render a Pug template, we can actually pass it a value from our route handler, which we can then use in our template. Create a new route handler with the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar Pug = require('koa-pug');\nvar pug = new Pug({\n   viewPath: './views',\n   basedir: './views',\n   app: app // equals to pug.use(app) and app.use(pug.middleware)\n});\n\nvar _ = router(); //Instantiate the router\n\n_.get('//dynamic_view', dynamicMessage); // Define routes\n\nfunction *dynamicMessage(){\n   this.render('dynamic', {\n      name: \"codemeals\", \n      url:\"https://www.codemeals.com\"\n   });\n};\n\napp.use(_.routes()); //Use the routes defined using the router\napp.listen(3000);</code></pre>\n\n\n\n<p>Then, create a new view file in the views directory, named dynamic.pug, using the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title = name\n   body\n      h1 = name\n      a(href = url) URL</code></pre>\n\n\n\n<p>Open <strong>localhost:3000/dynamic</strong> in your browser and get the result</p>\n\n\n\n<p>We can also use these passed variables within the text. To insert passed variables in between text of a tag, we use #{variableName} syntax. For example, in the above example, if we want to insert Greetings from codemeals, then we have to use the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title = name\n   body\n      h1 Greetings from #{name}\n      a(href = url) URL</code></pre>\n\n\n\n<p>This method of using values is called interpolation.</p>\n\n\n\n<h2>Conditionals</h2>\n\n\n\n<p>We can use conditional statements and looping constructs as well. Consider this practical example, if a user is logged in we would want to display &#8220;Hi, User&#8221; and if not, then we would want to show him a &#8220;Login/Sign Up&#8221; link. To achieve this, we can define a simple template such as −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title Simple template\n   body\n      if(user)\n         h1 Hi, #{user.name}\n      else\n         a(href = \"/sign_up\") Sign Up</code></pre>\n\n\n\n<p>When we render this using our routes, and if we pass an object like −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>this.render('/dynamic',{user: \n   {name: \"Ayush\", age: \"20\"}\n});</code></pre>\n\n\n\n<p>It&#8217;ll give a message displaying Hi, Ayush. However, if we don’t pass any object or pass one with no user key, then we will get a Sign up link.</p>\n\n\n\n<h2>Include and Components</h2>\n\n\n\n<p>Pug provides a very intuitive way to create components for a web page. For example, if you see a news website, the header with logo and categories is always fixed. Instead of copying that to every view, we can use an include. Following example shows how we can use an include −</p>\n\n\n\n<p>Create three views with the following code −</p>\n\n\n\n<h3>header.pug</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>div.header.\n   I'm the header for this website.</code></pre>\n\n\n\n<h3>content.pug</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title Simple template\n   body\n      include ./header.pug\n      h3 I'm the main content\n      include ./footer.pug</code></pre>\n\n\n\n<h3>footer.pug</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>div.footer.\n   I'm the footer for this website.</code></pre>\n\n\n\n<p>Create a route for this as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar Pug = require('koa-pug');\nvar pug = new Pug({\n   viewPath: './views',\n   basedir: './views',\n   app: app //Equivalent to app.use(pug)\n});\n\nvar _ = router(); //Instantiate the router\n\n_.get('/components', getComponents);\n\nfunction *getComponents(){\n   this.render('content.pug');\n}\n\napp.use(_.routes()); //Use the routes defined using the router\napp.listen(3000);</code></pre>\n\n\n\n<p>Go to&nbsp;<strong>localhost:3000/components</strong>, you should get the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/templating_components.jpg\" alt=\"Templating Components\"/></figure>\n\n\n\n<p><strong><em>include</em></strong>&nbsp;can also be used to include plaintext, CSS and JavaScript.</p>\n\n\n\n<p>There are many other features of Pug. However, those are out of the scope for this tutorial. You can further explore Pug at&nbsp;<a href=\"http://jade-lang.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Pug</a>.</p>\n","protected":false},"excerpt":{"rendered":"<p>Pug is a templating engine. Templating engines are used to remove the cluttering of our server code with HTML, concatenating strings wildly to existing HTML templates. Pug is a very powerful templating engine, which has a variety of features such as&nbsp;filters, includes, inheritance, interpolation, etc. There is a lot of ground to cover on this. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4024"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4024"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4024/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4024"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4024"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4024"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4025,"date":"2020-07-24T06:12:43","date_gmt":"2020-07-24T06:12:43","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=130"},"modified":"2020-07-24T06:12:43","modified_gmt":"2020-07-24T06:12:43","slug":"koa-js-form-data","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-form-data/","title":{"rendered":"Form Data"},"content":{"rendered":"\n<p>Forms are an integral part of the web. Almost every website we visit offers us forms that submit or fetch some information for us. To get started with forms, we will first install the koa-body. To install this, go to your terminal and use −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save koa-body\n</code></pre>\n\n\n\n<p>Replace your app.js file contents with the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar bodyParser = require('koa-body');\nvar app = koa();\n\n//Set up Pug\nvar Pug = require('koa-pug');\nvar pug = new Pug({\n   viewPath: './views',\n   basedir: './views',\n   app: app //Equivalent to app.use(pug)\n});\n\n//Set up body parsing middleware\napp.use(bodyParser({\n   formidable:{uploadDir: './uploads'},\n   multipart: true,\n   urlencoded: true\n}));\n\n_.get('/', renderForm);\n_.post('/', handleForm);\n\nfunction * renderForm(){\n   this.render('form');\n}\nfunction *handleForm(){\n   console.log(this.request.body);\n   console.log(this.req.body);\n   this.body = this.request.body; //This is where the parsed request is stored\n}\n\napp.use(_.routes()); \napp.listen(3000);</code></pre>\n\n\n\n<p>The new things we are doing here are importing the body parser and multer. We are using the body parser for parsing json and x-www-form-urlencoded header requests, while we use multer for parsing multipart/form-data.</p>\n\n\n\n<p>Let us create a html form to test this out! Create a new view named form.pug with the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title Form Tester\n   body\n      form(action = \"/\", method = \"POST\")\n         div\n            label(for = \"say\") Say: \n            input(name = \"say\" value = \"Hi\")\n         br\n         div\n            label(for = \"to\") To: \n            input(name = \"to\" value = \"Koa form\")\n         br\n         button(type = \"submit\") Send my greetings</code></pre>\n\n\n\n<p>Run your server using −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>nodemon index.js</code></pre>\n\n\n\n<p>Now go to localhost:3000/ and fill the form as you like, and submit it. You&#8217;ll receive the response as −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/form_received.jpg\" alt=\"Form Received\"/></figure>\n\n\n\n<p>Take a look at your console, it&#8217;ll show you the body of your request as a JavaScript object. For example −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/form_console.jpg\" alt=\"Form Console\"/></figure>\n\n\n\n<p>The&nbsp;<strong>this.request.body</strong>&nbsp;object contains your parsed request body. To use fields from that object, just use them as normal JS objects.</p>\n\n\n\n<p>This is just one way to send a request. There are many other ways, but those are irrelevant to cover here, because our Koa app will handle all those requests in the same way. To read more about different ways to make a request, have a look at&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Sending_forms_through_JavaScript\" target=\"_blank\" rel=\"noreferrer noopener\">this</a>&nbsp;page.</p>\n","protected":false},"excerpt":{"rendered":"<p>Forms are an integral part of the web. Almost every website we visit offers us forms that submit or fetch some information for us. To get started with forms, we will first install the koa-body. To install this, go to your terminal and use − Replace your app.js file contents with the following code. The [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4025"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4025"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4025/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4025"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4025"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4025"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4026,"date":"2020-07-24T06:13:44","date_gmt":"2020-07-24T06:13:44","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=132"},"modified":"2020-07-24T06:13:44","modified_gmt":"2020-07-24T06:13:44","slug":"koa-js-file-uploading","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-file-uploading/","title":{"rendered":"File Uploading"},"content":{"rendered":"\n<p>Web applications need to provide the functionality to allow file uploads. Let us see how we can receive files from the clients and store them on our server.</p>\n\n\n\n<p>We have already used the koa-body middleware for parsing requests. This middleware is also used for handling file uploads. Let us create a form that allows us to upload files and then save these files using Koa. First create a template named&nbsp;<strong>file_upload.pug</strong>&nbsp;with the following contents.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title File uploads\n   body\n      form(action = \"/upload\" method = \"POST\" enctype = \"multipart/form-data\")\n         div\n            input(type = \"text\" name = \"name\" placeholder = \"Name\")\n         \n         div\n            input(type = \"file\" name = \"image\")\n         \n         div\n            input(type = \"submit\")</code></pre>\n\n\n\n<p>Note that you need to give the same encoding type as above in your form. Now let us handle this data on our server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar bodyParser = require('koa-body');\nvar app = koa();\n\n//Set up Pug\nvar Pug = require('koa-pug');\nvar pug = new Pug({\n   viewPath: './views',\n   basedir: './views',\n   app: app \n});\n\n//Set up body parsing middleware\napp.use(bodyParser({\n   formidable:{uploadDir: './uploads'},    //This is where the files would come\n   multipart: true,\n   urlencoded: true\n}));\n\nvar _ = router(); //Instantiate the router\n\n_.get('/files', renderForm);\n_.post('/upload', handleForm);\n\nfunction * renderForm(){\n   this.render('file_upload');\n}\n\nfunction *handleForm(){\n   console.log(\"Files: \", this.request.body.files);\n   console.log(\"Fields: \", this.request.body.fields);\n   this.body = \"Received your data!\"; //This is where the parsed request is stored\n}\n\napp.use(_.routes()); \napp.listen(3000);</code></pre>\n\n\n\n<p>When you run this, you get the following form.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/file_upload_form.jpg\" alt=\"File Upload Form\"/></figure>\n\n\n\n<p>When you submit this, your console will produce the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/file_console_screen.jpg\" alt=\"File Console Screen\"/></figure>\n\n\n\n<p>The files that were uploaded are stored in the path in the above output. You can access the files in the request using&nbsp;<strong>this.request.body.files</strong>&nbsp;and the fields in that request by&nbsp;<strong>this.request.body.fields</strong>.</p>\n","protected":false},"excerpt":{"rendered":"<p>Web applications need to provide the functionality to allow file uploads. Let us see how we can receive files from the clients and store them on our server. We have already used the koa-body middleware for parsing requests. This middleware is also used for handling file uploads. Let us create a form that allows us [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4026"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4026"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4026/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4026"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4026"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4026"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4027,"date":"2020-07-24T06:14:18","date_gmt":"2020-07-24T06:14:18","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=134"},"modified":"2020-07-24T06:14:18","modified_gmt":"2020-07-24T06:14:18","slug":"koa-js-static-files","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-static-files/","title":{"rendered":"Static Files"},"content":{"rendered":"\n<p>Static files are files that clients download as they are from the server. Create a new directory,&nbsp;<strong>public</strong>. Express, by default doesn&#8217;t allow you to serve static files.</p>\n\n\n\n<p>We need a middleware to serve this purpose. Go ahead and install&nbsp;<strong>koa-serve</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save koa-static\n</code></pre>\n\n\n\n<p>Now we need to&nbsp;<strong>use</strong>&nbsp;this middleware. Before that create a directory called public. We will store all our static files here. This allows us to keep our server code secure as nothing above this public folder would be accessible to the clients. After you&#8217;ve created a public directory, create a file named&nbsp;<strong>hello.txt</strong>&nbsp;in it with any content you like. Now add the following to your app.js.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var serve = require('koa-static');\nvar koa = require('koa');\nvar app = koa();\n\napp.use(serve('./public'));\n\napp.listen(3000);</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Koa looks up the files relative to the static directory, so the name of the static directory is not part of the URL. The root route is now set to your public dir, so all static files you load will be considering public as the root. To test that this is working fine, run your app and visit&nbsp;<strong>https://localhost:3000/hello.txt</strong></p>\n\n\n\n<p>You should get the following output. Note that this is not a HTML document or Pug view, rather it is a simple txt file.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/static_files.jpg\" alt=\"Static Files\"/></figure>\n\n\n\n<h2>Multiple Static Dirs</h2>\n\n\n\n<p>We can also set multiple static assets directories using −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var serve = require('koa-static');\nvar koa = require('koa');\nvar app = koa();\n\napp.use(serve('./public'));\napp.use(serve('./images'));\n\napp.listen(3000);</code></pre>\n\n\n\n<p>Now when we request a file, Koa will search these directories and send us the matching file.</p>\n","protected":false},"excerpt":{"rendered":"<p>Static files are files that clients download as they are from the server. Create a new directory,&nbsp;public. Express, by default doesn&#8217;t allow you to serve static files. We need a middleware to serve this purpose. Go ahead and install&nbsp;koa-serve&nbsp;− Now we need to&nbsp;use&nbsp;this middleware. Before that create a directory called public. We will store all [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4027"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4027"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4027/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4027"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4027"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4027"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4028,"date":"2020-07-24T06:15:05","date_gmt":"2020-07-24T06:15:05","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=136"},"modified":"2020-07-24T06:15:05","modified_gmt":"2020-07-24T06:15:05","slug":"koa-js-cookies","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-cookies/","title":{"rendered":"Cookies"},"content":{"rendered":"\n<p>Cookies are simple, small files/data that are sent to client with a server request and stored on the client side. Every time the user loads the website back, this cookie is sent with the request. This helps keep track of the users actions. There are numerous uses of HTTP Cookies.</p>\n\n\n\n<ul><li>Session management</li><li>Personalization(Recommendation systems)</li><li>User tracking</li></ul>\n\n\n\n<p>To use cookies with Koa, we have the functions:&nbsp;<strong>ctx.cookies.set()</strong>&nbsp;and&nbsp;<strong>ctx.cookies.get()</strong>. To set a new cookie, let’s define a new route in our Koa app.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\n_.get('/', setACookie);\n\nfunction *setACookie() {\n   this.cookies.set('foo', 'bar', {httpOnly: false});\n}\n\nvar _ = router();\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>To check if the cookie is set or not, just go to your browser, fire up the console, and enter −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log(document.cookie);\n</code></pre>\n\n\n\n<p>This will produce the following output (you may have more cookies set maybe due to extensions in your browser).</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>\"foo = bar\"\n</code></pre>\n\n\n\n<p>Here is an example of the above.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/cookie.jpg\" alt=\"Cookie\"/></figure>\n\n\n\n<p>The browser also sends back cookies every time it queries the server. To view a cookie on your server, on the server console in a route, add the following code to that route.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log('Cookies: foo = ', this.cookies.get('foo'));\n</code></pre>\n\n\n\n<p>Next time you send a request to this route, you&#8217;ll get the following output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Cookies: foo = bar\n</code></pre>\n\n\n\n<h2>Adding Cookies with Expiration Time</h2>\n\n\n\n<p>You can add cookies that expire. To add a cookie that expires, just pass an object with the property &#8216;expires&#8217; set to the time when you want it to expire. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\n_.get('/', setACookie);\n\nfunction *setACookie(){\n   //Expires after 360000 ms from the time it is set.\n\tthis.cookies.set('name', 'value', { \n      httpOnly: false, expires: 360000 + Date.now() });\n}\n\nvar _ = router();\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<h2>Deleting Existing Cookies</h2>\n\n\n\n<p>To unset a cookie, simply set the cookie to an empty string. For example, if you need to clear a cookie named&nbsp;<strong>foo</strong>, use the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\n_.get('/', setACookie);\n\nfunction *setACookie(){\n   //Expires after 360000 ms from the time it is set.\n   this.cookies.set('name', '');\n}\n\nvar _ = router();\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>This will unset the said cookie. Note that you should leave the&nbsp;<strong>HttpOnly</strong>&nbsp;option to be true when not using the cookie in the client side code.</p>\n","protected":false},"excerpt":{"rendered":"<p>Cookies are simple, small files/data that are sent to client with a server request and stored on the client side. Every time the user loads the website back, this cookie is sent with the request. This helps keep track of the users actions. There are numerous uses of HTTP Cookies. Session management Personalization(Recommendation systems) User [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4028"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4028"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4028/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4028"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4028"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4028"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4029,"date":"2020-07-24T06:15:46","date_gmt":"2020-07-24T06:15:46","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=138"},"modified":"2020-07-24T06:15:46","modified_gmt":"2020-07-24T06:15:46","slug":"koa-js-sessions","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-sessions/","title":{"rendered":"Sessions"},"content":{"rendered":"\n<p>HTTP is stateless, hence in order to associate a request to any other request, you need a way to store user data between HTTP requests. Cookies and URL parameters are both suitable ways to transport data between the client and the server. However, they are both readable on the client side. Sessions solve exactly this problem. You assign the client an ID and it makes all further requests using that ID. Information associated with the client is stored on the server linked to this ID.</p>\n\n\n\n<p>We&#8217;ll need the koa-session, thus install it using −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save koa-session\n</code></pre>\n\n\n\n<p>We will put the&nbsp;<strong>koa-session</strong>&nbsp;middleware in place. In this example, we&#8217;ll use the RAM to store sessions. Never use this in production environments. The session middleware handles everything, i.e. creating the session, setting the session cookie, and creating the session object in context object.</p>\n\n\n\n<p>Whenever we make a request from the same client again, we will have their session information stored with us (given that server was not restarted). We can add more properties to this session object. In the following example, we will create a view counter for a client.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var session = require('koa-session');\nvar koa = require('koa');\nvar app = koa();\n\napp.keys = &#91;'Shh, its a secret!'];\napp.use(session(app));  // Include the session middleware\n\napp.use(function *(){\n   var n = this.session.views || 0;\n   this.session.views = ++n;\n   \n   if(n === 1)\n      this.body = 'Welcome here for the first time!';\n   else\n      this.body = \"You've visited this page \" + n + \" times!\";\n})\n\napp.listen(3000);</code></pre>\n\n\n\n<p>What the above code does is, when a user visits the site, it creates a new session for the user and assigns a cookie. Next time the user visits, the cookie is checked and the page_view session variable is updated accordingly.</p>\n\n\n\n<p>Now if you run the app and go to&nbsp;<strong>localhost:3000,</strong>&nbsp;you&#8217;ll get the following response.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/session_first.jpg\" alt=\"Session First\"/></figure>\n\n\n\n<p>If you revisit the page, the page counter will increase. In this case, the page was refreshed 12 times.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/session_12.jpg\" alt=\"Session 12\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>HTTP is stateless, hence in order to associate a request to any other request, you need a way to store user data between HTTP requests. Cookies and URL parameters are both suitable ways to transport data between the client and the server. However, they are both readable on the client side. Sessions solve exactly this [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4029"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4029"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4029/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4029"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4029"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4029"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4030,"date":"2020-07-24T06:16:30","date_gmt":"2020-07-24T06:16:30","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=140"},"modified":"2020-07-24T06:16:30","modified_gmt":"2020-07-24T06:16:30","slug":"koa-js-authentication","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-authentication/","title":{"rendered":"Authentication"},"content":{"rendered":"\n<p>Authentication is a process in which the credentials provided are compared to those on file in the database of authorized users&#8217; information on a local operating system or within an authentication server. If the credentials match, the process is completed and the user is granted authorization for access.</p>\n\n\n\n<p>We&#8217;ll be creating a very basic authentication system that&#8217;ll use&nbsp;<strong>Basic HTTP Authentication</strong>. This is the simplest possible way to enforce access control as it doesn&#8217;t require cookies, sessions, or anything else. To use this, the client has to send the Authorization header along with every request it makes. The username and password are not encrypted, but are concatenated in a single string like the following.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>username:password\n</code></pre>\n\n\n\n<p>This string is encoded with Base64, and the word Basic is put before this value. For example, if your username is Ayush and password India, then the string&nbsp;<strong>&#8220;Ayush:India&#8221;</strong>&nbsp;would be sent as encoded in the authorization header.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Authorization: Basic QXl1c2g6SW5kaWE=\n</code></pre>\n\n\n\n<p>To implement this in your koa app, you&#8217;ll need the koa-basic-auth middleware. Install it using −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save koa-basic-auth\n</code></pre>\n\n\n\n<p>Now open your app.js file and enter the following code in it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//This is what the authentication would be checked against\nvar credentials = { name: 'Ayush', pass: 'India' }\n\nvar koa = require('koa');\nvar auth = require('koa-basic-auth');\nvar _ = require('koa-router')();\n\nvar app = koa();\n\n//Error handling middleware\napp.use(function *(next){\n   try {\n      yield next;\n   } catch (err) {\n      if (401 == err.status) {\n         this.status = 401;\n         this.set('WWW-Authenticate', 'Basic');\n         this.body = 'You have no access here';\n      } else {\n         throw err;\n      }\n   }\n});\n\n// Set up authentication here as first middleware. \n// This returns an error if user is not authenticated.\n_.get('/protected', auth(credentials), function *(){\n   this.body = 'You have access to the protected area.';\n   yield next;\n});\n\n// No authentication middleware present here.\n_.get('/unprotected', function*(next){\n   this.body = \"Anyone can access this area\";\n   yield next;\n});\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>We have created an error handling middleware to handle all authentication related errors. Then, we have created 2 routes −</p>\n\n\n\n<ul><li><strong>/protected</strong>&nbsp;− This route can only be accessed if the user sends the correct authentication header. For all others, it&#8217;ll give an error.</li><li><strong>/unprotected</strong>&nbsp;− This route can be accessed by anyone, with or without the authentication.</li></ul>\n\n\n\n<p>Now if you send a request to /protected without an authentication header or with the wrong credentials, you&#8217;ll receive an error. For example,</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ curl https://localhost:3000/protected\n</code></pre>\n\n\n\n<p>You&#8217;ll receive the response as −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>HTTP/1.1 401 Unauthorized\nWWW-Authenticate: Basic\nContent-Type: text/plain; charset=utf-8\nContent-Length: 28\nDate: Sat, 17 Sep 2016 19:05:56 GMT\nConnection: keep-alive\n\nPlease authenticate yourself</code></pre>\n\n\n\n<p>However, with the right credentials, you&#8217;ll get the expected response. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ curl -H \"Authorization: basic QXl1c2g6SW5kaWE=\" https://localhost:3000/protected -i\n﻿</code></pre>\n\n\n\n<p>You&#8217;ll get the response as −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>HTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nContent-Length: 38\nDate: Sat, 17 Sep 2016 19:07:33 GMT\nConnection: keep-alive\n\nYou have access to the protected area.</code></pre>\n\n\n\n<p>The /unprotected route is still accessible to everyone.</p>\n","protected":false},"excerpt":{"rendered":"<p>Authentication is a process in which the credentials provided are compared to those on file in the database of authorized users&#8217; information on a local operating system or within an authentication server. If the credentials match, the process is completed and the user is granted authorization for access. We&#8217;ll be creating a very basic authentication [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4030"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4030"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4030/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4030"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4030"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4030"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4031,"date":"2020-07-24T06:17:45","date_gmt":"2020-07-24T06:17:45","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=142"},"modified":"2020-07-24T06:17:45","modified_gmt":"2020-07-24T06:17:45","slug":"koa-js-compression","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-compression/","title":{"rendered":"Compression"},"content":{"rendered":"\n<p>Compression is a simple, effective way to save bandwidth and speed up your site. It is only compatible with modern browsers and should be used with caution if your users use legacy browsers as well.</p>\n\n\n\n<p>When sending responses from the server, if compression is used, it can greatly improve the load time. We&#8217;ll be using a middleware called&nbsp;<strong>koa-compress</strong>&nbsp;to take care of the compression of files as well as setting appropriate headers.</p>\n\n\n\n<p>Go ahead and install the middleware using −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save koa-compress\n</code></pre>\n\n\n\n<p>Now in your app.js file, add the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar app = koa();\n\nvar Pug = require('koa-pug');\nvar pug = new Pug({\n   viewPath: './views',\n   basedir: './views',\n   app: app //Equivalent to app.use(pug)\n});\n\napp.use(compress({\n   filter: function (content_type) {\n      return /text/i.test(content_type)\n   },\n   threshold: 2048,\n   flush: require('zlib').Z_SYNC_FLUSH\n}));\n\nvar _ = router(); //Instantiate the router\n\n_.get('/', getRoot);\n\nfunction *getRoot(next){\n   this.render('index');\n}\n\napp.use(_.routes()); //Use the routes defined using the router\napp.listen(3000);</code></pre>\n\n\n\n<p>This puts our compression middleware in place. The filter option is a function that checks the response content type to decide whether to compress. The threshold option is the minimum response size in bytes to compress. This ensures we don’t compress every little response.</p>\n\n\n\n<p>Following is a response without compression.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/uncompressed.jpg\" alt=\"Uncompressed\"/></figure>\n\n\n\n<p>Following is the similar response with compression.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/compressed.jpg\" alt=\"Compressed\"/></figure>\n\n\n\n<p>If you look at the size tab at the bottom, you can very well see the difference between the two. There is more than 150% improvement, when we compress the files.</p>\n","protected":false},"excerpt":{"rendered":"<p>Compression is a simple, effective way to save bandwidth and speed up your site. It is only compatible with modern browsers and should be used with caution if your users use legacy browsers as well. When sending responses from the server, if compression is used, it can greatly improve the load time. We&#8217;ll be using [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4031"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4031"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4031/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4031"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4031"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4031"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4032,"date":"2020-07-24T06:18:25","date_gmt":"2020-07-24T06:18:25","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=144"},"modified":"2020-07-24T06:18:25","modified_gmt":"2020-07-24T06:18:25","slug":"koa-js-caching","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-caching/","title":{"rendered":"Caching"},"content":{"rendered":"\n<p>Caching is the term for storing reusable responses in order to make subsequent requests faster. Every browser ships with an implementation of a HTTP cache. All we have to do is ensure that each server response provides correct HTTP header directives to instruct the browser on when and for how long the response can be cached by the browser.</p>\n\n\n\n<p>Following are some benefits of including caching in your web apps −</p>\n\n\n\n<ul><li>Your network costs decrease. If your content is cached, you&#8217;ll need to send less of it for every subsequent request.</li><li>Speed and performance of your website increases.</li><li>Your content can be made available even if your client is offline.</li></ul>\n\n\n\n<p>We&#8217;ll be using the koa-static-cache middleware to implement caching in our app. Install these middleware using −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save koa-static-cache\n</code></pre>\n\n\n\n<p>Go to your app.js file and add the following code to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar app = koa();\n\nvar path = require('path');\nvar staticCache = require('koa-static-cache');\n\napp.use(staticCache(path.join(__dirname, 'public'), {\n   maxAge: 365 * 24 * 60 * 60  //Add these files to caches for a year\n}))\n\napp.listen(3000);</code></pre>\n\n\n\n<p>The&nbsp;<strong>koa-static-cache</strong>&nbsp;middleware is used to cache server responses on the client side. The&nbsp;<strong>cache-control</strong>&nbsp;header is set according to the options we provide while initializing the cache object. We have set the expiration time of this cached response to 1 year. Following are the comparisons of request we have sent before and after the file was cached.</p>\n\n\n\n<p>Before this file was cached, the returned status code was 200, which is OK. The response headers had multiple information regarding the content to be cached and had also given an&nbsp;<strong>ETag</strong>&nbsp;for the content.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/before_cache.jpg\" alt=\"Before Cache\"/></figure>\n\n\n\n<p>The next time the request was sent, it was sent along with the ETtag. Since our content hadn&#8217;t changed on the server, its corresponding ETag also remained the same and the client was told that the copy it has locally is up-to-date with what the server would provide and should use the local one instead of requesting again.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/after_cache.jpg\" alt=\"After Cache\"/></figure>\n\n\n\n<p><strong>Note</strong>&nbsp;− For invalidating any cached file, you just need to change its file name and update its reference. This will ensure that you have a new file to send to the client and the client can’t load it back from the cache.</p>\n","protected":false},"excerpt":{"rendered":"<p>Caching is the term for storing reusable responses in order to make subsequent requests faster. Every browser ships with an implementation of a HTTP cache. All we have to do is ensure that each server response provides correct HTTP header directives to instruct the browser on when and for how long the response can be [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4032"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4032"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4032/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4032"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4032"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4032"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4033,"date":"2020-07-24T06:21:11","date_gmt":"2020-07-24T06:21:11","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=146"},"modified":"2020-07-24T06:21:11","modified_gmt":"2020-07-24T06:21:11","slug":"koa-js-database","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-database/","title":{"rendered":"Database"},"content":{"rendered":"\n<p>We are receiving the requests, but are not storing them anywhere. We need a Database to store the data. We&#8217;ll use a famous NoSQL database called <strong>MongoDB</strong>.</p>\n\n\n\n<p>In order to use Mongo with Koa, we need a client API for the node. There are multiple options for us, however for this tutorial we&#8217;ll stick to&nbsp;<a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"noreferrer noopener\">mongoose</a>. Mongoose is used for&nbsp;<strong>document modeling</strong>&nbsp;in Node for MongoDB. Document modeling means that, we will create a&nbsp;<strong>Model</strong>&nbsp;(much like a&nbsp;<strong>class</strong>&nbsp;in document-oriented programming), and then we will produce&nbsp;<strong>documents</strong>&nbsp;using this Model (like we create&nbsp;<strong>documents of a class</strong>&nbsp;in OOP). All our processing will be done on these &#8220;documents&#8221;, then finally, we will write these documents in our database.</p>\n\n\n\n<h2>Setting Up Mongoose</h2>\n\n\n\n<p>Now that we have Mongo installed, let us install mongoose, the same way we have been installing our other node packages.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save mongoose\n</code></pre>\n\n\n\n<p>Before we start using mongoose, we have to create a database using the Mongo shell. To create a new database, open your terminal and enter &#8220;mongo&#8221;. A Mongo shell will start, enter the following.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>use my_db\n</code></pre>\n\n\n\n<p>A new database will be created for you. Whenever you open the Mongo shell, it&#8217;ll default to &#8220;test&#8221; db and you&#8217;ll have to change to your database using the same command as above.</p>\n\n\n\n<p>To use mongoose, we will require it in our app.js file and then connect to the mongod service running on mongodb://localhost</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar _ = require('koa-router')();\nvar app = koa();\n\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/my_db');\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>Now our app is connected to our database, let’s create a new Model. This model will act as a collection in our database. To create a new Model, use the following code, before defining any routes.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar _ = require('koa-router')();\nvar app = koa();\n\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/my_db');\n\nvar personSchema = mongoose.Schema({\n   name: String,\n   age: Number,\n   nationality: String\n});\n\nvar Person = mongoose.model(\"Person\", personSchema);\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>The above code defines the schema for a person and is used to create a mongoose Model&nbsp;<strong>Person</strong>.</p>\n\n\n\n<h2>Saving Documents</h2>\n\n\n\n<p>Now we will create a new html form, which will get the details of a person and save it to our database. To create the form, create a new view file called person.pug in the views directory with the following content.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title Person\n   body\n      form(action = \"/person\", method = \"POST\")\n         div\n            label(for = \"name\") Name: \n            input(name = \"name\")\n         br\n         div\n            label(for = \"age\") Age: \n            input(name = \"age\")\n         br\n         div\n            label(for = \"nationality\") Nationality: \n            input(name = \"nationality\")\n         br\n         button(type = \"submit\") Create new person</code></pre>\n\n\n\n<p>Also add a new get route in index.js to render this document.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar _ = require('koa-router')();\nvar app = koa();\n\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/my_db');\n\nvar personSchema = mongoose.Schema({\n   name: String,\n   age: Number,\n   nationality: String\n});\n\nvar Person = mongoose.model(\"Person\", personSchema);\n\n_.get('/person', getPerson);\n\nfunction *getPerson(next){\n   this.render('person');\n   yield next;\n}\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>Go to localhost:3000/person to check if our form is displaying right. Note that this is just the UI, it’s not working yet. This is how our form looks.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/mongoose_create.jpg\" alt=\"Mongoose Create\"/></figure>\n\n\n\n<p>We&#8217;ll now define a post route handler at &#8216;/person&#8217; which will handle this request.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar _ = require('koa-router')();\nvar app = koa();\n\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/my_db');\n\nvar personSchema = mongoose.Schema({\n   name: String,\n   age: Number,\n   nationality: String\n});\n\nvar Person = mongoose.model(\"Person\", personSchema);\n\n_.post('/person', createPerson);\n\nfunction *createPerson(next){\n   var self = this;\n   var personInfo = self.request.body; //Get the parsed information\n   \n   if(!personInfo.name || !personInfo.age || !personInfo.nationality){\n      self.render(\n         'show_message', {message: \"Sorry, you provided wrong info\", type: \"error\"});\n   } else {\n      var newPerson = new Person({\n         name: personInfo.name,\n         age: personInfo.age,\n         nationality: personInfo.nationality\n      });\n      yield newPerson.save(function(err, res) {\n         if(err)\n            self.render('show_message', \n               {message: \"Database error\", type: \"error\"});\n         else\n            self.render('show_message', \n               {message: \"New person added\", type: \"success\", person: personInfo});\n      });\n   }\n}\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>In the above code, if we receive any empty field or do not receive any field, we will send an error response. However, if we receive a well-formed document, then we create a newPerson document from the Person model and save it to our DB using&nbsp;<strong>newPerson.save()</strong>&nbsp;function. This is defined in mongoose and accepts a callback as argument. This callback has two arguments,&nbsp;<strong>error</strong>&nbsp;and&nbsp;<strong>response</strong>. This will render show_message view, so we need to create that as well.</p>\n\n\n\n<p>To show the response from this route, we will also need to create a&nbsp;<strong>show_message</strong>&nbsp;view. Create a new view with the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title Person\n   body\n      if(type = \"error\")\n         h3(style = \"color:red\") #{message}\n      else\n         h3 New person, name: \n            #{person.name}, age: \n            #{person.age} and nationality: \n            #{person.nationality} added!</code></pre>\n\n\n\n<p>Following is the response we receive on successfully submitting the form (show_message.pug).</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/mongoose_response.jpg\" alt=\"Mongoose Response\"/></figure>\n\n\n\n<p>We now have an interface to create persons!</p>\n\n\n\n<h2>Retrieving Documents</h2>\n\n\n\n<p>Mongoose provides a lot of functions for retrieving documents, we will focus on three of those. All these functions also take a callback as the last parameter, and just like the save function, their arguments are error and response.</p>\n\n\n\n<p>The three functions are −</p>\n\n\n\n<h3>Model.find(conditions, callback)</h3>\n\n\n\n<p>This function finds all the documents matching the fields in conditions object. Same operators used in Mongo also work in mongoose. For example, this will fetch all the documents from the persons’ collection.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.find(function(err, response){\n   console.log(response);\n});</code></pre>\n\n\n\n<p>This will fetch all documents where the field name is &#8220;Ayush&#8221; and age is 20.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.find({name: \"Ayush\", age: 20}, \n   function(err, response){\n      console.log(response);\n   });</code></pre>\n\n\n\n<p>We can also provide the projection we need, i.e., the fields we need. For example, if we want only the&nbsp;<strong>names</strong>&nbsp;of the people whose&nbsp;<strong>nationality</strong>&nbsp;is&nbsp;<em>&#8220;Indian&#8221;</em>, we use −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.find({nationality: \"Indian\"}, \n   \"name\", function(err, response) {\n      console.log(response);\n   });</code></pre>\n\n\n\n<h3>Model.findOne(conditions, callback)</h3>\n\n\n\n<p>This functions always fetches a single, most relevant document. It has the same exact arguments as Model.find().</p>\n\n\n\n<h3>Model.findById(id, callback)</h3>\n\n\n\n<p>This function takes in the&nbsp;<strong>_id</strong>&nbsp;(defined by mongo) as the first argument, an optional projection string and a callback to handle the response. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.findById(\"507f1f77bcf86cd799439011\", \n   function(err, response){\n      console.log(response);\n   });</code></pre>\n\n\n\n<p>Let&#8217;s create a route to view all people records.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar _ = require('koa-router')();\nvar app = koa();\n\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/my_db');\n\nvar personSchema = mongoose.Schema({\n   name: String,\n   age: Number,\n   nationality: String\n});\n\nvar Person = mongoose.model(\"Person\", personSchema);\n\n_.get('/people', getPeople);\nfunction *getPeople(next){\n   var self = this;\n   \n   yield Person.find(function(err, response){\n      self.body = response;\n   });\n}\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<h2>Updating Documents</h2>\n\n\n\n<p>Mongoose provides three functions to update documents.</p>\n\n\n\n<h3>Model.update(condition, updates, callback)</h3>\n\n\n\n<p>This function takes a condition and an updates the object as input and applies the changes to all the documents matching the conditions in the collection. For example, the following code will update all Person documents to have a nationality &#8220;American&#8221;.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.update({age: 25},\n   {nationality: \"American\"}, \n   function(err, response){\n      console.log(response);\n   });</code></pre>\n\n\n\n<h3>Model.findOneAndUpdate(condition, updates, callback)</h3>\n\n\n\n<p>It does exactly what is says. Finds one document based on the query and updates that according to the second argument. It also takes a callback as the last argument. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.findOneAndUpdate({name: \"Ayush\"}, \n   {age: 40}, \n   function(err, response){\n      console.log(response);\n   });</code></pre>\n\n\n\n<h3>Model.findByIdAndUpdate(id, updates, callback)</h3>\n\n\n\n<p>This function updates a single document identified by its id. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.findByIdAndUpdate(\"507f1f77bcf86cd799439011\", \n   {name: \"James\"}, \n   function(err, response){\n      console.log(response);\n   });</code></pre>\n\n\n\n<p>Let’s create a route to update people. This will be a PUT route with the id as a parameter and details in the payload.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar _ = require('koa-router')();\nvar app = koa();\nvar mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/my_db');\n\nvar personSchema = mongoose.Schema({\n   name: String,\n   age: Number,\n   nationality: String\n});\n\nvar Person = mongoose.model(\"Person\", personSchema);\n\n_.put('/people/:id', updatePerson);\n\nfunction *updatePerson() {\n   var self = this;\n   yield Person.findByIdAndUpdate(self.params.id, \n      {$set: {self.request.body}}, function(err, response){\n      \n      if(err) {\n         self.body = {\n            message: \"Error in updating person with id \" + self.params.id};\n      } else {\n         self.body = response;\n      }\n   });\n}\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>To test this route, enter the following in your terminal (replace the id with an id from your created people).</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -X PUT --data \"name = James&amp;age = 20&amp;nationality = American\" https://localhost:3000/people/507f1f77bcf86cd799439011</code></pre>\n\n\n\n<p>This will update the document associated with the id provided in the route with the above details.</p>\n\n\n\n<h2>Deleting Documents</h2>\n\n\n\n<p>We have covered&nbsp;<strong>C</strong>reate,&nbsp;<strong>R</strong>ead and&nbsp;<strong>U</strong>pdate, now we&#8217;ll see how mongoose can be used to Delete documents. There are three functions here, exactly like update.</p>\n\n\n\n<h3>Model.remove(condition, [callback])</h3>\n\n\n\n<p>This function takes a condition object as input and removes all the documents matching the conditions. For example, if we need to remove all people aged 20,</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.remove({age:20});</code></pre>\n\n\n\n<h3>Model.findOneAndRemove(condition, [callback])</h3>\n\n\n\n<p>This functions removes a&nbsp;<strong>single</strong>, most relevant document according to conditions object. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.findOneAndRemove({name: \"Ayush\"});\n﻿</code></pre>\n\n\n\n<h3>Model.findByIdAndRemove(id, [callback])</h3>\n\n\n\n<p>This function removes a single document identified by its id. For example,</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Person.findByIdAndRemove(\"507f1f77bcf86cd799439011\");\n</code></pre>\n\n\n\n<p>Now let’s create a route to delete people from our database.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar _ = require('koa-router')();\nvar app = koa();\n\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/my_db');\n\nvar personSchema = mongoose.Schema({\n   name: String,\n   age: Number,\n   nationality: String\n});\n\nvar Person = mongoose.model(\"Person\", personSchema);\n\n_.delete('/people/:id', deletePerson);\nfunction *deletePerson(next){\n   var self = this;\n   yield Person.findByIdAndRemove(self.params.id, function(err, response){\n      if(err) {\n         self.body = {message: \"Error in deleting record id \" + self.params.id};\n      } else {\n         self.body = {message: \"Person with id \" + self.params.id + \" removed.\"};\n      }\n   });\n}\n\napp.use(_.routes());\napp.listen(3000);</code></pre>\n\n\n\n<p>To test this out, use the following curl command −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -X DELETE https://localhost:3000/people/507f1f77bcf86cd799439011</code></pre>\n\n\n\n<p>This will remove the person with the given id producing the following message. −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{message: \"Person with id 507f1f77bcf86cd799439011 removed.\"}\n</code></pre>\n\n\n\n<p>This wraps up how we can create simple CRUD applications using MongoDB, mongoose and Koa. To explore mongoose further, read the&nbsp;API docs.</p>\n","protected":false},"excerpt":{"rendered":"<p>We are receiving the requests, but are not storing them anywhere. We need a Database to store the data. We&#8217;ll use a famous NoSQL database called MongoDB. In order to use Mongo with Koa, we need a client API for the node. There are multiple options for us, however for this tutorial we&#8217;ll stick to&nbsp;mongoose. Mongoose [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4033"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4033"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4033/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4033"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4033"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4033"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4034,"date":"2020-07-24T06:23:09","date_gmt":"2020-07-24T06:23:09","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=148"},"modified":"2020-07-24T06:23:09","modified_gmt":"2020-07-24T06:23:09","slug":"koa-js-restful-apis","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-restful-apis/","title":{"rendered":"RESTful APIs"},"content":{"rendered":"\n<p>To create mobile applications, single page applications, use AJAX calls and provide data to clients, you&#8217;ll need an API. A popular architectural style of how to structure and name these APIs and the endpoints is called&nbsp;<strong>REST(Representational Transfer State)</strong>. HTTP 1.1 was designed keeping REST principles in mind. REST was introduced by&nbsp;<strong>Roy Fielding</strong>&nbsp;in 2000 in his paper Fielding Dissertations.</p>\n\n\n\n<p>RESTful URIs and methods provide us with almost all information we need to process a request. The following table summarizes how the various verbs should be used and how URIs should be named. We&#8217;ll be creating a movies API towards the end, so let’s discuss how it&#8217;ll be structured.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>URI</th><th>Details</th><th>Function</th></tr><tr><td>GET</td><td>/movies</td><td>Safe, cachable</td><td>Gets the list of all movies and their details</td></tr><tr><td>GET</td><td>/movies/1234</td><td>Safe, cachable</td><td>Gets the details of Movie id 1234</td></tr><tr><td>POST</td><td>/movies</td><td>N/A</td><td>Creates a new movie with details provided. Response contains the URI for this newly created resource.</td></tr><tr><td>PUT</td><td>/movies/1234</td><td>Idempotent</td><td>Modifies movie id 1234 (creates one if it doesn&#8217;t already exist). Response contains the URI for this newly created resource.</td></tr><tr><td>DELETE</td><td>/movies/1234</td><td>Idempotent</td><td>Movie id 1234 should be deleted, if it exists. Response should contain the status of request.</td></tr><tr><td>DELETE or PUT</td><td>/movies</td><td>Invalid</td><td>Should be invalid. DELETE and PUT should specify which resource they are working on.</td></tr></tbody></table></figure>\n\n\n\n<p>Now let’s create this API in Koa. We will be using JSON as our transport data format as it is easy to work with in JavaScript and has loads of other benefits. Replace your index.js file with the following −</p>\n\n\n\n<h2>INDEX.JS</h2>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var koa = require('koa');\nvar router = require('koa-router');\nvar bodyParser = require('koa-body');\n\nvar app = koa();\n\n//Set up body parsing middleware\napp.use(bodyParser({\n   formidable:{uploadDir: './uploads'},\n   multipart: true,\n   urlencoded: true\n}));\n\n//Require the Router we defined in movies.js\nvar movies = require('./movies.js');\n\n//Use the Router on the sub route /movies\napp.use(movies.routes());\n\napp.listen(3000);</code></pre>\n\n\n\n<p>Now that we have our application set up, let us concentrate on creating the API. First set up the movies.js file. We are not using a database to store the movies but are storing them in memory, so every time the server restarts the movies added by us will vanish. This can easily be mimicked using a database or a file (using node fs module).</p>\n\n\n\n<p>Import koa-router, create a Router and export it using module.exports.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var Router = require('koa-router');\nvar router = Router({\n  prefix: '/movies'\n});  //Prefixed all routes with /movies\n\nvar movies = &#91;\n   {id: 101, name: \"Fight Club\", year: 1999, rating: 8.1},\n   {id: 102, name: \"Inception\", year: 2010, rating: 8.7},\n   {id: 103, name: \"The Dark Knight\", year: 2008, rating: 9},\n   {id: 104, name: \"12 Angry Men\", year: 1957, rating: 8.9}\n];\n\n//Routes will go here\n\nmodule.exports = router;</code></pre>\n\n\n\n<h2>GET Routes</h2>\n\n\n\n<p>Define the GET route for getting all the movies.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>router.get('/', sendMovies);\nfunction *sendMovies(next){\n   this.body = movies;\n   yield next;\n}</code></pre>\n\n\n\n<p>That&#8217;s it. To test out if this is working fine, run your app, then open your terminal and enter −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET localhost:3000/movies</code></pre>\n\n\n\n<p>You&#8217;ll get the following response −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;{\"id\":101,\"name\":\"Fight \nClub\",\"year\":1999,\"rating\":8.1},{\"id\":102,\"name\":\"Inception\",\"year\":2010,\"rating\":8.7},\n{\"id\":103,\"name\":\"The Dark Knight\",\"year\":2008,\"rating\":9},{\"id\":104,\"name\":\"12 Angry \nMen\",\"year\":1957,\"rating\":8.9}]</code></pre>\n\n\n\n<p>We have a route to get all the movies. Now let’s create a route to get a specific movie by its id.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>router.get('/:id(&#91;0-9]{3,})', sendMovieWithId);\n\nfunction *sendMovieWithId(next){\n   var ctx = this;\n   var currMovie = movies.filter(function(movie){\n      if(movie.id == ctx.params.id){\n         return true;\n      }\n   });\n   if(currMovie.length == 1){\n      this.body = currMovie&#91;0];\n   } else {\n      this.response.status = 404;//Set status to 404 as movie was not found\n      this.body = {message: \"Not Found\"};\n   }\n   yield next;\n}</code></pre>\n\n\n\n<p>This will get us the movies according to the id that we provide. To test this out, use the following command in your terminal.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET localhost:3000/movies/101</code></pre>\n\n\n\n<p>You&#8217;ll get the response as −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"id\":101,\"name\":\"Fight Club\",\"year\":1999,\"rating\":8.1}\n</code></pre>\n\n\n\n<p>If you visit an invalid route, it&#8217;ll produce a cannot GET error, while if you visit a valid route with an id that doesn’t exist, it&#8217;ll produce a 404 error.</p>\n\n\n\n<p>We are done with the GET routes. Now, let’s move on to POST route.</p>\n\n\n\n<h2>POST Route</h2>\n\n\n\n<p>Use the following route to handle the POSTed data.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>router.post('/', addNewMovie);\n\nfunction *addNewMovie(next){\n   //Check if all fields are provided and are valid:\n   if(!this.request.body.name || \n      !this.request.body.year.toString().match(/^&#91;0-9]{4}$/g) || \n      !this.request.body.rating.toString().match(/^&#91;0-9]\\.&#91;0-9]$/g)){\n      \n      this.response.status = 400;\n      this.body = {message: \"Bad Request\"};\n   } else {\n      var newId = movies&#91;movies.length-1].id+1;\n      \n      movies.push({\n         id: newId,\n         name: this.request.body.name,\n         year: this.request.body.year,\n         rating: this.request.body.rating\n      });\n      this.body = {message: \"New movie created.\", location: \"/movies/\" + newId};\n   }\n   yield next;\n}</code></pre>\n\n\n\n<p>This will create a new movie and store it in the movies variable. To test this route out, enter the following in your terminal −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -X POST --data \"name = Toy%20story&amp;year = 1995&amp;rating = 8.5\" \nhttps:&#47;&#47;localhost:3000/movies</code></pre>\n\n\n\n<p>You&#8217;ll get the following response −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"message\":\"New movie created.\",\"location\":\"/movies/105\"}</code></pre>\n\n\n\n<p>To test if this was added to the movies object, run the get request for /movies/105 again. You&#8217;ll get the following response −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"id\":105,\"name\":\"Toy story\",\"year\":\"1995\",\"rating\":\"8.5\"}</code></pre>\n\n\n\n<p>Let’s move on to create the PUT and DELETE routes.</p>\n\n\n\n<h2>PUT Route</h2>\n\n\n\n<p>The PUT route is almost exactly the same as the POST route. We will be specifying the id for the object that&#8217;ll be updated/created. Create the route in the following way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>router.put('/:id', updateMovieWithId);\n\nfunction *updateMovieWithId(next){\n   //Check if all fields are provided and are valid:\n   if(!this.request.body.name || \n      !this.request.body.year.toString().match(/^&#91;0-9]{4}$/g) || \n      !this.request.body.rating.toString().match(/^&#91;0-9]\\.&#91;0-9]$/g) ||\n      !this.params.id.toString().match(/^&#91;0-9]{3,}$/g)){\n      \n      this.response.status = 400;\n      this.body = {message: \"Bad Request\"};\n   } else {\n      //Gets us the index of movie with given id.\n      var updateIndex = movies.map(function(movie){\n         return movie.id;\n      }).indexOf(parseInt(this.params.id));\n      \n      if(updateIndex === -1){\n         //Movie not found, create new movies.push({\n            id: this.params.id,\n            name: this.request.body.name,\n            year: this.request.body.year,\n            rating: this.request.body.rating\n         });\n         this.body = {message: \"New movie created.\", location: \"/movies/\" + this.params.id};    \n      } else {\n         //Update existing movie\n         movies&#91;updateIndex] = {\n            id: this.params.id,\n            name: this.request.body.name,\n            year: this.request.body.year,\n            rating: this.request.body.rating\n         };\n         this.body = {message: \"Movie id \" + this.params.id + \" updated.\", location: \"/movies/\" + this.params.id};\n      }\n   }\n}</code></pre>\n\n\n\n<p>This route will do the function we specified in the table above. It&#8217;ll update the object with new details if it exists. If it doesn&#8217;t exist, it&#8217;ll create a new object. To test out this route, use the following curl command. This will update an existing movie. To create a new Movie, just change the id to a non-existing id.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -X PUT --data \"name = Toy%20story&amp;year = 1995&amp;rating = 8.5\" \nhttps:&#47;&#47;localhost:3000/movies/101</code></pre>\n\n\n\n<h3>Response</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"message\":\"Movie id 101 updated.\",\"location\":\"/movies/101\"}\n</code></pre>\n\n\n\n<h2>DELETE Route</h2>\n\n\n\n<p>Use the following code to create a delete route.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>router.delete('/:id', deleteMovieWithId);\n\nfunction *deleteMovieWithId(next){\n   var removeIndex = movies.map(function(movie){\n      return movie.id;\n   }).indexOf(this.params.id); //Gets us the index of movie with given id.\n   \n   if(removeIndex === -1){\n      this.body = {message: \"Not found\"};\n   } else {\n      movies.splice(removeIndex, 1);\n      this.body = {message: \"Movie id \" + this.params.id + \" removed.\"};\n   }\n}</code></pre>\n\n\n\n<p>Test the route in the same way we did for the others. On successful deletion (for example id 105), you will get −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{message: \"Movie id 105 removed.\"}\n</code></pre>\n\n\n\n<p>Finally, our movies.js file looks like −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var Router = require('koa-router');\nvar router = Router({\n   prefix: '/movies'\n});  //Prefixed all routes with /movies\nvar movies = &#91;\n   {id: 101, name: \"Fight Club\", year: 1999, rating: 8.1},\n   {id: 102, name: \"Inception\", year: 2010, rating: 8.7},\n   {id: 103, name: \"The Dark Knight\", year: 2008, rating: 9},\n   {id: 104, name: \"12 Angry Men\", year: 1957, rating: 8.9}\n];\n\n//Routes will go here\nrouter.get('/', sendMovies);\nrouter.get('/:id(&#91;0-9]{3,})', sendMovieWithId);\nrouter.post('/', addNewMovie);\nrouter.put('/:id', updateMovieWithId);\nrouter.delete('/:id', deleteMovieWithId);\n\nfunction *deleteMovieWithId(next){\n   var removeIndex = movies.map(function(movie){\n      return movie.id;\n   }).indexOf(this.params.id); //Gets us the index of movie with given id.\n   \n   if(removeIndex === -1){\n      this.body = {message: \"Not found\"};\n   } else {\n      movies.splice(removeIndex, 1);\n      this.body = {message: \"Movie id \" + this.params.id + \" removed.\"};\n   }\n}\n\nfunction *updateMovieWithId(next) {\n   //Check if all fields are provided and are valid:\n   if(!this.request.body.name ||\n      !this.request.body.year.toString().match(/^&#91;0-9]{4}$/g) ||\n      !this.request.body.rating.toString().match(/^&#91;0-9]\\.&#91;0-9]$/g) ||\n      !this.params.id.toString().match(/^&#91;0-9]{3,}$/g)){\n      \n      this.response.status = 400;\n      this.body = {message: \"Bad Request\"};\n   } else {\n      //Gets us the index of movie with given id.\n      var updateIndex = movies.map(function(movie){\n         return movie.id;\n      }).indexOf(parseInt(this.params.id));\n      \n      if(updateIndex === -1){\n         //Movie not found, create new\n         movies.push({\n            id: this.params.id,\n            name: this.request.body.name,\n            year: this.request.body.year,\n            rating: this.request.body.rating\n         });\n         this.body = {message: \"New movie created.\", location: \"/movies/\" + this.params.id};\n      } else {\n         //Update existing movie\n            movies&#91;updateIndex] = {\n            id: this.params.id,\n            name: this.request.body.name,\n            year: this.request.body.year,\n            rating: this.request.body.rating\n         };\n         this.body = {message: \"Movie id \" + this.params.id + \" updated.\", \n            location: \"/movies/\" + this.params.id};\n      }\n   }\n}\n\nfunction *addNewMovie(next){\n   //Check if all fields are provided and are valid:\n   if(!this.request.body.name ||\n      !this.request.body.year.toString().match(/^&#91;0-9]{4}$/g) ||\n      !this.request.body.rating.toString().match(/^&#91;0-9]\\.&#91;0-9]$/g)){\n      \n      this.response.status = 400;\n      this.body = {message: \"Bad Request\"};\n   } else {\n      var newId = movies&#91;movies.length-1].id+1;\n      \n      movies.push({\n         id: newId,\n         name: this.request.body.name,\n         year: this.request.body.year,\n         rating: this.request.body.rating\n      });\n      this.body = {message: \"New movie created.\", location: \"/movies/\" + newId};\n   }\n   yield next;\n}\nfunction *sendMovies(next){\n   this.body = movies;\n   yield next;\n}\nfunction *sendMovieWithId(next){\n   var ctx = this\n   \n   var currMovie = movies.filter(function(movie){\n      if(movie.id == ctx.params.id){\n         return true;\n      }\n   });\n   if(currMovie.length == 1){\n      this.body = currMovie&#91;0];\n   } else {\n      this.response.status = 404;//Set status to 404 as movie was not found\n      this.body = {message: \"Not Found\"};\n   }\n   yield next;\n}\nmodule.exports = router;</code></pre>\n\n\n\n<p>This completes our REST API. Now you can create much more complex applications using this simple architectural style and Koa.</p>\n","protected":false},"excerpt":{"rendered":"<p>To create mobile applications, single page applications, use AJAX calls and provide data to clients, you&#8217;ll need an API. A popular architectural style of how to structure and name these APIs and the endpoints is called&nbsp;REST(Representational Transfer State). HTTP 1.1 was designed keeping REST principles in mind. REST was introduced by&nbsp;Roy Fielding&nbsp;in 2000 in his [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4034"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4034"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4034/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4034"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4034"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4034"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4035,"date":"2020-07-24T06:23:48","date_gmt":"2020-07-24T06:23:48","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=150"},"modified":"2020-07-24T06:23:48","modified_gmt":"2020-07-24T06:23:48","slug":"koa-js-logging","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-logging/","title":{"rendered":"Logging"},"content":{"rendered":"\n<p>Logging is quite useful when creating web applications as they tell us where exactly things went wrong. We also get the context for the things that went wrong and can come up with possible solutions for the same.</p>\n\n\n\n<p>To enable logging in Koa, we need the middleware,&nbsp;<strong>koa-logger</strong>. Install it using the following command.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save-dev koa-logger\n</code></pre>\n\n\n\n<p>Now in your application, add the following code to enable logging.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var logger = require('koa-logger')\nvar koa = require('koa')\n\nvar app = koa()\napp.use(logger())\n\napp.use(function*(){\n   this.body = \"Hello Logger\";\n})\n\napp.listen(3000)</code></pre>\n\n\n\n<p>Run this server and visit any route on the server. You should see the logs like −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/koajs/images/logging.jpg\" alt=\"Logging\"/></figure>\n\n\n\n<p>Now if you get an error on a specific route or request, these logs should help you figure out what went wrong in each of them.</p>\n","protected":false},"excerpt":{"rendered":"<p>Logging is quite useful when creating web applications as they tell us where exactly things went wrong. We also get the context for the things that went wrong and can come up with possible solutions for the same. To enable logging in Koa, we need the middleware,&nbsp;koa-logger. Install it using the following command. Now in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4035"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4035"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4035/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4035"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4035"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4035"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":152,"date":"2020-07-24T06:24:22","date_gmt":"2020-07-24T06:24:22","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=152"},"modified":"2020-07-24T06:24:22","modified_gmt":"2020-07-24T06:24:22","slug":"koa-js-scaffolding","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-scaffolding/","title":{"rendered":"Scaffolding"},"content":{"rendered":"\n<p>Scaffolding allows us to easily create a&nbsp;<strong>skeleton for a web application</strong>. We manually created our public directory, added middleware, created separate route files, etc. A scaffolding tool sets up all these things for us so that we can directly get started with building our application.</p>\n\n\n\n<p>The scaffolder we&#8217;ll use is called&nbsp;<strong>Yeoman</strong>. It is a scaffolding tool built for Node.js but also has generators for several other frameworks (such as flask, rails, django, etc.). To install yeoman, enter the following command in your terminal.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g yeoman\n</code></pre>\n\n\n\n<p>Yeoman uses generators to scaffold out applications. To check out the generators available on npm to use with yeoman, head over&nbsp;<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://yeoman.io/generators/\">here</a>. For the purpose of this tutorial, we&#8217;ll use the &#8216;generator-koa&#8217;. To install this generator, enter the following command in your terminal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g generator-koa\n</code></pre>\n\n\n\n<p>To use this generator, enter −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>yo koa\n</code></pre>\n\n\n\n<p>Then it&#8217;ll create a directory structure and will create the following files for you. It&#8217;ll also install the necessary npm modules and bower components for you.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>create package.json\ncreate test/routeSpec.js\ncreate views/layout.html\ncreate views/list.html\ncreate public/styles/main.css\ncreate public/scripts/.gitkeep\ncreate controllers/messages.js\ncreate app.js\ncreate .editorconfig\ncreate .jshintrc\n\nI'm all done. Running npm install &amp; bower install for you to install \nthe required dependencies. \nIf this fails, try running the command yourself.</code></pre>\n\n\n\n<p>This generator creates a very simple structure for us.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>.\n├── controllers\n│   └── messages.js\n├── public\n|   ├── scripts\n|   └── styles\n|       └── main.css    \n├── test\n|   └── routeSpec.js\n├── views\n|   ├── layout.html\n|   └── list.html\n├── .editorconfig\n├── .jshintrc\n├── app.js\n└── package.json</code></pre>\n\n\n\n<p>Explore the many generators available for Koa and choose the one that fits you right. Steps to working with all generators is the same. You&#8217;ll need to install a generator, run it using yeoman, it&#8217;ll ask you some questions and then create a skeleton for your application based on your answers.</p>\n","protected":false},"excerpt":{"rendered":"<p>Scaffolding allows us to easily create a&nbsp;skeleton for a web application. We manually created our public directory, added middleware, created separate route files, etc. A scaffolding tool sets up all these things for us so that we can directly get started with building our application. The scaffolder we&#8217;ll use is called&nbsp;Yeoman. It is a scaffolding [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/152"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=152"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/152/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=152"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=152"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=152"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4036,"date":"2020-07-24T06:25:10","date_gmt":"2020-07-24T06:25:10","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=154"},"modified":"2020-07-24T06:25:10","modified_gmt":"2020-07-24T06:25:10","slug":"koa-js-resources","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/koa-js-resources/","title":{"rendered":"Resources"},"content":{"rendered":"\n<p>Following is a list of resources we have used while developing this tutorial −</p>\n\n\n\n<ul><li>Koajs.com</li><li>Koajs &#8211; Examples&nbsp;A list of examples created by the community</li><li>List of official and 3<sup>rd</sup>&nbsp;party middlewares.</li><li>A CRUD API using koa.js&nbsp;&#8211; A short screencast that goes through creating a CRUD API in Koa.js</li><li>Koa.js Quickstart screencast</li><li>Introduction to Koa.js and generators</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Following is a list of resources we have used while developing this tutorial − Koajs.com Koajs &#8211; Examples&nbsp;A list of examples created by the community List of official and 3rd&nbsp;party middlewares. A CRUD API using koa.js&nbsp;&#8211; A short screencast that goes through creating a CRUD API in Koa.js Koa.js Quickstart screencast Introduction to Koa.js and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[145],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4036"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4036"}],"version-history":[{"count":0,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4036/revisions"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4036"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4036"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4036"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]