[
    {
        "id": 1794,
        "date": "2021-03-16T06:04:28",
        "date_gmt": "2021-03-16T06:04:28",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1794"
        },
        "modified": "2021-03-16T06:04:28",
        "modified_gmt": "2021-03-16T06:04:28",
        "slug": "overview-17",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-17\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>While working with database using plain old JDBC, it becomes cumbersome to write unnecessary code to handle exceptions, opening and closing database connections, etc. However, Spring JDBC Framework takes care of all the low-level details starting from opening the connection, preparing and executing the SQL statement, processing exceptions, handling transactions, and finally closing the connection.<\/p>\n\n\n\n<p>What you have do is just define connection parameters and specify the SQL statement to be executed and do the required work for each iteration while fetching data from the database.<\/p>\n\n\n\n<p>Spring JDBC provides several approaches and correspondingly different classes to interface with the database. In these code meals, we will take the classic and the most popular approach which makes use of the JDBC Template class of the framework. This is the central framework class that manages all the database communication and exception handling.<\/p>\n\n\n\n<h2>JDBC Template Class<\/h2>\n\n\n\n<p>JDBC Template class executes SQL queries, updates statements and stored procedure calls, performs iteration over ResultSets and extraction of returned parameter values. It also catches JDBC exceptions and translates them to the generic, more informative, exception hierarchy defined in the org.springframework.dao package.<\/p>\n\n\n\n<p>Instances of the JDBC Template class are threadsafe once configured. So, you can configure a single instance of a JDBC Template and then safely inject this shared reference into multiple DAOs.<\/p>\n\n\n\n<p>A common practice when using the JDBC Template class is to configure a DataSource in your Spring configuration file, and then dependency-inject that shared DataSource bean into your DAO classes. The JDBC Template is created in the setter for the DataSource.<\/p>\n\n\n\n<h2>Data Access Object (DAO)<\/h2>\n\n\n\n<p>DAO stands for&nbsp;<strong>Data Access Object<\/strong>&nbsp;which is commonly used for database interaction. DAOs exist to provide a means to read and write data to the database and they should expose this functionality through an interface by which the rest of the application will access them.<\/p>\n\n\n\n<p>The Data Access Object (DAO) support in Spring makes it easy to work with data access technologies such as JDBC, Hibernate, JPA, or JDO in a consistent way.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>While working with database using plain old JDBC, it becomes cumbersome to write unnecessary code to handle exceptions, opening and closing database connections, etc. However, Spring JDBC Framework takes care of all the low-level details starting from opening the connection, preparing and executing the SQL statement, processing exceptions, handling transactions, and finally closing the connection. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1794"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1794"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1794\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1795,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1794\/revisions\/1795"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1794"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1794"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1794"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1796,
        "date": "2021-03-16T06:08:10",
        "date_gmt": "2021-03-16T06:08:10",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1796"
        },
        "modified": "2021-03-16T06:10:48",
        "modified_gmt": "2021-03-16T06:10:48",
        "slug": "environment-setup-13",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-13\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<p>This chapter takes you through the process of setting up Spring-AOP on Windows and Linux based systems. Spring AOP can be easily installed and integrated with your current Java environment and MAVEN by following a few simple steps without any complex setup procedures. User administration is required while installation.<\/p>\n\n\n\n<h2>System Requirements<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>JDK<\/td><td>Java SE 2 JDK 1.5 or above<\/td><\/tr><tr><td>Memory<\/td><td>1 GB RAM (recommended)<\/td><\/tr><tr><td>Disk Space<\/td><td>No minimum requirement<\/td><\/tr><tr><td>Operating System Version<\/td><td>Windows XP or above, Linux<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let us now proceed with the steps to install Spring AOP.<\/p>\n\n\n\n<h2>Step 1 &#8211; Verify your Java Installation<\/h2>\n\n\n\n<p>First of all, you need to have Java Software Development Kit (SDK) installed on your system. To verify this, execute any of the following two commands depending on the platform you are working on.<\/p>\n\n\n\n<p>If the Java installation has been done properly, then it will display the current version and specification of your Java installation. A sample output is given in the following table.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Platform<\/th><th>Command<\/th><th>Sample Output<\/th><\/tr><tr><td>Windows<\/td><td>Open command console and type \u2212<strong>\\&gt;java -version<\/strong><\/td><td>Java version &#8220;1.7.0_60&#8243;Java (TM) SE Run Time Environment (build 1.7.0_60-b19)Java Hotspot (TM) 64-bit Server VM (build 24.60-b09,mixed mode)<\/td><\/tr><tr><td>Linux<\/td><td>Open command terminal and type \u2212<strong>$java -version<\/strong><\/td><td>java version &#8220;1.7.0_25&#8243;Open JDK Runtime Environment (rhel-2.3.10.4.el6_4-x86_64)Open JDK 64-Bit Server VM (build 23.7-b01, mixed mode)<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>We assume the readers of this tutorial have Java SDK version 1.7.0_60 installed on the system. In case you do not have Java SDK, download its current version from&nbsp;https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html&nbsp;and have it installed.<\/p>\n\n\n\n<h2>Step 2 &#8211; Set your Java Environment<\/h2>\n\n\n\n<p>Set the environment variable JAVA_HOME to point to the base directory location where Java is installed on your machine. For example,<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Platform<\/th><th>Description<\/th><\/tr><tr><td>Windows<\/td><td>Set JAVA_HOME to C:\\ProgramFiles\\java\\jdk1.7.0_60<\/td><\/tr><tr><td>Linux<\/td><td>Export JAVA_HOME=\/usr\/local\/java-current<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append the full path of Java compiler location to the System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Platform<\/th><th>Description<\/th><\/tr><tr><td>Windows<\/td><td>Append the String &#8220;C:\\Program Files\\Java\\jdk1.7.0_60\\bin&#8221; to the end of the system variable PATH.<\/td><\/tr><tr><td>Linux<\/td><td>Export PATH=$PATH:$JAVA_HOME\/bin\/<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Execute the command&nbsp;<strong>java -version<\/strong>&nbsp;from the command prompt as explained above.<\/p>\n\n\n\n<h2>Step 3 &#8211; Download Maven Archive<\/h2>\n\n\n\n<p>Download Maven 3.3.3 from&nbsp;https:\/\/maven.apache.org\/download.cgi<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>apache-maven-3.3.3-bin.zip<\/td><\/tr><tr><td>Linux<\/td><td>apache-maven-3.3.3-bin.tar.gz<\/td><\/tr><tr><td>Mac<\/td><td>apache-maven-3.3.3-bin.tar.gz<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 4 &#8211; Extract the Maven Archive<\/h2>\n\n\n\n<p>Extract the archive to the directory you wish to install Maven 3.3.3. The subdirectory apache-maven-3.3.3 will be created from the archive.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Location (can be different based on your installation)<\/th><\/tr><tr><td>Windows<\/td><td>C:\\Program Files\\Apache Software Foundation\\apache-maven-3.3.3<\/td><\/tr><tr><td>Linux<\/td><td>\/usr\/local\/apache-maven<\/td><\/tr><tr><td>Mac<\/td><td>\/usr\/local\/apache-maven<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 5 &#8211; Set Maven environment variables<\/h2>\n\n\n\n<p>Add M2_HOME, M2, MAVEN_OPTS to environment variables.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variables using system properties.<em>M2_HOME=C:\\Program Files\\Apache Software Foundation\\apachemaven-3.3.3<\/em><em>M2 = %M2_HOME%\\bin<\/em><em>MAVEN_OPTS = -Xms256m -Xmx512m<\/em><\/td><\/tr><tr><td>Linux<\/td><td>Open command terminal and set environment variables.<em>export M2_HOME = \/usr\/local\/apache-maven\/apache-maven-3.3.3<\/em><em>export M2 = $M2_HOME\/bin<\/em><em>export MAVEN_OPTS = -Xms256m -Xmx512m<\/em><\/td><\/tr><tr><td>Mac<\/td><td>Open command terminal and set environment variables.<em>export M2_HOME = \/usr\/local\/apache-maven\/apache-maven-3.3.3<\/em><em>export M2 = $M2_HOME\/bin<\/em><em>export MAVEN_OPTS = -Xms256m -Xmx512m<\/em><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 6 &#8211; Add Maven Bin Directory Location to System Path<\/h2>\n\n\n\n<p>Now append M2 variable to System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Append the string ;%M2% to the end of the system variable, Path.<\/td><\/tr><tr><td>Linux<\/td><td>export PATH = $M2:$PATH<\/td><\/tr><tr><td>Mac<\/td><td>export PATH = $M2:$PATH<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 7 &#8211; Verify Maven installation<\/h2>\n\n\n\n<p>Now open console, execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Task<\/th><th>Command<\/th><\/tr><tr><td>Windows<\/td><td>Open Command Console<\/td><td>c:\\&gt; mvn &#8211;version<\/td><\/tr><tr><td>Linux<\/td><td>Open Command Terminal<\/td><td>$ mvn &#8211;version<\/td><\/tr><tr><td>Mac<\/td><td>Open Terminal<\/td><td>machine:&lt; joseph$ mvn &#8211;version<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Finally, verify the output of the above commands, which should be something as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: C:\\Program Files\\Apache Software Foundation\\apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: C:\\Program Files\\Java\\jdk1.7.0_75\\jreDefault locale: en_US, platform encoding: Cp1252<\/td><\/tr><tr><td>Linux<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: \/usr\/local\/apache-maven\/apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: \/usr\/local\/java-current\/jdk1.7.0_75\/jre<\/td><\/tr><tr><td>Mac<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: \/usr\/local\/apache-maven\/apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: \/Library\/Java\/Home\/jdk1.7.0_75\/jre<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 8 &#8211; Setup Eclipse IDE<\/h2>\n\n\n\n<p>All the examples in this tutorial have been written using Eclipse IDE. So, I would suggest you should have the latest version of Eclipse installed on your machine.<\/p>\n\n\n\n<p>To install Eclipse IDE, download the latest Eclipse binaries from&nbsp;https:\/\/www.eclipse.org\/downloads\/. Once you have downloaded the installation, unpack the binary distribution into a convenient location. For example, in C:\\eclipse on Windows, or \/ usr \/local\/eclipse on Linux\/Unix. Finally, set the PATH variable appropriately.<\/p>\n\n\n\n<p>Eclipse can be started by executing the following commands on Windows machine, or you can simply double-click on eclipse.exe.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>%C:\\eclipse\\eclipse.exe\n<\/code><\/pre>\n\n\n\n<p>Eclipse can be started by executing the following commands on Unix (Solaris, Linux, etc.) machine.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$\/usr\/local\/eclipse\/eclipse\n<\/code><\/pre>\n\n\n\n<p>After a successful startup, if everything is fine then it should display the following result.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springjdbc\/images\/eclipsehomepage.jpg\" alt=\"Eclipse Home page\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This chapter takes you through the process of setting up Spring-AOP on Windows and Linux based systems. Spring AOP can be easily installed and integrated with your current Java environment and MAVEN by following a few simple steps without any complex setup procedures. User administration is required while installation. System Requirements JDK Java SE 2 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1796"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1796"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1796\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1800,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1796\/revisions\/1800"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1796"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1796"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1796"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1798,
        "date": "2021-03-16T06:09:44",
        "date_gmt": "2021-03-16T06:09:44",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1798"
        },
        "modified": "2021-03-16T06:09:44",
        "modified_gmt": "2021-03-16T06:09:44",
        "slug": "configure-data-source",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/configure-data-source\/",
        "title": {
            "rendered": "Configure Data Source"
        },
        "content": {
            "rendered": "\n<p>Let us create a database table&nbsp;<strong>Student<\/strong>&nbsp;in our database&nbsp;<strong>TEST<\/strong>. I assume you are working with MySQL database, if you work with any other database then you can change your DDL and SQL queries accordingly.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE Student(\n   ID   INT NOT NULL AUTO_INCREMENT,\n   NAME VARCHAR(20) NOT NULL,\n   AGE  INT NOT NULL,\n   PRIMARY KEY (ID)\n);<\/code><\/pre>\n\n\n\n<p>Now we need to supply a DataSource to the JDBC Template so it can configure itself to get database access. You can configure the DataSource in the XML file with a piece of code shown as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"dataSource\"\nclass = \"org.springframework.jdbc.datasource.DriverManagerDataSource\"&gt;\n   &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/&gt;\n   &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/&gt;\n   &lt;property name = \"username\" value = \"root\"\/&gt;\n   &lt;property name = \"password\" value = \"admin\"\/&gt;\n&lt;\/bean&gt;<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Let us create a database table&nbsp;Student&nbsp;in our database&nbsp;TEST. I assume you are working with MySQL database, if you work with any other database then you can change your DDL and SQL queries accordingly. Now we need to supply a DataSource to the JDBC Template so it can configure itself to get database access. You can [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1798"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1798"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1798\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1799,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1798\/revisions\/1799"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1798"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1798"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1798"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1801,
        "date": "2021-03-16T06:19:20",
        "date_gmt": "2021-03-16T06:19:20",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1801"
        },
        "modified": "2021-03-16T06:19:20",
        "modified_gmt": "2021-03-16T06:19:20",
        "slug": "first-application-4",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/first-application-4\/",
        "title": {
            "rendered": "First Application"
        },
        "content": {
            "rendered": "\n<p>To understand the concepts related to the Spring JDBC framework with the JDBC Template class, let us write a simple example that will implement Insert and Read operations on the following Student table.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE Student(\n   ID   INT NOT NULL AUTO_INCREMENT,\n   NAME VARCHAR(20) NOT NULL,\n   AGE  INT NOT NULL,\n   PRIMARY KEY (ID)\n);<\/code><\/pre>\n\n\n\n<p>Let us proceed to write a simple console based Spring JDBC Application, which will demonstrate JDBC concepts.<\/p>\n\n\n\n<h2>Create Project<\/h2>\n\n\n\n<p>Let&#8217;s open the command console, go the C:\\MVN directory and execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN>mvn archetype:generate -DgroupId = com.codemeals -DartifactId = Student\n   -DarchetypeArtifactId = maven-archetype-quickstart -DinteractiveMode = false<\/code><\/pre>\n\n\n\n<p>Maven will start processing and will create the complete Java application project structure.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building Maven Stub Project (No POM) 1\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO]\n&#91;INFO] >>> maven-archetype-plugin:2.4:generate (default-cli) > generate-sources\n@ standalone-pom >>>\n&#91;INFO]\n&#91;INFO] &lt;&lt;&lt; maven-archetype-plugin:2.4:generate (default-cli) &lt; generate-sources\n@ standalone-pom &lt;&lt;&lt;\n&#91;INFO]\n&#91;INFO] --- maven-archetype-plugin:2.4:generate (default-cli) @ standalone-pom --\n-\n&#91;INFO] Generating project in Batch mode\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/archetypes\/ma\nven-archetype-quickstart\/1.0\/maven-archetype-quickstart-1.0.jar\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/archetypes\/mav\nen-archetype-quickstart\/1.0\/maven-archetype-quickstart-1.0.jar (5 KB at 1.1 KB\/s\nec)\nDownloading: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/archetypes\/ma\nven-archetype-quickstart\/1.0\/maven-archetype-quickstart-1.0.pom\nDownloaded: https:\/\/repo.maven.apache.org\/maven2\/org\/apache\/maven\/archetypes\/mav\nen-archetype-quickstart\/1.0\/maven-archetype-quickstart-1.0.pom (703 B at 1.2 KB\/\nsec)\n&#91;INFO] -------------------------------------------------------------------------\n---\n&#91;INFO] Using following parameters for creating project from Old (1.x) Archetype:\n maven-archetype-quickstart:1.0\n&#91;INFO] -------------------------------------------------------------------------\n---\n&#91;INFO] Parameter: groupId, Value: com.codemeals\n&#91;INFO] Parameter: packageName, Value: com.codemeals\n&#91;INFO] Parameter: package, Value: com.codemeals\n&#91;INFO] Parameter: artifactId, Value: Student\n&#91;INFO] Parameter: basedir, Value: C:\\MVN\n&#91;INFO] Parameter: version, Value: 1.0-SNAPSHOT\n&#91;INFO] project created from Old (1.x) Archetype in dir: C:\\MVN\\Student\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 01:17 min\n&#91;INFO] Finished at: 2017-02-19T21:11:14+05:30\n&#91;INFO] Final Memory: 15M\/114M\n&#91;INFO] ------------------------------------------------------------------------\n<\/code><\/pre>\n\n\n\n<p>Now go to C:\/MVN directory. You&#8217;ll see a Java application project created named student (as specified in artifactId). Update the POM.xml to include Spring JDBC dependencies. Add Student.java, StudentMapper.java, MainApp.java, StudentDAO.java and StudentJDBCTemplate.java files.<\/p>\n\n\n\n<h2>POM.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;project xmlns = \"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"http:\/\/maven.apache.org\/POM\/4.0.0 \n   http:\/\/maven.apache.org\/maven-v4_0_0.xsd\">\n   \n   &lt;modelVersion>4.0.0&lt;\/modelVersion>\n   &lt;groupId>com.codemeals&lt;\/groupId>\n   &lt;artifactId>Student&lt;\/artifactId>\n   &lt;packaging>jar&lt;\/packaging>\n   &lt;version>1.0-SNAPSHOT&lt;\/version>\n   &lt;name>Student&lt;\/name>\n   &lt;url>http:\/\/maven.apache.org&lt;\/url>\n   \n   &lt;dependencies>\n      &lt;dependency>\n         &lt;groupId>junit&lt;\/groupId>\n         &lt;artifactId>junit&lt;\/artifactId>\n         &lt;version>3.8.1&lt;\/version>\n         &lt;scope>test&lt;\/scope>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>org.springframework&lt;\/groupId>\n         &lt;artifactId>spring-jdbc&lt;\/artifactId>\n         &lt;version>4.1.0.RELEASE&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>org.springframework&lt;\/groupId>\n         &lt;artifactId>spring-context&lt;\/artifactId>\n         &lt;version>4.1.4.RELEASE&lt;\/version>\n      &lt;\/dependency>\n   &lt;\/dependencies>\n   \n&lt;\/project><\/code><\/pre>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to create\n      * a record in the Student table.\n   *\/\n   public void create(String name, Integer age);\n   public Student getStudent(Integer id);\n   \n   \/** \n     * This is the method to be used to list down\n     * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public void create(String name, Integer age) {\n      String SQL = \"insert into Student (name, age) values (?, ?)\";\n      \n      jdbcTemplateObject.update( SQL, name, age);\n      System.out.println(\"Created Record Name = \" + name + \" Age = \" + age);\n      return;\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      StudentJDBCTemplate studentJDBCTemplate = (StudentJDBCTemplate)\n         context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"------Records Creation--------\" );\n      studentJDBCTemplate.create(\"Zara\", 11);\n      studentJDBCTemplate.create(\"Nuha\", 2);\n      studentJDBCTemplate.create(\"Ayan\", 15);\n\n      System.out.println(\"------Listing Multiple Records--------\" );\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n      \n      for (Student record : students) {\n         System.out.print(\"ID : \" + record.getId() );\n         System.out.print(\", Name : \" + record.getName() );\n         System.out.println(\", Age : \" + record.getAge());\n      }  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \"&gt;\n\n   &lt;!-- Initialization for data source --&gt;\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\"&gt;\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/&gt;\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/&gt;\n      &lt;property name = \"username\" value = \"root\"\/&gt;\n      &lt;property name = \"password\" value = \"admin\"\/&gt;\n   &lt;\/bean&gt;\n\n   &lt;!-- Definition for studentJDBCTemplate bean --&gt;\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.tutorialspoint.StudentJDBCTemplate\"&gt;\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/&gt;    \n   &lt;\/bean&gt;\n      \n&lt;\/beans&gt;<\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>------Records Creation--------\nCreated Record Name = Zara Age = 11\nCreated Record Name = Nuha Age = 2\nCreated Record Name = Ayan Age = 15\n------Listing Multiple Records--------\nID : 1, Name : Zara, Age : 11\nID : 2, Name : Nuha, Age : 2\nID : 3, Name : Ayan, Age : 15<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>To understand the concepts related to the Spring JDBC framework with the JDBC Template class, let us write a simple example that will implement Insert and Read operations on the following Student table. Let us proceed to write a simple console based Spring JDBC Application, which will demonstrate JDBC concepts. Create Project Let&#8217;s open the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1801"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1801"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1801\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1802,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1801\/revisions\/1802"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1801"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1801"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1801"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1803,
        "date": "2021-03-16T06:24:31",
        "date_gmt": "2021-03-16T06:24:31",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1803"
        },
        "modified": "2021-03-16T06:24:31",
        "modified_gmt": "2021-03-16T06:24:31",
        "slug": "create-query",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/create-query\/",
        "title": {
            "rendered": "Create Query"
        },
        "content": {
            "rendered": "\n<p>The following example will demonstrate how to create a query using Insert query with the help of Spring JDBC. We&#8217;ll insert a few records in Student Table.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String insertQuery = \"insert into Student (name, age) values (?, ?)\";\njdbcTemplateObject.update( insertQuery, name, age);\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>insertQuery<\/strong>&nbsp;\u2212 Insert query having placeholders.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to insert student object in database.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example that will insert a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em><strong>Spring JDBC &#8211; First Application<\/strong><\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n     * This is the method to be used to create\n     * a record in the Student table.\n   *\/\n   public void create(String name, Integer age);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public void create(String name, Integer age) {\n      String insertQuery = \"insert into Student (name, age) values (?, ?)\";\n      jdbcTemplateObject.update( insertQuery, name, age);\n      System.out.println(\"Created Record Name = \" + name + \" Age = \" + age);\n      return;\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"------Records Creation--------\" );\n      studentJDBCTemplate.create(\"Zara\", 11);\n      studentJDBCTemplate.create(\"Nuha\", 2);\n      studentJDBCTemplate.create(\"Ayan\", 15);\n\n      System.out.println(\"------Listing Multiple Records--------\" );\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n      \n      for (Student record : students) {\n         System.out.print(\"ID : \" + record.getId() );\n         System.out.print(\", Name : \" + record.getName() );\n         System.out.println(\", Age : \" + record.getAge());\n      }  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>------Records Creation--------\nCreated Record Name = Zara Age = 11\nCreated Record Name = Nuha Age = 2\nCreated Record Name = Ayan Age = 15\n------Listing Multiple Records--------\nID : 1, Name : Zara, Age : 11\nID : 2, Name : Nuha, Age : 2\nID : 3, Name : Ayan, Age : 15<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example will demonstrate how to create a query using Insert query with the help of Spring JDBC. We&#8217;ll insert a few records in Student Table. Syntax Where, insertQuery&nbsp;\u2212 Insert query having placeholders. jdbcTemplateObject&nbsp;\u2212 StudentJDBCTemplate object to insert student object in database. To understand the above-mentioned concepts related to Spring JDBC, let us write [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1803"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1803"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1803\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1804,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1803\/revisions\/1804"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1803"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1803"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1803"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1805,
        "date": "2021-03-16T06:29:23",
        "date_gmt": "2021-03-16T06:29:23",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1805"
        },
        "modified": "2021-03-16T06:29:23",
        "modified_gmt": "2021-03-16T06:29:23",
        "slug": "read-query",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/read-query\/",
        "title": {
            "rendered": "Read Query"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to read a query using Spring JDBC. We&#8217;ll read available records in Student Table.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String selectQuery = \"select * from Student\";\nList &lt;Student&gt; students = jdbcTemplateObject.query(selectQuery, new StudentMapper());\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>selectQuery<\/strong>&nbsp;\u2212 Select query to read students.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to read student object from database.<\/li><li><strong>StudentMapper<\/strong>&nbsp;\u2212 StudentMapper is a RowMapper object to map each fetched record to student object.<\/li><\/ul>\n\n\n\n<p>To understand above mentioned concepts related to Spring JDBC, let us write an example which will select a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"------Listing Multiple Records--------\" );\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n      \n      for (Student record : students) {\n         System.out.print(\"ID : \" + record.getId() );\n         System.out.print(\", Name : \" + record.getName() );\n         System.out.println(\", Age : \" + record.getAge());\n      }  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id=\"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>------Listing Multiple Records--------\nID : 1, Name : Zara, Age : 11\nID : 2, Name : Nuha, Age : 2\nID : 3, Name : Ayan, Age : 15<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to read a query using Spring JDBC. We&#8217;ll read available records in Student Table. Syntax Where, selectQuery&nbsp;\u2212 Select query to read students. jdbcTemplateObject&nbsp;\u2212 StudentJDBCTemplate object to read student object from database. StudentMapper&nbsp;\u2212 StudentMapper is a RowMapper object to map each fetched record to student object. To understand above mentioned concepts [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1805"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1805"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1805\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1806,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1805\/revisions\/1806"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1805"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1805"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1805"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1807,
        "date": "2021-03-16T06:33:27",
        "date_gmt": "2021-03-16T06:33:27",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1807"
        },
        "modified": "2021-03-16T06:33:27",
        "modified_gmt": "2021-03-16T06:33:27",
        "slug": "update-query",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/update-query\/",
        "title": {
            "rendered": "Update Query"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to update a query using Spring JDBC. We&#8217;ll update the available records in Student Table.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String updateQuery = \"update Student set age = ? where id = ?\";\njdbcTemplateObject.update(updateQuery, age, id);\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>updateQuery<\/strong>&nbsp;\u2212 Update query to update student with place holders.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to update student object in the database.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will update a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to update\n      * a record into the Student table.\n   *\/\n   public void update(Integer id, Integer age);\n\n   \/** \n      * This is the method to be used to list down\n      * a record from the Student table corresponding\n      * to a passed student id.\n   *\/\n   public Student getStudent(Integer id);   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public void update(Integer id, Integer age){\n      String SQL = \"update Student set age = ? where id = ?\";\n      jdbcTemplateObject.update(SQL, age, id);\n      System.out.println(\"Updated Record with ID = \" + id );\n      return;\n   }\n   public Student getStudent(Integer id) {\n      String SQL = \"select * from Student where id = ?\";\n      Student student = jdbcTemplateObject.queryForObject(\n         SQL, new Object&#91;]{id}, new StudentMapper());\n      \n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"----Updating Record with ID = 2 -----\" );\n      studentJDBCTemplate.update(2, 20);\n      \n      System.out.println(\"----Listing Record with ID = 2 -----\" );\n      Student student = studentJDBCTemplate.getStudent(2);\n      System.out.print(\"ID : \" + student.getId() );\n      System.out.print(\", Name : \" + student.getName() );\n      System.out.println(\", Age : \" + student.getAge());  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>----Updating Record with ID = 2 -----\nUpdated Record with ID = 2\n----Listing Record with ID = 2 -----\nID : 2, Name : Nuha, Age : 20<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to update a query using Spring JDBC. We&#8217;ll update the available records in Student Table. Syntax Where, updateQuery&nbsp;\u2212 Update query to update student with place holders. jdbcTemplateObject&nbsp;\u2212 StudentJDBCTemplate object to update student object in the database. To understand the above-mentioned concepts related to Spring JDBC, let us write an example [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1807"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1807"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1807\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1808,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1807\/revisions\/1808"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1807"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1807"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1807"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1809,
        "date": "2021-03-16T06:38:34",
        "date_gmt": "2021-03-16T06:38:34",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1809"
        },
        "modified": "2021-03-16T06:38:34",
        "modified_gmt": "2021-03-16T06:38:34",
        "slug": "delete-query",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/delete-query\/",
        "title": {
            "rendered": "Delete Query"
        },
        "content": {
            "rendered": "\n<p>The following example will demonstrate how to delete a query using Spring JDBC. We&#8217;ll delete one of the available records in Student Table.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String deleteQuery = \"delete from Student where id = ?\";\njdbcTemplateObject.update(deleteQuery, id);\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>deleteQuery<\/strong>&nbsp;\u2212 Delete query to delete student with placeholders.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to delete student object in the database.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will delete a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-c<\/i>reated under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();\n   \n   \/** \n      * This is the method to be used to delete\n      * a record from the Student table corresponding\n      * to a passed student id.\n   *\/\n   public void delete(Integer id); \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n   public void delete(Integer id){\n      String SQL = \"delete from Student where id = ?\";\n      jdbcTemplateObject.update(SQL, id);\n      System.out.println(\"Deleted Record with ID = \" + id );\n      return;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.tutorialspoint.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"----Delete Record with ID = 2 -----\" );\n      studentJDBCTemplate.delete(2);\n\n      System.out.println(\"------Listing Multiple Records--------\" );\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n      \n      for (Student record : students) {\n         System.out.print(\"ID : \" + record.getId() );\n         System.out.print(\", Name : \" + record.getName() );\n         System.out.println(\", Age : \" + record.getAge());\n      }     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\"  ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>----Updating Record with ID = 2 -----\nUpdated Record with ID = 2\n----Listing Record with ID = 2 -----\nID : 2, Name : Nuha, Age : 20<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example will demonstrate how to delete a query using Spring JDBC. We&#8217;ll delete one of the available records in Student Table. Syntax Where, deleteQuery&nbsp;\u2212 Delete query to delete student with placeholders. jdbcTemplateObject&nbsp;\u2212 StudentJDBCTemplate object to delete student object in the database. To understand the above-mentioned concepts related to Spring JDBC, let us write [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1809"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1809"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1809\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1810,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1809\/revisions\/1810"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1809"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1809"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1809"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1811,
        "date": "2021-03-16T06:43:08",
        "date_gmt": "2021-03-16T06:43:08",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1811"
        },
        "modified": "2021-03-16T06:43:08",
        "modified_gmt": "2021-03-16T06:43:08",
        "slug": "calling-stored-procedure",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/calling-stored-procedure\/",
        "title": {
            "rendered": "Calling Stored Procedure"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to call a stored procedure using Spring JDBC. We&#8217;ll read one of the available records in Student Table by calling a stored procedure. We&#8217;ll pass an id and receive a student record.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>SimpleJdbcCall jdbcCall = new SimpleJdbcCall(dataSource).withProcedureName(\"getRecord\");\nSqlParameterSource in = new MapSqlParameterSource().addValue(\"in_id\", id);\nMap&lt;String, Object&gt; out = jdbcCall.execute(in);\n\nStudent student = new Student();\nstudent.setId(id);\nstudent.setName((String) out.get(\"out_name\"));\nstudent.setAge((Integer) out.get(\"out_age\"));\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>jdbcCall<\/strong>&nbsp;\u2212 SimpleJdbcCall object to represent a stored procedure.<\/li><li><strong>in<\/strong>&nbsp;\u2212 SqlParameterSource object to pass a parameter to a stored procedure.<\/li><li><strong>student<\/strong>&nbsp;\u2212 Student object.<\/li><li><strong>out<\/strong>&nbsp;\u2212 Map object to represent the output of stored procedure call result.<\/li><\/ul>\n\n\n\n<p>The&nbsp;<strong>SimpleJdbcCall<\/strong>&nbsp;class can be used to call a stored procedure with IN and OUT parameters. You can use this approach while working with either of the RDBMS such as Apache Derby, DB2, MySQL, Microsoft SQL Server, Oracle, and Sybase.<\/p>\n\n\n\n<p>To understand the approach, consider the following MySQL stored procedure, which takes student Id and returns the corresponding student&#8217;s name and age using OUT parameters. Let us create this stored procedure in TEST database using MySQL command prompt \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>DELIMITER $$\n\nDROP PROCEDURE IF EXISTS `TEST`.`getRecord` $$\nCREATE PROCEDURE `TEST`.`getRecord` (\nIN in_id INTEGER,\nOUT out_name VARCHAR(20),\nOUT out_age  INTEGER)\nBEGIN\n   SELECT name, age\n   INTO out_name, out_age\n   FROM Student where id = in_id;\nEND $$\n\nDELIMITER ;<\/code><\/pre>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will call a stored procedure. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-c<\/i>reated under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * a record from the Student table corresponding\n      * to a passed student id.\n   *\/\n   public Student getStudent(Integer id);  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.jdbc.core.simple.SimpleJdbcCall;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public Student getStudent(Integer id) {\n      SimpleJdbcCall jdbcCall = new \n         SimpleJdbcCall(dataSource).withProcedureName(\"getRecord\");\n\n      SqlParameterSource in = new MapSqlParameterSource().addValue(\"in_id\", id);\n      Map&lt;String, Object> out = jdbcCall.execute(in);\n\n      Student student = new Student();\n      student.setId(id);\n      student.setName((String) out.get(\"out_name\"));\n      student.setAge((Integer) out.get(\"out_age\"));\n      return student;      \n   }\n}<\/code><\/pre>\n\n\n\n<p>The code you write for the execution of the call involves creating an SqlParameterSource containing the IN parameter. It&#8217;s important to match the name provided for the input value with that of the parameter name declared in the stored procedure. The execute method takes the IN parameters and returns a Map containing any out parameters keyed by the name as specified in the stored procedure.<\/p>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      Student student = studentJDBCTemplate.getStudent(1);\n      System.out.print(\"ID : \" + student.getId() );\n      System.out.print(\", Name : \" + student.getName() );\n      System.out.println(\", Age : \" + student.getAge()); \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns=\"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ID : 1, Name : Zara, Age : 11<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to call a stored procedure using Spring JDBC. We&#8217;ll read one of the available records in Student Table by calling a stored procedure. We&#8217;ll pass an id and receive a student record. Syntax Where, jdbcCall&nbsp;\u2212 SimpleJdbcCall object to represent a stored procedure. in&nbsp;\u2212 SqlParameterSource object to pass a parameter to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1811"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1811"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1811\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1812,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1811\/revisions\/1812"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1811"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1811"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1811"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1813,
        "date": "2021-03-16T06:50:13",
        "date_gmt": "2021-03-16T06:50:13",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1813"
        },
        "modified": "2021-03-16T06:50:13",
        "modified_gmt": "2021-03-16T06:50:13",
        "slug": "calling-stored-function",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/calling-stored-function\/",
        "title": {
            "rendered": "Calling Stored Function"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to call a stored function using Spring JDBC. We&#8217;ll read one of the available records in Student Table by calling a stored function. We&#8217;ll pass an id and receive a student name.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>SimpleJdbcCall jdbcCall = new \n   SimpleJdbcCall(dataSource).withFunctionName(\"get_student_name\");\n\nSqlParameterSource in = new MapSqlParameterSource().addValue(\"in_id\", id);\nString name = jdbcCall.executeFunction(String.class, in);\n\nStudent student = new Student();\nstudent.setId(id);\nstudent.setName(name);\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>in<\/strong>&nbsp;\u2212 SqlParameterSource object to pass a parameter to a stored function.<\/li><li><strong>jdbcCall<\/strong>&nbsp;\u2212 SimpleJdbcCall object to represent a stored function.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to called stored function from database.<\/li><li><strong>student<\/strong>&nbsp;\u2212 Student object.<\/li><\/ul>\n\n\n\n<p>The&nbsp;<strong>SimpleJdbcCall<\/strong>&nbsp;class can be used to call a stored function with IN parameter and a return value. You can use this approach while working with either of the RDBMS such as Apache Derby, DB2, MySQL, Microsoft SQL Server, Oracle, and Sybase.<\/p>\n\n\n\n<p>To understand the approach, consider the following MySQL stored procedure, which takes student Id and returns the corresponding student&#8217;s name. So let us create this stored function in your TEST database using MySQL command prompt \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>DELIMITER $$\n\nDROP FUNCTION IF EXISTS `TEST`.`get_student_name` $$\nCREATE FUNCTION `get_student_name` (in_id INTEGER)\nRETURNS varchar(200)\nBEGIN\nDECLARE out_name VARCHAR(200);\n   SELECT name\n   INTO out_name\n   FROM Student where id = in_id;\n\nRETURN out_name;\n\nDELIMITER ;<\/code><\/pre>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will call a stored function. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<em>Student<\/em>\u00a0created under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * a record from the Student table corresponding\n      * to a passed student id.\n   *\/\n   public Student getStudent(Integer id);  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.jdbc.core.simple.SimpleJdbcCall;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public Student getStudent(Integer id) {\n      SimpleJdbcCall jdbcCall = new \n         SimpleJdbcCall(dataSource).withFunctionName(\"get_student_name\");\n\t   \n      SqlParameterSource in = new MapSqlParameterSource().addValue(\"in_id\", id);\n      String name = jdbcCall.executeFunction(String.class, in);\n      Student student = new Student();\n      student.setId(id);\n      student.setName(name);\n      return student;      \n   }\n}<\/code><\/pre>\n\n\n\n<p>The code you write for the execution of the call involves creating an SqlParameterSource containing the IN parameter. It&#8217;s important to match the name provided for the input value with that of the parameter name declared in the stored function. The executeFunction method takes the IN parameters and returns a String as specified in the stored function.<\/p>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      Student student = studentJDBCTemplate.getStudent(1);\n      System.out.print(\"ID : \" + student.getId() );\n      System.out.print(\", Name : \" + student.getName() );\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ID : 1, Name : Zara<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to call a stored function using Spring JDBC. We&#8217;ll read one of the available records in Student Table by calling a stored function. We&#8217;ll pass an id and receive a student name. Syntax Where, in&nbsp;\u2212 SqlParameterSource object to pass a parameter to a stored function. jdbcCall&nbsp;\u2212 SimpleJdbcCall object to represent [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1813"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1813"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1813\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1814,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1813\/revisions\/1814"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1813"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1813"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1813"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1815,
        "date": "2021-03-16T06:56:53",
        "date_gmt": "2021-03-16T06:56:53",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1815"
        },
        "modified": "2021-03-16T06:56:53",
        "modified_gmt": "2021-03-16T06:56:53",
        "slug": "handling-blob",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/handling-blob\/",
        "title": {
            "rendered": "Handling BLOB"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to update a BLOB using an Update Query with the help of Spring JDBC. We&#8217;ll update the available records in Student Table.<\/p>\n\n\n\n<h2>Student Table<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE Student(\n   ID INT NOT NULL AUTO_INCREMENT,\n   NAME VARCHAR(20) NOT NULL,\n   AGE INT NOT NULL,\n   IMAGE BLOB,\n   PRIMARY KEY (ID)\n);<\/code><\/pre>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>MapSqlParameterSource in = new MapSqlParameterSource();\nin.addValue(\"id\", id);\nin.addValue(\"image\",  new SqlLobValue(new ByteArrayInputStream(imageData), \n   imageData.length, new DefaultLobHandler()), Types.BLOB);\n\nString SQL = \"update Student set image = :image where id = :id\";\nNamedParameterJdbcTemplate jdbcTemplateObject = new NamedParameterJdbcTemplate(dataSource);\njdbcTemplateObject.update(SQL, in);\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>in<\/strong>&nbsp;\u2212 SqlParameterSource object to pass a parameter to update a query.<\/li><li><strong>SqlLobValue<\/strong>&nbsp;\u2212 Object to represent an SQL BLOB\/CLOB value parameter.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 NamedParameterJdbcTemplate object to update student object in database.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will update a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to update\n      * a record into the Student table.\n   *\/\n   public void updateImage(Integer id, byte&#91;] imageData);\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n   private byte&#91;] image;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n   public byte&#91;] getImage() {\n      return image;\n   }\n   public void setImage(byte&#91;] image) {\n      this.image = image;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      student.setImage(rs.getBytes(\"image\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.jdbc.core.simple.SimpleJdbcCall;\nimport org.springframework.jdbc.core.support.SqlLobValue;\nimport org.springframework.jdbc.support.lob.DefaultLobHandler;\n\nimport java.io.ByteArrayInputStream;\nimport java.sql.Types;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n   }\n   public void updateImage(Integer id, byte&#91;] imageData) {\n      MapSqlParameterSource in = new MapSqlParameterSource();\n      in.addValue(\"id\", id);\n      in.addValue(\"image\",  new SqlLobValue(new ByteArrayInputStream(imageData), \n         imageData.length, new DefaultLobHandler()), Types.BLOB);\n\n      String SQL = \"update Student set image = :image where id = :id\";\n      NamedParameterJdbcTemplate jdbcTemplateObject = new \n         NamedParameterJdbcTemplate(dataSource);\n      \n      jdbcTemplateObject.update(SQL, in);\n      System.out.println(\"Updated Record with ID = \" + id );\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      byte&#91;] imageData = {0,1,0,8,20,40,95};\n      studentJDBCTemplate.updateImage(1, imageData);  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns=\"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Updated Record with ID = 1\n<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to update a BLOB using an Update Query with the help of Spring JDBC. We&#8217;ll update the available records in Student Table. Student Table Syntax Where, in&nbsp;\u2212 SqlParameterSource object to pass a parameter to update a query. SqlLobValue&nbsp;\u2212 Object to represent an SQL BLOB\/CLOB value parameter. jdbcTemplateObject&nbsp;\u2212 NamedParameterJdbcTemplate object to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1815"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1815"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1815\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1816,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1815\/revisions\/1816"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1815"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1815"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1815"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1817,
        "date": "2021-03-16T07:01:50",
        "date_gmt": "2021-03-16T07:01:50",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1817"
        },
        "modified": "2021-03-16T07:01:50",
        "modified_gmt": "2021-03-16T07:01:50",
        "slug": "handling-clob",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/handling-clob\/",
        "title": {
            "rendered": "Handling CLOB"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to update a CLOB using an Update Query with the help of Spring JDBC. We&#8217;ll update the available records in Student Table.<\/p>\n\n\n\n<h2>Student Table<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE Student(\n   ID   INT NOT NULL AUTO_INCREMENT,\n   NAME VARCHAR(20) NOT NULL,\n   AGE  INT NOT NULL,\n   DESCRIPTION LONGTEXT,\n   PRIMARY KEY (ID)\n);<\/code><\/pre>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>MapSqlParameterSource in = new MapSqlParameterSource();\nin.addValue(\"id\", id);\nin.addValue(\"description\",  new SqlLobValue(\n   description, new DefaultLobHandler()), Types.CLOB);\n\nString SQL = \"update Student set description = :description where id = :id\";\nNamedParameterJdbcTemplate jdbcTemplateObject = new NamedParameterJdbcTemplate(dataSource);\n\njdbcTemplateObject.update(SQL, in);\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>in<\/strong>&nbsp;\u2212 SqlParameterSource object to pass a parameter to update a query.<\/li><li><strong>SqlLobValue<\/strong>&nbsp;\u2212 Object to represent an SQL BLOB\/CLOB value parameter.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 NamedParameterJdbcTemplate object to update student object in the database.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example, which will update a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to update\n      * a record into the Student table.\n   *\/\n   public void updateDescription(Integer id, String description);\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n   private String description;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n   public String getDescription() {\n      return description;\n   }\n   public void setDescription(String description) {\n      this.description = description;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      student.setDescription(rs.getString(\"description\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.jdbc.core.simple.SimpleJdbcCall;\nimport org.springframework.jdbc.core.support.SqlLobValue;\nimport org.springframework.jdbc.support.lob.DefaultLobHandler;\n\nimport java.io.ByteArrayInputStream;\nimport java.sql.Types;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n   }\n   public void updateDescription(Integer id, String description) {\n      MapSqlParameterSource in = new MapSqlParameterSource();\n      in.addValue(\"id\", id);\n      in.addValue(\"description\",  new SqlLobValue(description, \n         new DefaultLobHandler()), Types.CLOB);\n\n      String SQL = \"update Student set description = :description where id = :id\";\n      NamedParameterJdbcTemplate jdbcTemplateObject = new \n         NamedParameterJdbcTemplate(dataSource);\n      \n      jdbcTemplateObject.update(SQL, in);\n      System.out.println(\"Updated Record with ID = \" + id );\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      studentJDBCTemplate.updateDescription(1, \n         \"This can be a very long text upto 4 GB of size.\"); \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Updated Record with ID = 1<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to update a CLOB using an Update Query with the help of Spring JDBC. We&#8217;ll update the available records in Student Table. Student Table Syntax Where, in&nbsp;\u2212 SqlParameterSource object to pass a parameter to update a query. SqlLobValue&nbsp;\u2212 Object to represent an SQL BLOB\/CLOB value parameter. jdbcTemplateObject&nbsp;\u2212 NamedParameterJdbcTemplate object to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1817"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1817"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1817\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1818,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1817\/revisions\/1818"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1817"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1817"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1817"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1819,
        "date": "2021-03-16T07:08:32",
        "date_gmt": "2021-03-16T07:08:32",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1819"
        },
        "modified": "2021-03-16T07:08:32",
        "modified_gmt": "2021-03-16T07:08:32",
        "slug": "batch-operation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/batch-operation\/",
        "title": {
            "rendered": "Batch Operation"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to make a batch update using Spring JDBC. We&#8217;ll update the available records in Student table in a single batch operation.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"update Student set age = ? where id = ?\";\nint&#91;] updateCounts = jdbcTemplateObject.batchUpdate(SQL,\n   new BatchPreparedStatementSetter() {\n   \n   public void setValues(PreparedStatement ps, int i) throws SQLException {\n      ps.setInt(1, students.get(i).getAge());\t\t\t\t\t\t\n      ps.setInt(2, students.get(i).getId());\t\n   }\n   public int getBatchSize() {\n      return students.size();\n   }\n}); \n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>SQL<\/strong>&nbsp;\u2212 Update query to update student&#8217;s age.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to update student object in database.<\/li><li><strong>BatchPreparedStatementSetter<\/strong>&nbsp;\u2212 Batch executor, set values in PerparedStatement per item identified by list of objects student and index i. getBatchSize() returns the size of the batch.<\/li><li><strong>updateCounts<\/strong>&nbsp;\u2212 Int array containing updated row count per update query.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will update a batch operation. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();  \n\n   public void batchUpdate(final List&lt;Student> students);\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.PreparedStatement;\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.BatchPreparedStatementSetter;\nimport java.sql.SQLException;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, \n                                new StudentMapper());\n      return students;\n   }\n   public void batchUpdate(final List&lt;Student> students){\n      String SQL = \"update Student set age = ? where id = ?\";\n      int&#91;] updateCounts = jdbcTemplateObject.batchUpdate(SQL,\n         new BatchPreparedStatementSetter() {\n         \n         public void setValues(PreparedStatement ps, int i) throws SQLException {\n            ps.setInt(1, students.get(i).getAge());\t\t\t\t\t\t\n            ps.setInt(2, students.get(i).getId());\t\n         }\n         public int getBatchSize() {\n            return students.size();\n         }\n      }); \n      System.out.println(\"Records updated!\");\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n\n      List&lt;Student> initialStudents = studentJDBCTemplate.listStudents();\n      System.out.println(\"Initial Students\");\n      \n      for(Student student2: initialStudents){\n         System.out.print(\"ID : \" + student2.getId() );\n         System.out.println(\", Age : \" + student2.getAge()); \n      }\n\n      Student student = new Student();\n      student.setId(1);\n      student.setAge(10);\n\n      Student student1 = new Student();\n      student1.setId(3);\n      student1.setAge(10);\n\n      List&lt;Student> students = new ArrayList&lt;Student>();\n      students.add(student);\n      students.add(student1);\n\n      studentJDBCTemplate.batchUpdate(students);\n\n      List&lt;Student> updatedStudents = studentJDBCTemplate.listStudents();\n      System.out.println(\"Updated Students\");\n      \n      for(Student student3: updatedStudents){\n         System.out.print(\"ID : \" + student3.getId() );\n         System.out.println(\", Age : \" + student3.getAge()); \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation=\"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial Students\nID : 1, Age : 11\nID : 3, Age : 15\nRecords updated!\nUpdated Students\nID : 1, Age : 10\nID : 3, Age : 10<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to make a batch update using Spring JDBC. We&#8217;ll update the available records in Student table in a single batch operation. Syntax Where, SQL&nbsp;\u2212 Update query to update student&#8217;s age. jdbcTemplateObject&nbsp;\u2212 StudentJDBCTemplate object to update student object in database. BatchPreparedStatementSetter&nbsp;\u2212 Batch executor, set values in PerparedStatement per item identified by [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1819"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1819"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1819\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1820,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1819\/revisions\/1820"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1819"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1819"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1819"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1821,
        "date": "2021-03-16T07:13:40",
        "date_gmt": "2021-03-16T07:13:40",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1821"
        },
        "modified": "2021-03-16T07:13:40",
        "modified_gmt": "2021-03-16T07:13:40",
        "slug": "objects-batch-operation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/objects-batch-operation\/",
        "title": {
            "rendered": "Objects Batch Operation"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to make a batch update using objects in Spring JDBC. We&#8217;ll update the available records in Student table in a single batch operation.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"update Student set age = :age where id = :id\";\nSqlParameterSource&#91;] batch = SqlParameterSourceUtils.createBatch(students.toArray());\n\nNamedParameterJdbcTemplate jdbcTemplateObject = new NamedParameterJdbcTemplate(dataSource);\n\nint&#91;] updateCounts = jdbcTemplateObject.batchUpdate(SQL,batch);\nSystem.out.println(\"records updated!\"); \n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>SQL<\/strong>&nbsp;\u2212 Update query to update student&#8217;s age.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to update student object in database.<\/li><li><strong>batch<\/strong>&nbsp;\u2212 SqlParameterSource object to represent a batch of object.<\/li><li><strong>updateCounts<\/strong>&nbsp;\u2212 Int array containing updated row count per update query.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will update a batch operation. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();  \n\n   public void batchUpdate(final List&lt;Student> students);\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n   public void batchUpdate(final List&lt;Student> students){\n      String SQL = \"update Student set age = :age where id = :id\";\n      SqlParameterSource&#91;] batch = SqlParameterSourceUtils.createBatch(students.toArray());\n      NamedParameterJdbcTemplate jdbcTemplateObject = new \n         NamedParameterJdbcTemplate(dataSource);\n\n      int&#91;] updateCounts = jdbcTemplateObject.batchUpdate(SQL,batch);\n      System.out.println(\"Records updated!\");\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n\n      List&lt;Student> initialStudents = studentJDBCTemplate.listStudents();\n      System.out.println(\"Initial Students\");\n      \n      for(Student student2: initialStudents){\n         System.out.print(\"ID : \" + student2.getId() );\n         System.out.println(\", Age : \" + student2.getAge()); \n      }\n      Student student = new Student();\n      student.setId(1);\n      student.setAge(15);\n\n      Student student1 = new Student();\n      student1.setId(3);\n      student1.setAge(16);\n\n      List&lt;Student> students = new ArrayList&lt;Student>();\n      students.add(student);\n      students.add(student1);\n\n      studentJDBCTemplate.batchUpdate(students);\n\n      List&lt;Student> updatedStudents = studentJDBCTemplate.listStudents();\n      System.out.println(\"Updated Students\");\n      \n      for(Student student3: updatedStudents){\n         System.out.print(\"ID : \" + student3.getId() );\n         System.out.println(\", Age : \" + student3.getAge()); \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns=\"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial Students\nID : 1, Age : 10\nID : 3, Age : 10\nRecords updated!\nUpdated Students\nID : 1, Age : 15\nID : 3, Age : 16<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to make a batch update using objects in Spring JDBC. We&#8217;ll update the available records in Student table in a single batch operation. Syntax Where, SQL&nbsp;\u2212 Update query to update student&#8217;s age. jdbcTemplateObject&nbsp;\u2212 StudentJDBCTemplate object to update student object in database. batch&nbsp;\u2212 SqlParameterSource object to represent a batch of object. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1821"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1821"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1821\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1822,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1821\/revisions\/1822"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1821"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1821"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1821"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1823,
        "date": "2021-03-16T07:19:59",
        "date_gmt": "2021-03-16T07:19:59",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1823"
        },
        "modified": "2021-03-16T07:19:59",
        "modified_gmt": "2021-03-16T07:19:59",
        "slug": "multiple-batches-operation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/multiple-batches-operation\/",
        "title": {
            "rendered": "Multiple Batches Operation"
        },
        "content": {
            "rendered": "\n<p>Following example will demonstrate how to make multiple batch updates in a single call using Spring JDBC. We&#8217;ll update the available records in Student table in a multiple batch operation where batch size is 1.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"update Student set age = ? where id = ?\";\nint&#91;]&#91;] updateCounts = jdbcTemplateObject.batchUpdate(SQL,students,1,\n   new ParameterizedPreparedStatementSetter&lt;Student&gt;() {\n   \n   public void setValues(PreparedStatement ps, Student student)\n      throws SQLException {\n      ps.setInt(1, student.getAge());\t\t\t\t\t\t\n      ps.setInt(2, student.getId());\t\n   }\n}); \n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>SQL<\/strong>&nbsp;\u2212 Update query to update student&#8217;s age.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to update student object in the database.<\/li><li><strong>ParameterizedPreparedStatementSetter<\/strong>&nbsp;\u2212 Batch executor, set values in PerparedStatement per item identified by the list of objects student.<\/li><li><strong>updateCounts<\/strong>&nbsp;\u2212 Int[][] array containing updated row count per update query per batch.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will update multiple batch operation. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();  \n\n   public void batchUpdate(final List&lt;Student> students);\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.PreparedStatement;\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.ParameterizedPreparedStatementSetter;\n\nimport java.sql.SQLException;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n   public void batchUpdate(final List&lt;Student> students){\n      String SQL = \"update Student set age = ? where id = ?\";\n      int&#91;]&#91;] updateCounts = jdbcTemplateObject.batchUpdate(SQL,students,1,\n         new ParameterizedPreparedStatementSetter&lt;Student>() {\n         \n         public void setValues(PreparedStatement ps, Student student)\n            throws SQLException {\n            ps.setInt(1, student.getAge());\t\t\t\t\t\t\n            ps.setInt(2, student.getId());\t\n         }\n      });\n      System.out.println(\"Records updated!\");\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n\n      List&lt;Student> initialStudents = studentJDBCTemplate.listStudents();\n      System.out.println(\"Initial Students\");\n      \n      for(Student student2: initialStudents){\n         System.out.print(\"ID : \" + student2.getId() );\n         System.out.println(\", Age : \" + student2.getAge()); \n      }\n\n      Student student = new Student();\n      student.setId(1);\n      student.setAge(17);\n\n      Student student1 = new Student();\n      student1.setId(3);\n      student1.setAge(18);\n\n      List&lt;Student> students = new ArrayList&lt;Student>();\n      students.add(student);\n      students.add(student1);\n      studentJDBCTemplate.batchUpdate(students);\n\n      List&lt;Student> updatedStudents = studentJDBCTemplate.listStudents();\n      System.out.println(\"Updated Students\");\n      \n      for(Student student3: updatedStudents){\n         System.out.print(\"ID : \" + student3.getId() );\n         System.out.println(\", Age : \" + student3.getAge()); \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial Students\nID : 1, Age : 15\nID : 3, Age : 16\nrecords updated!\nUpdated Students\nID : 1, Age : 17\nID : 3, Age : 18<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will demonstrate how to make multiple batch updates in a single call using Spring JDBC. We&#8217;ll update the available records in Student table in a multiple batch operation where batch size is 1. Syntax Where, SQL&nbsp;\u2212 Update query to update student&#8217;s age. jdbcTemplateObject&nbsp;\u2212 StudentJDBCTemplate object to update student object in the database. ParameterizedPreparedStatementSetter&nbsp;\u2212 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1823"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1823"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1823\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1824,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1823\/revisions\/1824"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1823"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1823"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1823"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1825,
        "date": "2021-03-16T07:24:26",
        "date_gmt": "2021-03-16T07:24:26",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1825"
        },
        "modified": "2021-03-16T07:24:26",
        "modified_gmt": "2021-03-16T07:24:26",
        "slug": "jdbctemplate-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jdbctemplate-class\/",
        "title": {
            "rendered": "JdbcTemplate Class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>org.springframework.jdbc.core.JdbcTemplate<\/strong>&nbsp;class is the central class in the JDBC core package. It simplifies the use of JDBC and helps to avoid common errors. It executes core JDBC workflow, leaving the application code to provide SQL and extract results. This class executes SQL queries or updates, initiating iteration over ResultSets and catching JDBC exceptions and translating them to the generic, more informative exception hierarchy defined in the&nbsp;<strong>org.springframework.dao<\/strong>&nbsp;package.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for org.springframework.jdbc.core.JdbcTemplate class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class JdbcTemplate\n   extends JdbcAccessor\n      implements JdbcOperations\n<\/code><\/pre>\n\n\n\n<h2>Usage<\/h2>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Create a JdbcTemplate object using a configured datasource.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Use JdbcTemplate object methods to make database operations.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Following example will demonstrate how to read a query using JdbcTemplate class. We&#8217;ll read the available records in Student Table.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String selectQuery = \"select * from Student\";\nList &lt;Student&gt; students = jdbcTemplateObject.query(selectQuery, new StudentMapper());<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>selectQuery<\/strong>&nbsp;\u2212 Select query to read students.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to read student object from the database.<\/li><li><strong>StudentMapper<\/strong>&nbsp;\u2212 StudentMapper is a RowMapper object to map each fetched record to the student object.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will select a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.tutorialspoint.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"------Listing Multiple Records--------\" );\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n      \n      for (Student record : students) {\n         System.out.print(\"ID : \" + record.getId() );\n         System.out.print(\", Name : \" + record.getName() );\n         System.out.println(\", Age : \" + record.getAge());\n      }  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id=\"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id=\"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>------Listing Multiple Records--------\nID : 1, Name : Zara, Age : 11\nID : 2, Name : Nuha, Age : 2\nID : 3, Name : Ayan, Age : 15<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;org.springframework.jdbc.core.JdbcTemplate&nbsp;class is the central class in the JDBC core package. It simplifies the use of JDBC and helps to avoid common errors. It executes core JDBC workflow, leaving the application code to provide SQL and extract results. This class executes SQL queries or updates, initiating iteration over ResultSets and catching JDBC exceptions and translating them [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1825"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1825"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1825\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1826,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1825\/revisions\/1826"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1825"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1825"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1825"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1827,
        "date": "2021-03-16T07:31:16",
        "date_gmt": "2021-03-16T07:31:16",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1827"
        },
        "modified": "2021-03-16T07:31:16",
        "modified_gmt": "2021-03-16T07:31:16",
        "slug": "preparedstatementsetter-interface",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/preparedstatementsetter-interface\/",
        "title": {
            "rendered": "PreparedStatementSetter Interface"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>org.springframework.jdbc.core.PreparedStatementSetter<\/strong>&nbsp;interface acts as a general callback interface used by the JdbcTemplate class. This interface sets values on a PreparedStatement provided by the JdbcTemplate class, for each of a number of updates in a batch using the same SQL.<\/p>\n\n\n\n<p>Implementations are responsible for setting any necessary parameters. SQL with placeholders will already have been supplied. It&#8217;s easier to use this interface than PreparedStatementCreator. The JdbcTemplate will create the PreparedStatement, with the callback only being responsible for setting parameter values.<\/p>\n\n\n\n<h2>Interface Declaration<\/h2>\n\n\n\n<p>Following is the declaration for org.springframework.jdbc.core.PreparedStatementSetter interface \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface PreparedStatementSetter\n<\/code><\/pre>\n\n\n\n<h2>Usage<\/h2>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Create a JdbcTemplate object using a configured datasource.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212 Use JdbcTemplate object methods to make database operations while passing the PreparedStatementSetter object to replace place holders in the query.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Following example will demonstrate how to read a query using JdbcTemplate class and PreparedStatementSetter interface. We&#8217;ll read available record of a student in Student Table.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>final String SQL = \"select * from Student where id = ? \";\nList &lt;Student&gt; students = jdbcTemplateObject.query(\n   SQL, new PreparedStatementSetter() {\n   \n   public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setInt(1, id);\n   }\n},\nnew StudentMapper());\n<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>SQL<\/strong>&nbsp;\u2212 Select query to read students.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to read student object from database.<\/li><li><strong>PreparedStatementSetter<\/strong>&nbsp;\u2212 PreparedStatementSetter object to set parameters in query.<\/li><li><strong>StudentMapper<\/strong>&nbsp;\u2212 StudentMapper is a RowMapper object to map each fetched record to student object.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will select a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * a record from the Student table corresponding\n      * to a passed student id.\n   *\/\n   public Student getStudent(Integer id);\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public Student getStudent(final Integer id) {\n      final String SQL = \"select * from Student where id = ? \";\n      List &lt;Student> students = jdbcTemplateObject.query(\n         SQL, new PreparedStatementSetter() {\n\t\t   \n         public void setValues(PreparedStatement preparedStatement) throws SQLException {\n            preparedStatement.setInt(1, id);\n         }\n      },\n      new StudentMapper());\n      return students.get(0);\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      Student student = studentJDBCTemplate.getStudent(1);\n      System.out.print(\"ID : \" + student.getId() );\n      System.out.println(\", Age : \" + student.getAge()); \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ID : 1, Age : 17<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;org.springframework.jdbc.core.PreparedStatementSetter&nbsp;interface acts as a general callback interface used by the JdbcTemplate class. This interface sets values on a PreparedStatement provided by the JdbcTemplate class, for each of a number of updates in a batch using the same SQL. Implementations are responsible for setting any necessary parameters. SQL with placeholders will already have been supplied. It&#8217;s [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1827"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1827"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1827\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1828,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1827\/revisions\/1828"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1827"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1827"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1827"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1829,
        "date": "2021-03-16T07:37:01",
        "date_gmt": "2021-03-16T07:37:01",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1829"
        },
        "modified": "2021-03-16T07:37:01",
        "modified_gmt": "2021-03-16T07:37:01",
        "slug": "resultsetextractor-interface",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/resultsetextractor-interface\/",
        "title": {
            "rendered": "ResultSetExtractor Interface"
        },
        "content": {
            "rendered": "\n<p>The\u00a0<strong>org. spring framework.JDBC.core.ResultSetExtractor\u00a0interface is a callback interface used by JdbcTemplate&#8217;s query methods. Implementations of this interface perform the actual work of extracting results from a ResultSet<\/strong> but don&#8217;t need to worry about exception handling.<\/p>\n\n\n\n<p>SQLExceptions will be caught and handled by the calling JdbcTemplate. This interface is mainly used within the JDBC framework itself. A RowMapper is usually a simpler choice for ResultSet processing, mapping one result object per row instead of one result object for the entire ResultSet.<\/p>\n\n\n\n<h2>Interface Declaration<\/h2>\n\n\n\n<p>Following is the declaration for org.springframework.jdbc.core.ResultSetExtractor interface \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface ResultSetExtractor\n<\/code><\/pre>\n\n\n\n<h2>Usage<\/h2>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Create a JdbcTemplate object using a configured datasource.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Use JdbcTemplate object methods to make database operations while parsing the resultset using ResultSetExtractor.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Following example will demonstrate how to read a query using JdbcTemplate class and ResultSetExtractor interface. We&#8217;ll read available record of a student in Student Table.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public List&lt;Student&gt; listStudents() {\n   String SQL = \"select * from Student\";\n      List &lt;Student&gt; students = jdbcTemplateObject.query(SQL, \n         new ResultSetExtractor&lt;List&lt;Student&gt;&gt;(){\n         \n         public List&lt;Student&gt; extractData(\n            ResultSet rs) throws SQLException, DataAccessException {\n            \n            List&lt;Student&gt; list = new ArrayList&lt;Student&gt;();  \n            while(rs.next()){  \n               Student student = new Student();\n               student.setId(rs.getInt(\"id\"));\n               student.setName(rs.getString(\"name\"));\n               student.setAge(rs.getInt(\"age\"));\n               student.setDescription(rs.getString(\"description\"));\n               student.setImage(rs.getBytes(\"image\"));\n               list.add(student);  \n            }  \n            return list;  \n         }    \t  \n      });\n   return students;\n}<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>SQL<\/strong>&nbsp;\u2212 Select query to read students.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to read student object from database.<\/li><li><strong>ResultSetExtractor<\/strong>&nbsp;\u2212 ResultSetExtractor object to parse resultset object.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will select a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, \n         new ResultSetExtractor&lt;List&lt;Student>>(){\n         \n         public List&lt;Student> extractData(\n            ResultSet rs) throws SQLException, DataAccessException {\n            \n            List&lt;Student> list = new ArrayList&lt;Student>();  \n            while(rs.next()){  \n               Student student = new Student();\n               student.setId(rs.getInt(\"id\"));\n               student.setName(rs.getString(\"name\"));\n               student.setAge(rs.getInt(\"age\"));\n               student.setDescription(rs.getString(\"description\"));\n               student.setImage(rs.getBytes(\"image\"));\n               list.add(student);  \n            }  \n            return list;  \n         }    \t  \n      });\n      return students;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");\n      \n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n\n      for(Student student: students){\n         System.out.print(\"ID : \" + student.getId() );\n         System.out.println(\", Age : \" + student.getAge()); \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ID : 1, Age : 17\nID : 3, Age : 18<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The\u00a0org. spring framework.JDBC.core.ResultSetExtractor\u00a0interface is a callback interface used by JdbcTemplate&#8217;s query methods. Implementations of this interface perform the actual work of extracting results from a ResultSet but don&#8217;t need to worry about exception handling. SQLExceptions will be caught and handled by the calling JdbcTemplate. This interface is mainly used within the JDBC framework itself. A [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1829"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1829"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1829\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1830,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1829\/revisions\/1830"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1829"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1829"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1829"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1831,
        "date": "2021-03-16T07:41:59",
        "date_gmt": "2021-03-16T07:41:59",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1831"
        },
        "modified": "2021-03-16T07:41:59",
        "modified_gmt": "2021-03-16T07:41:59",
        "slug": "rowmapper-interface",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/rowmapper-interface\/",
        "title": {
            "rendered": "RowMapper Interface"
        },
        "content": {
            "rendered": "\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p>The\u00a0<strong>org. spring framework<\/strong>.JDBC<strong>.core.RowMapper&lt;T><\/strong>\u00a0interface is used by JdbcTemplate for mapping rows of a ResultSet on a per-row basis. Implementations of this interface perform the actual work of mapping each row to a result object. SQLExceptions if any thrown will be caught and handled by the calling JdbcTemplate.<\/p>\n\n\n\n<h2>Interface Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>org.springframework.jdbc.core.RowMapper&lt;T&gt;<\/strong>&nbsp;interface \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface RowMapper&lt;T&gt;\n<\/code><\/pre>\n\n\n\n<h2>Usage<\/h2>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Create a JdbcTemplate object using a configured datasource.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Create a StudentMapper object implementing RowMapper interface.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212 Use JdbcTemplate object methods to make database operations while using StudentMapper object.<\/p>\n\n\n\n<p>Following example will demonstrate how to read a query using spring jdbc. We&#8217;ll map read records from Student Table to Student object using StudentMapper object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"select * from Student\";\nList &lt;Student&gt; students = jdbcTemplateObject.query(SQL, new StudentMapper());<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>SQL<\/strong>&nbsp;\u2212 Read query to read all student records.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to read student records from database.<\/li><li><strong>StudentMapper<\/strong>&nbsp;\u2212 StudentMapper object to map student records to student objects.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will read a query and map result using StudentMapper object. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDao.java.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDao {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentJDBCTemplate implements StudentDao {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.tutorialspoint.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"------Listing Multiple Records--------\" );\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n      \n      for (Student record : students) {\n         System.out.print(\"ID : \" + record.getId() );\n         System.out.print(\", Name : \" + record.getName() );\n         System.out.println(\", Age : \" + record.getAge());\n      }  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>------Listing Multiple Records--------\nID : 1, Name : Zara, Age : 17\nID : 3, Name : Ayan, Age : 18<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The\u00a0org. spring framework.JDBC.core.RowMapper&lt;T>\u00a0interface is used by JdbcTemplate for mapping rows of a ResultSet on a per-row basis. Implementations of this interface perform the actual work of mapping each row to a result object. SQLExceptions if any thrown will be caught and handled by the calling JdbcTemplate. Interface Declaration Following is the declaration for&nbsp;org.springframework.jdbc.core.RowMapper&lt;T&gt;&nbsp;interface \u2212 Usage [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1831"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1831"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1831\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1832,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1831\/revisions\/1832"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1831"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1831"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1831"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1833,
        "date": "2021-03-16T07:47:16",
        "date_gmt": "2021-03-16T07:47:16",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1833"
        },
        "modified": "2021-03-16T07:47:16",
        "modified_gmt": "2021-03-16T07:47:16",
        "slug": "namedparameterjdbctemplate-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/namedparameterjdbctemplate-class\/",
        "title": {
            "rendered": "NamedParameterJdbcTemplate Class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>org.springframework.jdbc.core.NamedParameterJdbcTemplate<\/strong>&nbsp;class is a template class with a basic set of JDBC operations, allowing the use of named parameters rather than traditional &#8216;?&#8217; placeholders. This class delegates to a wrapped JdbcTemplate once the substitution from named parameters to JDBC style &#8216;?&#8217; placeholders is done at execution time. It also allows to expand a list of values to the appropriate number of placeholders.<\/p>\n\n\n\n<h2>Interface Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>org.springframework.jdbc.core.NamedParameterJdbcTemplate<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class NamedParameterJdbcTemplate\n   extends Object\n      implements NamedParameterJdbcOperations\n<\/code><\/pre>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>MapSqlParameterSource in = new MapSqlParameterSource();\nin.addValue(\"id\", id);\nin.addValue(\"description\",  new SqlLobValue(description, new DefaultLobHandler()), Types.CLOB);\n\nString SQL = \"update Student set description = :description where id = :id\";\nNamedParameterJdbcTemplate jdbcTemplateObject = new NamedParameterJdbcTemplate(dataSource);\njdbcTemplateObject.update(SQL, in);<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>in<\/strong>&nbsp;\u2212 SqlParameterSource object to pass a parameter to update a query.<\/li><li><strong>SqlLobValue<\/strong>&nbsp;\u2212 Object to represent an SQL BLOB\/CLOB value parameter.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 NamedParameterJdbcTemplate object to update student object in the database.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will update a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to update\n      * a record into the Student table.\n   *\/\n   public void updateDescription(Integer id, String description);\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n   private String description;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n   public String getDescription() {\n      return description;\n   }\n   public void setDescription(String description) {\n      this.description = description;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      student.setDescription(rs.getString(\"description\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.jdbc.core.simple.SimpleJdbcCall;\nimport org.springframework.jdbc.core.support.SqlLobValue;\nimport org.springframework.jdbc.support.lob.DefaultLobHandler;\n\nimport java.io.ByteArrayInputStream;\nimport java.sql.Types;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n   }\n   public void updateDescription(Integer id, String description) {\n      MapSqlParameterSource in = new MapSqlParameterSource();\n      in.addValue(\"id\", id);\n      in.addValue(\"description\",  new SqlLobValue(\n         description, new DefaultLobHandler()), Types.CLOB);\n\n      String SQL = \"update Student set description = :description where id = :id\";\n      NamedParameterJdbcTemplate jdbcTemplateObject = \n         new NamedParameterJdbcTemplate(dataSource);\n      \n      jdbcTemplateObject.update(SQL, in);\n      System.out.println(\"Updated Record with ID = \" + id );\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      studentJDBCTemplate.updateDescription(1, \n         \"This can be a very long text upto 4 GB of size.\"); \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Updated Record with ID = 1<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;org.springframework.jdbc.core.NamedParameterJdbcTemplate&nbsp;class is a template class with a basic set of JDBC operations, allowing the use of named parameters rather than traditional &#8216;?&#8217; placeholders. This class delegates to a wrapped JdbcTemplate once the substitution from named parameters to JDBC style &#8216;?&#8217; placeholders is done at execution time. It also allows to expand a list of values [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1833"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1833"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1833\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1834,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1833\/revisions\/1834"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1833"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1833"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1833"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1835,
        "date": "2021-03-16T07:51:17",
        "date_gmt": "2021-03-16T07:51:17",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1835"
        },
        "modified": "2021-03-16T07:51:17",
        "modified_gmt": "2021-03-16T07:51:17",
        "slug": "simplejdbcinsert-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/simplejdbcinsert-class\/",
        "title": {
            "rendered": "SimpleJdbcInsert Class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>org.springframework.jdbc.core.SimpleJdbcInsert<\/strong>&nbsp;class is a multi-threaded, reusable object providing easy insert capabilities for a table. It provides meta data processing to simplify the code needed to construct a basic insert statement. The actual insert is being handled using Spring&#8217;s JdbcTemplate<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>org.springframework.jdbc.core.SimpleJdbcInsert<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SimpleJdbcInsert\n   extends AbstractJdbcInsert\n      implements SimpleJdbcInsertOperations\n<\/code><\/pre>\n\n\n\n<p>Following example will demonstrate how to insert a query using Spring JDBC. We&#8217;ll insert one record in Student Table using SimpleJdbcInsert object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>jdbcInsert = new SimpleJdbcInsert(dataSource).withTableName(\"Student\");\nMap&lt;String,Object&gt; parameters = new HashMap&lt;String,Object&gt;();\n\nparameters.put(\"name\", name);\nparameters.put(\"age\", age);\njdbcInsert.execute(parameters);<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>jdbcInsert<\/strong>&nbsp;\u2212 SimpleJdbcInsert object to insert record in student table.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to read student object in database.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will insert a query. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to create\n      * a record in the Student table.\n   *\/\n   public void create(String name, Integer age);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.simple.SimpleJdbcInsert;\n\npublic class StudentJDBCTemplate implements StudentDao {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   SimpleJdbcInsert jdbcInsert;\n\n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n      this.jdbcInsert = new SimpleJdbcInsert(dataSource).withTableName(\"Student\");\n   }\n   public void create(String name, Integer age) {\n      Map&lt;String,Object> parameters = new HashMap&lt;String,Object>();\n      parameters.put(\"name\", name);\n      parameters.put(\"age\", age);\n      \n      jdbcInsert.execute(parameters);\n      System.out.println(\"Created Record Name = \" + name + \" Age = \" + age);\n      return;\n   }\n   public List&lt;Student> listStudents() {\n      String SQL = \"select * from Student\";\n      List &lt;Student> students = jdbcTemplateObject.query(SQL, new StudentMapper());\n      return students;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"------Records Creation--------\" );\n      studentJDBCTemplate.create(\"Nuha\", 2);\n\n      System.out.println(\"------Listing Multiple Records--------\" );\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n      \n      for (Student record : students) {\n         System.out.print(\"ID : \" + record.getId() );\n         System.out.print(\", Name : \" + record.getName() );\n         System.out.println(\", Age : \" + record.getAge());\n      }  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns=\"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>------Records Creation--------\nCreated Record Name = Nuha Age = 12\n------Listing Multiple Records--------\nID : 1, Name : Zara, Age : 17\nID : 3, Name : Ayan, Age : 18\nID : 4, Name : Nuha, Age : 12<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;org.springframework.jdbc.core.SimpleJdbcInsert&nbsp;class is a multi-threaded, reusable object providing easy insert capabilities for a table. It provides meta data processing to simplify the code needed to construct a basic insert statement. The actual insert is being handled using Spring&#8217;s JdbcTemplate Class Declaration Following is the declaration for&nbsp;org.springframework.jdbc.core.SimpleJdbcInsert&nbsp;class \u2212 Following example will demonstrate how to insert a query [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1835"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1835"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1835\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1836,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1835\/revisions\/1836"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1835"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1835"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1835"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1837,
        "date": "2021-03-16T07:57:29",
        "date_gmt": "2021-03-16T07:57:29",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1837"
        },
        "modified": "2021-03-16T07:57:29",
        "modified_gmt": "2021-03-16T07:57:29",
        "slug": "simplejdbccall-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/simplejdbccall-class\/",
        "title": {
            "rendered": "SimpleJdbcCall Class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>org.springframework.jdbc.core.SimpleJdbcCall<\/strong>&nbsp;class is a multi-threaded, reusable object representing a call to a stored procedure or a stored function. It provides meta data processing to simplify the code needed to access basic stored procedures\/functions.<\/p>\n\n\n\n<p>All you need to provide is the name of the procedure\/function and a map containing the parameters when you execute the call. The names of the supplied parameters will be matched up with in and out parameters declared when the stored procedure was created.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>org.springframework.jdbc.core.SimpleJdbcCall<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SimpleJdbcCall\n   extends AbstractJdbcCall\n      implements SimpleJdbcCallOperations\n<\/code><\/pre>\n\n\n\n<p>Following example will demonstrate how to call a stored procedure using Spring SimpleJdbcCall. We&#8217;ll read one of the available records in Student Table by calling a stored procedure. We&#8217;ll pass an id and receive a student record.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>SimpleJdbcCall jdbcCall = new SimpleJdbcCall(dataSource).withProcedureName(\"getRecord\");\nSqlParameterSource in = new MapSqlParameterSource().addValue(\"in_id\", id);\nMap&lt;String, Object&gt; out = jdbcCall.execute(in);\n\nStudent student = new Student();\nstudent.setId(id);\nstudent.setName((String) out.get(\"out_name\"));\nstudent.setAge((Integer) out.get(\"out_age\"));<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>jdbcCall<\/strong>&nbsp;\u2212 SimpleJdbcCall object to represent a stored procedure.<\/li><li><strong>in<\/strong>&nbsp;\u2212 SqlParameterSource object to pass a parameter to a stored procedure.<\/li><li><strong>student<\/strong>&nbsp;\u2212 Student object.<\/li><li><strong>out<\/strong>&nbsp;\u2212 Map object to represent output of stored procedure call result.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will call a stored procedure. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * a record from the Student table corresponding\n      * to a passed student id.\n   *\/\n   public Student getStudent(Integer id);  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemels;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.jdbc.core.simple.SimpleJdbcCall;\n\npublic class StudentJDBCTemplate implements StudentDAO {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public Student getStudent(Integer id) {\n      SimpleJdbcCall jdbcCall = new \n         SimpleJdbcCall(dataSource).withProcedureName(\"getRecord\");\n\n      SqlParameterSource in = new MapSqlParameterSource().addValue(\"in_id\", id);\n      Map&lt;String, Object> out = jdbcCall.execute(in);\n\n      Student student = new Student();\n      student.setId(id);\n      student.setName((String) out.get(\"out_name\"));\n      student.setAge((Integer) out.get(\"out_age\"));\n      return student;      \n   }\n}<\/code><\/pre>\n\n\n\n<p>The code you write for the execution of the call involves creating an SqlParameterSource containing the IN parameter. It&#8217;s important to match the name provided for the input value with that of the parameter name declared in the stored procedure. The execute method takes the IN parameters and returns a Map containing any out parameters keyed by the name as specified in the stored procedure.<\/p>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      Student student = studentJDBCTemplate.getStudent(1);\n      System.out.print(\"ID : \" + student.getId() );\n      System.out.print(\", Name : \" + student.getName() );\n      System.out.println(\", Age : \" + student.getAge()); \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns=\"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ID : 1, Name : Zara, Age : 11<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;org.springframework.jdbc.core.SimpleJdbcCall&nbsp;class is a multi-threaded, reusable object representing a call to a stored procedure or a stored function. It provides meta data processing to simplify the code needed to access basic stored procedures\/functions. All you need to provide is the name of the procedure\/function and a map containing the parameters when you execute the call. The [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1837"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1837"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1837\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1838,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1837\/revisions\/1838"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1837"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1837"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1837"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1839,
        "date": "2021-03-16T08:02:04",
        "date_gmt": "2021-03-16T08:02:04",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1839"
        },
        "modified": "2021-03-16T08:02:04",
        "modified_gmt": "2021-03-16T08:02:04",
        "slug": "sqlquery-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/sqlquery-class\/",
        "title": {
            "rendered": "SqlQuery Class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>org.springframework.jdbc.object.SqlQuery<\/strong>&nbsp;class provides a reusable operation object representing a SQL query.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>org.springframework.jdbc.object.SqlQuery<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class SqlQuery&lt;T&gt;\n   extends SqlOperation\n<\/code><\/pre>\n\n\n\n<h2>Usage<\/h2>\n\n\n\n<ul><li><strong>Step 1<\/strong>&nbsp;\u2212 Create a JdbcTemplate object using a configured datasource.<\/li><li><strong>Step 2<\/strong>&nbsp;\u2212 Create a StudentMapper object implementing RowMapper interface.<\/li><li><strong>Step 3<\/strong>&nbsp;\u2212 Use JdbcTemplate object methods to make database operations while using SqlQuery object.<\/li><\/ul>\n\n\n\n<p>Following example will demonstrate how to read a Query using SqlQuery Object. We&#8217;ll map read records from Student Table to Student object using StudentMapper object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String sql = \"select * from Student\";\nSqlQuery&lt;Student&gt; sqlQuery = new SqlQuery&lt;Student&gt;() {\n   @Override\n   protected RowMapper&lt;Student&gt; newRowMapper(Object&#91;] parameters,\n      Map&lt;?, ?&gt; context) {\n      return new StudentMapper();\n   }\n};\nsqlQuery.setDataSource(dataSource);\nsqlQuery.setSql(sql);\nList &lt;Student&gt; students = sqlQuery.execute();<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>SQL<\/strong>&nbsp;\u2212 Read query to read all student records.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to read student records from the database.<\/li><li><strong>StudentMapper<\/strong>&nbsp;\u2212 StudentMapper object to map the student records to student objects.<\/li><li><strong>SqlQuery<\/strong>&nbsp;\u2212 SqlQuery object to query student records and map them to student objects.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will read a query and map the result using StudentMapper object. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDao.java.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDao {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * all the records from the Student table.\n   *\/\n   public List&lt;Student> listStudents();   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.jdbc.object.SqlQuery;\n\npublic class StudentJDBCTemplate implements StudentDao {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);     \n   }\n   public List&lt;Student> listStudents() {\n      String sql = \"select * from Student\";\n      SqlQuery&lt;Student> sqlQuery = new SqlQuery&lt;Student>() {\n         @Override\n         protected RowMapper&lt;Student> newRowMapper(Object&#91;] parameters, Map&lt;?, ?> context){\n            \n            return new StudentMapper();\n         }\n      };\n      sqlQuery.setDataSource(dataSource);\n      sqlQuery.setSql(sql);\n      List &lt;Student> students = sqlQuery.execute();\n      return students;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.cdemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"------Listing Multiple Records--------\" );\n      List&lt;Student> students = studentJDBCTemplate.listStudents();\n      \n      for (Student record : students) {\n         System.out.print(\"ID : \" + record.getId() );\n         System.out.print(\", Name : \" + record.getName() );\n         System.out.println(\", Age : \" + record.getAge());\n      }  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>------Listing Multiple Records--------\nID : 1, Name : Zara, Age : 17\nID : 3, Name : Ayan, Age : 18\nID : 4, Name : Nuha, Age : 12<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;org.springframework.jdbc.object.SqlQuery&nbsp;class provides a reusable operation object representing a SQL query. Class Declaration Following is the declaration for&nbsp;org.springframework.jdbc.object.SqlQuery&nbsp;class \u2212 Usage Step 1&nbsp;\u2212 Create a JdbcTemplate object using a configured datasource. Step 2&nbsp;\u2212 Create a StudentMapper object implementing RowMapper interface. Step 3&nbsp;\u2212 Use JdbcTemplate object methods to make database operations while using SqlQuery object. Following example will [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1839"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1839"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1839\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1840,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1839\/revisions\/1840"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1839"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1839"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1839"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1841,
        "date": "2021-03-16T08:07:19",
        "date_gmt": "2021-03-16T08:07:19",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1841"
        },
        "modified": "2021-03-16T08:07:19",
        "modified_gmt": "2021-03-16T08:07:19",
        "slug": "sqlupdate-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/sqlupdate-class\/",
        "title": {
            "rendered": "SqlUpdate Class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>org.springframework.jdbc.object.SqlUpdate<\/strong>&nbsp;class provides reusable operation object representing a SQL update.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>org.springframework.jdbc.object.SqlUpdate<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class SqlUpdate&lt;T>\r\n   extends SqlOperation<\/code><\/pre>\n\n\n\n<h2>Usage<\/h2>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Create a JdbcTemplate object using a configured datasource.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Create a StudentMapper object implementing RowMapper interface.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212 Use JdbcTemplate object methods to carry out database operations while using SqlUpdate object.<\/p>\n\n\n\n<p>Following example will demonstrate how to update a Query using SqlUpdate Object. We&#8217;ll map update records from Student Table to Student object using StudentMapper object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String SQL = \"update Student set age = ? where id = ?\";\n\nSqlUpdate sqlUpdate = new SqlUpdate(dataSource,SQL);\nsqlUpdate.declareParameter(new SqlParameter(\"age\", Types.INTEGER));\nsqlUpdate.declareParameter(new SqlParameter(\"id\", Types.INTEGER));\nsqlUpdate.compile();\n\nsqlUpdate.update(age.intValue(),id.intValue());<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>SQL<\/strong>&nbsp;&#8211; Update query to update student records.<\/li><li><strong>jdbcTemplateObject<\/strong>&nbsp;\u2212 StudentJDBCTemplate object to read student records the from database.<\/li><li><strong>StudentMapper<\/strong>&nbsp;\u2212 StudentMapper object to map student records to student objects.<\/li><li><strong>sqlUpdate<\/strong>&nbsp;\u2212 SqlUpdate object to update student records.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example which will read a query and map result using StudentMapper object. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDao.java.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDao {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to update\n      * a record into the Student table.\n   *\/\n   public void update(Integer id, Integer age);\n\n   \/** \n      * This is the method to be used to list down\n      * a record from the Student table corresponding\n      * to a passed student id.\n   *\/\n   public Student getStudent(Integer id);   \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.Types;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.SqlParameter;\nimport org.springframework.jdbc.object.SqlUpdate;\n\npublic class StudentJDBCTemplate implements StudentDao {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public void update(Integer id, Integer age){\n      String SQL = \"update Student set age = ? where id = ?\";\n      \n      SqlUpdate sqlUpdate = new SqlUpdate(dataSource,SQL);\n      sqlUpdate.declareParameter(new SqlParameter(\"age\", Types.INTEGER));\n      sqlUpdate.declareParameter(new SqlParameter(\"id\", Types.INTEGER));\n      sqlUpdate.compile();\n      \n      sqlUpdate.update(age.intValue(),id.intValue());\n      System.out.println(\"Updated Record with ID = \" + id );\n      return;\n   }\n   public Student getStudent(Integer id) {\n      String SQL = \"select * from Student where id = ?\";\n      Student student = jdbcTemplateObject.queryForObject(\n         SQL, new Object&#91;]{id}, new StudentMapper());\n      \n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      System.out.println(\"----Updating Record with ID = 1 -----\" );\n      studentJDBCTemplate.update(1, 10);\n      \n      System.out.println(\"----Listing Record with ID = 1 -----\" );\n      Student student = studentJDBCTemplate.getStudent(1);\n      \n      System.out.print(\"ID : \" + student.getId() );\n      System.out.print(\", Name : \" + student.getName() );\n      System.out.println(\", Age : \" + student.getAge());  \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>----Updating Record with ID = 1 -----\nUpdated Record with ID = 1\n----Listing Record with ID = 1 -----\nID : 1, Name : Zara, Age : 10<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;org.springframework.jdbc.object.SqlUpdate&nbsp;class provides reusable operation object representing a SQL update. Class Declaration Following is the declaration for&nbsp;org.springframework.jdbc.object.SqlUpdate&nbsp;class \u2212 Usage Step 1&nbsp;\u2212 Create a JdbcTemplate object using a configured datasource. Step 2&nbsp;\u2212 Create a StudentMapper object implementing RowMapper interface. Step 3&nbsp;\u2212 Use JdbcTemplate object methods to carry out database operations while using SqlUpdate object. Following example will [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1841"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1841"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1841\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1842,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1841\/revisions\/1842"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1841"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1841"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1841"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1843,
        "date": "2021-03-16T08:12:11",
        "date_gmt": "2021-03-16T08:12:11",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1843"
        },
        "modified": "2021-03-16T08:12:11",
        "modified_gmt": "2021-03-16T08:12:11",
        "slug": "storedprocedure-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/storedprocedure-class\/",
        "title": {
            "rendered": "StoredProcedure Class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>org.springframework.jdbc.core.StoredProcedure<\/strong>&nbsp;class is the superclass for object abstractions of RDBMS stored procedures. This class is abstract and it is intended that subclasses will provide a typed method for invocation that delegates to the supplied execute(java.lang.Object&#8230;) method. The inherited SQL property is the name of the stored procedure in the RDBMS.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>org.springframework.jdbc.core.StoredProcedure<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class StoredProcedure\n   extends SqlCall\n<\/code><\/pre>\n\n\n\n<p>Following example will demonstrate how to call a stored procedure using Spring StoredProcedure. We&#8217;ll read one of the available records in Student Table by calling a stored procedure. We&#8217;ll pass an id and receive a student record.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class StudentProcedure extends StoredProcedure{\n   public StudentProcedure(DataSource dataSource, String procedureName){\n      super(dataSource,procedureName);\n      declareParameter(new SqlParameter(\"in_id\", Types.INTEGER));\n      declareParameter(new SqlOutParameter(\"out_name\", Types.VARCHAR));\n      declareParameter(new SqlOutParameter(\"out_age\", Types.INTEGER));\n      compile();\n   }\n   public Student execute(Integer id){\n      Map&lt;String, Object&gt; out = super.execute(id);\n      Student student = new Student();\n      student.setId(id);\n      student.setName((String) out.get(\"out_name\"));\n      student.setAge((Integer) out.get(\"out_age\"));\n      return student;  \t\n   }\n}<\/code><\/pre>\n\n\n\n<p>Where,<\/p>\n\n\n\n<ul><li><strong>StoredProcedure<\/strong>&nbsp;\u2212 StoredProcedure object to represent a stored procedure.<\/li><li><strong>StudentProcedure<\/strong>&nbsp;\u2212 StudentProcedure object extends StoredProcedure to declare input, output variable, and map result to Student object.<\/li><li><strong>student<\/strong>&nbsp;\u2212 Student object.<\/li><\/ul>\n\n\n\n<p>To understand the above-mentioned concepts related to Spring JDBC, let us write an example that will call a stored procedure. To write our example, let us have a working Eclipse IDE in place and use the following steps to create a Spring application.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project\u00a0<i>Student-created<\/i> under chapter\u00a0<em>Spring JDBC &#8211; First Application<\/em>.<\/td><\/tr><tr><td>2<\/td><td>Update the bean configuration and run the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the content of the Data Access Object interface file&nbsp;<strong>StudentDAO.java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\nimport javax.sql.DataSource;\n\npublic interface StudentDAO {\n   \/** \n      * This is the method to be used to initialize\n      * database resources ie. connection.\n   *\/\n   public void setDataSource(DataSource ds);\n   \n   \/** \n      * This is the method to be used to list down\n      * a record from the Student table corresponding\n      * to a passed student id.\n   *\/\n   public Student getStudent(Integer id);  \n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>Student.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of the&nbsp;<strong>StudentMapper.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class StudentMapper implements RowMapper&lt;Student> {\n   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n      Student student = new Student();\n      student.setId(rs.getInt(\"id\"));\n      student.setName(rs.getString(\"name\"));\n      student.setAge(rs.getInt(\"age\"));\n      return student;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the implementation class file&nbsp;<strong>StudentJDBCTemplate.java<\/strong>&nbsp;for the defined DAO interface StudentDAO.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.sql.Types;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.SqlOutParameter;\nimport org.springframework.jdbc.core.SqlParameter;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.jdbc.object.StoredProcedure;\n\npublic class StudentJDBCTemplate implements StudentDao {\n   private DataSource dataSource;\n   private JdbcTemplate jdbcTemplateObject;\n   \n   public void setDataSource(DataSource dataSource) {\n      this.dataSource = dataSource;\n      this.jdbcTemplateObject = new JdbcTemplate(dataSource);\n   }\n   public Student getStudent(Integer id) {    \n      StudentProcedure studentProcedure = new StudentProcedure(dataSource, \"getRecord\");\n      return studentProcedure.execute(id);      \n   }    \n}\nclass StudentProcedure extends StoredProcedure{\n   public StudentProcedure(DataSource dataSource, String procedureName) {\n      super(dataSource,procedureName);\n      declareParameter(new SqlParameter(\"in_id\", Types.INTEGER));\n      declareParameter(new SqlOutParameter(\"out_name\", Types.VARCHAR));\n      declareParameter(new SqlOutParameter(\"out_age\", Types.INTEGER));\n      compile();\n   }\n   public Student execute(Integer id){\n      Map&lt;String, Object> out = super.execute(id);\n      Student student = new Student();\n      student.setId(id);\n      student.setName((String) out.get(\"out_name\"));\n      student.setAge((Integer) out.get(\"out_age\"));\n      return student;  \t\n   }\n}<\/code><\/pre>\n\n\n\n<p>The code you write for the execution of the call involves creating an SqlParameterSource containing the IN parameter. It&#8217;s important to match the name provided for the input value with that of the parameter name declared in the stored procedure. The execute method takes the IN parameters and returns a Map containing any out parameters keyed by the name as specified in the stored procedure.<\/p>\n\n\n\n<p>Following is the content of the&nbsp;<strong>MainApp.java<\/strong>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.List;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.codemeals.StudentJDBCTemplate;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(\"Beans.xml\");\n      StudentJDBCTemplate studentJDBCTemplate = \n         (StudentJDBCTemplate)context.getBean(\"studentJDBCTemplate\");\n      \n      Student student = studentJDBCTemplate.getStudent(1);\n      System.out.print(\"ID : \" + student.getId() );\n      System.out.print(\", Name : \" + student.getName() );\n      System.out.println(\", Age : \" + student.getAge()); \n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the configuration file&nbsp;<strong>Beans.xml.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd \">\n\n   &lt;!-- Initialization for data source -->\n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\"\/>\n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/TEST\"\/>\n      &lt;property name = \"username\" value = \"root\"\/>\n      &lt;property name = \"password\" value = \"admin\"\/>\n   &lt;\/bean>\n\n   &lt;!-- Definition for studentJDBCTemplate bean -->\n   &lt;bean id = \"studentJDBCTemplate\" \n      class = \"com.codemeals.StudentJDBCTemplate\">\n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/>    \n   &lt;\/bean>\n      \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Once you are done creating the source and bean configuration files, let us run the application. If everything is fine with your application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ID : 1, Name : Zara, Age : 10<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;org.springframework.jdbc.core.StoredProcedure&nbsp;class is the superclass for object abstractions of RDBMS stored procedures. This class is abstract and it is intended that subclasses will provide a typed method for invocation that delegates to the supplied execute(java.lang.Object&#8230;) method. The inherited SQL property is the name of the stored procedure in the RDBMS. Class Declaration Following is the declaration [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            74
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1843"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1843"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1843\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1844,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1843\/revisions\/1844"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1843"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1843"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1843"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]