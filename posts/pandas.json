[{"id":2673,"date":"2020-07-22T04:52:16","date_gmt":"2020-07-22T04:52:16","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1784"},"modified":"2020-12-16T16:58:16","modified_gmt":"2020-12-16T16:58:16","slug":"introduction-14","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-14/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>Pandas is an open-source Python Library providing high-performance data manipulation and analysis tool using its powerful data structures. The name Pandas is derived from the word Panel Data – an Econometrics from Multidimensional data.</p>\n\n\n\n<p>In 2008, developer Wes McKinney started developing pandas when in need of high performance, flexible tool for analysis of data.</p>\n\n\n\n<p>Prior to Pandas, Python was majorly used for data managing and preparation. It had very little contribution towards data analysis. Pandas solved this problem. Using Pandas, we can accomplish five typical steps in the processing and analysis of data, regardless of the origin of data — load, prepare, manipulate, model, and analyze.</p>\n\n\n\n<p>Python with Pandas is used in a wide range of fields including academic and commercial domains including finance, economics, Statistics, analytics, etc.</p>\n\n\n\n<h2>Key Features of Pandas</h2>\n\n\n\n<ul><li>Fast and efficient DataFrame object with default and customized indexing.</li><li>Tools for loading data into in-memory data objects from different file formats.</li><li>Data alignment and integrated handling of missing data.</li><li>Reshaping and pivoting of date sets.</li><li>Label-based slicing, indexing and subsetting of large data sets.</li><li>Columns from a data structure can be deleted or inserted.</li><li>Group by data for aggregation and transformations.</li><li>High performance merging and joining of data.</li><li>Time Series functionality.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Pandas is an open-source Python Library providing high-performance data manipulation and analysis tool using its powerful data structures. The name Pandas is derived from the word Panel Data – an Econometrics from Multidimensional data. In 2008, developer Wes McKinney started developing pandas when in need of high performance, flexible tool for analysis of data. Prior [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2673"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2673"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2673/revisions"}],"predecessor-version":[{"id":3057,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2673/revisions/3057"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2673"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2673"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2673"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2674,"date":"2020-07-22T04:53:48","date_gmt":"2020-07-22T04:53:48","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1786"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"environment-setup-6","status":"publish","type":"post","link":"https://python3.foobrdigital.com/environment-setup-6/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>Standard Python distribution doesn&#8217;t come bundled with Pandas module. A lightweight alternative is to install NumPy using popular Python package installer, <strong>pip.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install pandas</code></pre>\n\n\n\n<p>If you install Anaconda Python package, Pandas will be installed by default with the following −</p>\n\n\n\n<h2>Windows</h2>\n\n\n\n<ul><li><strong>Anaconda</strong> (from https://www.continuum.io) is a free Python distribution for SciPy stack. It is also available for Linux and Mac.</li><li><strong>Canopy</strong> (https://www.enthought.com/products/canopy/) is available as free as well as commercial distribution with full SciPy stack for Windows, Linux and Mac.</li><li><strong>Python</strong> (x,y) is a free Python distribution with SciPy stack and Spyder IDE for Windows OS. (Downloadable from http://python-xy.github.io/)</li></ul>\n\n\n\n<h2>Linux</h2>\n\n\n\n<p>Package managers of respective Linux distributions are used to install one or more packages in SciPy stack.</p>\n\n\n\n<p><strong>For Ubuntu Users</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install python-numpy python-scipy python-matplotlibipythonipythonnotebook\npython-pandas python-sympy python-nose</code></pre>\n\n\n\n<p><strong>For Fedora Users</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo yum install numpyscipy python-matplotlibipython python-pandas sympy\npython-nose atlas-devel</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Standard Python distribution doesn&#8217;t come bundled with Pandas module. A lightweight alternative is to install NumPy using popular Python package installer, pip. If you install Anaconda Python package, Pandas will be installed by default with the following − Windows Anaconda (from https://www.continuum.io) is a free Python distribution for SciPy stack. It is also available for Linux and Mac. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2674"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2674"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2674/revisions"}],"predecessor-version":[{"id":3053,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2674/revisions/3053"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2674"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2674"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2674"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2675,"date":"2020-07-22T04:55:05","date_gmt":"2020-07-22T04:55:05","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1788"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"introduction-to-data-structures","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-to-data-structures/","title":{"rendered":"Introduction to Data Structures"},"content":{"rendered":"\n<p>Pandas deals with the following three data structures −</p>\n\n\n\n<ul><li>Series</li><li>DataFrame</li><li>Panel</li></ul>\n\n\n\n<p>These data structures are built on top of Numpy array, which means they are fast.</p>\n\n\n\n<h2>Dimension &amp; Description</h2>\n\n\n\n<p>The best way to think of these data structures is that the higher dimensional data structure is a container of its lower dimensional data structure. For example, DataFrame is a container of Series, Panel is a container of DataFrame.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Data Structure</th><th>Dimensions</th><th>Description</th></tr><tr><td>Series</td><td>1</td><td>1D labeled homogeneous array, sizeimmutable.</td></tr><tr><td>Data Frames</td><td>2</td><td>General 2D labeled, size-mutable tabular structure with potentially heterogeneously typed columns.</td></tr><tr><td>Panel</td><td>3</td><td>General 3D labeled, size-mutable array.</td></tr></tbody></table></figure>\n\n\n\n<p>Building and handling two or more dimensional arrays is a tedious task, burden is placed on the user to consider the orientation of the data set when writing functions. But using Pandas data structures, the mental effort of the user is reduced.</p>\n\n\n\n<p>For example, with tabular data (DataFrame) it is more semantically helpful to think of the&nbsp;<strong>index</strong>&nbsp;(the rows) and the&nbsp;<strong>columns</strong>&nbsp;rather than axis 0 and axis 1.</p>\n\n\n\n<h3>Mutability</h3>\n\n\n\n<p>All Pandas data structures are value mutable (can be changed) and except Series all are size mutable. Series is size immutable.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− DataFrame is widely used and one of the most important data structures. Panel is used much less.</p>\n\n\n\n<h2>Series</h2>\n\n\n\n<p>Series is a one-dimensional array like structure with homogeneous data. For example, the following series is a collection of integers 10, 23, 56, …</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>10</td><td>23</td><td>56</td><td>17</td><td>52</td><td>61</td><td>73</td><td>90</td><td>26</td><td>72</td></tr></tbody></table></figure>\n\n\n\n<h3>Key Points</h3>\n\n\n\n<ul><li>Homogeneous data</li><li>Size Immutable</li><li>Values of Data Mutable</li></ul>\n\n\n\n<h2>DataFrame</h2>\n\n\n\n<p>DataFrame is a two-dimensional array with heterogeneous data. For example,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Name</th><th>Age</th><th>Gender</th><th>Rating</th></tr><tr><td>Steve</td><td>32</td><td>Male</td><td>3.45</td></tr><tr><td>Lia</td><td>28</td><td>Female</td><td>4.6</td></tr><tr><td>Vin</td><td>45</td><td>Male</td><td>3.9</td></tr><tr><td>Katie</td><td>38</td><td>Female</td><td>2.78</td></tr></tbody></table></figure>\n\n\n\n<p>The table represents the data of a sales team of an organization with their overall performance rating. The data is represented in rows and columns. Each column represents an attribute and each row represents a person.</p>\n\n\n\n<h2>Data Type of Columns</h2>\n\n\n\n<p>The data types of the four columns are as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Column</th><th>Type</th></tr><tr><td>Name</td><td>String</td></tr><tr><td>Age</td><td>Integer</td></tr><tr><td>Gender</td><td>String</td></tr><tr><td>Rating</td><td>Float</td></tr></tbody></table></figure>\n\n\n\n<h3>Key Points</h3>\n\n\n\n<ul><li>Heterogeneous data</li><li>Size Mutable</li><li>Data Mutable</li></ul>\n\n\n\n<h2>Panel</h2>\n\n\n\n<p>Panel is a three-dimensional data structure with heterogeneous data. It is hard to represent the panel in graphical representation. But a panel can be illustrated as a container of DataFrame.</p>\n\n\n\n<h3>Key Points</h3>\n\n\n\n<ul><li>Heterogeneous data</li><li>Size Mutable</li><li>Data Mutable</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Pandas deals with the following three data structures − Series DataFrame Panel These data structures are built on top of Numpy array, which means they are fast. Dimension &amp; Description The best way to think of these data structures is that the higher dimensional data structure is a container of its lower dimensional data structure. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2675"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2675"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2675/revisions"}],"predecessor-version":[{"id":3058,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2675/revisions/3058"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2675"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2675"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2675"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2676,"date":"2020-07-22T05:09:07","date_gmt":"2020-07-22T05:09:07","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1793"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"series","status":"publish","type":"post","link":"https://python3.foobrdigital.com/series/","title":{"rendered":"Series"},"content":{"rendered":"\n<p>Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called index.</p>\n\n\n\n<h2>pandas.Series</h2>\n\n\n\n<p>A pandas Series can be created using the following constructor −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pandas.Series( data, index, dtype, copy)\n﻿</code></pre>\n\n\n\n<p>The parameters of the constructor are as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>data</strong>data takes various forms like ndarray, list, constants</td></tr><tr><td>2</td><td><strong>index</strong>Index values must be unique and hashable, same length as data. Default&nbsp;<strong>np.arrange(n)</strong>&nbsp;if no index is passed.</td></tr><tr><td>3</td><td><strong>dtype</strong>dtype is for data type. If None, data type will be inferred</td></tr><tr><td>4</td><td><strong>copy</strong>Copy data. Default False</td></tr></tbody></table></figure>\n\n\n\n<p>A series can be created using various inputs like −</p>\n\n\n\n<ul><li>Array</li><li>Dict</li><li>Scalar value or constant</li></ul>\n\n\n\n<h2>Create an Empty Series</h2>\n\n\n\n<p>A basic series, which can be created is an Empty Series.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library and aliasing as pd\nimport pandas as pd\ns = pd.Series()\nprint s</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Series(&#91;], dtype: float64)</code></pre>\n\n\n\n<h2>Create a Series from ndarray</h2>\n\n\n\n<p>If data is an ndarray, then index passed must be of the same length. If no index is passed, then by default index will be&nbsp;<strong>range(n)</strong>&nbsp;where&nbsp;<strong>n</strong>&nbsp;is array length, i.e., [0,1,2,3….&nbsp;<strong>range(len(array))-1].</strong></p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\ndata = np.array(&#91;'a','b','c','d'])\ns = pd.Series(data)\nprint s</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   a\n1   b\n2   c\n3   d\ndtype: object</code></pre>\n\n\n\n<p>We did not pass any index, so by default, it assigned the indexes ranging from 0 to&nbsp;<strong>len(data)-1</strong>, i.e., 0 to 3.Example 2</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\ndata = np.array(&#91;'a','b','c','d'])\ns = pd.Series(data,index=&#91;100,101,102,103])\nprint s</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>100  a\n101  b\n102  c\n103  d\ndtype: object</code></pre>\n\n\n\n<p>We passed the index values here. Now we can see the customized indexed values in the output.</p>\n\n\n\n<h2>Create a Series from dict</h2>\n\n\n\n<p>A&nbsp;<strong>dict</strong>&nbsp;can be passed as input and if no index is specified, then the dictionary keys are taken in a sorted order to construct index. If&nbsp;<strong>index</strong>&nbsp;is passed, the values in data corresponding to the labels in the index will be pulled out.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\ndata = {'a' : 0., 'b' : 1., 'c' : 2.}\ns = pd.Series(data)\nprint s</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a 0.0\nb 1.0\nc 2.0\ndtype: float64\n﻿</code></pre>\n\n\n\n<p><strong>Observe</strong>&nbsp;− Dictionary keys are used to construct index.</p>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\ndata = {'a' : 0., 'b' : 1., 'c' : 2.}\ns = pd.Series(data,index=&#91;'b','c','d','a'])\nprint s</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>b 1.0\nc 2.0\nd NaN\na 0.0\ndtype: float64\n﻿</code></pre>\n\n\n\n<p><strong>Observe</strong>&nbsp;− Index order is persisted and the missing element is filled with NaN (Not a Number).</p>\n\n\n\n<h2>Create a Series from Scalar</h2>\n\n\n\n<p>If data is a scalar value, an index must be provided. The value will be repeated to match the length of <strong>index</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\ns = pd.Series(5, index=&#91;0, 1, 2, 3])\nprint s</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<h2>Accessing Data from Series with Position</h2>\n\n\n\n<p>Data in the series can be accessed similar to that in an&nbsp;<strong>ndarray.</strong></p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Retrieve the first element. As we already know, the counting starts from zero for the array, which means the first element is stored at zero<sup>th</sup> position and so on.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ns = pd.Series(&#91;1,2,3,4,5],index = &#91;'a','b','c','d','e'])\n\n#retrieve the first element\nprint s&#91;0]</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n﻿</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Retrieve the first three elements in the Series. If a : is inserted in front of it, all items from that index onwards will be extracted. If two parameters (with : between them) is used, items between the two indexes (not including the stop index).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ns = pd.Series(&#91;1,2,3,4,5],index = &#91;'a','b','c','d','e'])\n\n#retrieve the first three element\nprint s&#91;:3]</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a  1\nb  2\nc  3\ndtype: int64</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Retrieve the last three elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ns = pd.Series(&#91;1,2,3,4,5],index = &#91;'a','b','c','d','e'])\n\n#retrieve the last three element\nprint s&#91;-3:]</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>c  3\nd  4\ne  5\ndtype: int64</code></pre>\n\n\n\n<h2>Retrieve Data Using Label (Index)</h2>\n\n\n\n<p>A Series is like a fixed-size&nbsp;<strong>dict</strong>&nbsp;in that you can get and set values by index label.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Retrieve a single element using index label value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ns = pd.Series(&#91;1,2,3,4,5],index = &#91;'a','b','c','d','e'])\n\n#retrieve a single element\nprint s&#91;'a']</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Retrieve multiple elements using a list of index label values.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#retrieve multiple elements\nprint s&#91;&#91;'a','c','d']]</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a  1\nc  3\nd  4\ndtype: int64</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>If a label is not contained, an exception is raised.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ns = pd.Series(&#91;1,2,3,4,5],index = &#91;'a','b','c','d','e'])\n\n#retrieve multiple elements\nprint s&#91;'f']</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>…\nKeyError: 'f'</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called index. pandas.Series A pandas Series can be created using the following constructor − The parameters of the constructor are as follows − Sr.No Parameter &amp; Description 1 datadata takes various [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2676"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2676"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2676/revisions"}],"predecessor-version":[{"id":3066,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2676/revisions/3066"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2676"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2676"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2676"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2677,"date":"2020-07-22T05:23:10","date_gmt":"2020-07-22T05:23:10","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1797"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"dataframe","status":"publish","type":"post","link":"https://python3.foobrdigital.com/dataframe/","title":{"rendered":"DataFrame"},"content":{"rendered":"\n<p>A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns.</p>\n\n\n\n<h3>Features of DataFrame</h3>\n\n\n\n<ul><li>Potentially columns are of different types</li><li>Size – Mutable</li><li>Labeled axes (rows and columns)</li><li>Can Perform Arithmetic operations on rows and columns</li></ul>\n\n\n\n<h3>Structure</h3>\n\n\n\n<p>Let us assume that we are creating a data frame with student’s data.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/structure_table.jpg\" alt=\"Structure Table\"/></figure>\n\n\n\n<p>You can think of it as an SQL table or a spreadsheet data representation.</p>\n\n\n\n<h2>pandas.DataFrame</h2>\n\n\n\n<p>A pandas DataFrame can be created using the following constructor −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pandas.DataFrame( data, index, columns, dtype, copy)\n﻿</code></pre>\n\n\n\n<p>The parameters of the constructor are as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>data</strong>data takes various forms like ndarray, series, map, lists, dict, constants and also another DataFrame.</td></tr><tr><td>2</td><td><strong>index</strong>For the row labels, the Index to be used for the resulting frame is Optional Default np.arange(n) if no index is passed.</td></tr><tr><td>3</td><td><strong>columns</strong>For column labels, the optional default syntax is &#8211; np.arange(n). This is only true if no index is passed.</td></tr><tr><td>4</td><td><strong>dtype</strong>Data type of each column.</td></tr><tr><td>5</td><td><strong>copy</strong>This command (or whatever it is) is used for copying of data, if the default is False.</td></tr></tbody></table></figure>\n\n\n\n<h2>Create DataFrame</h2>\n\n\n\n<p>A pandas DataFrame can be created using various inputs like −</p>\n\n\n\n<ul><li>Lists</li><li>dict</li><li>Series</li><li>Numpy ndarrays</li><li>Another DataFrame</li></ul>\n\n\n\n<p>In the subsequent sections of this chapter, we will see how to create a DataFrame using these inputs.</p>\n\n\n\n<h2>Create an Empty DataFrame</h2>\n\n\n\n<p>A basic DataFrame, which can be created is an Empty Dataframe.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library and aliasing as pd\nimport pandas as pd\ndf = pd.DataFrame()\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Empty DataFrame\nColumns: &#91;]\nIndex: &#91;]\n﻿</code></pre>\n\n\n\n<h2>Create a DataFrame from Lists</h2>\n\n\n\n<p>The DataFrame can be created using a single list or a list of lists.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndata = &#91;1,2,3,4,5]\ndf = pd.DataFrame(data)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  0\n0    1\n1    2\n2    3\n3    4\n4    5</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndata = &#91;&#91;'Alex',10],&#91;'Bob',12],&#91;'Clarke',13]]\ndf = pd.DataFrame(data,columns=&#91;'Name','Age'])\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   Name      Age\n0     Alex      10\n1     Bob       12\n2     Clarke    13</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndata = &#91;&#91;'Alex',10],&#91;'Bob',12],&#91;'Clarke',13]]\ndf = pd.DataFrame(data,columns=&#91;'Name','Age'],dtype=float)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     Name     Age\n0     Alex     10.0\n1     Bob      12.0\n2     Clarke   13.0</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe, the&nbsp;<strong>dtype</strong>&nbsp;parameter changes the type of Age column to floating point.</p>\n\n\n\n<h2>Create a DataFrame from Dict of ndarrays / Lists</h2>\n\n\n\n<p>All the&nbsp;<strong>ndarrays</strong>&nbsp;must be of same length. If index is passed, then the length of the index should equal to the length of the arrays.</p>\n\n\n\n<p>If no index is passed, then by default, index will be range(n), where&nbsp;<strong>n</strong>&nbsp;is the array length.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndata = {'Name':&#91;'Tom', 'Jack', 'Steve', 'Ricky'],'Age':&#91;28,34,29,42]}\ndf = pd.DataFrame(data)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      Age      Name\n0     28        Tom\n1     34       Jack\n2     29      Steve\n3     42      Ricky</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe the values 0,1,2,3. They are the default index assigned to each using the function range(n).</p>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Let us now create an indexed DataFrame using arrays.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndata = {'Name':&#91;'Tom', 'Jack', 'Steve', 'Ricky'],'Age':&#91;28,34,29,42]}\ndf = pd.DataFrame(data, index=&#91;'rank1','rank2','rank3','rank4'])\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age    Name\nrank1    28      Tom\nrank2    34     Jack\nrank3    29    Steve\nrank4    42    Ricky</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe, the&nbsp;<strong>index</strong>&nbsp;parameter assigns an index to each row.</p>\n\n\n\n<h2>Create a DataFrame from List of Dicts</h2>\n\n\n\n<p>List of Dictionaries can be passed as input data to create a DataFrame. The dictionary keys are by default taken as column names.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>The following example shows how to create a DataFrame by passing a list of dictionaries.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndata = &#91;{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]\ndf = pd.DataFrame(data)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    a    b      c\n0   1   2     NaN\n1   5   10   20.0</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe, NaN (Not a Number) is appended in missing areas.</p>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>The following example shows how to create a DataFrame by passing a list of dictionaries and the row indices.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndata = &#91;{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]\ndf = pd.DataFrame(data, index=&#91;'first', 'second'])\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   a   b       c\nfirst   1   2     NaN\nsecond  5   10   20.0</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>The following example shows how to create a DataFrame with a list of dictionaries, row indices, and column indices.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndata = &#91;{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]\n\n#With two column indices, values same as dictionary keys\ndf1 = pd.DataFrame(data, index=&#91;'first', 'second'], columns=&#91;'a', 'b'])\n\n#With two column indices with one index with other name\ndf2 = pd.DataFrame(data, index=&#91;'first', 'second'], columns=&#91;'a', 'b1'])\nprint df1\nprint df2</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#df1 output\n         a  b\nfirst    1  2\nsecond   5  10\n\n#df2 output\n         a  b1\nfirst    1  NaN\nsecond   5  NaN</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe, df2 DataFrame is created with a column index other than the dictionary key; thus, appended the NaN’s in place. Whereas, df1 is created with column indices same as dictionary keys, so NaN’s appended.</p>\n\n\n\n<h2>Create a DataFrame from Dict of Series</h2>\n\n\n\n<p>Dictionary of Series can be passed to form a DataFrame. The resultant index is the union of all the series indexes passed.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nd = {'one' : pd.Series(&#91;1, 2, 3], index=&#91;'a', 'b', 'c']),\n   'two' : pd.Series(&#91;1, 2, 3, 4], index=&#91;'a', 'b', 'c', 'd'])}\n\ndf = pd.DataFrame(d)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      one    two\na     1.0    1\nb     2.0    2\nc     3.0    3\nd     NaN    4\n﻿</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe, for the series one, there is no label&nbsp;<strong>‘d’</strong>&nbsp;passed, but in the result, for the&nbsp;<strong>d</strong>&nbsp;label, NaN is appended with NaN.</p>\n\n\n\n<p>Let us now understand&nbsp;<strong>column selection, addition</strong>, and&nbsp;<strong>deletion</strong>&nbsp;through examples.</p>\n\n\n\n<h2>Column Selection</h2>\n\n\n\n<p>We will understand this by selecting a column from the DataFrame.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nd = {'one' : pd.Series(&#91;1, 2, 3], index=&#91;'a', 'b', 'c']),\n   'two' : pd.Series(&#91;1, 2, 3, 4], index=&#91;'a', 'b', 'c', 'd'])}\n\ndf = pd.DataFrame(d)\nprint df &#91;'one']</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a     1.0\nb     2.0\nc     3.0\nd     NaN\nName: one, dtype: float64</code></pre>\n\n\n\n<h2>Column Addition</h2>\n\n\n\n<p>We will understand this by adding a new column to an existing data frame.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nd = {'one' : pd.Series(&#91;1, 2, 3], index=&#91;'a', 'b', 'c']),\n   'two' : pd.Series(&#91;1, 2, 3, 4], index=&#91;'a', 'b', 'c', 'd'])}\n\ndf = pd.DataFrame(d)\n\n# Adding a new column to an existing DataFrame object with column label by passing new series\n\nprint (\"Adding a new column by passing as Series:\")\ndf&#91;'three']=pd.Series(&#91;10,20,30],index=&#91;'a','b','c'])\nprint df\n\nprint (\"Adding a new column using the existing columns in DataFrame:\")\ndf&#91;'four']=df&#91;'one']+df&#91;'three']\n\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Adding a new column by passing as Series:\n     one   two   three\na    1.0    1    10.0\nb    2.0    2    20.0\nc    3.0    3    30.0\nd    NaN    4    NaN\n\nAdding a new column using the existing columns in DataFrame:\n      one   two   three    four\na     1.0    1    10.0     11.0\nb     2.0    2    20.0     22.0\nc     3.0    3    30.0     33.0\nd     NaN    4     NaN     NaN</code></pre>\n\n\n\n<h2>Column Deletion</h2>\n\n\n\n<p>Columns can be deleted or popped; let us take an example to understand how.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Using the previous DataFrame, we will delete a column\n# using del function\nimport pandas as pd\n\nd = {'one' : pd.Series(&#91;1, 2, 3], index=&#91;'a', 'b', 'c']), \n   'two' : pd.Series(&#91;1, 2, 3, 4], index=&#91;'a', 'b', 'c', 'd']), \n   'three' : pd.Series(&#91;10,20,30], index=&#91;'a','b','c'])}\n\ndf = pd.DataFrame(d)\nprint (\"Our dataframe is:\")\nprint df\n\n# using del function\nprint (\"Deleting the first column using DEL function:\")\ndel df&#91;'one']\nprint df\n\n# using pop function\nprint (\"Deleting another column using POP function:\")\ndf.pop('two')\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our dataframe is:\n      one   three  two\na     1.0    10.0   1\nb     2.0    20.0   2\nc     3.0    30.0   3\nd     NaN     NaN   4\n\nDeleting the first column using DEL function:\n      three    two\na     10.0     1\nb     20.0     2\nc     30.0     3\nd     NaN      4\n\nDeleting another column using POP function:\n   three\na  10.0\nb  20.0\nc  30.0\nd  NaN</code></pre>\n\n\n\n<h2>Row Selection, Addition, and Deletion</h2>\n\n\n\n<p>We will now understand row selection, addition and deletion through examples. Let us begin with the concept of selection.</p>\n\n\n\n<h3>Selection by Label</h3>\n\n\n\n<p>Rows can be selected by passing row label to a <strong>loc</strong> function.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nd = {'one' : pd.Series(&#91;1, 2, 3], index=&#91;'a', 'b', 'c']), \n   'two' : pd.Series(&#91;1, 2, 3, 4], index=&#91;'a', 'b', 'c', 'd'])}\n\ndf = pd.DataFrame(d)\nprint df.loc&#91;'b']</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>one 2.0\ntwo 2.0\nName: b, dtype: float64</code></pre>\n\n\n\n<p>The result is a series with labels as column names of the DataFrame. And, the Name of the series is the label with which it is retrieved.</p>\n\n\n\n<h3>Selection by integer location</h3>\n\n\n\n<p>Rows can be selected by passing integer location to an <strong>iloc</strong> function.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nd = {'one' : pd.Series(&#91;1, 2, 3], index=&#91;'a', 'b', 'c']),\n   'two' : pd.Series(&#91;1, 2, 3, 4], index=&#91;'a', 'b', 'c', 'd'])}\n\ndf = pd.DataFrame(d)\nprint df.iloc&#91;2]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>one   3.0\ntwo   3.0\nName: c, dtype: float64</code></pre>\n\n\n\n<h3>Slice Rows</h3>\n\n\n\n<p>Multiple rows can be selected using ‘ : ’ operator.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nd = {'one' : pd.Series(&#91;1, 2, 3], index=&#91;'a', 'b', 'c']), \n   'two' : pd.Series(&#91;1, 2, 3, 4], index=&#91;'a', 'b', 'c', 'd'])}\n\ndf = pd.DataFrame(d)\nprint df&#91;2:4]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>one  two\nc  3.0    3\nd  NaN    4</code></pre>\n\n\n\n<h3>Addition of Rows</h3>\n\n\n\n<p>Add new rows to a DataFrame using the <strong>append</strong> function. This function will append the rows at the end.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ndf = pd.DataFrame(&#91;&#91;1, 2], &#91;3, 4]], columns = &#91;'a','b'])\ndf2 = pd.DataFrame(&#91;&#91;5, 6], &#91;7, 8]], columns = &#91;'a','b'])\n\ndf = df.append(df2)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   a  b\n0  1  2\n1  3  4\n0  5  6\n1  7  8</code></pre>\n\n\n\n<h3>Deletion of Rows</h3>\n\n\n\n<p>Use index label to delete or drop rows from a DataFrame. If label is duplicated, then multiple rows will be dropped.</p>\n\n\n\n<p>If you observe, in the above example, the labels are duplicate. Let us drop a label and will see how many rows will get dropped.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ndf = pd.DataFrame(&#91;&#91;1, 2], &#91;3, 4]], columns = &#91;'a','b'])\ndf2 = pd.DataFrame(&#91;&#91;5, 6], &#91;7, 8]], columns = &#91;'a','b'])\n\ndf = df.append(df2)\n\n# Drop rows with label 0\ndf = df.drop(0)\n\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  a b\n1 3 4\n1 7 8</code></pre>\n\n\n\n<p>In the above example, two rows were dropped because those two contain the same label 0.</p>\n","protected":false},"excerpt":{"rendered":"<p>A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. Features of DataFrame Potentially columns are of different types Size – Mutable Labeled axes (rows and columns) Can Perform Arithmetic operations on rows and columns Structure Let us assume that we are creating a data [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2677"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2677"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2677/revisions"}],"predecessor-version":[{"id":3050,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2677/revisions/3050"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2677"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2677"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2677"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2678,"date":"2020-07-22T05:26:40","date_gmt":"2020-07-22T05:26:40","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1799"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"panel","status":"publish","type":"post","link":"https://python3.foobrdigital.com/panel/","title":{"rendered":"Panel"},"content":{"rendered":"\n<p>A&nbsp;<strong>panel</strong>&nbsp;is a 3D container of data. The term&nbsp;<strong>Panel data</strong>&nbsp;is derived from econometrics and is partially responsible for the name pandas −&nbsp;<strong>pan(el)-da(ta)</strong>-s.</p>\n\n\n\n<p>The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data. They are −</p>\n\n\n\n<ul><li><strong>items</strong>&nbsp;− axis 0, each item corresponds to a DataFrame contained inside.</li><li><strong>major_axis</strong>&nbsp;− axis 1, it is the index (rows) of each of the DataFrames.</li><li><strong>minor_axis</strong>&nbsp;− axis 2, it is the columns of each of the DataFrames.</li></ul>\n\n\n\n<h2>pandas.Panel()</h2>\n\n\n\n<p>A Panel can be created using the following constructor −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pandas.Panel(data, items, major_axis, minor_axis, dtype, copy)\n﻿</code></pre>\n\n\n\n<p>The parameters of the constructor are as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Parameter</th><th>Description</th></tr><tr><td>data</td><td>Data takes various forms like ndarray, series, map, lists, dict, constants and also another DataFrame</td></tr><tr><td>items</td><td>axis=0</td></tr><tr><td>major_axis</td><td>axis=1</td></tr><tr><td>minor_axis</td><td>axis=2</td></tr><tr><td>dtype</td><td>Data type of each column</td></tr><tr><td>copy</td><td>Copy data. Default,&nbsp;<strong>false</strong></td></tr></tbody></table></figure>\n\n\n\n<h2>Create Panel</h2>\n\n\n\n<p>A Panel can be created using multiple ways like −</p>\n\n\n\n<ul><li>From ndarrays</li><li>From dict of DataFrames</li></ul>\n\n\n\n<h3>From 3D ndarray</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># creating an empty panel\nimport pandas as pd\nimport numpy as np\n\ndata = np.random.rand(2,4,5)\np = pd.Panel(data)\nprint p</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 4 (major_axis) x 5 (minor_axis)\nItems axis: 0 to 1\nMajor_axis axis: 0 to 3\nMinor_axis axis: 0 to 4</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe the dimensions of the empty panel and the above panel, all the objects are different.</p>\n\n\n\n<h3>From dict of DataFrame Objects</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#creating an empty panel\nimport pandas as pd\nimport numpy as np\n\ndata = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), \n   'Item2' : pd.DataFrame(np.random.randn(4, 2))}\np = pd.Panel(data)\nprint p</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Dimensions: 2 (items) x 4 (major_axis) x 3 (minor_axis)\nItems axis: Item1 to Item2\nMajor_axis axis: 0 to 3\nMinor_axis axis: 0 to 2</code></pre>\n\n\n\n<h3>Create an Empty Panel</h3>\n\n\n\n<p>An empty panel can be created using the Panel constructor as follows −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#creating an empty panel\nimport pandas as pd\np = pd.Panel()\nprint p</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;class 'pandas.core.panel.Panel'>\nDimensions: 0 (items) x 0 (major_axis) x 0 (minor_axis)\nItems axis: None\nMajor_axis axis: None\nMinor_axis axis: None</code></pre>\n\n\n\n<h2>Selecting the Data from Panel</h2>\n\n\n\n<p>Select the data from the panel using −</p>\n\n\n\n<ul><li>Items</li><li>Major_axis</li><li>Minor_axis</li></ul>\n\n\n\n<h3>Using Items</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># creating an empty panel\nimport pandas as pd\nimport numpy as np\ndata = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), \n   'Item2' : pd.DataFrame(np.random.randn(4, 2))}\np = pd.Panel(data)\nprint p&#91;'Item1']</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      0          1          2\n0    0.488224  -0.128637   0.930817\n1    0.417497   0.896681   0.576657\n2   -2.775266   0.571668   0.290082\n3   -0.400538  -0.144234   1.110535</code></pre>\n\n\n\n<p>We have two items, and we retrieved item1. The result is a DataFrame with 4 rows and 3 columns, which are the&nbsp;<strong>Major_axis</strong>&nbsp;and&nbsp;<strong>Minor_axis</strong>&nbsp;dimensions.</p>\n\n\n\n<h3>Using major_axis</h3>\n\n\n\n<p>Data can be accessed using the method <strong>panel.major_axis(index)</strong>.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># creating an empty panel\nimport pandas as pd\nimport numpy as np\ndata = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), \n   'Item2' : pd.DataFrame(np.random.randn(4, 2))}\np = pd.Panel(data)\nprint p.major_xs(1)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Item1       Item2\n0   0.417497    0.748412\n1   0.896681   -0.557322\n2   0.576657       NaN</code></pre>\n\n\n\n<h3>Using minor_axis</h3>\n\n\n\n<p>Data can be accessed using the method <strong>panel.minor_axis(index).</strong>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># creating an empty panel\nimport pandas as pd\nimport numpy as np\ndata = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), \n   'Item2' : pd.DataFrame(np.random.randn(4, 2))}\np = pd.Panel(data)\nprint p.minor_xs(1)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>       Item1       Item2\n0   -0.128637   -1.047032\n1    0.896681   -0.557322\n2    0.571668    0.431953\n3   -0.144234    1.302466</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe the changes in the dimensions.</p>\n","protected":false},"excerpt":{"rendered":"<p>A&nbsp;panel&nbsp;is a 3D container of data. The term&nbsp;Panel data&nbsp;is derived from econometrics and is partially responsible for the name pandas −&nbsp;pan(el)-da(ta)-s. The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data. They are − items&nbsp;− axis 0, each item corresponds to a DataFrame contained inside. major_axis&nbsp;− [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2678"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2678"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2678/revisions"}],"predecessor-version":[{"id":3064,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2678/revisions/3064"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2678"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2678"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2678"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2679,"date":"2020-07-22T05:45:54","date_gmt":"2020-07-22T05:45:54","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1801"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"basic-functionality","status":"publish","type":"post","link":"https://python3.foobrdigital.com/basic-functionality/","title":{"rendered":"Basic Functionality"},"content":{"rendered":"\n<p>By now, we learnt about the three Pandas DataStructures and how to create them. We will majorly focus on the DataFrame objects because of its importance in the real time data processing and also discuss a few other DataStructures.</p>\n\n\n\n<h2>Series Basic Functionality</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Attribute or Method &amp; Description</th></tr><tr><td>1</td><td><strong>axes</strong>Returns a list of the row axis labels</td></tr><tr><td>2</td><td><strong>dtype</strong>Returns the dtype of the object.</td></tr><tr><td>3</td><td><strong>empty</strong>Returns True if series is empty.</td></tr><tr><td>4</td><td><strong>ndim</strong>Returns the number of dimensions of the underlying data, by definition 1.</td></tr><tr><td>5</td><td><strong>size</strong>Returns the number of elements in the underlying data.</td></tr><tr><td>6</td><td><strong>values</strong>Returns the Series as ndarray.</td></tr><tr><td>7</td><td><strong>head()</strong>Returns the first n rows.</td></tr><tr><td>8</td><td><strong>tail()</strong>Returns the last n rows.</td></tr></tbody></table></figure>\n\n\n\n<p>Let us now create a Series and see all the above tabulated attributes operation.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a series with 100 random numbers\ns = pd.Series(np.random.randn(4))\nprint s</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   0.967853\n1  -0.148368\n2  -1.395906\n3  -1.758394\ndtype: float64</code></pre>\n\n\n\n<h3>axes</h3>\n\n\n\n<p>Returns the list of the labels of the series.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a series with 100 random numbers\ns = pd.Series(np.random.randn(4))\nprint (\"The axes are:\")\nprint s.axes</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The axes are:\n&#91;RangeIndex(start=0, stop=4, step=1)]</code></pre>\n\n\n\n<p>The above result is a compact format of a list of values from 0 to 5, i.e., [0,1,2,3,4].</p>\n\n\n\n<h3>empty</h3>\n\n\n\n<p>Returns the Boolean value saying whether the Object is empty or not. True indicates that the object is empty.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a series with 100 random numbers\ns = pd.Series(np.random.randn(4))\nprint (\"Is the Object empty?\")\nprint s.empty</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Is the Object empty?\nFalse</code></pre>\n\n\n\n<h3>ndim</h3>\n\n\n\n<p>Returns the number of dimensions of the object. By definition, a Series is a 1D data structure, so it returns<a rel=\"noreferrer noopener\" href=\"http://tpcg.io/dWB0Vq\" target=\"_blank\">Live Demo</a></p>\n\n\n\n<pre class=\"wp-block-preformatted\">import pandas as pd<br>import numpy as np<br><br>#Create a series with 4 random numbers<br>s = pd.Series(np.random.randn(4))<br>print s<br><br>print (\"The dimensions of the object:\")<br>print s.ndim</pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   0.175898\n1   0.166197\n2  -0.609712\n3  -1.377000\ndtype: float64\n\nThe dimensions of the object:\n1</code></pre>\n\n\n\n<h3>size</h3>\n\n\n\n<p>Returns the size(length) of the series.Live Demo.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a series with 4 random numbers\ns = pd.Series(np.random.randn(2))\nprint s\nprint (\"The size of the object:\")\nprint s.size</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   3.078058\n1  -1.207803\ndtype: float64\n\nThe size of the object:\n2\n﻿</code></pre>\n\n\n\n<h3>values</h3>\n\n\n\n<p>Returns the actual data in the series as an array.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a series with 4 random numbers\ns = pd.Series(np.random.randn(4))\nprint s\n\nprint (\"The actual data series is:\")\nprint s.values</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   1.787373\n1  -0.605159\n2   0.180477\n3  -0.140922\ndtype: float64\n\nThe actual data series is:\n&#91; 1.78737302 -0.60515881 0.18047664 -0.1409218 ]</code></pre>\n\n\n\n<h3>Head &amp; Tail</h3>\n\n\n\n<p>To view a small sample of a Series or the DataFrame object, use the head() and the tail() methods.</p>\n\n\n\n<p><strong>head()</strong>&nbsp;returns the first&nbsp;<strong>n</strong>&nbsp;rows(observe the index values). The default number of elements to display is five, but you may pass a custom number.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a series with 4 random numbers\ns = pd.Series(np.random.randn(4))\nprint (\"The original series is:\")\nprint s\n\nprint (\"The first two rows of the data series:\")\nprint s.head(2)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The original series is:\n0   0.720876\n1  -0.765898\n2   0.479221\n3  -0.139547\ndtype: float64\n\nThe first two rows of the data series:\n0   0.720876\n1  -0.765898\ndtype: float64\n﻿</code></pre>\n\n\n\n<p><strong>tail()</strong>&nbsp;returns the last&nbsp;<strong>n</strong>&nbsp;rows(observe the index values). The default number of elements to display is five, but you may pass a custom number.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a series with 4 random numbers\ns = pd.Series(np.random.randn(4))\nprint (\"The original series is:\")\nprint s\n\nprint (\"The last two rows of the data series:\")\nprint s.tail(2)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The original series is:\n0 -0.655091\n1 -0.881407\n2 -0.608592\n3 -2.341413\ndtype: float64\n\nThe last two rows of the data series:\n2 -0.608592\n3 -2.341413\ndtype: float64</code></pre>\n\n\n\n<h2>DataFrame Basic Functionality</h2>\n\n\n\n<p>Let us now understand what DataFrame Basic Functionality is. The following tables lists down the important attributes or methods that help in DataFrame Basic Functionality.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Attribute or Method &amp; Description</th></tr><tr><td>1</td><td><strong>T</strong>Transposes rows and columns.</td></tr><tr><td>2</td><td><strong>axes</strong>Returns a list with the row axis labels and column axis labels as the only members.</td></tr><tr><td>3</td><td><strong>dtypes</strong>Returns the dtypes in this object.</td></tr><tr><td>4</td><td><strong>empty</strong>True if NDFrame is entirely empty [no items]; if any of the axes are of length 0.</td></tr><tr><td>5</td><td><strong>ndim</strong>Number of axes / array dimensions.</td></tr><tr><td>6</td><td><strong>shape</strong>Returns a tuple representing the dimensionality of the DataFrame.</td></tr><tr><td>7</td><td><strong>size</strong>Number of elements in the NDFrame.</td></tr><tr><td>8</td><td><strong>values</strong>Numpy representation of NDFrame.</td></tr><tr><td>9</td><td><strong>head()</strong>Returns the first n rows.</td></tr><tr><td>10</td><td><strong>tail()</strong>Returns last n rows.</td></tr></tbody></table></figure>\n\n\n\n<p>Let us now create a DataFrame and see all how the above mentioned attributes operate.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Our data series is:\")\nprint df</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our data series is:\n    Age   Name    Rating\n0   25    Tom     4.23\n1   26    James   3.24\n2   25    Ricky   3.98\n3   23    Vin     2.56\n4   30    Steve   3.20\n5   29    Smith   4.60\n6   23    Jack    3.80</code></pre>\n\n\n\n<h3>T (Transpose)</h3>\n\n\n\n<p>Returns the transpose of the DataFrame. The rows and columns will interchange.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \n# Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n\n# Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"The transpose of the data series is:\")\nprint df.T</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The transpose of the data series is:\n         0     1       2      3      4      5       6\nAge      25    26      25     23     30     29      23\nName     Tom   James   Ricky  Vin    Steve  Smith   Jack\nRating   4.23  3.24    3.98   2.56   3.2    4.6     3.8</code></pre>\n\n\n\n<h3>axes</h3>\n\n\n\n<p>Returns the list of row axis labels and column axis labels.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Row axis labels and column axis labels are:\")\nprint df.axes</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Row axis labels and column axis labels are:\n\n&#91;RangeIndex(start=0, stop=7, step=1), Index(&#91;u'Age', u'Name', u'Rating'],\ndtype='object')]\n﻿</code></pre>\n\n\n\n<h3>dtypes</h3>\n\n\n\n<p>Returns the data type of each column.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"The data types of each column are:\")\nprint df.dtypes</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The data types of each column are:\nAge     int64\nName    object\nRating  float64\ndtype: object</code></pre>\n\n\n\n<h3>empty</h3>\n\n\n\n<p>Returns the Boolean value saying whether the Object is empty or not; True indicates that the object is empty.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n \n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Is the object empty?\")\nprint df.empty</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Is the object empty?\nFalse\n﻿</code></pre>\n\n\n\n<h3>ndim</h3>\n\n\n\n<p>Returns the number of dimensions of the object. By definition, DataFrame is a 2D object.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Our object is:\")\nprint df\nprint (\"The dimension of the object is:\")\nprint df.ndim</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our object is:\n      Age    Name     Rating\n0     25     Tom      4.23\n1     26     James    3.24\n2     25     Ricky    3.98\n3     23     Vin      2.56\n4     30     Steve    3.20\n5     29     Smith    4.60\n6     23     Jack     3.80\n\nThe dimension of the object is:\n2</code></pre>\n\n\n\n<h3>shape</h3>\n\n\n\n<p>Returns a tuple representing the dimensionality of the DataFrame. Tuple (a,b), where a represents the number of rows and&nbsp;<strong>b</strong>&nbsp;represents the number of columns.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n \n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Our object is:\")\nprint df\nprint (\"The shape of the object is:\")\nprint df.shape</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our object is:\n   Age   Name    Rating\n0  25    Tom     4.23\n1  26    James   3.24\n2  25    Ricky   3.98\n3  23    Vin     2.56\n4  30    Steve   3.20\n5  29    Smith   4.60\n6  23    Jack    3.80\n\nThe shape of the object is:\n(7, 3)</code></pre>\n\n\n\n<h3>size</h3>\n\n\n\n<p>Returns the number of elements in the DataFrame.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n \n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Our object is:\")\nprint df\nprint (\"The total number of elements in our object is:\")\nprint df.size</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our object is:\n    Age   Name    Rating\n0   25    Tom     4.23\n1   26    James   3.24\n2   25    Ricky   3.98\n3   23    Vin     2.56\n4   30    Steve   3.20\n5   29    Smith   4.60\n6   23    Jack    3.80\n\nThe total number of elements in our object is:\n21</code></pre>\n\n\n\n<h3>values</h3>\n\n\n\n<p>Returns the actual data in the DataFrame as an&nbsp;<strong>NDarray.</strong>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n \n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Our object is:\")\nprint df\nprint (\"The actual data in our data frame is:\")\nprint df.values</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our object is:\n    Age   Name    Rating\n0   25    Tom     4.23\n1   26    James   3.24\n2   25    Ricky   3.98\n3   23    Vin     2.56\n4   30    Steve   3.20\n5   29    Smith   4.60\n6   23    Jack    3.80\nThe actual data in our data frame is:\n&#91;&#91;25 'Tom' 4.23]\n&#91;26 'James' 3.24]\n&#91;25 'Ricky' 3.98]\n&#91;23 'Vin' 2.56]\n&#91;30 'Steve' 3.2]\n&#91;29 'Smith' 4.6]\n&#91;23 'Jack' 3.8]]\n﻿</code></pre>\n\n\n\n<h3>Head &amp; Tail</h3>\n\n\n\n<p>To view a small sample of a DataFrame object, use the&nbsp;<strong>head()</strong>&nbsp;and tail() methods.&nbsp;<strong>head()</strong>&nbsp;returns the first&nbsp;<strong>n</strong>&nbsp;rows (observe the index values). The default number of elements to display is five, but you may pass a custom number.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Our data frame is:\")\nprint df\nprint (\"The first two rows of the data frame is:\")\nprint df.head(2)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our data frame is:\n    Age   Name    Rating\n0   25    Tom     4.23\n1   26    James   3.24\n2   25    Ricky   3.98\n3   23    Vin     2.56\n4   30    Steve   3.20\n5   29    Smith   4.60\n6   23    Jack    3.80\n\nThe first two rows of the data frame is:\n   Age   Name   Rating\n0  25    Tom    4.23\n1  26    James  3.24\n﻿</code></pre>\n\n\n\n<p><strong>tail()</strong>&nbsp;returns the last&nbsp;<strong>n</strong>&nbsp;rows (observe the index values). The default number of elements to display is five, but you may pass a custom number.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23]), \n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8])}\n \n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint (\"Our data frame is:\")\nprint df\nprint (\"The last two rows of the data frame is:\")\nprint df.tail(2)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our data frame is:\n    Age   Name    Rating\n0   25    Tom     4.23\n1   26    James   3.24\n2   25    Ricky   3.98\n3   23    Vin     2.56\n4   30    Steve   3.20\n5   29    Smith   4.60\n6   23    Jack    3.80\n\nThe last two rows of the data frame is:\n    Age   Name    Rating\n5   29    Smith    4.6\n6   23    Jack     3.8</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>By now, we learnt about the three Pandas DataStructures and how to create them. We will majorly focus on the DataFrame objects because of its importance in the real time data processing and also discuss a few other DataStructures. Series Basic Functionality Sr.No. Attribute or Method &amp; Description 1 axesReturns a list of the row [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2679"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2679"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2679/revisions"}],"predecessor-version":[{"id":3045,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2679/revisions/3045"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2679"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2679"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2679"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2680,"date":"2020-07-22T05:52:30","date_gmt":"2020-07-22T05:52:30","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1803"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"descriptive-statistics","status":"publish","type":"post","link":"https://python3.foobrdigital.com/descriptive-statistics/","title":{"rendered":"Descriptive Statistics"},"content":{"rendered":"\n<p>A large number of methods collectively compute descriptive statistics and other related operations on DataFrame. Most of these are aggregations like&nbsp;<strong>sum(), mean(),</strong>&nbsp;but some of them, like&nbsp;<strong>sumsum()</strong>, produce an object of the same size. Generally speaking, these methods take an&nbsp;<strong>axis</strong>&nbsp;argument, just like&nbsp;<em>ndarray.{sum, std, &#8230;},</em>&nbsp;but the axis can be specified by name or integer</p>\n\n\n\n<ul><li><strong>DataFrame</strong>&nbsp;− “index” (axis=0, default), “columns” (axis=1)</li></ul>\n\n\n\n<p>Let us create a DataFrame and use this object throughout this chapter for all the operations.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack',\n   'Lee','David','Gasper','Betina','Andres']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])\n}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Age  Name   Rating\n0   25   Tom     4.23\n1   26   James   3.24\n2   25   Ricky   3.98\n3   23   Vin     2.56\n4   30   Steve   3.20\n5   29   Smith   4.60\n6   23   Jack    3.80\n7   34   Lee     3.78\n8   40   David   2.98\n9   30   Gasper  4.80\n10  51   Betina  4.10\n11  46   Andres  3.65</code></pre>\n\n\n\n<h3>sum()</h3>\n\n\n\n<p>Returns the sum of the values for the requested axis. By default, axis is index (axis=0).Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack',\n   'Lee','David','Gasper','Betina','Andres']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])\n}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint df.sum()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age                                                    382\nName     TomJamesRickyVinSteveSmithJackLeeDavidGasperBe...\nRating                                               44.92\ndtype: object</code></pre>\n\n\n\n<p>Each individual column is added individually (Strings are appended).</p>\n\n\n\n<h3>axis=1</h3>\n\n\n\n<p>This syntax will give the output as shown below.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack',\n   'Lee','David','Gasper','Betina','Andres']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])\n}\n \n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint df.sum(1)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0    29.23\n1    29.24\n2    28.98\n3    25.56\n4    33.20\n5    33.60\n6    26.80\n7    37.78\n8    42.98\n9    34.80\n10   55.10\n11   49.65\ndtype: float64</code></pre>\n\n\n\n<h3>mean()</h3>\n\n\n\n<p>Returns the average valueLive Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack',\n   'Lee','David','Gasper','Betina','Andres']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])\n}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint df.mean()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age       31.833333\nRating     3.743333\ndtype: float64\n﻿</code></pre>\n\n\n\n<h3>std()</h3>\n\n\n\n<p>Returns the Bressel standard deviation of the numerical columns.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack',\n   'Lee','David','Gasper','Betina','Andres']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])\n}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint df.std()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age       9.232682\nRating    0.661628\ndtype: float64</code></pre>\n\n\n\n<h2>Functions &amp; Description</h2>\n\n\n\n<p>Let us now understand the functions under Descriptive Statistics in Python Pandas. The following table list down the important functions −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Function</th><th>Description</th></tr><tr><td>1</td><td>count()</td><td>Number of non-null observations</td></tr><tr><td>2</td><td>sum()</td><td>Sum of values</td></tr><tr><td>3</td><td>mean()</td><td>Mean of Values</td></tr><tr><td>4</td><td>median()</td><td>Median of Values</td></tr><tr><td>5</td><td>mode()</td><td>Mode of values</td></tr><tr><td>6</td><td>std()</td><td>Standard Deviation of the Values</td></tr><tr><td>7</td><td>min()</td><td>Minimum Value</td></tr><tr><td>8</td><td>max()</td><td>Maximum Value</td></tr><tr><td>9</td><td>abs()</td><td>Absolute Value</td></tr><tr><td>10</td><td>prod()</td><td>Product of Values</td></tr><tr><td>11</td><td>cumsum()</td><td>Cumulative Sum</td></tr><tr><td>12</td><td>cumprod()</td><td>Cumulative Product</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Note</strong>&nbsp;− Since DataFrame is a Heterogeneous data structure. Generic operations don’t work with all functions.</p>\n\n\n\n<ul><li>Functions like&nbsp;<strong>sum(), cumsum()</strong>&nbsp;work with both numeric and character (or) string data elements without any error. Though&nbsp;<strong>n</strong>&nbsp;practice, character aggregations are never used generally, these functions do not throw any exception.</li><li>Functions like&nbsp;<strong>abs(), cumprod()</strong>&nbsp;throw exception when the DataFrame contains character or string data because such operations cannot be performed.</li></ul>\n\n\n\n<h2>Summarizing Data</h2>\n\n\n\n<p>The <strong>describe()</strong> function computes a summary of statistics pertaining to the DataFrame columns.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack',\n   'Lee','David','Gasper','Betina','Andres']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])\n}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint df.describe()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>               Age         Rating\ncount    12.000000      12.000000\nmean     31.833333       3.743333\nstd       9.232682       0.661628\nmin      23.000000       2.560000\n25%      25.000000       3.230000\n50%      29.500000       3.790000\n75%      35.500000       4.132500\nmax      51.000000       4.800000</code></pre>\n\n\n\n<p>This function gives the&nbsp;<strong>mean, std</strong>&nbsp;and&nbsp;<strong>IQR</strong>&nbsp;values. And, function excludes the character columns and given summary about numeric columns.&nbsp;<strong>&#8216;include&#8217;</strong>&nbsp;is the argument which is used to pass necessary information regarding what columns need to be considered for summarizing. Takes the list of values; by default, &#8216;number&#8217;.</p>\n\n\n\n<ul><li><strong>object</strong>&nbsp;− Summarizes String columns</li><li><strong>number</strong>&nbsp;− Summarizes Numeric columns</li><li><strong>all</strong>&nbsp;− Summarizes all columns together (Should not pass it as a list value)</li></ul>\n\n\n\n<p>Now, use the following statement in the program and check the output −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack',\n   'Lee','David','Gasper','Betina','Andres']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])\n}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint df.describe(include=&#91;'object'])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>         Name\ncount       12\nunique      12\ntop      Ricky\nfreq         1</code></pre>\n\n\n\n<p>Now, use the following statement and check the output −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(&#91;'Tom','James','Ricky','Vin','Steve','Smith','Jack',\n   'Lee','David','Gasper','Betina','Andres']),\n   'Age':pd.Series(&#91;25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series(&#91;4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])\n}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\nprint df. describe(include='all')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      Age          Name       Rating\ncount   12.000000        12    12.000000\nunique        NaN        12          NaN\ntop           NaN     Ricky          NaN\nfreq          NaN         1          NaN\nmean    31.833333       NaN     3.743333\nstd      9.232682       NaN     0.661628\nmin     23.000000       NaN     2.560000\n25%     25.000000       NaN     3.230000\n50%     29.500000       NaN     3.790000\n75%     35.500000       NaN     4.132500\nmax     51.000000       NaN     4.800000</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>A large number of methods collectively compute descriptive statistics and other related operations on DataFrame. Most of these are aggregations like&nbsp;sum(), mean(),&nbsp;but some of them, like&nbsp;sumsum(), produce an object of the same size. Generally speaking, these methods take an&nbsp;axis&nbsp;argument, just like&nbsp;ndarray.{sum, std, &#8230;},&nbsp;but the axis can be specified by name or integer DataFrame&nbsp;− “index” (axis=0, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2680"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2680"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2680/revisions"}],"predecessor-version":[{"id":3052,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2680/revisions/3052"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2680"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2680"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2680"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2681,"date":"2020-07-22T05:58:08","date_gmt":"2020-07-22T05:58:08","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1806"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"function-application","status":"publish","type":"post","link":"https://python3.foobrdigital.com/function-application/","title":{"rendered":"Function Application"},"content":{"rendered":"\n<p>To apply your own or another library’s functions to Pandas objects, you should be aware of the three important methods. The methods have been discussed below. The appropriate method to use depends on whether your function expects to operate on an entire DataFrame, row- or column-wise, or element wise.</p>\n\n\n\n<ul><li>Table wise Function Application: pipe()</li><li>Row or Column Wise Function Application: apply()</li><li>Element wise Function Application: applymap()</li></ul>\n\n\n\n<h2>Table-wise Function Application</h2>\n\n\n\n<p>Custom operations can be performed by passing the function and the appropriate number of parameters as pipe arguments. Thus, operation is performed on the whole DataFrame.</p>\n\n\n\n<p>For example, add a value 2 to all the elements in the DataFrame. Then,</p>\n\n\n\n<h3>adder function</h3>\n\n\n\n<p>The adder function adds two numeric values as parameters and returns the sum.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def adder(ele1,ele2):\n   return ele1+ele2\n﻿</code></pre>\n\n\n\n<p>We will now use the custom function to conduct operation on the DataFrame.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>df = pd.DataFrame(np.random.randn(5,3),columns=&#91;'col1','col2','col3'])\ndf.pipe(adder,2)</code></pre>\n\n\n\n<p>Let’s see the full program −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndef adder(ele1,ele2):\n   return ele1+ele2\n\ndf = pd.DataFrame(np.random.randn(5,3),columns=&#91;'col1','col2','col3'])\ndf.pipe(adder,2)\nprint df.apply(np.mean)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  col1       col2       col3\n0   2.176704   2.219691   1.509360\n1   2.222378   2.422167   3.953921\n2   2.241096   1.135424   2.696432\n3   2.355763   0.376672   1.182570\n4   2.308743   2.714767   2.130288</code></pre>\n\n\n\n<h2>Row or Column Wise Function Application</h2>\n\n\n\n<p>Arbitrary functions can be applied along the axes of a DataFrame or Panel using the&nbsp;<strong>apply()</strong>&nbsp;method, which, like the descriptive statistics methods, takes an optional axis argument. By default, the operation performs column wise, taking each column as an array-like.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5,3),columns=&#91;'col1','col2','col3'])\ndf.apply(np.mean)\nprint df.apply(np.mean)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>col1   -0.288022\ncol2    1.044839\ncol3   -0.187009\ndtype: float64\n﻿</code></pre>\n\n\n\n<p>By passing&nbsp;<strong>axis</strong>&nbsp;parameter, operations can be performed row wise.</p>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5,3),columns=&#91;'col1','col2','col3'])\ndf.apply(np.mean,axis=1)\nprint df.apply(np.mean)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>col1    0.034093\ncol2   -0.152672\ncol3   -0.229728\ndtype: float64  </code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5,3),columns=&#91;'col1','col2','col3'])\ndf.apply(lambda x: x.max() - x.min())\nprint df.apply(np.mean)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>col1   -0.167413\ncol2   -0.370495\ncol3   -0.707631\ndtype: float64</code></pre>\n\n\n\n<h2>Element Wise Function Application</h2>\n\n\n\n<p>Not all functions can be vectorized (neither the NumPy arrays which return another array nor any value), the methods&nbsp;<strong>applymap()</strong>&nbsp;on DataFrame and&nbsp;<strong>analogously map()</strong>&nbsp;on Series accept any Python function taking a single value and returning a single value.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.randn(5,3),columns=&#91;'col1','col2','col3'])\n\n# My custom function\ndf&#91;'col1'].map(lambda x:x*100)\nprint df.apply(np.mean)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>col1    0.480742\ncol2    0.454185\ncol3    0.266563\ndtype: float64</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\n# My custom function\ndf = pd.DataFrame(np.random.randn(5,3),columns=&#91;'col1','col2','col3'])\ndf.applymap(lambda x:x*100)\nprint df.apply(np.mean)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>col1    0.395263\ncol2    0.204418\ncol3   -0.795188\ndtype: float64</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>To apply your own or another library’s functions to Pandas objects, you should be aware of the three important methods. The methods have been discussed below. The appropriate method to use depends on whether your function expects to operate on an entire DataFrame, row- or column-wise, or element wise. Table wise Function Application: pipe() Row [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2681"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2681"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2681/revisions"}],"predecessor-version":[{"id":3054,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2681/revisions/3054"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2681"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2681"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2681"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2682,"date":"2020-07-22T06:01:41","date_gmt":"2020-07-22T06:01:41","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1808"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"reindexing","status":"publish","type":"post","link":"https://python3.foobrdigital.com/reindexing/","title":{"rendered":"Reindexing"},"content":{"rendered":"\n<p><strong>Reindexing</strong>&nbsp;changes the row labels and column labels of a DataFrame. To&nbsp;<em>reindex</em>&nbsp;means to conform the data to match a given set of labels along a particular axis.</p>\n\n\n\n<p>Multiple operations can be accomplished through indexing like −</p>\n\n\n\n<ul><li>Reorder the existing data to match a new set of labels.</li><li>Insert missing value (NA) markers in label locations where no data for the label existed.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nN=20\n\ndf = pd.DataFrame({\n   'A': pd.date_range(start='2016-01-01',periods=N,freq='D'),\n   'x': np.linspace(0,stop=N-1,num=N),\n   'y': np.random.rand(N),\n   'C': np.random.choice(&#91;'Low','Medium','High'],N).tolist(),\n   'D': np.random.normal(100, 10, size=(N)).tolist()\n})\n\n#reindex the DataFrame\ndf_reindexed = df.reindex(index=&#91;0,2,5], columns=&#91;'A', 'C', 'B'])\n\nprint df_reindexed</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>            A    C     B\n0  2016-01-01  Low   NaN\n2  2016-01-03  High  NaN\n5  2016-01-06  Low   NaN</code></pre>\n\n\n\n<h2>Reindex to Align with Other Objects</h2>\n\n\n\n<p>You may wish to take an object and reindex its axes to be labeled the same as another object. Consider the following example to understand the same.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(10,3),columns=&#91;'col1','col2','col3'])\ndf2 = pd.DataFrame(np.random.randn(7,3),columns=&#91;'col1','col2','col3'])\n\ndf1 = df1.reindex_like(df2)\nprint df1</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   col1         col2         col3\n0    -2.467652    -1.211687    -0.391761\n1    -0.287396     0.522350     0.562512\n2    -0.255409    -0.483250     1.866258\n3    -1.150467    -0.646493    -0.222462\n4     0.152768    -2.056643     1.877233\n5    -1.155997     1.528719    -1.343719\n6    -1.015606    -1.245936    -0.295275\n﻿</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Here, the&nbsp;<strong>df1</strong>&nbsp;DataFrame is altered and reindexed like&nbsp;<strong>df2</strong>. The column names should be matched or else NAN will be added for the entire column label.</p>\n\n\n\n<h2>Filling while ReIndexing</h2>\n\n\n\n<p><strong>reindex()</strong>&nbsp;takes an optional parameter method which is a filling method with values as follows −</p>\n\n\n\n<ul><li><strong>pad/ffill</strong>&nbsp;− Fill values forward</li><li><strong>bfill/backfill</strong>&nbsp;− Fill values backward</li><li><strong>nearest</strong>&nbsp;− Fill from the nearest index values</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(6,3),columns=&#91;'col1','col2','col3'])\ndf2 = pd.DataFrame(np.random.randn(2,3),columns=&#91;'col1','col2','col3'])\n\n# Padding NAN's\nprint df2.reindex_like(df1)\n\n# Now Fill the NAN's with preceding Values\nprint (\"Data Frame with Forward Fill:\")\nprint df2.reindex_like(df1,method='ffill')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> col1        col2       col3\n0    1.311620   -0.707176   0.599863\n1   -0.423455   -0.700265   1.133371\n2         NaN         NaN        NaN\n3         NaN         NaN        NaN\n4         NaN         NaN        NaN\n5         NaN         NaN        NaN\n\nData Frame with Forward Fill:\n         col1        col2        col3\n0    1.311620   -0.707176    0.599863\n1   -0.423455   -0.700265    1.133371\n2   -0.423455   -0.700265    1.133371\n3   -0.423455   -0.700265    1.133371\n4   -0.423455   -0.700265    1.133371\n5   -0.423455   -0.700265    1.133371</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− The last four rows are padded.</p>\n\n\n\n<h2>Limits on Filling while Reindexing</h2>\n\n\n\n<p>The limit argument provides additional control over filling while reindexing. Limit specifies the maximum count of consecutive matches. Let us consider the following example to understand the same −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \ndf1 = pd.DataFrame(np.random.randn(6,3),columns=&#91;'col1','col2','col3'])\ndf2 = pd.DataFrame(np.random.randn(2,3),columns=&#91;'col1','col2','col3'])\n\n# Padding NAN's\nprint df2.reindex_like(df1)\n\n# Now Fill the NAN's with preceding Values\nprint (\"Data Frame with Forward Fill limiting to 1:\")\nprint df2.reindex_like(df1,method='ffill',limit=1)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>       col1        col2        col3\n0    0.247784    2.128727    0.702576\n1   -0.055713   -0.021732   -0.174577\n2         NaN         NaN         NaN\n3         NaN         NaN         NaN\n4         NaN         NaN         NaN\n5         NaN         NaN         NaN\n\nData Frame with Forward Fill limiting to 1:\n         col1        col2        col3\n0    0.247784    2.128727    0.702576\n1   -0.055713   -0.021732   -0.174577\n2   -0.055713   -0.021732   -0.174577\n3         NaN         NaN         NaN\n4         NaN         NaN         NaN\n5         NaN         NaN         NaN\n﻿</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe, only the 7th row is filled by the preceding 6th row. Then, the rows are left as they are.</p>\n\n\n\n<h2>Renaming</h2>\n\n\n\n<p>The rename() method allows you to relabel an axis based on some mapping (a dict or Series) or an arbitrary function.</p>\n\n\n\n<p>Let us consider the following example to understand this −Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(6,3),columns=&#91;'col1','col2','col3'])\nprint df1\n\nprint (\"After renaming the rows and columns:\")\nprint df1.rename(columns={'col1' : 'c1', 'col2' : 'c2'},\nindex = {0 : 'apple', 1 : 'banana', 2 : 'durian'})</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   col1        col2        col3\n0    0.486791    0.105759    1.540122\n1   -0.990237    1.007885   -0.217896\n2   -0.483855   -1.645027   -1.194113\n3   -0.122316    0.566277   -0.366028\n4   -0.231524   -0.721172   -0.112007\n5    0.438810    0.000225    0.435479\n\nAfter renaming the rows and columns:\n                c1          c2        col3\napple     0.486791    0.105759    1.540122\nbanana   -0.990237    1.007885   -0.217896\ndurian   -0.483855   -1.645027   -1.194113\n3        -0.122316    0.566277   -0.366028\n4        -0.231524   -0.721172   -0.112007\n5         0.438810    0.000225    0.435479</code></pre>\n\n\n\n<p>The rename() method provides an&nbsp;<strong>inplace</strong>&nbsp;named parameter, which by default is False and copies the underlying data. Pass&nbsp;<strong>inplace=True</strong>&nbsp;to rename the data in place.</p>\n","protected":false},"excerpt":{"rendered":"<p>Reindexing&nbsp;changes the row labels and column labels of a DataFrame. To&nbsp;reindex&nbsp;means to conform the data to match a given set of labels along a particular axis. Multiple operations can be accomplished through indexing like − Reorder the existing data to match a new set of labels. Insert missing value (NA) markers in label locations where [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2682"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2682"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2682/revisions"}],"predecessor-version":[{"id":3065,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2682/revisions/3065"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2682"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2682"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2682"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2683,"date":"2020-07-22T06:05:12","date_gmt":"2020-07-22T06:05:12","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1810"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"iteration","status":"publish","type":"post","link":"https://python3.foobrdigital.com/iteration/","title":{"rendered":"Iteration"},"content":{"rendered":"\n<p>The behavior of basic iteration over Pandas objects depends on the type. When iterating over a Series, it is regarded as array-like, and basic iteration produces the values. Other data structures, like DataFrame and Panel, follow the&nbsp;<strong>dict-like</strong>&nbsp;convention of iterating over the&nbsp;<strong>keys</strong>&nbsp;of the objects.</p>\n\n\n\n<p>In short, basic iteration (for&nbsp;<strong>i</strong>&nbsp;in object) produces −</p>\n\n\n\n<ul><li><strong>Series</strong>&nbsp;− values</li><li><strong>DataFrame</strong>&nbsp;− column labels</li><li><strong>Panel</strong>&nbsp;− item labels</li></ul>\n\n\n\n<h2>Iterating a DataFrame</h2>\n\n\n\n<p>Iterating a DataFrame gives column names. Let us consider the following example to understand the same.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \nN=20\ndf = pd.DataFrame({\n   'A': pd.date_range(start='2016-01-01',periods=N,freq='D'),\n   'x': np.linspace(0,stop=N-1,num=N),\n   'y': np.random.rand(N),\n   'C': np.random.choice(&#91;'Low','Medium','High'],N).tolist(),\n   'D': np.random.normal(100, 10, size=(N)).tolist()\n   })\n\nfor col in df:\n   print col</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A\nC\nD\nx\ny\n﻿</code></pre>\n\n\n\n<p>To iterate over the rows of the DataFrame, we can use the following functions −</p>\n\n\n\n<ul><li><strong>iteritems()</strong>&nbsp;− to iterate over the (key,value) pairs</li><li><strong>iterrows()</strong>&nbsp;− iterate over the rows as (index,series) pairs</li><li><strong>itertuples()</strong>&nbsp;− iterate over the rows as namedtuples</li></ul>\n\n\n\n<h2>iteritems()</h2>\n\n\n\n<p>Iterates over each column as key, value pair with label as key and column value as a Series object.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \ndf = pd.DataFrame(np.random.randn(4,3),columns=&#91;'col1','col2','col3'])\nfor key,value in df.iteritems():\n   print key,value</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>col1 0    0.802390\n1    0.324060\n2    0.256811\n3    0.839186\nName: col1, dtype: float64\n\ncol2 0    1.624313\n1   -1.033582\n2    1.796663\n3    1.856277\nName: col2, dtype: float64\n\ncol3 0   -0.022142\n1   -0.230820\n2    1.160691\n3   -0.830279\nName: col3, dtype: float64</code></pre>\n\n\n\n<p>Observe, each column is iterated separately as a key-value pair in a Series.</p>\n\n\n\n<h2>iterrows()</h2>\n\n\n\n<p>iterrows() returns the iterator yielding each index value along with a series containing the data in each row.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(4,3),columns = &#91;'col1','col2','col3'])\nfor row_index,row in df.iterrows():\n   print row_index,row</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  col1    1.529759\n   col2    0.762811\n   col3   -0.634691\nName: 0, dtype: float64\n\n1  col1   -0.944087\n   col2    1.420919\n   col3   -0.507895\nName: 1, dtype: float64\n \n2  col1   -0.077287\n   col2   -0.858556\n   col3   -0.663385\nName: 2, dtype: float64\n3  col1    -1.638578\n   col2     0.059866\n   col3     0.493482\nName: 3, dtype: float64</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Because&nbsp;<strong>iterrows()</strong>&nbsp;iterate over the rows, it doesn&#8217;t preserve the data type across the row. 0,1,2 are the row indices and col1,col2,col3 are column indices.</p>\n\n\n\n<h2>itertuples()</h2>\n\n\n\n<p>itertuples() method will return an iterator yielding a named tuple for each row in the DataFrame. The first element of the tuple will be the row’s corresponding index value, while the remaining values are the row values.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(4,3),columns = &#91;'col1','col2','col3'])\nfor row in df.itertuples():\n    print row</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Pandas(Index=0, col1=1.5297586201375899, col2=0.76281127433814944, col3=-\n0.6346908238310438)\n\nPandas(Index=1, col1=-0.94408735763808649, col2=1.4209186418359423, col3=-\n0.50789517967096232)\n\nPandas(Index=2, col1=-0.07728664756791935, col2=-0.85855574139699076, col3=-\n0.6633852507207626)\n\nPandas(Index=3, col1=0.65734942534106289, col2=-0.95057710432604969,\ncol3=0.80344487462316527)</code></pre>\n\n\n\n<p><strong>Note</strong> − Do not try to modify any object while iterating. Iterating is meant for reading and the iterator returns a copy of the original object (a view), thus the changes will not reflect on the original object.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(4,3),columns = &#91;'col1','col2','col3'])\n\nfor index, row in df.iterrows():\n   row&#91;'a'] = 10\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>        col1       col2       col3\n0  -1.739815   0.735595  -0.295589\n1   0.635485   0.106803   1.527922\n2  -0.939064   0.547095   0.038585\n3  -1.016509  -0.116580  -0.523158\n﻿</code></pre>\n\n\n\n<p>Observe, no changes reflected.</p>\n","protected":false},"excerpt":{"rendered":"<p>The behavior of basic iteration over Pandas objects depends on the type. When iterating over a Series, it is regarded as array-like, and basic iteration produces the values. Other data structures, like DataFrame and Panel, follow the&nbsp;dict-like&nbsp;convention of iterating over the&nbsp;keys&nbsp;of the objects. In short, basic iteration (for&nbsp;i&nbsp;in object) produces − Series&nbsp;− values DataFrame&nbsp;− column [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2683"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2683"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2683/revisions"}],"predecessor-version":[{"id":3060,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2683/revisions/3060"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2683"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2683"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2683"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2684,"date":"2020-07-22T06:09:04","date_gmt":"2020-07-22T06:09:04","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1812"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"sorting","status":"publish","type":"post","link":"https://python3.foobrdigital.com/sorting/","title":{"rendered":"Sorting"},"content":{"rendered":"\n<p>There are two kinds of sorting available in Pandas. They are −</p>\n\n\n\n<ul><li>By label</li><li>By Actual Value</li></ul>\n\n\n\n<p>Let us consider an example with an output.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nunsorted_df=pd.DataFrame(np.random.randn(10,2),index=&#91;1,4,6,2,3,5,9,8,0,7],colu\nmns=&#91;'col2','col1'])\nprint unsorted_df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      col2       col1\n1  -2.063177   0.537527\n4   0.142932  -0.684884\n6   0.012667  -0.389340\n2  -0.548797   1.848743\n3  -1.044160   0.837381\n5   0.385605   1.300185\n9   1.031425  -1.002967\n8  -0.407374  -0.435142\n0   2.237453  -1.067139\n7  -1.445831  -1.701035</code></pre>\n\n\n\n<p>In&nbsp;<strong>unsorted_df</strong>, the&nbsp;<strong>labels</strong>&nbsp;and the&nbsp;<strong>values</strong>&nbsp;are unsorted. Let us see how these can be sorted.</p>\n\n\n\n<h2>By Label</h2>\n\n\n\n<p>Using the <strong>sort_index()</strong> method, by passing the axis arguments and the order of sorting, DataFrame can be sorted. By default, sorting is done on row labels in ascending order.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nunsorted_df = pd.DataFrame(np.random.randn(10,2),index=&#91;1,4,6,2,3,5,9,8,0,7],colu\n   mns = &#91;'col2','col1'])\n\nsorted_df=unsorted_df.sort_index()\nprint sorted_df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    col2       col1\n0   0.208464   0.627037\n1   0.641004   0.331352\n2  -0.038067  -0.464730\n3  -0.638456  -0.021466\n4   0.014646  -0.737438\n5  -0.290761  -1.669827\n6  -0.797303  -0.018737\n7   0.525753   1.628921\n8  -0.567031   0.775951\n9   0.060724  -0.322425</code></pre>\n\n\n\n<h3>Order of Sorting</h3>\n\n\n\n<p>By passing the Boolean value to ascending parameter, the order of the sorting can be controlled. Let us consider the following example to understand the same.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nunsorted_df = pd.DataFrame(np.random.randn(10,2),index=&#91;1,4,6,2,3,5,9,8,0,7],colu\n   mns = &#91;'col2','col1'])\n\nsorted_df = unsorted_df.sort_index(ascending=False)\nprint sorted_df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    col2        col1\n9    0.825697    0.374463\n8   -1.699509    0.510373\n7   -0.581378    0.622958\n6   -0.202951    0.954300\n5   -1.289321   -1.551250\n4    1.302561    0.851385\n3   -0.157915   -0.388659\n2   -1.222295    0.166609\n1    0.584890   -0.291048\n0    0.668444   -0.061294</code></pre>\n\n\n\n<h3>Sort the Columns</h3>\n\n\n\n<p>By passing the axis argument with a value 0 or 1, the sorting can be done on the column labels. By default, axis=0, sort by row. Let us consider the following example to understand the same.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \nunsorted_df = pd.DataFrame(np.random.randn(10,2),index=&#91;1,4,6,2,3,5,9,8,0,7],colu\n   mns = &#91;'col2','col1'])\n \nsorted_df=unsorted_df.sort_index(axis=1)\n\nprint sorted_df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    col1        col2\n1   -0.291048    0.584890\n4    0.851385    1.302561\n6    0.954300   -0.202951\n2    0.166609   -1.222295\n3   -0.388659   -0.157915\n5   -1.551250   -1.289321\n9    0.374463    0.825697\n8    0.510373   -1.699509\n0   -0.061294    0.668444\n7    0.622958   -0.581378\n﻿</code></pre>\n\n\n\n<h3>By Value</h3>\n\n\n\n<p>Like index sorting, <strong>sort_values()</strong> is the method for sorting by values. It accepts a &#8216;by&#8217; argument which will use the column name of the DataFrame with which the values are to be sorted.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nunsorted_df = pd.DataFrame({'col1':&#91;2,1,1,1],'col2':&#91;1,3,2,4]})\n   sorted_df = unsorted_df.sort_values(by='col1')\n\nprint sorted_df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> col1  col2\n1    1    3\n2    1    2\n3    1    4\n0    2    1</code></pre>\n\n\n\n<p>Observe, col1 values are sorted and the respective col2 value and row index will alter along with col1. Thus, they look unsorted.</p>\n\n\n\n<p><strong>&#8216;by&#8217;</strong> argument takes a list of column values.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nunsorted_df = pd.DataFrame({'col1':&#91;2,1,1,1],'col2':&#91;1,3,2,4]})\n   sorted_df = unsorted_df.sort_values(by=&#91;'col1','col2'])\n\nprint sorted_df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>col1 col2\n2   1   2\n1   1   3\n3   1   4\n0   2   1\n﻿</code></pre>\n\n\n\n<h2>Sorting Algorithm</h2>\n\n\n\n<p><strong>sort_values()</strong> provides a provision to choose the algorithm from mergesort, heapsort and quicksort. Mergesort is the only stable algorithm.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nunsorted_df = pd.DataFrame({'col1':&#91;2,1,1,1],'col2':&#91;1,3,2,4]})\nsorted_df = unsorted_df.sort_values(by='col1' ,kind='mergesort')\n\nprint sorted_df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  col1 col2\n1    1    3\n2    1    2\n3    1    4\n0    2    1</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>There are two kinds of sorting available in Pandas. They are − By label By Actual Value Let us consider an example with an output. Its output is as follows − In&nbsp;unsorted_df, the&nbsp;labels&nbsp;and the&nbsp;values&nbsp;are unsorted. Let us see how these can be sorted. By Label Using the sort_index() method, by passing the axis arguments and the order of sorting, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2684"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2684"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2684/revisions"}],"predecessor-version":[{"id":3067,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2684/revisions/3067"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2684"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2684"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2684"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2685,"date":"2020-07-22T06:22:34","date_gmt":"2020-07-22T06:22:34","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1814"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"working-with-text-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/working-with-text-data/","title":{"rendered":"Working with Text Data"},"content":{"rendered":"\n<p>In this chapter, we will discuss the string operations with our basic Series/Index. In the subsequent chapters, we will learn how to apply these string functions on the DataFrame.</p>\n\n\n\n<p>Pandas provides a set of string functions which make it easy to operate on string data. Most importantly, these functions ignore (or exclude) missing/NaN values.</p>\n\n\n\n<p>Almost, all of these methods work with Python string functions (refer: https://docs.python.org/3/library/stdtypes.html#string-methods). So, convert the Series Object to String Object and then perform the operation.</p>\n\n\n\n<p>Let us now see how each operation performs.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Function &amp; Description</th></tr><tr><td>1</td><td><strong>lower()</strong>Converts strings in the Series/Index to lower case.</td></tr><tr><td>2</td><td><strong>upper()</strong>Converts strings in the Series/Index to upper case.</td></tr><tr><td>3</td><td><strong>len()</strong>Computes String length().</td></tr><tr><td>4</td><td><strong>strip()</strong>Helps strip whitespace(including newline) from each string in the Series/index from both the sides.</td></tr><tr><td>5</td><td><strong>split(&#8216; &#8216;)</strong>Splits each string with the given pattern.</td></tr><tr><td>6</td><td><strong>cat(sep=&#8217; &#8216;)</strong>Concatenates the series/index elements with given separator.</td></tr><tr><td>7</td><td><strong>get_dummies()</strong>Returns the DataFrame with One-Hot Encoded values.</td></tr><tr><td>8</td><td><strong>contains(pattern)</strong>Returns a Boolean value True for each element if the substring contains in the element, else False.</td></tr><tr><td>9</td><td><strong>replace(a,b)</strong>Replaces the value&nbsp;<strong>a</strong>&nbsp;with the value&nbsp;<strong>b</strong>.</td></tr><tr><td>10</td><td><strong>repeat(value)</strong>Repeats each element with specified number of times.</td></tr><tr><td>11</td><td><strong>count(pattern)</strong>Returns count of appearance of pattern in each element.</td></tr><tr><td>12</td><td><strong>startswith(pattern)</strong>Returns true if the element in the Series/Index starts with the pattern.</td></tr><tr><td>13</td><td><strong>endswith(pattern)</strong>Returns true if the element in the Series/Index ends with the pattern.</td></tr><tr><td>14</td><td><strong>find(pattern)</strong>Returns the first position of the first occurrence of the pattern.</td></tr><tr><td>15</td><td><strong>findall(pattern)</strong>Returns a list of all occurrence of the pattern.</td></tr><tr><td>16</td><td><strong>swapcase</strong>Swaps the case lower/upper.</td></tr><tr><td>17</td><td><strong>islower()</strong>Checks whether all characters in each string in the Series/Index in lower case or not. Returns Boolean</td></tr><tr><td>18</td><td><strong>isupper()</strong>Checks whether all characters in each string in the Series/Index in upper case or not. Returns Boolean.</td></tr><tr><td>19</td><td><strong>isnumeric()</strong>Checks whether all characters in each string in the Series/Index are numeric. Returns Boolean.</td></tr></tbody></table></figure>\n\n\n\n<p>Let us now create a Series and see how all the above functions work.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Series(&#91;'Tom', 'William Rick', 'John', 'Alber@t', np.nan, '1234','SteveSmith'])\n\nprint s</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0            Tom\n1   William Rick\n2           John\n3        Alber@t\n4            NaN\n5           1234\n6    Steve Smith\ndtype: object</code></pre>\n\n\n\n<h3>lower()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Series(&#91;'Tom', 'William Rick', 'John', 'Alber@t', np.nan, '1234','SteveSmith'])\n\nprint s.str.lower()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0            tom\n1   william rick\n2           john\n3        alber@t\n4            NaN\n5           1234\n6    steve smith\ndtype: object\n﻿</code></pre>\n\n\n\n<h3>upper()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Series(&#91;'Tom', 'William Rick', 'John', 'Alber@t', np.nan, '1234','SteveSmith'])\n\nprint s.str.upper()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0            TOM\n1   WILLIAM RICK\n2           JOHN\n3        ALBER@T\n4            NaN\n5           1234\n6    STEVE SMITH\ndtype: object</code></pre>\n\n\n\n<h3>len()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Series(&#91;'Tom', 'William Rick', 'John', 'Alber@t', np.nan, '1234','SteveSmith'])\nprint s.str.len()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0    3.0\n1   12.0\n2    4.0\n3    7.0\n4    NaN\n5    4.0\n6   10.0\ndtype: float64</code></pre>\n\n\n\n<h3>strip()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\nprint s\nprint (\"After Stripping:\")\nprint s.str.strip()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0            Tom\n1   William Rick\n2           John\n3        Alber@t\ndtype: object\n\nAfter Stripping:\n0            Tom\n1   William Rick\n2           John\n3        Alber@t\ndtype: object\n﻿</code></pre>\n\n\n\n<h3>split(pattern)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\nprint s\nprint (\"Split Pattern:\")\nprint s.str.split(' ')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0            Tom\n1   William Rick\n2           John\n3        Alber@t\ndtype: object\n\nSplit Pattern:\n0   &#91;Tom, , , , , , , , , , ]\n1   &#91;, , , , , William, Rick]\n2   &#91;John]\n3   &#91;Alber@t]\ndtype: object</code></pre>\n\n\n\n<h3>cat(sep=pattern)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\n\nprint s.str.cat(sep='_')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Tom _ William Rick_John_Alber@t</code></pre>\n\n\n\n<h3>get_dummies()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\n\nprint s.str.get_dummies()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   William Rick   Alber@t   John   Tom\n0             0         0      0     1\n1             1         0      0     0\n2             0         0      1     0\n3             0         1      0     0\n﻿</code></pre>\n\n\n\n<h3>contains ()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\n\nprint s.str.contains(' ')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   True\n1   True\n2   False\n3   False\ndtype: bool</code></pre>\n\n\n\n<h3>replace(a,b)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\nprint s\nprint (\"After replacing @ with $:\")\nprint s.str.replace('@','$')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   Tom\n1   William Rick\n2   John\n3   Alber@t\ndtype: object\n\nAfter replacing @ with $:\n0   Tom\n1   William Rick\n2   John\n3   Alber$t\ndtype: object</code></pre>\n\n\n\n<h3>repeat(value)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\n\nprint s.str.repeat(2)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   Tom            Tom\n1   William Rick   William Rick\n2                  JohnJohn\n3                  Alber@tAlber@t\ndtype: object\n﻿</code></pre>\n\n\n\n<h3>count(pattern)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n \ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\n\nprint (\"The number of 'm's in each string:\")\nprint s.str.count('m')</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">The number of 'm's in each string:\n0    1\n1    1\n2    0\n3    0\n</pre>\n\n\n\n<h3>startswith(pattern)</h3>\n\n\n\n<pre class=\"wp-block-preformatted\">import pandas as pd\n\ns = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])\n\nprint (\"Strings that start with 'T':\")\nprint s.str. startswith ('T')</pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">0  True\n1  False\n2  False\n3  False\ndtype: bool\n</pre>\n\n\n\n<h3>endswith(pattern)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\nprint (\"Strings that end with 't':\")\nprint s.str.endswith('t')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Strings that end with 't':\n0  False\n1  False\n2  False\n3  True\ndtype: bool</code></pre>\n\n\n\n<h3>find(pattern)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\n\nprint s.str.find('e')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  -1\n1  -1\n2  -1\n3   3\ndtype: int64\n﻿</code></pre>\n\n\n\n<p>&#8220;-1&#8221; indicates that there no such pattern available in the element.</p>\n\n\n\n<h3>findall(pattern)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;'Tom ', ' William Rick', 'John', 'Alber@t'])\n\nprint s.str.findall('e')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 &#91;]\n1 &#91;]\n2 &#91;]\n3 &#91;e]\ndtype: object</code></pre>\n\n\n\n<p>Null list([ ]) indicates that there is no such pattern available in the element.</p>\n\n\n\n<h3>swapcase()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;'Tom', 'William Rick', 'John', 'Alber@t'])\nprint s.str.swapcase()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  tOM\n1  wILLIAM rICK\n2  jOHN\n3  aLBER@T\ndtype: object</code></pre>\n\n\n\n<h3>islower()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;'Tom', 'William Rick', 'John', 'Alber@t'])\nprint s.str.islower()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  False\n1  False\n2  False\n3  False\ndtype: bool</code></pre>\n\n\n\n<h3>isupper()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;'Tom', 'William Rick', 'John', 'Alber@t'])\n\nprint s.str.isupper()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  False\n1  False\n2  False\n3  False\ndtype: bool</code></pre>\n\n\n\n<h3>isnumeric()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;'Tom', 'William Rick', 'John', 'Alber@t'])\n\nprint s.str.isnumeric()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  False\n1  False\n2  False\n3  False\ndtype: bool</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss the string operations with our basic Series/Index. In the subsequent chapters, we will learn how to apply these string functions on the DataFrame. Pandas provides a set of string functions which make it easy to operate on string data. Most importantly, these functions ignore (or exclude) missing/NaN values. Almost, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2685"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2685"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2685/revisions"}],"predecessor-version":[{"id":3073,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2685/revisions/3073"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2685"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2685"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2685"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2686,"date":"2020-07-24T05:24:07","date_gmt":"2020-07-24T05:24:07","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1819"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"options-and-customization","status":"publish","type":"post","link":"https://python3.foobrdigital.com/options-and-customization/","title":{"rendered":"Options and Customization"},"content":{"rendered":"\n<p>Pandas provide API to customize some aspects of its behavior, display is being mostly used.</p>\n\n\n\n<p>The API is composed of five relevant functions. They are −</p>\n\n\n\n<ul><li>get_option()</li><li>set_option()</li><li>reset_option()</li><li>describe_option()</li><li>option_context()</li></ul>\n\n\n\n<p>Let us now understand how the functions operate.</p>\n\n\n\n<h2>get_option(param)</h2>\n\n\n\n<p>get_option takes a single parameter and returns the value as given in the output below −</p>\n\n\n\n<h3>display.max_rows</h3>\n\n\n\n<p>Displays the default number of value. Interpreter reads this value and displays the rows with this value as upper limit to display.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nprint pd.get_option(\"display.max_rows\")</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>60</code></pre>\n\n\n\n<h3>display.max_columns</h3>\n\n\n\n<p>Displays the default number of value. Interpreter reads this value and displays the rows with this value as upper limit to display.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nprint pd.get_option(\"display.max_columns\")</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">20\n</pre>\n\n\n\n<p>Here, 60 and 20 are the default configuration parameter values.</p>\n\n\n\n<h2>set_option(param,value)</h2>\n\n\n\n<p>set_option takes two arguments and sets the value to the parameter as shown below −</p>\n\n\n\n<h3>display.max_rows</h3>\n\n\n\n<p>Using <strong>set_option()</strong>, we can change the default number of rows to be displayed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\npd.set_option(\"display.max_rows\",80)\n\nprint pd.get_option(\"display.max_rows\")</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>80\n﻿</code></pre>\n\n\n\n<h3>display.max_columns</h3>\n\n\n\n<p>Using <strong>set_option()</strong>, we can change the default number of rows to be displayed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\npd.set_option(\"display.max_columns\",30)\n\nprint pd.get_option(\"display.max_columns\")</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>30</code></pre>\n\n\n\n<h2>reset_option(param)</h2>\n\n\n\n<p><strong>reset_option</strong>&nbsp;takes an argument and sets the value back to the default value.</p>\n\n\n\n<h3>display.max_rows</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\npd.reset_option(\"display.max_rows\")\nprint pd.get_option(\"display.max_rows\")</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>60</code></pre>\n\n\n\n<h2>describe_option(param)</h2>\n\n\n\n<p><strong>describe_option</strong>&nbsp;prints the description of the argument.</p>\n\n\n\n<h3>display.max_rows</h3>\n\n\n\n<p>Using reset_option(), we can change the value back to the default number of rows to be displayed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\npd.describe_option(\"display.max_rows\")</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>display.max_rows : int\n   If max_rows is exceeded, switch to truncate view. Depending on\n   'large_repr', objects are either centrally truncated or printed as\n   a summary view. 'None' value means unlimited.\n\n   In case python/IPython is running in a terminal and `large_repr`\n   equals 'truncate' this can be set to 0 and pandas will auto-detect\n   the height of the terminal and print a truncated object which fits\n   the screen height. The IPython notebook, IPython qtconsole, or\n   IDLE do not run in a terminal and hence it is not possible to do\n   correct auto-detection.\n   &#91;default: 60] &#91;currently: 60]</code></pre>\n\n\n\n<h2>option_context()</h2>\n\n\n\n<p>option_context context manager is used to set the option in&nbsp;<strong>with statement</strong>&nbsp;temporarily. Option values are restored automatically when you exit the&nbsp;<strong>with block</strong>&nbsp;−</p>\n\n\n\n<h3>display.max_rows</h3>\n\n\n\n<p>Using option_context(), we can set the value temporarily</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nwith pd.option_context(\"display.max_rows\",10):\n   print(pd.get_option(\"display.max_rows\"))\n   print(pd.get_option(\"display.max_rows\"))</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n10\n﻿</code></pre>\n\n\n\n<p>See, the difference between the first and the second print statements. The first statement prints the value set by&nbsp;<strong>option_context()</strong>&nbsp;which is temporary within the&nbsp;<strong>with context</strong>&nbsp;itself. After the&nbsp;<strong>with context</strong>, the second print statement prints the configured value.</p>\n\n\n\n<h3>Frequently used Parameters</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>display.max_rows</strong>Displays maximum number of rows to display</td></tr><tr><td>2</td><td><strong>2 display.max_columns</strong>Displays maximum number of columns to display</td></tr><tr><td>3</td><td><strong>display.expand_frame_repr</strong>Displays DataFrames to Stretch Pages</td></tr><tr><td>4</td><td><strong>display.max_colwidth</strong>Displays maximum column width</td></tr><tr><td>5</td><td><strong>display.precision</strong>Displays precision for decimal numbers</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Pandas provide API to customize some aspects of its behavior, display is being mostly used. The API is composed of five relevant functions. They are − get_option() set_option() reset_option() describe_option() option_context() Let us now understand how the functions operate. get_option(param) get_option takes a single parameter and returns the value as given in the output below [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2686"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2686"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2686/revisions"}],"predecessor-version":[{"id":3063,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2686/revisions/3063"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2686"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2686"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2686"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2687,"date":"2020-07-24T05:33:47","date_gmt":"2020-07-24T05:33:47","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1821"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"indexing-and-selecting-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/indexing-and-selecting-data/","title":{"rendered":"Indexing and Selecting Data"},"content":{"rendered":"\n<p>In this chapter, we will discuss how to slice and dice the date and generally get the subset of pandas object.</p>\n\n\n\n<p>The Python and NumPy indexing operators &#8220;[ ]&#8221; and attribute operator &#8220;.&#8221; provide quick and easy access to Pandas data structures across a wide range of use cases. However, since the type of the data to be accessed isn’t known in advance, directly using standard operators has some optimization limits. For production code, we recommend that you take advantage of the optimized pandas data access methods explained in this chapter.</p>\n\n\n\n<p>Pandas now supports three types of Multi-axes indexing; the three types are mentioned in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Indexing &amp; Description</th></tr><tr><td>1</td><td><strong>.loc()</strong>Label based</td></tr><tr><td>2</td><td><strong>.iloc()</strong>Integer based</td></tr><tr><td>3</td><td><strong>.ix()</strong>Both Label and Integer based</td></tr></tbody></table></figure>\n\n\n\n<h2>.loc()</h2>\n\n\n\n<p>Pandas provide various methods to have purely&nbsp;<strong>label based indexing</strong>. When slicing, the start bound is also included. Integers are valid labels, but they refer to the label and not the position.</p>\n\n\n\n<p><strong>.loc()</strong>&nbsp;has multiple access methods like −</p>\n\n\n\n<ul><li>A single scalar label</li><li>A list of labels</li><li>A slice object</li><li>A Boolean array</li></ul>\n\n\n\n<p><strong>loc</strong>&nbsp;takes two single/list/range operator separated by &#8216;,&#8217;. The first one indicates the row and the second one indicates columns.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(8, 4),\nindex = &#91;'a','b','c','d','e','f','g','h'], columns = &#91;'A', 'B', 'C', 'D'])\n\n#select all rows for a specific column\nprint df.loc&#91;:,'A']</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a   0.391548\nb  -0.070649\nc  -0.317212\nd  -2.162406\ne   2.202797\nf   0.613709\ng   1.050559\nh   1.122680\nName: A, dtype: float64</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> A           C\na    0.391548    0.745623\nb   -0.070649    1.620406\nc   -0.317212    1.448365\nd   -2.162406   -0.873557\ne    2.202797    0.528067\nf    0.613709    0.286414\ng    1.050559    0.216526\nh    1.122680   -1.621420</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(8, 4),\nindex = &#91;'a','b','c','d','e','f','g','h'], columns = &#91;'A', 'B', 'C', 'D'])\n\n# Select few rows for multiple columns, say list&#91;]\nprint df.loc&#91;&#91;'a','b','f','h'],&#91;'A','C']]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>       A          C\na   0.391548   0.745623\nb  -0.070649   1.620406\nf   0.613709   0.286414\nh   1.122680  -1.621420</code></pre>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(8, 4),\nindex = &#91;'a','b','c','d','e','f','g','h'], columns = &#91;'A', 'B', 'C', 'D'])\n\n# Select range of rows for all columns\nprint df.loc&#91;'a':'h']</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     A           B          C          D\na    0.391548   -0.224297   0.745623   0.054301\nb   -0.070649   -0.880130   1.620406   1.419743\nc   -0.317212   -1.929698   1.448365   0.616899\nd   -2.162406    0.614256  -0.873557   1.093958\ne    2.202797   -2.315915   0.528067   0.612482\nf    0.613709   -0.157674   0.286414  -0.500517\ng    1.050559   -2.272099   0.216526   0.928449\nh    1.122680    0.324368  -1.621420  -0.741470</code></pre>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(8, 4),\nindex = &#91;'a','b','c','d','e','f','g','h'], columns = &#91;'A', 'B', 'C', 'D'])\n\n# for getting values with a boolean array\nprint df.loc&#91;'a']>0</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A  False\nB  True\nC  False\nD  False\nName: a, dtype: bool\n﻿</code></pre>\n\n\n\n<h2>.iloc()</h2>\n\n\n\n<p>Pandas provide various methods in order to get purely integer based indexing. Like python and numpy, these are&nbsp;<strong>0-based</strong>&nbsp;indexing.</p>\n\n\n\n<p>The various access methods are as follows −</p>\n\n\n\n<ul><li>An Integer</li><li>A list of integers</li><li>A range of values</li></ul>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library and aliasing as pd\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(8, 4), columns = &#91;'A', 'B', 'C', 'D'])\n\n# select all rows for a specific column\nprint df.iloc&#91;:4]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     A          B           C           D\n0   0.699435   0.256239   -1.270702   -0.645195\n1  -0.685354   0.890791   -0.813012    0.631615\n2  -0.783192  -0.531378    0.025070    0.230806\n3   0.539042  -1.284314    0.826977   -0.026251</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">    A          B           C           D<br>0   0.699435   0.256239   -1.270702   -0.645195<br>1  -0.685354   0.890791   -0.813012    0.631615<br>2  -0.783192  -0.531378    0.025070    0.230806<br>3   0.539042  -1.284314    0.826977   -0.026251<br><br>           C          D<br>1  -0.813012   0.631615<br>2   0.025070   0.230806<br>3   0.826977  -0.026251<br>4   1.423332   1.130568</pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(8, 4), columns = &#91;'A', 'B', 'C', 'D'])\n\n# Slicing through list of values\nprint df.iloc&#91;&#91;1, 3, 5], &#91;1, 3]]\nprint df.iloc&#91;1:3, :]\nprint df.iloc&#91;:,1:3]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     B           D\n1   0.890791    0.631615\n3  -1.284314   -0.026251\n5  -0.512888   -0.518930\n\n           A           B           C           D\n1  -0.685354    0.890791   -0.813012    0.631615\n2  -0.783192   -0.531378    0.025070    0.230806\n\n           B           C\n0   0.256239   -1.270702\n1   0.890791   -0.813012\n2  -0.531378    0.025070\n3  -1.284314    0.826977\n4  -0.460729    1.423332\n5  -0.512888    0.581409\n6  -1.204853    0.098060\n7  -0.947857    0.641358</code></pre>\n\n\n\n<h2>.ix()</h2>\n\n\n\n<p>Besides pure label based and integer based, Pandas provides a hybrid method for selections and subsetting the object using the .ix() operator.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(8, 4), columns = &#91;'A', 'B', 'C', 'D'])\n\n# Integer slicing\nprint df.ix&#91;:4]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>           A          B           C           D\n0   0.699435   0.256239   -1.270702   -0.645195\n1  -0.685354   0.890791   -0.813012    0.631615\n2  -0.783192  -0.531378    0.025070    0.230806\n3   0.539042  -1.284314    0.826977   -0.026251</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(8, 4), columns = &#91;'A', 'B', 'C', 'D'])\n# Index slicing\nprint df.ix&#91;:,'A']</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   0.699435\n1  -0.685354\n2  -0.783192\n3   0.539042\n4  -1.044209\n5  -1.415411\n6   1.062095\n7   0.994204\nName: A, dtype: float64</code></pre>\n\n\n\n<h2>Use of Notations</h2>\n\n\n\n<p>Getting values from the Pandas object with Multi-axes indexing uses the following notation −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Object</th><th>Indexers</th><th>Return Type</th></tr><tr><td>Series</td><td>s.loc[indexer]</td><td>Scalar value</td></tr><tr><td>DataFrame</td><td>df.loc[row_index,col_index]</td><td>Series object</td></tr><tr><td>Panel</td><td>p.loc[item_index,major_index, minor_index]</td><td>p.loc[item_index,major_index, minor_index]</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Note − .iloc() &amp; .ix()</strong>&nbsp;applies the same indexing options and Return value.</p>\n\n\n\n<p>Let us now see how each operation can be performed on the DataFrame object. We will use the basic indexing operator &#8216;[ ]&#8217; −</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.randn(8, 4), columns = &#91;'A', 'B', 'C', 'D'])\nprint df&#91;'A']</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  -0.478893\n1   0.391931\n2   0.336825\n3  -1.055102\n4  -0.165218\n5  -0.328641\n6   0.567721\n7  -0.759399\nName: A, dtype: float64</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− We can pass a list of values to [ ] to select those columns.</p>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.randn(8, 4), columns = &#91;'A', 'B', 'C', 'D'])\n\nprint df&#91;&#91;'A','B']]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>           A           B\n0  -0.478893   -0.606311\n1   0.391931   -0.949025\n2   0.336825    0.093717\n3  -1.055102   -0.012944\n4  -0.165218    1.550310\n5  -0.328641   -0.226363\n6   0.567721   -0.312585\n7  -0.759399   -0.372696</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.randn(8, 4), columns = &#91;'A', 'B', 'C', 'D'])\nprint df&#91;2:2]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Columns: &#91;A, B, C, D]\nIndex: &#91;]\n﻿</code></pre>\n\n\n\n<h3>Attribute Access</h3>\n\n\n\n<p>Columns can be selected using the attribute operator &#8216;.&#8217;.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.randn(8, 4), columns = &#91;'A', 'B', 'C', 'D'])\n\nprint df.A</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   -0.478893\n1    0.391931\n2    0.336825\n3   -1.055102\n4   -0.165218\n5   -0.328641\n6    0.567721\n7   -0.759399\nName: A, dtype: float64</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss how to slice and dice the date and generally get the subset of pandas object. The Python and NumPy indexing operators &#8220;[ ]&#8221; and attribute operator &#8220;.&#8221; provide quick and easy access to Pandas data structures across a wide range of use cases. However, since the type of the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2687"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2687"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2687/revisions"}],"predecessor-version":[{"id":3056,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2687/revisions/3056"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2687"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2687"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2687"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2688,"date":"2020-07-24T05:39:35","date_gmt":"2020-07-24T05:39:35","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1823"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"statistical-functions-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/statistical-functions-2/","title":{"rendered":"Statistical Functions"},"content":{"rendered":"\n<p>Statistical methods help in the understanding and analyzing the behavior of data. We will now learn a few statistical functions, which we can apply on Pandas objects.</p>\n\n\n\n<h2>Percent_change</h2>\n\n\n\n<p>Series, DatFrames and Panel, all have the function <strong>pct_change()</strong>. This function compares every element with its prior element and computes the change percentage.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ns = pd.Series(&#91;1,2,3,4,5,4])\nprint s.pct_change()\n\ndf = pd.DataFrame(np.random.randn(5, 2))\nprint df.pct_change()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0        NaN\n1   1.000000\n2   0.500000\n3   0.333333\n4   0.250000\n5  -0.200000\ndtype: float64\n\n            0          1\n0         NaN        NaN\n1  -15.151902   0.174730\n2  -0.746374   -1.449088\n3  -3.582229   -3.165836\n4   15.601150  -1.860434</code></pre>\n\n\n\n<p>By default, the&nbsp;<strong>pct_change()</strong>&nbsp;operates on columns; if you want to apply the same row wise, then use&nbsp;<strong>axis=1()</strong>&nbsp;argument.</p>\n\n\n\n<h2>Covariance</h2>\n\n\n\n<p>Covariance is applied on series data. The Series object has a method cov to compute covariance between series objects. NA will be excluded automatically.</p>\n\n\n\n<h3>Cov Series</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ns1 = pd.Series(np.random.randn(10))\ns2 = pd.Series(np.random.randn(10))\nprint s1.cov(s2)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>-0.12978405324</code></pre>\n\n\n\n<p>Covariance method when applied on a DataFrame, computes <strong>cov</strong> between all the columns.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\nframe = pd.DataFrame(np.random.randn(10, 5), columns=&#91;'a', 'b', 'c', 'd', 'e'])\nprint frame&#91;'a'].cov(frame&#91;'b'])\nprint frame.cov()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>-0.58312921152741437\n\n           a           b           c           d            e\na   1.780628   -0.583129   -0.185575    0.003679    -0.136558\nb  -0.583129    1.297011    0.136530   -0.523719     0.251064\nc  -0.185575    0.136530    0.915227   -0.053881    -0.058926\nd   0.003679   -0.523719   -0.053881    1.521426    -0.487694\ne  -0.136558    0.251064   -0.058926   -0.487694     0.960761\n﻿</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Observe the&nbsp;<strong>cov</strong>&nbsp;between&nbsp;<strong>a</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;column in the first statement and the same is the value returned by cov on DataFrame.</p>\n\n\n\n<h2>Correlation</h2>\n\n\n\n<p>Correlation shows the linear relationship between any two array of values (series). There are multiple methods to compute the correlation like pearson(default), spearman and kendall.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\nframe = pd.DataFrame(np.random.randn(10, 5), columns=&#91;'a', 'b', 'c', 'd', 'e'])\n\nprint frame&#91;'a'].corr(frame&#91;'b'])\nprint frame.corr()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>-0.383712785514\n\n           a          b          c          d           e\na   1.000000  -0.383713  -0.145368   0.002235   -0.104405\nb  -0.383713   1.000000   0.125311  -0.372821    0.224908\nc  -0.145368   0.125311   1.000000  -0.045661   -0.062840\nd   0.002235  -0.372821  -0.045661   1.000000   -0.403380\ne  -0.104405   0.224908  -0.062840  -0.403380    1.000000\n﻿</code></pre>\n\n\n\n<p>If any non-numeric column is present in the DataFrame, it is excluded automatically.</p>\n\n\n\n<h2>Data Ranking</h2>\n\n\n\n<p>Data Ranking produces ranking for each element in the array of elements. In case of ties, assigns the mean rank.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Series(np.random.np.random.randn(5), index=list('abcde'))\ns&#91;'d'] = s&#91;'b'] # so there's a tie\nprint s.rank()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a  1.0\nb  3.5\nc  2.0\nd  3.5\ne  5.0\ndtype: float64\n﻿</code></pre>\n\n\n\n<p>Rank optionally takes a parameter ascending which by default is true; when false, data is reverse-ranked, with larger values assigned a smaller rank.</p>\n\n\n\n<p>Rank supports different tie-breaking methods, specified with the method parameter −</p>\n\n\n\n<ul><li><strong>average</strong>&nbsp;− average rank of tied group</li><li><strong>min</strong>&nbsp;− lowest rank in the group</li><li><strong>max</strong>&nbsp;− highest rank in the group</li><li><strong>first</strong>&nbsp;− ranks assigned in the order they appear in the array</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Statistical methods help in the understanding and analyzing the behavior of data. We will now learn a few statistical functions, which we can apply on Pandas objects. Percent_change Series, DatFrames and Panel, all have the function pct_change(). This function compares every element with its prior element and computes the change percentage. Its output is as follows − By [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2688"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2688"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2688/revisions"}],"predecessor-version":[{"id":3069,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2688/revisions/3069"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2688"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2688"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2688"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2689,"date":"2020-07-24T05:43:00","date_gmt":"2020-07-24T05:43:00","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1825"},"modified":"2020-12-16T16:58:15","modified_gmt":"2020-12-16T16:58:15","slug":"window-functions","status":"publish","type":"post","link":"https://python3.foobrdigital.com/window-functions/","title":{"rendered":"Window Functions"},"content":{"rendered":"\n<p>For working on numerical data, Pandas provide few variants like rolling, expanding and exponentially moving weights for window statistics. Among these are&nbsp;<strong>sum, mean, median, variance, covariance, correlation,</strong>&nbsp;etc.</p>\n\n\n\n<p>We will now learn how each of these can be applied on DataFrame objects.</p>\n\n\n\n<h2>.rolling() Function</h2>\n\n\n\n<p>This function can be applied on a series of data. Specify the <strong>window=n</strong> argument and apply the appropriate statistical function on top of it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df.rolling(window=3).mean()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> A           B           C           D\n2000-01-01        NaN         NaN         NaN         NaN\n2000-01-02        NaN         NaN         NaN         NaN\n2000-01-03   0.434553   -0.667940   -1.051718   -0.826452\n2000-01-04   0.628267   -0.047040   -0.287467   -0.161110\n2000-01-05   0.398233    0.003517    0.099126   -0.405565\n2000-01-06   0.641798    0.656184   -0.322728    0.428015\n2000-01-07   0.188403    0.010913   -0.708645    0.160932\n2000-01-08   0.188043   -0.253039   -0.818125   -0.108485\n2000-01-09   0.682819   -0.606846   -0.178411   -0.404127\n2000-01-10   0.688583    0.127786    0.513832   -1.067156</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Since the window size is 3, for first two elements there are nulls and from third the value will be the average of the&nbsp;<strong>n</strong>,&nbsp;<strong>n-1</strong>&nbsp;and&nbsp;<strong>n-2</strong>&nbsp;elements. Thus we can also apply various functions as mentioned above.</p>\n\n\n\n<h2>.expanding() Function</h2>\n\n\n\n<p>This function can be applied on a series of data. Specify the <strong>min_periods=n</strong> argument and apply the appropriate statistical function on top of it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df.expanding(min_periods=3).mean()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  A           B           C           D\n2000-01-01        NaN         NaN         NaN         NaN\n2000-01-02        NaN         NaN         NaN         NaN\n2000-01-03   0.434553   -0.667940   -1.051718   -0.826452\n2000-01-04   0.743328   -0.198015   -0.852462   -0.262547\n2000-01-05   0.614776   -0.205649   -0.583641   -0.303254\n2000-01-06   0.538175   -0.005878   -0.687223   -0.199219\n2000-01-07   0.505503   -0.108475   -0.790826   -0.081056\n2000-01-08   0.454751   -0.223420   -0.671572   -0.230215\n2000-01-09   0.586390   -0.206201   -0.517619   -0.267521\n2000-01-10   0.560427   -0.037597   -0.399429   -0.376886\n﻿</code></pre>\n\n\n\n<h2>.ewm() Function</h2>\n\n\n\n<p><strong>ewm</strong> is applied on a series of data. Specify any of the com, span, <strong>halflife</strong> argument and apply the appropriate statistical function on top of it. It assigns the weights exponentially.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df.ewm(com=0.5).mean()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  A           B           C           D\n2000-01-01   1.088512   -0.650942   -2.547450   -0.566858\n2000-01-02   0.865131   -0.453626   -1.137961    0.058747\n2000-01-03  -0.132245   -0.807671   -0.308308   -1.491002\n2000-01-04   1.084036    0.555444   -0.272119    0.480111\n2000-01-05   0.425682    0.025511    0.239162   -0.153290\n2000-01-06   0.245094    0.671373   -0.725025    0.163310\n2000-01-07   0.288030   -0.259337   -1.183515    0.473191\n2000-01-08   0.162317   -0.771884   -0.285564   -0.692001\n2000-01-09   1.147156   -0.302900    0.380851   -0.607976\n2000-01-10   0.600216    0.885614    0.569808   -1.110113</code></pre>\n\n\n\n<p>Window functions are majorly used in finding the trends within the data graphically by smoothing the curve. If there is lot of variation in the everyday data and a lot of data points are available, then taking the samples and plotting is one method and applying the window computations and plotting the graph on the results is another method. By these methods, we can smooth the curve or the trend.</p>\n","protected":false},"excerpt":{"rendered":"<p>For working on numerical data, Pandas provide few variants like rolling, expanding and exponentially moving weights for window statistics. Among these are&nbsp;sum, mean, median, variance, covariance, correlation,&nbsp;etc. We will now learn how each of these can be applied on DataFrame objects. .rolling() Function This function can be applied on a series of data. Specify the window=n argument [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2689"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2689"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2689/revisions"}],"predecessor-version":[{"id":3072,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2689/revisions/3072"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2689"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2689"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2689"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2690,"date":"2020-07-24T05:55:25","date_gmt":"2020-07-24T05:55:25","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1828"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"aggregations","status":"publish","type":"post","link":"https://python3.foobrdigital.com/aggregations/","title":{"rendered":"Aggregations"},"content":{"rendered":"\n<p>Once the rolling, expanding and&nbsp;<strong>ewm</strong>&nbsp;objects are created, several methods are available to perform aggregations on data.</p>\n\n\n\n<h2>Applying Aggregations on DataFrame</h2>\n\n\n\n<p>Let us create a DataFrame and apply aggregations on it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\n\nprint df\nr = df.rolling(window=3,min_periods=1)\nprint r</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    A           B           C           D\n2000-01-01   1.088512   -0.650942   -2.547450   -0.566858\n2000-01-02   0.790670   -0.387854   -0.668132    0.267283\n2000-01-03  -0.575523   -0.965025    0.060427   -2.179780\n2000-01-04   1.669653    1.211759   -0.254695    1.429166\n2000-01-05   0.100568   -0.236184    0.491646   -0.466081\n2000-01-06   0.155172    0.992975   -1.205134    0.320958\n2000-01-07   0.309468   -0.724053   -1.412446    0.627919\n2000-01-08   0.099489   -1.028040    0.163206   -1.274331\n2000-01-09   1.639500   -0.068443    0.714008   -0.565969\n2000-01-10   0.326761    1.479841    0.664282   -1.361169\n\nRolling &#91;window=3,min_periods=1,center=False,axis=0]    </code></pre>\n\n\n\n<p>We can aggregate by passing a function to the entire DataFrame, or select a column via the standard&nbsp;<strong>get item</strong>&nbsp;method.</p>\n\n\n\n<h3>Apply Aggregation on a Whole Dataframe</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df\nr = df.rolling(window=3,min_periods=1)\nprint r.aggregate(np.sum)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    A           B           C           D\n2000-01-01   1.088512   -0.650942   -2.547450   -0.566858\n2000-01-02   1.879182   -1.038796   -3.215581   -0.299575\n2000-01-03   1.303660   -2.003821   -3.155154   -2.479355\n2000-01-04   1.884801   -0.141119   -0.862400   -0.483331\n2000-01-05   1.194699    0.010551    0.297378   -1.216695\n2000-01-06   1.925393    1.968551   -0.968183    1.284044\n2000-01-07   0.565208    0.032738   -2.125934    0.482797\n2000-01-08   0.564129   -0.759118   -2.454374   -0.325454\n2000-01-09   2.048458   -1.820537   -0.535232   -1.212381\n2000-01-10   2.065750    0.383357    1.541496   -3.201469\n\n                    A           B           C           D\n2000-01-01   1.088512   -0.650942   -2.547450   -0.566858\n2000-01-02   1.879182   -1.038796   -3.215581   -0.299575\n2000-01-03   1.303660   -2.003821   -3.155154   -2.479355\n2000-01-04   1.884801   -0.141119   -0.862400   -0.483331\n2000-01-05   1.194699    0.010551    0.297378   -1.216695\n2000-01-06   1.925393    1.968551   -0.968183    1.284044\n2000-01-07   0.565208    0.032738   -2.125934    0.482797\n2000-01-08   0.564129   -0.759118   -2.454374   -0.325454\n2000-01-09   2.048458   -1.820537   -0.535232   -1.212381\n2000-01-10   2.065750    0.383357    1.541496   -3.201469</code></pre>\n\n\n\n<h3>Apply Aggregation on a Single Column of a Dataframe</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df\nr = df.rolling(window=3,min_periods=1)\nprint r&#91;'A'].aggregate(np.sum)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>            A           B           C           D\n2000-01-01   1.088512   -0.650942   -2.547450   -0.566858\n2000-01-02   1.879182   -1.038796   -3.215581   -0.299575\n2000-01-03   1.303660   -2.003821   -3.155154   -2.479355\n2000-01-04   1.884801   -0.141119   -0.862400   -0.483331\n2000-01-05   1.194699    0.010551    0.297378   -1.216695\n2000-01-06   1.925393    1.968551   -0.968183    1.284044\n2000-01-07   0.565208    0.032738   -2.125934    0.482797\n2000-01-08   0.564129   -0.759118   -2.454374   -0.325454\n2000-01-09   2.048458   -1.820537   -0.535232   -1.212381\n2000-01-10   2.065750    0.383357    1.541496   -3.201469\n2000-01-01   1.088512\n2000-01-02   1.879182\n2000-01-03   1.303660\n2000-01-04   1.884801\n2000-01-05   1.194699\n2000-01-06   1.925393\n2000-01-07   0.565208\n2000-01-08   0.564129\n2000-01-09   2.048458\n2000-01-10   2.065750\nFreq: D, Name: A, dtype: float64</code></pre>\n\n\n\n<h3>Apply Aggregation on Multiple Columns of a DataFrame</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df\nr = df.rolling(window=3,min_periods=1)\nprint r&#91;&#91;'A','B']].aggregate(np.sum)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A           B           C           D\n2000-01-01   1.088512   -0.650942   -2.547450   -0.566858\n2000-01-02   1.879182   -1.038796   -3.215581   -0.299575\n2000-01-03   1.303660   -2.003821   -3.155154   -2.479355\n2000-01-04   1.884801   -0.141119   -0.862400   -0.483331\n2000-01-05   1.194699    0.010551    0.297378   -1.216695\n2000-01-06   1.925393    1.968551   -0.968183    1.284044\n2000-01-07   0.565208    0.032738   -2.125934    0.482797\n2000-01-08   0.564129   -0.759118   -2.454374   -0.325454\n2000-01-09   2.048458   -1.820537   -0.535232   -1.212381\n2000-01-10   2.065750    0.383357    1.541496   -3.201469\n                    A           B\n2000-01-01   1.088512   -0.650942\n2000-01-02   1.879182   -1.038796\n2000-01-03   1.303660   -2.003821\n2000-01-04   1.884801   -0.141119\n2000-01-05   1.194699    0.010551\n2000-01-06   1.925393    1.968551\n2000-01-07   0.565208    0.032738\n2000-01-08   0.564129   -0.759118\n2000-01-09   2.048458   -1.820537\n2000-01-10   2.065750    0.383357\n﻿</code></pre>\n\n\n\n<h3>Apply Multiple Functions on a Single Column of a DataFrame</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df\nr = df.rolling(window=3,min_periods=1)\nprint r&#91;'A'].aggregate(&#91;np.sum,np.mean])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     A           B           C           D\n2000-01-01   1.088512   -0.650942   -2.547450   -0.566858\n2000-01-02   1.879182   -1.038796   -3.215581   -0.299575\n2000-01-03   1.303660   -2.003821   -3.155154   -2.479355\n2000-01-04   1.884801   -0.141119   -0.862400   -0.483331\n2000-01-05   1.194699    0.010551    0.297378   -1.216695\n2000-01-06   1.925393    1.968551   -0.968183    1.284044\n2000-01-07   0.565208    0.032738   -2.125934    0.482797\n2000-01-08   0.564129   -0.759118   -2.454374   -0.325454\n2000-01-09   2.048458   -1.820537   -0.535232   -1.212381\n2000-01-10   2.065750    0.383357    1.541496   -3.201469\n                  sum       mean\n2000-01-01   1.088512   1.088512\n2000-01-02   1.879182   0.939591\n2000-01-03   1.303660   0.434553\n2000-01-04   1.884801   0.628267\n2000-01-05   1.194699   0.398233\n2000-01-06   1.925393   0.641798\n2000-01-07   0.565208   0.188403\n2000-01-08   0.564129   0.188043\n2000-01-09   2.048458   0.682819\n2000-01-10   2.065750   0.688583\n﻿</code></pre>\n\n\n\n<h3>Apply Multiple Functions on Multiple Columns of a DataFrame</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10, 4),\n   index = pd.date_range('1/1/2000', periods=10),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df\nr = df.rolling(window=3,min_periods=1)\nprint r&#91;&#91;'A','B']].aggregate(&#91;np.sum,np.mean])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      A           B           C           D\n2000-01-01   1.088512   -0.650942   -2.547450   -0.566858\n2000-01-02   1.879182   -1.038796   -3.215581   -0.299575\n2000-01-03   1.303660   -2.003821   -3.155154   -2.479355\n2000-01-04   1.884801   -0.141119   -0.862400   -0.483331\n2000-01-05   1.194699    0.010551    0.297378   -1.216695\n2000-01-06   1.925393    1.968551   -0.968183    1.284044\n2000-01-07   0.565208    0.032738   -2.125934    0.482797\n2000-01-08   0.564129   -0.759118   -2.454374   -0.325454\n2000-01-09   2.048458   -1.820537   -0.535232   -1.212381\n2000-01-10   2.065750    0.383357    1.541496   -3.201469\n                    A                      B\n                  sum       mean         sum        mean\n2000-01-01   1.088512   1.088512   -0.650942   -0.650942\n2000-01-02   1.879182   0.939591   -1.038796   -0.519398\n2000-01-03   1.303660   0.434553   -2.003821   -0.667940\n2000-01-04   1.884801   0.628267   -0.141119   -0.047040\n2000-01-05   1.194699   0.398233    0.010551    0.003517\n2000-01-06   1.925393   0.641798    1.968551    0.656184\n2000-01-07   0.565208   0.188403    0.032738    0.010913\n2000-01-08   0.564129   0.188043   -0.759118   -0.253039\n2000-01-09   2.048458   0.682819   -1.820537   -0.606846\n2000-01-10   2.065750   0.688583    0.383357    0.127786</code></pre>\n\n\n\n<h3>Apply Different Functions to Different Columns of a Dataframe</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \ndf = pd.DataFrame(np.random.randn(3, 4),\n   index = pd.date_range('1/1/2000', periods=3),\n   columns = &#91;'A', 'B', 'C', 'D'])\nprint df\nr = df.rolling(window=3,min_periods=1)\nprint r.aggregate({'A' : np.sum,'B' : np.mean})</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>           A          B          C         D\n2000-01-01  -1.575749  -1.018105   0.317797  0.545081\n2000-01-02  -0.164917  -1.361068   0.258240  1.113091\n2000-01-03   1.258111   1.037941  -0.047487  0.867371\n                    A          B\n2000-01-01  -1.575749  -1.018105\n2000-01-02  -1.740666  -1.189587\n2000-01-03  -0.482555  -0.447078</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Once the rolling, expanding and&nbsp;ewm&nbsp;objects are created, several methods are available to perform aggregations on data. Applying Aggregations on DataFrame Let us create a DataFrame and apply aggregations on it. Its output is as follows − We can aggregate by passing a function to the entire DataFrame, or select a column via the standard&nbsp;get item&nbsp;method. Apply Aggregation [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2690"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2690"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2690/revisions"}],"predecessor-version":[{"id":3044,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2690/revisions/3044"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2690"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2690"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2690"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2691,"date":"2020-07-24T06:01:18","date_gmt":"2020-07-24T06:01:18","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1830"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"missing-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/missing-data/","title":{"rendered":"Missing Data"},"content":{"rendered":"\n<p>Missing data is always a problem in real life scenarios. Areas like machine learning and data mining face severe issues in the accuracy of their model predictions because of poor quality of data caused by missing values. In these areas, missing value treatment is a major point of focus to make their models more accurate and valid.</p>\n\n\n\n<h2>When and Why Is Data Missed?</h2>\n\n\n\n<p>Let us consider an online survey for a product. Many a times, people do not share all the information related to them. Few people share their experience, but not how long they are using the product; few people share how long they are using the product, their experience but not their contact information. Thus, in some or the other way a part of data is always missing, and this is very common in real time.</p>\n\n\n\n<p>Let us now see how we can handle missing values (say NA or NaN) using Pandas.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5, 3), index=&#91;'a', 'c', 'e', 'f',\n'h'],columns=&#91;'one', 'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> one        two      three\na   0.077988   0.476149   0.965836\nb        NaN        NaN        NaN\nc  -0.390208  -0.551605  -2.301950\nd        NaN        NaN        NaN\ne  -2.000303  -0.788201   1.510072\nf  -0.930230  -0.670473   1.146615\ng        NaN        NaN        NaN\nh   0.085100   0.532791   0.887415</code></pre>\n\n\n\n<p>Using reindexing, we have created a DataFrame with missing values. In the output,&nbsp;<strong>NaN</strong>&nbsp;means&nbsp;<strong>Not a Number.</strong></p>\n\n\n\n<h3>Check for Missing Values</h3>\n\n\n\n<p>To make detecting missing values easier (and across different array dtypes), Pandas provides the&nbsp;<strong>isnull()</strong>&nbsp;and&nbsp;<strong>notnull()</strong>&nbsp;functions, which are also methods on Series and DataFrame objects −</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n \ndf = pd.DataFrame(np.random.randn(5, 3), index=&#91;'a', 'c', 'e', 'f',\n'h'],columns=&#91;'one', 'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n\nprint df&#91;'one'].isnull()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a  False\nb  True\nc  False\nd  True\ne  False\nf  False\ng  True\nh  False\nName: one, dtype: bool</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5, 3), index=&#91;'a', 'c', 'e', 'f',\n'h'],columns=&#91;'one', 'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n\nprint df&#91;'one'].notnull()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a  True\nb  False\nc  True\nd  False\ne  True\nf  True\ng  False\nh  True\nName: one, dtype: bool</code></pre>\n\n\n\n<h3>Calculations with Missing Data</h3>\n\n\n\n<ul><li>When summing data, NA will be treated as Zero</li><li>If the data are all NA, then the result will be NA</li></ul>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5, 3), index=&#91;'a', 'c', 'e', 'f',\n'h'],columns=&#91;'one', 'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n\nprint df&#91;'one'].sum()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2.02357685917</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(index=&#91;0,1,2,3,4,5],columns=&#91;'one','two'])\nprint df&#91;'one'].sum()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>nan</code></pre>\n\n\n\n<h2>Cleaning / Filling Missing Data</h2>\n\n\n\n<p>Pandas provides various methods for cleaning the missing values. The fillna function can “fill in” NA values with non-null data in a couple of ways, which we have illustrated in the following sections.</p>\n\n\n\n<h2>Replace NaN with a Scalar Value</h2>\n\n\n\n<p>The following program shows how you can replace &#8220;NaN&#8221; with &#8220;0&#8221;.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(3, 3), index=&#91;'a', 'c', 'e'],columns=&#91;'one',\n'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c'])\n\nprint df\nprint (\"NaN replaced with '0':\")\nprint df.fillna(0)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     one        two     three\na  -0.576991  -0.741695  0.553172\nb        NaN        NaN       NaN\nc   0.744328  -1.735166  1.749580\n\nNaN replaced with '0':\n         one        two     three\na  -0.576991  -0.741695  0.553172\nb   0.000000   0.000000  0.000000\nc   0.744328  -1.735166  1.749580</code></pre>\n\n\n\n<p>Here, we are filling with value zero; instead we can also fill with any other value.</p>\n\n\n\n<h2>Fill NA Forward and Backward</h2>\n\n\n\n<p>Using the concepts of filling discussed in the ReIndexing Chapter we will fill the missing values.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Method &amp; Action</th></tr><tr><td>1</td><td><strong>pad/fill</strong>Fill methods Forward</td></tr><tr><td>2</td><td><strong>bfill/backfill</strong>Fill methods Backward</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5, 3), index=&#91;'a', 'c', 'e', 'f',\n'h'],columns=&#91;'one', 'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n\nprint df.fillna(method='pad')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  one        two      three\na   0.077988   0.476149   0.965836\nb   0.077988   0.476149   0.965836\nc  -0.390208  -0.551605  -2.301950\nd  -0.390208  -0.551605  -2.301950\ne  -2.000303  -0.788201   1.510072\nf  -0.930230  -0.670473   1.146615\ng  -0.930230  -0.670473   1.146615\nh   0.085100   0.532791   0.887415</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5, 3), index=&#91;'a', 'c', 'e', 'f',\n'h'],columns=&#91;'one', 'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n\nprint df.fillna(method='backfill')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>         one        two      three\na   0.077988   0.476149   0.965836\nb  -0.390208  -0.551605  -2.301950\nc  -0.390208  -0.551605  -2.301950\nd  -2.000303  -0.788201   1.510072\ne  -2.000303  -0.788201   1.510072\nf  -0.930230  -0.670473   1.146615\ng   0.085100   0.532791   0.887415\nh   0.085100   0.532791   0.887415\n﻿</code></pre>\n\n\n\n<h2>Drop Missing Values</h2>\n\n\n\n<p>If you want to simply exclude the missing values, then use the&nbsp;<strong>dropna</strong>&nbsp;function along with the&nbsp;<strong>axis</strong>&nbsp;argument. By default, axis=0, i.e., along row, which means that if any value within a row is NA then the whole row is excluded.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5, 3), index=&#91;'a', 'c', 'e', 'f',\n'h'],columns=&#91;'one', 'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\nprint df.dropna()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     one        two      three\na   0.077988   0.476149   0.965836\nc  -0.390208  -0.551605  -2.301950\ne  -2.000303  -0.788201   1.510072\nf  -0.930230  -0.670473   1.146615\nh   0.085100   0.532791   0.887415</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(5, 3), index=&#91;'a', 'c', 'e', 'f',\n'h'],columns=&#91;'one', 'two', 'three'])\n\ndf = df.reindex(&#91;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\nprint df.dropna(axis=1)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Empty DataFrame\nColumns: &#91; ]\nIndex: &#91;a, b, c, d, e, f, g, h]\n﻿</code></pre>\n\n\n\n<h2>Replace Missing (or) Generic Values</h2>\n\n\n\n<p>Many times, we have to replace a generic value with some specific value. We can achieve this by applying the replace method.</p>\n\n\n\n<p>Replacing NA with a scalar value is equivalent behavior of the&nbsp;<strong>fillna()</strong>&nbsp;function.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'one':&#91;10,20,30,40,50,2000], 'two':&#91;1000,0,30,40,50,60]})\n\nprint df.replace({1000:10,2000:60})</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   one  two\n0   10   10\n1   20    0\n2   30   30\n3   40   40\n4   50   50\n5   60   60</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'one':&#91;10,20,30,40,50,2000], 'two':&#91;1000,0,30,40,50,60]})\nprint df.replace({1000:10,2000:60})</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   one  two\n0   10   10\n1   20    0\n2   30   30\n3   40   40\n4   50   50\n5   60   60</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Missing data is always a problem in real life scenarios. Areas like machine learning and data mining face severe issues in the accuracy of their model predictions because of poor quality of data caused by missing values. In these areas, missing value treatment is a major point of focus to make their models more accurate [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2691"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2691"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2691/revisions"}],"predecessor-version":[{"id":3062,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2691/revisions/3062"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2691"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2691"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2691"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2692,"date":"2020-07-24T06:07:49","date_gmt":"2020-07-24T06:07:49","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1832"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"groupby","status":"publish","type":"post","link":"https://python3.foobrdigital.com/groupby/","title":{"rendered":"GroupBy"},"content":{"rendered":"\n<p>Any&nbsp;<strong>groupby</strong>&nbsp;operation involves one of the following operations on the original object. They are −</p>\n\n\n\n<ul><li><strong>Splitting</strong>&nbsp;the Object</li><li><strong>Applying</strong>&nbsp;a function</li><li><strong>Combining</strong>&nbsp;the results</li></ul>\n\n\n\n<p>In many situations, we split the data into sets and we apply some functionality on each subset. In the apply functionality, we can perform the following operations −</p>\n\n\n\n<ul><li><strong>Aggregation</strong>&nbsp;− computing a summary statistic</li><li><strong>Transformation</strong>&nbsp;− perform some group-specific operation</li><li><strong>Filtration</strong>&nbsp;− discarding the data with some condition</li></ul>\n\n\n\n<p>Let us now create a DataFrame object and perform all the operations on it −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#import the pandas library\nimport pandas as pd\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  Points   Rank     Team   Year\n0      876      1   Riders   2014\n1      789      2   Riders   2015\n2      863      2   Devils   2014\n3      673      3   Devils   2015\n4      741      3    Kings   2014\n5      812      4    kings   2015\n6      756      1    Kings   2016\n7      788      1    Kings   2017\n8      694      2   Riders   2016\n9      701      4   Royals   2014\n10     804      1   Royals   2015\n11     690      2   Riders   2017</code></pre>\n\n\n\n<h2>Split Data into Groups</h2>\n\n\n\n<p>Pandas object can be split into any of their objects. There are multiple ways to split an object like −</p>\n\n\n\n<ul><li>obj.groupby(&#8216;key&#8217;)</li><li>obj.groupby([&#8216;key1&#8242;,&#8217;key2&#8217;])</li><li>obj.groupby(key,axis=1)</li></ul>\n\n\n\n<p>Let us now see how the grouping objects can be applied to the DataFrame object</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\nprint df.groupby('Team')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;pandas.core.groupby.DataFrameGroupBy object at 0x7fa46a977e50></code></pre>\n\n\n\n<h2>View Groups</h2>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\nprint df.groupby('Team').groups</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{'Kings': Int64Index(&#91;4, 6, 7],      dtype='int64'),\n'Devils': Int64Index(&#91;2, 3],         dtype='int64'),\n'Riders': Int64Index(&#91;0, 1, 8, 11],  dtype='int64'),\n'Royals': Int64Index(&#91;9, 10],        dtype='int64'),\n'kings' : Int64Index(&#91;5],            dtype='int64')}\n﻿</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Group by</strong> with multiple columns −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\nprint df.groupby(&#91;'Team','Year']).groups</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{('Kings', 2014): Int64Index(&#91;4], dtype='int64'),\n ('Royals', 2014): Int64Index(&#91;9], dtype='int64'),\n ('Riders', 2014): Int64Index(&#91;0], dtype='int64'),\n ('Riders', 2015): Int64Index(&#91;1], dtype='int64'),\n ('Kings', 2016): Int64Index(&#91;6], dtype='int64'),\n ('Riders', 2016): Int64Index(&#91;8], dtype='int64'),\n ('Riders', 2017): Int64Index(&#91;11], dtype='int64'),\n ('Devils', 2014): Int64Index(&#91;2], dtype='int64'),\n ('Devils', 2015): Int64Index(&#91;3], dtype='int64'),\n ('kings', 2015): Int64Index(&#91;5], dtype='int64'),\n ('Royals', 2015): Int64Index(&#91;10], dtype='int64'),\n ('Kings', 2017): Int64Index(&#91;7], dtype='int64')}\n﻿</code></pre>\n\n\n\n<h2>Iterating through Groups</h2>\n\n\n\n<p>With the <strong>groupby</strong> object in hand, we can iterate through the object similar to itertools.obj.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\ngrouped = df.groupby('Year')\n\nfor name,group in grouped:\n   print name\n   print group</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2014\n   Points  Rank     Team   Year\n0     876     1   Riders   2014\n2     863     2   Devils   2014\n4     741     3   Kings    2014\n9     701     4   Royals   2014\n\n2015\n   Points  Rank     Team   Year\n1     789     2   Riders   2015\n3     673     3   Devils   2015\n5     812     4    kings   2015\n10    804     1   Royals   2015\n\n2016\n   Points  Rank     Team   Year\n6     756     1    Kings   2016\n8     694     2   Riders   2016\n\n2017\n   Points  Rank    Team   Year\n7     788     1   Kings   2017\n11    690     2  Riders   2017</code></pre>\n\n\n\n<p>By default, the&nbsp;<strong>groupby</strong>&nbsp;object has the same label name as the group name.</p>\n\n\n\n<h2>Select a Group</h2>\n\n\n\n<p>Using the <strong>get_group()</strong> method, we can select a single group.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\ngrouped = df.groupby('Year')\nprint grouped.get_group(2014)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   Points  Rank     Team    Year\n0     876     1   Riders    2014\n2     863     2   Devils    2014\n4     741     3   Kings     2014\n9     701     4   Royals    2014\n﻿</code></pre>\n\n\n\n<h2>Aggregations</h2>\n\n\n\n<p>An aggregated function returns a single aggregated value for each group. Once the&nbsp;<strong>group by</strong>&nbsp;object is created, several aggregation operations can be performed on the grouped data.</p>\n\n\n\n<p>An obvious one is aggregation via the aggregate or equivalent <strong>agg</strong> method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\nimport numpy as np\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\ngrouped = df.groupby('Year')\nprint grouped&#91;'Points'].agg(np.mean)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Year\n2014   795.25\n2015   769.50\n2016   725.00\n2017   739.00\nName: Points, dtype: float64</code></pre>\n\n\n\n<p>Another way to see the size of each group is by applying the size() function −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\nAttribute Access in Python Pandas\ngrouped = df.groupby('Team')\nprint grouped.agg(np.size)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      Points   Rank   Year\nTeam\nDevils        2      2      2\nKings         3      3      3\nRiders        4      4      4\nRoyals        2      2      2\nkings         1      1      1</code></pre>\n\n\n\n<h3>Applying Multiple Aggregation Functions at Once</h3>\n\n\n\n<p>With grouped Series, you can also pass a <strong>list</strong> or <strong>dict of functions</strong> to do aggregation with, and generate DataFrame as output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\nimport numpy as np\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\ngrouped = df.groupby('Team')\nprint grouped&#91;'Points'].agg(&#91;np.sum, np.mean, np.std])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\nimport numpy as np\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\ngrouped = df.groupby('Team')\nscore = lambda x: (x - x.mean()) / x.std()*10\nprint grouped.transform(score)</code></pre>\n\n\n\n<h2>Transformations</h2>\n\n\n\n<p>Transformation on a group or a column returns an object that is indexed the same size of that is being grouped. Thus, the transform should return a result that is the same size as that of a group chunk.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\nimport numpy as np\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\ngrouped = df.groupby('Team')\nscore = lambda x: (x - x.mean()) / x.std()*10\nprint grouped.transform(score)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  Points        Rank        Year\n0   12.843272  -15.000000  -11.618950\n1   3.020286     5.000000   -3.872983\n2   7.071068    -7.071068   -7.071068\n3  -7.071068     7.071068    7.071068\n4  -8.608621    11.547005  -10.910895\n5        NaN          NaN         NaN\n6  -2.360428    -5.773503    2.182179\n7  10.969049    -5.773503    8.728716\n8  -7.705963     5.000000    3.872983\n9  -7.071068     7.071068   -7.071068\n10  7.071068    -7.071068    7.071068\n11 -8.157595     5.000000   11.618950\n﻿</code></pre>\n\n\n\n<h2>Filtration</h2>\n\n\n\n<p>Filtration filters the data on a defined criteria and returns the subset of data. The <strong>filter()</strong> function is used to filter the data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nipl_data = {'Team': &#91;'Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': &#91;1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': &#91;2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':&#91;876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\nprint df.groupby('Team').filter(lambda x: len(x) >= 3)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    Points  Rank     Team   Year\n0      876     1   Riders   2014\n1      789     2   Riders   2015\n4      741     3   Kings    2014\n6      756     1   Kings    2016\n7      788     1   Kings    2017\n8      694     2   Riders   2016\n11     690     2   Riders   2017\n﻿</code></pre>\n\n\n\n<p>In the above filter condition, we are asking to return the teams which have participated three or more times in IPL.</p>\n","protected":false},"excerpt":{"rendered":"<p>Any&nbsp;groupby&nbsp;operation involves one of the following operations on the original object. They are − Splitting&nbsp;the Object Applying&nbsp;a function Combining&nbsp;the results In many situations, we split the data into sets and we apply some functionality on each subset. In the apply functionality, we can perform the following operations − Aggregation&nbsp;− computing a summary statistic Transformation&nbsp;− perform [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2692"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2692"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2692/revisions"}],"predecessor-version":[{"id":3055,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2692/revisions/3055"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2692"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2692"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2692"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2693,"date":"2020-07-24T06:11:40","date_gmt":"2020-07-24T06:11:40","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1834"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"merging-joining","status":"publish","type":"post","link":"https://python3.foobrdigital.com/merging-joining/","title":{"rendered":"Merging/Joining"},"content":{"rendered":"\n<p>Pandas has full-featured, high performance in-memory join operations idiomatically very similar to relational databases like SQL.</p>\n\n\n\n<p>Pandas provides a single function, <strong>merge</strong>, as the entry point for all standard database join operations between DataFrame objects −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pd.merge(left, right, how='inner', on=None, left_on=None, right_on=None,\nleft_index=False, right_index=False, sort=True)</code></pre>\n\n\n\n<p>Here, we have used the following parameters −</p>\n\n\n\n<ul><li><strong>left</strong>&nbsp;− A DataFrame object.</li><li><strong>right</strong>&nbsp;− Another DataFrame object.</li><li><strong>on</strong>&nbsp;− Columns (names) to join on. Must be found in both the left and right DataFrame objects.</li><li><strong>left_on</strong>&nbsp;− Columns from the left DataFrame to use as keys. Can either be column names or arrays with length equal to the length of the DataFrame.</li><li><strong>right_on</strong>&nbsp;− Columns from the right DataFrame to use as keys. Can either be column names or arrays with length equal to the length of the DataFrame.</li><li><strong>left_index</strong>&nbsp;− If&nbsp;<strong>True,</strong>&nbsp;use the index (row labels) from the left DataFrame as its join key(s). In case of a DataFrame with a MultiIndex (hierarchical), the number of levels must match the number of join keys from the right DataFrame.</li><li><strong>right_index</strong>&nbsp;− Same usage as&nbsp;<strong>left_index</strong>&nbsp;for the right DataFrame.</li><li><strong>how</strong>&nbsp;− One of &#8216;left&#8217;, &#8216;right&#8217;, &#8216;outer&#8217;, &#8216;inner&#8217;. Defaults to inner. Each method has been described below.</li><li><strong>sort</strong>&nbsp;− Sort the result DataFrame by the join keys in lexicographical order. Defaults to True, setting to False will improve the performance substantially in many cases.</li></ul>\n\n\n\n<p>Let us now create two different DataFrames and perform the merging operations on it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># import the pandas library\nimport pandas as pd\nleft = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5']})\nright = pd.DataFrame(\n   {'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5']})\nprint left\nprint right</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  Name  id   subject_id\n0   Alex   1         sub1\n1    Amy   2         sub2\n2  Allen   3         sub4\n3  Alice   4         sub6\n4  Ayoung  5         sub5\n\n    Name  id   subject_id\n0  Billy   1         sub2\n1  Brian   2         sub4\n2  Bran    3         sub3\n3  Bryce   4         sub6\n4  Betty   5         sub5</code></pre>\n\n\n\n<h3>Merge Two DataFrames on a Key</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nleft = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5']})\nright = pd.DataFrame({\n\t'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5']})\nprint pd.merge(left,right,on='id')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Name_x   id  subject_id_x   Name_y   subject_id_y\n0  Alex      1          sub1    Billy           sub2\n1  Amy       2          sub2    Brian           sub4\n2  Allen     3          sub4     Bran           sub3\n3  Alice     4          sub6    Bryce           sub6\n4  Ayoung    5          sub5    Betty           sub5\n﻿</code></pre>\n\n\n\n<h3>Merge Two DataFrames on Multiple Keys</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nleft = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5']})\nright = pd.DataFrame({\n\t'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5']})\nprint pd.merge(left,right,on=&#91;'id','subject_id'])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   Name_x   id   subject_id   Name_y\n0    Alice    4         sub6    Bryce\n1   Ayoung    5         sub5    Betty\n﻿</code></pre>\n\n\n\n<h2>Merge Using &#8216;how&#8217; Argument</h2>\n\n\n\n<p>The&nbsp;<strong>how</strong>&nbsp;argument to merge specifies how to determine which keys are to be included in the resulting table. If a key combination does not appear in either the left or the right tables, the values in the joined table will be NA.</p>\n\n\n\n<p>Here is a summary of the&nbsp;<strong>how</strong>&nbsp;options and their SQL equivalent names −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Merge Method</th><th>SQL Equivalent</th><th>Description</th></tr><tr><td>left</td><td>LEFT OUTER JOIN</td><td>Use keys from left object</td></tr><tr><td>right</td><td>RIGHT OUTER JOIN</td><td>Use keys from right object</td></tr><tr><td>outer</td><td>FULL OUTER JOIN</td><td>Use union of keys</td></tr><tr><td>inner</td><td>INNER JOIN</td><td>Use intersection of keys</td></tr></tbody></table></figure>\n\n\n\n<h3>Left Join</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nleft = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5']})\nright = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5']})\nprint pd.merge(left, right, on='subject_id', how='left')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Name_x   id_x   subject_id   Name_y   id_y\n0     Alex      1         sub1      NaN    NaN\n1      Amy      2         sub2    Billy    1.0\n2    Allen      3         sub4    Brian    2.0\n3    Alice      4         sub6    Bryce    4.0\n4   Ayoung      5         sub5    Betty    5.0</code></pre>\n\n\n\n<h3>Right Join</h3>\n\n\n\n<p><a rel=\"noreferrer noopener\" href=\"http://tpcg.io/j3Hfa8\" target=\"_blank\">Live Demo</a></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nleft = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5']})\nright = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5']})\nprint pd.merge(left, right, on='subject_id', how='right')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   Name_x  id_x   subject_id   Name_y   id_y\n0      Amy   2.0         sub2    Billy      1\n1    Allen   3.0         sub4    Brian      2\n2    Alice   4.0         sub6    Bryce      4\n3   Ayoung   5.0         sub5    Betty      5\n4      NaN   NaN         sub3     Bran      3</code></pre>\n\n\n\n<h3>Outer Join</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nleft = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5']})\nright = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5']})\nprint pd.merge(left, right, how='outer', on='subject_id')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   Name_x  id_x   subject_id   Name_y   id_y\n0     Alex   1.0         sub1      NaN    NaN\n1      Amy   2.0         sub2    Billy    1.0\n2    Allen   3.0         sub4    Brian    2.0\n3    Alice   4.0         sub6    Bryce    4.0\n4   Ayoung   5.0         sub5    Betty    5.0\n5      NaN   NaN         sub3     Bran    3.0</code></pre>\n\n\n\n<h3>Inner Join</h3>\n\n\n\n<p>Joining will be performed on index. Join operation honors the object on which it is called. So, <strong>a.join(b)</strong> is not equal to <strong>b.join(a)</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nleft = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5']})\nright = pd.DataFrame({\n   'id':&#91;1,2,3,4,5],\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5']})\nprint pd.merge(left, right, on='subject_id', how='inner')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    Name_x   id_x   subject_id   Name_y   id_y\n0      Amy      2         sub2    Billy      1\n1    Allen      3         sub4    Brian      2\n2    Alice      4         sub6    Bryce      4\n3   Ayoung      5         sub5    Betty      5</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Pandas has full-featured, high performance in-memory join operations idiomatically very similar to relational databases like SQL. Pandas provides a single function, merge, as the entry point for all standard database join operations between DataFrame objects − Here, we have used the following parameters − left&nbsp;− A DataFrame object. right&nbsp;− Another DataFrame object. on&nbsp;− Columns (names) to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2693"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2693"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2693/revisions"}],"predecessor-version":[{"id":3061,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2693/revisions/3061"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2693"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2693"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2693"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2694,"date":"2020-07-24T06:19:12","date_gmt":"2020-07-24T06:19:12","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1836"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"concatenation","status":"publish","type":"post","link":"https://python3.foobrdigital.com/concatenation/","title":{"rendered":"Concatenation"},"content":{"rendered":"\n<p>Pandas provides various facilities for easily combining together <strong>Series, DataFrame</strong>, and <strong>Panel</strong> objects.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> pd.concat(objs,axis=0,join='outer',join_axes=None,\nignore_index=False)</code></pre>\n\n\n\n<ul><li><strong>objs</strong>&nbsp;− This is a sequence or mapping of Series, DataFrame, or Panel objects.</li><li><strong>axis</strong>&nbsp;− {0, 1, &#8230;}, default 0. This is the axis to concatenate along.</li><li><strong>join</strong>&nbsp;− {‘inner’, ‘outer’}, default ‘outer’. How to handle indexes on other axis(es). Outer for union and inner for intersection.</li><li><strong>ignore_index</strong>&nbsp;− boolean, default False. If True, do not use the index values on the concatenation axis. The resulting axis will be labeled 0, &#8230;, n &#8211; 1.</li><li><strong>join_axes</strong>&nbsp;− This is the list of Index objects. Specific indexes to use for the other (n-1) axes instead of performing inner/outer set logic.</li></ul>\n\n\n\n<h2>Concatenating Objects</h2>\n\n\n\n<p>The <strong>concat</strong> function does all of the heavy lifting of performing concatenation operations along an axis. Let us create different objects and do concatenation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\none = pd.DataFrame({\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':&#91;98,90,87,69,78]},\n   index=&#91;1,2,3,4,5])\n\ntwo = pd.DataFrame({\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':&#91;89,80,79,97,88]},\n   index=&#91;1,2,3,4,5])\nprint pd.concat(&#91;one,two])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Marks_scored     Name   subject_id\n1             98     Alex         sub1\n2             90      Amy         sub2\n3             87    Allen         sub4\n4             69    Alice         sub6\n5             78   Ayoung         sub5\n1             89    Billy         sub2\n2             80    Brian         sub4\n3             79     Bran         sub3\n4             97    Bryce         sub6\n5             88    Betty         sub5</code></pre>\n\n\n\n<p>Suppose we wanted to associate specific keys with each of the pieces of the chopped up DataFrame. We can do this by using the <strong>keys</strong> argument −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\none = pd.DataFrame({\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':&#91;98,90,87,69,78]},\n   index=&#91;1,2,3,4,5])\n\ntwo = pd.DataFrame({\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':&#91;89,80,79,97,88]},\n   index=&#91;1,2,3,4,5])\nprint pd.concat(&#91;one,two],keys=&#91;'x','y'])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x  1  98    Alex    sub1\n   2  90    Amy     sub2\n   3  87    Allen   sub4\n   4  69    Alice   sub6\n   5  78    Ayoung  sub5\ny  1  89    Billy   sub2\n   2  80    Brian   sub4\n   3  79    Bran    sub3\n   4  97    Bryce   sub6\n   5  88    Betty   sub5\n﻿</code></pre>\n\n\n\n<p>The index of the resultant is duplicated; each index is repeated.</p>\n\n\n\n<p>If the resultant object has to follow its own indexing, set <strong>ignore_index</strong> to <strong>True</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\none = pd.DataFrame({\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':&#91;98,90,87,69,78]},\n   index=&#91;1,2,3,4,5])\n\ntwo = pd.DataFrame({\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':&#91;89,80,79,97,88]},\n   index=&#91;1,2,3,4,5])\nprint pd.concat(&#91;one,two],keys=&#91;'x','y'],ignore_index=True)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  Marks_scored     Name    subject_id\n0             98     Alex          sub1\n1             90      Amy          sub2\n2             87    Allen          sub4\n3             69    Alice          sub6\n4             78   Ayoung          sub5\n5             89    Billy          sub2\n6             80    Brian          sub4\n7             79     Bran          sub3\n8             97    Bryce          sub6\n9             88    Betty          sub5</code></pre>\n\n\n\n<p>Observe, the index changes completely and the Keys are also overridden.</p>\n\n\n\n<p>If two objects need to be added along <strong>axis=1</strong>, then the new columns will be appended.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\none = pd.DataFrame({\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':&#91;98,90,87,69,78]},\n   index=&#91;1,2,3,4,5])\n\ntwo = pd.DataFrame({\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':&#91;89,80,79,97,88]},\n   index=&#91;1,2,3,4,5])\nprint pd.concat(&#91;one,two],axis=1)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    Marks_scored    Name  subject_id   Marks_scored    Name   subject_id\n1           98      Alex      sub1         89         Billy         sub2\n2           90       Amy      sub2         80         Brian         sub4\n3           87     Allen      sub4         79          Bran         sub3\n4           69     Alice      sub6         97         Bryce         sub6\n5           78    Ayoung      sub5         88         Betty         sub5</code></pre>\n\n\n\n<h3>Concatenating Using append</h3>\n\n\n\n<p>A useful shortcut to concat are the append instance methods on Series and DataFrame. These methods actually predated concat. They concatenate along <strong>axis=0</strong>, namely the index −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\none = pd.DataFrame({\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':&#91;98,90,87,69,78]},\n   index=&#91;1,2,3,4,5])\n\ntwo = pd.DataFrame({\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':&#91;89,80,79,97,88]},\n   index=&#91;1,2,3,4,5])\nprint one.append(two)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Marks_scored    Name  subject_id\n1           98      Alex      sub1\n2           90       Amy      sub2\n3           87     Allen      sub4\n4           69     Alice      sub6\n5           78    Ayoung      sub5\n1           89     Billy      sub2\n2           80     Brian      sub4\n3           79      Bran      sub3\n4           97     Bryce      sub6\n5           88     Betty      sub5</code></pre>\n\n\n\n<p>The <strong>append</strong> function can take multiple objects as well −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\none = pd.DataFrame({\n   'Name': &#91;'Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':&#91;'sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':&#91;98,90,87,69,78]},\n   index=&#91;1,2,3,4,5])\n\ntwo = pd.DataFrame({\n   'Name': &#91;'Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':&#91;'sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':&#91;89,80,79,97,88]},\n   index=&#91;1,2,3,4,5])\nprint one.append(&#91;two,one,two])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Marks_scored   Name    subject_id\n1           98     Alex          sub1\n2           90      Amy          sub2\n3           87    Allen          sub4\n4           69    Alice          sub6\n5           78   Ayoung          sub5\n1           89    Billy          sub2\n2           80    Brian          sub4\n3           79     Bran          sub3\n4           97    Bryce          sub6\n5           88    Betty          sub5\n1           98     Alex          sub1\n2           90      Amy          sub2\n3           87    Allen          sub4\n4           69    Alice          sub6\n5           78   Ayoung          sub5\n1           89    Billy          sub2\n2           80    Brian          sub4\n3           79     Bran          sub3\n4           97    Bryce          sub6\n5           88    Betty          sub5</code></pre>\n\n\n\n<h2>Time Series</h2>\n\n\n\n<p>Pandas provide a robust tool for working time with Time series data, especially in the financial sector. While working with time series data, we frequently come across the following −</p>\n\n\n\n<ul><li>Generating sequence of time</li><li>Convert the time series to different frequencies</li></ul>\n\n\n\n<p>Pandas provides a relatively compact and self-contained set of tools for performing the above tasks.</p>\n\n\n\n<h3>Get Current Time</h3>\n\n\n\n<p><strong>datetime.now()</strong> gives you the current date and time.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.datetime.now()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2017-05-11 06:10:13.393147\n﻿</code></pre>\n\n\n\n<h3>Create a TimeStamp</h3>\n\n\n\n<p>Time-stamped data is the most basic type of timeseries data that associates values with points in time. For pandas objects, it means using the points in time. Let’s take an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.Timestamp('2017-03-01')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2017-03-01 00:00:00</code></pre>\n\n\n\n<p>It is also possible to convert integer or float epoch times. The default unit for these is nanoseconds (since these are how Timestamps are stored). However, often epochs are stored in another unit which can be specified. Let’s take another example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.Timestamp(1587687255,unit='s')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2020-04-24 00:14:15</code></pre>\n\n\n\n<h3>Create a Range of Time</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.date_range(\"11:00\", \"13:30\", freq=\"30min\").time</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;datetime.time(11, 0) datetime.time(11, 30) datetime.time(12, 0)\ndatetime.time(12, 30) datetime.time(13, 0) datetime.time(13, 30)]\n﻿</code></pre>\n\n\n\n<h3>Change the Frequency of Time</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.date_range(\"11:00\", \"13:30\", freq=\"H\").time</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;datetime.time(11, 0) datetime.time(12, 0) datetime.time(13, 0)]</code></pre>\n\n\n\n<h3>Converting to Timestamps</h3>\n\n\n\n<p>To convert a Series or list-like object of date-like objects, for example strings, epochs, or a mixture, you can use the <strong>to_datetime</strong> function. When passed, this returns a Series (with the same index), while a <strong>list-like</strong> is converted to a <strong>DatetimeIndex</strong>. Take a look at the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.to_datetime(pd.Series(&#91;'Jul 31, 2009','2010-01-10', None]))</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  2009-07-31\n1  2010-01-10\n2         NaT\ndtype: datetime64&#91;ns]</code></pre>\n\n\n\n<p><strong>NaT</strong>&nbsp;means&nbsp;<strong>Not a Time</strong>&nbsp;(equivalent to NaN)</p>\n\n\n\n<p>Let’s take another example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.to_datetime(&#91;'2005/11/23', '2010.12.31', None])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DatetimeIndex(&#91;'2005-11-23', '2010-12-31', 'NaT'], dtype='datetime64&#91;ns]', freq=None)</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Pandas provides various facilities for easily combining together Series, DataFrame, and Panel objects. objs&nbsp;− This is a sequence or mapping of Series, DataFrame, or Panel objects. axis&nbsp;− {0, 1, &#8230;}, default 0. This is the axis to concatenate along. join&nbsp;− {‘inner’, ‘outer’}, default ‘outer’. How to handle indexes on other axis(es). Outer for union and inner for intersection. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2694"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2694"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2694/revisions"}],"predecessor-version":[{"id":3049,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2694/revisions/3049"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2694"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2694"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2694"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2695,"date":"2020-07-24T06:22:05","date_gmt":"2020-07-24T06:22:05","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1838"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"date-functionality","status":"publish","type":"post","link":"https://python3.foobrdigital.com/date-functionality/","title":{"rendered":"Date Functionality"},"content":{"rendered":"\n<p>Extending the Time series, Date functionalities play major role in financial data analysis. While working with Date data, we will frequently come across the following −</p>\n\n\n\n<ul><li>Generating sequence of dates</li><li>Convert the date series to different frequencies</li></ul>\n\n\n\n<h2>Create a Range of Dates</h2>\n\n\n\n<p>Using the <strong>date.range()</strong> function by specifying the periods and the frequency, we can create the date series. By default, the frequency of range is Days.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.date_range('1/1/2011', periods=5)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DatetimeIndex(&#91;'2011-01-01', '2011-01-02', '2011-01-03', '2011-01-04', '2011-01-05'],\n   dtype='datetime64&#91;ns]', freq='D')\n﻿</code></pre>\n\n\n\n<h2>Change the Date Frequency</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.date_range('1/1/2011', periods=5,freq='M')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DatetimeIndex(&#91;'2011-01-31', '2011-02-28', '2011-03-31', '2011-04-30', '2011-05-31'],\n   dtype='datetime64&#91;ns]', freq='M')\n﻿</code></pre>\n\n\n\n<h2>bdate_range</h2>\n\n\n\n<p>bdate_range() stands for business date ranges. Unlike date_range(), it excludes Saturday and Sunday.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.date_range('1/1/2011', periods=5)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DatetimeIndex(&#91;'2011-01-01', '2011-01-02', '2011-01-03', '2011-01-04', '2011-01-05'],\n   dtype='datetime64&#91;ns]', freq='D')\n﻿</code></pre>\n\n\n\n<p>Observe, after 3rd March, the date jumps to 6th march excluding 4th and 5th. Just check your calendar for the days.</p>\n\n\n\n<p>Convenience functions like <strong>date_range</strong> and <strong>bdate_range</strong> utilize a variety of frequency aliases. The default frequency for date_range is a calendar day while the default for bdate_range is a business day.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nstart = pd.datetime(2011, 1, 1)\nend = pd.datetime(2011, 1, 5)\n\nprint pd.date_range(start, end)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DatetimeIndex(&#91;'2011-01-01', '2011-01-02', '2011-01-03', '2011-01-04', '2011-01-05'],\n   dtype='datetime64&#91;ns]', freq='D')</code></pre>\n\n\n\n<h2>Offset Aliases</h2>\n\n\n\n<p>A number of string aliases are given to useful common time series frequencies. We will refer to these aliases as offset aliases.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Alias</th><th>Description</th><th>Alias</th><th>Description</th></tr><tr><td>B</td><td>business day frequency</td><td>BQS</td><td>business quarter start frequency</td></tr><tr><td>D</td><td>calendar day frequency</td><td>A</td><td>annual(Year) end frequency</td></tr><tr><td>W</td><td>weekly frequency</td><td>BA</td><td>business year end frequency</td></tr><tr><td>M</td><td>month end frequency</td><td>BAS</td><td>business year start frequency</td></tr><tr><td>SM</td><td>semi-month end frequency</td><td>BH</td><td>business hour frequency</td></tr><tr><td>BM</td><td>business month end frequency</td><td>H</td><td>hourly frequency</td></tr><tr><td>MS</td><td>month start frequency</td><td>T, min</td><td>minutely frequency</td></tr><tr><td>SMS</td><td>SMS semi month start frequency</td><td>S</td><td>secondly frequency</td></tr><tr><td>BMS</td><td>business month start frequency</td><td>L, ms</td><td>milliseconds</td></tr><tr><td>Q</td><td>quarter end frequency</td><td>U, us</td><td>microseconds</td></tr><tr><td>BQ</td><td>business quarter end frequency</td><td>N</td><td>nanoseconds</td></tr><tr><td>QS</td><td>quarter start frequency</td><td></td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Extending the Time series, Date functionalities play major role in financial data analysis. While working with Date data, we will frequently come across the following − Generating sequence of dates Convert the date series to different frequencies Create a Range of Dates Using the date.range() function by specifying the periods and the frequency, we can create the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2695"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2695"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2695/revisions"}],"predecessor-version":[{"id":3051,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2695/revisions/3051"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2695"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2695"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2695"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2696,"date":"2020-07-24T06:26:10","date_gmt":"2020-07-24T06:26:10","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1840"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"timedelta","status":"publish","type":"post","link":"https://python3.foobrdigital.com/timedelta/","title":{"rendered":"Timedelta"},"content":{"rendered":"\n<p>Timedeltas are differences in times, expressed in difference units, for example, days, hours, minutes, seconds. They can be both positive and negative.</p>\n\n\n\n<p>We can create Timedelta objects using various arguments as shown below −</p>\n\n\n\n<h2>String</h2>\n\n\n\n<p>By passing a string literal, we can create a timedelta object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.Timedelta('2 days 2 hours 15 minutes 30 seconds')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2 days 02:15:30</code></pre>\n\n\n\n<h2>Integer</h2>\n\n\n\n<p>By passing an integer value with the unit, an argument creates a Timedelta object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.Timedelta(6,unit='h')</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 days 06:00:00</code></pre>\n\n\n\n<h2>Data Offsets</h2>\n\n\n\n<p>Data offsets such as &#8211; weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds can also be used in construction.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.Timedelta(days=2)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2 days 00:00:00</code></pre>\n\n\n\n<h2>to_timedelta()</h2>\n\n\n\n<p>Using the top-level <strong>pd.to_timedelta</strong>, you can convert a scalar, array, list, or series from a recognized timedelta format/ value into a Timedelta type. It will construct Series if the input is a Series, a scalar if the input is scalar-like, otherwise will output a <strong>TimedeltaIndex</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.Timedelta(days=2)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2 days 00:00:00</code></pre>\n\n\n\n<h2>Operations</h2>\n\n\n\n<p>You can operate on Series/ DataFrames and construct&nbsp;<strong>timedelta64[ns]</strong>&nbsp;Series through subtraction operations on&nbsp;<strong>datetime64[ns]</strong>&nbsp;Series, or Timestamps.</p>\n\n\n\n<p>Let us now create a DataFrame with Timedelta and datetime objects and perform some arithmetic operations on it −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(pd.date_range('2012-1-1', periods=3, freq='D'))\ntd = pd.Series(&#91; pd.Timedelta(days=i) for i in range(3) ])\ndf = pd.DataFrame(dict(A = s, B = td))\n\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>            A      B\n0  2012-01-01 0 days\n1  2012-01-02 1 days\n2  2012-01-03 2 days</code></pre>\n\n\n\n<h2>Addition Operations</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(pd.date_range('2012-1-1', periods=3, freq='D'))\ntd = pd.Series(&#91; pd.Timedelta(days=i) for i in range(3) ])\ndf = pd.DataFrame(dict(A = s, B = td))\ndf&#91;'C']=df&#91;'A']+df&#91;'B']\n\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>           A      B          C\n0 2012-01-01 0 days 2012-01-01\n1 2012-01-02 1 days 2012-01-03\n2 2012-01-03 2 days 2012-01-05</code></pre>\n\n\n\n<h2>Subtraction Operation</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(pd.date_range('2012-1-1', periods=3, freq='D'))\ntd = pd.Series(&#91; pd.Timedelta(days=i) for i in range(3) ])\ndf = pd.DataFrame(dict(A = s, B = td))\ndf&#91;'C']=df&#91;'A']+df&#91;'B']\ndf&#91;'D']=df&#91;'C']+df&#91;'B']\n\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −.</p>\n","protected":false},"excerpt":{"rendered":"<p>Timedeltas are differences in times, expressed in difference units, for example, days, hours, minutes, seconds. They can be both positive and negative. We can create Timedelta objects using various arguments as shown below − String By passing a string literal, we can create a timedelta object. Its output is as follows − Integer By passing an integer [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2696"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2696"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2696/revisions"}],"predecessor-version":[{"id":3070,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2696/revisions/3070"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2696"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2696"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2696"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2697,"date":"2020-07-24T06:31:25","date_gmt":"2020-07-24T06:31:25","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1842"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"categorical-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/categorical-data/","title":{"rendered":"Categorical Data"},"content":{"rendered":"\n<p>Often in real-time, data includes the text columns, which are repetitive. Features like gender, country, and codes are always repetitive. These are the examples for categorical data.</p>\n\n\n\n<p>Categorical variables can take on only a limited, and usually fixed number of possible values. Besides the fixed length, categorical data might have an order but cannot perform numerical operation. Categorical are a Pandas data type.</p>\n\n\n\n<p>The categorical data type is useful in the following cases −</p>\n\n\n\n<ul><li>A string variable consisting of only a few different values. Converting such a string variable to a categorical variable will save some memory.</li><li>The lexical order of a variable is not the same as the logical order (“one”, “two”, “three”). By converting to a categorical and specifying an order on the categories, sorting and min/max will use the logical order instead of the lexical order.</li><li>As a signal to other python libraries that this column should be treated as a categorical variable (e.g. to use suitable statistical methods or plot types).</li></ul>\n\n\n\n<h2>Object Creation</h2>\n\n\n\n<p>Categorical object can be created in multiple ways. The different ways have been described below −</p>\n\n\n\n<h3>category</h3>\n\n\n\n<p>By specifying the dtype as &#8220;category&#8221; in pandas object creation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;\"a\",\"b\",\"c\",\"a\"], dtype=\"category\")\nprint s</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  a\n1  b\n2  c\n3  a\ndtype: category\nCategories (3, object): &#91;a, b, c]</code></pre>\n\n\n\n<p>The number of elements passed to the series object is four, but the categories are only three. Observe the same in the output Categories.</p>\n\n\n\n<h3>pd.Categorical</h3>\n\n\n\n<p>Using the standard pandas Categorical constructor, we can create a category object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pandas.Categorical(values, categories, ordered)</code></pre>\n\n\n\n<p>Let’s take an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ncat = pd.Categorical(&#91;'a', 'b', 'c', 'a', 'b', 'c'])\nprint cat</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;a, b, c, a, b, c]\nCategories (3, object): &#91;a, b, c]\n﻿</code></pre>\n\n\n\n<p>Let’s have another example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ncat = cat=pd.Categorical(&#91;'a','b','c','a','b','c','d'], &#91;'c', 'b', 'a'])\nprint cat</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;a, b, c, a, b, c, NaN]\nCategories (3, object): &#91;c, b, a]\n﻿</code></pre>\n\n\n\n<p>Here, the second argument signifies the categories. Thus, any value which is not present in the categories will be treated as&nbsp;<strong>NaN</strong>.</p>\n\n\n\n<p>Now, take a look at the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ncat = cat=pd.Categorical(&#91;'a','b','c','a','b','c','d'], &#91;'c', 'b', 'a'],ordered=True)\nprint cat</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;a, b, c, a, b, c, NaN]\nCategories (3, object): &#91;c &lt; b &lt; a]</code></pre>\n\n\n\n<p>Logically, the order means that,&nbsp;<strong>a</strong>&nbsp;is greater than&nbsp;<strong>b</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;is greater than&nbsp;<strong>c</strong>.</p>\n\n\n\n<h3>Description</h3>\n\n\n\n<p>Using the <strong>.describe()</strong> command on the categorical data, we get similar output to a <strong>Series</strong> or <strong>DataFrame</strong> of the <strong>type</strong> string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ncat = pd.Categorical(&#91;\"a\", \"c\", \"c\", np.nan], categories=&#91;\"b\", \"a\", \"c\"])\ndf = pd.DataFrame({\"cat\":cat, \"s\":&#91;\"a\", \"c\", \"c\", np.nan]})\n\nprint df.describe()\nprint df&#91;\"cat\"].describe()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     cat s\ncount    3 3\nunique   2 2\ntop      c c\nfreq     2 2\ncount     3\nunique    2\ntop       c\nfreq      2\nName: cat, dtype: object\n﻿</code></pre>\n\n\n\n<h3>Get the Properties of the Category</h3>\n\n\n\n<p><strong>obj.cat.categories</strong> command is used to get the <strong>categories of the object</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Categorical(&#91;\"a\", \"c\", \"c\", np.nan], categories=&#91;\"b\", \"a\", \"c\"])\nprint s.categories</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Index(&#91;u'b', u'a', u'c'], dtype='object')</code></pre>\n\n\n\n<p><strong>obj.ordered</strong> command is used to get the order of the object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ncat = pd.Categorical(&#91;\"a\", \"c\", \"c\", np.nan], categories=&#91;\"b\", \"a\", \"c\"])\nprint cat.ordered</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>False</code></pre>\n\n\n\n<p>The function returned&nbsp;<strong>false</strong>&nbsp;because we haven&#8217;t specified any order.</p>\n\n\n\n<h3>Renaming Categories</h3>\n\n\n\n<p>Renaming categories is done by assigning new values to the <strong>series.cat.categories</strong>series.cat.categories property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;\"a\",\"b\",\"c\",\"a\"], dtype=\"category\")\ns.cat.categories = &#91;\"Group %s\" % g for g in s.cat.categories]\nprint s.cat.categories</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Index(&#91;u'Group a', u'Group b', u'Group c'], dtype='object')</code></pre>\n\n\n\n<p>Initial categories&nbsp;<strong>[a,b,c]</strong>&nbsp;are updated by the&nbsp;<strong>s.cat.categories</strong>&nbsp;property of the object.</p>\n\n\n\n<h3>Appending New Categories</h3>\n\n\n\n<p>Using the Categorical.add.categories() method, new categories can be appended.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;\"a\",\"b\",\"c\",\"a\"], dtype=\"category\")\ns = s.cat.add_categories(&#91;4])\nprint s.cat.categories</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Index(&#91;u'a', u'b', u'c', 4], dtype='object')</code></pre>\n\n\n\n<h3>Removing Categories</h3>\n\n\n\n<p>Using the <strong>Categorical.remove_categories()</strong> method, unwanted categories can be removed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(&#91;\"a\",\"b\",\"c\",\"a\"], dtype=\"category\")\nprint (\"Original object:\")\nprint s\n\nprint (\"After removal:\")\nprint s.cat.remove_categories(\"a\")</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original object:\n0  a\n1  b\n2  c\n3  a\ndtype: category\nCategories (3, object): &#91;a, b, c]\n\nAfter removal:\n0  NaN\n1  b\n2  c\n3  NaN\ndtype: category\nCategories (2, object): &#91;b, c]</code></pre>\n\n\n\n<h3>Comparison of Categorical Data</h3>\n\n\n\n<p>Comparing categorical data with other objects is possible in three cases −</p>\n\n\n\n<ul><li>comparing equality (== and !=) to a list-like object (list, Series, array, &#8230;) of the same length as the categorical data.</li><li>all comparisons (==, !=, &gt;, &gt;=, &lt;, and &lt;=) of categorical data to another categorical Series, when ordered==True and the categories are the same.</li><li>all comparisons of a categorical data to a scalar.</li></ul>\n\n\n\n<p>Take a look at the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ncat = pd.Series(&#91;1,2,3]).astype(\"category\", categories=&#91;1,2,3], ordered=True)\ncat1 = pd.Series(&#91;2,2,2]).astype(\"category\", categories=&#91;1,2,3], ordered=True)\n\nprint cat>cat1</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0  False\n1  False\n2  True\ndtype: bool</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Often in real-time, data includes the text columns, which are repetitive. Features like gender, country, and codes are always repetitive. These are the examples for categorical data. Categorical variables can take on only a limited, and usually fixed number of possible values. Besides the fixed length, categorical data might have an order but cannot perform [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2697"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2697"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2697/revisions"}],"predecessor-version":[{"id":3046,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2697/revisions/3046"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2697"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2697"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2697"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2698,"date":"2020-07-24T06:35:19","date_gmt":"2020-07-24T06:35:19","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1844"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"visualization","status":"publish","type":"post","link":"https://python3.foobrdigital.com/visualization/","title":{"rendered":"Visualization"},"content":{"rendered":"\n<h3>Basic Plotting: plot</h3>\n\n\n\n<p>This functionality on Series and DataFrame is just a simple wrapper around the <strong>matplotlib</strong> <strong>libraries plot()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10,4),index=pd.date_range('1/1/2000',\n   periods=10), columns=list('ABCD'))\n\ndf.plot()</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/basic_plotting.jpg\" alt=\"Basic Plotting\"/></figure>\n\n\n\n<p>If the index consists of dates, it calls&nbsp;<strong>gct().autofmt_xdate()</strong>&nbsp;to format the x-axis as shown in the above illustration.</p>\n\n\n\n<p>We can plot one column versus another using the&nbsp;<strong>x</strong>&nbsp;and&nbsp;<strong>y</strong>&nbsp;keywords.</p>\n\n\n\n<p>Plotting methods allow a handful of plot styles other than the default line plot. These methods can be provided as the kind keyword argument to&nbsp;<strong>plot()</strong>. These include −</p>\n\n\n\n<ul><li>bar or barh for bar plots</li><li>hist for histogram</li><li>box for boxplot</li><li>&#8216;area&#8217; for area plots</li><li>&#8216;scatter&#8217; for scatter plots</li></ul>\n\n\n\n<h2>Bar Plot</h2>\n\n\n\n<p>Let us now see what a Bar Plot is by creating one. A bar plot can be created in the following way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.rand(10,4),columns=&#91;'a','b','c','d')\ndf.plot.bar()</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/bar_plot.jpg\" alt=\"Bar Plot\"/></figure>\n\n\n\n<p>To produce a stacked bar plot, <strong>pass stacked=True</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndf = pd.DataFrame(np.random.rand(10,4),columns=&#91;'a','b','c','d')\ndf.plot.bar(stacked=True)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/stacked_bar_plot.jpg\" alt=\"Stacked Bar Plot\"/></figure>\n\n\n\n<p>To get horizontal bar plots, use the <strong>barh</strong> method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.rand(10,4),columns=&#91;'a','b','c','d')\n\ndf.plot.barh(stacked=True)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/horizontal_bar_plot.jpg\" alt=\"Horizontal Bar Plot\"/></figure>\n\n\n\n<h2>Histograms</h2>\n\n\n\n<p>Histograms can be plotted using the <strong>plot.hist()</strong> method. We can specify number of bins.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':np.random.randn(1000)+1,'b':np.random.randn(1000),'c':\nnp.random.randn(1000) - 1}, columns=&#91;'a', 'b', 'c'])\n\ndf.plot.hist(bins=20)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/histograms_using_plot_hist.jpg\" alt=\"Histograms using plot.hist() \"/></figure>\n\n\n\n<p>To plot different histograms for each column, use the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf=pd.DataFrame({'a':np.random.randn(1000)+1,'b':np.random.randn(1000),'c':\nnp.random.randn(1000) - 1}, columns=&#91;'a', 'b', 'c'])\n\ndf.diff.hist(bins=20)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/histograms_for_column.jpg\" alt=\"Histograms for Column \"/></figure>\n\n\n\n<h2>Box Plots</h2>\n\n\n\n<p>Boxplot can be drawn calling&nbsp;<strong>Series.box.plot()</strong>&nbsp;and&nbsp;<strong>DataFrame.box.plot()</strong>, or&nbsp;<strong>DataFrame.boxplot()</strong>&nbsp;to visualize the distribution of values within each column.</p>\n\n\n\n<p>For instance, here is a boxplot representing five trials of 10 observations of a uniform random variable on [0,1).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.rand(10, 5), columns=&#91;'A', 'B', 'C', 'D', 'E'])\ndf.plot.box()</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/box_plot.jpg\" alt=\"Box Plots\"/></figure>\n\n\n\n<h2>Area Plot</h2>\n\n\n\n<p>Area plot can be created using the <strong>Series.plot.area()</strong> or the <strong>DataFrame.plot.area()</strong> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.rand(10, 4), columns=&#91;'a', 'b', 'c', 'd'])\ndf.plot.area()</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/area_plot.jpg\" alt=\"Area Plot\"/></figure>\n\n\n\n<h2>Scatter Plot</h2>\n\n\n\n<p>Scatter plot can be created using the <strong>DataFrame.plot.scatter()</strong> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.rand(50, 4), columns=&#91;'a', 'b', 'c', 'd'])\ndf.plot.scatter(x='a', y='b')</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/scatter_plot.jpg\" alt=\"Scatter Plot\"/></figure>\n\n\n\n<h2>Pie Chart</h2>\n\n\n\n<p>Pie chart can be created using the <strong>DataFrame.plot.pie()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(3 * np.random.rand(4), index=&#91;'a', 'b', 'c', 'd'], columns=&#91;'x'])\ndf.plot.pie(subplots=True)</code></pre>\n\n\n\n<p>Its&nbsp;<strong>output</strong>&nbsp;is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/python_pandas/images/pie_chart.jpg\" alt=\"Pie Chart\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Basic Plotting: plot This functionality on Series and DataFrame is just a simple wrapper around the matplotlib libraries plot() method. Its&nbsp;output&nbsp;is as follows − If the index consists of dates, it calls&nbsp;gct().autofmt_xdate()&nbsp;to format the x-axis as shown in the above illustration. We can plot one column versus another using the&nbsp;x&nbsp;and&nbsp;y&nbsp;keywords. Plotting methods allow a handful of plot styles [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2698"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2698"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2698/revisions"}],"predecessor-version":[{"id":3071,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2698/revisions/3071"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2698"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2698"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2698"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2699,"date":"2020-07-24T06:39:14","date_gmt":"2020-07-24T06:39:14","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1846"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"io-tools","status":"publish","type":"post","link":"https://python3.foobrdigital.com/io-tools/","title":{"rendered":"IO Tools"},"content":{"rendered":"\n<p>The&nbsp;<strong>Pandas I/O API</strong>&nbsp;is a set of top level reader functions accessed like&nbsp;<strong>pd.read_csv()</strong>&nbsp;that generally return a Pandas object.</p>\n\n\n\n<p>The two workhorse functions for reading text files (or the flat files) are <strong>read_csv()</strong> and <strong>read_table()</strong>. They both use the same parsing code to intelligently convert tabular data into a <strong>DataFrame</strong> object −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pandas.read_csv(filepath_or_buffer, sep=',', delimiter=None, header='infer',\nnames=None, index_col=None, usecols=None\n.</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>pandas.read_csv(filepath_or_buffer, sep='\\t', delimiter=None, header='infer',\nnames=None, index_col=None, usecols=None\n﻿</code></pre>\n\n\n\n<p>Here is how the <strong>csv</strong> file data looks like −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>S.No,Name,Age,City,Salary\n1,Tom,28,Toronto,20000\n2,Lee,32,HongKong,3000\n3,Steven,43,Bay Area,8300\n4,Ram,38,Hyderabad,3900</code></pre>\n\n\n\n<p>Save this data as <strong>temp.csv</strong> and conduct operations on it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>S.No,Name,Age,City,Salary\n1,Tom,28,Toronto,20000\n2,Lee,32,HongKong,3000\n3,Steven,43,Bay Area,8300\n4,Ram,38,Hyderabad,3900</code></pre>\n\n\n\n<p>Save this data as&nbsp;<strong>temp.csv</strong>&nbsp;and conduct operations on it.</p>\n\n\n\n<h2>read.csv</h2>\n\n\n\n<p><strong>read.csv</strong> reads data from the csv files and creates a DataFrame object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ndf=pd.read_csv(\"temp.csv\")\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   S.No     Name   Age       City   Salary\n0     1      Tom    28    Toronto    20000\n1     2      Lee    32   HongKong     3000\n2     3   Steven    43   Bay Area     8300\n3     4      Ram    38  Hyderabad     3900\n﻿</code></pre>\n\n\n\n<h3>custom index</h3>\n\n\n\n<p>This specifies a column in the csv file to customize the index using <strong>index_col.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ndf=pd.read_csv(\"temp.csv\",index_col=&#91;'S.No'])\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>S.No   Name   Age       City   Salary\n1       Tom    28    Toronto    20000\n2       Lee    32   HongKong     3000\n3    Steven    43   Bay Area     8300\n4       Ram    38  Hyderabad     3900\n﻿</code></pre>\n\n\n\n<h3>Converters</h3>\n\n\n\n<p><strong>dtype</strong> of the columns can be passed as a dict.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ndf = pd.read_csv(\"temp.csv\", dtype={'Salary': np.float64})\nprint df.dtypes</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>S.No       int64\nName      object\nAge        int64\nCity      object\nSalary   float64\ndtype: object</code></pre>\n\n\n\n<p>By default, the&nbsp;<strong>dtype</strong>&nbsp;of the Salary column is&nbsp;<strong>int</strong>, but the result shows it as&nbsp;<strong>float</strong>&nbsp;because we have explicitly casted the type.</p>\n\n\n\n<p>Thus, the data looks like float −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  S.No   Name   Age      City    Salary\n0   1     Tom   28    Toronto   20000.0\n1   2     Lee   32   HongKong    3000.0\n2   3  Steven   43   Bay Area    8300.0\n3   4     Ram   38  Hyderabad    3900.0</code></pre>\n\n\n\n<h3>header_names</h3>\n\n\n\n<p>Specify the names of the header using the names argument.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n \ndf=pd.read_csv(\"temp.csv\", names=&#91;'a', 'b', 'c','d','e'])\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a        b    c           d        e\n0   S.No     Name   Age       City   Salary\n1      1      Tom   28     Toronto    20000\n2      2      Lee   32    HongKong     3000\n3      3   Steven   43    Bay Area     8300\n4      4      Ram   38   Hyderabad     3900</code></pre>\n\n\n\n<p>Observe, the header names are appended with the custom names, but the header in the file has not been eliminated. Now, we use the header argument to remove that.</p>\n\n\n\n<p>If the header is in a row other than the first, pass the row number to header. This will skip the preceding rows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd \n\ndf=pd.read_csv(\"temp.csv\",names=&#91;'a','b','c','d','e'],header=0)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>     a        b    c           d        e\n0  S.No     Name   Age       City   Salary\n1     1      Tom   28     Toronto    20000\n2     2      Lee   32    HongKong     3000\n3     3   Steven   43    Bay Area     8300\n4     4      Ram   38   Hyderabad     3900\n﻿</code></pre>\n\n\n\n<h3>skiprows</h3>\n\n\n\n<p>skiprows skips the number of rows specified.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ndf=pd.read_csv(\"temp.csv\", skiprows=2)\nprint df</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   2      Lee   32    HongKong   3000\n0   3   Steven   43    Bay Area   8300\n1   4      Ram   38   Hyderabad   3900</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The&nbsp;Pandas I/O API&nbsp;is a set of top level reader functions accessed like&nbsp;pd.read_csv()&nbsp;that generally return a Pandas object. The two workhorse functions for reading text files (or the flat files) are read_csv() and read_table(). They both use the same parsing code to intelligently convert tabular data into a DataFrame object − Here is how the csv file data looks like − Save this [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2699"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2699"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2699/revisions"}],"predecessor-version":[{"id":3059,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2699/revisions/3059"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2699"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2699"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2699"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2700,"date":"2020-07-24T06:42:02","date_gmt":"2020-07-24T06:42:02","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1848"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"sparse-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/sparse-data/","title":{"rendered":"Sparse Data"},"content":{"rendered":"\n<p>Sparse objects are “compressed” when any data matching a specific value (NaN / missing value, though any value can be chosen) is omitted. A special SparseIndex object tracks where data has been “sparsified”. This will make much more sense in an example. All of the standard Pandas data structures apply the <strong>to_sparse</strong> method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\nts = pd.Series(np.random.randn(10))\nts&#91;2:-2] = np.nan\nsts = ts.to_sparse()\nprint sts</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   -0.810497\n1   -1.419954\n2         NaN\n3         NaN\n4         NaN\n5         NaN\n6         NaN\n7         NaN\n8    0.439240\n9   -1.095910\ndtype: float64\nBlockIndex\nBlock locations: array(&#91;0, 8], dtype=int32)\nBlock lengths: array(&#91;2, 2], dtype=int32)</code></pre>\n\n\n\n<p>The sparse objects exist for memory efficiency reasons.</p>\n\n\n\n<p>Let us now assume you had a large NA DataFrame and execute the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(10000, 4))\ndf.ix&#91;:9998] = np.nan\nsdf = df.to_sparse()\n\nprint sdf.density</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0.0001</code></pre>\n\n\n\n<p>Any sparse object can be converted back to the standard dense form by calling <strong>to_dense</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\nts = pd.Series(np.random.randn(10))\nts&#91;2:-2] = np.nan\nsts = ts.to_sparse()\nprint sts.to_dense()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   -0.810497\n1   -1.419954\n2         NaN\n3         NaN\n4         NaN\n5         NaN\n6         NaN\n7         NaN\n8    0.439240\n9   -1.095910\ndtype: float64</code></pre>\n\n\n\n<h2>Sparse Dtypes</h2>\n\n\n\n<p>Sparse data should have the same dtype as its dense representation. Currently,&nbsp;<strong>float64, int64</strong>&nbsp;and&nbsp;<strong>booldtypes</strong>&nbsp;are supported. Depending on the original&nbsp;<strong>dtype, fill_value default</strong>&nbsp;changes −</p>\n\n\n\n<ul><li><strong>float64</strong>&nbsp;− np.nan</li><li><strong>int64</strong>&nbsp;− 0</li><li><strong>bool</strong>&nbsp;− False</li></ul>\n\n\n\n<p>Let us execute the following code to understand the same −<a rel=\"noreferrer noopener\" href=\"http://tpcg.io/0ObMVz\" target=\"_blank\">Live Demo</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ns = pd.Series(&#91;1, np.nan, np.nan])\nprint s\n\ns.to_sparse()\nprint s</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0   1.0\n1   NaN\n2   NaN\ndtype: float64\n\n0   1.0\n1   NaN\n2   NaN\ndtype: float64</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Sparse objects are “compressed” when any data matching a specific value (NaN / missing value, though any value can be chosen) is omitted. A special SparseIndex object tracks where data has been “sparsified”. This will make much more sense in an example. All of the standard Pandas data structures apply the to_sparse method − Its output is as follows [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2700"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2700"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2700/revisions"}],"predecessor-version":[{"id":3068,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2700/revisions/3068"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2700"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2700"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2700"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2701,"date":"2020-07-24T06:51:08","date_gmt":"2020-07-24T06:51:08","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1850"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"caveats-gotchas","status":"publish","type":"post","link":"https://python3.foobrdigital.com/caveats-gotchas/","title":{"rendered":"Caveats &#038; Gotchas"},"content":{"rendered":"\n<h2>Using If/Truth Statement with Pandas</h2>\n\n\n\n<p>Pandas follows the numpy convention of raising an error when you try to convert something to a <strong>bool</strong>. This happens in an <strong>if</strong> or <strong>when</strong> using the Boolean operations, and, <strong>or</strong>, or <strong>not</strong>. It is not clear what the result should be. Should it be True because it is not zerolength? False because there are False values? It is unclear, so instead, Pandas raises a <strong>ValueError</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nif pd.Series(&#91;False, True, False]):\n   print 'I am True'</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ValueError: The truth value of a Series is ambiguous. \nUse a.empty, a.bool() a.item(),a.any() or a.all().</code></pre>\n\n\n\n<p>In <strong>if</strong> condition, it is unclear what to do with it. The error is suggestive of whether to use a <strong>None</strong> or <strong>any of those</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nif pd.Series(&#91;False, True, False]).any():\n   print(\"I am any\")</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>I am any</code></pre>\n\n\n\n<p>To evaluate single-element pandas objects in a Boolean context, use the method <strong>.bool()</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nprint pd.Series(&#91;True]).bool()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>True</code></pre>\n\n\n\n<h3>Bitwise Boolean</h3>\n\n\n\n<p>Bitwise Boolean operators like == and <strong>!</strong>= will return a Boolean series, which is almost always what is required anyways.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(range(5))\nprint s==4</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −3</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 False\n1 False\n2 False\n3 False\n4 True\ndtype: bool\n﻿</code></pre>\n\n\n\n<h3>isin Operation</h3>\n\n\n\n<p>This returns a Boolean series showing whether each element in the Series is exactly contained in the passed sequence of values.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\ns = pd.Series(list('abc'))\ns = s.isin(&#91;'a', 'c', 'e'])\nprint s</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 True\n1 False\n2 True\ndtype: bool\n﻿</code></pre>\n\n\n\n<h3>Reindexing vs ix Gotcha</h3>\n\n\n\n<p>Many users will find themselves using the <strong>ix indexing capabilities</strong> as a concise means of selecting data from a Pandas object −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(6, 4), columns=&#91;'one', 'two', 'three',\n'four'],index=list('abcdef'))\n\nprint df\nprint df.ix&#91;&#91;'b', 'c', 'e']]</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a   -1.582025   1.335773   0.961417  -1.272084\nb    1.461512   0.111372  -0.072225   0.553058\nc   -1.240671   0.762185   1.511936  -0.630920\nd   -2.380648  -0.029981   0.196489   0.531714\ne    1.846746   0.148149   0.275398  -0.244559\nf   -1.842662  -0.933195   2.303949   0.677641\n\n          one        two      three       four\nb    1.461512   0.111372  -0.072225   0.553058\nc   -1.240671   0.762185   1.511936  -0.630920\ne    1.846746   0.148149   0.275398  -0.244559</code></pre>\n\n\n\n<p>This is, of course, completely equivalent in this case to using the <strong>reindex</strong> method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(6, 4), columns=&#91;'one', 'two', 'three',\n'four'],index=list('abcdef'))\n\nprint df\nprint df.reindex(&#91;'b', 'c', 'e'])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>          one        two      three       four\na    1.639081   1.369838   0.261287  -1.662003\nb   -0.173359   0.242447  -0.494384   0.346882\nc   -0.106411   0.623568   0.282401  -0.916361\nd   -1.078791  -0.612607  -0.897289  -1.146893\ne    0.465215   1.552873  -1.841959   0.329404\nf    0.966022  -0.190077   1.324247   0.678064\n\n          one        two      three       four\nb   -0.173359   0.242447  -0.494384   0.346882\nc   -0.106411   0.623568   0.282401  -0.916361\ne    0.465215   1.552873  -1.841959   0.329404</code></pre>\n\n\n\n<p>Some might conclude that <strong>ix</strong> and <strong>reindex</strong> are 100% equivalent based on this. This is true except in the case of integer indexing. For example, the above operation can alternatively be expressed as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(6, 4), columns=&#91;'one', 'two', 'three',\n'four'],index=list('abcdef'))\n\nprint df\nprint df.ix&#91;&#91;1, 2, 4]]\nprint df.reindex(&#91;1, 2, 4])</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>        one        two      three       four\na   -1.015695  -0.553847   1.106235  -0.784460\nb   -0.527398  -0.518198  -0.710546  -0.512036\nc   -0.842803  -1.050374   0.787146   0.205147\nd   -1.238016  -0.749554  -0.547470  -0.029045\ne   -0.056788   1.063999  -0.767220   0.212476\nf    1.139714   0.036159   0.201912   0.710119\n\n          one        two      three       four\nb   -0.527398  -0.518198  -0.710546  -0.512036\nc   -0.842803  -1.050374   0.787146   0.205147\ne   -0.056788   1.063999  -0.767220   0.212476\n\n    one  two  three  four\n1   NaN  NaN    NaN   NaN\n2   NaN  NaN    NaN   NaN\n4   NaN  NaN    NaN   NaN\n﻿</code></pre>\n\n\n\n<p>It is important to remember that&nbsp;<strong>reindex is strict label indexing only</strong>. This can lead to some potentially surprising results in pathological cases where an index contains, say, both integers and strings.</p>\n","protected":false},"excerpt":{"rendered":"<p>Using If/Truth Statement with Pandas Pandas follows the numpy convention of raising an error when you try to convert something to a bool. This happens in an if or when using the Boolean operations, and, or, or not. It is not clear what the result should be. Should it be True because it is not zerolength? False because there are False values? [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2701"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2701"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2701/revisions"}],"predecessor-version":[{"id":3047,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2701/revisions/3047"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2701"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2701"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2701"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2702,"date":"2020-07-24T06:55:54","date_gmt":"2020-07-24T06:55:54","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1852"},"modified":"2020-12-16T16:58:14","modified_gmt":"2020-12-16T16:58:14","slug":"comparison-with-sql","status":"publish","type":"post","link":"https://python3.foobrdigital.com/comparison-with-sql/","title":{"rendered":"Comparison with SQL"},"content":{"rendered":"\n<p>Since many potential Pandas users have some familiarity with SQL, this page is meant to provide some examples of how various SQL operations can be performed using pandas.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nurl = 'https://raw.github.com/pandasdev/\npandas/master/pandas/tests/data/tips.csv'\n\ntips=pd.read_csv(url)\nprint tips.head()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   total_bill   tip      sex  smoker  day     time  size\n0        16.99  1.01   Female      No  Sun  Dinner      2\n1        10.34  1.66     Male      No  Sun  Dinner      3\n2        21.01  3.50     Male      No  Sun  Dinner      3\n3        23.68  3.31     Male      No  Sun  Dinner      2\n4        24.59  3.61   Female      No  Sun  Dinner      4\n﻿</code></pre>\n\n\n\n<h2>SELECT</h2>\n\n\n\n<p>In SQL, selection is done using a comma-separated list of columns that you select (or a * to select all columns) −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>SELECT total_bill, tip, smoker, time\nFROM tips\nLIMIT 5;\n﻿</code></pre>\n\n\n\n<p>With Pandas, column selection is done by passing a list of column names to your DataFrame −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tips&#91;&#91;'total_bill', 'tip', 'smoker', 'time']].head(5)\n﻿</code></pre>\n\n\n\n<p>Let’s check the full program −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nurl = 'https://raw.github.com/pandasdev/\npandas/master/pandas/tests/data/tips.csv'\n \ntips=pd.read_csv(url)\nprint tips&#91;&#91;'total_bill', 'tip', 'smoker', 'time']].head(5)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  total_bill   tip  smoker     time\n0       16.99  1.01      No   Dinner\n1       10.34  1.66      No   Dinner\n2       21.01  3.50      No   Dinner\n3       23.68  3.31      No   Dinner\n4       24.59  3.61      No   Dinner\n﻿</code></pre>\n\n\n\n<p>Calling the DataFrame without the list of column names will display all columns (akin to SQL’s *).</p>\n\n\n\n<h2>WHERE</h2>\n\n\n\n<p>Filtering in SQL is done via a WHERE clause.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  SELECT * FROM tips WHERE time = 'Dinner' LIMIT 5;</code></pre>\n\n\n\n<p>DataFrames can be filtered in multiple ways; the most intuitive of which is using Boolean indexing.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  tips&#91;tips&#91;'time'] == 'Dinner'].head(5)</code></pre>\n\n\n\n<p>Let’s check the full program −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nurl = 'https://raw.github.com/pandasdev/\npandas/master/pandas/tests/data/tips.csv'\n\ntips=pd.read_csv(url)\nprint tips&#91;tips&#91;'time'] == 'Dinner'].head(5)</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   total_bill   tip      sex  smoker  day    time  size\n0       16.99  1.01   Female     No   Sun  Dinner    2\n1       10.34  1.66     Male     No   Sun  Dinner    3\n2       21.01  3.50     Male     No   Sun  Dinner    3\n3       23.68  3.31     Male     No   Sun  Dinner    2\n4       24.59  3.61   Female     No   Sun  Dinner    4\n﻿</code></pre>\n\n\n\n<p>The above statement passes a Series of True/False objects to the DataFrame, returning all rows with True.</p>\n\n\n\n<h2>GroupBy</h2>\n\n\n\n<p>This operation fetches the count of records in each group throughout a dataset. For instance, a query fetching us the number of tips left by sex −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>SELECT sex, count(*)\nFROM tips\nGROUP BY sex;</code></pre>\n\n\n\n<p>The Pandas equivalent would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tips.groupby('sex').size()</code></pre>\n\n\n\n<p>Let’s check the full program −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nurl = 'https://raw.github.com/pandasdev/\npandas/master/pandas/tests/data/tips.csv'\n\ntips=pd.read_csv(url)\nprint tips.groupby('sex').size()</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sex\nFemale   87\nMale    157\ndtype: int64</code></pre>\n\n\n\n<h2>Top N rows</h2>\n\n\n\n<p>SQL returns the <strong>top n rows</strong> using <strong>LIMIT</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>SELECT * FROM tips\nLIMIT 5 ;\n﻿</code></pre>\n\n\n\n<p>The Pandas equivalent would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tips.head(5)\n﻿</code></pre>\n\n\n\n<p>Let’s check the full example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\n\nurl = 'https://raw.github.com/pandas-dev/pandas/master/pandas/tests/data/tips.csv'\n\ntips=pd.read_csv(url)\ntips = tips&#91;&#91;'smoker', 'day', 'time']].head(5)\nprint tips</code></pre>\n\n\n\n<p>Its <strong>output</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   smoker   day     time\n0      No   Sun   Dinner\n1      No   Sun   Dinner\n2      No   Sun   Dinner\n3      No   Sun   Dinner\n4      No   Sun   Dinner</code></pre>\n\n\n\n<p>These are the few basic operations we compared are, which we learnt, in the previous chapters of the Pandas Library.</p>\n","protected":false},"excerpt":{"rendered":"<p>Since many potential Pandas users have some familiarity with SQL, this page is meant to provide some examples of how various SQL operations can be performed using pandas. Its output is as follows − SELECT In SQL, selection is done using a comma-separated list of columns that you select (or a * to select all columns) − [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,72,148],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2702"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2702"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2702/revisions"}],"predecessor-version":[{"id":3048,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2702/revisions/3048"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2702"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2702"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2702"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]