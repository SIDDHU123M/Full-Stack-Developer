[{"id":4154,"date":"2020-07-21T07:51:57","date_gmt":"2020-07-21T07:51:57","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=79"},"modified":"2020-07-21T07:51:57","modified_gmt":"2020-07-21T07:51:57","slug":"express-js-tutorial","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-tutorial/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<h1>Getting started with Express</h1>\n\n\n\n<p>Express is the most popular Node.js web app framework. It&#8217;s so popular that it&#8217;s part of the MEAN Stack acronym. MEAN refers to MongoDB, ExpressJS, AngularJS, and Node.js. Express is described as being Sinatra-like, referring to a popular Ruby application framework,&nbsp;and that it isn&#8217;t an opinionated framework, meaning the framework authors&nbsp;don&#8217;t impose their opinions about structuring an application. This means&nbsp;Express&nbsp;is not at all strict about how your code is structured; you just write it the way you think is best.</p>\n\n\n\n<p>You can visit the home page for Express at&nbsp;<a href=\"http://expressjs.com/\">http://expressjs.com/</a>.</p>\n\n\n\n<p>Shortly, we&#8217;ll implement a simple application to calculate express-demo-app numbers using Express, and in later chapters, we&#8217;ll do quite a bit more with Express. We&#8217;ll also explore how to mitigate the performance problems from computationally intensive code we discussed earlier.</p>\n\n\n\n<p>As of writing this book, Express 4.16 is the current version, and Express 5 is in Alpha testing. According to the ExpressJS website, there are very few differences between Express 4 and Express 5.</p>\n\n\n\n<p>Let&#8217;s start by installing the express-generator. While we can just start writing some code, the express-generator provides a blank starting application. We&#8217;ll take that and modify it.</p>\n\n\n\n<p>Install it using the following commands:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"> </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ mkdir express-demo-app\n$ cd express-demo-app\n$ npm install express-generator@4.x </code></pre>\n\n\n\n<p>This is different from the suggested installation method on the Express website, which was to use the&nbsp;<code>-g</code>&nbsp;tag for a global install. We&#8217;re also using an explicit version number to ensure compatibility. As of writing this book,&nbsp;<code>express-generator@5.x</code>&nbsp;does not exist. When it does exist, one should be able to use the 5.x version with the following instructions.</p>\n\n\n\n<p>Earlier, we discussed how many now recommend against installing modules globally. In the Twelve-Factor model, it&#8217;s strongly recommended to not install&nbsp;global dependencies, and that&#8217;s what we&#8217;re doing.</p>\n\n\n\n<p>The result is that an&nbsp;<code>express</code>&nbsp;command is installed in the&nbsp;<code>./node_modules/.bin</code>&nbsp;directory:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ls node_modules/.bin/\nexpress </code></pre>\n\n\n\n<p>Run the&nbsp;<code>express</code>&nbsp;command like so:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./node_modules/.bin/express --help\n\n  Usage: express &#91;options] &#91;dir]\n\n  Options:\n\n    -h, --help          output usage information\n    -V, --version       output the version number\n    -e, --ejs           add ejs engine support (defaults to jade)\n        --hbs           add handlebars engine support\n    -H, --hogan         add hogan.js engine support\n    -c, --css &lt;engine>  add stylesheet &lt;engine> support \n    (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory </code></pre>\n\n\n\n<p>We probably don&#8217;t want to type&nbsp;<code>./node_modules/.bin/express</code>&nbsp;every time we run the&nbsp;<code>express-generator</code>&nbsp;application or, for that matter, any of the other applications that provide command-line utilities.</p>\n\n\n\n<p>Now that you&#8217;ve installed&nbsp;<code>express-generator</code>&nbsp;in the&nbsp;<code>express-demo-app</code>&nbsp;directory, use it to set up the blank framework application:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./node_modules/.bin/express --view=hbs --git . \ndestination is not empty, continue? &#91;y/N] y \n \n   create : . \n   create : ./package.json \n   create : ./app.js \n   create : ./.gitignore \n   create : ./public \n   create : ./routes \n   create : ./routes/index.js \n   create : ./routes/users.js \n   create : ./views \n   create : ./views/index.hbs \n   create : ./views/layout.hbs \n   create : ./views/error.hbs \n   create : ./bin \n   create : ./bin/www \n   create : ./public/javascripts \n   create : ./public/images \n   create : ./public/stylesheets \n   create : ./public/stylesheets/style.css \n \n   install dependencies: \n     $ cd . &amp;&amp; npm install \n \n   run the app: \n     $ DEBUG=express-demo-app:* npm start \n \n    $ npm uninstall express-generator \n    added 84 packages and removed 5 packages in 4.104s</code></pre>\n\n\n\n<p>This created a bunch of files for us, which we&#8217;ll walk through in a minute. The&nbsp;<code>node_modules</code>&nbsp;directory still has the&nbsp;<code>express-generator</code>&nbsp;module, which is now not useful. We can just leave it there and ignore it, or we can add it to the&nbsp;<code>devDependencies</code>&nbsp;of&nbsp;the&nbsp;<code>package.json</code>&nbsp;it generated. Alternatively, we can uninstall it as shown here.</p>\n\n\n\n<p>The next thing to do is run the blank application in the way we&#8217;re told. The command shown,&nbsp;<code>npm start</code>, relies on a section of the supplied&nbsp;<code>package.json</code>&nbsp;file:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>\"scripts\": {{\"{\"}}\n        \"start\": \"node ./bin/www\"\n}, </code></pre>\n\n\n\n<p>The&nbsp;<code>npm</code>&nbsp;tool supports scripts that are ways to automate various tasks. We&#8217;ll use this capability throughout the book to do various things. When the Twelve-Factor Application model suggests automating all your administrative tasks, the&nbsp;<code>npm</code>&nbsp;scripts feature is an excellent mechanism to do so. Most&nbsp;<code>npm</code>&nbsp;scripts are run with the&nbsp;<code>npm run scriptName</code>&nbsp;command, but the&nbsp;<code>start</code>&nbsp;command is explicitly recognized by&nbsp;<code>npm</code>&nbsp;and can be run as shown previously.</p>\n\n\n\n<p>The steps&nbsp;are:</p>\n\n\n\n<ol><li>Install the dependencies&nbsp;<code>npm install</code>.</li><li>Start the application using&nbsp;<code>npm start</code>.</li><li>Optionally modify&nbsp;<code>package.json</code>&nbsp;to always run with debugging.</li></ol>\n\n\n\n<p>To install the dependencies, and run the application, type these commands:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install\n$ DEBUG=express-demo-app:* npm start\n\n> express-demo-app@0.0.0 start /Users/Code/express-demo-app\n> node ./bin/www\n\n express-demo-app:server Listening on port 3000 +0ms</code></pre>\n\n\n\n<p>Setting the&nbsp;<code>DEBUG</code>&nbsp;variable this way turns on some debugging output, which includes this message about listening on port 3000. Otherwise, we aren&#8217;t told this information. This syntax is what&#8217;s used in the Bash shell to run a command with an environment variable.&nbsp; If you get an error try running just &#8220;<code>npm start</code>&#8221; then read the next section.</p>\n\n\n\n<p>We can modify the supplied&nbsp;<code>npm start</code>&nbsp;script to always run the app with debugging enabled. Change the&nbsp;<code>scripts</code>&nbsp;section to the following:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>\"scripts\": {{\"{\"}}\n        \"start\": \"DEBUG=express-demo-app:* node ./bin/www\"\n},</code></pre>\n\n\n\n<p>The output says it is listening on port&nbsp;<code>3000</code>, we direct our browser to<br><code>http://localhost:3000/</code>&nbsp;and you should see the basic &#8220;Welcome to Express&#8221; page.</p>\n","protected":false},"excerpt":{"rendered":"<p>Getting started with Express Express is the most popular Node.js web app framework. It&#8217;s so popular that it&#8217;s part of the MEAN Stack acronym. MEAN refers to MongoDB, ExpressJS, AngularJS, and Node.js. Express is described as being Sinatra-like, referring to a popular Ruby application framework,&nbsp;and that it isn&#8217;t an opinionated framework, meaning the framework authors&nbsp;don&#8217;t [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4154"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4154"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4154/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4154"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4154"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4154"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4155,"date":"2020-07-21T07:53:27","date_gmt":"2020-07-21T07:53:27","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=81"},"modified":"2020-07-21T07:53:27","modified_gmt":"2020-07-21T07:53:27","slug":"install-express-js","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/install-express-js/","title":{"rendered":"Environment"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Environment</h1>\n\n\n\n<p>In this chapter, we will learn how to start developing and using the Express Framework. To start with, you should have the Node and the npm (node package manager) installed. If you don’t already have these, go to the&nbsp;<a href=\"/nodejs/nodejs_environment_setup.htm\">Node setup</a>&nbsp;to install node on your local system. Confirm that node and npm are installed by running the following commands in your terminal.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">node --version\nnpm --version\n</pre>\n\n\n\n<p>You should get an output similar to the following.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>v5.0.0\n3.5.2</code></pre>\n\n\n\n<p>Now that we have Node and&nbsp;<strong>npm</strong>&nbsp;set up, let us understand what&nbsp;<strong>npm</strong>&nbsp;is and how to use it.</p>\n\n\n\n<h2>Node Package Manager(npm)</h2>\n\n\n\n<p>npm is the package manager for node. The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps, mobile apps, robots, routers, and countless other needs of the JavaScript community. npm allows us to access all these packages and install them locally. You can browse through the list of packages available on npm at&nbsp;<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noreferrer noopener\">npmJS</a>.</p>\n\n\n\n<h3>How to use npm?</h3>\n\n\n\n<p>There are two ways to install a package using npm: globally and locally.</p>\n\n\n\n<ul><li><strong>Globally</strong>&nbsp;− This method is generally used to install development tools and CLI based packages. To install a package globally, use the following code.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g &lt;package-name>\n</code></pre>\n\n\n\n<ul><li><strong>Locally</strong>&nbsp;− This method is generally used to install frameworks and libraries. A locally installed package can be used only within the directory it is installed. To install a package locally, use the same command as above without the&nbsp;<strong>-g</strong>&nbsp;flag.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install &lt;package-name>\n</code></pre>\n\n\n\n<p>Whenever we create a project using npm, we need to provide a&nbsp;<strong>package.json</strong>&nbsp;file, which has all the details about our project. npm makes it easy for us to set up this file. Let us set up our development project.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Start your terminal/cmd, create a new folder named hello-world and cd (create directory) into it −</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Now to create the package.json file using npm, use the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm init\n</code></pre>\n\n\n\n<p>Just keep pressing enter, and enter your name at the “author name” field.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Now we have our package.json file set up, we will further install Express. To install Express and add it to our package.json file, use the following command −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save express\n</code></pre>\n\n\n\n<p>To confirm that Express has installed correctly, run the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>ls node_modules #(dir node_modules for windows)\n</code></pre>\n\n\n\n<p><strong>Tip</strong>&nbsp;− The &#8212;<strong>save</strong>&nbsp;flag can be replaced by the&nbsp;<strong>-S</strong>&nbsp;flag. This flag ensures that Express is added as a dependency to our&nbsp;<strong>package.json</strong>&nbsp;file. This has an advantage, the next time we need to install all the dependencies of our project we can just run the command&nbsp;<em>npm install</em>&nbsp;and it will find the dependencies in this file and install them for us.</p>\n\n\n\n<p>This is all we need to start development using the Express framework. To make our development process a lot easier, we will install a tool from npm, nodemon. This tool restarts our server as soon as we make a change in any of our files, otherwise we need to restart the server manually after each file modification. To install nodemon, use the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g nodemon\n</code></pre>\n\n\n\n<p>You can now start working on Express.</p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Environment In this chapter, we will learn how to start developing and using the Express Framework. To start with, you should have the Node and the npm (node package manager) installed. If you don’t already have these, go to the&nbsp;Node setup&nbsp;to install node on your local system. Confirm that node and npm are [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4155"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4155"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4155/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4155"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4155"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4155"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4169,"date":"2020-07-21T07:54:59","date_gmt":"2020-07-21T07:54:59","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=83"},"modified":"2020-07-21T07:54:59","modified_gmt":"2020-07-21T07:54:59","slug":"express-js-request-object","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-request-object/","title":{"rendered":"Request Object"},"content":{"rendered":"\n<p>Express.js Request and Response objects are the parameters of the callback function which is used in Express applications.</p>\n\n\n\n<p>The express.js request object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>app.get('/', function (req, res) {  \n   // --  \n})  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Express.js Request Object Properties</h2>\n\n\n\n<p>The following table specifies some of the properties associated with request object.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Index</th><th>Properties</th><th>Description</th></tr><tr><td>1.</td><td>req.app</td><td>This is used to hold a reference to the instance of the express application that is using the middleware.</td></tr><tr><td>2.</td><td>req.baseurl</td><td>It specifies the URL path on which a router instance was mounted.</td></tr><tr><td>3.</td><td>req.body</td><td>It contains key-value pairs of data submitted in the request body. By default, it is undefined, and is populated when you use body-parsing middleware such as body-parser.</td></tr><tr><td>4.</td><td>req.cookies</td><td>When we use cookie-parser middleware, this property is an object that contains cookies sent by the request.</td></tr><tr><td>5.</td><td>req.fresh</td><td>It specifies that the request is &#8220;fresh.&#8221; it is the opposite of req.stale.</td></tr><tr><td>6.</td><td>req.hostname</td><td>It contains the hostname from the &#8220;host&#8221; http header.</td></tr><tr><td>7.</td><td>req.ip</td><td>It specifies the remote IP address of the request.</td></tr><tr><td>8.</td><td>req.ips</td><td>When the trust proxy setting is true, this property contains an array of IP addresses specified in the ?x-forwarded-for? request header.</td></tr><tr><td>9.</td><td>req.originalurl</td><td>This property is much like req.url; however, it retains the original request URL, allowing you to rewrite req.url freely for internal routing purposes.</td></tr><tr><td>10.</td><td>req.params</td><td>An object containing properties mapped to the named route ?parameters?. For example, if you have the route /user/:name, then the &#8220;name&#8221; property is available as req.params.name. This object defaults to {}.</td></tr><tr><td>11.</td><td>req.path</td><td>It contains the path part of the request URL.</td></tr><tr><td>12.</td><td>req.protocol</td><td>The request protocol string, &#8220;http&#8221; or &#8220;https&#8221; when requested with TLS.</td></tr><tr><td>13.</td><td>req.query</td><td>An object containing a property for each query string parameter in the route.</td></tr><tr><td>14.</td><td>req.route</td><td>The currently-matched route, a string.</td></tr><tr><td>15.</td><td>req.secure</td><td>A Boolean that is true if a TLS connection is established.</td></tr><tr><td>16.</td><td>req.signedcookies</td><td>When using cookie-parser middleware, this property contains signed cookies sent by the request, unsigned and ready for use.</td></tr><tr><td>17.</td><td>req.stale</td><td>It indicates whether the request is &#8220;stale,&#8221; and is the opposite of req.fresh.</td></tr><tr><td>18.</td><td>req.subdomains</td><td>It represents an array of subdomains in the domain name of the request.</td></tr><tr><td>19.</td><td>req.xhr</td><td>A Boolean value that is true if the request&#8217;s &#8220;x-requested-with&#8221; header field is &#8220;xmlhttprequest&#8221;, indicating that the request was issued by a client library such as jQuery</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Request Object Methods</h2>\n\n\n\n<p>Following is a list of some generally used request object methods:</p>\n\n\n\n<h2>req.accepts (types)</h2>\n\n\n\n<p>This method is used to check whether the specified content types are acceptable, based on the request&#8217;s Accept HTTP header field.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>req.accepts('html');  \n//=>?html?  \nreq.accepts('text/html');  \n// => ?text/html?  </code></pre>\n\n\n\n<h2>req.get(field)</h2>\n\n\n\n<p>This method returns the specified HTTP request header field.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>req.get('Content-Type');  \n// => \"text/plain\"  \nreq.get('content-type');  \n// => \"text/plain\"  \nreq.get('Something');  \n// => undefined  </code></pre>\n\n\n\n<h2>req.is(type)</h2>\n\n\n\n<p>This method returns true if the incoming request&#8217;s &#8220;Content-Type&#8221; HTTP header field matches the MIME type specified by the type parameter.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>// With Content-Type: text/html; charset=utf-8  \nreq.is('html');  \nreq.is('text/html');  \nreq.is('text/*');  \n// => true  </code></pre>\n\n\n\n<h2>req.param(name [, defaultValue])</h2>\n\n\n\n<p>This method is used to fetch the value of param name when present.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>// ?name=sasha  \nreq.param('name')  \n// => \"sasha\"  \n// POST name=sasha  \nreq.param('name')  \n// => \"sasha\"  \n// /user/sasha for /user/:name   \nreq.param('name')  \n// => \"sasha\"  </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Express.js Request and Response objects are the parameters of the callback function which is used in Express applications. The express.js request object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. Syntax: Express.js Request Object Properties The following table specifies some of the properties associated [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4169"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4169"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4169/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4169"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4169"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4169"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4170,"date":"2020-07-21T07:57:49","date_gmt":"2020-07-21T07:57:49","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=85"},"modified":"2020-07-21T07:57:49","modified_gmt":"2020-07-21T07:57:49","slug":"express-js-response-object","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-response-object/","title":{"rendered":"Response Object"},"content":{"rendered":"\n<p>The Response object (res) specifies the HTTP response which is sent by an Express app when it gets an HTTP request.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>What it does</h2>\n\n\n\n<ul><li>It sends response back to the client browser.</li><li>It facilitates you to put new cookies value and that will write to the client browser (under cross domain rule).</li><li>Once you res.send() or res.redirect() or res.render(), you cannot do it again, otherwise, there will be uncaught error.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Response Object Properties</h2>\n\n\n\n<p>Let&#8217;s see some properties of response object.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Index</th><th>Properties</th><th>Description</th></tr><tr><td>1.</td><td>res.app</td><td>It holds a reference to the instance of the express application that is using the middleware.</td></tr><tr><td>2.</td><td>res.headersSent</td><td>It is a Boolean property that indicates if the app sent HTTP headers for the response.</td></tr><tr><td>3.</td><td>res.locals</td><td>It specifies an object that contains response local variables scoped to the request</td></tr></tbody></table></figure>\n\n\n\n<h2>Response Object Methods</h2>\n\n\n\n<p>Following are some methods:</p>\n\n\n\n<figure><iframe width=\"300\" height=\"250\"></iframe></figure>\n\n\n\n<h2>Response Append method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.append(field&nbsp;[,&nbsp;value])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method appends the specified value to the HTTP response header field. That means if the specified value is not appropriate then this method redress that.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ol><li>res.append(&#8216;Link&#8217;,&nbsp;[&#8216;&lt;http://localhost/&gt;&#8217;,&nbsp;&#8216;&lt;http://localhost:3000/&gt;&#8217;]);&nbsp;&nbsp;</li><li class=\"\">res.append(&#8216;Warning&#8217;,&nbsp;&#8216;199&nbsp;Miscellaneous&nbsp;warning&#8217;);&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response Attachment method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.attachment([filename])&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method facilitates you to send a file as an attachment in the HTTP response.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ol><li>res.attachment(&#8216;path/to/js_pic.png&#8217;);&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response Cookie method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.cookie(name,&nbsp;value&nbsp;[,&nbsp;options])&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method is used to set a cookie name to value. The value can be a string or object converted to JSON.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.cookie('name', 'Aryan', { domain: '.xyz.com', path: '/admin', secure: true });  \nres.cookie('Section', { Names: &#91;Aryan,Sushil,Priyanka] });  \nres.cookie('Cart', { items: &#91;1,2,3] }, { maxAge: 900000 });  </code></pre>\n\n\n\n<h2>Response ClearCookie method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.clearCookie(name&nbsp;[,&nbsp;options])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>As the name specifies, the clearCookie method is used to clear the cookie specified by name.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<p><strong>To set a cookie</strong></p>\n\n\n\n<ol><li>res.cookie(&#8216;name&#8217;,&nbsp;&#8216;Aryan&#8217;,&nbsp;{&nbsp;path:&nbsp;&#8216;/admin&#8217;&nbsp;});&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>To clear a cookie:</strong></p>\n\n\n\n<ol><li>res.clearCookie(&#8216;name&#8217;,&nbsp;{&nbsp;path:&nbsp;&#8216;/admin&#8217;&nbsp;});&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response Download method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.download(path&nbsp;[,&nbsp;filename]&nbsp;[,&nbsp;fn])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method transfers the file at path as an &#8220;attachment&#8221; and enforces the browser to prompt user for download.<strong>Example:</strong></p>\n\n\n\n<ol><li>res.download(&#8216;/report-12345.pdf&#8217;);&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response End method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.end([data]&nbsp;[,&nbsp;encoding])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method is used to end the response process.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<ol><li>res.end();&nbsp;&nbsp;</li><li class=\"\">res.status(404).end();&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response Format method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.format(object)&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method performs content negotiation on the Accept HTTP header on the request object, when present.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.format({  \n  'text/plain': function(){  \n    res.send('hey');  \n  },  \n 'text/html': function(){  \n    res.send('  \nhey');  \n  },  \n  'application/json': function(){  \n    res.send({ message: 'hey' });  \n  },  \n 'default': function() {  \n    // log the request and respond with 406  \n    res.status(406).send('Not Acceptable');  \n  }  \n});  </code></pre>\n\n\n\n<h2>Response Get method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.get(field)&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method provides HTTP response header specified by field.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<ol><li>res.get(&#8216;Content-Type&#8217;);&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response JSON method:</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.json([body])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method returns the response in JSON format.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<ol><li>res.json(<strong>null</strong>)&nbsp;&nbsp;</li><li class=\"\">res.json({&nbsp;name:&nbsp;&#8216;ajeet&#8217;&nbsp;})&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response JSONP method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.jsonp([body])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method returns response in JSON format with JSONP support.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ol><li>res.jsonp(null)&nbsp;&nbsp;</li><li class=\"\">res.jsonp({&nbsp;name:&nbsp;&#8216;ajeet&#8217;&nbsp;})&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response Links method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.links(links)&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method populates the response?s Link HTTP header field by joining the links provided as properties of the parameter.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.links({  \n  next: 'http://api.rnd.com/users?page=5',  \n  last: 'http://api.rnd.com/users?page=10'  \n}); </code></pre>\n\n\n\n<h2>Response Location method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.location(path)   </code></pre>\n\n\n\n<p>This method is used to set the response location HTTP header field based on the specified path parameter.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ol><li>res.location(&#8216;http://xyz.com&#8217;);&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response Redirect method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.redirect([status,]&nbsp;path)&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method redirects to the URL derived from the specified path, with specified HTTP status</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ol><li>res.redirect(&#8216;http://example.com&#8217;);&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Response Render method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.render(view&nbsp;[,&nbsp;locals]&nbsp;[,&nbsp;callback])&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method renders a view and sends the rendered HTML string to the client.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>// send the rendered view to the client  \nres.render('index');  \n// pass a local variable to the view  \nres.render('user', { name: 'aryan' }, function(err, html) {  \n  // ...  \n});  </code></pre>\n\n\n\n<h2>Response Send method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.send([body])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method is used to send HTTP response.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.send(new Buffer('whoop'));  \nres.send({ some: 'json' });  \nres.send('  \n.....some html  \n');  </code></pre>\n\n\n\n<h2>Response sendFile method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.sendFile(path&nbsp;[,&nbsp;options]&nbsp;[,&nbsp;fn])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method is used to transfer the file at the given path. It sets the Content-Type response HTTP header field based on the filename&#8217;s extension.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.sendFile(fileName, options, function (err) {  \n  // ...  \n}); </code></pre>\n\n\n\n<h2>Response Set method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.set(field&nbsp;[,&nbsp;value])&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method is used to set the response of HTTP header field to value.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.set('Content-Type', 'text/plain');  \n  \nres.set({  \n  'Content-Type': 'text/plain',  \n  'Content-Length': '123',  \n}) </code></pre>\n\n\n\n<h2>Response Status method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.status(code)&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method sets an HTTP status for the response.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.status(403).end();  \nres.status(400).send('Bad Request');  </code></pre>\n\n\n\n<h2>Response Type method</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>res.type(type)&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>This method sets the content-type HTTP header to the MIME type.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>res.type('.html');              // => 'text/html'  \nres.type('html');               // => 'text/html'  \nres.type('json');               // => 'application/json'  \nres.type('application/json');   // => 'application/json'  \nres.type('png');                // => image/png: </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The Response object (res) specifies the HTTP response which is sent by an Express app when it gets an HTTP request. What it does It sends response back to the client browser. It facilitates you to put new cookies value and that will write to the client browser (under cross domain rule). Once you res.send() [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4170"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4170"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4170/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4170"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4170"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4170"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4171,"date":"2020-07-21T07:59:25","date_gmt":"2020-07-21T07:59:25","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=87"},"modified":"2020-07-21T07:59:25","modified_gmt":"2020-07-21T07:59:25","slug":"express-js-get-request","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-get-request/","title":{"rendered":"Hello World"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Hello World</h1>\n\n\n\n<p>We have set up the development, now it is time to start developing our first app using Express. Create a new file called&nbsp;<strong>index.js</strong>&nbsp;and type the following in it.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n   res.send(\"Hello world!\");\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>Save the file, go to your terminal and type the following.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>nodemon index.js</code></pre>\n\n\n\n<p>This will start the server. To test this app, open your browser and go to&nbsp;<strong>http://localhost:3000</strong>&nbsp;and a message will be displayed.</p>\n\n\n\n<h2>How the App Works?</h2>\n\n\n\n<p>The first line imports Express in our file, we have access to it through the variable Express. We use it to create an application and assign it to var app.</p>\n\n\n\n<h3>app.get(route, callback)</h3>\n\n\n\n<p>This function tells what to do when a&nbsp;<strong>get</strong>&nbsp;request at the given route is called. The callback function has 2 parameters,&nbsp;<em><strong>request(req)</strong></em>&nbsp;and&nbsp;<em><strong>response(res)</strong></em>. The request&nbsp;<strong>object(req)</strong>&nbsp;represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, etc. Similarly, the response object represents the HTTP response that the Express app sends when it receives an HTTP request.</p>\n\n\n\n<h3>res.send()</h3>\n\n\n\n<p>This function takes an object as input and it sends this to the requesting client. Here we are sending the string&nbsp;<em>&#8220;Hello World!&#8221;</em>.</p>\n\n\n\n<h3>app.listen(port, [host], [backlog], [callback]])</h3>\n\n\n\n<p>This function binds and listens for connections on the specified host and port. Port is the only required parameter here.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Argument &amp; Description</th></tr><tr><td>1</td><td><strong>port</strong>A port number on which the server should accept incoming requests.</td></tr><tr><td>2</td><td><strong>host</strong>Name of the domain. You need to set it when you deploy your apps to the cloud.</td></tr><tr><td>3</td><td><strong>backlog</strong>The maximum number of queued pending connections. The default is 511.</td></tr><tr><td>4</td><td><strong>callback</strong>An asynchronous function that is called when the server starts listening for requests.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Hello World We have set up the development, now it is time to start developing our first app using Express. Create a new file called&nbsp;index.js&nbsp;and type the following in it. Save the file, go to your terminal and type the following. This will start the server. To test this app, open your browser [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4171"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4171"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4171/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4171"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4171"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4171"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":89,"date":"2020-07-21T08:01:02","date_gmt":"2020-07-21T08:01:02","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=89"},"modified":"2020-07-21T08:01:02","modified_gmt":"2020-07-21T08:01:02","slug":"express-js-post-request","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-post-request/","title":{"rendered":"Project Walkthrough"},"content":{"rendered":"\n<h1>Walking through the default Express application</h1>\n\n\n\n<p>We have a working, blank Express application; let&#8217;s look at what was generated for us. We&#8217;re doing this to familiarize ourselves with Express before diving in to start coding our&nbsp;<code>express-demo-app</code>&nbsp;application.</p>\n\n\n\n<p>Because we used the&nbsp;<code>--view=hbs</code>&nbsp;option, this application is set up to use the&nbsp;<code>Handlebars.js</code>&nbsp;template engine. Handlebars was built on top of Mustache, and was originally designed for use in the browser; for more information see its homepage at&nbsp;<a href=\"http://handlebarsjs.com/\">http://handlebarsjs.com/</a>. The version shown here has been packaged for use with Express, and is documented at&nbsp;<a href=\"https://github.com/pillarjs/hbs\">https://github.com/pillarjs/hbs</a>.&nbsp;</p>\n\n\n\n<p>Generally speaking, a template engine makes it possible to insert data into generated web pages. The ExpressJS Wiki has a list of template engines for Express&nbsp;<a href=\"https://github.com/expressjs/express/wiki#template-engines\">https://github.com/expressjs/express/wiki#template-engines</a>.</p>\n\n\n\n<p>The&nbsp;<code>views</code>&nbsp;directory contains two files,&nbsp;<code>error.hbs</code>&nbsp;and&nbsp;<code>index.hbs</code>. The&nbsp;<code>hbs</code>&nbsp;extension is used for Handlebars files. Another file,&nbsp;<code>layout.hbs</code>, is the default page layout. Handlebars has several ways to configure layout templates and even partials (snippets of code which can be included anywhere).</p>\n\n\n\n<p>The&nbsp;<code>routes</code>&nbsp;directory contains the initial routing setup, that is, the code to handle specific URLs. We&#8217;ll modify these later.</p>\n\n\n\n<p>The&nbsp;<code>public</code>&nbsp;directory will contain assets that the application doesn&#8217;t generate, but are simply sent to the browser. What&#8217;s initially installed is a CSS file,&nbsp;<code>public/stylesheets/style.css</code>.</p>\n\n\n\n<p>The&nbsp;<code>package.json</code>&nbsp;file contains our dependencies and other metadata.</p>\n\n\n\n<p>The&nbsp;<code>bin</code>&nbsp;directory contains the&nbsp;<code>www</code>&nbsp;script that we saw earlier. That&#8217;s a Node.js script, which initializes the HTTPServer objects, starts it listening on a TCP port, and calls the last file we&#8217;ll discuss,&nbsp;<code>app.js</code>. These scripts initialize Express, hook up the routing modules, and do other things.</p>\n\n\n\n<p>There&#8217;s a lot going on in the&nbsp;<code>www</code>&nbsp;and&nbsp;<code>app.js</code>&nbsp;scripts, so let&#8217;s start with the application initialization. Let&#8217;s first take a look at a couple of lines in&nbsp;<code>app.js</code>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\n...\nvar app = express();\n...\nmodule.exports = app; </code></pre>\n\n\n\n<p>This means that&nbsp;<code>app.js</code>&nbsp;is a module that exports the object returned by the&nbsp;<code>express</code>&nbsp;module. It doesn&#8217;t start the HTTP server object, however.</p>\n\n\n\n<p>Now, let&#8217;s turn to the&nbsp;<code>www</code>&nbsp;script. The first thing to see is that it starts with this line:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env node</code></pre>\n\n\n\n<p>This is a Unix/Linux technique to make a command script. It says to run the following as a script using the&nbsp;<code>node</code>&nbsp;command. In other words, we have Node.js code and we&#8217;re instructing the operating system to execute that code using the Node.js runtime:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ls -l bin/www\n-rwx------  1 david  staff  1595 Feb  5  1970 bin/www</code></pre>\n\n\n\n<p>We can also see that the script was made executable by&nbsp;<code>express-generator</code>.&nbsp;</p>\n\n\n\n<p>It calls the&nbsp;<code>app.js</code>&nbsp;module as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var app = require('../app');\n...\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n...\nvar server = http.createServer(app);\n...\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening); </code></pre>\n\n\n\n<p>We see where port&nbsp;<code>3000</code>&nbsp;comes from; it&#8217;s a parameter to the&nbsp;<code>normalizePort</code>&nbsp;function. We also see that setting the&nbsp;<code>PORT</code>&nbsp;environment variable will override the default port&nbsp;<code>3000</code>. And finally, we see that the HTTP Server object is created here, and is told to use the application instance created in&nbsp;<code>app.js</code>. Try running the following command:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ PORT=4242 DEBUG=express-demo-app:* npm start</code></pre>\n\n\n\n<p>The application now tells you that it&#8217;s listening on port&nbsp;<code>4242</code>, where you can ponder the meaning of life.</p>\n\n\n\n<p>The&nbsp;<code>app</code>&nbsp;object is next passed to&nbsp;<code>http.createServer()</code>. A look in the Node.js documentation tells us this function takes a&nbsp;<code>requestListener</code>, which is simply a function that takes the&nbsp;<code>request</code>&nbsp;and&nbsp;<code>response</code>&nbsp;objects we&#8217;ve seen previously. Therefore, the&nbsp;<code>app</code>&nbsp;object is such a function.</p>\n\n\n\n<p>Finally, the&nbsp;<code>www</code>&nbsp;script starts the server listening on the port we specified.</p>\n\n\n\n<p>Let&#8217;s now walk through&nbsp;<code>app.js</code>&nbsp;in more detail:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'hbs');</code></pre>\n\n\n\n<p>This tells Express to look for templates in the&nbsp;<code>views</code>&nbsp;directory and to use the EJS templating engine.</p>\n\n\n\n<p>The&nbsp;<code>app.set</code>&nbsp;function is used for setting application properties. It&#8217;ll be useful to browse the API documentation as we go through (<a href=\"http://expressjs.com/en/4x/api.html\">http://expressjs.com/en/4x/api.html</a>).</p>\n\n\n\n<p>Next is a series of&nbsp;<code>app.use</code>&nbsp;calls:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({{\"{\"}} extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', routes);\napp.use('/users', users); </code></pre>\n\n\n\n<p>The&nbsp;<code>app.use</code>&nbsp;function mounts middleware functions. This is an important piece of Express jargon we will discuss shortly. At the moment, let&#8217;s say that middleware functions are executed during the processing of routes. This means all the features named here are enabled in&nbsp;<code>app.js</code>:</p>\n\n\n\n<ul><li>Logging is enabled using the Morgan request logger. Visit&nbsp;<a href=\"https://www.npmjs.com/package/morgan\">https://www.npmjs.com/package/morgan</a>&nbsp;for its documentation.</li><li>The&nbsp;<code>body-parser</code>&nbsp;module handles parsing HTTP request bodies. Visit&nbsp;<a href=\"https://www.npmjs.com/package/body-parser\">https://www.npmjs.com/package/body-parser</a>&nbsp;for its documentation.</li><li>The&nbsp;<code>cookie-parser</code>&nbsp;module is used to parse HTTP cookies. Visit&nbsp;<a href=\"https://www.npmjs.com/package/cookie-parser\">https://www.npmjs.com/package/cookie-parser</a>&nbsp;for its documentation.</li><li>A static file web server is configured to serve the asset files in the&nbsp;<code>public</code>&nbsp;directory.</li><li>Two router modules,&nbsp;<code>routes</code>&nbsp;and&nbsp;<code>users</code>, to set up which functions handle which URLs.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Walking through the default Express application We have a working, blank Express application; let&#8217;s look at what was generated for us. We&#8217;re doing this to familiarize ourselves with Express before diving in to start coding our&nbsp;express-demo-app&nbsp;application. Because we used the&nbsp;&#8211;view=hbs&nbsp;option, this application is set up to use the&nbsp;Handlebars.js&nbsp;template engine. Handlebars was built on top of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/89"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=89"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/89/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=89"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=89"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=89"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4172,"date":"2020-07-21T08:01:55","date_gmt":"2020-07-21T08:01:55","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=91"},"modified":"2020-07-21T08:01:55","modified_gmt":"2020-07-21T08:01:55","slug":"express-js-routing","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-routing/","title":{"rendered":"Routing"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Routing</h1>\n\n\n\n<p>Web frameworks provide resources such as HTML pages, scripts, images, etc. at different routes.</p>\n\n\n\n<p>The following function is used to define routes in an Express application −</p>\n\n\n\n<h2>app.method(path, handler)</h2>\n\n\n\n<p>This METHOD can be applied to any one of the HTTP verbs – get, set, put, delete. An alternate method also exists, which executes independent of the request type.</p>\n\n\n\n<p>Path is the route at which the request will run.</p>\n\n\n\n<p>Handler is a callback function that executes when a matching request type is found on the relevant route. For example,</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\napp.get('/hello', function(req, res){\n   res.send(\"Hello World!\");\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>If we run our application and go to&nbsp;<strong>localhost:3000/hello</strong>, the server receives a get request at route&nbsp;<strong>&#8220;/hello&#8221;</strong>, our Express app executes the&nbsp;<strong>callback</strong>&nbsp;function attached to this route and sends&nbsp;<strong>&#8220;Hello World!&#8221;</strong>&nbsp;as the response.</p>\n\n\n\n<p>We can also have multiple different methods at the same route. For example,</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\napp.get('/hello', function(req, res){\n   res.send(\"Hello World!\");\n});\n\napp.post('/hello', function(req, res){\n   res.send(\"You just called the post method at '/hello'!\\n\");\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>To test this request, open up your terminal and use cURL to execute the following request −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -X POST \"http://localhost:3000/hello\"\n</code></pre>\n\n\n\n<p>A special method,&nbsp;<em><strong>all</strong></em>, is provided by Express to handle all types of http methods at a particular route using the same function. To use this method, try the following.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.all('/test', function(req, res){{\"{\"}}\n   res.send(\"HTTP method doesn't have any effect on this route!\");\n});</code></pre>\n\n\n\n<p>This method is generally used for defining middleware, which we&#8217;ll discuss in the middleware chapter.</p>\n\n\n\n<h2>Routers</h2>\n\n\n\n<p>Defining routes like above is very tedious to maintain. To separate the routes from our main&nbsp;<strong>index.js</strong>&nbsp;file, we will use&nbsp;<strong>Express.Router</strong>. Create a new file called&nbsp;<strong>things.js</strong>&nbsp;and type the following in it.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar router = express.Router();\n\nrouter.get('/', function(req, res){{\"{\"}}\n   res.send('GET route on things.');\n});\nrouter.post('/', function(req, res){{\"{\"}}\n   res.send('POST route on things.');\n});\n\n//export this router to use in our index.js\nmodule.exports = router;</code></pre>\n\n\n\n<p>Now to use this router in our&nbsp;<strong>index.js</strong>, type in the following before the&nbsp;<strong>app.listen</strong>&nbsp;function call.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('Express');\nvar app = express();\n\nvar things = require('./things.js');\n\n//both index.js and things.js should be in same directory\napp.use('/things', things);\n\napp.listen(3000);</code></pre>\n\n\n\n<p>The&nbsp;<em><strong>app.use</strong></em>&nbsp;function call on route&nbsp;<strong>&#8216;/things&#8217;</strong>&nbsp;attaches the&nbsp;<strong>things</strong>&nbsp;router with this route. Now whatever requests our app gets at the &#8216;/things&#8217;, will be handled by our things.js router. The&nbsp;<strong>&#8216;/&#8217;</strong>&nbsp;route in things.js is actually a subroute of &#8216;/things&#8217;. Visit localhost:3000/things/ and you will see the following output.</p>\n\n\n\n<p>Routers are very helpful in separating concerns and keep relevant portions of our code together. They help in building maintainable code. You should define your routes relating to an entity in a single file and include it using the above method in your&nbsp;<strong>index.js</strong>&nbsp;file.</p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Routing Web frameworks provide resources such as HTML pages, scripts, images, etc. at different routes. The following function is used to define routes in an Express application − app.method(path, handler) This METHOD can be applied to any one of the HTTP verbs – get, set, put, delete. An alternate method also exists, which [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4172"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4172"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4172/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4172"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4172"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4172"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4173,"date":"2020-07-21T08:04:09","date_gmt":"2020-07-21T08:04:09","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=93"},"modified":"2020-07-21T08:04:09","modified_gmt":"2020-07-21T08:04:09","slug":"express-js-cookies-management","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-cookies-management/","title":{"rendered":"Http Methods"},"content":{"rendered":"\n<h1>ExpressJS &#8211; HTTP Methods</h1>\n\n\n\n<p>The HTTP method is supplied in the request and specifies the operation that the client has requested. The following table lists the most used HTTP methods −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td><strong>GET</strong>: The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect.</td></tr><tr><td>2</td><td><strong>POST</strong>: The POST method requests that the server accept the data enclosed in the request as a new object/entity of the resource identified by the URI.</td></tr><tr><td>3</td><td><strong>PUT</strong>: The PUT method requests that the server accept the data enclosed in the request as a modification to existing object identified by the URI. If it does not exist then the PUT method should create one.</td></tr><tr><td>4</td><td><strong>DELETE</strong>: The DELETE method requests that the server delete the specified resource.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; HTTP Methods The HTTP method is supplied in the request and specifies the operation that the client has requested. The following table lists the most used HTTP methods − S.No. Method &amp; Description 1 GET: The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4173"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4173"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4173/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4173"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4173"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4173"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4174,"date":"2020-07-21T08:05:47","date_gmt":"2020-07-21T08:05:47","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=95"},"modified":"2020-07-21T08:05:47","modified_gmt":"2020-07-21T08:05:47","slug":"express-js-file-upload","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-file-upload/","title":{"rendered":"URL Building"},"content":{"rendered":"\n<p>We can now define routes, but those are static or fixed. To use the dynamic routes, we SHOULD provide different types of routes. Using dynamic routes allows us to pass parameters and process based on them.</p>\n\n\n\n<p>Here is an example of a dynamic route −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\napp.get('/:id', function(req, res){\n   res.send('The id you specified is ' + req.params.id);\n});\napp.listen(3000);</code></pre>\n\n\n\n<p>To test this go to&nbsp;<strong>http://localhost:3000/123</strong>.</p>\n\n\n\n<p>You can replace &#8216;123&#8217; in the URL with anything else and the change will reflect in the response. A more complex example of the above is −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\napp.get('/things/:name/:id', function(req, res) {\n   res.send('id: ' + req.params.id + ' and name: ' + req.params.name);\n});\napp.listen(3000);</code></pre>\n\n\n\n<p>To test the above code, go to&nbsp;<strong>http://localhost:3000/things/tutorialspoint/12345</strong>.</p>\n\n\n\n<p>You can use the&nbsp;<em><strong>req.params</strong></em>&nbsp;object to access all the parameters you pass in the url. Note that the above 2 are different paths. They will never overlap. Also if you want to execute code when you get&nbsp;<strong>&#8216;/things&#8217;</strong>&nbsp;then you need to define it separately.</p>\n\n\n\n<h2>Pattern Matched Routes</h2>\n\n\n\n<p>You can also use&nbsp;<strong>regex</strong>&nbsp;to restrict URL parameter matching. Let us assume you need the&nbsp;<strong>id</strong>&nbsp;to be a 5-digit long number. You can use the following route definition −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\napp.get('/things/:id(&#91;0-9]{\n      5})', function(req, res){\n   res.send('id: ' + req.params.id);\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>Note that this will&nbsp;<strong>only</strong>&nbsp;match the requests that have a 5-digit long&nbsp;<strong>id</strong>. You can use more complex regexes to match/validate your routes. If none of your routes match the request, you&#8217;ll get a&nbsp;<em><strong>&#8220;Cannot GET &lt;your-request-route&gt;&#8221;</strong></em>&nbsp;message as response. This message be replaced by a 404 not found page using this simple route −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\n//Other routes here\napp.get('*', function(req, res){\n   res.send('Sorry, this is an invalid URL.');\n});\napp.listen(3000);</code></pre>\n\n\n\n<p><strong>Important</strong>&nbsp;− This should be placed after all your routes, as Express matches routes from start to end of the&nbsp;<strong>index.js</strong>&nbsp;file, including the external routers you required.</p>\n\n\n\n<p>For example, if we define the same routes as above, on requesting with a valid URL</p>\n","protected":false},"excerpt":{"rendered":"<p>We can now define routes, but those are static or fixed. To use the dynamic routes, we SHOULD provide different types of routes. Using dynamic routes allows us to pass parameters and process based on them. Here is an example of a dynamic route − To test this go to&nbsp;http://localhost:3000/123. You can replace &#8216;123&#8217; in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4174"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4174"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4174/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4174"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4174"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4174"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4175,"date":"2020-07-21T08:06:54","date_gmt":"2020-07-21T08:06:54","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=97"},"modified":"2020-07-21T08:06:54","modified_gmt":"2020-07-21T08:06:54","slug":"express-js-middleware","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-middleware/","title":{"rendered":"Middleware"},"content":{"rendered":"\n<p>Middleware functions are functions that have access to the&nbsp;<strong>request object (req)</strong>, the&nbsp;<strong>response object (res)</strong>, and the next middleware function in the application’s request-response cycle. These functions are used to modify&nbsp;<strong>req</strong>&nbsp;and&nbsp;<strong>res</strong>&nbsp;objects for tasks like parsing request bodies, adding response headers, etc.</p>\n\n\n\n<p>Here is a simple example of a middleware function in action −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\n//Simple request time logger\napp.use(function(req, res, next){\n   console.log(\"A new request received at \" + Date.now());\n   \n   //This function call is very important. It tells that more processing is\n   //required for the current request and is in the next middleware\n   function/route handler.\n   next();\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>The above middleware is called for every request on the server. So after every request, we will get the following message in the console −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>A new request received at 1467267512545\n</code></pre>\n\n\n\n<p>To restrict it to a specific route (and all its subroutes), provide that route as the first argument of&nbsp;<strong><em>app.use()</em></strong>. For Example,</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\n//Middleware function to log request protocol\napp.use('/things', function(req, res, next){\n   console.log(\"A request for things received at \" + Date.now());\n   next();\n});\n\n// Route handler that sends the response\napp.get('/things', function(req, res){\n   res.send('Things');\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>Now whenever you request any subroute of &#8216;/things&#8217;, only then it will log the time.</p>\n\n\n\n<h3>Order of Middleware Calls</h3>\n\n\n\n<p>One of the most important things about middleware in Express is the order in which they are written/included in your file; the order in which they are executed, given that the route matches also needs to be considered.</p>\n\n\n\n<p>For example, in the following code snippet, the first function executes first, then the route handler and then the end function. This example summarizes how to use middleware before and after route handler; also how a route handler can be used as a middleware itself.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\n//First middleware before response is sent\napp.use(function(req, res, next){\n   console.log(\"Start\");\n   next();\n});\n\n//Route handler\napp.get('/', function(req, res, next){\n   res.send(\"Middle\");\n   next();\n});\n\napp.use('/', function(req, res){\n   console.log('End');\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>When we visit &#8216;/&#8217; after running this code, we receive the response as&nbsp;<strong>Middle</strong>&nbsp;and on our console −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Start\nEnd</code></pre>\n\n\n\n<p>Now that we have covered how to create our own middleware, let us discuss some of the most commonly used community created middleware.</p>\n\n\n\n<h2>Third Party Middleware</h2>\n\n\n\n<p>A list of Third party middleware for Express is available&nbsp;<a href=\"http://expressjs.com/en/resources/middleware.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>. Following are some of the most commonly used middleware; we will also learn how to use/mount these −</p>\n\n\n\n<h3>body-parser</h3>\n\n\n\n<p>This is used to parse the body of requests which have payloads attached to them. To mount body parser, we need to install it using&nbsp;<strong>npm install</strong>&nbsp;&#8211;save body-parser and to mount it, include the following lines in your index.js −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var bodyParser = require('body-parser');\n\n//To parse URL encoded data\napp.use(bodyParser.urlencoded({ extended: false }))\n\n//To parse json data\napp.use(bodyParser.json())</code></pre>\n\n\n\n<p>To view all available options for body-parser, visit its github page.</p>\n\n\n\n<h3>cookie-parser</h3>\n\n\n\n<p>It parses&nbsp;<em>Cookie</em>&nbsp;header and populate req.cookies with an object keyed by cookie names. To mount cookie parser, we need to install it using npm install &#8211;save cookie-parser and to mount it, include the following lines in your index.js −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var cookieParser = require('cookie-parser');\napp.use(cookieParser())</code></pre>\n\n\n\n<h3>express-session</h3>\n\n\n\n<p>It creates a session middleware with the given options. We will discuss its usage in the Sessions section.</p>\n\n\n\n<p>We have many other third party middleware in ExpressJS. However, we have discussed only a few important ones here.</p>\n","protected":false},"excerpt":{"rendered":"<p>Middleware functions are functions that have access to the&nbsp;request object (req), the&nbsp;response object (res), and the next middleware function in the application’s request-response cycle. These functions are used to modify&nbsp;req&nbsp;and&nbsp;res&nbsp;objects for tasks like parsing request bodies, adding response headers, etc. Here is a simple example of a middleware function in action − The above middleware [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4175"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4175"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4175/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4175"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4175"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4175"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4176,"date":"2020-07-21T08:07:36","date_gmt":"2020-07-21T08:07:36","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=99"},"modified":"2020-07-21T08:07:36","modified_gmt":"2020-07-21T08:07:36","slug":"express-js-scaffolding","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-scaffolding/","title":{"rendered":"Before you Choose"},"content":{"rendered":"\n<h1>So which Template Engine you should use?</h1>\n\n\n\n<p>Let&#8217;s discuss what to keep in mind when choosing a template engine for express.js development. In the Node world, you have many templating engines to choose from, so how to pick? It’s a complicated question, and very much depends on your needs. Here are some things to consider before making a choice:Performance</p>\n\n\n\n<p>Clearly, you want your templating engine to be as fast as possible. It’s not something you want slowing down your website.Client, server, or both?</p>\n\n\n\n<p>Most, but not all, templating engines are available on both the server and client sides. If you need to use templates in both realms (and you will), I recommend you pick something that is equally capable in either capacity.Abstraction</p>\n\n\n\n<p>Do you want something familiar (like normal HTML with curly brackets thrown in, for example), or do you secretly hate HTML and would love something that saves you from all those angle brackets? Templating (especially server-side templating) gives you some choices here.</p>\n\n\n\n<p>These are just some of the more prominent criteria in selecting a templating language. Templating options are pretty mature at this point, so you probably can’t go too wrong with whatever you pick.</p>\n\n\n\n<p>Express allows you to use any templating engine you wish, so if Handlebars is not to your liking, you’ll find it’s easy to switch it out.</p>\n","protected":false},"excerpt":{"rendered":"<p>So which Template Engine you should use? Let&#8217;s discuss what to keep in mind when choosing a template engine for express.js development. In the Node world, you have many templating engines to choose from, so how to pick? It’s a complicated question, and very much depends on your needs. Here are some things to consider [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4176"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4176"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4176/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4176"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4176"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4176"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4177,"date":"2020-07-21T08:08:34","date_gmt":"2020-07-21T08:08:34","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=101"},"modified":"2020-07-21T08:08:34","modified_gmt":"2020-07-21T08:08:34","slug":"express-js-template-engine","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-js-template-engine/","title":{"rendered":"Handlebars Basics"},"content":{"rendered":"\n<p>it strikes all the right balances and is what we’ll be focusing on in this book. The concepts we’re discussing are broadly applicable to other templating engines, though, so you will be well prepared to try different templating engines if Handlebars doesn’t strike your fancy.</p>\n\n\n\n<p>The key to understanding templating is understanding the concept of&nbsp;<em>context</em>.&nbsp;When you render a template, you pass the templating engine an object called the&nbsp;<em>context object</em>, and this is what allows replacements to work.</p>\n\n\n\n<p>For example, if my context object is</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{ name: 'Handlebars' }</code></pre>\n\n\n\n<p>and my template is</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>Welcome, {{name}}!&lt;/p></code></pre>\n\n\n\n<p>then <code>{{name}}</code> will be replaced with <code>Handlebars</code>. What if you want to pass HTML to the template? For example, if our context was instead</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{ name: '&lt;b>Handlebars&lt;/b>' }</code></pre>\n\n\n\n<p>then using the previous template will result in <code>&lt;p>Welcome, &amp;lt;b&amp;gt;Handlebars&amp;lt;b&amp;gt;&lt;/p></code>, which is probably not what you’re looking for. To solve this problem, simply use three curly brackets instead of two: <code>{{name}}}</code>.</p>\n\n\n\n<h2>Comments</h2>\n\n\n\n<p><em>Comments</em> in Handlebars look like <code>{{! comment goes here }}</code>. It’s important to understand the distinction between Handlebars comments and HTML comments. Consider the following template:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{{! super-secret comment }}\n        &lt;!-- not-so-secret comment --></code></pre>\n\n\n\n<p>Assuming this is a server-side template, the super-secret comment will never be sent to the browser, whereas the not-so-secret comment will be visible if the user inspects the HTML source. You should prefer Handlebars comments for anything that exposes implementation details, or anything else you don’t want exposed.</p>\n\n\n\n<h2>Blocks</h2>\n\n\n\n<p>Things start to get more complicated when you consider&nbsp;<em>blocks</em>. Blocks provide flow control, conditional execution, and extensibility. Consider the following context object:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  currency: {\n    name: 'United States dollars',\n    abbrev: 'USD',\n  },\n  tours: &#91;\n    { name: 'Hood River', price: '$99.95' },\n    { name: 'Oregon Coast', price: '$159.95' },\n  ],\n  specialsUrl: '/january-specials',\n  currencies: &#91; 'USD', 'GBP', 'BTC' ],\n}</code></pre>\n\n\n\n<p>Now let’s examine a template we can pass that context to:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n          {{#each tours}}\n          {{! I'm in a new block...and the context has changed }}\n        &lt;li>\n          {{name}} - {{price}}\n          {{#if ../currencies}}\n        ({{../currency.abbrev}})\n          {{/if}}\n        &lt;/li>\n          {{/each}}\n        &lt;/ul>\n          {{#unless currencies}}\n        &lt;p>All prices in {{currency.name}}.&lt;/p>\n          {{/unless}}\n          {{#if specialsUrl}}\n          {{! I'm in a new block...but the context hasn't changed (sortof) }}\n        &lt;p>Check out our &lt;a href=\"{{specialsUrl}}\">specials!&lt;/p>\n          {{else}}\n        &lt;p>Please check back often for specials.&lt;/p>\n          {{/if}}\n        &lt;p>\n          {{#each currencies}}\n        &lt;a href=\"#\" class=\"currency\">{{.}}&lt;/a>\n          {{else}}\n        Unfortunately, we currently only accept {{currency.name}}.\n          {{/each}}\n        &lt;/p></code></pre>\n\n\n\n<p>A lot is going on in this template, so let’s break it down. It starts off with the <code>each</code> helper, which allows us to iterate over an array. What’s important to understand is that between <code>{{#each tours}}</code> and <code>{{/each tours}}</code>, the context changes. On the first pass, it changes to <code>{ name: 'Hood River', price: '$99.95' }</code>, and on the second pass, the context is <code>{ name: 'Oregon Coast', price: '$159.95' }</code>. So within that block, we can refer to <code>{{name}}</code> and <code>{{price}}</code>. However, if we want to access the <code>currency</code> object, we have to use <code>../</code> to access the <em>parent</em> context.</p>\n\n\n\n<p>If a property of the context is itself an object, we can access its properties as normal with a period, such as <code>{{currency.name}}</code>.</p>\n\n\n\n<p>Both&nbsp;<code>if</code>&nbsp;and&nbsp;<code>each</code>&nbsp;have an optional&nbsp;<code>else</code>&nbsp;block (with&nbsp;<code>each</code>, if there are no elements in the array, the&nbsp;<code>else</code>&nbsp;block will execute). We’ve also used the&nbsp;<code>unless</code>&nbsp;helper, which is essentially the opposite of the&nbsp;<code>if</code>&nbsp;helper: it executes only if the argument is false.</p>\n\n\n\n<p>The last thing to note about this template is the use of <code>{{.}}</code> in the <code>{{#each currencies}}</code> block. <code>{{.}}</code> refers to the current context; in this case, the current context is simply a string in an array that we want to print out.</p>\n\n\n\n<h6>Tip</h6>\n\n\n\n<p>Accessing the current context with a lone period has another use: it can distinguish helpers (which we’ll learn about soon) from properties of the current context. For example, if you have a helper called <code>foo</code> and a property in the current context called <code>foo</code>, <code>{{foo}}</code> refers to the helper, and <code>{{./foo}}</code> refers to the property.</p>\n\n\n\n<h2>Server-Side Templates</h2>\n\n\n\n<p><em>Server-side templates</em>&nbsp;allow you to render HTML&nbsp;<em>before</em>&nbsp;it’s sent to the client. Unlike client-side templating, where the templates are available for the curious user who knows how to view the HTML source, your users will never see your server-side template or the context objects used to generate the final HTML.</p>\n\n\n\n<p>Server-side templates, in addition to hiding your implementation details, support template&nbsp;<em>caching</em>, which is important for performance. The templating engine will cache compiled templates (recompiling and recaching only when the template itself changes), which will improve the performance of templated views. By default, view caching is disabled in development mode and enabled in production mode. If you want to explicitly enable view caching, you can do so thusly:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.set('view cache', true)</code></pre>\n\n\n\n<p>Out of the box, Express supports Pug, EJS, and JSHTML. We’ve already discussed Pug, and I find little to recommend EJS or JSHTML (neither go far enough, syntactically, for my taste).&nbsp;So we’ll need to add a Node package that provides Handlebars support for Express:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install express-handlebars</code></pre>\n\n\n\n<p>Then we’ll link it into Express (<em>ch07/00/meadowlark.js</em>&nbsp;in the companion repo):</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const expressHandlebars = require('express-handlebars')\napp.engine('handlebars', expressHandlebars({{\n  defaultLayout: 'main',\n})\napp.set('view engine', 'handlebars')</code></pre>\n\n\n\n<h6>Tip</h6>\n\n\n\n<p><code>express-handlebars</code> expects Handlebars templates to have the <em>.handlebars</em> extension. I’ve grown used to this, but if it’s too wordy for you, you can change the extension to the also common <em>.hbs</em> when you create the <code>express-handlebars</code> instance: <code>app.engine('handlebars', expressHandlebars({ extname: '.hbs' }))</code>.</p>\n\n\n\n<h2>Views and Layouts</h2>\n\n\n\n<p>A&nbsp;<em>view</em>&nbsp;usually represents an individual page on your website (though it could represent an Ajax-loaded portion of a page, an email, or anything else for that matter). By default, Express looks for views in the&nbsp;<em>views</em>&nbsp;subdirectory.&nbsp;A&nbsp;<em>layout</em>&nbsp;is a special kind of view—essentially, a template for templates. Layouts are essential because most (if not all) of the pages on your site will have an almost identical layout. For example, they must have an&nbsp;<code>&lt;html&gt;</code>&nbsp;element and a&nbsp;<code>&lt;title&gt;</code>&nbsp;element, they usually all load the same CSS files, and so on. You don’t want to have to duplicate that code for every single page, which is where layouts come in. Let’s look at a bare-bones layout file:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n  &lt;head>\n    &lt;title>Meadowlark Travel&lt;/title>\n    &lt;link rel=\"stylesheet\" href=\"/css/main.css\">\n  &lt;/head>\n  &lt;body>\n          {{{body}}}\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Notice the text inside the <code>&lt;body></code> tag: <code>{{{body}}}</code>. That’s so the view engine knows where to render the content of your view. It’s important to use three curly brackets instead of two: our view is most likely to contain HTML, and we don’t want Handlebars trying to escape it. Note that there’s no restriction on where you place the <code>{{{body}}}</code> field. For example, if you were building a responsive layout in Bootstrap, you would probably want to put your view inside a container <code>&lt;div></code>. Also, common page elements like headers and footers usually live in the layout, not the view. Here’s an example:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- ... -->\n&lt;body>\n  &lt;div class=\"container\">\n    &lt;header>\n      &lt;div class=\"container\">\n        &lt;h1>Meadowlark Travel&lt;/h1>\n        &lt;img src=\"/img/logo.png\" alt=\"Meadowlark Travel Logo\">\n      &lt;/div>\n    &lt;/header>\n    &lt;div class=\"container\">\n          {{{body}}}\n    &lt;/div>\n    &lt;footer>&amp;copy; 2019 Meadowlark Travel&lt;/footer>\n  &lt;/div>\n&lt;/body></code></pre>\n\n\n\n<h6>Note</h6>\n\n\n\n<p>Because of the order of operations, you can pass a property called&nbsp;<code>body</code>&nbsp;into the view, and it will render correctly in the view. However, when the layout is rendered, the value of&nbsp;<code>body</code>&nbsp;will be overwritten by the rendered view.</p>\n\n\n\n<h2>Using Layouts (or Not) in Express</h2>\n\n\n\n<p>Chances are, most (if not all) of your pages will use the same layout, so it doesn’t make sense to keep specifying the layout every time we render a view. You’ll notice that when we created the view engine, we specified the name of the default layout:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.engine('handlebars', expressHandlebars({\n  defaultLayout: 'main',\n})</code></pre>\n\n\n\n<p>By default, Express looks for views in the&nbsp;<em>views</em>&nbsp;subdirectory, and layouts in&nbsp;<em>views/layouts</em>. So if you have a view&nbsp;<em>views/foo.handlebars</em>, you can render it this way:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.get('/foo', (req, res) => res.render('foo'))</code></pre>\n\n\n\n<p>It will use&nbsp;<em>views/layouts/main.handlebars</em>&nbsp;as the layout. If you don’t want to use a layout at all (meaning you’ll have to have all of the boilerplate in the view), you can specify&nbsp;<code>layout: null</code>&nbsp;in the context object:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.get('/foo', (req, res) => res.render('foo', { layout: null }))</code></pre>\n\n\n\n<p>Or, if we want to use a different template, we can specify the template name:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.get('/foo', (req, res) => res.render('foo', { layout: 'microsite' }))</code></pre>\n\n\n\n<p>This will render the view with layout&nbsp;<em>views/layouts/microsite.handlebars</em>.</p>\n\n\n\n<p>Keep in mind that the more templates you have, the more basic HTML layout you have to maintain. On the other hand, if you have pages that are substantially different in layout, it may be worth it; you have to find a balance that works for your projects.</p>\n\n\n\n<h2>Sections</h2>\n\n\n\n<p>One technique I’m borrowing from Microsoft’s excellent&nbsp;<em>Razor</em>&nbsp;template engine is the idea of&nbsp;<em>sections</em>. Layouts work well if all of your view fits neatly within a single element in your layout, but what happens when your view needs to inject itself into different parts of your layout? A common example of this is a view needing to add something to the&nbsp;<code>&lt;head&gt;</code>&nbsp;element or to insert a&nbsp;<code>&lt;script&gt;</code>, which is sometimes the very last thing in the layout, for performance reasons.</p>\n\n\n\n<p>Neither Handlebars nor&nbsp;<code>express-handlebars</code>&nbsp;has a built-in way to do this. Fortunately, Handlebars helpers make this really easy. When we instantiate the Handlebars object, we’ll add a helper called&nbsp;<code>section</code>&nbsp;(<em>ch07/01/meadowlark.js</em>&nbsp;in the companion repo):</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.engine('handlebars', expressHandlebars({\n  defaultLayout: 'main',\n  helpers: {\n    section: function(name, options) {\n      if(!this._sections) this._sections = {\n      this._sections&#91;name] = options.fn(this)\n      return null\n    },\n  },\n}))</code></pre>\n\n\n\n<p>Now we can use the&nbsp;<code>section</code>&nbsp;helper in a view. Let’s add a view (<em>views/section-test.handlebars</em>) to add something to the&nbsp;<code>&lt;head&gt;</code>&nbsp;and a script:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{{#section 'head'}}\n        &lt;!-- we want Google to ignore this page -->\n  &lt;meta name=\"robots\" content=\"noindex\">\n          {{/section}}\n\n        &lt;h1>Test Page&lt;/h1>\n&lt;p>We're testing some script stuff.&lt;/p>\n\n          {{#section 'scripts'}}\n        &lt;script>\n    document.querySelector('body')\n      .insertAdjacentHTML('beforeEnd', '&lt;small>(scripting works!)&lt;/small>')\n  &lt;/script>\n          {{/section}}</code></pre>\n\n\n\n<p>Now in our layout, we can place the sections just as we place <code>{{{body}}}</code>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{{#section 'head'}}\n        &lt;!-- we want Google to ignore this page -->\n  &lt;meta name=\"robots\" content=\"noindex\">\n          {{/section}}\n\n        &lt;h1>Test Page&lt;/h1>\n&lt;p>We're testing some script stuff.&lt;/p>\n\n          {{#section 'scripts'}}\n        &lt;script>\n    const div = document.createElement('div')\n    div.appendChild(document.createTextNode('(scripting works!)'))\n    document.querySelector('body').appendChild(div)\n  &lt;/script>\n          {{/section}}</code></pre>\n\n\n\n<h2>Partials</h2>\n\n\n\n<p>Very often, you’ll have&nbsp;components that you want to reuse on different pages (sometimes called&nbsp;<em>widgets</em>&nbsp;in frontend circles). One way to achieve that with templates is to use&nbsp;<em>partials</em>&nbsp;(so named because they don’t render a whole view or a whole page). Let’s imagine we want a Current Weather component that displays the current weather conditions in Portland, Bend, and Manzanita. We want this component to be reusable so we can easily put it on whatever page we want, so we’ll use a partial. First, we create a partial file,&nbsp;<em>views/partials/weather.handlebars</em>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"weatherWidget\">\n          {{#each partials.weatherContext}}\n        &lt;div class=\"location\">\n      &lt;h3>{{location.name}}&lt;/h3>\n      &lt;a href=\"{{\n            location.forecastUrl}}\">\n        &lt;img src=\"{{\n            iconUrl}}\" alt=\"{{weather}}\">\n          {{weather}}, {{temp}}\n        &lt;/a>\n    &lt;/div>\n          {{/each}}\n        &lt;small>Source: &lt;a href=\"https://www.weather.gov/documentation/services-web-api\">\n    National Weather Service&lt;/a>&lt;/small>\n&lt;/div></code></pre>\n\n\n\n<p>Note that we namespace our context by starting with&nbsp;<code>partials.weatherContext</code>. Since we want to be able to use the partial on any page, it’s not practical to pass the context in for every view, so instead we use&nbsp;<code>res.locals</code>&nbsp;(which is available to every view). But because we don’t want to interfere with the context specified by individual views, we put all partial context in the&nbsp;<code>partials</code>&nbsp;object.</p>\n\n\n\n<h6>Warning</h6>\n\n\n\n<p><code>express-handlebars</code> allows you to pass in partial templates as part of the context. For example, if you add <code>partials.foo = \"Template!\"</code> to your context, you can render this partial with <code>{{> foo}}</code>. This usage will override any <em>.handlebars</em> view files, which is why we used <code>partials.weatherContext</code> earlier, instead of <code>partials.weather</code>, which would override <em>views/partials/weather.handlebars</em>.</p>\n\n\n\n<h2>Perfecting Your Templates</h2>\n\n\n\n<p>Your templates are at the heart of your website. A good template structure will save you development time, promote consistency across your website, and reduce the number of places that layout quirks can hide. To achieve these benefits, though, you must spend some time crafting your templates carefully. Deciding how many templates you should have is an art; generally, fewer is better, but there is a point of diminishing returns, depending on the uniformity of your pages. Your templates are also your first line of defense against cross-browser compatibility issues and valid HTML. They should be lovingly crafted and maintained by someone who is well versed in frontend development.&nbsp;A great place to start—especially if you’re new—is&nbsp;<a href=\"http://html5boilerplate.com\">HTML5 Boilerplate</a>. In the previous examples, we’ve been using a minimal HTML5 template to fit the book format, but for our actual project, we’ll be using HTML5&nbsp;Boilerplate.</p>\n\n\n\n<p>Another popular place to start with your template are third-party themes. Sites like <a href=\"http://bit.ly/34Tdkfj\">Themeforest</a> and <a href=\"https://wrapbootstrap.com\">WrapBootstrap</a> have hundreds of ready-to-use HTML5 themes that you can use as a starting place for your template. Using a third-party theme starts with taking the primary file (usually <em>index.html</em>), renaming it to <em>main.handlebars</em> (or whatever you choose to call your layout file), and placing any resources (CSS, JavaScript, images) in the <em>public</em> directory you use for static files. Then you’ll have to edit the template file and figure out where you want to put the <code>{{{body}}}</code> expression.</p>\n\n\n\n<p>Depending on the elements of your template, you may want to move some of them into partials. A great example is a&nbsp;<em>hero</em>&nbsp;(a tall banner designed to grab the user’s attention. If the hero appears on every page (probably a poor choice), you would leave the hero in the template file. If it appears on only one page (usually the home page), then it would go only in that view. If it appears on several—but not all—pages, then you might consider putting it in a partial. The choice is yours, and herein lies the artistry of making a unique, captivating website.</p>\n","protected":false},"excerpt":{"rendered":"<p>it strikes all the right balances and is what we’ll be focusing on in this book. The concepts we’re discussing are broadly applicable to other templating engines, though, so you will be well prepared to try different templating engines if Handlebars doesn’t strike your fancy. The key to understanding templating is understanding the concept of&nbsp;context.&nbsp;When [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4177"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4177"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4177/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4177"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4177"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4177"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4156,"date":"2020-08-09T16:46:09","date_gmt":"2020-08-09T16:46:09","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2708"},"modified":"2020-08-09T16:46:09","modified_gmt":"2020-08-09T16:46:09","slug":"handlebars-comments","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/handlebars-comments/","title":{"rendered":"Handlebars Comments"},"content":{"rendered":"\n<h2>Comments</h2>\n\n\n\n<p><em>Comments</em> in Handlebars look like <code>{{! comment goes here }}</code>. It’s important to understand the distinction between Handlebars comments and HTML comments. Consider the following template:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">{{! super-secret comment }}\n      <code>&lt;!-- not-so-secret comment --></code></pre>\n\n\n\n<p>Assuming this is a server-side template, the super-secret comment will never be sent to the browser, whereas the not-so-secret comment will be visible if the user inspects the HTML source. You should prefer Handlebars comments for anything that exposes implementation details, or anything else you don’t want exposed.</p>\n","protected":false},"excerpt":{"rendered":"<p>Comments Comments in Handlebars look like {{! comment goes here }}. It’s important to understand the distinction between Handlebars comments and HTML comments. Consider the following template: {{! super-secret comment }} &lt;!&#8211; not-so-secret comment &#8211;> Assuming this is a server-side template, the super-secret comment will never be sent to the browser, whereas the not-so-secret comment will be [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4156"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4156"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4156/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4156"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4156"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4156"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4157,"date":"2020-08-09T16:49:32","date_gmt":"2020-08-09T16:49:32","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2710"},"modified":"2020-08-09T16:49:32","modified_gmt":"2020-08-09T16:49:32","slug":"layouts-views","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/layouts-views/","title":{"rendered":"Layouts &#038; Views"},"content":{"rendered":"\n<h2>Views and Layouts</h2>\n\n\n\n<p>A&nbsp;<em>view</em>&nbsp;usually represents an individual page on your website (though it could represent an Ajax-loaded portion of a page, an email, or anything else for that matter). By default, Express looks for views in the&nbsp;<em>views</em>&nbsp;subdirectory.&nbsp;A&nbsp;<em>layout</em>&nbsp;is a special kind of view—essentially, a template for templates. Layouts are essential because most (if not all) of the pages on your site will have an almost identical layout. For example, they must have an&nbsp;<code>&lt;html&gt;</code>&nbsp;element and a&nbsp;<code>&lt;title&gt;</code>&nbsp;element, they usually all load the same CSS files, and so on. You don’t want to have to duplicate that code for every single page, which is where layouts come in. Let’s look at a bare-bones layout file:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n  &lt;head>\n    &lt;title>CodePoint&lt;/title>\n    &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\">\n  &lt;/head>\n  &lt;body>\n      {{body}}\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Notice the text inside the <code>&lt;body></code> tag: <code>{{body}}</code>. That’s so the view engine knows where to render the content of your view. It’s important to use three curly brackets instead of two: our view is most likely to contain HTML, and we don’t want Handlebars trying to escape it. Note that there’s no restriction on where you place the <code>{{body}}</code> field. For example, if you were building a responsive layout in Bootstrap, you would probably want to put your view inside a container <code>&lt;div></code>. Also, common page elements like headers and footers usually live in the layout, not the view. Here’s an example:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- ... -->\n&lt;body>\n  &lt;div class=\"container\">\n    &lt;header>\n      &lt;div class=\"container\">\n        &lt;h1>CodePoint&lt;/h1>\n        &lt;img src=\"/images/logo.png\" alt=\"CodePoint Logo\">\n      &lt;/div>\n    &lt;/header>\n    &lt;div class=\"container\">\n      {{body}}\n    &lt;/div>\n    &lt;footer>&amp;copy; 2020 CodePoint&lt;/footer>\n  &lt;/div>\n&lt;/body></code></pre>\n\n\n\n<h6>Note</h6>\n\n\n\n<p>Because of the order of operations, you can pass a property called&nbsp;<code>body</code>&nbsp;into the view, and it will render correctly in the view. However, when the layout is rendered, the value of&nbsp;<code>body</code>&nbsp;will be overwritten by the rendered view.</p>\n","protected":false},"excerpt":{"rendered":"<p>Views and Layouts A&nbsp;view&nbsp;usually represents an individual page on your website (though it could represent an Ajax-loaded portion of a page, an email, or anything else for that matter). By default, Express looks for views in the&nbsp;views&nbsp;subdirectory.&nbsp;A&nbsp;layout&nbsp;is a special kind of view—essentially, a template for templates. Layouts are essential because most (if not all) of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4157"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4157"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4157/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4157"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4157"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4157"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2712,"date":"2020-08-09T16:51:03","date_gmt":"2020-08-09T16:51:03","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2712"},"modified":"2020-08-09T16:51:03","modified_gmt":"2020-08-09T16:51:03","slug":"server-side-templates","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/server-side-templates/","title":{"rendered":"Server Side Templates"},"content":{"rendered":"\n<h2>Server-Side Templates</h2>\n\n\n\n<p><em>Server-side templates</em>&nbsp;allow you to render HTML&nbsp;<em>before</em>&nbsp;it’s sent to the client. Unlike client-side templating, where the templates are available for the curious user who knows how to view the HTML source, your users will never see your server-side template or the context objects used to generate the final HTML.</p>\n\n\n\n<p>Server-side templates, in addition to hiding your implementation details, support template&nbsp;<em>caching</em>, which is important for performance. The templating engine will cache compiled templates (recompiling and recaching only when the template itself changes), which will improve the performance of templated views. By default, view caching is disabled in development mode and enabled in production mode. If you want to explicitly enable view caching, you can do so thusly:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.set('view cache', true)</code></pre>\n\n\n\n<p>Out of the box, Express supports Pug, EJS, and JSHTML. We’ve already discussed Pug, and I find little to recommend EJS or JSHTML (neither go far enough, syntactically, for my taste).&nbsp;So we’ll need to add a Node package that provides Handlebars support for Express:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">npm install express-handlebars</pre>\n\n\n\n<p>Then add this into your main express.js file:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const expressHandlebars = require('express-handlebars')\napp.engine('handlebars', expressHandlebars({{\"{\"}}\n  defaultLayout: 'main',\n})\napp.set('view engine', 'handlebars')</code></pre>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>Server-Side Templates Server-side templates&nbsp;allow you to render HTML&nbsp;before&nbsp;it’s sent to the client. Unlike client-side templating, where the templates are available for the curious user who knows how to view the HTML source, your users will never see your server-side template or the context objects used to generate the final HTML. Server-side templates, in addition to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2712"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2712"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2712/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2712"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2712"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2712"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4158,"date":"2020-08-09T16:55:28","date_gmt":"2020-08-09T16:55:28","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2714"},"modified":"2020-08-09T16:55:28","modified_gmt":"2020-08-09T16:55:28","slug":"handlebars-section","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/handlebars-section/","title":{"rendered":"Handlebars Section"},"content":{"rendered":"\n<p>Layouts work well if all of your view fits neatly within a single element in your layout, but what happens when your view needs to inject itself into different parts of your layout? A common example of this is a view needing to add something to the&nbsp;<code>&lt;head&gt;</code>&nbsp;element or to insert a&nbsp;<code>&lt;script&gt;</code>, which is sometimes the very last thing in the layout, for performance reasons.</p>\n\n\n\n<p>Neither Handlebars nor&nbsp;<code>express-handlebars</code>&nbsp;has a built-in way to do this. Fortunately, Handlebars helpers make this really easy. When we instantiate the Handlebars object, we’ll add a helper called&nbsp;<code>section</code>&nbsp;(<em>ch07/01/meadowlark.js</em>&nbsp;in the companion repo):</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.engine('handlebars', expressHandlebars({{\"{\"}}\n  defaultLayout: 'main',\n  helpers: {{\"{\"}}\n    section: function(name, options) {{\"{\"}}\n      if(!this._sections) this._sections = {{\"{\"}}}\n      this._sections&#91;name] = options.fn(this)\n      return null\n    },\n  },\n}))</code></pre>\n\n\n\n<p>Now we can use the&nbsp;<code>section</code>&nbsp;helper in a view. Let’s add a view (<em>views/section-test.handlebars</em>) to add something to the&nbsp;<code>&lt;head&gt;</code>&nbsp;and a script:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{{#section 'head'}}\n      &lt;!-- we want Google to ignore this page -->\n  &lt;meta name=\"robots\" content=\"noindex\">\n      {{/section}}\n\n      &lt;h1>Main Section&lt;/h1>\n&lt;p>This is the Website Main Section&lt;/p>\n\n      {{#section 'scripts'}}\n      &lt;script>\n    document.querySelector('body')\n      .insertAdjacentHTML('beforeEnd', '&lt;small>(scripting works!)&lt;/small>')\n  &lt;/script>\n      {{/section}}</code></pre>\n\n\n\n<p>Now in our layout, we can place the sections just as we place <code>{{body}}</code>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{{#section 'head'}}\n      &lt;!-- we want Google to ignore this page -->\n  &lt;meta name=\"robots\" content=\"noindex\">\n      {{/section}}\n\n      &lt;h1>Main Section&lt;/h1>\n&lt;p>This is the Website Main Section&lt;/p>\n\n      {{#section 'scripts'}}\n      &lt;script>\n    const div = document.createElement('div')\n    div.appendChild(document.createTextNode('(scripting works!)'))\n    document.querySelector('body').appendChild(div)\n  &lt;/script>\n      {{/section}}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Layouts work well if all of your view fits neatly within a single element in your layout, but what happens when your view needs to inject itself into different parts of your layout? A common example of this is a view needing to add something to the&nbsp;&lt;head&gt;&nbsp;element or to insert a&nbsp;&lt;script&gt;, which is sometimes the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4158"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4158"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4158/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4158"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4158"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4158"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4159,"date":"2020-08-09T17:28:52","date_gmt":"2020-08-09T17:28:52","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2716"},"modified":"2020-08-09T17:28:52","modified_gmt":"2020-08-09T17:28:52","slug":"express-forms","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/express-forms/","title":{"rendered":"Express Forms"},"content":{"rendered":"\n<h2>Working with Forms in Express</h2>\n\n\n\n<p>Before we dive deeper into forms with Express, let&#8217;s take some time learning the basics of HTML Forms. Here’s a simple example:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form action=\"/send-data\" method=\"POST\">\n\n    &lt;div>\n        &lt;label for=\"fvrtColor\">Pick a color: &lt;/label>\n        &lt;input type=\"text\" id=\"fvrtColor\" name=\"color\">\n    &lt;/div>\n    &lt;div>\n        &lt;button type=\"submit\">Submit&lt;/button>\n    &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<p>Notice the method is specified explicitly as&nbsp;<code>POST</code>&nbsp;in the&nbsp;<code>&lt;form&gt;</code>&nbsp;tag; if you don’t do this, it defaults to&nbsp;<code>GET</code>. The&nbsp;<code>action</code>&nbsp;attribute specifies the URL that will receive the form when it’s posted. If you omit this field, the form will be submitted to the same URL the form was loaded from.</p>\n\n\n\n<p>The important attributes in the&nbsp;<code>&lt;input&gt;</code>&nbsp;fields are the&nbsp;<code>name</code>&nbsp;attributes for the server: that’s how the server identifies the field. It’s important to understand that the&nbsp;<code>name</code>&nbsp;attribute is distinct from the&nbsp;<code>id</code>&nbsp;attribute, which should be used for styling and frontend functionality only (it is not passed to the server).</p>\n\n\n\n<h1>Form Handling with Express</h1>\n\n\n\n<p>If&nbsp;you’re using&nbsp;<code>GET</code>&nbsp;for your form handling, your fields will be available on the&nbsp;<code>req.query</code>&nbsp;object. For example, if you have an HTML input field with a name attribute of&nbsp;<code>email</code>, its value will be passed to the handler as&nbsp;<code>req.query.email</code>. There’s really not much more that needs to be said about this approach; it’s just that simple.</p>\n\n\n\n<p>If you’re using&nbsp;<code>POST</code>&nbsp;(which I recommend), you’ll have to link in middleware to parse the URL-encoded body.&nbsp;First, install the&nbsp;<code>body-parser</code>&nbsp;middleware (<code>npm install body-parser</code>); then, link it in (<em>ch08/meadowlark.js</em>&nbsp;in the companion repo):</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const bodyParser = require('body-parser')\napp.use(bodyParser.urlencoded({ extended: true }))</code></pre>\n\n\n\n<p>Once you’ve linked in&nbsp;<code>body-parser</code>, you’ll find that&nbsp;<code>req.body</code>&nbsp;now becomes available for you, and that’s where all of your form fields will be made available. Note that&nbsp;<code>req.body</code>&nbsp;doesn’t prevent you from using the querystring. Let’s go ahead and add a form to Meadowlark Travel that lets the user sign up for a mailing list. For demonstration’s sake, we’ll use the querystring, a hidden field, and visible fields in&nbsp;<em>/views/newsletter-signup.handlebars</em>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h2>Sign up for our newsletter to receive news and specials!&lt;/h2>\n&lt;form class=\"form-horizontal\" role=\"form\"\n    action=\"/newsletter-signup/process?form=newsletter\" method=\"POST\">\n  &lt;input type=\"hidden\" name=\"_csrf\" value=\"{{csrf}}\">\n  &lt;div class=\"form-group\">\n    &lt;label for=\"fieldName\" class=\"col-sm-2 control-label\">Name&lt;/label>\n    &lt;div class=\"col-sm-4\">\n      &lt;input type=\"text\" class=\"form-control\"\n      id=\"fieldName\" name=\"name\">\n    &lt;/div>\n  &lt;/div>\n  &lt;div class=\"form-group\">\n    &lt;label for=\"fieldEmail\" class=\"col-sm-2 control-label\">Email&lt;/label>\n    &lt;div class=\"col-sm-4\">\n      &lt;input type=\"email\" class=\"form-control\" required\n          id=\"fieldEmail\" name=\"email\">\n    &lt;/div>\n  &lt;/div>\n  &lt;div class=\"form-group\">\n    &lt;div class=\"col-sm-offset-2 col-sm-4\">\n      &lt;button type=\"submit\" class=\"btn btn-primary\">Register&lt;/button>\n    &lt;/div>\n  &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<p>Note we are using Bootstrap styles, as we will be throughout the rest of the book. If you are unfamiliar with Bootstrap, you may want to refer to the&nbsp;<a href=\"http://getbootstrap.com\">Bootstrap documentation</a>.</p>\n\n\n\n<p>We’ve already linked in our body parser, so now we need to add handlers for our newsletter sign-up page, processing function, and thank-you page (<em>ch08/lib/handlers.js</em>&nbsp;in the companion repo):</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.newsletterSignup = (req, res) => {\n  // we will learn about CSRF later...for now, we just\n  // provide a dummy value\n  res.render('newsletter-signup', { csrf: 'CSRF token goes here' })\n}\nexports.newsletterSignupProcess = (req, res) => {\n  console.log('Form (from querystring): ' + req.query.form)\n  console.log('CSRF token (from hidden form field): ' + req.body._csrf)\n  console.log('Name (from visible form field): ' + req.body.name)\n  console.log('Email (from visible form field): ' + req.body.email)\n  res.redirect(303, '/newsletter-signup/thank-you')\n}\nexports.newsletterSignupThankYou = (req, res) =>\n  res.render('newsletter-signup-thank-you')</code></pre>\n\n\n\n<p>(If you haven’t already, create a&nbsp;<em>views/newsletter-signup-thank-you.handlebars</em>&nbsp;file.)</p>\n\n\n\n<p>Lastly, we’ll link our handlers into our application (<em>ch08/meadowlark.js</em>&nbsp;in the companion repo):</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.get('/newsletter-signup', handlers.newsletterSignup)\napp.post('/newsletter-signup/process', handlers.newsletterSignupProcess)\napp.get('/newsletter-signup/thank-you', handlers.newsletterSignupThankYou)</code></pre>\n\n\n\n<p>That’s all there is to it. Note that in our handler, we’re redirecting to a “thank you” view. We could render a view here, but if we did, the URL field in the visitor’s browser would remain&nbsp;<em>/process</em>, which could be confusing. Issuing a redirect solves that problem.</p>\n\n\n\n<p>With most frontend frameworks, it is more common to see form data sent in JSON form with the&nbsp;<code>fetch</code>&nbsp;API, which we’ll be looking at next. However, it’s still good to understand how browsers handle form submission by default, as you will still find forms implemented this way.</p>\n","protected":false},"excerpt":{"rendered":"<p>Working with Forms in Express Before we dive deeper into forms with Express, let&#8217;s take some time learning the basics of HTML Forms. Here’s a simple example: Notice the method is specified explicitly as&nbsp;POST&nbsp;in the&nbsp;&lt;form&gt;&nbsp;tag; if you don’t do this, it defaults to&nbsp;GET. The&nbsp;action&nbsp;attribute specifies the URL that will receive the form when it’s posted. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4159"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4159"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4159/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4159"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4159"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4159"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4160,"date":"2020-08-09T17:30:39","date_gmt":"2020-08-09T17:30:39","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2718"},"modified":"2020-08-09T17:30:39","modified_gmt":"2020-08-09T17:30:39","slug":"file-uploading","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/file-uploading/","title":{"rendered":"File Uploading"},"content":{"rendered":"\n<h1>Uploading Files in Express</h1>\n\n\n\n<p>In this lecture, we will learn how we can upload files in our express.js applications. Luckily, there are some great projects that help make file handling a snap.</p>\n\n\n\n<p>There are four popular and robust options for multipart form processing: busboy, multiparty, formidable, and multer.&nbsp;I have used all four, and they’re all good, but I feel multiparty is the best maintained, and so we’ll use it here.</p>\n\n\n\n<p>Let’s create a file upload form for the User Profile photo (<em>views/users/user-profile.handlebars</em>):</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h3>User Profile Photo&lt;/h3>\n\n&lt;form class=\"form-horizontal\" role=\"form\"\n    enctype=\"multipart/form-data\" method=\"POST\"\n    action=\"/users/add\">\n  &lt;input type=\"hidden\" name=\"_csrf\" value=\"{{\n        csrf}}\">\n  &lt;div class=\"form-group\">\n    &lt;label for=\"fieldName\" class=\"col-sm-2 control-label\">Name&lt;/label>\n    &lt;div class=\"col-sm-4\">\n      &lt;input type=\"text\" class=\"form-control\"\n      id=\"fieldName\" name=\"name\">\n    &lt;/div>\n  &lt;/div>\n  &lt;div class=\"form-group\">\n    &lt;label for=\"fieldEmail\" class=\"col-sm-2 control-label\">Email&lt;/label>\n    &lt;div class=\"col-sm-4\">\n      &lt;input type=\"email\" class=\"form-control\" required\n          id=\"fieldEmail\" name=\"email\">\n    &lt;/div>\n  &lt;/div>\n  &lt;div class=\"form-group\">\n    &lt;label for=\"fieldPhoto\" class=\"col-sm-2 control-label\">User's photo&lt;/label>\n    &lt;div class=\"col-sm-4\">\n      &lt;input type=\"file\" class=\"form-control\" required  accept=\"image/*\"\n          id=\"fieldPhoto\" name=\"photo\">\n    &lt;/div>\n  &lt;/div>\n  &lt;div class=\"form-group\">\n    &lt;div class=\"col-sm-offset-2 col-sm-4\">\n      &lt;button type=\"submit\" class=\"btn btn-primary\">Register&lt;/button>\n    &lt;/div>\n  &lt;/div>\n&lt;/form></code></pre>\n\n\n\n<p>Note that we must specify&nbsp;<code>enctype=\"multipart/form-data\"</code>&nbsp;to enable file uploads. We’re also restricting the type of files that can be uploaded by using the&nbsp;<code>accept</code>&nbsp;attribute (which is optional).</p>\n\n\n\n<p>Now we need to create route handlers, but we have something of a dilemma. We want to maintain our ability to easily test our route handlers, which will be complicated by multipart form processing (in the same way we use middleware to process other types of body encoding before we even get to our handlers). Since we don’t want to test multipart form decoding ourselves, we’ll keep our handlers “pure” by passing them the already-processed information. Since we don’t know what that looks like yet, we’ll start with the Express plumbing in&nbsp;<em>users.js</em>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const multiparty = require('multiparty')\n\napp.post('/users/add', (req, res) => {\n  const form = new multiparty.Form()\n  form.parse(req, (err, fields, files) => {\n    if(err) return res.status(500).send({ error: err.message })\n    handlers.userPhotoUploadMethod(req, res, fields, files)\n  })\n})</code></pre>\n\n\n\n<p>We’re using multiparty’s&nbsp;<code>parse</code>&nbsp;method to parse the request data into the data fields and the files. This method will store the files in a temporary directory on the server, and that information will be returned in the&nbsp;<code>files</code>&nbsp;array passed back.</p>\n\n\n\n<p>So now we have extra information to pass to our (testable) route handler: the fields (which won’t be in&nbsp;<code>req.body</code>&nbsp;as in previous examples since we’re using a different body parser) and information about the file(s) that were collected. Now that we know what that looks like, we can write our route handler:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.userPhotoUploadMethod = (req, res, fields, files) => {\n  console.log('field data: ', fields)\n  console.log('files: ', files)\n  res.redirect(303, '/thank-you')\n}</code></pre>\n\n\n\n<p>Go ahead and run this and examine the console log. You’ll see that your form fields come across as you would expect: as an object with properties corresponding to your field names. The&nbsp;<code>files</code>&nbsp;object contains more data, but it’s relatively straightforward. For each file uploaded, you’ll see there are properties for size, the path it was uploaded to (usually a random name in a temporary directory), and the original name of the file that the user uploaded, just the filename, not the whole path, for security and privacy reasons.</p>\n\n\n\n<p>What you do with this file is now up to you: you can store it in a database, copy it to a more permanent location, or upload it to a cloud-based file storage system. Remember that if you’re relying on local storage for saving files, your application won’t scale well, making this a poor choice for cloud-based hosting.</p>\n","protected":false},"excerpt":{"rendered":"<p>Uploading Files in Express In this lecture, we will learn how we can upload files in our express.js applications. Luckily, there are some great projects that help make file handling a snap. There are four popular and robust options for multipart form processing: busboy, multiparty, formidable, and multer.&nbsp;I have used all four, and they’re all [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4160"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4160"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4160/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4160"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4160"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4160"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4161,"date":"2020-08-09T17:32:03","date_gmt":"2020-08-09T17:32:03","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2720"},"modified":"2020-08-09T17:32:03","modified_gmt":"2020-08-09T17:32:03","slug":"static-files","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/static-files/","title":{"rendered":"Static Files"},"content":{"rendered":"\n<h1>Serving static files</h1>\n\n\n\n<p>Static files are files that clients download as they are from the server. Create a new directory,&nbsp;<strong>public</strong>. Express, by default does not allow you to serve static files. You need to enable it using the following built-in middleware.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.use(express.static('public'));\n</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Express looks up the files relative to the static directory, so the name of the static directory is not part of the URL.</p>\n\n\n\n<p>Note that the root route is now set to your public dir, so all static files you load will be considering public as root. To test that this is working fine, add any image file in your new&nbsp;<strong>public</strong>&nbsp;dir and change its name to &#8220;<strong>testimage.jpg</strong>&#8220;. In your views, create a new view and include this file like −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n   body\n      h3 Testing static file serving:\n      img(src = \"/testimage.jpg\", alt = \"Testing Image</code></pre>\n\n\n\n<h2>Multiple Static Directories</h2>\n\n\n\n<p>We can also set multiple static assets directories using the following program −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let express = require('express');\nlet app = express();\n\napp.use(express.static('public'));\napp.use(express.static('images'));\n\napp.listen(3000);</code></pre>\n\n\n\n<h2>Virtual Path Prefix</h2>\n\n\n\n<p>We can also provide a path prefix for serving static files. For example, if you want to provide a path prefix like&nbsp;<strong>&#8216;/static&#8217;</strong>, you need to include the following code in your&nbsp;<strong>index.js</strong>&nbsp;file −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let express = require('express');\nlet app = express();\n\napp.use('/static', express.static('public'));\n\napp.listen(3000);</code></pre>\n\n\n\n<p>Now whenever you need to include a file, for example, a script file called main.js residing in your public directory, use the following script tag −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"/static/main.js\" /></code></pre>\n\n\n\n<p>This technique can come in handy when providing multiple directories as static files. These prefixes can help distinguish between multiple directories.</p>\n","protected":false},"excerpt":{"rendered":"<p>Serving static files Static files are files that clients download as they are from the server. Create a new directory,&nbsp;public. Express, by default does not allow you to serve static files. You need to enable it using the following built-in middleware. Note&nbsp;− Express looks up the files relative to the static directory, so the name [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4161"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4161"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4161/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4161"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4161"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4161"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4162,"date":"2020-08-09T17:33:38","date_gmt":"2020-08-09T17:33:38","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2722"},"modified":"2020-08-09T17:33:38","modified_gmt":"2020-08-09T17:33:38","slug":"cookies","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/cookies/","title":{"rendered":"Cookies"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Cookies</h1>\n\n\n\n<p>Cookies are simple, small files/data that are sent to client with a server request and stored on the client side. Every time the user loads the website back, this cookie is sent with the request. This helps us keep track of the user’s actions.</p>\n\n\n\n<p>The following are the numerous uses of the HTTP Cookies −</p>\n\n\n\n<ul><li>Session management</li><li>Personalization(Recommendation systems)</li><li>User tracking</li></ul>\n\n\n\n<p>To use cookies with Express, we need the cookie-parser middleware. To install it, use the following code −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">npm install --save cookie-parser\n</pre>\n\n\n\n<p>Now to use cookies with Express, we will require the&nbsp;<strong>cookie-parser</strong>. cookie-parser is a middleware which&nbsp;<em>parses cookies attached to the client request object</em>. To use it, we will require it in our&nbsp;<strong>index.js</strong>&nbsp;file; this can be used the same way as we use other middleware. Here, we will use the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">var cookieParser = require('cookie-parser');\napp.use(cookieParser());</pre>\n\n\n\n<p>cookie-parser parses Cookie header and populates&nbsp;<strong>req.cookies</strong>&nbsp;with an object keyed by the cookie names. To set a new cookie, let us define a new route in your Express app like −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n   res.cookie('name', 'express').send('cookie set'); //Sets name = express\n});\n\napp.listen(3000);</pre>\n\n\n\n<p>To check if your cookie is set or not, just go to your browser, fire up the console, and enter −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">console.log(document.cookie);\n</pre>\n\n\n\n<p>You will get the output like (you may have more cookies set maybe due to extensions in your browser) −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\"name = express\"\n</pre>\n\n\n\n<p>The browser also sends back cookies every time it queries the server. To view cookies from your server, on the server console in a route, add the following code to that route.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">console.log('Cookies: ', req.cookies);\n</pre>\n\n\n\n<p>Next time you send a request to this route, you will receive the following output.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">Cookies: { name: 'express' }\n</pre>\n\n\n\n<h2>Adding Cookies with Expiration Time</h2>\n\n\n\n<p>You can add cookies that expire. To add a cookie that expires, just pass an object with property &#8216;expire&#8217; set to the time when you want it to expire. For example,</p>\n\n\n\n<pre class=\"wp-block-preformatted\"> </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>//Expires after 360000 ms from the time it is set.\nres.cookie(name, 'value', {expire: 360000 + Date.now()});</code></pre>\n\n\n\n<p>Another way to set expiration time is using&nbsp;<strong>&#8216;maxAge&#8217;</strong>&nbsp;property. Using this property, we can provide relative time instead of absolute time. Following is an example of this method.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>//This cookie also expires after 360000 ms from the time it is set.\nres.cookie(name, 'value', {maxAge: 360000});</code></pre>\n\n\n\n<h2>Deleting Existing Cookies</h2>\n\n\n\n<p>To delete a cookie, use the clearCookie function. For example, if you need to clear a cookie named&nbsp;<strong>foo</strong>, use the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\napp.get('/clear_cookie_foo', function(req, res){\n   res.clearCookie('foo');\n   res.send('cookie foo cleared');\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>In the next chapter, we will see how to use cookies to manage sessions.</p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Cookies Cookies are simple, small files/data that are sent to client with a server request and stored on the client side. Every time the user loads the website back, this cookie is sent with the request. This helps us keep track of the user’s actions. The following are the numerous uses of the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4162"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4162"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4162/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4162"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4162"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4162"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4163,"date":"2020-08-09T17:35:07","date_gmt":"2020-08-09T17:35:07","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2724"},"modified":"2020-08-09T17:35:07","modified_gmt":"2020-08-09T17:35:07","slug":"sessions","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/sessions/","title":{"rendered":"Sessions"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Sessions</h1>\n\n\n\n<p>HTTP is stateless; in order to associate a request to any other request, you need a way to store user data between HTTP requests. Cookies and URL parameters are both suitable ways to transport data between the client and the server. But they are both readable and on the client side. Sessions solve exactly this problem. You assign the client an ID and it makes all further requests using that ID. Information associated with the client is stored on the server linked to this ID.</p>\n\n\n\n<p>We will need the&nbsp;<em>Express-session</em>, so install it using the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save express-session</code></pre>\n\n\n\n<p>We will put the&nbsp;<strong>session</strong>&nbsp;and&nbsp;<strong>cookie-parser</strong>&nbsp;middleware in place. In this example, we will use the default store for storing sessions, i.e., MemoryStore. Never use this in production environments. The session middleware handles all things for us, i.e., creating the session, setting the session cookie and creating the session object in&nbsp;<strong>req</strong>&nbsp;object.</p>\n\n\n\n<p>Whenever we make a request from the same client again, we will have their session information stored with us (given that the server was not restarted). We can add more properties to the session object. In the following example, we will create a view counter for a client.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar cookieParser = require('cookie-parser');\nvar session = require('express-session');\n\nvar app = express();\n\napp.use(cookieParser());\napp.use(session({secret: \"Shh, its a secret!\"}));\n\napp.get('/', function(req, res){\n   if(req.session.page_views){\n      req.session.page_views++;\n      res.send(\"You visited this page \" + req.session.page_views + \" times\");\n   } else {\n      req.session.page_views = 1;\n      res.send(\"Welcome to this page for the first time!\");\n   }\n});\napp.listen(3000);</code></pre>\n\n\n\n<p>What the above code does is, when a user visits the site, it creates a new session for the user and assigns them a cookie. Next time the user comes, the cookie is checked and the&nbsp;<strong>page_view</strong>&nbsp;session variable is updated accordingly.</p>\n\n\n\n<p>Now if you run the app and go to&nbsp;<strong>localhost:3000</strong>.</p>\n\n\n\n<p>If you revisit the page, the page counter will increase. The page in the following screenshot was refreshed 42 times.</p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Sessions HTTP is stateless; in order to associate a request to any other request, you need a way to store user data between HTTP requests. Cookies and URL parameters are both suitable ways to transport data between the client and the server. But they are both readable and on the client side. Sessions [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4163"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4163"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4163/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4163"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4163"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4163"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4164,"date":"2020-08-09T17:39:38","date_gmt":"2020-08-09T17:39:38","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2726"},"modified":"2020-08-09T17:39:38","modified_gmt":"2020-08-09T17:39:38","slug":"authentication","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/authentication/","title":{"rendered":"Authentication"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Authentication</h1>\n\n\n\n<p>Authentication is a process in which the credentials provided are compared to those on file in a database of authorized users&#8217; information on a local operating system or within an authentication server. If the credentials match, the process is completed and the user is granted authorization for access.</p>\n\n\n\n<p>For us to create an authentication system, we will need to create a sign up page and a user-password store. The following code creates an account for us and stores it in memory. This is just for the purpose of demo; it is recommended that a persistent storage (database or files) is always used to store user information.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\nvar bodyParser = require('body-parser');\nvar multer = require('multer');\nvar upload = multer();\nvar session = require('express-session');\nvar cookieParser = require('cookie-parser');\n\napp.set('view engine', 'pug');\napp.set('views','./views');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(upload.array());\napp.use(cookieParser());\napp.use(session({secret: \"Your secret key\"}));\n\nvar Users = &#91;];\n\napp.get('/signup', function(req, res){\n   res.render('signup');\n});\n\napp.post('/signup', function(req, res){\n   if(!req.body.id || !req.body.password){\n      res.status(\"400\");\n      res.send(\"Invalid details!\");\n   } else {\n      Users.filter(function(user){\n         if(user.id === req.body.id){\n            res.render('signup', {\n               message: \"User Already Exists! Login or choose another user id\"});\n         }\n      });\n      var newUser = {id: req.body.id, password: req.body.password};\n      Users.push(newUser);\n      req.session.user = newUser;\n      res.redirect('/protected_page');\n   }\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>Now for the signup form, create a new view called&nbsp;<strong>signup.jade.</strong></p>\n\n\n\n<h3>SIGNUP.JADE</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title Signup\n   body\n      if(message)\n         h4 #{message}\n         form(action = \"/signup\" method = \"POST\")\n         input(name = \"id\" type = \"text\" required placeholder = \"User ID\")\n         input(name = \"password\" type = \"password\" required placeholder = \"Password\")\n         button(type = \"Submit\") Sign me up!</code></pre>\n\n\n\n<p>Check if this page loads by visiting localhost:3000/signup.</p>\n\n\n\n<p>We have set the required attribute for both fields, so HTML5 enabled browsers will not let us submit this form until we provide both id and password. If someone tries to register using a curl request without a User ID or Password, an error will be displayed. Create a new file called&nbsp;<strong>protected_page.pug</strong>&nbsp;in views with the following content −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title Protected page\n   body\n      div Hey #{id}, How are you doing today?\n      div Want to log out?\n      div Logout</code></pre>\n\n\n\n<p>This page should only be visible if the user has just signed up or logged in. Let us now define its route and also routes to log in and log out −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\nvar bodyParser = require('body-parser');\nvar multer = require('multer');\nvar upload = multer();\nvar session = require('express-session');\nvar cookieParser = require('cookie-parser');\n\napp.set('view engine', 'pug');\napp.set('views','./views');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(upload.array());\napp.use(cookieParser());\napp.use(session({secret: \"Your secret key\"}));\n\nvar Users = &#91;];\n\napp.get('/signup', function(req, res){\n   res.render('signup');\n});\n\napp.post('/signup', function(req, res){\n   if(!req.body.id || !req.body.password){\n      res.status(\"400\");\n      res.send(\"Invalid details!\");\n   } else {\n      Users.filter(function(user){\n         if(user.id === req.body.id){\n            res.render('signup', {\n               message: \"User Already Exists! Login or choose another user id\"});\n         }\n      });\n      var newUser = {id: req.body.id, password: req.body.password};\n      Users.push(newUser);\n      req.session.user = newUser;\n      res.redirect('/protected_page');\n   }\n});\nfunction checkSignIn(req, res){\n   if(req.session.user){\n      next();     //If session exists, proceed to page\n   } else {\n      var err = new Error(\"Not logged in!\");\n      console.log(req.session.user);\n      next(err);  //Error, trying to access unauthorized page!\n   }\n}\napp.get('/protected_page', checkSignIn, function(req, res){\n   res.render('protected_page', {id: req.session.user.id})\n});\n\napp.get('/login', function(req, res){\n   res.render('login');\n});\n\napp.post('/login', function(req, res){\n   console.log(Users);\n   if(!req.body.id || !req.body.password){\n      res.render('login', {message: \"Please enter both id and password\"});\n   } else {\n      Users.filter(function(user){\n         if(user.id === req.body.id &amp;&amp; user.password === req.body.password){\n            req.session.user = user;\n            res.redirect('/protected_page');\n         }\n      });\n      res.render('login', {message: \"Invalid credentials!\"});\n   }\n});\n\napp.get('/logout', function(req, res){\n   req.session.destroy(function(){\n      console.log(\"user logged out.\")\n   });\n   res.redirect('/login');\n});\n\napp.use('/protected_page', function(err, req, res, next){\nconsole.log(err);\n   //User should be authenticated! Redirect him to log in.\n   res.redirect('/login');\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>We have created a middleware function&nbsp;<em>checkSignIn</em>&nbsp;to check if the user is signed in. The&nbsp;<strong>protected_page</strong>&nbsp;uses this function. To log the user out, we destroy the session.</p>\n\n\n\n<p>Let us now create the login page. Name the view as&nbsp;<strong>login.pug</strong>&nbsp;and enter the contents −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n   head\n      title Signup\n   body\n      if(message)\n         h4 #{message}\n         form(action = \"/login\" method = \"POST\")\n         input(name = \"id\" type = \"text\" required placeholder = \"User ID\")\n         input(name = \"password\" type = \"password\" required placeholder = \"Password\")\n         button(type = \"Submit\") Log in</code></pre>\n\n\n\n<p>Our simple authentication application is now complete; let us now test the application. Run the app using&nbsp;<em>nodemon index.js</em>, and proceed to localhost:3000/signup.</p>\n\n\n\n<p>Enter a Username and a password and click sign up. You will be redirected to the&nbsp;<strong>protected_page</strong>&nbsp;if details are valid/unique −</p>\n\n\n\n<p>Now log out of the app. This will redirect us to the login page −</p>\n\n\n\n<p>This route is protected such that if an unauthenticated person tries to visit it, he will be edirected to our login page. This was all about basic user authentication. It is always recommended that we use a persistent session system and use hashes for password transport. There are much better ways to authenticate users now, leveraging JSON tokens.</p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Authentication Authentication is a process in which the credentials provided are compared to those on file in a database of authorized users&#8217; information on a local operating system or within an authentication server. If the credentials match, the process is completed and the user is granted authorization for access. For us to create [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4164"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4164"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4164/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4164"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4164"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4164"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4165,"date":"2020-08-09T17:47:47","date_gmt":"2020-08-09T17:47:47","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2728"},"modified":"2020-08-09T17:47:47","modified_gmt":"2020-08-09T17:47:47","slug":"restful-api","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/restful-api/","title":{"rendered":"Restful API"},"content":{"rendered":"\n<h1>ExpressJS &#8211; RESTFul APIs</h1>\n\n\n\n<p>An API is always needed to create mobile applications, single page applications, use AJAX calls and provide data to clients. An popular architectural style of how to structure and name these APIs and the endpoints is called&nbsp;<strong>REST(Representational Transfer State)</strong>.&nbsp;<strong>HTTP 1.1</strong>&nbsp;was designed keeping REST principles in mind. REST was introduced by&nbsp;<strong>Roy Fielding</strong>&nbsp;in 2000 in his Paper Fielding Dissertations.</p>\n\n\n\n<p>RESTful URIs and methods provide us with almost all information we need to process a request. The table given below summarizes how the various verbs should be used and how URIs should be named. We will be creating a movies API towards the end; let us now discuss how it will be structured.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>URI</th><th>Details</th><th>Function</th></tr><tr><td>GET</td><td>/movies</td><td>Safe, cachable</td><td>Gets the list of all movies and their details</td></tr><tr><td>GET</td><td>/movies/1234</td><td>Safe, cachable</td><td>Gets the details of Movie id 1234</td></tr><tr><td>POST</td><td>/movies</td><td>N/A</td><td>Creates a new movie with the details provided. Response contains the URI for this newly created resource.</td></tr><tr><td>PUT</td><td>/movies/1234</td><td>Idempotent</td><td>Modifies movie id 1234(creates one if it doesn&#8217;t already exist). Response contains the URI for this newly created resource.</td></tr><tr><td>DELETE</td><td>/movies/1234</td><td>Idempotent</td><td>Movie id 1234 should be deleted, if it exists. Response should contain the status of the request.</td></tr><tr><td>DELETE or PUT</td><td>/movies</td><td>Invalid</td><td>Should be invalid.&nbsp;<strong>DELETE</strong>&nbsp;and&nbsp;<strong>PUT</strong>&nbsp;should specify which resource they are working on.</td></tr></tbody></table></figure>\n\n\n\n<p>Let us now create this API in Express. We will be using JSON as our transport data format as it is easy to work with in JavaScript and has other benefits. Replace your&nbsp;<strong>index.js</strong>&nbsp;file with the&nbsp;<strong>movies.js</strong>&nbsp;file as in the following program.</p>\n\n\n\n<h2>index.js</h2>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar bodyParser = require('body-parser');\nvar multer = require('multer');\nvar upload = multer();\n\nvar app = express();\n\napp.use(cookieParser());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(upload.array());\n\n//Require the Router we defined in movies.js\nvar movies = require('./movies.js');\n\n//Use the Router on the sub route /movies\napp.use('/movies', movies);\n\napp.listen(3000);</code></pre>\n\n\n\n<p>Now that we have our application set up, let us concentrate on creating the API.</p>\n\n\n\n<p>Start by setting up the movies.js file. We are not using a database to store the movies but are storing them in memory; so every time the server restarts, the movies added by us will vanish. This can easily be mimicked using a database or a file (using node fs module).</p>\n\n\n\n<p>Once you import Express then, create a Router and export it using&nbsp;<em>module.exports</em>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar router = express.Router();\nvar movies = &#91;\n   {id: 101, name: \"Fight Club\", year: 1999, rating: 8.1},\n   {id: 102, name: \"Inception\", year: 2010, rating: 8.7},\n   {id: 103, name: \"The Dark Knight\", year: 2008, rating: 9},\n   {id: 104, name: \"12 Angry Men\", year: 1957, rating: 8.9}\n];\n\n//Routes will go here\nmodule.exports = router;</code></pre>\n\n\n\n<h2>GET routes</h2>\n\n\n\n<p>Let us define the GET route for getting all the movies −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>router.get('/', function(req, res){\n   res.json(movies);\n});</code></pre>\n\n\n\n<p>To test out if this is working fine, run your app, then open your terminal and enter −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET \nlocalhost:3000/movies\n﻿</code></pre>\n\n\n\n<p>The following response will be displayed −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;{\"id\":101,\"name\":\"Fight Club\",\"year\":1999,\"rating\":8.1},\n      {\"id\":102,\"name\":\"Inception\",\"year\":2010,\"rating\":8.7},\n      {\"id\":103,\"name\":\"The Dark Knight\",\"year\":2008,\"rating\":9},\n      {\"id\":104,\"name\":\"12 Angry Men\",\"year\":1957,\"rating\":8.9}]</code></pre>\n\n\n\n<p>We have a route to get all the movies. Let us now create a route to get a specific movie by its id.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>router.get('/:id(&#91;0-9]{3,})', function(req, res){\n   var currMovie = movies.filter(function(movie){\n      if(movie.id == req.params.id){\n         return true;\n      }\n   });\n   if(currMovie.length == 1){\n      res.json(currMovie&#91;0])\n   } else {\n      res.status(404);//Set status to 404 as movie was not found\n      res.json({message: \"Not Found\"});\n   }\n});</code></pre>\n\n\n\n<p>This will get us the movies according to the id that we provided. To check the output, use the following command in your terminal −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET \nlocalhost:3000/movies/101</code></pre>\n\n\n\n<p>You&#8217;ll get the following response −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"id\":101,\"name\":\"Fight Club\",\"year\":1999,\"rating\":8.1}\n</code></pre>\n\n\n\n<p>If you visit an invalid route, it will produce a&nbsp;<strong>cannot GET error</strong>&nbsp;while if you visit a valid route with an id that doesn’t exist, it will produce a 404 error.</p>\n\n\n\n<p>We are done with the GET routes, let us now move on to the&nbsp;<strong>POST</strong>&nbsp;route.</p>\n\n\n\n<h2>POST route</h2>\n\n\n\n<p>Use the following route to handle the&nbsp;<strong>POSTed</strong>&nbsp;data −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>router.post('/', function(req, res){\n   //Check if all fields are provided and are valid:\n   if(!req.body.name ||\n      !req.body.year.toString().match(/^&#91;0-9]{4}$/g) ||\n      !req.body.rating.toString().match(/^&#91;0-9]\\.&#91;0-9]$/g)){\n      \n      res.status(400);\n      res.json({message: \"Bad Request\"});\n   } else {\n      var newId = movies&#91;movies.length-1].id+1;\n      movies.push({\n         id: newId,\n         name: req.body.name,\n         year: req.body.year,\n         rating: req.body.rating\n      });\n      res.json({message: \"New movie created.\", location: \"/movies/\" + newId});\n   }\n});</code></pre>\n\n\n\n<p>This will create a new movie and store it in the movies variable. To check this route, enter the following code in your terminal −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -X POST --data \"name = Toy%20story&amp;year = 1995&amp;rating = 8.5\" http://localhost:3000/movies</code></pre>\n\n\n\n<p>The following response will be displayed −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"message\":\"New movie created.\",\"location\":\"/movies/105\"}\n</code></pre>\n\n\n\n<p>To test if this was added to the movies object, Run the get request for&nbsp;<strong>/movies/105</strong>&nbsp;again. The following response will be displayed −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"id\":105,\"name\":\"Toy story\",\"year\":\"1995\",\"rating\":\"8.5\"}\n</code></pre>\n\n\n\n<p>Let us move on to create the PUT and DELETE routes.</p>\n\n\n\n<h2>PUT route</h2>\n\n\n\n<p>The PUT route is almost the same as the POST route. We will be specifying the id for the object that&#8217;ll be updated/created. Create the route in the following way.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>router.put('/:id', function(req, res){\n   //Check if all fields are provided and are valid:\n   if(!req.body.name ||\n      !req.body.year.toString().match(/^&#91;0-9]{4}$/g) ||\n      !req.body.rating.toString().match(/^&#91;0-9]\\.&#91;0-9]$/g) ||\n      !req.params.id.toString().match(/^&#91;0-9]{3,}$/g)){\n      \n      res.status(400);\n      res.json({message: \"Bad Request\"});\n   } else {\n      //Gets us the index of movie with given id.\n      var updateIndex = movies.map(function(movie){\n         return movie.id;\n      }).indexOf(parseInt(req.params.id));\n      \n      if(updateIndex === -1){\n         //Movie not found, create new\n         movies.push({\n            id: req.params.id,\n            name: req.body.name,\n            year: req.body.year,\n            rating: req.body.rating\n         });\n         res.json({message: \"New movie created.\", location: \"/movies/\" + req.params.id});\n      } else {\n         //Update existing movie\n         movies&#91;updateIndex] = {\n            id: req.params.id,\n            name: req.body.name,\n            year: req.body.year,\n            rating: req.body.rating\n         };\n         res.json({message: \"Movie id \" + req.params.id + \" updated.\", \n            location: \"/movies/\" + req.params.id});\n      }\n   }\n});</code></pre>\n\n\n\n<p>This route will perform the function specified in the above table. It will update the object with new details if it exists. If it doesn&#8217;t exist, it will create a new object. To check the route, use the following curl command. This will update an existing movie. To create a new Movie, just change the id to a non-existing id.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -X PUT --data \"name = Toy%20story&amp;year = 1995&amp;rating = 8.5\" \nhttp:&#47;&#47;localhost:3000/movies/101</code></pre>\n\n\n\n<p><strong>Response</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"message\":\"Movie id 101 updated.\",\"location\":\"/movies/101\"}\n</code></pre>\n\n\n\n<h2>DELETE route</h2>\n\n\n\n<p>Use the following code to create a delete route. −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>router.delete('/:id', function(req, res){\n   var removeIndex = movies.map(function(movie){\n      return movie.id;\n   }).indexOf(req.params.id); //Gets us the index of movie with given id.\n   \n   if(removeIndex === -1){\n      res.json({message: \"Not found\"});\n   } else {\n      movies.splice(removeIndex, 1);\n      res.send({message: \"Movie id \" + req.params.id + \" removed.\"});\n   }\n});</code></pre>\n\n\n\n<p>Check the route in the same way as we checked the other routes. On successful deletion(for example id 105), you will get the following output −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>{message: \"Movie id 105 removed.\"}</code></pre>\n\n\n\n<p>Finally, our&nbsp;<strong>movies.js</strong>&nbsp;file will look like the following.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar router = express.Router();\nvar movies = &#91;\n   {id: 101, name: \"Fight Club\", year: 1999, rating: 8.1},\n   {id: 102, name: \"Inception\", year: 2010, rating: 8.7},\n   {id: 103, name: \"The Dark Knight\", year: 2008, rating: 9},\n   {id: 104, name: \"12 Angry Men\", year: 1957, rating: 8.9}\n];\nrouter.get('/:id(&#91;0-9]{3,})', function(req, res){\n   var currMovie = movies.filter(function(movie){\n      if(movie.id == req.params.id){\n         return true;\n      }\n   });\n   \n   if(currMovie.length == 1){\n      res.json(currMovie&#91;0])\n   } else {\n      res.status(404);  //Set status to 404 as movie was not found\n      res.json({message: \"Not Found\"});\n   }\n});\nrouter.post('/', function(req, res){\n   //Check if all fields are provided and are valid:\n   if(!req.body.name ||\n      !req.body.year.toString().match(/^&#91;0-9]{4}$/g) ||\n      !req.body.rating.toString().match(/^&#91;0-9]\\.&#91;0-9]$/g)){\n      res.status(400);\n      res.json({message: \"Bad Request\"});\n   } else {\n      var newId = movies&#91;movies.length-1].id+1;\n      movies.push({\n         id: newId,\n         name: req.body.name,\n         year: req.body.year,\n         rating: req.body.rating\n      });\n      res.json({message: \"New movie created.\", location: \"/movies/\" + newId});\n   }\n});\n\nrouter.put('/:id', function(req, res) {\n   //Check if all fields are provided and are valid:\n   if(!req.body.name ||\n      !req.body.year.toString().match(/^&#91;0-9]{4}$/g) ||\n      !req.body.rating.toString().match(/^&#91;0-9]\\.&#91;0-9]$/g) ||\n      !req.params.id.toString().match(/^&#91;0-9]{3,}$/g)){\n      res.status(400);\n      res.json({message: \"Bad Request\"});\n   } else {\n      //Gets us the index of movie with given id.\n      var updateIndex = movies.map(function(movie){\n         return movie.id;\n      }).indexOf(parseInt(req.params.id));\n      \n      if(updateIndex === -1){\n         //Movie not found, create new\n         movies.push({\n            id: req.params.id,\n            name: req.body.name,\n            year: req.body.year,\n            rating: req.body.rating\n         });\n         res.json({\n            message: \"New movie created.\", location: \"/movies/\" + req.params.id});\n      } else {\n         //Update existing movie\n         movies&#91;updateIndex] = {\n            id: req.params.id,\n            name: req.body.name,\n            year: req.body.year,\n            rating: req.body.rating\n         };\n         res.json({message: \"Movie id \" + req.params.id + \" updated.\",\n            location: \"/movies/\" + req.params.id});\n      }\n   }\n});\n\nrouter.delete('/:id', function(req, res){\n   var removeIndex = movies.map(function(movie){\n      return movie.id;\n   }).indexOf(req.params.id); //Gets us the index of movie with given id.\n   \n   if(removeIndex === -1){\n      res.json({message: \"Not found\"});\n   } else {\n      movies.splice(removeIndex, 1);\n      res.send({message: \"Movie id \" + req.params.id + \" removed.\"});\n   }\n});\nmodule.exports = router;</code></pre>\n\n\n\n<p>This completes our REST API. Now you can create much more complex applications using this simple architectural style and Express.</p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; RESTFul APIs An API is always needed to create mobile applications, single page applications, use AJAX calls and provide data to clients. An popular architectural style of how to structure and name these APIs and the endpoints is called&nbsp;REST(Representational Transfer State).&nbsp;HTTP 1.1&nbsp;was designed keeping REST principles in mind. REST was introduced by&nbsp;Roy Fielding&nbsp;in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4165"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4165"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4165/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4165"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4165"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4165"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4166,"date":"2020-08-09T17:49:13","date_gmt":"2020-08-09T17:49:13","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2730"},"modified":"2020-08-09T17:49:13","modified_gmt":"2020-08-09T17:49:13","slug":"scaffolding","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/scaffolding/","title":{"rendered":"Scaffolding"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Scaffolding</h1>\n\n\n\n<p>Scaffolding allows us to easily create a&nbsp;<strong>skeleton for a web application</strong>. We manually create our public directory, add middleware, create separate route files, etc. A scaffolding tool sets up all these things for us so that we can directly get started with building our application.</p>\n\n\n\n<p>The scaffolder we will use is called&nbsp;<strong>Yeoman</strong>. It is a scaffolding tool built for&nbsp;<strong>Node.js</strong>&nbsp;but also has generators for several other frameworks (like flask, rails, django, etc.). To install Yeoman, enter the following command in your terminal −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g yeoman\n</code></pre>\n\n\n\n<p>Yeoman uses generators to scaffold out applications. To check out the generators available on&nbsp;<strong>npm</strong>&nbsp;to use with Yeoman, you can click on this&nbsp;<a href=\"http://yeoman.io/generators/\" target=\"_blank\" rel=\"noreferrer noopener\">link</a>. In this tutorial, we will use the&nbsp;<em>&#8216;generator-Express-simple&#8217;</em>. To install this generator, enter the following command in your terminal −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g generator-express-simple\n</code></pre>\n\n\n\n<p>To use this generator, enter the following command −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>yo express-simple test-app\n</code></pre>\n\n\n\n<p>You will be asked a few simple questions like what things you want to use with your app. Select the following answers, or if you already know about these technologies then go about choosing how you want them to be.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<pre class=\"wp-block-code\"><code>express-simple comes with bootstrap and jquery\n&#91;?] Select the express version you want: 4.x\n&#91;?] Do you want an mvc express app: Yes\n&#91;?] Select the css preprocessor you would like to use: sass\n&#91;?] Select view engine you would like to use: jade\n&#91;?] Select the build tool you want to use for this project: gulp\n&#91;?] Select the build tool you want to use for this project: gulp\n&#91;?] Select the language you want to use for the build tool: javascript\n   create public/sass/styles.scss\n   create public/js/main.js\n   create views/layout.jade\n   create views/index.jade\n   create views/404.jade\n   create app.js\n   create config.js\n   create routes/index.js\n   create package.json\n   create bower.json\nidentical .bowerrc\nidentical .editorconfig\nidentical .gitignore\nidentical .jshintrc\n   create gulpfile.js\n\nI'm all done. Running bower install &amp; npm install for you to install the\nrequired dependencies. If this fails, try running the command yourself.</code></pre>\n\n\n\n<p>It will then create a new application for you, install all the dependencies, add few pages to your application(home page, 404 not found page, etc.) and give you a directory structure to work on.</p>\n\n\n\n<p>This generator creates a very simple structure for us. Explore the many generators available for Express and choose the one that fits you right. Steps to working with all generators is the same. You will need to install a generator, run it using Yeoman; it will ask you some questions and then create a skeleton for your application based on your answers.</p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Scaffolding Scaffolding allows us to easily create a&nbsp;skeleton for a web application. We manually create our public directory, add middleware, create separate route files, etc. A scaffolding tool sets up all these things for us so that we can directly get started with building our application. The scaffolder we will use is called&nbsp;Yeoman. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4166"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4166"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4166/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4166"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4166"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4166"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4167,"date":"2020-08-09T17:50:22","date_gmt":"2020-08-09T17:50:22","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2732"},"modified":"2020-08-09T17:50:22","modified_gmt":"2020-08-09T17:50:22","slug":"error-handling-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/error-handling-2/","title":{"rendered":"Error Handling"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Error Handling</h1>\n\n\n\n<p>Error handling in Express is done using middleware. But this middleware has special properties. The error handling middleware are defined in the same way as other middleware functions, except that error-handling functions&nbsp;<strong>MUST have four arguments</strong>&nbsp;instead of three –&nbsp;<strong>err, req, res, next</strong>. For example, to send a response on any error, we can use −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>app.use(function(err, req, res, next) {\n   console.error(err.stack);\n   res.status(500).send('Something broke!');\n});</code></pre>\n\n\n\n<p>Till now we were handling errors in the routes itself. The error handling middleware allows us to separate our error logic and send responses accordingly. The next() method we discussed in middleware takes us to next&nbsp;<strong>middleware/route handler</strong>.</p>\n\n\n\n<p>For error handling, we have the&nbsp;<strong>next(err)</strong>&nbsp;function. A call to this function skips all middleware and matches us to the next error handler for that route. Let us understand this through an example.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n   //Create an error and pass it to the next function\n   var err = new Error(\"Something went wrong\");\n   next(err);\n});\n\n/*\n * other route handlers and middleware here\n * ....\n */\n\n//An error handling middleware\napp.use(function(err, req, res, next) {\n   res.status(500);\n   res.send(\"Oops, something went wrong.\")\n});\n\napp.listen(3000);</code></pre>\n\n\n\n<p>This error handling middleware can be strategically placed after routes or contain conditions to detect error types and respond to the clients accordingly.</p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Error Handling Error handling in Express is done using middleware. But this middleware has special properties. The error handling middleware are defined in the same way as other middleware functions, except that error-handling functions&nbsp;MUST have four arguments&nbsp;instead of three –&nbsp;err, req, res, next. For example, to send a response on any error, we [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4167"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4167"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4167/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4167"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4167"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4167"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4168,"date":"2020-08-09T17:51:39","date_gmt":"2020-08-09T17:51:39","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2734"},"modified":"2020-08-09T17:51:39","modified_gmt":"2020-08-09T17:51:39","slug":"debugging","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/debugging/","title":{"rendered":"Debugging"},"content":{"rendered":"\n<h1>ExpressJS &#8211; Debugging</h1>\n\n\n\n<p>Express uses the&nbsp;<a href=\"https://www.npmjs.com/package/debug\" target=\"_blank\" rel=\"noreferrer noopener\">Debug</a>&nbsp;module to internally log information about route matching, middleware functions, application mode, etc.</p>\n\n\n\n<p>To see all internal logs used in Express, set the DEBUG environment variable to&nbsp;<strong>Express:*</strong>&nbsp;when starting the app −</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>DEBUG = express:* node index.js\n</code></pre>\n\n\n\n<p>These logs are very helpful when a component of your app is not functioning right. This verbose output might be a little overwhelming. You can also restrict the DEBUG variable to specific area to be logged. For example, if you wish to restrict the logger to application and router, you can use the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>DEBUG = express:application,express:router node index.js\n</code></pre>\n\n\n\n<p>Debug is turned off by default and is automatically turned on in production environment. Debug can also be extended to meet your needs, you can read more about it at&nbsp;<a href=\"https://www.npmjs.com/package/debug\" target=\"_blank\" rel=\"noreferrer noopener\">its npm page.</a></p>\n","protected":false},"excerpt":{"rendered":"<p>ExpressJS &#8211; Debugging Express uses the&nbsp;Debug&nbsp;module to internally log information about route matching, middleware functions, application mode, etc. To see all internal logs used in Express, set the DEBUG environment variable to&nbsp;Express:*&nbsp;when starting the app − These logs are very helpful when a component of your app is not functioning right. This verbose output might [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4168"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4168"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4168/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4168"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4168"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4168"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2736,"date":"2020-08-09T18:03:27","date_gmt":"2020-08-09T18:03:27","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2736"},"modified":"2020-08-09T18:03:27","modified_gmt":"2020-08-09T18:03:27","slug":"mongodb-intro","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/mongodb-intro/","title":{"rendered":"MongoDB Intro"},"content":{"rendered":"\n<p>In this tutorial, we will discuss databases, and how to use them with Node/Express applications. It then goes on to show how we can use Mongoose to provide database access for the LocalLibrary website. It explains how object schema and models are declared, the main field types, and basic validation. It also briefly shows a few of the main ways in which you can access model data.</p>\n\n\n\n<p>Express apps can use many different databases, and there are several approaches you can use for performing Create, Read, Update and Delete (CRUD) operations. This tutorial provides a brief overview of some of the available options and then we will discuss mongoose for performing these CRUD operations.</p>\n\n\n\n<h3>What Databases Express.js can Use?</h3>\n\n\n\n<p>Express apps can use any database supported by Node (Express itself doesn&#8217;t define any specific additional behavior/requirements for database management). There are many popular options, including PostgreSQL, MySQL, Redis, SQLite, and MongoDB.</p>\n\n\n\n<p>When choosing a database, you should consider things like learning curve, performance, ease of replication/backup, cost, community support, etc. While there is no single best database, almost any of the popular solutions should be more than acceptable for a small-to-medium-sized site.</p>\n\n\n\n<h3>How we can Interact with the Database?</h3>\n\n\n\n<p>There are two common approaches for interacting with a database:</p>\n\n\n\n<p>1- Using the databases&#8217; native query language (like SQL)</p>\n\n\n\n<p>2- Using an Object Data Model or an Object Relational Model. An ODM/ORM represents the website&#8217;s data as JavaScript objects, which are then mapped to the underlying database. Some ORMs are tied to a specific database, while others provide a database-agnostic backend.</p>\n\n\n\n<p>The very best performance can be achieved by using native SQL, or whatever query language is supported by the database. ODM&#8217;s are often slower because they use translation code to map between objects and the database format, which may not use the most efficient database queries (this is particularly true if the ODM supports different database backends, and must make greater compromises in terms of what database features are supported).</p>\n\n\n\n<h3>Which ORM to Choose?</h3>\n\n\n\n<p>There are many ODM/ORM solutions available on the NPM site like:</p>\n\n\n\n<p><strong>1- Mongoose:</strong> Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.</p>\n\n\n\n<p><strong>2- Bookshelf:</strong> Features both promise-based and traditional callback interfaces, providing transaction support, eager/nested-eager relation loading, polymorphic associations, and support for one-to-one, one-to-many, and many-to-many relations. Works with PostgreSQL, MySQL, and SQLite3.</p>\n\n\n\n<p><strong>3- Waterline:</strong> An ORM extracted from the Express-based Sails web framework. It provides a uniform API for accessing numerous different databases, including Redis, MySQL, LDAP, MongoDB, and Postgres.</p>\n\n\n\n<p><strong>4- Objection:</strong> Makes it as easy as possible to use the full power of SQL and the underlying database engine (supports SQLite3, Postgres, and MySQL).</p>\n\n\n\n<p>As a general rule to follow is, you should consider both the features provided and the &#8220;community activity&#8221; (downloads, contributions, bug reports, quality of documentation, etc.) when selecting a solution. At the time of writing Mongoose is by far the most popular ODM, and is a reasonable choice if you&#8217;re using MongoDB for your database.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, we will discuss databases, and how to use them with Node/Express applications. It then goes on to show how we can use Mongoose to provide database access for the LocalLibrary website. It explains how object schema and models are declared, the main field types, and basic validation. It also briefly shows a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2736"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2736"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2736/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2736"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2736"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2736"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2738,"date":"2020-08-09T18:04:53","date_gmt":"2020-08-09T18:04:53","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2738"},"modified":"2020-08-09T18:04:53","modified_gmt":"2020-08-09T18:04:53","slug":"mongoose-setup","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/mongoose-setup/","title":{"rendered":"Mongoose Setup"},"content":{"rendered":"\n<h2>Introduction to Mongoose</h2>\n\n\n\n<p>we&#8217;re going to use the Mongoose ODM to access our Database data. Mongoose acts as a front end to MongoDB, an open-source NoSQL database that uses a document-oriented data model. A “collection” of “documents” in a MongoDB database is analogous to a “table” of “rows” in a relational database.</p>\n\n\n\n<h3>Installing Mongoose and MongoDB</h3>\n\n\n\n<p>Mongoose is installed in your project (package.json) like any other dependency — using NPM. To install it, use the following command inside your project folder:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install mongoose</code></pre>\n\n\n\n<p>Installing Mongoose adds all its dependencies, including the MongoDB database driver, but it does not install MongoDB itself. If you want to install a MongoDB server then you have to manually download installers for various operating systems and install it locally. You can also use cloud-based MongoDB instances.</p>\n\n\n\n<h3>Connecting to MongoDB Database</h3>\n\n\n\n<p>Mongoose requires a connection to a MongoDB database. You can require() and connect to a locally hosted database with mongoose.connect(), as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Import the mongoose module\nvar mongoose = require('mongoose');\n\n//Set up default mongoose connection\nvar mongoDB = 'mongodb://127.0.0.1/my_mongodb_database';\nmongoose.connect(mongoDB, { useNewUrlParser: true });\n\n//Get the default connection\nvar db = mongoose.connection;\n\n//Bind connection to error event (to get notification of connection errors)\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));</code></pre>\n\n\n\n<p>You can get the default Connection object with mongoose.connection. Once connected, the open event is fired on the Connection instance.</p>\n\n\n\n<p>Now, in the next lecture we will learn how we can create our database models.</p>\n","protected":false},"excerpt":{"rendered":"<p>Introduction to Mongoose we&#8217;re going to use the Mongoose ODM to access our Database data. Mongoose acts as a front end to MongoDB, an open-source NoSQL database that uses a document-oriented data model. A “collection” of “documents” in a MongoDB database is analogous to a “table” of “rows” in a relational database. Installing Mongoose and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2738"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2738"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2738/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2738"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2738"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2738"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2741,"date":"2020-08-09T18:06:22","date_gmt":"2020-08-09T18:06:22","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2741"},"modified":"2020-08-09T18:06:22","modified_gmt":"2020-08-09T18:06:22","slug":"mongoose-models","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/mongoose-models/","title":{"rendered":"Mongoose Models"},"content":{"rendered":"\n<p>Models are defined using the Schema interface. The Schema allows you to define the fields stored in each document along with their validation requirements and default values. In addition, you can define static and instance helper methods to make it easier to work with your data types, and also virtual properties that you can use like any other field, but which aren&#8217;t actually stored in the database.</p>\n\n\n\n<p>Schemas are then &#8220;compiled&#8221; into models using the mongoose.model() method. Once you have a model you can use it to find, create, update, and delete objects of the given type.</p>\n\n\n\n<h3>Defining schemas</h3>\n\n\n\n<p>The code fragment below shows how you might define a simple schema. First you require() mongoose, then use the Schema constructor to create a new schema instance, defining the various fields inside it in the constructor&#8217;s object parameter.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n  </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>    //Requiring Mongoose\nvar mongoose = require('mongoose');\n\n//Defining a schema\nvar Schema = mongoose.Schema;\n\nvar SomeModelSchema = new Schema({\n    a_string: String,\n    a_date: Date\n});</code></pre>\n\n\n\n<p>In the case above we just have two fields, a string and a date. In the next sections, we will show some of the other field types, validation, and other methods.</p>\n\n\n\n<h3>Creating Model</h3>\n\n\n\n<p>Models are created from schemas using the mongoose.model() method:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n  </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>    // Define schema\nlet Schema = mongoose.Schema;\n\nlet SomeModelSchema = new Schema({\n    a_string: String,\n    a_date: Date\n});\n\n// Compile model from schema\nlet SomeModel = mongoose.model('SomeModel', SomeModelSchema );</code></pre>\n\n\n\n<p>The first argument is the singular name of the collection that will be created for your model (Mongoose will create the database collection for the above model SomeModel above), and the second argument is the schema you want to use in creating the model.</p>\n\n\n\n<h3>Schema Types</h3>\n\n\n\n<p>A schema can have an arbitrary number of fields — each one represents a field in the documents stored in MongoDB. An example schema showing many of the common field types and how they are declared is shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> var schema = new Schema(\n      {\n      name: String,\n      binary: Buffer,\n      living: Boolean,\n  age: { type: Number, min: 15, max: 68, required: true },\n  mixed: Schema.Types.Mixed,\n  _someId: Schema.Types.ObjectId,\n  array: &#91;],\n})</code></pre>\n\n\n\n<p>Most of the SchemaTypes are self-explanatory. The exceptions are:</p>\n\n\n\n<p>1- ObjectId: Represents specific instances of a model in the database. For example, a book might use this to represent its author object. This will actually contain the unique ID (_id) for the specified object. We can use the populate() method to pull in the associated information when needed.</p>\n\n\n\n<p>2- Mixed: An arbitrary schema type.</p>\n","protected":false},"excerpt":{"rendered":"<p>Models are defined using the Schema interface. The Schema allows you to define the fields stored in each document along with their validation requirements and default values. In addition, you can define static and instance helper methods to make it easier to work with your data types, and also virtual properties that you can use [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2741"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2741"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2741/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2741"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2741"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2741"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2743,"date":"2020-08-09T18:07:41","date_gmt":"2020-08-09T18:07:41","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=2743"},"modified":"2020-08-09T18:07:41","modified_gmt":"2020-08-09T18:07:41","slug":"mongoose-validations","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/mongoose-validations/","title":{"rendered":"Mongoose Validations"},"content":{"rendered":"\n<h3>Mongoose Validation</h3>\n\n\n\n<p>Mongoose provides built-in and custom validators, and synchronous and asynchronous validators. It allows you to specify both the acceptable range of values and the error message for validation failure in all cases. The built-in validators include:</p>\n\n\n\n<p>1- All SchemaTypes have the built-in&nbsp;<strong>required</strong>&nbsp;validator. This is used to specify whether the field must be supplied in order to save a document.</p>\n\n\n\n<p>2- Numbers have&nbsp;<strong>min</strong>&nbsp;and&nbsp;<strong>max</strong>&nbsp;validators.</p>\n\n\n\n<p>3- Strings have&nbsp;<strong>enum</strong>&nbsp;specifies the set of allowed values for the field.</p>\n\n\n\n<p>Strings have&nbsp;<strong>match</strong>&nbsp;specifies a regular expression that the string must match.</p>\n\n\n\n<p>Strings have&nbsp;<strong>maxlength</strong>&nbsp;and&nbsp;<strong>minlength</strong>&nbsp;for the string.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var breakfastSchema = new Schema({\n    eggs: {\n    type: Number,\n    min: &#91;4, 'Too few eggs'],\n    max: 10,\n    required: &#91;true, 'Why no eggs?']\n  },\n  drink: {\n    type: String,\n    enum: &#91;'Coffee', 'Tea', 'Juice',]\n  }\n});\n  </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Mongoose Validation Mongoose provides built-in and custom validators, and synchronous and asynchronous validators. It allows you to specify both the acceptable range of values and the error message for validation failure in all cases. The built-in validators include: 1- All SchemaTypes have the built-in&nbsp;required&nbsp;validator. This is used to specify whether the field must be supplied [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[63],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2743"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2743"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2743/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2743"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2743"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2743"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]