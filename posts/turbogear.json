[{"id":153,"date":"2020-06-30T17:15:39","date_gmt":"2020-06-30T17:15:39","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=153"},"modified":"2020-12-15T11:29:22","modified_gmt":"2020-12-15T11:29:22","slug":"overview-3-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/overview-3-2/","title":{"rendered":"Overview"},"content":{"rendered":"\n<h2>What is Web Framework?</h2>\n\n\n\n<p>Web Application Framework or simply Web Framework represents a collection of libraries and modules, which enables a web application developer to write applications, without having to bother about low level details such as protocols, thread management, etc.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/web_frameworks.jpg\" alt=\"Web Frameworks\"/></figure>\n\n\n\n<h2>What is TurboGears?</h2>\n\n\n\n<p>TurboGears is a web application framework written in Python. Originally created by Kevin Dangoor in 2005, its latest version TurboGears (ver 2.3.7) is managed by a group of developers led by Mark Ramm and Florent Aide.</p>\n\n\n\n<p>TurboGears follows the Model-View-Controller paradigm as do most modern web frameworks like Rails, Django, Struts, etc.</p>\n\n\n\n<h2>Model View Controller</h2>\n\n\n\n<p>MVC is a software design pattern for developing web applications. A Model View Controller pattern is made up of three parts −</p>\n\n\n\n<ul><li><strong>Model</strong>&nbsp;− The lowest level of the pattern is responsible for maintaining data.</li><li><strong>View</strong>&nbsp;− This is responsible for displaying all or a portion of data to the user.</li><li><strong>Controller</strong>&nbsp;− Software Code that controls the interactions between the Model and View.</li></ul>\n\n\n\n<p>MVC is popular as it isolates the application logic from the user interface layer and supports separation of concerns. Here, the Controller receives all requests for the application and then works with the Model to prepare any data needed by the View. The View then uses the data prepared by the Controller to generate a final presentable response. The MVC abstraction can be graphically represented as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/mvc.jpg\" alt=\"MVC\"/></figure>\n\n\n\n<h3>The Model</h3>\n\n\n\n<p>The Model is responsible for managing the data of the application. It responds to the request from the view and it also responds to instructions from the controller to update itself.</p>\n\n\n\n<h3>The View</h3>\n\n\n\n<p>A presentation of data in a particular format, triggered by a controller&#8217;s decision to present the data. They are script based templating systems very easy to integrate with AJAX technology.</p>\n\n\n\n<h3>The Controller</h3>\n\n\n\n<p>The controller is responsible for responding to the user input and perform interactions on the data model objects. The Controller receives the input, it validates the input and then performs the business operation that modifies the state of the data model.</p>\n\n\n\n<p>TurboGears is built on top of a number of libraries and tools. These tools have changed between different versions of TurboGears. The components of current version (ver 2.3.7) are listed below.</p>\n\n\n\n<h2>SQLAlchemy</h2>\n\n\n\n<p>It is an open source SQL kit that provides Object relation mapping (ORM) for Python code.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/sqlalchemy.jpg\" alt=\"SQLAlchemy\"/></figure>\n\n\n\n<h3>Genshi</h3>\n\n\n\n<p>This templating engine is used to construct the front-end of TG applications. A web templating system combines a template with a certain data source to render dynamic web pages.</p>\n\n\n\n<h3>ToscaWidgets</h3>\n\n\n\n<p>It is a widget library for generating HTML forms with server side controls. Tosca also acts as a middleware to connect with JavaScript widgets and toolkits.</p>\n\n\n\n<h3>Gearbox</h3>\n\n\n\n<p>It provides a set of commands to manage projects and server TurboGears applications. TurboGears applications can be deployed on any WSGI compliant web server.</p>\n\n\n\n<p>The Web Server Gateway Interface (WSGI) has been adopted as a standard for Python web application development. WSGI is a specification for universal interface between web server and web applications. The wsgiref package is a reference implementation of WSGI. It is used to add WSGI support to web TurboGears web framework. The simple_server module in this package implements a simple HTTP server that serves WSGI applications. We shall be using it to test applications developed during this tutorial.</p>\n","protected":false},"excerpt":{"rendered":"<p>What is Web Framework? Web Application Framework or simply Web Framework represents a collection of libraries and modules, which enables a web application developer to write applications, without having to bother about low level details such as protocols, thread management, etc. What is TurboGears? TurboGears is a web application framework written in Python. Originally created [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/153"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=153"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/153/revisions"}],"predecessor-version":[{"id":4176,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/153/revisions/4176"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=153"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=153"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=153"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":155,"date":"2020-06-30T17:17:58","date_gmt":"2020-06-30T17:17:58","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=155"},"modified":"2020-12-15T11:29:22","modified_gmt":"2020-12-15T11:29:22","slug":"environment-3","status":"publish","type":"post","link":"https://python3.foobrdigital.com/environment-3/","title":{"rendered":"Environment"},"content":{"rendered":"\n<h2>Prerequisite</h2>\n\n\n\n<p>Python 2.6 or higher. Earlier versions of TurboGears were not compliant with Python 3.X. Latest version claims to work well on Python 3.X. However, official documentation of TurboGears is still based on Python 2.7 environment.</p>\n\n\n\n<p>The following command&nbsp;<strong>installs virtualenv</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install virtualenv\n</code></pre>\n\n\n\n<p>This command needs&nbsp;<strong>administrator</strong>&nbsp;privileges. Add&nbsp;<strong>sudo before pip</strong>&nbsp;on Linux/Mac OS. If you are on Windows, log in as Administrator. On Ubuntu virtualenv may be installed using its package manager.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sudo apt-get install virtualenv\n</code></pre>\n\n\n\n<p>Once installed, the new virtual environment is created in a folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mkdir newproj\ncd newproj\nvirtualenv venv\n﻿</code></pre>\n\n\n\n<p>To activate corresponding environment, on&nbsp;<strong>Linux/OS X</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>venv/bin/activate\n</code></pre>\n\n\n\n<p>on&nbsp;<strong>Windows</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>venv\\scripts\\activate\n</code></pre>\n\n\n\n<p>We are now ready to&nbsp;<strong>install TurboGears</strong>&nbsp;in this environment. A minimal installation of TurboGears is done by following command −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">pip install TurboGears2</pre>\n\n\n\n<p>The above command can be run directly without virtual environment for system wide installation.</p>\n\n\n\n<p>To install TurboGears along with development tools, use following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install tg.devtools</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Prerequisite Python 2.6 or higher. Earlier versions of TurboGears were not compliant with Python 3.X. Latest version claims to work well on Python 3.X. However, official documentation of TurboGears is still based on Python 2.7 environment. The following command&nbsp;installs virtualenv&nbsp;− This command needs&nbsp;administrator&nbsp;privileges. Add&nbsp;sudo before pip&nbsp;on Linux/Mac OS. If you are on Windows, log in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/155"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=155"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/155/revisions"}],"predecessor-version":[{"id":4175,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/155/revisions/4175"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=155"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=155"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=155"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":154,"date":"2020-06-30T17:19:58","date_gmt":"2020-06-30T17:19:58","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=154"},"modified":"2020-12-15T11:29:22","modified_gmt":"2020-12-15T11:29:22","slug":"first-program","status":"publish","type":"post","link":"https://python3.foobrdigital.com/first-program/","title":{"rendered":"First Program"},"content":{"rendered":"\n<p>TurboGears has a minimal mode that makes it possible to create single file applications quickly. Simple examples and services can be built quickly with minimal set of dependencies.</p>\n\n\n\n<p>Application class in a TG application is inherited from&nbsp;<strong>TGController</strong>&nbsp;class. Methods in this class are available for access by&nbsp;<strong>@expose</strong>&nbsp;decorator from&nbsp;<strong>tg</strong>&nbsp;module. In our first application,&nbsp;<strong>index()</strong>&nbsp;method is mapped as root of our application. The TGController class also needs to be imported from&nbsp;<strong>tg</strong>&nbsp;module.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">from tg import expose, TGController<br>class MyController(TGController):<br>   @expose()<br>   def index(self):<br>      return 'Hello World turbogears'</pre>\n\n\n\n<p>Next, set the application’s configuration and declare application object.&nbsp;<strong>AppConfig</strong>&nbsp;class constructor here takes two parameters – minimal attribute set to true and the controller class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>config = AppConfig(minimal = True, root_controller = RootController())\napplication = config.make_wsgi_app()</code></pre>\n\n\n\n<p>The&nbsp;<strong>make_wsgi_app()</strong>&nbsp;function here constructs application object.</p>\n\n\n\n<p>In order to serve this application, we now need to start the HTTP server. As mentioned earlier, we shall use&nbsp;<strong>simple_server</strong>&nbsp;module in&nbsp;<strong>wsgiref</strong>&nbsp;package to set up and start it. This module has&nbsp;<strong>make_server()</strong>&nbsp;method which requires port number and application object as arguments.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">from wsgiref.simple_server import make_server<br>server = make_server('', 8080, application)<br>server.serve_forever()</pre>\n\n\n\n<p>It means that our application is going to be served at port number 8080 of localhost.</p>\n\n\n\n<p>The following is the complete code of our first TurboGears application −</p>\n\n\n\n<p><strong>app.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from wsgiref.simple_server import make_server\nfrom tg import expose, TGController, AppConfig\n\nclass MyController(TGController):\n\n   @expose()\n   def index(self):\n      return 'Hello World TurboGears'\n\t\t \nconfig = AppConfig(minimal = True, root_controller = MyController())\napplication = config.make_wsgi_app()\n\nprint \"Serving on port 8080...\"\nserver = make_server('', 8080, application)\nserver.serve_forever()</code></pre>\n\n\n\n<p>Run the above script from Python shell.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Python app.py\n</code></pre>\n\n\n\n<p>Enter&nbsp;<strong>http://localhost:8080</strong>&nbsp;in browser’s address bar to view ‘Hello World TurboGears’ message.</p>\n\n\n\n<p>The&nbsp;<strong>tg.devtools</strong>&nbsp;of TurboGears contains Gearbox. It is a set of commands, which are useful for management of more complex TG projects. Full stack projects can be quickly created by the following Gearbox command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gearbox quickstart HelloWorld</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>TurboGears has a minimal mode that makes it possible to create single file applications quickly. Simple examples and services can be built quickly with minimal set of dependencies. Application class in a TG application is inherited from&nbsp;TGController&nbsp;class. Methods in this class are available for access by&nbsp;@expose&nbsp;decorator from&nbsp;tg&nbsp;module. In our first application,&nbsp;index()&nbsp;method is mapped as root [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/154"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=154"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/154/revisions"}],"predecessor-version":[{"id":4174,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/154/revisions/4174"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=154"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=154"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=154"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":152,"date":"2020-06-30T17:22:56","date_gmt":"2020-06-30T17:22:56","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=152"},"modified":"2020-12-15T11:29:22","modified_gmt":"2020-12-15T11:29:22","slug":"dependencies","status":"publish","type":"post","link":"https://python3.foobrdigital.com/dependencies/","title":{"rendered":"Dependencies"},"content":{"rendered":"\n<p>A TurboGears project contains the following directories −</p>\n\n\n\n<ul><li><strong>Config</strong>&nbsp;− Where project setup and configuration relies</li><li><strong>Controllers</strong>&nbsp;− All the project controllers, the logic of web application</li><li><strong>i018n</strong>&nbsp;− Translation files for the languages supported</li><li><strong>Lib</strong>&nbsp;− Utility python functions and classes</li><li><strong>Model</strong>&nbsp;− Database models</li><li><strong>Public Static Files</strong>&nbsp;− CSS, JavaScript and images</li><li><strong>Templates</strong>&nbsp;− Templates exposed by our controllers.</li><li><strong>Tests</strong>&nbsp;− The set of Tests done.</li><li><strong>Websetup</strong>&nbsp;− Functions to execute at application setup.</li></ul>\n\n\n\n<h2>How to Install a project</h2>\n\n\n\n<p>This project now needs to be installed. A&nbsp;<strong>setup.py</strong>&nbsp;is already provided in project’s base directory. Project dependencies get installed when this script is executed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Python setup.py develop\n</code></pre>\n\n\n\n<p>By default, following dependencies are installed at the time of project set up −</p>\n\n\n\n<ul><li>Beaker</li><li>Genshi</li><li>zope.sqlalchemy</li><li>sqlalchemy</li><li>alembic</li><li>repoze.who</li><li>tw2.forms</li><li>tgext.admin ≥ 0.6.1</li><li>WebHelpers2</li><li>babel</li></ul>\n\n\n\n<p>After installation, start serving the project on development server by issuing following command in shell −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Gearbox serve –reload –debug\n</code></pre>\n\n\n\n<p>Follow the above mentioned command to serve a pre-built example project. Open&nbsp;<strong>http://localhost:8080</strong>&nbsp;in browser. This readymade sample application gives a brief introduction about TurboGears framework itself.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/project_window.jpg\" alt=\"Project Window\"/></figure>\n\n\n\n<p>In this Hello project, the default controller is created in controllers directory as&nbsp;<strong>Hello/hello/controllers.root.py</strong>. Let us&nbsp;<strong>modify root.py</strong>&nbsp;with following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, flash\n\nclass RootController(BaseController):\n   movie = MovieController()\n   @expose()\n   def index(self):\n      return \"&lt;h1>Hello World&lt;/h1>\"\n\t\t\n   @expose()\n   def _default(self, *args, **kw):\n      return \"This page is not ready\"</code></pre>\n\n\n\n<p>Once a basic working application is ready, more views can be added in the controller class. In the&nbsp;<strong>Mycontroller</strong>&nbsp;class above, a new method&nbsp;<strong>sayHello()</strong>&nbsp;is added. The&nbsp;<strong>@expose()</strong>decorator attaches&nbsp;<strong>/sayHello</strong>&nbsp;URL to it. This function is designed to accept a name as a parameter from the URL.</p>\n\n\n\n<p>After starting server through ‘gearbox serve’ command,&nbsp;<strong>http://localhost:8080</strong>. Hello World message will be displayed in the browser, even if the following URLs are entered −</p>\n\n\n\n<p>http://localhost:8080/</p>\n\n\n\n<p>http://localhost:8080/index</p>\n\n\n\n<p>All these URLs are mapped to&nbsp;<strong>RootController.index()</strong>&nbsp;method. This class also has&nbsp;<strong>_default()</strong>&nbsp;method that will be invoked, whenever a URL is not mapped to any specific function. Response to URL is mapped to a function by @expose() decorator.</p>\n\n\n\n<p>It is possible to send a parameter to an exposed function from the URL. The following function reads the name parameter from URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose()\ndef sayHello(self, name):\n   return '&lt;h3>Hello %s&lt;/h3>' %name</code></pre>\n\n\n\n<p>The following output will be seen in the browser as response to the URL −&nbsp;<strong>http://localhost:8080/?name=MVL</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello MVL\n</code></pre>\n\n\n\n<p>TurboGears automatically maps URL parameters to function arguments. Our RootController class is inherited from BaseController. This is defined as&nbsp;<strong>base.py</strong>&nbsp;in the&nbsp;<strong>lib folder</strong>&nbsp;of application.</p>\n\n\n\n<p>Its code is as follow −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tg import TGController, tmpl_context\nfrom tg import request\n\n__all__ = &#91;'BaseController']\n\ndef __call__(self, environ, context):\n   tmpl_context.identity = request.identity\n   return TGController.__call__(self, environ, context)</code></pre>\n\n\n\n<p><strong>TGController.__call__</strong>&nbsp;dispatches to the Controller method the request is routed to.</p>\n","protected":false},"excerpt":{"rendered":"<p>A TurboGears project contains the following directories − Config&nbsp;− Where project setup and configuration relies Controllers&nbsp;− All the project controllers, the logic of web application i018n&nbsp;− Translation files for the languages supported Lib&nbsp;− Utility python functions and classes Model&nbsp;− Database models Public Static Files&nbsp;− CSS, JavaScript and images Templates&nbsp;− Templates exposed by our controllers. Tests&nbsp;− [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/152"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=152"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/152/revisions"}],"predecessor-version":[{"id":4173,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/152/revisions/4173"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=152"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=152"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=152"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":211,"date":"2020-07-01T10:38:14","date_gmt":"2020-07-01T10:38:14","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=211"},"modified":"2020-12-15T11:29:22","modified_gmt":"2020-12-15T11:29:22","slug":"serving-templates-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/serving-templates-2/","title":{"rendered":"Serving Templates"},"content":{"rendered":"\n<p>An Event though HTML content can be returned to the browser, for more advanced output, the use of template engine is always preferred. In a full stack project ‘quickstarted’ by gearbox, Genshi is enabled as the default template renderer. In a minimal application, however Genshi (or any other template engine, such as jinja) needs to be installed and enabled. Genshi template engine permits to write templates in pure xhtml and validates them to detect issues at compile time and prevent serving broken pages.</p>\n\n\n\n<p>Templates are referred to by using a dotted notation. In our Hello project a templates directory is provided to store template web pages. Hence&nbsp;<strong>sample.html</strong>&nbsp;will be referred as&nbsp;<strong>hello.templates.sample</strong>&nbsp;(extension not mentioned). TurboGears renders this template through an expose decorator to link controller method to it by&nbsp;<strong>tg.render_template()</strong>&nbsp;function.</p>\n\n\n\n<p>The exposed controller function returns a Python dictionary object. This dictionary object is in turn passed on to the linked template. Placeholders in template are filled with dictionary values.</p>\n\n\n\n<p>To begin with, let us display a web page with plain html script. The exposed controller returns a&nbsp;<strong>null dictionary object</strong>&nbsp;as we do not intend to send any data to be parsed inside the HTML script.</p>\n\n\n\n<h2>How to Creat a Sample HTML</h2>\n\n\n\n<p>Our <strong>sample.html</strong> is given below. Ensure that it is stored in templates directory of project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>TurboGears Templating Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;h2>Hello, Welcome to TurboGears!.&lt;/h2>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Add <strong>sample()</strong> function in <strong>root.py</strong> and expose sample.html through it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose(\"hello.templates.sample\")\n   def sample(self):\n      return {}</code></pre>\n\n\n\n<p>The following result will be displayed in the browser when a URL&nbsp;<strong>http://localhost:8080/sample</strong>&nbsp;is entered after starting the web server.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/display_result.jpg\" alt=\"Display Result\"/></figure>\n\n\n\n<p>As mentioned above, a dictionary object is sent as collection of parameters to a Genshi template. This template contains ‘place holders’, which are dynamically filled with parameters received from the controller.</p>\n\n\n\n<p>Let us change the <strong>sample()</strong> function to send a dictionary object to the sample template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose(\"hello.templates.sample\")\n   def sample(self,name):\n      mydata = {'person':name}\n      return mydata</code></pre>\n\n\n\n<p>Create <strong>sample.html</strong> in templates folder (<strong>templates\\sample.html</strong>)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>TurboGears Templating Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;h2>Hello, my name is ${person}!.&lt;/h2>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above HTML code,&nbsp;<strong>${person}</strong>&nbsp;is the placeholder. Enter&nbsp;<strong>http://localhost:8080/sample?name=MVL</strong>&nbsp;as URL in the browser. This URL is mapped to&nbsp;<strong>sample()</strong>&nbsp;method in our root controller. It returns a dictionary object. This is picked by linked template page sample.html in templates directory. The ${person} is then substituted by MVL in the web page.</p>\n\n\n\n<p>It is also possible to access the HTML form data in a controller function. HTML form uses to send form data.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/result.jpg\" alt=\"Result\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>An Event though HTML content can be returned to the browser, for more advanced output, the use of template engine is always preferred. In a full stack project ‘quickstarted’ by gearbox, Genshi is enabled as the default template renderer. In a minimal application, however Genshi (or any other template engine, such as jinja) needs to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/211"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=211"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/211/revisions"}],"predecessor-version":[{"id":4172,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/211/revisions/4172"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=211"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=211"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=211"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":210,"date":"2020-07-01T10:43:01","date_gmt":"2020-07-01T10:43:01","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=210"},"modified":"2020-12-15T11:29:22","modified_gmt":"2020-12-15T11:29:22","slug":"http-methods-2-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/http-methods-2-2/","title":{"rendered":"HTTP Methods"},"content":{"rendered":"\n<p>Http Protocol is the foundation of data communication in world wide web. Different methods of data retrieval from specified URL are defined in this protocol. Following table summarizes different http methods −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>HTTP Methods &amp; Description</th></tr><tr><td>1</td><td><strong>GET</strong>Sends data in unencrypted form to the server. Most common method.</td></tr><tr><td>2</td><td><strong>HEAD</strong>Same as GET, but without response body</td></tr><tr><td>3</td><td><strong>POST</strong>Used to send HTML form data to server. Data received by POST method is not cached by server.</td></tr><tr><td>4</td><td><strong>PUT</strong>Replaces all current representations of the target resource with the uploaded content.</td></tr><tr><td>5</td><td><strong>DELETE</strong>Removes all current representations of the target resource given by a URL</td></tr></tbody></table></figure>\n\n\n\n<h2>Creating an HTML Form</h2>\n\n\n\n<p>Let us create an HTML Form and send form data to a URL. Save the following script as login.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;form action = \"http://localhost:8080/login\" method = \"get\">\n         &lt;p>Enter Name:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"nm\" />&lt;/p>\n         &lt;p>&lt;input type = \"submit\" value = \"submit\" />&lt;/p>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Data entered in this form is to be submitted to <strong>‘/login’ URL</strong>. Now create a controller function <strong>loginpage()</strong> and expose the above html page to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose(\"hello.templates.login\")\n   def loginpage(self):\n      return {}</code></pre>\n\n\n\n<p>In order to receive the form data, provide a <strong>login()</strong> controller, which has form attributes as its parameters. Here <strong>‘nm’</strong> is name of text input field in login form, the same is used as a parameter of login() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose(\"hello.templates.sample\")\n   def login(self, nm):\n      name = nm\n      return {'person':name}</code></pre>\n\n\n\n<p>As it can be seen, data received from login form is being sent to sample.html template (used earlier). It is parsed by a&nbsp;<strong>Genshi template engine</strong>&nbsp;to generate the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/genshi_result.jpg\" alt=\"Genshi Result\"/></figure>\n\n\n\n<h2>POST Method</h2>\n\n\n\n<p>When HTML form uses POST method to dispatch data to the URL in action attribute, the form data is not exposed in URL. The encoded data is received in a&nbsp;<strong>dict</strong>&nbsp;argument by the controller function. The **<strong>kw</strong>&nbsp;argument below is the dictionary object holding for data.</p>\n\n\n\n<p>HTML form contains two input text fields.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n\t\n      &lt;form action = \"http://localhost:8080/marks\" method = \"post\">\n         &lt;p>Marks in Physics:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"phy\" />&lt;/p>\n         &lt;p>Marks in Maths:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"maths\" />&lt;/p>\n         &lt;p>&lt;input type = \"submit\" value = \"submit\" />&lt;/p>\n      &lt;/form>\n\t\t\n   &lt;/body>\t\n&lt;/html></code></pre>\n\n\n\n<p>The <strong>marks()</strong> controller receives form data and sends it to <strong>sample.html</strong> template. Code for <strong>root.py</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, request\n\nclass RootController(BaseController):\n   @expose(\"hello.templates.marks\")\n   def marksform(self):\n      return {}\n\t\t\n   @expose(\"hello.templates.sample\")\n   def marks(self, **kw):\n      phy = kw&#91;'phy']\n      maths = kw&#91;'maths']\n      ttl = int(phy)+int(maths)\n      mydata = {'phy':phy, 'maths':maths, 'total':ttl}\n      return mydata</code></pre>\n\n\n\n<p>Finally, the sample.html template is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>TurboGears Templating Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;h2>Hello, Welcome to TurboGears!.&lt;/h2>\n      &lt;h3>Marks in Physics: ${phy}.&lt;/h3>\n      &lt;h3>Marks in Maths: ${maths}.&lt;/h3>\n      &lt;h3>Total Marks: ${total}&lt;/h3>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Start the server (if not already running)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Gearbox server –reload –debug\n</code></pre>\n\n\n\n<p>Enter&nbsp;<strong>http://localhost::8080/marksform</strong>&nbsp;in browser</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/sample_template.jpg\" alt=\"Sample Template\"/></figure>\n\n\n\n<p>The&nbsp;<strong>sample.html</strong>&nbsp;will render following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/sample_html_result.jpg\" alt=\"Sample Html Result\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Http Protocol is the foundation of data communication in world wide web. Different methods of data retrieval from specified URL are defined in this protocol. Following table summarizes different http methods − Sr.No. HTTP Methods &amp; Description 1 GETSends data in unencrypted form to the server. Most common method. 2 HEADSame as GET, but without [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/210"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=210"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/210/revisions"}],"predecessor-version":[{"id":4171,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/210/revisions/4171"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=210"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=210"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=210"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":209,"date":"2020-07-01T11:11:20","date_gmt":"2020-07-01T11:11:20","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=209"},"modified":"2020-12-15T11:29:21","modified_gmt":"2020-12-15T11:29:21","slug":"genshi-template-language-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/genshi-template-language-2/","title":{"rendered":"Genshi Template Language"},"content":{"rendered":"\n<p>Genshi is a XML based template language. It is similar to&nbsp;<strong>Kid</strong>, which used to be the template engine for earlier versions of TurboGears. Genshi as well as Kid are inspired by other well-known template languages like&nbsp;<strong>HSLT, TAL</strong>&nbsp;and&nbsp;<strong>PHP</strong>.</p>\n\n\n\n<p>A Genshi template consists of processing directives. These Directives are elements and attributes in a template. Genshi directives are defined in a namespace http://genshi.edgewall.org/ . Hence this namespace needs to be declared in the root element of template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   lang = \"en\">\n...\n&lt;/html></code></pre>\n\n\n\n<p>Above declaration means that default namespace is set to XHTML and Genshi directives have ‘py’ prefix.</p>\n\n\n\n<h2>Genshi Directives</h2>\n\n\n\n<p>A number of directives are defined in Genshi. Following list enumerates Genshi directives −</p>\n\n\n\n<ul><li>py:if</li><li>py:choose</li><li>py:for</li><li>py:def</li><li>py:match</li><li>py:with</li><li>py:replace</li><li>py:content</li><li>py:attrs</li><li>py:strip</li></ul>\n\n\n\n<h2>Conditional Sections</h2>\n\n\n\n<p>Genshi provides two directives for conditional rendering of content− py:if and py:choose.</p>\n\n\n\n<h3>py:if</h3>\n\n\n\n<p>The contents of this directive’s element will be rendered only if the expression in <strong>if clause</strong>evaluates to true. Assuming that data in the template context is <strong>{‘foo’:True, ‘bar’:’Hello’}</strong>, the following directive −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div>\n   &lt;b py:if = \"foo\">${bar}&lt;/b>\n&lt;/div></code></pre>\n\n\n\n<p>will result in</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello\n</code></pre>\n\n\n\n<p>This output, however would not be rendered if&nbsp;<strong>‘foo’ is set to False</strong>.</p>\n\n\n\n<p>This directive can also be used as element. In this case <strong>&lt;py:if></strong> must be closed by corresponding <strong>&lt;/py:if></strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div>\n   &lt;py:if test = \"foo\">\n      &lt;b>${bar}&lt;/b>\n   &lt;/py:if>\n&lt;/div></code></pre>\n\n\n\n<h3>py:choose</h3>\n\n\n\n<p>The advanced conditional processing is possible with the use of&nbsp;<strong>py:choose</strong>&nbsp;in combination with&nbsp;<strong>py:when</strong>&nbsp;and&nbsp;<strong>py:otherwise</strong>&nbsp;directives. This feature is similar to&nbsp;<strong>switch – case</strong>construct in&nbsp;<strong>C/C++</strong>.</p>\n\n\n\n<p>Expression in <strong>py:choose</strong> directive is checked with different values identified with <strong>py:when</strong>alternatives and corresponding contents will be rendered. A default alternative can be provided in the form of <strong>py:otherwise</strong> directive.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div py:choose = \"foo”>\n   &lt;span py:when = \"0\">0&lt;/span>\n   &lt;span py:when = \"1\">1&lt;/span>\n   &lt;span py:otherwise = \"\">2&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>The following example illustrates use of&nbsp;<strong>py:choose</strong>&nbsp;and&nbsp;<strong>py:when</strong>&nbsp;directives. The HTML form posts data to /marks URL. The&nbsp;<strong>marks()</strong>&nbsp;function redirects marks and results in the form of a dictionary object to&nbsp;<strong>total.html</strong>&nbsp;template. The conditional display of&nbsp;<strong>result Pass/Fail</strong>&nbsp;is achieved by using&nbsp;<strong>py:choose</strong>&nbsp;and&nbsp;<strong>py:when</strong>&nbsp;directives.</p>\n\n\n\n<p>HTML script of entering marks (<strong>marks.html</strong>) is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;form action = \"http://localhost:8080/marks\" method = \"post\">\n         &lt;p>Marks in Physics:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"phy\" />&lt;/p>\n         &lt;p>Marks in Maths:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"maths\" />&lt;/p>\n         &lt;p>&lt;input type = \"submit\" value = \"submit\" />&lt;/p>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The complete code of <strong>root.py</strong> is as follows. The <strong>marks()</strong> controller is sending marks and result to <strong>total.html</strong> template −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, request\n\nclass RootController(BaseController):\n   @expose(\"hello.templates.marks\")\n      def marksform(self):\n      return {}\n\t\t\n   @expose(\"hello.templates.total\")\n      def marks(self, **kw):\n      phy = kw&#91;'phy']\n      maths = kw&#91;'maths']\n      ttl = int(phy)+int(maths)\n      avg = ttl/2\n\t\t\n      if avg ≥ 50:\n         mydata = {'phy':phy, 'maths':maths, 'total':ttl, 'result':2}\n      else:\n         mydata = {'phy':phy, 'maths':maths, 'total':ttl,'result':1}\n\t\n      return mydata</code></pre>\n\n\n\n<p>The <strong>total.html</strong> in templates folder receives dictionary data and parses it in html output conditionally as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   lang = \"en\">\n\t\n   &lt;head>\n      &lt;title>TurboGears Templating Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;h2>Hello, Welcome to TurboGears!.&lt;/h2>\n      &lt;h3>Marks in Physics: ${phy}.&lt;/h3>\n      &lt;h3>Marks in Maths: ${maths}.&lt;/h3>\n      &lt;h3>Total Marks: ${total}&lt;/h3>\n\t\t\n      &lt;div py:choose = \"result\">\n         &lt;span py:when = \"1\">&lt;h2>Result: Fail&lt;/h2>&lt;/span>\n         &lt;span py:when = \"2\">&lt;h2>Result: Pass&lt;/h2>&lt;/span>\n      &lt;/div>\n\t\t\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Start the server (if not already running)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Gearbox server –reload –debug\n</code></pre>\n\n\n\n<p>Enter&nbsp;<strong>http://localhost::8080/marksform</strong>&nbsp;in browser −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/result_window.jpg\" alt=\"Result Window\"/></figure>\n\n\n\n<p>The&nbsp;<strong>total.html</strong>&nbsp;will render following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/total_html.jpg\" alt=\"Total Html\"/></figure>\n\n\n\n<h3>py:for</h3>\n\n\n\n<p>Element in py:for directive is repeated for each item in an iterable, typically a Python List object. If <strong>items = [1,2,3]</strong> is present in a template context, it can be iterated upon by following py:for directive −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n   &lt;li py:for = \"item in items\">${item}&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>The following output will be rendered −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3</code></pre>\n\n\n\n<p>The following example shows HTML form data rendered in total.html template using py:for directive can also be used as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;py:for each = \"item in items\">\n   &lt;li>${item}&lt;/li>\n&lt;/py:for></code></pre>\n\n\n\n<h2>HTML Form Script</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n\t\n      &lt;form action = \"http://localhost:8080/loop\" method=\"post\">\n         &lt;p>Marks in Physics:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"phy\" />&lt;/p>\n         &lt;p>Marks in Chemistry:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"che\" />&lt;/p>\n         &lt;p>Marks in Maths:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"maths\" />&lt;/p>\n         &lt;p>&lt;input type = \"submit\" value = \"submit\" />&lt;/p>\n      &lt;/form>\n\t\t\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The <strong>loop()</strong> controller reads form data and sends it to total.template in the form of a list object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, request\n\nclass RootController(BaseController):\n   @expose(\"hello.templates.marks\")\n   def marksform(self):\n   return {}\n\t\n   @expose(\"hello.templates.temp\")\n   def loop(self, **kw):\n      phy = kw&#91;'phy']\n      maths = kw&#91;'maths']\n      che = kw&#91;'che']\n      l1 = &#91;]\n      l1.append(phy)\n      l1.append(che)\n      l1.append(maths)\n\t\t\n   return ({'subjects':&#91;'physics', 'Chemistry', 'Mathematics'], 'marks':l1})</code></pre>\n\n\n\n<p>The temp.html template uses py:for loop to render contents of dict object in the form of a table.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\" \n   xmlns:py = \"http://genshi.edgewall.org/\" lang = \"en\">\n\t\n   &lt;body>\n      &lt;b>Marks Statement&lt;/b>\n      &lt;table border = '1'>\n         &lt;thead>\n            &lt;py:for each = \"key in subjects\">&lt;th>${key}&lt;/th>&lt;/py:for>\n         &lt;/thead>\n         &lt;tr>\n            &lt;py:for each = \"key in marks\">&lt;td>${key}&lt;/td>&lt;/py:for>\n         &lt;/tr>\n      &lt;/table>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Start the server (if not already running)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gearbox server –reload –debug\n</code></pre>\n\n\n\n<p>Enter&nbsp;<strong>http://localhost::8080/marksform</strong>&nbsp;in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/window_result.jpg\" alt=\"Window Result\"/></figure>\n\n\n\n<p>The following output will be displayed in the browser when the above form is submitted.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/form_output.jpg\" alt=\"Form Output\"/></figure>\n\n\n\n<h3>py:def</h3>\n\n\n\n<p>This directive is used to create a macro. A macro is a reusable snippet of template code. Much like a Python function, it has a name and can optionally have parameters. Output of this macro can be inserted at any place in a template.</p>\n\n\n\n<p>The py:def directive follows the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p py:def = \"greeting(name)\">\n   Hello, ${name}!\n&lt;/p></code></pre>\n\n\n\n<p>This macro can be rendered with a variable value to ‘name’ parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>${greeting('world')}\n${greeting('everybody)}</code></pre>\n\n\n\n<p>This directive can also be used with another version of syntax as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;py:def function = \"greeting(name)\">\n   &lt;p>Hello, ${name}! &lt;/p>\n&lt;/py:def></code></pre>\n\n\n\n<p>In following example, <strong>macro()</strong> controller in <strong>root.py</strong> sends a <strong>dict</strong> object with two keys name1 and name2 to macro.html template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, request\n\nclass RootController(BaseController):\n   @expose('hello.templates.macro')\n   def macro(self):\n      return {'name1':'TutorialPoint', 'name2':'TurboGears'\n}</code></pre>\n\n\n\n<p>This macro.html template contains definition of a macro called greeting. It is used to generate greeting message for data received from controller.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   lang = \"en\">\n\t\n   &lt;body>\n      &lt;h2>py:def example&lt;/h2>\n\t\t\n      &lt;div>\n         &lt;div py:def = \"greeting(name)\">\n            Hello, Welcome to ${name}!\n         &lt;/div>\n\t\t\t\t\n         &lt;b>\n            ${greeting(name1)}\n            ${greeting(name2)}\n         &lt;/b>\n\t\t\t\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Start the server using gearbox</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gearbox serve –reload –debug\n</code></pre>\n\n\n\n<p>Invoke macro() controller by entering following URL in browser −</p>\n\n\n\n<p>http://localhost:8080/macro</p>\n\n\n\n<p>Following output will be rendered in the browser −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/def_example.jpg\" alt=\"Def Example\"/></figure>\n\n\n\n<h3>py:with</h3>\n\n\n\n<p>This directive lets you assign expressions to local variables. These local variables make expression inside less verbose and more efficient.</p>\n\n\n\n<p>Assuming that x = 50 is given in context data for a template, following will be the py:with directive −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div>\n   &lt;span py:with = \"y = 50; z = x+y\">$x $y $z&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>It will result in the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>50 50 100\n</code></pre>\n\n\n\n<p>An alternative version for py:with directive is also available −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div>\n   &lt;py:with = \"y = 50; z = x+y\">$x $y $z&lt;/py:with>\n&lt;/div></code></pre>\n\n\n\n<p>In the following example, macro() controller returns a dict object with name, phy and maths keys.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, request\n\nclass RootController(BaseController):\n   @expose('hello.templates.macro')\n   def macro(self):\n      return {'name':'XYZ', 'phy':60, 'maths':70}</code></pre>\n\n\n\n<p>The template macro.html adds values of phy and maths keys using py:with directive.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   lang = \"en\">\n\t\n   &lt;body>\n      &lt;h2>py:with example&lt;/h2>\n      &lt;h3>Marks Statement for : ${name}!&lt;/h3>\n\t\t\n      &lt;b>Phy: $phy Maths: $maths\n         &lt;span py:with = \"ttl = phy+maths\">Total: $ttl&lt;/span>\n      &lt;/b>\n\t\t\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>The browser will render the following output in response to the URL&nbsp;<strong>http://localhost:8080/macro</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/py_for_example.jpg\" alt=\"Py:for Example\"/></figure>\n\n\n\n<h2>Structure Manipulation Directives</h2>\n\n\n\n<p>The <strong>py:attrs</strong> directive adds, modifies or removes attributes from the element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n   &lt;li py:attrs = \"foo\">Bar&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>If <strong>foo = {‘class’:’collapse’}</strong> is present in a template context, which the above snippet will render.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n   &lt;li class = \"collapse\">Bar&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>The <strong>py:content</strong> directive replaces any nested content with the result of evaluating the expression −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n   &lt;li py:content = \"bar\">Hello&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>Given bar = ’Bye’ in the context data, this would produce</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n   &lt;li>Bye&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>The <strong>py:replace</strong> directive replaces the element itself with the result of evaluating the expression −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div>\n   &lt;span py:replace = \"bar\">Hello&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>Given bar = ’Bye’ in the context data, it would produce</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div>\n   Bye\n&lt;/div></code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Genshi is a XML based template language. It is similar to&nbsp;Kid, which used to be the template engine for earlier versions of TurboGears. Genshi as well as Kid are inspired by other well-known template languages like&nbsp;HSLT, TAL&nbsp;and&nbsp;PHP. A Genshi template consists of processing directives. These Directives are elements and attributes in a template. Genshi directives [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/209"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=209"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/209/revisions"}],"predecessor-version":[{"id":4170,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/209/revisions/4170"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=209"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=209"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=209"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":208,"date":"2020-07-01T11:13:33","date_gmt":"2020-07-01T11:13:33","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=208"},"modified":"2020-12-15T11:29:21","modified_gmt":"2020-12-15T11:29:21","slug":"includes","status":"publish","type":"post","link":"https://python3.foobrdigital.com/includes/","title":{"rendered":"Includes"},"content":{"rendered":"\n<p>Contents of another XML document (especially HTML document) can be included by using inclusion tags in the current document. In order to enable such an inclusion, XInclude namespace must be declared in the root element of the HTML document.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\" xmlns:xi = \"http://www.w3.org/2001/XInclude ></code></pre>\n\n\n\n<p>The above declaration specifies that include directive contains <strong>‘xi’</strong> prefix. To add contents of another html page in the current document, use xi:include directive as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;xi:include href = \"somepage.html\" />\n</code></pre>\n\n\n\n<p>In the following example, root.py contains include() controller, which exposes include.html.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, request\n\nclass RootController(BaseController):\n   @expose('hello.templates.include')\n   def include(self):\n      return {}</code></pre>\n\n\n\n<h2>Heading and Footer HTML</h2>\n\n\n\n<p>In include.html, include namespace is declared and contents of heading.html and footer.html are added. Here is the HTML script of templates\\include.html −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\" \n   xmlns:xi = \"http://www.w3.org/2001/XInclude\">\n\t\n   &lt;head>\n      &lt;title>TurboGears Templating Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;xi:include href = \"heading.html\" />\n      &lt;h2>main content &lt;/h2>\n      &lt;xi:include href = \"footer.html\" />\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Here is the templates\\heading.html code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>TurboGears Templating Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;h1>This is page Header&lt;/h1>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The following is the templates\\footer.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>TurboGears Templating Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;h3>This is page footer&lt;/h3>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Start the development using a gearbox and enter&nbsp;<strong>http://localhost:8080/include</strong>&nbsp;in the browser. The output rendered will be as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/template_example.jpg\" alt=\"Template Examples\"/></figure>\n\n\n\n<p>This way the modular construction of views can be achieved. If the resource mentioned in xi:include directive is not available, an error will be raised. In such a case an alternative resource may be loaded by using xi:fallback.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;xi:include href = “main.html”>\n   &lt;xi:fallback href = ”default.html”/>\n&lt;/xi.include></code></pre>\n\n\n\n<p>Inclusion of content can be made dynamic as href attribute that can contain expressions.</p>\n\n\n\n<p>Add following controller in root.py.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose('hello.templates.ref-include')\n   def refinclude(self):\n      return {'pages':&#91;'heading','main','footer']}</code></pre>\n\n\n\n<p>Save following code as ref-include.html in templates folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   xmlns:xi = \"http://www.w3.org/2001/XInclude\">\n\t\n   &lt;head>\n      &lt;title>TurboGears Templating Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;xi:include href = \"${name}.html\" py:for = \"name in pages\" />\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Before starting the server make sure that templates folder has a heading.html, main.html and footer.html. Enter&nbsp;<strong>http://localhost:8082/refinclude</strong>&nbsp;in the browser to get the following output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/footer_template.jpg\" alt=\"Footer Template\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Contents of another XML document (especially HTML document) can be included by using inclusion tags in the current document. In order to enable such an inclusion, XInclude namespace must be declared in the root element of the HTML document. The above declaration specifies that include directive contains ‘xi’ prefix. To add contents of another html page in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/208"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=208"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/208/revisions"}],"predecessor-version":[{"id":4169,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/208/revisions/4169"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=208"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=208"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=208"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":207,"date":"2020-07-01T11:14:45","date_gmt":"2020-07-01T11:14:45","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=207"},"modified":"2020-12-15T11:29:21","modified_gmt":"2020-12-15T11:29:21","slug":"json-rendering","status":"publish","type":"post","link":"https://python3.foobrdigital.com/json-rendering/","title":{"rendered":"JSON Rendering"},"content":{"rendered":"\n<p>The <strong>@expose()</strong> decorator by default renders html content. However, this can be set to <strong>json content type</strong>. TurboGears supports json rendering through <strong>tg.jsonify.JSONEncoder (<em>**kwargs</em>)</strong> class. To render json data simply pass json as content type to expose decorator.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose('json')\ndef jsondata(self, **kwargs):\n   return dict(hello = 'World')</code></pre>\n\n\n\n<p>If &#8216;/jsondata&#8217; URL is entered in browser, it will respond by showing −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"hello\": \"World\"}\n</code></pre>\n\n\n\n<h2>jsonp Rendering</h2>\n\n\n\n<p>jsonp stands for json with padding. It works similar to json output except for the fact that it provides an application/javascript response with a call to a javascript function providing all the values returned by the controller as function arguments.</p>\n\n\n\n<p>To enable jsonp rendering you must first append it to the list of required engines inside your application – <strong>config/app_cfg.py</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>base_config.renderers.append('jsonp')\n</code></pre>\n\n\n\n<p>Write your expose decorator as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose('json')\n@expose('jsonp')\ndef jsonpdata (self, **kwargs): \n   return dict(hello = 'World')</code></pre>\n\n\n\n<p>When accessing /jsonpdata?callback = callme, you should see −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>callme({\"hello\": \"World\"});</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The @expose() decorator by default renders html content. However, this can be set to json content type. TurboGears supports json rendering through tg.jsonify.JSONEncoder (**kwargs) class. To render json data simply pass json as content type to expose decorator. If &#8216;/jsondata&#8217; URL is entered in browser, it will respond by showing − jsonp Rendering jsonp stands for json with padding. It [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/207"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=207"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/207/revisions"}],"predecessor-version":[{"id":4168,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/207/revisions/4168"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=207"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=207"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=207"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":198,"date":"2020-07-01T11:17:01","date_gmt":"2020-07-01T11:17:01","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=198"},"modified":"2020-12-15T11:29:21","modified_gmt":"2020-12-15T11:29:21","slug":"url-hierarchy","status":"publish","type":"post","link":"https://python3.foobrdigital.com/url-hierarchy/","title":{"rendered":"URL Hierarchy"},"content":{"rendered":"\n<p>Sometimes, a web application may require a URL structure that is having more than one level. TurboGears can traverse object hierarchy to find appropriate method that can handle your request.</p>\n\n\n\n<p>A project ‘quickstarted’ with gearbox has a BaseController class in project’s lib folder. It is available as ‘Hello/hello/lib/base.py’. It serves as base class for all sub controllers. In order to add a sub level of URL in application, design a sub class called BlogController derived from BaseController.</p>\n\n\n\n<p>This BlogController has two controller functions, index() and post(). Both are designed to expose a template each, blog.html and post.html.</p>\n\n\n\n<p><strong>Note</strong> − These templates are put inside a sub folder − templates/blog</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class BlogController(BaseController):\n\n   @expose('hello.templates.blog.blog')\n   def index(self):\n      return {}\n\t\t\n   @expose('hello.templates.blog.post')\n   def post(self):\n      from datetime import date\n      now = date.today().strftime(\"%d-%m-%y\")\n      return {'date':now}</code></pre>\n\n\n\n<p>Now declare an object of this class in RootController class (in root.py) as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class RootController(BaseController):\n   blog = BlogController()</code></pre>\n\n\n\n<p>Other controller functions for top level URLs will be there in this class as earlier.</p>\n\n\n\n<p>When a URL&nbsp;<strong>http://localhost:8080/blog/</strong>&nbsp;is entered, it will be mapped to index() controller function inside BlogController class. Similarly,&nbsp;<strong>http://localhost:8080/blog/post</strong>&nbsp;will invoke post() function.</p>\n\n\n\n<p>The code for blog.html and post.html is as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Blog.html\n\n&lt;html>\n   &lt;body>\n      &lt;h2>My Blog&lt;/h2>\n   &lt;/body>\n&lt;/html>\n\npost.html\n\n&lt;html>\n   &lt;body>\n      &lt;h2>My new post dated $date&lt;/h2>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>When a URL&nbsp;<strong>http://localhost:8080/blog/</strong>&nbsp;is entered, it will produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/blog.jpg\" alt=\"Blog\"/></figure>\n\n\n\n<p>When a URL&nbsp;<strong>http://localhost:8080/blog/post</strong>&nbsp;is entered, it will produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/blog_post.jpg\" alt=\"Blog Post\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Sometimes, a web application may require a URL structure that is having more than one level. TurboGears can traverse object hierarchy to find appropriate method that can handle your request. A project ‘quickstarted’ with gearbox has a BaseController class in project’s lib folder. It is available as ‘Hello/hello/lib/base.py’. It serves as base class for all [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/198"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=198"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/198/revisions"}],"predecessor-version":[{"id":4167,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/198/revisions/4167"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=198"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=198"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=198"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":206,"date":"2020-07-01T11:20:54","date_gmt":"2020-07-01T11:20:54","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=206"},"modified":"2020-12-15T11:29:21","modified_gmt":"2020-12-15T11:29:21","slug":"toscawidgets-forms","status":"publish","type":"post","link":"https://python3.foobrdigital.com/toscawidgets-forms/","title":{"rendered":"ToscaWidgets Forms"},"content":{"rendered":"\n<p>One of the most essential aspect of any web application is to present the user interface for a user. HTML provides a &lt;form&gt; tag which is used to design an interface. Form’s elements such as text input, radio, select etc. can be appropriately used. Data entered by the user is submitted in the form of Http request message to server side script by either GET or POST method.</p>\n\n\n\n<p>Server side script has to recreate the form elements from http request data. So in this effect, the form elements have to be defined twice – once in HTML and again in server side script.</p>\n\n\n\n<p>Another disadvantage of using HTML form is that it is difficult (if not impossible) to render the form elements dynamically. HTML itself provides no way to validate user’s input.</p>\n\n\n\n<h2>ToscaWidgets2</h2>\n\n\n\n<p>TurboGears relies on ToscaWidgets2, a flexible form rendering and validation library. Using ToscaWidgets, we can define the form fields in our Python script and render them using a HTML template. It is also possible to apply validation to tw2 field.</p>\n\n\n\n<p>ToscaWidgets library is a collection of many modules. Some important modules are listed below −</p>\n\n\n\n<ul><li><strong>tw2.core</strong>&nbsp;− It provides core functionality. Widgets in this module are not meant to be available for end-user.</li><li><strong>tw2.forms</strong>&nbsp;− This is a basic forms library. It contains widgets for fields, fieldsets and forms.</li><li><strong>tw2.dynforms</strong>&nbsp;− This contains dynamic forms functionality.</li><li><strong>tw2.sqla</strong>&nbsp;− This is an interface for SQLAlchemy database.</li></ul>\n\n\n\n<h3>tw2.forms</h3>\n\n\n\n<p>It contains a Form class, which acts as a base for custom forms. There is a TableForm class that is useful in rendering fields in a two column table. ListForm presents its fields in an unordered list.The following table shows the most commonly used types of fields in tw2.forms module −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Fields &amp; Description</th></tr><tr><td>1</td><td><strong>TextField</strong>A single line text input field</td></tr><tr><td>2</td><td><strong>TextArea</strong>Multi-line text input field</td></tr><tr><td>3</td><td><strong>CheckBox</strong>Presents a checkable rectangular box with label</td></tr><tr><td>4</td><td><strong>CheckBoxList</strong>Multi-selectable group pf check boxes</td></tr><tr><td>5</td><td><strong>RadioButton</strong>A toggle button to select/deselect</td></tr><tr><td>6</td><td><strong>RadioButtonList</strong>Group of mutually exclusive Radio buttons</td></tr><tr><td>7</td><td><strong>PasswordField</strong>Similar to Textfield but input keys are not revealed</td></tr><tr><td>8</td><td><strong>CalendarDatePicker</strong>Lets the user to choose a date</td></tr><tr><td>9</td><td><strong>SubmitButton</strong>Button to submit a form</td></tr><tr><td>10</td><td><strong>ImageButton</strong>Clickable button with an image on top</td></tr><tr><td>11</td><td><strong>SingleSelectField</strong>Enables selection of single item from a list</td></tr><tr><td>12</td><td><strong>MultipleSelectField</strong>Enables selection of multiple items from the list</td></tr><tr><td>13</td><td><strong>FileField</strong>Field for uploading file</td></tr><tr><td>14</td><td><strong>EmailField</strong>An email input field</td></tr><tr><td>15</td><td><strong>URLField</strong>An input field to enter URL</td></tr><tr><td>16</td><td><strong>NumberField</strong>A number spinbox</td></tr><tr><td>17</td><td><strong>RangeField</strong>A number slider</td></tr></tbody></table></figure>\n\n\n\n<p>In the following example, a form using some of these widgets is constructed. While most of these widgets are defined in tw2.forms, CalendarDateField is defined in tw2.Dynforms module. Hence both these modules along with tw2.core are imported in the beginning −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import tw2.core as twc\nimport tw2.forms as twf\nimport tw2.dynforms as twd</code></pre>\n\n\n\n<p>A ToscaWidgets form is a class derived from&nbsp;<strong>tw2.forms.form</strong>&nbsp;base class. The required widgets are placed inside a Layout object. In this example,&nbsp;<strong>TableLayout</strong>&nbsp;is used. The Widgets are rendered in a two column table. First column shows the caption and second column shows the input or selection field.</p>\n\n\n\n<p>A TextField object is created using the following constructor −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>twf.TextField(size, value = None)\n</code></pre>\n\n\n\n<p>If not mentioned TextField object takes a default size and is initially blank. While declaring TextArea object, the number of rows and columns may be mentioned.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>twf.TextArea(\"\",rows = 5, cols = 30)\n</code></pre>\n\n\n\n<p>The NumberField object is a TextField which can accept only digits. Up and down arrows are generated on the right border to increase or decrease the number inside it. Initial value can also be specified as an argument in the constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>twf.NumberField(value)\n</code></pre>\n\n\n\n<p>Just to the right of a CalendarDatePicker box, a calendar button is displayed. When pressed a date selector pops up. The user can manually type a date in the box or select from the date selector.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>twd.CalendarDatePicker()\n</code></pre>\n\n\n\n<p>EmailField object presents a TextField, but the text in it must be in email format.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>EmailID = twf.EmailField()\n</code></pre>\n\n\n\n<p>The following form also has a RadioButtonList. The constructor of this class contains a List object as a value of options parameter. A Radio Button for each option will be rendered. Default selection is specified with the value parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>twf.RadioButtonList(options = &#91;\"option1\",\"option2\"],value = option1)\n</code></pre>\n\n\n\n<p>The CheckBoxList renders check boxes for each option in the list.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>twf.CheckBoxList(options = &#91;option1, option2, option3])\n</code></pre>\n\n\n\n<p>The dropdown list is called as a SingleSelectfield in this ToscaWidgets library. Items in a List object corresponding to options parameter form the drop down list. Visible caption is set as a value of prompt_text parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>twf.SingleSelectField(prompt_text = 'text', options=&#91;'item1', 'item2', 'item3'])</code></pre>\n\n\n\n<p>By default, the form displays a Submit button with its caption as ‘save’. In order to display another caption, create a SubmitButton object and specify it as value parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>twf.SubmitButton(value = 'Submit')\n</code></pre>\n\n\n\n<p>The form is submitted to a URL, which is specified as a value of action parameter of the form. By default, the form data is submitted by http POST method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>action = 'URL'\n</code></pre>\n\n\n\n<p>In following code, a form named as AdmissionForm is designed using the above explained widgets. Add this code in root.py before RootController class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class AdmissionForm(twf.Form):\n   class child(twf.TableLayout):\n      NameOfStudent = twf.TextField(size = 20)\n      AddressForCorrespondance = twf.TextArea(\"\", rows = 5, cols = 30)\n      PINCODE = twf.NumberField(value = 431602)\n      DateOfBirth = twd.CalendarDatePicker()\n      EmailID = twf.EmailField()\n      Gender = twf.RadioButtonList(options = &#91;\"Male\",\"Female\"],value = 'Male')\n      Subjects = twf.CheckBoxList(options = &#91;'TurboGears', 'Flask', 'Django', 'Pyramid'])\n\n      MediumOfInstruction = twf.SingleSelectField(prompt_text = 'choose',\n         options = &#91;'English', 'Hindi', 'Marathi', 'Telugu'])\n\t\t\t\n      action = '/save_form'\n      submit = twf.SubmitButton(value ='Submit')</code></pre>\n\n\n\n<p>Now save this code below as <strong>twform.html</strong> in templates directory −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   lang = \"en\">\n   \n   &lt;head>\n      &lt;title>TurboGears Form Example&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"tw form\">\n         ${form.display(value = dict(title = 'default title'))}\n      &lt;/div>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>In RootController class (in root.py), add the following controller function −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose('hello.templates.twform')\ndef twform(self, *args, **kw):\n   return dict(page = 'twform', form = MovieForm)</code></pre>\n\n\n\n<p>In the AdmissionForm class, we have <strong>stipulated/save_form</strong> as action URL. Hence add <strong>save_form()</strong> function in RootController.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose()\ndef save_movie(self, **kw):\n   return str(kw)</code></pre>\n\n\n\n<p>Ensure that the server is running (using gearbox serve). Enter&nbsp;<strong>http://localhost:8080/twform</strong>in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/turbogears_forms.jpg\" alt=\"Forms\"/></figure>\n\n\n\n<p>Pressing the submit button will post this data to <strong>save_form()</strong> URL, which will display the form data in the form of a dictionary object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   'EmailID': u'lathkar@yahoo.com', \n   'NameOfStudent': u'Malhar Lathkar', \n   'Gender': u'Male', \n   'PINCODE': u'431602', \n   'DateOfBirth': u'2015-12-29', \n   'Subjects': &#91;u'TurboGears', u'Flask', u'Django'], \n   'MediumOfInstruction': u'', \n   'AddressForCorrespondance': u'Shivaji Nagar\\r\\nNanded\\r\\nMaharashtra'\n}</code></pre>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>One of the most essential aspect of any web application is to present the user interface for a user. HTML provides a &lt;form&gt; tag which is used to design an interface. Form’s elements such as text input, radio, select etc. can be appropriately used. Data entered by the user is submitted in the form of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/206"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=206"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/206/revisions"}],"predecessor-version":[{"id":4166,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/206/revisions/4166"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=206"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=206"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=206"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":205,"date":"2020-07-01T11:22:47","date_gmt":"2020-07-01T11:22:47","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=205"},"modified":"2020-12-15T11:29:21","modified_gmt":"2020-12-15T11:29:21","slug":"validation-3","status":"publish","type":"post","link":"https://python3.foobrdigital.com/validation-3/","title":{"rendered":"Validation"},"content":{"rendered":"\n<p>A good Forms widget library should have an input validation feature. For example, the user should be forced to enter data in a mandatory field, or verify if an email field contains a valid email, without resorting to any other programmatic means (like JavaScript function) for validation.</p>\n\n\n\n<p>Early versions of ToscaWidgets Forms Library used to rely on FormEncode module for validation support. ToscaWidgets2 now has built-in validation support available in tw2.core module. However, it is still possible to use FormEncode validation techniques.</p>\n\n\n\n<p>In order to subject a ToscaWidgets form to validation, @validate decorator is used.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@validate(form, error_handler, validators)\n</code></pre>\n\n\n\n<ul><li>The&nbsp;<strong>’form’</strong>&nbsp;is the ToscaWidgets form object to be validated.</li><li>The&nbsp;<strong>‘error-handler’</strong>&nbsp;is the controller method used to handle form errors.</li><li>The&nbsp;<strong>‘validators’</strong>&nbsp;are a dictionary object containing FormEncode validators.</li></ul>\n\n\n\n<h2>Types of Validators</h2>\n\n\n\n<p>The tw2.core module contains a validator class from which other validators are inherited. It is also possible to design a custom validator based on it. Some of the important validators are described below −</p>\n\n\n\n<p><strong>LengthValidator</strong> − Check whether a value has a prescribed length. Minimum and maximum limits are defined with min and max parameters. Custom messages for length below and above min and max can be specified as tooshort and toolong parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tw2.core.LengthValidator(min = minval, max = maxval, \n   msgs = { 'tooshort': (‘message for short length’), \n   'toolong': (‘message for long length)})</code></pre>\n\n\n\n<p><strong>RangeValidator</strong> − Usually used along with RangeField. It useful to validate value of a numeric field within minimum and maximum limits. Messages for tooshort and toolong parameters can be customized.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tw2.core.RangeValidator(min = minval, max = maxval, \n   msgs = { 'tooshort': (‘message for short length’), \n   'toolong': (‘message for long length)})</code></pre>\n\n\n\n<p><strong>IntValidator</strong> − This class is derived from the RangeValidator. This is normally used to validate if input in a normal text field is containing integer data. Minimum and maximum limits as well as error messages can be set. Additionally, error message for non-integer input can be specified as ‘notint’ parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tw2.core.IntValidator(msgs = {‘notint’:’Must be Integer’})\n</code></pre>\n\n\n\n<p><strong>OneOfValidator</strong> − This validator forces the user to select a value from the available options in the list only.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tw2.core.OneOfValidator(values = &#91;option1, option2,..], \n   msgs = {‘notinlist’:’Not in List’}}</code></pre>\n\n\n\n<p><strong>DateValidator</strong> − Very useful to ensure that user input is a valid date. Date format (default is Y-M-D) and error message are customizable. Minimum and maximum date limits can also be specified. DateTimeValidator is also available to verify object of DateTime class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tw2.core.DateValidator(msgs = {format = ’%Y-%m-%d’, \n   'baddatetime': ('baddate', ('Must follow date format $format_str'))}</code></pre>\n\n\n\n<p><strong>EmailValidator</strong> − Validates user input against a valid email address. This class is inherited from a more general RegexValidator.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tw2.core.EmailValidator(msgs = {'badregex': ('bademail', \n   ('Must be a valid email address')) }</code></pre>\n\n\n\n<p><strong>UrlValidator</strong> − This class is also inherited from RegexValidator. It validates the user input for a valid URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tw2.core.UrlValidator(msgs = {'badregex': ('badurl', ('Must be a valid URL’)) }</code></pre>\n\n\n\n<p><strong>MatchValidator</strong> − Confirms whether the value of one field is matched with the other. This is especially useful, where user is required to choose and confirm a password field. Typical usage of MatchValidator is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import tw2.core as twc\nimport tw2.forms as twf\n  \n  class AdmissionForm(twf.Form):\n      class child(twf.TableLayout):\n         validator = twc.MatchValidator('pw', 'pwconfirm')\n         pw = twf.PasswordField()\n         pwconfirm = twf.PasswordField()</code></pre>\n\n\n\n<p>It is also possible to construct a compound validator, where the validation is desired to succeed, if any one of checks pass. In other cases, you may want validation to succeed, only if the input passes all the checks. For this, tw2.core provides the Any and All validators, which are subclasses of the extendable CompoundValidator.</p>\n","protected":false},"excerpt":{"rendered":"<p>A good Forms widget library should have an input validation feature. For example, the user should be forced to enter data in a mandatory field, or verify if an email field contains a valid email, without resorting to any other programmatic means (like JavaScript function) for validation. Early versions of ToscaWidgets Forms Library used to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/205"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=205"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/205/revisions"}],"predecessor-version":[{"id":4165,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/205/revisions/4165"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=205"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=205"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=205"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":204,"date":"2020-07-01T11:24:36","date_gmt":"2020-07-01T11:24:36","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=204"},"modified":"2020-12-15T11:29:20","modified_gmt":"2020-12-15T11:29:20","slug":"flash-messages","status":"publish","type":"post","link":"https://python3.foobrdigital.com/flash-messages/","title":{"rendered":"Flash Messages"},"content":{"rendered":"\n<p>TurboGears provides a very convenient messaging system for notifying information to user in a non-obtrusive way. TGFlash class in tg module provides support for flashing messages that are stored in a plain cookie. This class supports fetching flash messages on server side as well as client side through JavaScript.</p>\n\n\n\n<p>The&nbsp;<strong>render()</strong>&nbsp;method of TGFlash class, when used from Python itself, can be invoked from template to render a flash message. If used on JavaScript, it provides a WebFlash object. It exposes&nbsp;<strong>payload()</strong>&nbsp;and&nbsp;<strong>render()</strong>&nbsp;methods to fetch current flash message and render it from JavaScript.</p>\n\n\n\n<p>When a TurboGears project is created using ‘quickstart’, it has a Master.html template. It contains the definition of a variable of that flash object. Contents of this flash message received from the controller substitutes the marked placeholder in this template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;py:with vars = \"flash = tg.flash_obj.render('flash', use_js = False)\">\n   &lt;div py:if = \"flash\" py:replace = \"Markup(flash)\" />\n&lt;/py:with></code></pre>\n\n\n\n<p>The&nbsp;<strong>tg.flash_obj</strong>&nbsp;is the WebFlash object, which is available inside any rendered template by including&nbsp;<strong>master.html</strong>&nbsp;template. This object permits to retrieve the current flash message and display it.</p>\n\n\n\n<p>The Flash messages are stored in a cookie (whose name by default is webflash) by using <strong>tg.flash()</strong> method. The message and status parameters are then passed to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tg.flash('Message', 'status')\n</code></pre>\n\n\n\n<p>If the method that is called flash performs a redirect, then the flash will be visible inside the redirected page. If the method directly exposes a template, then the flash will be visible inside the template itself.</p>\n\n\n\n<p>Appearance of flash message can be customized by applying CSS styling to status code. A ‘quickstarted’ project contains error, warning, info and ok status codes customized by a stylesheet public/css/style.css. More status codes with styles can also be added.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#flash > .warning {\n   color: #c09853;\n   background-color: #fcf8e3;\n   border-color: #fbeed5;\n}\n\n#flash > .ok {\n   color: #468847;\n   background-color: #dff0d8;\n   border-color: #d6e9c6;\n}\n\n#flash > .error {\n   color: #b94a48;\n   background-color: #f2dede;\n   border-color: #eed3d7;\n}\n\n#flash > .info {\n   color: #3a87ad;\n   background-color: #d9edf7;\n   border-color: #bce8f1;\n}</code></pre>\n\n\n\n<p>This external style sheet needs to be included in the template −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;link rel = \"stylesheet\" type = \"text/css\" media = \"screen\" \n   href = \"${tg.url('/css/style.css')}\" /></code></pre>\n\n\n\n<p>The configuration of any Flash message support can be achieved by setting parameters for configure() method of TGFlash object or in app_cfg.py (in config folder). The configurable parameters are −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameters &amp; Description</th></tr><tr><td>1</td><td><strong>flash.cookie_name</strong>Name of the cookie used to store flash messages. Default is&nbsp;<strong>webflash</strong>.</td></tr><tr><td>2</td><td><strong>flash.default_status</strong>Default message status if not specified (ok by default)</td></tr><tr><td>3</td><td><strong>flash.template</strong>Used as the&nbsp;<strong>flash template</strong>&nbsp;when rendered.</td></tr><tr><td>4</td><td><strong>flash.allow_html</strong>Turns&nbsp;<strong>on/off escaping in flash messages</strong>, by default HTML is not allowed.</td></tr><tr><td>5</td><td><strong>flash.js_call</strong>JavaScript code which will be run when displaying the flash from JavaScript. Default is&nbsp;<strong>webflash.render()</strong></td></tr><tr><td>6</td><td><strong>flash.js_template</strong><strong>string.Template</strong>&nbsp;instance used to replace full JavaScript support for flash messages.</td></tr></tbody></table></figure>\n\n\n\n<ul><li><strong>pop_payload()</strong>&nbsp;− function&nbsp;<strong>fetches current flash message, status</strong>&nbsp;and related information. Getting the flash message will delete the cookie.</li><li><strong>render(container_id, use_js=True)</strong>&nbsp;− Render the flash message inside template or provide Javascript support for them.</li><li><strong>container_id</strong>&nbsp;is the DIV where the messages will be displayed, while use_js switches between rendering the flash as HTML or for JavaScript usage.</li><li><strong>status</strong>&nbsp;− Get only current flash status, getting the flash status will delete the cookie.</li><li><strong>message</strong>&nbsp;− Get only current flash message, getting the flash message will delete the cookie.</li></ul>\n\n\n\n<h2>How to Make a Simple Flash Message?</h2>\n\n\n\n<p>In the following example, a flash() method is provided in the root controller class. It calls a flash() message which is rendered to the exposed template, flash.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, flash, redirect, request\n\nclass RootController(BaseController):\n   @expose('hello.templates.flash')\n   def flash(self, user = None):\n      \n      if user:\n         flash(message = \"Welcome \"+user,status = \"ok\")\n      else:\n         flash(message = \"Welcome Guest\",status = \"info\")\n      return {}</code></pre>\n\n\n\n<p>The code for making <strong>flash.html</strong> in the templates folder is as follows</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   xmlns:xi = \"http://www.w3.org/2001/XInclude\">\n\n   &lt;head>\n      &lt;title>TurboGears 2.3: Flash messages>/title>\n      &lt;link rel = \"stylesheet\" type = \"text/css\" media = \"screen\"\n         href = \"${tg.url('/css/style.css')}\" />\n\t\t\t\n      &lt;py:with vars = \"flash = tg.flash_obj.render('flash', use_js = False)\">\n         &lt;div py:if = \"flash\" py:replace = \"Markup(flash)\" />\n      &lt;/py:with>\n\t\t\n   &lt;/head>\n\n   &lt;body>\n      &lt;h2>Hello TurboGears&lt;/h2>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Start the server and enter&nbsp;<strong>http://localhost:8080/flash?user=MVL</strong>&nbsp;in the browser</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/flash_message.jpg\" alt=\"Flash Message\"/></figure>\n\n\n\n<p>Change URL to&nbsp;<strong>http://localhost:8080/flash</strong>&nbsp;and see the flash message differently formatted as per definition in style.css</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/message.jpg\" alt=\"Message\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>TurboGears provides a very convenient messaging system for notifying information to user in a non-obtrusive way. TGFlash class in tg module provides support for flashing messages that are stored in a plain cookie. This class supports fetching flash messages on server side as well as client side through JavaScript. The&nbsp;render()&nbsp;method of TGFlash class, when used [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/204"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=204"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/204/revisions"}],"predecessor-version":[{"id":4164,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/204/revisions/4164"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=204"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=204"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=204"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":203,"date":"2020-07-01T11:31:33","date_gmt":"2020-07-01T11:31:33","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=203"},"modified":"2020-12-15T11:29:20","modified_gmt":"2020-12-15T11:29:20","slug":"cookies-sessions","status":"publish","type":"post","link":"https://python3.foobrdigital.com/cookies-sessions/","title":{"rendered":"Cookies &#038; Sessions"},"content":{"rendered":"\n<p>It is often required to hold simple browsing data attached to a user’s browser. Sessions are the most commonly used technique. Session represents data which need not be stored in a more persistent form like disk file or database.</p>\n\n\n\n<p>However, sessiondata in TurboGears can be backed by filesystem, database or hashed cookie values. A small amount of session data is generally kept in cookies, but for the larger volume of session data MemCache is used.</p>\n\n\n\n<p>MemCache is a system-level daemon. It provides fast access to cached data and is extremely scalable. However, it is intended for use only on secure servers, and hence must be maintained and secured by sysadmin.</p>\n\n\n\n<h2>Beaker in Session Management</h2>\n\n\n\n<p>TurboGears uses Beaker for session management. A project quickstarted by gearbox is by default configured to use hashed cookies to store session data.</p>\n\n\n\n<p>Each time a client connects, the session middleware (Beaker) will inspect the cookie using the cookie name, which has been defined in the configuration file. If the cookie is not found, it will be set in the browser. On all subsequent visits, the middleware will find the cookie and make use of it.</p>\n\n\n\n<p>In order to enable session management, session class should be incorporated in the project by following import statement −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tg import session\n</code></pre>\n\n\n\n<p>To save the data in a session variable −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>session&#91;‘key’] = value\nsession.save()</code></pre>\n\n\n\n<p>To retrieve the session variable −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>session.delete()\n</code></pre>\n\n\n\n<p>Note that you need to explicitly save the session in order for your keys to be stored in that session.</p>\n\n\n\n<p>The <strong>delete()</strong> method of the session object will erase all the user sessions −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>session.delete()\n</code></pre>\n\n\n\n<p>Even though it’s not customary to delete all the user sessions on any given production environment, you will typically do it for cleaning up after usability or functional tests have been done.</p>\n\n\n\n<p>Given below is a simple example to demonstrate sessions. RootController class has a <strong>setsession()</strong> method which sets a session variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, session\nclass RootController(BaseController):\n   \n   @expose()\n   def setsession(self):\n      session&#91;'user'] = 'MVL'\n      session.save()\n      \n      str = \"&lt;b>sessionVariable set to \"+session&#91;'user'] \n      str = str+\"&lt;br>&lt;a href = '/getsession'>click here to retrieve&lt;/a>&lt;/b>\"\n      return str\n   \n   @expose()\n   def getsession(self):\n      return \"&lt;b>value of session variable retrieved \" +session&#91;'user'] +\"&lt;/b>\"</code></pre>\n\n\n\n<p>Enter&nbsp;<strong>http://localhost:8080/setsession</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/session.jpg\" alt=\"Session\"/></figure>\n\n\n\n<p>A link in the browser leads to&nbsp;<strong>http://localhost:8080/getsession</strong>&nbsp;which retrieves and displays the session variable −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/variable.jpg\" alt=\"Variable\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>It is often required to hold simple browsing data attached to a user’s browser. Sessions are the most commonly used technique. Session represents data which need not be stored in a more persistent form like disk file or database. However, sessiondata in TurboGears can be backed by filesystem, database or hashed cookie values. A small [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/203"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=203"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/203/revisions"}],"predecessor-version":[{"id":4163,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/203/revisions/4163"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=203"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=203"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=203"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":202,"date":"2020-07-01T11:32:55","date_gmt":"2020-07-01T11:32:55","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=202"},"modified":"2020-12-15T11:29:20","modified_gmt":"2020-12-15T11:29:20","slug":"caching","status":"publish","type":"post","link":"https://python3.foobrdigital.com/caching/","title":{"rendered":"Caching"},"content":{"rendered":"\n<p>In order to enhance the performance of a web application, especially if it is involved in lengthy operations, caching techniques are used. TurboGears provides two types of caching techniques −</p>\n\n\n\n<p><strong>Whole-page Caching</strong></p>\n\n\n\n<p>It works at the HTTP protocol level to avoid entire requests to the server by having either the user’s browser, or an intermediate proxy server (such as Squid) intercept the request and return a cached copy of the file.</p>\n\n\n\n<p><strong>Application-level Caching</strong></p>\n\n\n\n<p>This works within the application server to cache computed values, often the results of complex database queries, so that future requests can avoid needing to re-calculate the values. For web applications, application-level caching provides a flexible way to cache the results of complex queries so that the total load of a given controller method can be reduced to a few user-specific or case-specific queries and the rendering overhead of a template.</p>\n\n\n\n<h2>Application-level Caching</h2>\n\n\n\n<p>As mentioned earlier, ‘quickstarted’ TurboGears project is configured to enable Beaker package for caching support. Beaker supports the following back-ends used for cache storage −</p>\n\n\n\n<ul><li><strong>memory</strong>&nbsp;− Used for per-process storage. It is extremely fast.</li><li><strong>filesystem</strong>&nbsp;− per-process storage as well as multi-process.</li><li><strong>DBM database</strong>&nbsp;− per-process, multi-process, fairly fast.</li><li><strong>SQLAlchemy database</strong>&nbsp;− per-database-server storage. Slower compared to the above given options.</li><li><strong>Memcached</strong>&nbsp;− multi-server memory based cache.</li></ul>\n\n\n\n<h2>Controller Caching</h2>\n\n\n\n<p>For quick controller caching, a <strong>cached()</strong> decorator is available. The entire controller body is cached depending on various parameters of request. The definition of <strong>tg.decorators.cached()</strong> decorator is as follows</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tg.decorators.cached(key, expire, type, \n   query-args, cache_headers, invalidate_on_startup, cache_response)</code></pre>\n\n\n\n<p>The description of parameters is as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameters &amp; Description</th></tr><tr><td>1</td><td><strong>key</strong>Specifies the controller parameters used to generate the cache key.</td></tr><tr><td>2</td><td><strong>expire</strong>Time in seconds before cache expires, Defaults to “never”.</td></tr><tr><td>3</td><td><strong>Type</strong>dbm, memory, file, memcached, or None.</td></tr><tr><td>4</td><td><strong>cache_headers</strong>A tuple of header names indicating response headers.</td></tr><tr><td>5</td><td><strong>invalidate_on_startup</strong>If True, cache is invalidated each time application starts or is restarted.</td></tr><tr><td>6</td><td><strong>cache_response</strong>response should be cached or not, defaults to True.</td></tr></tbody></table></figure>\n\n\n\n<p>Following is an example of controller caching −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@cached(expire = 100, type = 'memory')\n@expose()\ndef simple(self):\n   return \"This is a cached controller!\"</code></pre>\n\n\n\n<h2>Template Level Caching</h2>\n\n\n\n<p>The Genshi template engine retrieves template from a cache if its contents have not changed. The default size of this cache is 25. By default, automatic reloading of templates is true. In order to improve performance, the following settings can be made in <strong>app_cfg.py</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;app:main]\ngenshi.max_cache_size = 100\nauto_reload_templates = false</code></pre>\n\n\n\n<p>To cache a template, you just have to return the&nbsp;<strong>tg_cache</strong>&nbsp;option from the controller that renders the cached template.</p>\n\n\n\n<p>The tg_cache is a dictionary that accepts the following keys −</p>\n\n\n\n<ul><li><strong>key</strong>&nbsp;− The cache key.&nbsp;<strong>Default:</strong>&nbsp;None.</li><li><strong>expire</strong>&nbsp;− how long the cache must stay alive.&nbsp;<strong>Default:</strong>&nbsp;never expires</li><li><strong>type</strong>&nbsp;− memory, dbm, memcached.&nbsp;<strong>Default:</strong>&nbsp;dbm.</li></ul>\n\n\n\n<p>The following example illustrates template caching −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose(hello.templates.user')\ndef user(self, username):\n   return dict(user = username, tg_cache = dict(key = user, expire = 900))</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In order to enhance the performance of a web application, especially if it is involved in lengthy operations, caching techniques are used. TurboGears provides two types of caching techniques − Whole-page Caching It works at the HTTP protocol level to avoid entire requests to the server by having either the user’s browser, or an intermediate [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/202"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=202"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/202/revisions"}],"predecessor-version":[{"id":4162,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/202/revisions/4162"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=202"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=202"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=202"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":199,"date":"2020-07-01T11:33:30","date_gmt":"2020-07-01T11:33:30","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=199"},"modified":"2020-12-15T11:29:20","modified_gmt":"2020-12-15T11:29:20","slug":"sqlalchemy","status":"publish","type":"post","link":"https://python3.foobrdigital.com/sqlalchemy/","title":{"rendered":"SQL Alchemy"},"content":{"rendered":"\n<p>Although it is possible to use SQL in TurboGears application to perform CRUD operations on any relational database, it is advisable to use SQLAlchemy, a Python toolkit is a powerful Object Relation Mapper that gives application developers the full power and flexibility of SQL. In addition to support for SQL based databases through SQLAlchemy, TurboGears also supports MongoDB database though Ming. In this section, the functionality of SQLAlchemy is discussed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/sql.jpg\" alt=\"Sql\"/></figure>\n\n\n\n<h2>What is ORM (Object Relational Mapping)?</h2>\n\n\n\n<p>Most programming language platforms are object oriented. The data in RDBMS servers on the other hand is stored as tables. Object relation mapping is a technique of mapping object parameters to underlying RDBMS table structure. An ORM API provides methods to perform CRUD operations without having to write raw SQL statements.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/orm.jpg\" alt=\"Orm\"/></figure>\n\n\n\n<p>When a TurboGears project is created using ‘quickstart’ command from gearbox toolkit, SQLAlchemy support is enabled by default by the following configuration settings −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>config&#91;'use_sqlalchemy'] = True\nconfig&#91;'sqlalchemy.url'] = 'sqlite:///devdata.db'</code></pre>\n\n\n\n<p>The ‘quickstarted’ project also creates a models package within it. For example, a ‘Hello’ project will have Hello\\hello\\model. The following files are created in this package −</p>\n\n\n\n<ul><li><strong>__init__.py</strong>&nbsp;− This is where the database access is set up. The application’s model objects are imported in this module. It also has a DBSession &#8211; a global session manager and also a DeclarativeBase, which is a base class for all the model classes.</li><li><strong>auth.py</strong>&nbsp;− This is where the models used by the authentication stack are defined. Additional database models are stored in this package, as a separate module, and added in the __init__.py.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Although it is possible to use SQL in TurboGears application to perform CRUD operations on any relational database, it is advisable to use SQLAlchemy, a Python toolkit is a powerful Object Relation Mapper that gives application developers the full power and flexibility of SQL. In addition to support for SQL based databases through SQLAlchemy, TurboGears [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/199"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=199"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/199/revisions"}],"predecessor-version":[{"id":4161,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/199/revisions/4161"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=199"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=199"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=199"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":200,"date":"2020-07-01T11:34:28","date_gmt":"2020-07-01T11:34:28","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=200"},"modified":"2020-12-15T11:29:20","modified_gmt":"2020-12-15T11:29:20","slug":"creating-models","status":"publish","type":"post","link":"https://python3.foobrdigital.com/creating-models/","title":{"rendered":"Creating Models"},"content":{"rendered":"\n<p>Let us add a student model which will set up a student table in our&nbsp;<strong>sqlite</strong>&nbsp;database.</p>\n\n\n\n<p><strong>Hello\\hello\\model\\student.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from sqlalchemy import *\nfrom sqlalchemy.orm import mapper, relation, relation, backref\nfrom sqlalchemy import Table, ForeignKey, Column\nfrom sqlalchemy.types import Integer, Unicode, DateTime\n\nfrom hello.model import DeclarativeBase, metadata, DBSession\nfrom datetime import datetime\n\nclass student(DeclarativeBase):\n   __tablename__ = 'student'\n\n   uid = Column(Integer, primary_key = True)\n   name = Column(Unicode(20), nullable = False, default = '')\n   city = Column(Unicode(20), nullable = False, default = '')\n   address = Column(Unicode(100), nullable = False, default = '')\n   pincode = Column(Unicode(10), nullable = False, default = '')</code></pre>\n\n\n\n<p>Now add this model in <strong>init_model()</strong> function inside <strong>__init__.py.</strong> This function already contains the auth model in it. Add our student model below it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Import your model modules here.\nfrom hello.model.auth import User, Group, Permission\nfrom hello.model.student import student</code></pre>\n\n\n\n<p>If you want the table to be initialized with some data at the time of setting up the models, add it in bootstrap.py in websetup package. Add the following statements in the <strong>bootstrap()</strong>function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>s1 = model.student()\ns1.name = 'M.V.Lathkar'\ns1.city = 'Nanded'\ns1.address = 'Shivaji Nagar'\ns1.pincode = '431602'\n\nmodel.DBSession.add(s1)\nmodel.DBSession.flush()\ntransaction.commit()</code></pre>\n\n\n\n<p>The Models are initialized by running setup-app command of gearbox −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gearbox setup-app\n</code></pre>\n\n\n\n<p>Session object of SQLAlchemy manages all persistence operations of ORM object.</p>\n","protected":false},"excerpt":{"rendered":"<p>Let us add a student model which will set up a student table in our&nbsp;sqlite&nbsp;database. Hello\\hello\\model\\student.py Now add this model in init_model() function inside __init__.py. This function already contains the auth model in it. Add our student model below it. If you want the table to be initialized with some data at the time of setting up the models, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/200"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=200"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/200/revisions"}],"predecessor-version":[{"id":4160,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/200/revisions/4160"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=200"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=200"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=200"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":201,"date":"2020-07-01T11:36:13","date_gmt":"2020-07-01T11:36:13","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=201"},"modified":"2020-12-15T11:29:20","modified_gmt":"2020-12-15T11:29:20","slug":"crud-operations","status":"publish","type":"post","link":"https://python3.foobrdigital.com/crud-operations/","title":{"rendered":"CRUD Operations"},"content":{"rendered":"\n<p>The following session methods perform CRUD Operations −</p>\n\n\n\n<ul><li><strong>DBSession.add(model object)</strong>&nbsp;− inserts a record into mapped table.</li><li><strong>DBSession.delete(model object)</strong>&nbsp;− deletes record from the table.</li><li><strong>DBSession.query(model).all()</strong>&nbsp;− retrieves all the records from table (corresponding to a SELECT query).</li></ul>\n\n\n\n<p>You can apply filter to the retrieved record set by using a filter attribute. For instance, in order to retrieve records with city = ’Hyderabad’ in students table, use the following statement −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DBSession.query(model.student).filter_by(city = ’Hyderabad’).all()</code></pre>\n\n\n\n<p>We shall now see how to interact with the models through controller URLs.</p>\n\n\n\n<p>First let us design a ToscaWidgets form for entering the student’s data</p>\n\n\n\n<p><strong>Hello\\hello\\controllers.studentform.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import tw2.core as twc\nimport tw2.forms as twf\n\nclass StudentForm(twf.Form):\n   class child(twf.TableLayout):\n      name = twf.TextField(size = 20)\n      city = twf.TextField()\n      address = twf.TextArea(\"\",rows = 5, cols = 30)\n      pincode = twf.NumberField()\n\n   action = '/save_record'\n   submit = twf.SubmitButton(value = 'Submit')</code></pre>\n\n\n\n<p>In the RootController (root.py of Hello application), add the following function mapping ‘/add’ URL −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.controllers.studentform import StudentForm\n\nclass RootController(BaseController):\n   @expose('hello.templates.studentform')\n   def add(self, *args, **kw):\n      return dict(page='studentform', form = StudentForm)</code></pre>\n\n\n\n<p>Save the following HTML code as <strong>studentform.html</strong> in the templates folder −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   lang = \"en\">\n   \n   &lt;head>\n      &lt;title>Student Registration Form&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"getting_started\">\n         ${form.display(value = dict(title = 'Enter data'))}\n      &lt;/div>\n   &lt;/body>\n\n&lt;/html></code></pre>\n\n\n\n<p>Enter&nbsp;<strong>http://localhost:8080/add</strong>&nbsp;in the browser after starting the server. The following Student information form will open up in the browser −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/registration.jpg\" alt=\"Registration\"/></figure>\n\n\n\n<p>The above form is designed to be submitted to the <strong>‘/save_record’</strong> URL. Hence a <strong>save_record()</strong> function needs to be added in the <strong>root.py</strong> to expose it. The data from the studentform is received by this function as a <strong>dict()</strong> object. It is used to add a new record in the student table underlying student model.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose()\n#@validate(form = AdmissionForm, error_handler = index1)\n\ndef save_record(self, **kw):\n   newstudent = student(name = kw&#91;'name'],city = kw&#91;'city'],\n      address = kw&#91;'address'], pincode = kw&#91;'pincode'])\n   DBSession.add(newstudent)\n   flash(message = \"new entry added successfully\")\n   redirect(\"/listrec\")</code></pre>\n\n\n\n<p>Please note that after the successful addition, the browser will be redirected to <strong>‘/listrec’ URL</strong>. This URL is exposed by a <strong>listrec() function</strong>. This function selects all records in the student table and sends them in the form of a dict object to the studentlist.html template. This <strong>listrec()</strong> function is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose (\"hello.templates.studentlist\")\ndef listrec(self):\n   entries = DBSession.query(student).all()\n   return dict(entries = entries)</code></pre>\n\n\n\n<p>The studentlist.html template iterates through the entries dictionary object using py:for directive. The studentlist.html template is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\">\n   \n   &lt;head>\n      &lt;link rel = \"stylesheet\" type = \"text/css\" media = \"screen\" \n         href = \"${tg.url('/css/style.css')}\" />\n      &lt;title>Welcome to TurboGears&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h1>Welcome to TurboGears&lt;/h1>\n      \n      &lt;py:with vars = \"flash = tg.flash_obj.render('flash', use_js = False)\">\n         &lt;div py:if = \"flash\" py:replace = \"Markup(flash)\" />\n      &lt;/py:with>\n      \n      &lt;h2>Current Entries&lt;/h2>\n      \n      &lt;table border = '1'>\n         &lt;thead>\n            &lt;tr>\n               &lt;th>Name&lt;/th>\n               &lt;th>City&lt;/th>\n               &lt;th>Address&lt;/th>\n               &lt;th>Pincode&lt;/th>\n            &lt;/tr>\n         &lt;/thead>\n         \n         &lt;tbody>\n            &lt;py:for each = \"entry in entries\">\n               &lt;tr>\n                  &lt;td>${entry.name}&lt;/td>\n                  &lt;td>${entry.city}&lt;/td>\n                  &lt;td>${entry.address}&lt;/td>\n                  &lt;td>${entry.pincode}&lt;/td>\n               &lt;/tr>\n            &lt;/py:for>\n         &lt;/tbody>\n         \n      &lt;/table>\n   \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Now revisit the&nbsp;<strong>http://localhost:8080/add</strong>&nbsp;and enter data in the form. By clicking on the submit button, it will take the browser to studentlist.html. It will also flash a ‘new record added successfully’ message.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/entries.jpg\" alt=\"Entries\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The following session methods perform CRUD Operations − DBSession.add(model object)&nbsp;− inserts a record into mapped table. DBSession.delete(model object)&nbsp;− deletes record from the table. DBSession.query(model).all()&nbsp;− retrieves all the records from table (corresponding to a SELECT query). You can apply filter to the retrieved record set by using a filter attribute. For instance, in order to retrieve [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/201"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=201"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/201/revisions"}],"predecessor-version":[{"id":4159,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/201/revisions/4159"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=201"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=201"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=201"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":197,"date":"2020-07-01T11:37:06","date_gmt":"2020-07-01T11:37:06","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=197"},"modified":"2020-12-15T11:29:19","modified_gmt":"2020-12-15T11:29:19","slug":"datagrid","status":"publish","type":"post","link":"https://python3.foobrdigital.com/datagrid/","title":{"rendered":"DataGrid"},"content":{"rendered":"\n<p>The ToscaWidgets contains a DataGrid control which provides a quick way to present data in tabular form. The DataGrid object is declared as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tw2.forms import DataGrid\nstudent_grid = DataGrid(fields = &#91;('Name', 'name'),('City', 'city'),\n   ('Address','address'), ('PINCODE', 'pincode')])</code></pre>\n\n\n\n<p>Now, showgrid() function retrieves all the records in student table and exposes the data to grid.html template. First the code for showgrid() function and then grid.html code is given below −</p>\n\n\n\n<h2>showgrid()</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose('hello.templates.grid')\ndef showgrid(self):\n   data = DBSession.query(student).all()\n   return dict(page = 'grid', grid = student_grid, data = data)</code></pre>\n\n\n\n<h2>grid.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   lang = \"en\">\n   \n   &lt;head>\n      &lt;title>Student Registration Form&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"getting_started\">\n         &lt;div>${grid.display(value = data)}&lt;/div>\n      &lt;/div>\n   &lt;/body>\n\n&lt;/html></code></pre>\n\n\n\n<p>The following tabular data will be displayed when&nbsp;<strong>http://localhost:8080/showlist</strong>&nbsp;URL is entered in the browser −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/form.jpg\" alt=\"Form\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The ToscaWidgets contains a DataGrid control which provides a quick way to present data in tabular form. The DataGrid object is declared as follows − Now, showgrid() function retrieves all the records in student table and exposes the data to grid.html template. First the code for showgrid() function and then grid.html code is given below [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/197"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=197"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/197/revisions"}],"predecessor-version":[{"id":4158,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/197/revisions/4158"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=197"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=197"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=197"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":191,"date":"2020-07-01T11:46:21","date_gmt":"2020-07-01T11:46:21","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=191"},"modified":"2020-12-15T11:29:19","modified_gmt":"2020-12-15T11:29:19","slug":"using-mongodb","status":"publish","type":"post","link":"https://python3.foobrdigital.com/using-mongodb/","title":{"rendered":"Using MongoDB"},"content":{"rendered":"\n<p>TurboGears also supports MongoDB document databases. It uses Ming, an Object Document Mapper API. Usage of Ming is very much similar to SQLAlchemy. Ming query language makes it possible to port SQLAlchemy based TurboGears project to Ming.</p>\n\n\n\n<h2>What is PyMongo</h2>\n\n\n\n<p>PyMongo is a Python distribution containing tools for working with MongoDB. Ming extends PyMongo providing −</p>\n\n\n\n<ul><li>Declarative Models</li><li>Schema Validation and Conversion</li><li>Schema Evolution</li><li>Pure InMemory MongoDB Implementation</li><li>Unit of Work</li><li>Identity Map</li><li>One-To-Many, Many-To-One and Many-To-Many Relations</li></ul>\n\n\n\n<p>First of all, you need to download and install MongoDB. The latest distribution of MongoDB can be downloaded from https://www.mongodb.org/downloads</p>\n\n\n\n<p>On Windows, start MongoDB server by providing -dbpath option −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\mongodb\\bin>Mongod --dbpath d:\\mongo\n</code></pre>\n\n\n\n<p><strong>D:\\mongo folder</strong> is designated to store MongoDB database. Server starts listening at <strong>http://localhost:27017.</strong> Now to start MongoDB shell use the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\mongodb\\bin>Mongo\n</code></pre>\n\n\n\n<p>Our MongoDB environment is now ready.</p>\n\n\n\n<p>Now create a TurboGears project with -ming option −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gearbox quickstart --ming Hello\n</code></pre>\n\n\n\n<p>This quickstarted project will provide an authentication and authorization layer like the one that is provided for the SQLAlchemy version. This application will now try to connect to a server on port 27017 on the local machine. The development.ini file in project folder contains the following settings −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ming.url = mongodb://localhost:27017/\nming.db = hello</code></pre>\n\n\n\n<p>Setup the project using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Python setup.py develop\n</code></pre>\n\n\n\n<p>The project folder contains models subfolder which has the following files −</p>\n\n\n\n<ul><li><em><strong>__init__.py</strong></em>&nbsp;− This is where the&nbsp;<strong>database</strong>&nbsp;access is set up. Your collections should be&nbsp;<strong>imported into this module</strong>. For example, we shall add student collection in this package.</li><li><em><strong>session.py</strong></em>&nbsp;− This file defines the&nbsp;<strong>session of your database connection</strong>. You will need to import this each time you have to declare a&nbsp;<strong>MappedClass</strong>&nbsp;to specify the session to&nbsp;<strong>perform queries</strong>.</li><li><em><strong>auth.py</strong></em>&nbsp;− This file will be created, if you have&nbsp;<strong>enabled authentication and authorization</strong>&nbsp;in the quickstart. It defines three collections&nbsp;<strong>repoze</strong>.who, which further relies on: User, Group, and Permission.</li></ul>\n\n\n\n<h2>Defining Your Collection</h2>\n\n\n\n<p>By default, TurboGears configures Ming in a declarative mode. This is similar to the SQLAlchemy declarative support and needs each model to inherit from the MappedClass class.</p>\n\n\n\n<p>The MappedClass requires that a __mongometa__ subclass is available inside, which further provides the details regarding the name of the collection storing the documents and the session used to store the documents.</p>\n\n\n\n<p>MappedClass also contains definition of fields in the document. Ming’s odm module has definitions of different types of field properties −</p>\n\n\n\n<ul><li>FieldProperty</li><li>ForeignIdProperty</li><li>RelationProperty</li></ul>\n\n\n\n<p>The&nbsp;<strong>ming.schema module</strong>&nbsp;defines the following data types −</p>\n\n\n\n<ul><li>ming.schema.Anything</li><li>ming.schema.Array</li><li>ming.schema.Binary</li><li>ming.schema.Bool</li><li>ming.schema.Float</li><li>ming.schema.Int</li><li>ming.schema.ObjectId</li><li>ming.schema.Scalar</li><li>ming.schema.String</li></ul>\n\n\n\n<p>To add the student collection in this model, save the following code as student.py in hello/models folder.</p>\n\n\n\n<h3>Hello\\models\\student.py</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from ming import schema\nfrom ming.odm import MappedClass\nfrom ming.odm import FieldProperty, ForeignIdProperty\nfrom hello.model import DBSession\n   \nClass student(MappedClass):\n   class __mongometa__:\n      session = DBSession\n      name = 'student'\n      \n   _id = FieldProperty(schema.ObjectId)\n   name = FieldProperty(schema.String(required = True))\n   city = FieldProperty(schema.String(if_missing = ''))\n   address = FieldProperty(schema.String(if_missing = ''))\n   pincode = FieldProperty(schema.String(if_missing = ''))</code></pre>\n\n\n\n<p>Finally, include this model in hello\\models\\__init__.py</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Import your model modules here.\nfrom hello.model.auth import User, Group, Permission\nfrom hello.model.student import student</code></pre>\n\n\n\n<p>To set up these models, run the following gearbox command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Gearbox setup-app\n</code></pre>\n\n\n\n<p>Start the server with the following gearbox command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Gearbox serve –reload –debug\n</code></pre>\n\n\n\n<p>Open the homepage of this application&nbsp;<strong>(http://localhost:8080/)</strong>&nbsp;and login with manager credentials. Admin page of this application will show the list of models set up. (login as manager, password managepass)</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/homepage_application.jpg\" alt=\"Homepage Application\"/></figure>\n\n\n\n<p>The creation of collections can also be verified in MongoDB web interface as well as the MongoDB shell.</p>\n\n\n\n<p>The ODMSession is used to perform several database operations using the following functions −</p>\n\n\n\n<ul><li>model.query.find()</li><li>model.query.find_and_modify()</li><li>model.remove()</li><li>model.update()</li><li>model.flush()</li></ul>\n\n\n\n<h2>Designing a ToscoWidget Form</h2>\n\n\n\n<p>We shall now design a ToscoWidget form to enter student data and add it into the table underlying the student model.</p>\n\n\n\n<p>Following is the code for creating a studentform.py −</p>\n\n\n\n<h3>Hello\\controllers\\studentform.py</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import tw2.core as twc\nimport tw2.forms as twf\n   \nclass StudentForm(twf.Form):\n\n   class child(twf.TableLayout):\n      name = twf.TextField(size = 20)\n      city = twf.TextField()\n      address = twf.TextArea(\"\",rows = 5, cols = 30)\n      pincode = twf.NumberField()\n\t\t\n   action = '/save_record'\n   submit = twf.SubmitButton(value = 'Submit') </code></pre>\n\n\n\n<p>In the application&#8217;s Rootcontroller &#8216;/add&#8217; URL that calls add() function, which will open the above designed form in the browser. Its submit button then invokes save_record() function. It retrieves the form data and saves it in student table and redirects the application to &#8216;/listrec&#8217; URL, which exposes the studentlist template.</p>\n\n\n\n<p>The root.py for this activity is as follows −</p>\n\n\n\n<h3>Hello/controllers/root.py</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, flash, redirect, request,url, lurl\nfrom tg import redirect, validate\nfrom hello import model\nfrom hello.model import DBSession\nfrom hello.model.student import student\n   \nfrom hello.controllers.studentform import StudentForm\n   \nclass RootController(BaseController):\n   @expose()\n   def index(self):\n      return \"&lt;h1>Hello World&lt;/h1>\"\n         \n   @expose (\"hello.templates.studentlist\")\n   def listrec(self):\n      entries = student.query.find()\n      return dict(entries = entries)\n               \n   @expose('hello.templates.studentform')\n   def add(self, *args, **kw):\n      return dict(page = 'studentform', form = StudentForm)\n         \n   @expose()\n   def save_record(self, **kw):\n      newstudent = student(name = kw&#91;'name'],city = kw&#91;'city'],\n         address = kw&#91;'address'], pincode = kw&#91;'pincode'])\n      DBSession.flush()\n      flash(message = \"new entry added successfully\")\n      redirect(\"/listrec\")</code></pre>\n\n\n\n<p>The following templates are created in the templates folder −</p>\n\n\n\n<h3>Hello\\templates\\studentform.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html xmlns = \"http://www.w3.org/1999/xhtml\" \n   xmlns:py = \"http://genshi.edgewall.org/\" lang = \"en\">\n\t\n   &lt;head>\n      &lt;title>Student Registration Form&lt;/title>\n   &lt;/head>\n\t\n\n   &lt;body>\n      &lt;div id = \"getting_started\">\n         ${form.display(value = dict(title = 'Enter data'))}\n      &lt;/div>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<h3>Hello\\templates\\studentlist.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\" \n   xmlns:py = \"http://genshi.edgewall.org/\">\n\n   &lt;head>\n      &lt;link rel = \"stylesheet\" type = \"text/css\" media = \"screen\" \n         href = ${tg.url('/css/style.css')}\" />\n      &lt;title>Welcome to TurboGears&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h1>Welcome to TurboGears&lt;/h1>\n\t\t\n      &lt;py:with vars = \"flash = tg.flash_obj.render('flash', use_js = False)\">\n         &lt;div py:if = \"flash\" py:replace = \"Markup(flash)\" />\n      &lt;/py:with>\n      \n      &lt;h2>Current Entries&lt;/h2>\n\t\t\n      &lt;table border = '1'>\n         &lt;thead>\n            &lt;tr>\n               &lt;th>Name&lt;/th>\n               &lt;th>City&lt;/th>\n               &lt;th>Address&lt;/th>\n               &lt;th>Pincode&lt;/th>\n            &lt;/tr>\n         &lt;/thead>\n         \n         &lt;tbody>\n            &lt;py:for each = \"entry in entries\">\n               &lt;tr>\n                  &lt;td>${entry.name}&lt;/td>\n                  &lt;td>${entry.city}&lt;/td>\n                  &lt;td>${entry.address}&lt;/td>\n                  &lt;td>${entry.pincode}&lt;/td>\n               &lt;/tr>\n            &lt;/py:for>\n         &lt;/tbody>\n      &lt;/table>\n\t\t\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Restart the server and enter&nbsp;<strong>http://localhost:8080/add</strong>&nbsp;in the browser −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/student_registration_form.jpg\" alt=\"Student Registration Form\"/></figure>\n\n\n\n<p>Each time the data is added and submit button is pressed, the list of current entries will be displayed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/new_entry_output.jpg\" alt=\"New Entry Output\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>TurboGears also supports MongoDB document databases. It uses Ming, an Object Document Mapper API. Usage of Ming is very much similar to SQLAlchemy. Ming query language makes it possible to port SQLAlchemy based TurboGears project to Ming. What is PyMongo PyMongo is a Python distribution containing tools for working with MongoDB. Ming extends PyMongo providing [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/191"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=191"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/191/revisions"}],"predecessor-version":[{"id":4157,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/191/revisions/4157"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=191"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=191"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=191"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":196,"date":"2020-07-01T11:46:25","date_gmt":"2020-07-01T11:46:25","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=196"},"modified":"2020-12-15T11:29:19","modified_gmt":"2020-12-15T11:29:19","slug":"pagination","status":"publish","type":"post","link":"https://python3.foobrdigital.com/pagination/","title":{"rendered":"Pagination"},"content":{"rendered":"\n<p>TurboGears provides a convenient decorator called paginate() to divide output in the pages. This decorator is combined with the expose() decorator. The @Paginate() decorator takes the dictionary object of query result as argument. In addition, the number of records per page are decided by value of items_per_page attribute. Ensure that you import paginate function from tg.decorators into your code.</p>\n\n\n\n<p>Rewrite listrec() function in root.py as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tg.decorators import paginate\nclass RootController(BaseController):\n   @expose (\"hello.templates.studentlist\")\n   @paginate(\"entries\", items_per_page = 3)\n\t\n   def listrec(self):\n      entries = DBSession.query(student).all()\n      return dict(entries = entries)</code></pre>\n\n\n\n<p>The items per page are set to be three.</p>\n\n\n\n<p>In the studentlist.html template, page navigation is enabled by adding tmpl_context.paginators.entries.pager() below the py:for directive. The code for this template should be as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\">\n   \n   &lt;head>\n      &lt;link rel = \"stylesheet\" type = \"text/css\" media = \"screen\" \n         href = \"${tg.url('/css/style.css')}\" />\n      &lt;title>Welcome to TurboGears&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      \n      &lt;h1>Welcome to TurboGears&lt;/h1>\n\t\t\n      &lt;py:with vars = \"flash = tg.flash_obj.render('flash', use_js = False)\">\n         &lt;div py:if = \"flash\" py:replace = \"Markup(flash)\" />\n      &lt;/py:with>\n      \n      &lt;h2>Current Entries&lt;/h2>\n\t\t\n      &lt;table border = '1'>\n         &lt;thead>\n            &lt;tr>\n               &lt;th>Name&lt;/th>\n               &lt;th>City&lt;/th>\n               &lt;th>Address&lt;/th>\n               &lt;th>Pincode&lt;/th>\n            &lt;/tr>\n         &lt;/thead>\n         \n         &lt;tbody>\n            &lt;py:for each = \"entry in entries\">\n               &lt;tr>\n                  &lt;td>${entry.name}&lt;/td>\n                  &lt;td>${entry.city}&lt;/td>\n                  &lt;td>${entry.address}&lt;/td>\n                  &lt;td>${entry.pincode}&lt;/td>\n               &lt;/tr>\n            &lt;/py:for>\n\t\t\t\t\n            &lt;div>${tmpl_context.paginators.entries.pager()}&lt;/div>\n         &lt;/tbody>\n         \n      &lt;/table>\n   \n   &lt;/body>\n\n&lt;/html></code></pre>\n\n\n\n<p>Enter&nbsp;<strong>http://localhost:8080/listrec</strong>&nbsp;in the browser. The first page of records in the table are displayed. On top of this table, links to page numbers are also seen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/record.jpg\" alt=\"Record\"/></figure>\n\n\n\n<h2>How to Add Pagination Support to Datagrid</h2>\n\n\n\n<p>It is also possible to add pagination support to datagrid. In the following example, paginated datagrid is designed to display action button. In order to activate action button datagrid object is constructed with following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>student_grid = DataGrid(fields = &#91;('Name', 'name'),('City', 'city'),\n   ('Address','address'), ('PINCODE', 'pincode'),\n   ('Action', lambda obj:genshi.Markup('&lt;a\n      href = \"%s\">Edit&lt;/a>' % url('/edit',\n      params = dict(name = obj.name)))) ])</code></pre>\n\n\n\n<p>Here the action button is linked to the name parameter of each row in the data grid.</p>\n\n\n\n<p>Rewrite the <strong>showgrid()</strong> function as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@expose('hello.templates.grid')\n@paginate(\"data\", items_per_page = 3)\n\ndef showgrid(self):\n   data = DBSession.query(student).all()\n   return dict(page = 'grid', grid = student_grid, data = data)</code></pre>\n\n\n\n<p>The browser shows paginated datagrid as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/registration_form.jpg\" alt=\"Registration Form\"/></figure>\n\n\n\n<p>By clicking the Edit button in the third row, it will redirect to the following URL&nbsp;<strong>http://localhost:8080/edit?name=Rajesh+Patil</strong></p>\n","protected":false},"excerpt":{"rendered":"<p>TurboGears provides a convenient decorator called paginate() to divide output in the pages. This decorator is combined with the expose() decorator. The @Paginate() decorator takes the dictionary object of query result as argument. In addition, the number of records per page are decided by value of items_per_page attribute. Ensure that you import paginate function from [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/196"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=196"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/196/revisions"}],"predecessor-version":[{"id":4156,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/196/revisions/4156"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=196"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=196"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=196"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":195,"date":"2020-07-01T11:46:28","date_gmt":"2020-07-01T11:46:28","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=195"},"modified":"2020-12-15T11:29:19","modified_gmt":"2020-12-15T11:29:19","slug":"admin-access","status":"publish","type":"post","link":"https://python3.foobrdigital.com/admin-access/","title":{"rendered":"Admin Access"},"content":{"rendered":"\n<p>TurboGears provides the tgext.admin extension, which is powered by tgext.crud and sprox. This Sprox is a package used for the creation of web widgets directly from the database schema. This can be used to automatically create simple administration pages and is the toolkit powering the /admin page in the newly quickstarted applications.</p>\n\n\n\n<p>By default, the admin will provide an autogenerated access to all the models imported in your project models/__init__.py.</p>\n\n\n\n<h2>How to Create TurboGears Admin</h2>\n\n\n\n<p>The default TurboGears admin is created as an object of AdminController class −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">from tgext.admin.controller import AdminController\n\nclass RootController(BaseController):\n   admin = AdminController(model, DBSession, config_type = TGAdminConfig)</pre>\n\n\n\n<p>This creates an admin for all the models with the default TurboGears admin configuration.</p>\n\n\n\n<p>Through the manager, a user has been created during the setup phase. Now, it is possible to get access to the TurboGears Admin at <strong>http://localhost:8080/admin</strong> The first time this page is accessed, it will ask for authentication. You can simply provide the username and password of the user that the setup-app command created for us −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Username: manager\nPassword: managepass</code></pre>\n\n\n\n<p>In order to login to the quickstarted project, add the following functions to the RootController class (controllers/root.py).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello.lib.base import BaseController\nfrom tg import expose, flash, redirect, request,url, lurl\nfrom tg import redirect, validate\nfrom hello import model\nfrom hello.model import DBSession\nfrom tgext.admin.tgadminconfig import BootstrapTGAdminConfig as TGAdminConfig\nfrom tgext.admin.controller import AdminController\nfrom tg.exceptions import HTTPFound\n\nclass RootController(BaseController):\n   admin = AdminController(model, DBSession, config_type =  TGAdminConfig)\n   \n   @expose('hello.templates.index')\n   def index(self):\n      return dict(page = 'index')\n   \n   @expose('hello.templates.login')\n   def login(self, came_from = lurl('/'), failure = None,    login = ''):\n\t\n      if failure is not None:\n         if failure == 'user-not-found':\n            flash(_('User not found'), 'error')\n         elif failure == 'invalid-password':\n            flash(_('Invalid Password'), 'error')\n\t\t\t\n      login_counter = request.environ.get('repoze.who.logins', 0)\n\t\t\n      if failure is None and login_counter > 0:\n         flash(_('Wrong credentials'), 'warning')\n\t\t \n      return dict(page = 'login', login_counter = str(login_counter), \n         came_from = came_from, login = login)\n   @expose()\n\t\n   def post_login(self, came_from = lurl('/')):\n      if not request.identity:\n         \n         login_counter = request.environ.get('repoze.who.logins', 0) + 1\n            redirect('/login', params = dict(came_from = came_from,\n            __logins = login_counter))\n\t\t\n         userid = request.identity&#91;'repoze.who.userid']\n         flash(('Welcome back, %s!') % userid)\n\t\t\t\n         return HTTPFound(location = came_from)</code></pre>\n\n\n\n<p>Login to the &#8216;quickstarted&#8217; application after starting the server and by visiting&nbsp;<strong>http://localhost:8080/login</strong>&nbsp;and then enter the manager credentials as displayed above. The browser will display an admin page like the one shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/admin_page.jpg\" alt=\"Admin pade\"/></figure>\n\n\n\n<p>The page shows all the models created in this application. You can click any model to see the listing of entries in it −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/student_listing.jpg\" alt=\"Student Listing\"/></figure>\n\n\n\n<p>The &#8216;New&#8217; button on top of this datagrid allows the record to be added. Similarly, action buttons for editing and deleting a record are also provided in actions column of this datagrid. A search box is also displayed to select records conditionally.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/turbogears/images/datagrid.jpg\" alt=\"DataGrid\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>TurboGears provides the tgext.admin extension, which is powered by tgext.crud and sprox. This Sprox is a package used for the creation of web widgets directly from the database schema. This can be used to automatically create simple administration pages and is the toolkit powering the /admin page in the newly quickstarted applications. By default, the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/195"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=195"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/195/revisions"}],"predecessor-version":[{"id":4155,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/195/revisions/4155"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=195"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=195"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=195"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":190,"date":"2020-07-01T11:46:31","date_gmt":"2020-07-01T11:46:31","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=190"},"modified":"2020-12-15T11:29:18","modified_gmt":"2020-12-15T11:29:18","slug":"authorization-authentication","status":"publish","type":"post","link":"https://python3.foobrdigital.com/authorization-authentication/","title":{"rendered":"Authorization &#038; Authentication"},"content":{"rendered":"\n<p>A TurboGears application is created by quickstart and setup-app options of the gearbox toolkit, which has the authorization and authentication support enabled by default. The models declared in auth.py are set up and initialized as per values assigned in bootstrap.py.</p>\n\n\n\n<p>The following models are declared in auth.py −</p>\n\n\n\n<h2>User Model</h2>\n\n\n\n<p>The User model contains the design of a tg_user table. This table is used by the repose.who package. This repose.who package is a powerful as well as an extensible authentication library for WSGI applications. The structure of a user model is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class User(DeclarativeBase):\n\n\"\"\"\n   __tablename__ = 'tg_user'\n   \n   user_id = Column(Integer, autoincrement = True, primary_key=True)\n   user_name = Column(Unicode(16), unique = True, nullable = False)\n   email_address = Column(Unicode(255), unique = True,nullable=False)\n                                             \n   display_name = Column(Unicode(255))\n   _password = Column('password', Unicode(128))\n   created = Column(DateTime, default = datetime.now)</code></pre>\n\n\n\n<p>This group model contains the definition tg_group table. Its definition is given in auth.py as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Group(DeclarativeBase):\n   __tablename__ = 'tg_group'\n   \n   group_id = Column(Integer, autoincrement = True,primary_key = True)\n   group_name = Column(Unicode(16),unique = True,nullable = False)\n   display_name = Column(Unicode(255))\n   created = Column(DateTime, default = datetime.now)</code></pre>\n\n\n\n<p>Another model permission is also set up, which contains permission definition.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Permission(DeclarativeBase):\n   __tablename__ = 'tg_permission'\n   \n   permission_id = Column(Integer,autoincrement = True,primary_key = True)\n   permission_name = Column(Unicode(63), unique = True, nullable = False)\n   description = Column(Unicode(255))</code></pre>\n\n\n\n<p>At the time of setting up models, the following data is added in these tables −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>u = model.User()\nu.user_name = 'manager'\nu.display_name = 'Example manager'\nu.email_address = 'manager@somedomain.com'\nu.password = 'managepass'\n\nmodel.DBSession.add(u)\ng = model.Group()\ng.group_name = 'managers'\ng.display_name = 'Managers Group'\ng.users.append(u)\n\nmodel.DBSession.add(g)\np = model.Permission()\np.permission_name = 'manage'\np.description = 'This permission gives an administrative right'\np.groups.append(g)\n\nmodel.DBSession.add(p)\nu1 = model.User()\nu1.user_name = 'editor'\nu1.display_name = 'Example editor'\nu1.email_address = 'editor@somedomain.com'\nu1.password = 'editpass'\n\nmodel.DBSession.add(u1)</code></pre>\n\n\n\n<h2>Predicate Model</h2>\n\n\n\n<p>The predicates module in tg package contains definitions for predicate checkers. A predicate is a condition that must be met for the user to be able to access the requested source. Such a predicate, or condition, may be made up of more predicates – those are called compound predicates. Action controllers, or controllers, may have only one predicate, be it single or compound.</p>\n\n\n\n<p>If a user is not logged in, or does not have the proper permissions, this predicate checker throws a 401 (HTTP Unauthorized), which is caught by the repoze.who middleware to display the login page allowing the user to login, and redirecting the user back to the proper page when they are done.</p>\n\n\n\n<p>The different conditions or predicates defined in tg.predicates module are −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>tg.predicates module &amp; Description</th></tr><tr><td>1</td><td><strong>All</strong>Check if all predicates specified are met</td></tr><tr><td>2</td><td><strong>Any</strong><strong>Check if at least one of specified predicates are met</strong></td></tr><tr><td>3</td><td><strong>is_user</strong>Check that the authenticated user&#8217;s username is the specified one</td></tr><tr><td>4</td><td><strong>in_group</strong>Check that the user belongs to the specific group.</td></tr><tr><td>5</td><td><strong>in_all_groups</strong>Check that the user belongs to all of the specified groups.</td></tr><tr><td>6</td><td><strong>in_any_group</strong>Check that the user belongs to at least one of the specified groups.</td></tr><tr><td>7</td><td><strong>is_anonymous</strong>Check that the current user is anonymous.</td></tr><tr><td>8</td><td><strong>has_permission</strong>Check that the current user has the specified permission.</td></tr><tr><td>9</td><td><strong>has_all_permissions</strong>Check that the current user has been granted all of the specified permissions.</td></tr><tr><td>10</td><td><strong>has_any_permission</strong>Check that the user has at least one of the specified permissions.</td></tr></tbody></table></figure>\n\n\n\n<p>For example, if you have a predicate, which is <strong>grant access user belonging to customers group</strong>, then you can use the following built-in predicate checker −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tg.predicates import in_group\np in_group(‘customers’)</code></pre>\n\n\n\n<p>The following predicate checker will grant access to ‘root’ user or anybody with ‘manage’ permission −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tg.predicates import Any, is_user, has_permission\np = Any(is_user('root'), has_permission('manage'), \n   sg = 'Only administrators can remove blog posts')</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>A TurboGears application is created by quickstart and setup-app options of the gearbox toolkit, which has the authorization and authentication support enabled by default. The models declared in auth.py are set up and initialized as per values assigned in bootstrap.py. The following models are declared in auth.py − User Model The User model contains the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/190"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=190"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/190/revisions"}],"predecessor-version":[{"id":4154,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/190/revisions/4154"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=190"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=190"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=190"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":193,"date":"2020-07-01T11:48:06","date_gmt":"2020-07-01T11:48:06","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=193"},"modified":"2020-12-15T11:29:18","modified_gmt":"2020-12-15T11:29:18","slug":"scaffolding","status":"publish","type":"post","link":"https://python3.foobrdigital.com/scaffolding/","title":{"rendered":"Scaffolding"},"content":{"rendered":"\n<p>Gearbox toolkit contains scaffold command, which is very useful to quickly create new components of TurboGears application. An application generated by quickstart command of gearbox has a skeleton template in the model folder (model.py.template), a templates folder (template.html.template) and a controllers folder (controller.py.template). These ‘.template’ files are used as basis for creating new scaffolds for an application</p>\n\n\n\n<p>For example, in order to create a new model named mymodel, simply run the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gearbox scaffold model mymodel\n</code></pre>\n\n\n\n<p>This command will generate model/mymodel.py with newmodel class defined in it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># -*- coding: utf-8 -*-\n\"\"\"Mymodel model module.\"\"\"\nfrom sqlalchemy import *\nfrom sqlalchemy import Table, ForeignKey, Column\nfrom sqlalchemy.types import Integer, Unicode, DateTime, LargeBinary\nfrom sqlalchemy.orm import relationship, backref\nfrom hello.model import DeclarativeBase, metadata, DBSession\n\nclass Mymodel(DeclarativeBase):\n   __tablename__ = 'mymodels'\n   \n   uid = Column(Integer, primary_key = True)\n   data = Column(Unicode(255), nullable = False)\n   \n   user_id = Column(Integer, ForeignKey('tg_user.user_id'), index = True)\n   user = relationship('User', uselist = False,\n      backref = backref('mymodels',cascade = 'all, delete-orphan'))\n   __all__ = &#91;'Mymodel']</code></pre>\n\n\n\n<p>The users can now make modifications in the table structure as per their requirement and then import it inside&nbsp;<strong>model/__init__.py</strong>&nbsp;to make the model available inside the application.</p>\n\n\n\n<p>In order to create a model, a controller class to handle it and an index page all these three components can be created simultaneously by the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gearbox scaffold model controller template mymodel\n</code></pre>\n\n\n\n<p>This command will result in controllers\\mymodel.py in which the MymodelController class is duly defined.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># -*- coding: utf-8 -*-\n\"\"\"Mymodel controller module\"\"\"\n\nfrom tg import expose, redirect, validate, flash, url\n# from tg.i18n import ugettext as _\n# from tg import predicates\n\nfrom hello.lib.base import BaseController\n# from hello.model import DBSession\n\nclass MymodelController(BaseController):\n   # Uncomment this line if your controller requires an authenticated user\n   # allow_only = predicates.not_anonymous()\n   \n   @expose('hello.templates.mymodel')\n   def index(self, **kw):\n      return dict(page = 'mymodel-index')</code></pre>\n\n\n\n<p>To start using this controller, mount it inside your application RootController just to define an instance of MymodelController. Add these lines in the controllers\\root.py −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>From hello.controller.mymodel import MymodelController\n\nclass RootController(BaseController): mymodel = MymodelController()</code></pre>\n\n\n\n<p>A template scaffold templates\\mymodel.html will also be created in the templates folder. It will act as an index page for ‘/mymodel’ URL.</p>\n\n\n\n<p>The generated <strong>mymodel.html file</strong> in the templates folder will be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html xmlns = \"http://www.w3.org/1999/xhtml\"\n   xmlns:py = \"http://genshi.edgewall.org/\"\n   xmlns:xi = \"http://www.w3.org/2001/XInclude\">\n\t\n   &lt;xi:include href = \"master.html\" />\n\t\n   &lt;head>\n      &lt;title>Mymodel&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div class = \"row\">\n         &lt;div class = \"col-md-12\">\n            &lt;h2>Mymodel&lt;/h2>\n            &lt;p>Template page for Mymodel&lt;/p>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Gearbox toolkit contains scaffold command, which is very useful to quickly create new components of TurboGears application. An application generated by quickstart command of gearbox has a skeleton template in the model folder (model.py.template), a templates folder (template.html.template) and a controllers folder (controller.py.template). These ‘.template’ files are used as basis for creating new scaffolds for [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/193"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=193"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/193/revisions"}],"predecessor-version":[{"id":4153,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/193/revisions/4153"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=193"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=193"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=193"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":194,"date":"2020-07-01T11:49:27","date_gmt":"2020-07-01T11:49:27","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=194"},"modified":"2020-12-15T11:29:18","modified_gmt":"2020-12-15T11:29:18","slug":"hooks","status":"publish","type":"post","link":"https://python3.foobrdigital.com/hooks/","title":{"rendered":"Hooks"},"content":{"rendered":"\n<p>There are three ways in TurboGears to plug behaviors inside the existing applications.</p>\n\n\n\n<ul><li><strong>Hook</strong>&nbsp;− It is a mechanism by which it is possible to define an event, and notify registered listeners as and when the events are emitted.</li><li><strong>Controller Wrapper</strong>&nbsp;− It sits between TurboGears and Controller, so that it is possible to extend controller like a decorator. Thus, it can be attached to any third-party controller application.</li><li><strong>Application Wrapper</strong>&nbsp;− It is similar to any WSGI middleware, but works in TurboGears context only.</li></ul>\n\n\n\n<p>Here in this chapter, we will discuss how to use hooks inside an existing application.</p>\n\n\n\n<h2>Hooks</h2>\n\n\n\n<p>Hooks are events registered in the application’s configuration file&nbsp;<strong>app_cfg.py</strong>. Any controller is then hooked to these events by event decorators.</p>\n\n\n\n<p>The following hooks are defined in TurboGears −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Hooks &amp; Description</th></tr><tr><td>1</td><td><strong>Startup()</strong>application wide only, called when the application starts.</td></tr><tr><td>2</td><td><strong>shutdown()</strong>application wide only, called when the application exits.</td></tr><tr><td>3</td><td><strong>configure_new_app</strong>new application got created by the application configurator.</td></tr><tr><td>4</td><td><strong>before_config(app)</strong>application wide only, called right after creating application, but before setting up options and middleware</td></tr><tr><td>5</td><td><strong>after_config(app)</strong>application wide only, called after finishing setting everything up.</td></tr><tr><td>6</td><td><strong>before_validate</strong>Called before performing validation</td></tr><tr><td>7</td><td><strong>before_call</strong>Called after validation, before calling the actual controller method.</td></tr><tr><td>8</td><td><strong>before_render</strong>Called before rendering a controller template, output is the controller return value.</td></tr><tr><td>9</td><td><strong>after_render</strong>Called after finishing rendering a controller template.</td></tr></tbody></table></figure>\n\n\n\n<h2>Register a Hook</h2>\n\n\n\n<p>In order to <strong>register a Hook,</strong> create functions in <strong>app_cfg.py</strong> and then register them using the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tg.hooks.register(hookane, function, controller)\n</code></pre>\n\n\n\n<p>In the following code, on_startup, on_shutdown and before_render hooks are registered in app_cfg.py.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def on_startup():\n   print 'hello, startup world'\n   \ndef on_shutdown():\n   print 'hello, shutdown world'\n   \ndef before_render(remainder, params, output):\n   print 'system wide before render'\n   \n# ... (base_config init code)\ntg.hooks.register('startup', on_startup)\ntg.hooks.register('shutdown', on_shutdown)\ntg.hooks.register('before_render', before_render)</code></pre>\n\n\n\n<p>The before_render hook is registered with a controller function in the Rootcontroller. Add the following code in controllers\\root.py.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tg.decorators import before_render\n\nclass RootController(BaseController):\n   @expose('hello.templates.index')\n   @before_render(before_render_cb)\n\t\n   def index(self, *args, **kw):\n      return dict(page = 'index')</code></pre>\n\n\n\n<p>When the application is served, start up message is displayed in the console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>hello, startup world\nStarting Standard HTTP server on http://127.0.0.1:8080</code></pre>\n\n\n\n<p>When ‘/’ URL is entered in the browser, a message corresponding to the before_render hook is displayed on the console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>system wide before render\nGoing to render {'page': 'index'}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>There are three ways in TurboGears to plug behaviors inside the existing applications. Hook&nbsp;− It is a mechanism by which it is possible to define an event, and notify registered listeners as and when the events are emitted. Controller Wrapper&nbsp;− It sits between TurboGears and Controller, so that it is possible to extend controller like [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/194"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=194"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/194/revisions"}],"predecessor-version":[{"id":4152,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/194/revisions/4152"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=194"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=194"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=194"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":192,"date":"2020-07-01T11:50:43","date_gmt":"2020-07-01T11:50:43","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=192"},"modified":"2020-12-15T11:29:18","modified_gmt":"2020-12-15T11:29:18","slug":"writing-extensions","status":"publish","type":"post","link":"https://python3.foobrdigital.com/writing-extensions/","title":{"rendered":"Writing Extensions"},"content":{"rendered":"\n<p>TurboGears extensions are identified by <strong>tgext.* package</strong>. A Gearbox toolkit provides tgext command to create a sample extension. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gearbox tgext -n myextension\n</code></pre>\n\n\n\n<p>Other optional parameters for this command are −</p>\n\n\n\n<ul><li><strong>&#8211;author</strong>&nbsp;− name of package author.</li><li><strong>&#8211;email</strong>&nbsp;− email of package author.</li><li><strong>&#8211;licence</strong>&nbsp;− licence used for package. Default is MIT.</li><li><strong>&#8211;description</strong>&nbsp;− Description of package.</li><li><strong>&#8211;keywords</strong>&nbsp;− Package keywords (default: turbogears2.extension).</li></ul>\n\n\n\n<p>This will create a tgext.myextension directory, which has a simple sample extension inside.</p>\n\n\n\n<p><strong>Run the setup.py</strong> inside the directory −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Python setup.py install\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>_init_.py</strong>&nbsp;file inside&nbsp;<strong>tgext/myextension</strong>&nbsp;folder contains −</p>\n\n\n\n<ul><li><strong>Plugme function</strong>&nbsp;− This is the entry point of extension.</li><li><strong>SetupExtension class</strong>&nbsp;− extension initialization takes place here.</li><li><strong>On_startup function</strong>&nbsp;− inside the class is a hook registered on __call__ function inside class.</li></ul>\n\n\n\n<p>Brief version of the <strong>tgext\\myextension\\__init__.py</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tg import config\nfrom tg import hooks\nfrom tg.configuration import milestones\n\nimport logging\nlog = logging.getLogger('tgext.myextension')\n\ndef plugme(configurator, options = None):\n   if options is None:\n      options = {}\n   log.info('Setting up tgext.myextension extension...')\n   milestones.config_ready.register(SetupExtension(configurator))\n   \n   return dict(appid='tgext.myextension')\n\t\nclass SetupExtension(object):\n   def __init__(self, configurator):\n      self.configurator = configurator\n      \n   def __call__(self):\n      log.info('>>> Public files path is %s' % config&#91;'paths']&#91;'static_files'])\n      hooks.register('startup', self.on_startup)\n      \n   def echo_wrapper_factory(handler, config):\n      def echo_wrapper(controller, environ, context):\n         log.info('Serving: %s' % context.request.path)\n         return handler(controller, environ, context)\n      return echo_wrapper\n      \n   self.configurator.register_wrapper(echo_wrapper_factory)\n   \n   def on_startup(self):\n      log.info('+ Application Running!')</code></pre>\n\n\n\n<p>Once the extension is installed, turn it on by making the following additions in the application&#8217;s <strong>app_cfg.py</strong> configuration file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from tgext.myextension import plugme\n\nplugme(base_config)</code></pre>\n\n\n\n<p>If we launch the server using a gearbox server command, the notification of a newly registered extension can be viewed on the console by the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>14:29:13,250 INFO &#91;tgext.myextension] Setting up tgext.myextension extension...\n14:29:13,453 INFO &#91;tgext.myextension] >>> Public files path is c:\\tghello\\hello\\hello\\public\n14:29:13,453 INFO &#91;tgext.myextension] + Application Running!\n\nStarting Standard HTTP server on http://127.0.0.1:8080</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>TurboGears extensions are identified by tgext.* package. A Gearbox toolkit provides tgext command to create a sample extension. For example − Other optional parameters for this command are − &#8211;author&nbsp;− name of package author. &#8211;email&nbsp;− email of package author. &#8211;licence&nbsp;− licence used for package. Default is MIT. &#8211;description&nbsp;− Description of package. &#8211;keywords&nbsp;− Package keywords (default: turbogears2.extension). [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[104,127],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/192"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=192"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/192/revisions"}],"predecessor-version":[{"id":4151,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/192/revisions/4151"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=192"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=192"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=192"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]