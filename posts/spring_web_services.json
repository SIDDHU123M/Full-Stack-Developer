[
    {
        "id": 1106,
        "date": "2020-07-23T16:46:57",
        "date_gmt": "2020-07-23T16:46:57",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1106"
        },
        "modified": "2020-07-23T16:46:57",
        "modified_gmt": "2020-07-23T16:46:57",
        "slug": "overview-8",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-8\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>Spring Web Services (Spring-WS) is one of the projects developed by the Spring Community. Its prime focus is to create document-driven Web Services. The Spring Web Services project facilitates contract-first&nbsp;<strong>SOAP Service Development<\/strong>, provides multiple ways to create flexible web services, which can manipulate XML payloads in multiple ways.<\/p>\n\n\n\n<p>The Spring web services uses Spring concepts like dependency injection and configurations seamlessly. The Spring-WS requires Spring 3.0 Version. With contract-first development, we start with&nbsp;<strong>WSDL Contract<\/strong>&nbsp;and then will use JAVA to implement the required contract.<\/p>\n\n\n\n<p>As opposed to the contract-last approach where JAVA interfaces generate WSDL\/XSD contract. The WSDL based contract remains independent of JAVA implementation in the contract-first approach. In case we require changing the JAVA interfaces, then there is no need to communicate the changes made in the existing WSDL contract to the web services users. Spring-WS aims to provide loose coupling between the WSDL contract and its JAVA based implementation.<\/p>\n\n\n\n<h2>Features<\/h2>\n\n\n\n<p>Following are the features of Spring Web Services \u2212<\/p>\n\n\n\n<ul><li><strong>XML Mapping to Objects<\/strong>&nbsp;\u2212 XML based requests can be mapped to any object using the information stored in the Message Payload, SOAP Action Header or by using an XPath Expression.<\/li><li><strong>Multiple API Support to parse XML<\/strong>&nbsp;\u2212 Apart from the standard JAXP APIs (DOM, SAX, StAX) to parse the incoming XML requests, other libraries like JDOM, dom4j, XOM are also supported.<\/li><li><strong>Multiple API Support to marshal XML<\/strong>\u2212 Spring Web Services supports JAXB 1 and 2, Castor, XMLBeans, JiBX, and XStream libraries using its Object\/XML Mapping module. The Object\/XML Mapping module can also be used in non-web services code as well.<\/li><li><strong>Spring based configurations<\/strong>&nbsp;\u2212 Spring Web Services uses the Spring Application Contexts for its configurations having a similar architecture as that of the Spring Web MVC.<\/li><li><strong>Integrated WS-Security module<\/strong>&nbsp;\u2212 Using the WS-Security module, you can Sign, Encrypt, Decrypt SOAP Messages or Authenticate them.<\/li><li><strong>Support for Acegi Security<\/strong>&nbsp;\u2212 Using the WS-Security implementation of Spring Web Services, Acegi configuration can be used for your SOAP services.<\/li><\/ul>\n\n\n\n<h2>Architecture<\/h2>\n\n\n\n<p>The Spring-WS project consists of five major modules, which are explained below.<\/p>\n\n\n\n<ul><li><strong>Spring-WS Core&nbsp;<\/strong>\u2212 It is the primary module and provides the Central Interfaces like&nbsp;<strong>WebServiceMessage<\/strong>&nbsp;and&nbsp;<strong>SoapMessage<\/strong>, the server-side framework, powerful message dispatching capability and support classes to implement Web service endpoints. It also provides Web Service consumer client as&nbsp;<strong>WebServiceTemplate<\/strong>.<\/li><li><strong>Spring-WS Support<\/strong>&nbsp;\u2212 This module provides supports for JMS, emails, etc.<\/li><li><strong>Spring-WS Security<\/strong>&nbsp;\u2212 This module is responsible to provide WS-Security implementation integrated with core Web Service Module. Using this module, we can add principal tokens, sign, encrypt and decrypt SOAP messages. This module allows using the existing Spring Security Implementation for authentication and authorization.<\/li><li><strong>Spring XML<\/strong>&nbsp;\u2212 This module provides XML support classes for Spring Web Services. This module is internally used by Spring-WS framework.<\/li><li><strong>Spring OXM<\/strong>&nbsp;\u2212 This module provides support classes for XML vs Object Mapping.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springws\/images\/springws_architecture.jpg\" alt=\"Spring Web Services Architecture\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Spring Web Services (Spring-WS) is one of the projects developed by the Spring Community. Its prime focus is to create document-driven Web Services. The Spring Web Services project facilitates contract-first&nbsp;SOAP Service Development, provides multiple ways to create flexible web services, which can manipulate XML payloads in multiple ways. The Spring web services uses Spring concepts [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            21
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1106"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1106"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1106\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1107,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1106\/revisions\/1107"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1106"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1106"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1106"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1105,
        "date": "2020-07-23T16:49:25",
        "date_gmt": "2020-07-23T16:49:25",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1105"
        },
        "modified": "2020-07-23T16:49:25",
        "modified_gmt": "2020-07-23T16:49:25",
        "slug": "environment-setup-5",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-5\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<p>In this Chapter, we will understand the process of setting up Spring-WS on Windows and Linux based systems. The Spring-WS can be easily installed and integrated with your current&nbsp;<strong>Java environment<\/strong>&nbsp;and&nbsp;<strong>MAVEN<\/strong>&nbsp;by following a few simple steps without any complex setup procedures. User administration is required while installation.<\/p>\n\n\n\n<h2>System Requirements<\/h2>\n\n\n\n<p>The following table lists out the system requirements, while the subsequent steps will guide us through the environment setup procedure.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>JDK<\/td><td>Java SE 2 JDK 1.5 or above<\/td><\/tr><tr><td>Memory<\/td><td>1 GB RAM (recommended)<\/td><\/tr><tr><td>Disk Space<\/td><td>No minimum requirement<\/td><\/tr><tr><td>Operating System Version<\/td><td>Windows XP or above, Linux<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let us now proceed with the steps to install Spring-WS.<\/p>\n\n\n\n<h3>Step 1: Verify the Java Installation<\/h3>\n\n\n\n<p>To begin with, you need to have Java Software Development Kit (SDK) installed on your system. To verify this, execute any of the following two commands depending on the platform you are working on.<\/p>\n\n\n\n<p>If the Java installation has been done properly, then it will display the current version and specification of your Java installation. A sample output is given in the following table.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Platform<\/th><th>Command<\/th><th>Sample Output<\/th><\/tr><tr><td>Windows<\/td><td>Open command console and type \u2212\\&gt;java -version<\/td><td>Java version &#8220;1.7.0_60&#8243;Java (TM) SE Run Time Environment (build 1.7.0_60-b19)Java Hotspot (TM) 64-bit Server VM (build 24.60-b09,mixed mode)<\/td><\/tr><tr><td>Linux<\/td><td>Open command terminal and type \u2212$java -version<\/td><td>java version &#8220;1.7.0_25&#8243;Open JDK Runtime Environment (rhel-2.3.10.4.el6_4-x86_64)Open JDK 64-Bit Server VM (build 23.7-b01, mixed mode)<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<ul><li>We assume the readers of this tutorial have Java SDK version 1.7.0_60 installed on their system.<\/li><li>In case you do not have Java SDK, download its current version from\u00a0https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html\u00a0and have it installed.<\/li><\/ul>\n\n\n\n<h3>Step 2: Set your Java Environment<\/h3>\n\n\n\n<p>Set the environment variable&nbsp;<strong>JAVA_HOME<\/strong>&nbsp;to point to the base directory location where Java is installed on your machine.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.<\/th><th>Platform &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Set JAVA_HOME to C:\\ProgramFiles\\java\\jdk1.7.0_60<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>Export JAVA_HOME=\/usr\/local\/java-current<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append the full path of Java compiler location to the System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.<\/th><th>Platform &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Append the String &#8220;C:\\Program Files\\Java\\jdk1.7.0_60\\bin&#8221; to the end of the system variable PATH.<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>Export PATH=$PATH:$JAVA_HOME\/bin\/<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Execute the command&nbsp;<strong>java -version<\/strong>&nbsp;from the command prompt as explained above.<\/p>\n\n\n\n<h3>Step 3: Download Maven archive<\/h3>\n\n\n\n<p>Download Maven 3.3.3 from\u00a0https:\/\/maven.apache.org\/download.cgi<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>apache-maven-3.3.3-bin.zip<\/td><\/tr><tr><td>Linux<\/td><td>apache-maven-3.3.3-bin.tar.gz<\/td><\/tr><tr><td>Mac<\/td><td>apache-maven-3.3.3-bin.tar.gz<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Step 4: Extract the Maven archive<\/h3>\n\n\n\n<p>Extract the archive, to the directory you wish to install Maven 3.3.3. The subdirectory apache-maven-3.3.3 will be created from the archive.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Location (can be different based on your installation)<\/th><\/tr><tr><td>Windows<\/td><td>C:\\Program Files\\Apache Software Foundation\\apache-maven-3.3.3<\/td><\/tr><tr><td>Linux<\/td><td>\/usr\/local\/apache-maven<\/td><\/tr><tr><td>Mac<\/td><td>\/usr\/local\/apache-maven<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Step 5: Set Maven environment variables<\/h3>\n\n\n\n<p>Add M2_HOME, M2 and MAVEN_OPTS to the environment variables.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variables using system properties.M2_HOME=C:\\Program Files\\Apache Software Foundation\\apache-maven-3.3.3M2=%M2_HOME%\\binMAVEN_OPTS=-Xms256m -Xmx512m<\/td><\/tr><tr><td>Linux<\/td><td>Open command terminal and set environment variables.export M2_HOME=\/usr\/local\/apache-maven\/apache-maven-3.3.3export M2=$M2_HOME\/binexport MAVEN_OPTS=-Xms256m -Xmx512m<\/td><\/tr><tr><td>Mac<\/td><td>Open command terminal and set environment variables.export M2_HOME=\/usr\/local\/apache-maven\/apache-maven-3.3.3export M2=$M2_HOME\/binexport MAVEN_OPTS=-Xms256m -Xmx512m<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Step 6: Add Maven bin directory location to the system path<\/h3>\n\n\n\n<p>Now append M2 variable to the System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Append the string ;%M2% to the end of the system variable, Path.<\/td><\/tr><tr><td>Linux<\/td><td>export PATH=$M2:$PATH<\/td><\/tr><tr><td>Mac<\/td><td>export PATH=$M2:$PATH<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Step 7: Verify Maven installation<\/h3>\n\n\n\n<p>Now open the console, execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Task<\/th><th>Command<\/th><\/tr><tr><td>Windows<\/td><td>Open Command Console<\/td><td>c:\\&gt; mvn &#8211;version<\/td><\/tr><tr><td>Linux<\/td><td>Open Command Terminal<\/td><td>$ mvn &#8211;version<\/td><\/tr><tr><td>Mac<\/td><td>Open Terminal<\/td><td>machine:&lt; joseph$ mvn &#8211;version<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Finally, verify the output of the above commands, which should be something as shown below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: C:\\Program Files\\Apache Software Foundation\\apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: C:\\Program Files\\Java\\jdk1.7.0_75\\jreDefault locale: en_US, platform encoding: Cp1252<\/td><\/tr><tr><td>Linux<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: \/usr\/local\/apache-maven\/apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: \/usr\/local\/java-current\/jdk1.7.0_75\/jre<\/td><\/tr><tr><td>Mac<\/td><td>Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T17:27:37+05:30)Maven home: \/usr\/local\/apache-maven\/apache-maven-3.3.3Java version: 1.7.0_75, vendor: Oracle CorporationJava home: \/Library\/Java\/Home\/jdk1.7.0_75\/jre<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Step 8: Setup Eclipse IDE<\/h3>\n\n\n\n<p>All the examples in this tutorial have been written using the Eclipse IDE. It is recommended that the readers should have the latest version of Eclipse installed on their machine. To install the Eclipse IDE, download the latest Eclipse binaries from the following link\u00a0https:\/\/www.eclipse.org\/downloads\/. Once the installation is downloaded, unpack the binary distribution into a convenient location.<\/p>\n\n\n\n<p>For example in\u00a0<strong>C:\\eclipse<\/strong>\u00a0on windows, or\u00a0<strong>\/usr\/local\/eclipse<\/strong>\u00a0on Linux\/Unix and finally set the PATH variable appropriately. Eclipse can be started by executing the following commands on the windows machine, or you can simply double click on eclipse.exe.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>%C:\\eclipse\\eclipse.exe\n<\/code><\/pre>\n\n\n\n<p>Eclipse can be started by executing the following commands on the UNIX (Solaris, Linux, etc.) machine \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$\/usr\/local\/eclipse\/eclipse\n<\/code><\/pre>\n\n\n\n<p>After a successful startup, if everything is fine then it should display the following screen \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springws\/images\/eclipsehomepage.jpg\" alt=\"Eclipse Home page\"\/><\/figure>\n\n\n\n<h3>Step 9: Setup Apache Tomcat<\/h3>\n\n\n\n<p>We can download the latest version of Tomcat from\u00a0https:\/\/tomcat.apache.org\/. Once the installation is downloaded, unpack the binary distribution into a convenient location. For example in the\u00a0<strong>C:\\apache-tomcat-7.0.59<\/strong>\u00a0on a windows machine, or in the\u00a0<strong>\/usr\/local\/apache-tomcat-7.0.59<\/strong>\u00a0on a Linux\/Unix machine and then set the\u00a0<strong>CATALINA_HOME<\/strong>\u00a0environment variable pointing to the installation locations.<\/p>\n\n\n\n<p>Tomcat can be started by executing the following commands on a windows machine, or you can simply double click on startup.bat<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>%CATALINA_HOME%\\bin\\startup.bat\n \nor\n \nC:\\apache-tomcat-7.0.59\\bin\\startup.bat<\/code><\/pre>\n\n\n\n<p>Tomcat can be started by executing the following commands on UNIX (Solaris, Linux, etc.) machine \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$CATALINA_HOME\/bin\/startup.sh\n \nor\n \n\/usr\/local\/apache-tomcat-7.0.59\/bin\/startup.sh\n\ufeff<\/code><\/pre>\n\n\n\n<p>After a successful startup, the default web applications included with Tomcat will be available by visiting \u2013&nbsp;<strong>http:\/\/localhost:8080\/<\/strong>. If everything is ok, then it should display the following screen \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springws\/images\/tomcat.jpg\" alt=\"Tomcat\"\/><\/figure>\n\n\n\n<p>Further information about configuring and running Tomcat can be found in the documentation included here, as well as on the Tomcat website \u2212\u00a0https:\/\/tomcat.apache.org<\/p>\n\n\n\n<p>Tomcat can be stopped by executing the following commands on a windows machine \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>%CATALINA_HOME%\\bin\\shutdown\n\nor\n\nC:\\apache-tomcat-7.0.59\\bin\\shutdown<\/code><\/pre>\n\n\n\n<p>Tomcat can be stopped by executing the following commands on the UNIX (Solaris, Linux, etc.) machine \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$CATALINA_HOME\/bin\/shutdown.sh\n\nor\n\n\/usr\/local\/apache-tomcat-7.0.59\/bin\/shutdown.sh<\/code><\/pre>\n\n\n\n<p>Once we are done with this last step, we are ready to proceed for the first Web Services Example, which we will discuss in the next chapter.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this Chapter, we will understand the process of setting up Spring-WS on Windows and Linux based systems. The Spring-WS can be easily installed and integrated with your current&nbsp;Java environment&nbsp;and&nbsp;MAVEN&nbsp;by following a few simple steps without any complex setup procedures. User administration is required while installation. System Requirements The following table lists out the system [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            21
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1105"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1105"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1105\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1108,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1105\/revisions\/1108"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1105"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1105"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1105"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1104,
        "date": "2020-07-23T16:52:47",
        "date_gmt": "2020-07-23T16:52:47",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1104"
        },
        "modified": "2020-07-24T12:05:21",
        "modified_gmt": "2020-07-24T12:05:21",
        "slug": "first-application",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/first-application\/",
        "title": {
            "rendered": "First Application"
        },
        "content": {
            "rendered": "\n<p>Let us start writing an actual SOAP based web service with Spring-WS Framework. Before we start writing our first example using the Spring-WS framework, we have to ensure that the Spring-WS environment is setup properly as explained in&nbsp;Spring Web Services &#8211; Environment Setup&nbsp;chapter. We are assuming that the readers have some basic working knowledge with the Eclipse IDE.<\/p>\n\n\n\n<p>Therefore, let us proceed to write a simple Spring WS Application which will expose a web service method to book a leave in an HR Portal.<\/p>\n\n\n\n<h2>Contract-first Approach<\/h2>\n\n\n\n<p>Spring-WS uses the Contract-first approach, which means we should have our&nbsp;<strong>XML Structures<\/strong>&nbsp;ready before writing any JAVA based implementation code. We are defining a LeaveRequest Object, which has sub-objects \u2013 Leave and Employee.<\/p>\n\n\n\n<p>Following are the required XML constructs \u2212<\/p>\n\n\n\n<h3>Leave.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Leave xmlns = \"http:\/\/codemeals.com\/hr\/schemas\">\n   &lt;StartDate>2016-07-03&lt;\/StartDate>\n   &lt;EndDate>2016-07-07&lt;\/EndDate>\n&lt;\/Leave><\/code><\/pre>\n\n\n\n<h3>Employee.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Employee xmlns = \"http:\/\/codemeals.com\/hr\/schemas\">\n   &lt;Number>404&lt;\/Number>\n   &lt;FirstName>Mahesh&lt;\/FirstName>\n   &lt;LastName>Parashar&lt;\/LastName>\n&lt;\/Employee><\/code><\/pre>\n\n\n\n<h3>LeaveRequest.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;LeaveRequest xmlns = \"http:\/\/codemeals.com\/hr\/schemas\">\n   &lt;Leave>\n      &lt;StartDate>2016-07-03&lt;\/StartDate>\n      &lt;EndDate>2016-07-07&lt;\/EndDate>\n   &lt;\/Leave>\n   \n   &lt;Employee>\n      &lt;Number>404&lt;\/Number>\n      &lt;FirstName>Mahesh&lt;\/FirstName>\n      &lt;LastName>Parashar&lt;\/LastName>\n   &lt;\/Employee>\n&lt;\/LeaveRequest><\/code><\/pre>\n\n\n\n<h3>hr.xsd<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;xs:schema xmlns:xs = \"http:\/\/www.w3.org\/2001\/XMLSchema\"\n   xmlns:hr = \"http:\/\/codemeals.com\/hr\/schemas\"\n   elementFormDefault = \"qualified\"\n   targetNamespace = \"http:\/\/codemeals.com\/hr\/schemas\">\n   \n   &lt;xs:element name = \"LeaveRequest\">\n      &lt;xs:complexType>\n         &lt;xs:all>\n            &lt;xs:element name = \"Leave\" type = \"hr:LeaveType\"\/>\n            &lt;xs:element name = \"Employee\" type = \"hr:EmployeeType\"\/>\n         &lt;\/xs:all>\n      &lt;\/xs:complexType>\n   &lt;\/xs:element>\n   \n   &lt;xs:complexType name = \"LeaveType\">\n      &lt;xs:sequence>\n         &lt;xs:element name = \"StartDate\" type = \"xs:date\"\/>\n         &lt;xs:element name = \"EndDate\" type = \"xs:date\"\/>\n      &lt;\/xs:sequence>\n   &lt;\/xs:complexType>\n   \n   &lt;xs:complexType name = \"EmployeeType\">\n      &lt;xs:sequence>\n         &lt;xs:element name = \"Number\" type = \"xs:integer\"\/>\n         &lt;xs:element name = \"FirstName\" type = \"xs:string\"\/>\n         &lt;xs:element name = \"LastName\" type = \"xs:string\"\/>\n      &lt;\/xs:sequence>\n   &lt;\/xs:complexType>\n&lt;\/xs:schema><\/code><\/pre>\n\n\n\n<h2>Create the Project<\/h2>\n\n\n\n<p>Let us now open a command console, go the C:\\MVN directory and execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN>mvn archetype:generate -DarchetypeGroupId = org.springframework.ws\n-DarchetypeArtifactId = spring-ws-archetype -DgroupId = com.codemeals.hr\n-DartifactId = leaveService<\/code><\/pre>\n\n\n\n<p>Maven will start processing and will create the complete Java Application Project Structure.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building Maven Stub Project (No POM) 1\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO]\n&#91;INFO] Using property: groupId = com.codemeals.hr\n&#91;INFO] Using property: artifactId = leaveService\nDefine value for property 'version':  1.0-SNAPSHOT: :\n&#91;INFO] Using property: package = com.codemeals.hr\nConfirm properties configuration:\ngroupId: com.codemeals.hr\nartifactId: leaveService\nversion: 1.0-SNAPSHOT\npackage: com.codemeals.hr\n Y: :\n&#91;INFO] -------------------------------------------------------------------------\n---\n&#91;INFO] Using following parameters for creating project from Old (1.x) Archetype:\n spring-ws-archetype:2.0.0-M1\n&#91;INFO] -------------------------------------------------------------------------\n---\n&#91;INFO] Parameter: groupId, Value: com.codemeals.hr\n&#91;INFO] Parameter: packageName, Value: com.codemeals.hr\n&#91;INFO] Parameter: package, Value: com.codemeals.hr\n&#91;INFO] Parameter: artifactId, Value: leaveService\n&#91;INFO] Parameter: basedir, Value: C:\\mvn\n&#91;INFO] Parameter: version, Value: 1.0-SNAPSHOT\n&#91;INFO] project created from Old (1.x) Archetype in dir: C:\\mvn\\leaveService\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 35.989 s\n&#91;INFO] Finished at: 2017-01-21T11:18:31+05:30\n&#91;INFO] Final Memory: 17M\/178M\n&#91;INFO] ------------------------------------------------------------------------<\/code><\/pre>\n\n\n\n<p>Now go to\u00a0<strong>C:\/MVN<\/strong>\u00a0directory. We will see a java application project created named\u00a0<strong>leaveService<\/strong>\u00a0(as specified in artifactId). Update the pom.xml and add HumanResourceService.java and HumanResourceServiceImpl.java in the following folder \u2013 C:\\MVN\\leaveService\\src\\main\\java\\com\\codemeals\\hr\\service folder. Once that is done, then add LeaveEndpoint.java in the following folder \u2013 C:\\MVN\\leaveService\\src\\main\\java\\com\\codemeals\\hr\\ws folder.<\/p>\n\n\n\n<h3>pom.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;project xmlns = \"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"http:\/\/maven.apache.org\/POM\/4.0.0 \n   http:\/\/maven.apache.org\/maven-v4_0_0.xsd\">\n   \n   &lt;modelVersion>4.0.0&lt;\/modelVersion>\n   &lt;groupId>com.codemeals.hr&lt;\/groupId>\n   &lt;artifactId>leaveService&lt;\/artifactId>\n   &lt;packaging>war&lt;\/packaging>\n   &lt;version>1.0-SNAPSHOT&lt;\/version>\n   &lt;name>leaveService Spring-WS Application&lt;\/name>\n   &lt;url>http:\/\/www.springframework.org\/spring-ws&lt;\/url>\n   \n   &lt;build>\n      &lt;finalName>leaveService&lt;\/finalName>\n   &lt;\/build>\n   \n   &lt;dependencies>\n      &lt;dependency>\n         &lt;groupId>org.springframework.ws&lt;\/groupId>\n         &lt;artifactId>spring-ws-core&lt;\/artifactId>\n         &lt;version>2.4.0.RELEASE&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>jdom&lt;\/groupId>\n         &lt;artifactId>jdom&lt;\/artifactId>\n         &lt;version>1.0&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>jaxen&lt;\/groupId>\n         &lt;artifactId>jaxen&lt;\/artifactId>\n         &lt;version>1.1&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>wsdl4j&lt;\/groupId>\n         &lt;artifactId>wsdl4j&lt;\/artifactId>\n         &lt;version>1.6.2&lt;\/version>\n      &lt;\/dependency>\n   &lt;\/dependencies>\n&lt;\/project><\/code><\/pre>\n\n\n\n<h3>HumanResourceService.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals.hr.service;\n\nimport java.util.Date;\n\npublic interface HumanResourceService {\n   void bookLeave(Date startDate, Date endDate, String name);\n}<\/code><\/pre>\n\n\n\n<h3>HumanResourceServiceImpl.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals.hr.service;\n\nimport java.util.Date;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class HumanResourceServiceImpl implements HumanResourceService {\n   public void bookLeave(Date startDate, Date endDate, String name) {\n      System.out.println(\"Booking holiday for &#91;\" + startDate + \"-\" + endDate + \"]\n         for &#91;\" + name + \"] \");\n   }\n}<\/code><\/pre>\n\n\n\n<h3>LeaveEndpoint.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals.hr.ws;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ws.server.endpoint.annotation.Endpoint;\nimport org.springframework.ws.server.endpoint.annotation.PayloadRoot;\nimport org.springframework.ws.server.endpoint.annotation.RequestPayload;\n\nimport com.codemeals.hr.service.HumanResourceService;\nimport org.jdom.Element;\nimport org.jdom.JDOMException;\nimport org.jdom.Namespace;\nimport org.jdom.xpath.XPath;\n\n@Endpoint\npublic class LeaveEndpoint {\n   private static final String NAMESPACE_URI = \"http:\/\/codemeals.com\/hr\/schemas\";\n   private XPath startDateExpression;\n   private XPath endDateExpression;\n   private XPath nameExpression;\n   private HumanResourceService humanResourceService;\n\n   @Autowired\n   public LeaveEndpoint(HumanResourceService humanResourceService) throws JDOMException {\n      this.humanResourceService = humanResourceService;\n\n      Namespace namespace = Namespace.getNamespace(\"hr\", NAMESPACE_URI);\n\n      startDateExpression = XPath.newInstance(\"\/\/hr:StartDate\");\n      startDateExpression.addNamespace(namespace);\n\n      endDateExpression = XPath.newInstance(\"\/\/hr:EndDate\");\n      endDateExpression.addNamespace(namespace);\n\n      nameExpression = XPath.newInstance(\"concat(\/\/hr:FirstName,' ',\/\/hr:LastName)\");\n      nameExpression.addNamespace(namespace);\n   }\n\n   @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"LeaveRequest\")                  \n   public void handleLeaveRequest(@RequestPayload Element leaveRequest) throws Exception {\n      SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n      Date startDate = dateFormat.parse(startDateExpression.valueOf(leaveRequest));\n      Date endDate = dateFormat.parse(endDateExpression.valueOf(leaveRequest));\n      String name = nameExpression.valueOf(leaveRequest);\n\n      humanResourceService.bookLeave(startDate, endDate, name);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>\/WEB-INF\/spring-ws-servlet.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:sws = \"http:\/\/www.springframework.org\/schema\/web-services\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   \n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/web-services\n   http:\/\/www.springframework.org\/schema\/web-services\/web-services-2.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals.hr\"\/>\n   &lt;bean id = \"humanResourceService\"\n      class = \"com.codemeals.hr.service.HumanResourceServiceImpl\" \/>\n   &lt;sws:annotation-driven\/>\n\n   &lt;sws:dynamic-wsdl id = \"leave\"\n      portTypeName = \"HumanResource\"\n      locationUri = \"\/leaveService\/\"\n      targetNamespace = \"http:\/\/codemeals.com\/hr\/definitions\">\n      &lt;sws:xsd location = \"\/WEB-INF\/hr.xsd\"\/>\n   &lt;\/sws:dynamic-wsdl>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h3>\/WEB-INF\/web.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;web-app xmlns = \"http:\/\/java.sun.com\/xml\/ns\/j2ee\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"http:\/\/java.sun.com\/xml\/ns\/j2ee\n   http:\/\/java.sun.com\/xml\/ns\/j2ee\/web-app_2_4.xsd\"\n   version = \"2.4\">\n\n   &lt;display-name>Code Meals HR Leave Service&lt;\/display-name>\n   &lt;servlet>\n      &lt;servlet-name>spring-ws&lt;\/servlet-name>\n      &lt;servlet-class>\n         org.springframework.ws.transport.http.MessageDispatcherServlet\n      &lt;\/servlet-class>\n      &lt;init-param>\n         &lt;param-name>transformWsdlLocations&lt;\/param-name>\n         &lt;param-value>true&lt;\/param-value>\n      &lt;\/init-param>\n   &lt;\/servlet>\n\n   &lt;servlet-mapping>\n      &lt;servlet-name>spring-ws&lt;\/servlet-name>\n      &lt;url-pattern>\/*&lt;\/url-pattern>\n   &lt;\/servlet-mapping>\n&lt;\/web-app><\/code><\/pre>\n\n\n\n<h3>\/WEB-INF\/hr.xsd<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;xs:schema xmlns:xs = \"http:\/\/www.w3.org\/2001\/XMLSchema\"\n   xmlns:hr = \"http:\/\/codemeals.com\/hr\/schemas\"\n   elementFormDefault = \"qualified\"\n   targetNamespace = \"http:\/\/codemeals.com\/hr\/schemas\">\n\n   &lt;xs:element name = \"LeaveRequest\">\n      &lt;xs:complexType>\n         &lt;xs:all>\n            &lt;xs:element name = \"Leave\" type = \"hr:LeaveType\"\/>\n            &lt;xs:element name = \"Employee\" type = \"hr:EmployeeType\"\/>\n         &lt;\/xs:all>\n      &lt;\/xs:complexType>\n   &lt;\/xs:element>\n\n   &lt;xs:complexType name = \"LeaveType\">\n      &lt;xs:sequence>\n         &lt;xs:element name = \"StartDate\" type = \"xs:date\"\/>\n         &lt;xs:element name = \"EndDate\" type = \"xs:date\"\/>\n      &lt;\/xs:sequence>\n   &lt;\/xs:complexType>\n\n   &lt;xs:complexType name = \"EmployeeType\">\n      &lt;xs:sequence>\n         &lt;xs:element name = \"Number\" type = \"xs:integer\"\/>\n         &lt;xs:element name = \"FirstName\" type = \"xs:string\"\/>\n         &lt;xs:element name = \"LastName\" type = \"xs:string\"\/>\n      &lt;\/xs:sequence>\n   &lt;\/xs:complexType>\n&lt;\/xs:schema><\/code><\/pre>\n\n\n\n<h2>Build the Project<\/h2>\n\n\n\n<p>Let us now open the command console, go the C:\\MVN\\leaveService directory and execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN\\leaveService>mvn clean package\n<\/code><\/pre>\n\n\n\n<p>Maven will start building the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building leaveService Spring-WS Application 1.0-SNAPSHOT\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO]\n&#91;INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ leaveService ---\n&#91;INFO] Deleting C:\\mvn\\leaveService\\target\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ leaveServi\nce ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] Copying 0 resource\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ leaveService --\n-\n&#91;INFO] Changes detected - recompiling the module!\n&#91;WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. b\nuild is platform dependent!\n&#91;INFO] Compiling 3 source files to C:\\mvn\\leaveService\\target\\classes\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ le\naveService ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] skip non existing resourceDirectory C:\\mvn\\leaveService\\src\\test\\resource\ns\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ leaveSe\nrvice ---\n&#91;INFO] No sources to compile\n&#91;INFO]\n&#91;INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ leaveService ---\n&#91;INFO] No tests to run.\n&#91;INFO]\n&#91;INFO] --- maven-war-plugin:2.2:war (default-war) @ leaveService ---\n&#91;INFO] Packaging webapp\n&#91;INFO] Assembling webapp &#91;leaveService] in &#91;C:\\mvn\\leaveService\\target\\leaveServ\nice]\n&#91;INFO] Processing war project\n&#91;INFO] Copying webapp resources &#91;C:\\mvn\\leaveService\\src\\main\\webapp]\n&#91;INFO] Webapp assembled in &#91;7159 msecs]\n&#91;INFO] Building war: C:\\mvn\\leaveService\\target\\leaveService.war\n&#91;INFO] WEB-INF\\web.xml already added, skipping\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 19.667 s\n&#91;INFO] Finished at: 2017-01-21T11:56:43+05:30\n&#91;INFO] Final Memory: 18M\/173M\n&#91;INFO] ------------------------------------------------------------------------\n\ufeff<\/code><\/pre>\n\n\n\n<h3>Import Project in Eclipse<\/h3>\n\n\n\n<p>Follow the steps given below to import the project in Eclipse.<\/p>\n\n\n\n<ul><li>Open Eclipse.<\/li><li>Select&nbsp;<strong>File \u2192 Import \u2192<\/strong>&nbsp;option.<\/li><li>Select Maven Projects Option. Click on Next Button.<\/li><li>Select Project location, where&nbsp;<strong>leaveService project<\/strong>&nbsp;was created using Maven.<\/li><li>Click Finish Button.<\/li><\/ul>\n\n\n\n<h2>Run the Project<\/h2>\n\n\n\n<p>Once we are done with creating source and configuration files, export the application. Right click on the application, use Export \u2192 WAR File option and save the leaveService.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Start the Tomcat server and ensure we are able to access other webpages from the webapps folder using a standard browser. Try to access the URL \u2013 http:\/\/localhost:8080\/leaveService\/leave.wsdl, if everything is ok with the Spring Web Application, <\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Let us start writing an actual SOAP based web service with Spring-WS Framework. Before we start writing our first example using the Spring-WS framework, we have to ensure that the Spring-WS environment is setup properly as explained in&nbsp;Spring Web Services &#8211; Environment Setup&nbsp;chapter. We are assuming that the readers have some basic working knowledge with [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            21
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1104"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1104"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1104\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1198,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1104\/revisions\/1198"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1104"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1104"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1104"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1103,
        "date": "2020-07-23T16:53:42",
        "date_gmt": "2020-07-23T16:53:42",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1103"
        },
        "modified": "2020-07-24T12:01:29",
        "modified_gmt": "2020-07-24T12:01:29",
        "slug": "static-wsdl",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/static-wsdl\/",
        "title": {
            "rendered": "Static WSDL"
        },
        "content": {
            "rendered": "\n<p>In the previous chapter&nbsp;Spring -WS &#8211; First Application, we have generated WSDL automatically using the Spring WS Configuration. In this case, we will display how to expose the existing WSDL using the Spring WS.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name leaveService under a package com.codemeals as explained in the Spring WS &#8211; First Application chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a WSDL leave.wsdl under the \/WEB-INF\/wsdl sub-folder.<\/td><\/tr><tr><td>3<\/td><td>Update spring-ws-servlet.xml under the \/WEB-INF sub-folder. We are using the static-wsdl tag here instead of the dynamic-wsdl.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create content of all source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>\/WEB-INF\/spring-ws-servlet.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;wsdl:definitions xmlns:wsdl = \"http:\/\/schemas.xmlsoap.org\/wsdl\/\"\n   xmlns:soap = \"http:\/\/schemas.xmlsoap.org\/wsdl\/soap\/\"\n   xmlns:schema = \"http:\/\/codemeals.com\/hr\/schemas\"\n   xmlns:tns = \"http:\/\/codemeals.com\/hr\/definitions\"\n   targetNamespace = \"http:\/\/codemeals.com\/hr\/definitions\">\n   \n   &lt;wsdl:types>\n      &lt;xsd:schema xmlns:xsd = \"http:\/\/www.w3.org\/2001\/XMLSchema\">\n         &lt;xsd:import namespace = \"http:\/\/codemeals.com\/hr\/schemas\"\n            schemaLocation = \"hr.xsd\"\/>\n      &lt;\/xsd:schema>\n   &lt;\/wsdl:types>\n   \n   &lt;wsdl:message name = \"LeaveRequest\">\n      &lt;wsdl:part element = \"schema:LeaveRequest\" name = \"LeaveRequest\"\/>\n   &lt;\/wsdl:message>\n   \n   &lt;wsdl:portType name = \"HumanResource\">\n      &lt;wsdl:operation name = \"Leave\">\n         &lt;wsdl:input message = \"tns:LeaveRequest\" name = \"LeaveRequest\"\/>\n      &lt;\/wsdl:operation>\n   &lt;\/wsdl:portType>\n   \n   &lt;wsdl:binding name = \"HumanResourceBinding\" type = \"tns:HumanResource\">\n      &lt;soap:binding style = \"document\"\n         transport = \"http:\/\/schemas.xmlsoap.org\/soap\/http\"\/>\n      &lt;wsdl:operation name = \"Leave\">\n         &lt;soap:operation soapAction = \"http:\/\/mycompany.com\/RequestLeave\"\/>\n         &lt;wsdl:input name = \"LeaveRequest\">\n            &lt;soap:body use = \"literal\"\/>\n         &lt;\/wsdl:input>\n      &lt;\/wsdl:operation>\n   &lt;\/wsdl:binding>\n   \n   &lt;wsdl:service name = \"HumanResourceService\">\n      &lt;wsdl:port binding = \"tns:HumanResourceBinding\" name = \"HumanResourcePort\">\n         &lt;soap:address location = \"http:\/\/localhost:8080\/leaveService\/\"\/>\n      &lt;\/wsdl:port>\n   &lt;\/wsdl:service>\n&lt;\/wsdl:definitions><\/code><\/pre>\n\n\n\n<h3>\/WEB-INF\/spring-ws-servlet.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:sws = \"http:\/\/www.springframework.org\/schema\/web-services\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   \n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/web-services\n   http:\/\/www.springframework.org\/schema\/web-services\/web-services-2.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals.hr\"\/>\n   &lt;sws:annotation-driven\/>\n   &lt;sws:static-wsdl id = \"leave\" location = \"\/WEB-INF\/wsdl\/leave.wsdl\"\/>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Run the Project<\/h2>\n\n\n\n<p>Once we are done with creating source and configuration files, we should export the application. Right click on the application, use Export \u2192 WAR File option and save your leaveService.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and ensure that we can access other webpages from the webapps folder using a standard browser. Try to access the URL \u2013 http:\/\/localhost:8080\/leaveService\/leave.wsdl, if everything is ok with the Spring Web Application, we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springws\/images\/first_application_result.jpg\" alt=\"Static WSDL result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In the previous chapter&nbsp;Spring -WS &#8211; First Application, we have generated WSDL automatically using the Spring WS Configuration. In this case, we will display how to expose the existing WSDL using the Spring WS. Step Description 1 Create a project with a name leaveService under a package com.codemeals as explained in the Spring WS &#8211; [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            21
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1103"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1103"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1103\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1197,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1103\/revisions\/1197"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1103"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1103"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1103"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1102,
        "date": "2020-07-23T16:57:26",
        "date_gmt": "2020-07-23T16:57:26",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1102"
        },
        "modified": "2020-07-24T12:00:16",
        "modified_gmt": "2020-07-24T12:00:16",
        "slug": "writing-server",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/writing-server\/",
        "title": {
            "rendered": "Writing Server"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will understand how to create a web application server using Spring WS.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name countryService under a package com.codemeals as explained in the Spring WS &#8211; First Application chapter.<\/td><\/tr><tr><td>2<\/td><td>Create countries.xsd, domain classes, CountryRepository and CountryEndPoint as explained in the following steps.<\/td><\/tr><tr><td>3<\/td><td>Update spring-ws-servlet.xml under the \/WEB-INF sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create content for all the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>countries.xsd<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;xs:schema xmlns:xs = \"http:\/\/www.w3.org\/2001\/XMLSchema\" \n   xmlns:tns = \"http:\/\/codemeals\/schemas\"\n   targetNamespace = \"http:\/\/codemeals\/schemas\" \n   elementFormDefault = \"qualified\">\n\n   &lt;xs:element name = \"getCountryRequest\">\n      &lt;xs:complexType>\n         &lt;xs:sequence>\n            &lt;xs:element name = \"name\" type = \"xs:string\"\/>\n         &lt;\/xs:sequence>\n      &lt;\/xs:complexType>\n   &lt;\/xs:element>\n\n   &lt;xs:element name = \"getCountryResponse\">\n      &lt;xs:complexType>\n         &lt;xs:sequence>\n            &lt;xs:element name = \"country\" type = \"tns:country\"\/>\n         &lt;\/xs:sequence>\n      &lt;\/xs:complexType>\n   &lt;\/xs:element>\n\n   &lt;xs:complexType name = \"country\">\n      &lt;xs:sequence>\n         &lt;xs:element name = \"name\" type = \"xs:string\"\/>\n         &lt;xs:element name = \"population\" type = \"xs:int\"\/>\n         &lt;xs:element name = \"capital\" type = \"xs:string\"\/>\n         &lt;xs:element name = \"currency\" type = \"tns:currency\"\/>\n      &lt;\/xs:sequence>\n   &lt;\/xs:complexType>\n\n   &lt;xs:simpleType name = \"currency\">\n      &lt;xs:restriction base = \"xs:string\">\n         &lt;xs:enumeration value = \"GBP\"\/>\n         &lt;xs:enumeration value = \"USD\"\/>\n         &lt;xs:enumeration value = \"INR\"\/>\n      &lt;\/xs:restriction>\n   &lt;\/xs:simpleType>\n&lt;\/xs:schema><\/code><\/pre>\n\n\n\n<h2>Create the Project<\/h2>\n\n\n\n<p>Let us open the command console, go the C:\\MVN directory and execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN>mvn archetype:generate -DarchetypeGroupId = org.springframework.ws \n-DarchetypeArtifactId = spring-ws-archetype -DgroupId = com.codemeals \n-DartifactId = countryService<\/code><\/pre>\n\n\n\n<p>Maven will start processing and will create the complete Java Application Project Structure.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building Maven Stub Project (No POM) 1\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO]\n&#91;INFO] Using property: groupId = com.codemeals\n&#91;INFO] Using property: artifactId = countryService\nDefine value for property 'version':  1.0-SNAPSHOT: :\n&#91;INFO] Using property: package = com.codemeals\nConfirm properties configuration:\ngroupId: com.codemeals\nartifactId: countryService\nversion: 1.0-SNAPSHOT\npackage: com.codemeals\n Y: :\n&#91;INFO] -------------------------------------------------------------------------\n---\n&#91;INFO] Using following parameters for creating project from Old (1.x) Archetype:\n spring-ws-archetype:2.0.0-M1\n&#91;INFO] -------------------------------------------------------------------------\n---\n&#91;INFO] Parameter: groupId, Value: com.codemeals\n&#91;INFO] Parameter: packageName, Value: com.codemeals\n&#91;INFO] Parameter: package, Value: com.codemeals\n&#91;INFO] Parameter: artifactId, Value: countryService\n&#91;INFO] Parameter: basedir, Value: C:\\mvn\n&#91;INFO] Parameter: version, Value: 1.0-SNAPSHOT\n&#91;INFO] project created from Old (1.x) Archetype in dir: C:\\mvn\\countryService\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 35.989 s\n&#91;INFO] Finished at: 2017-01-21T11:18:31+05:30\n&#91;INFO] Final Memory: 17M\/178M\n&#91;INFO] ------------------------------------------------------------------------<\/code><\/pre>\n\n\n\n<p>Now go to C:\/MVN directory. We will see a java application project created named countryService (as specified in artifactId). Update the pom.xml.<\/p>\n\n\n\n<h3>pom.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;project xmlns = \"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"http:\/\/maven.apache.org\/POM\/4.0.0 \n   http:\/\/maven.apache.org\/maven-v4_0_0.xsd\">\n   \n   &lt;modelVersion>4.0.0&lt;\/modelVersion>\n   &lt;groupId>com.codemeals.hr&lt;\/groupId>\n   &lt;artifactId>countryService&lt;\/artifactId>\n   &lt;packaging>war&lt;\/packaging>\n   &lt;version>1.0-SNAPSHOT&lt;\/version>\n   &lt;name>countryService Spring-WS Application&lt;\/name>\n   &lt;url>http:\/\/www.springframework.org\/spring-ws&lt;\/url>\n   \n   &lt;build>\n      &lt;finalName>countryService&lt;\/finalName>\n   &lt;\/build>\n   \n   &lt;dependencies>\n      &lt;dependency>\n         &lt;groupId>org.springframework.ws&lt;\/groupId>\n         &lt;artifactId>spring-ws-core&lt;\/artifactId>\n         &lt;version>2.4.0.RELEASE&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>jdom&lt;\/groupId>\n         &lt;artifactId>jdom&lt;\/artifactId>\n         &lt;version>1.0&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>jaxen&lt;\/groupId>\n         &lt;artifactId>jaxen&lt;\/artifactId>\n         &lt;version>1.1&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>wsdl4j&lt;\/groupId>\n         &lt;artifactId>wsdl4j&lt;\/artifactId>\n         &lt;version>1.6.2&lt;\/version>\n      &lt;\/dependency>\n   &lt;\/dependencies>\n&lt;\/project><\/code><\/pre>\n\n\n\n<h2>Create Domain Classes<\/h2>\n\n\n\n<p>Copy the countries.xsd in C:\\mvn\\countryService\\src\\main\\resources folder. Let us open the command console, go the C:\\mvn\\countryService\\src\\main\\resources directory and execute the following&nbsp;<strong>xjc<\/strong>&nbsp;command to generate domain classes using the countries.xsd.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN\\countryService\\src\\main\\resources>xjc -p com.codemeals countries.xsd<\/code><\/pre>\n\n\n\n<p>Maven will start processing and will create the domain classes in com.codemeals package.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>parsing a schema...\ncompiling a schema...\ncom\\codemeals\\Country.java\ncom\\codemeals\\Currency.java\ncom\\codemeals\\GetCountryRequest.java\ncom\\codemeals\\GetCountryResponse.java\ncom\\codemeals\\ObjectFactory.java\ncom\\codemeals\\package-info.java<\/code><\/pre>\n\n\n\n<p>Create folder java in C:\\mvn\\countryService\\src\\main folder. Copy all the classes in the C:\\mvn\\countryService\\src\\main\\java folder. Create CountryRepository and CountryEndPoint to represent the country database and country server respectively.<\/p>\n\n\n\n<h3>CountryRepository.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.beans.propertyeditors.CurrencyEditor;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.Assert;\n\n@Component\npublic class CountryRepository {\n   private static final List&lt;Country> countries = new ArrayList&lt;Country>();\n\n   public CountryRepository(){\n      initData();\n   }\n   public void initData() {\n      Country us = new Country();\n      us.setName(\"United States\");\n      us.setCapital(\"Washington\");\n      us.setCurrency(Currency.USD);\n      us.setPopulation(46704314);\n   \n      countries.add(us);\n   \n      Country india = new Country();\n      india.setName(\"India\");\n      india.setCapital(\"New Delhi\");\n      india.setCurrency(Currency.INR);\n      india.setPopulation(138186860);\n\n      countries.add(india);\n    \n      Country uk = new Country();\n      uk.setName(\"United Kingdom\");\n      uk.setCapital(\"London\");\n      uk.setCurrency(Currency.GBP);\n      uk.setPopulation(63705000);\n   \n      countries.add(uk);\n   }\n   public Country findCountry(String name) {\n      Assert.notNull(name);\n      Country result = null;\n\n      for (Country country : countries) {\n         if (name.trim().equals(country.getName())) {\n            result = country;\n         }\n      }\n      return result;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>CountryEndPoint.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals.ws;\n\nimport org.jdom.JDOMException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ws.server.endpoint.annotation.Endpoint;\nimport org.springframework.ws.server.endpoint.annotation.PayloadRoot;\nimport org.springframework.ws.server.endpoint.annotation.RequestPayload;\nimport org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n\nimport com.codemeals.Country;\nimport com.codemeals.CountryRepository;\nimport com.codemeals.GetCountryRequest;\nimport com.codemeals.GetCountryResponse;\n\n@Endpoint\npublic class CountryEndPoint {\n   private static final String NAMESPACE_URI = \"http:\/\/codemeals\/schemas\";\n   private CountryRepository countryRepository;\n\n   @Autowired\n   public CountryEndPoint(CountryRepository countryRepository) throws JDOMException {\n      this.countryRepository = countryRepository;\n   }\n   @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getCountryRequest\")\n   @ResponsePayload\n   public GetCountryResponse getCountry(@RequestPayload GetCountryRequest request) \n      throws JDOMException {\n      \n      Country country = countryRepository.findCountry(request.getName());\n      GetCountryResponse response = new GetCountryResponse();\n      response.setCountry(country);\n      return response;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>\/WEB-INF\/spring-ws-servlet.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:sws = \"http:\/\/www.springframework.org\/schema\/web-services\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   \n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/web-services\n   http:\/\/www.springframework.org\/schema\/web-services\/web-services-2.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\"\/>\n   &lt;sws:annotation-driven\/>\n\n   &lt;sws:dynamic-wsdl id=\"countries\"\n      portTypeName = \"CountriesPort\"\n      locationUri = \"\/countryService\/\"\n      targetNamespace = \"http:\/\/codemeals.com\/definitions\">\n      &lt;sws:xsd location = \"\/WEB-INF\/countries.xsd\"\/>\n   &lt;\/sws:dynamic-wsdl>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h3>\/WEB-INF\/web.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;web-app xmlns = \"http:\/\/java.sun.com\/xml\/ns\/j2ee\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"http:\/\/java.sun.com\/xml\/ns\/j2ee\n   http:\/\/java.sun.com\/xml\/ns\/j2ee\/web-app_2_4.xsd\"\n   version = \"2.4\">\n\n   &lt;display-name>codemeals Country Service&lt;\/display-name>\n\n   &lt;servlet>\n      &lt;servlet-name>spring-ws&lt;\/servlet-name>\n      &lt;servlet-class>org.springframework.ws.transport.http.MessageDispatcherServlet\n      &lt;\/servlet-class>\n      &lt;init-param>\n         &lt;param-name>transformWsdlLocations&lt;\/param-name>\n         &lt;param-value>true&lt;\/param-value>\n      &lt;\/init-param>\n   &lt;\/servlet>\n   \n   &lt;servlet-mapping>\n      &lt;servlet-name>spring-ws&lt;\/servlet-name>\n      &lt;url-pattern>\/*&lt;\/url-pattern>\n   &lt;\/servlet-mapping>\n&lt;\/web-app><\/code><\/pre>\n\n\n\n<h2>Build the Project<\/h2>\n\n\n\n<p>Let us open the command console. Go the C:\\MVN\\countryService directory and execute the following&nbsp;<strong>mvn<\/strong>&nbsp;command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN\\countryService>mvn clean package\n<\/code><\/pre>\n\n\n\n<p>Maven will start building the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building countryService Spring-WS Application 1.0-SNAPSHOT\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO]\n&#91;INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ countryService ---\n&#91;INFO] Deleting C:\\mvn\\countryService\\target\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ countrySer\nvice ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] Copying 0 resource\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ countryService\n---\n&#91;INFO] Changes detected - recompiling the module!\n&#91;WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. \nbuild is platform dependent!\n&#91;INFO] Compiling 4 source files to C:\\mvn\\countryService\\target\\classes\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ co\nuntryService ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] skip non existing resourceDirectory C:\\mvn\\countryService\\src\\test\\resour\nces\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ country\nService ---\n&#91;INFO] No sources to compile\n&#91;INFO]\n&#91;INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ countryService ---\n\n&#91;INFO] No tests to run.\n&#91;INFO]\n&#91;INFO] --- maven-war-plugin:2.2:war (default-war) @ countryService ---\n&#91;INFO] Packaging webapp\n&#91;INFO] Assembling webapp &#91;countryService] in &#91;C:\\mvn\\countryService\\target\\count\nryService]\n&#91;INFO] Processing war project\n&#91;INFO] Copying webapp resources &#91;C:\\mvn\\countryService\\src\\main\\webapp]\n&#91;INFO] Webapp assembled in &#91;5137 msecs]\n&#91;INFO] Building war: C:\\mvn\\countryService\\target\\countryService.war\n&#91;INFO] WEB-INF\\web.xml already added, skipping\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 16.484 s\n&#91;INFO] Finished at: 2017-01-28T09:07:59+05:30\n&#91;INFO] Final Memory: 19M\/170M\n&#91;INFO] ------------------------------------------------------------------------<\/code><\/pre>\n\n\n\n<h2>Run the Project<\/h2>\n\n\n\n<p>Once we have created the source and configuration files, export the countryService.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and ensure if we can access other webpages from the webapps folder using a standard browser. Make a POST request to the URL \u2013 http:\/\/localhost:8080\/countryService\/ and by using any SOAP client make the following request.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;x:Envelope xmlns:x = \"http:\/\/schemas.xmlsoap.org\/soap\/envelope\/\" \n   xmlns:tns = \"http:\/\/codemeals\/schemas\">\n   &lt;x:Header\/>\n   &lt;x:Body>\n      &lt;tns:getCountryRequest>\n         &lt;tns:name>United States&lt;\/tns:name>\n      &lt;\/tns:getCountryRequest>\n   &lt;\/x:Body>\n&lt;\/x:Envelope><\/code><\/pre>\n\n\n\n<p>You will see the following result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV = \"http:\/\/schemas.xmlsoap.org\/soap\/envelope\/\">\n   &lt;SOAP-ENV:Header\/>\n   &lt;SOAP-ENV:Body>\n      &lt;ns2:getCountryResponse xmlns:ns2 = \"http:\/\/codemeals\/schemas\">\n         &lt;ns2:country>\n            &lt;ns2:name>United States&lt;\/ns2:name>\n            &lt;ns2:population>46704314&lt;\/ns2:population>\n            &lt;ns2:capital>Washington&lt;\/ns2:capital>\n            &lt;ns2:currency>USD&lt;\/ns2:currency>\n         &lt;\/ns2:country>\n      &lt;\/ns2:getCountryResponse>\n   &lt;\/SOAP-ENV:Body>\n&lt;\/SOAP-ENV:Envelope><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will understand how to create a web application server using Spring WS. Step Description 1 Create a project with a name countryService under a package com.codemeals as explained in the Spring WS &#8211; First Application chapter. 2 Create countries.xsd, domain classes, CountryRepository and CountryEndPoint as explained in the following steps. 3 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            21
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1102"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1102"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1102\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1196,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1102\/revisions\/1196"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1102"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1102"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1102"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1101,
        "date": "2020-07-23T16:58:48",
        "date_gmt": "2020-07-23T16:58:48",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1101"
        },
        "modified": "2020-07-24T11:57:30",
        "modified_gmt": "2020-07-24T11:57:30",
        "slug": "unit-test-server",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/unit-test-server\/",
        "title": {
            "rendered": "Unit Test Server"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will understand how to unit test a web application service created by using the Spring WS.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update project countryService created in the Spring WS \u2013 Write Server chapter. Add src\/test\/java folder.<\/td><\/tr><tr><td>2<\/td><td>Create CustomerEndPointTest.java under the \u2013 src\/test\/java\/com\/codemeals\/ws folder and then update the POM.xml as detailed below.<\/td><\/tr><tr><td>3<\/td><td>Add spring-context.xml under the src\/main\/resources sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create content for all the source and configuration files and test the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>POM.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;project xmlns = \"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"http:\/\/maven.apache.org\/POM\/4.0.0 \n   http:\/\/maven.apache.org\/maven-v4_0_0.xsd\">\n   \n   &lt;modelVersion>4.0.0&lt;\/modelVersion>\n   &lt;groupId>com.codemeals&lt;\/groupId>\n   &lt;artifactId>countryService&lt;\/artifactId>\n   &lt;packaging>war&lt;\/packaging>\n   &lt;version>1.0-SNAPSHOT&lt;\/version>\n   &lt;name>countryService Spring-WS Application&lt;\/name>\n   &lt;url>http:\/\/www.springframework.org\/spring-ws&lt;\/url>\n   &lt;build>\n      &lt;finalName>countryService&lt;\/finalName>\n   &lt;\/build>\n   \n   &lt;dependencies>\n      &lt;dependency>\n         &lt;groupId>org.springframework.ws&lt;\/groupId>\n         &lt;artifactId>spring-ws-core&lt;\/artifactId>\n         &lt;version>2.4.0.RELEASE&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>org.springframework&lt;\/groupId>\n         &lt;artifactId>spring-test&lt;\/artifactId>\n         &lt;version>2.5&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>org.springframework.ws&lt;\/groupId>\n         &lt;artifactId>spring-ws-test&lt;\/artifactId>\n         &lt;version>2.4.0.RELEASE&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>org.springframework&lt;\/groupId>\n         &lt;artifactId>spring-tx&lt;\/artifactId>\n         &lt;version>3.1.2.RELEASE&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>jdom&lt;\/groupId>\n         &lt;artifactId>jdom&lt;\/artifactId>\n         &lt;version>1.0&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>jaxen&lt;\/groupId>\n         &lt;artifactId>jaxen&lt;\/artifactId>\n         &lt;version>1.1&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>wsdl4j&lt;\/groupId>\n         &lt;artifactId>wsdl4j&lt;\/artifactId>\n         &lt;version>1.6.2&lt;\/version>\n      &lt;\/dependency>\n      \n      &lt;dependency>\n         &lt;groupId>junit&lt;\/groupId>\n         &lt;artifactId>junit&lt;\/artifactId>\n         &lt;version>4.5&lt;\/version>\n         &lt;scope>test&lt;\/scope>\n      &lt;\/dependency>\n   &lt;\/dependencies>\n&lt;\/project><\/code><\/pre>\n\n\n\n<h3>spring-context.xml<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:sws = \"http:\/\/www.springframework.org\/schema\/web-services\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   \n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/web-services\n   http:\/\/www.springframework.org\/schema\/web-services\/web-services-2.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\"\/>\n   &lt;sws:annotation-driven\/>\n\n   &lt;bean id = \"schema\" class = \"org.springframework.core.io.ClassPathResource\">\n      &lt;constructor-arg index = \"0\" value = \"countries.xsd\" \/>\n   &lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h3>CustomerEndPointTest.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals.ws;\n\nimport javax.xml.transform.Source;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.ws.test.server.MockWebServiceClient;\nimport org.springframework.xml.transform.StringSource;\n\nimport static org.springframework.ws.test.server.RequestCreators.withPayload;\nimport static org.springframework.ws.test.server.ResponseMatchers.payload;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration( locations = \"\/spring-context.xml\" )\npublic class CustomerEndPointTest {\n   @Autowired\n   private ApplicationContext applicationContext;\n   private MockWebServiceClient mockClient;\n\n   @Before\n   public void createClient() {\n      mockClient = MockWebServiceClient.createClient(applicationContext);\n      GenericApplicationContext ctx = (GenericApplicationContext) applicationContext;\n      final XmlBeanDefinitionReader definitionReader = new XmlBeanDefinitionReader(ctx);\n      definitionReader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_NONE);\n      definitionReader.setNamespaceAware(true);\n   }\n   @Test\n   public void testCountryEndpoint() throws Exception {\n      Source requestPayload = new StringSource(\n         \"&lt;getCountryRequest xmlns = 'http:\/\/codemeals\/schemas'>\"+\n         \"&lt;name>United States&lt;\/name>\"+\n         \"&lt;\/getCountryRequest>\");\t\t\t\t\n      Source responsePayload = new StringSource(\n         \"&lt;getCountryResponse xmlns='http:\/\/codemeals\/schemas'>\" +\n         \"&lt;country>\" +\n         \"&lt;name>United States&lt;\/name>\"+\n         \"&lt;population>46704314&lt;\/population>\"+\n         \"&lt;capital>Washington&lt;\/capital>\"+\n         \"&lt;currency>USD&lt;\/currency>\"+\n         \"&lt;\/country>\"+\n         \"&lt;\/getCountryResponse>\");\n      mockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(responsePayload));\n   }\t\n}<\/code><\/pre>\n\n\n\n<h2>Build the Project<\/h2>\n\n\n\n<p>Let us open the command console, go to the C:\\MVN\\countryService directory and execute the following mvn command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN\\countryService>mvn test\n<\/code><\/pre>\n\n\n\n<p>Maven will start building and test the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building countryService Spring-WS Application 1.0-SNAPSHOT\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ countrySer\nvice ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] Copying 2 resources\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ countryService\n---\n&#91;INFO] Nothing to compile - all classes are up to date\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ co\nuntryService ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] skip non existing resourceDirectory C:\\MVN\\countryService\\src\\test\\resour\nces\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ country\nService ---\n&#91;INFO] Nothing to compile - all classes are up to date\n&#91;INFO]\n&#91;INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ countryService ---\n\n&#91;INFO] Surefire report directory: C:\\MVN\\countryService\\target\\surefire-reports\n\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.codemeals.ws.CustomerEndPointTest\nFeb 27, 2017 11:49:30 AM org.springframework.test.context.TestContextManager ret\nrieveTestExecutionListeners\nINFO: @TestExecutionListeners is not present for class &#91;class com.codemeals\n.ws.CustomerEndPointTest]: using defaults.\nFeb 27, 2017 11:49:30 AM org.springframework.beans.factory.xml.XmlBeanDefinition\nReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource &#91;spring-context.xml]\n\nFeb 27, 2017 11:49:30 AM org.springframework.context.support.GenericApplicationC\nontext prepareRefresh\nINFO: Refreshing org.springframework.context.support.GenericApplicationContext@b\n2eddc0: startup date &#91;Mon Feb 27 11:49:30 IST 2017]; root of context hierarchy\nFeb 27, 2017 11:49:31 AM org.springframework.ws.soap.addressing.server.Annotatio\nnActionEndpointMapping afterPropertiesSet\nINFO: Supporting &#91;WS-Addressing August 2004, WS-Addressing 1.0]\nFeb 27, 2017 11:49:31 AM org.springframework.ws.soap.saaj.SaajSoapMessageFactory\n afterPropertiesSet\nINFO: Creating SAAJ 1.3 MessageFactory with SOAP 1.1 Protocol\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.386 sec\nFeb 27, 2017 11:49:31 AM org.springframework.context.support.GenericApplicationC\nontext doClose\nINFO: Closing org.springframework.context.support.GenericApplicationContext@b2ed\ndc0: startup date &#91;Mon Feb 27 11:49:30 IST 2017]; root of context hierarchy\n\nResults :\n\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 3.517 s\n&#91;INFO] Finished at: 2017-02-27T11:49:31+05:30\n&#91;INFO] Final Memory: 11M\/109M\n&#91;INFO] --------------------------------------------------------------<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will understand how to unit test a web application service created by using the Spring WS. Step Description 1 Update project countryService created in the Spring WS \u2013 Write Server chapter. Add src\/test\/java folder. 2 Create CustomerEndPointTest.java under the \u2013 src\/test\/java\/com\/codemeals\/ws folder and then update the POM.xml as detailed below. 3 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            21
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1101"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1101"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1101\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1195,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1101\/revisions\/1195"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1101"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1101"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1101"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1100,
        "date": "2020-07-23T16:59:36",
        "date_gmt": "2020-07-23T16:59:36",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1100"
        },
        "modified": "2020-07-24T11:56:37",
        "modified_gmt": "2020-07-24T11:56:37",
        "slug": "writing-client",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/writing-client\/",
        "title": {
            "rendered": "Writing Client"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will learn how to create a client for the web application server created in the&nbsp;Spring WS &#8211; Writing Server&nbsp;using Spring WS.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project countryService under the package com.codemeals as explained in the Spring WS \u2013 Writing Server chapter.<\/td><\/tr><tr><td>2<\/td><td>Create CountryServiceClient.java under the package com.codemeals.client and MainApp.java under the package com.codemeals as explained in the following steps.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>CountryServiceClient.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals.client;\n\nimport org.springframework.ws.client.core.support.WebServiceGatewaySupport;\nimport com.codemeals.GetCountryRequest;\nimport com.codemeals.GetCountryResponse;\n\npublic class CountryServiceClient extends WebServiceGatewaySupport {\n   public GetCountryResponse getCountryDetails(String country){\n      String uri = \"http:\/\/localhost:8080\/countryService\/\";\n      GetCountryRequest request = new GetCountryRequest();\n      request.setName(country);\n\n      GetCountryResponse response =(GetCountryResponse) getWebServiceTemplate()\n         .marshalSendAndReceive(uri, request);\n      return response;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>MainApp.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.oxm.jaxb.Jaxb2Marshaller;\nimport com.codemeals.client.CountryServiceClient;\n\npublic class MainApp {\n   public static void main(String&#91;] args) {\n      CountryServiceClient client = new CountryServiceClient();\n      Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n      marshaller.setContextPath(\"com.codemeals\");\n      client.setMarshaller(marshaller);\n      client.setUnmarshaller(marshaller);\n      GetCountryResponse response = client.getCountryDetails(\"United States\");\n\n      System.out.println(\"Country : \" + response.getCountry().getName());\n      System.out.println(\"Capital : \" + response.getCountry().getCapital());\n      System.out.println(\"Population : \" + response.getCountry().getPopulation());\n      System.out.println(\"Currency : \" + response.getCountry().getCurrency());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Start the Web Service<\/h2>\n\n\n\n<p>Start the Tomcat server and ensure that we can access other webpages from the webapps folder using a standard browser.<\/p>\n\n\n\n<h2>Test Web Service Client<\/h2>\n\n\n\n<p>Right click on the MainApp.java in your application under Eclipse and use&nbsp;<strong>run as Java Application<\/strong>&nbsp;command. If everything is ok with the application, it will print the following message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Country : United States\nCapital : Washington\nPopulation : 46704314\nCurrency : USD<\/code><\/pre>\n\n\n\n<p>Here, we have created a Client \u2013&nbsp;<strong>CountryServiceClient.java<\/strong>&nbsp;for the SOAP based web service. MainApp uses CountryServiceClient to make a hit to the web service, makes a post request and gets the data.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will learn how to create a client for the web application server created in the&nbsp;Spring WS &#8211; Writing Server&nbsp;using Spring WS. Step Description 1 Update the project countryService under the package com.codemeals as explained in the Spring WS \u2013 Writing Server chapter. 2 Create CountryServiceClient.java under the package com.codemeals.client and MainApp.java [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            21
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1100"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1100"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1100\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1194,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1100\/revisions\/1194"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1100"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1100"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1100"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1099,
        "date": "2020-07-23T17:00:46",
        "date_gmt": "2020-07-23T17:00:46",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1099"
        },
        "modified": "2020-07-23T17:00:46",
        "modified_gmt": "2020-07-23T17:00:46",
        "slug": "unit-test-client",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/unit-test-client\/",
        "title": {
            "rendered": "Unit Test Client"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will learn how to unit test a client created in the\u00a0Spring WS &#8211; Writing Client\u00a0for the web application server created in chapter\u00a0Spring WS &#8211; Writing Server\u00a0using Spring WS.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Update the project countryService under the package com.tutorialspoint as explained in the Spring WS &#8211; Writing Server chapter.<\/td><\/tr><tr><td>2<\/td><td>Create CountryServiceClientTest.java under the package com.tutorialspoint under folder SRC \u2192 Test \u2192 Java as explained in steps given below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>CountryServiceClientTest.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.oxm.jaxb.Jaxb2Marshaller;\n\nimport com.tutorialspoint.client.CountryServiceClient;\n\npublic class CountryServiceClientTest {\n   CountryServiceClient client;\n   \n   @Before\n   public void setUp() throws Exception {\n      client = new CountryServiceClient();\n      Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n      marshaller.setContextPath(\"com.tutorialspoint\");\n      client.setMarshaller(marshaller);\n      client.setUnmarshaller(marshaller);\n   }\n   @Test\n   public void test() {\n      GetCountryResponse response = client.getCountryDetails(\"United States\");\n      Country expectedCountry = new Country();\n      expectedCountry.setCapital(\"Washington\");\n      Country actualCountry = response.getCountry();\n      Assert.assertEquals(expectedCountry.getCapital(), actualCountry.getCapital());\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Start the Web Service<\/h3>\n\n\n\n<p>Start the Tomcat server and ensure we are able to access other webpages from the webapps folder using a standard browser.<\/p>\n\n\n\n<h2>Unit Test Web Service Client<\/h2>\n\n\n\n<p>Let us open the command console, go to the C:\\MVN\\countryService directory and execute the following mvn command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\MVN\\countryService>mvn test\n<\/code><\/pre>\n\n\n\n<p>Maven will start building and testing the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;INFO] Scanning for projects...\n&#91;INFO]\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Building countryService Spring-WS Application 1.0-SNAPSHOT\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ countrySer\nvice ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] Copying 2 resources\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ countryService\n---\n&#91;INFO] Changes detected - recompiling the module!\n&#91;WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. b\nuild is platform dependent!\n&#91;INFO] Compiling 10 source files to C:\\MVN\\countryService\\target\\classes\n&#91;INFO]\n&#91;INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ co\nuntryService ---\n&#91;WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n&#91;INFO] skip non existing resourceDirectory C:\\MVN\\countryService\\src\\test\\resour\nces\n&#91;INFO]\n&#91;INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ country\nService ---\n&#91;INFO] Changes detected - recompiling the module!\n&#91;WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. b\nuild is platform dependent!\n&#91;INFO] Compiling 2 source files to C:\\MVN\\countryService\\target\\test-classes\n&#91;INFO]\n&#91;INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ countryService ---\n\n&#91;INFO] Surefire report directory: C:\\MVN\\countryService\\target\\surefire-reports\n\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.tutorialspoint.CountryServiceClientTest\nFeb 27, 2017 8:45:26 PM org.springframework.ws.soap.saaj.SaajSoapMessageFactory\nafterPropertiesSet\nINFO: Creating SAAJ 1.3 MessageFactory with SOAP 1.1 Protocol\nFeb 27, 2017 8:45:26 PM org.springframework.oxm.jaxb.Jaxb2Marshaller createJaxbC\nontextFromContextPath\nINFO: Creating JAXBContext with context path &#91;com.tutorialspoint]\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.457 sec\nRunning com.tutorialspoint.ws.CustomerEndPointTest\nFeb 27, 2017 8:45:27 PM org.springframework.test.context.TestContextManager retr\nieveTestExecutionListeners\nINFO: @TestExecutionListeners is not present for class &#91;class com.tutorialspoint\n.ws.CustomerEndPointTest]: using defaults.\nFeb 27, 2017 8:45:27 PM org.springframework.beans.factory.xml.XmlBeanDefinitionR\neader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource &#91;spring-context.xml]\n\nFeb 27, 2017 8:45:27 PM org.springframework.context.support.GenericApplicationCo\nntext prepareRefresh\nINFO: Refreshing org.springframework.context.support.GenericApplicationContext@5\n17c642: startup date &#91;Mon Feb 27 20:45:27 IST 2017]; root of context hierarchy\nFeb 27, 2017 8:45:28 PM org.springframework.ws.soap.addressing.server.Annotation\nActionEndpointMapping afterPropertiesSet\nINFO: Supporting &#91;WS-Addressing August 2004, WS-Addressing 1.0]\nFeb 27, 2017 8:45:28 PM org.springframework.ws.soap.saaj.SaajSoapMessageFactory\nafterPropertiesSet\nINFO: Creating SAAJ 1.3 MessageFactory with SOAP 1.1 Protocol\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.243 sec\nFeb 27, 2017 8:45:28 PM org.springframework.context.support.GenericApplicationCo\nntext doClose\nINFO: Closing org.springframework.context.support.GenericApplicationContext@517c\n642: startup date &#91;Mon Feb 27 20:45:27 IST 2017]; root of context hierarchy\n\nResults :\n\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0\n\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] BUILD SUCCESS\n&#91;INFO] ------------------------------------------------------------------------\n&#91;INFO] Total time: 5.686 s\n&#91;INFO] Finished at: 2017-02-27T20:45:28+05:30\n&#91;INFO] Final Memory: 17M\/173M\n&#91;INFO] ------------------------------------------<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will learn how to unit test a client created in the\u00a0Spring WS &#8211; Writing Client\u00a0for the web application server created in chapter\u00a0Spring WS &#8211; Writing Server\u00a0using Spring WS. Step Description 1 Update the project countryService under the package com.tutorialspoint as explained in the Spring WS &#8211; Writing Server chapter. 2 Create [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            21
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1099"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1099"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1099\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1114,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1099\/revisions\/1114"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1099"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1099"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1099"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]