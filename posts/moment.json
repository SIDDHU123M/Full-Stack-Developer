[
    {
        "id": 4503,
        "date": "2020-07-21T11:13:39",
        "date_gmt": "2020-07-21T11:13:39",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=171"
        },
        "modified": "2020-07-21T11:13:39",
        "modified_gmt": "2020-07-21T11:13:39",
        "slug": "overview-4-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/overview-4-2\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>MomentJS is a JavaScript library which helps is parsing, validating, manipulating and displaying date\/time in JavaScript in a very easy way. This chapter will provide an overview of MomentJS and discusses its features in detail.<\/p>\n\n\n\n<p>Moment JS allows displaying of date as per localization and in human readable format. You can use MomentJS inside a browser using the script method. It is also available with Node.js and can be installed using npm.<\/p>\n\n\n\n<p>In MomentJS, you can find many easy to use methods to add, subtract, validate date, get the maximum, minimum date etc. It is an open source project and you can easily contribute to the library and add features in the form of plugins and make it available on GitHub and in Node.js.<\/p>\n\n\n\n<h2>Features<\/h2>\n\n\n\n<p>Let us understand in detail all the important features available with MomentJS \u2212<\/p>\n\n\n\n<h3>Parsing<\/h3>\n\n\n\n<p>Parsing allows you to parse the date in the format required. Parsing of date is available in string, object and array. It allows you to clone the moment using moment.clone. There are methods available which gives the date output in UTC format.<\/p>\n\n\n\n<h3>Date Validation<\/h3>\n\n\n\n<p>Date Validation is very easy with MomentJS. You can use the method&nbsp;<strong>isValid()<\/strong>&nbsp;and check whether the date is valid or not. MomentJS also provides many parsing flags which can be used to check for date validation.<\/p>\n\n\n\n<h3>Manipulation<\/h3>\n\n\n\n<p>There are various methods to manipulate Date and Time on the moment object. add, subtract, startoftime, endoftime, local, utc, utcoffset etc., are the methods available which gives details required on date\/time in MomentJS.<\/p>\n\n\n\n<h3>Get\/Set<\/h3>\n\n\n\n<p>Get\/Set allows to read and set the units in the date. It allows to change as well as read hour , minute, seconds, millisecond, date of month, day of week, day of year, week of year, month, year, quarter, week year, weeks in year, get\/set, maximum , minimum etc. Get \/Set is a very helpful feature available in MomentJS.<\/p>\n\n\n\n<h3>Display<\/h3>\n\n\n\n<p>Display provides formats to display date in different ways. There are methods available which tells the time from a given moment, from the current moment, difference between two moments etc. It allows to display date in JSON format, Array, Object, String etc.<\/p>\n\n\n\n<h3>Date Queries<\/h3>\n\n\n\n<p>Date Queries has easy to use methods which tells if the date is greater or lesser than the input, in between the dates given, is a leap year, is a moment, is a date etc. It is very useful with date validation.<\/p>\n\n\n\n<h3>Durations<\/h3>\n\n\n\n<p>Durations is one of the important features in MomentJS. It basically handles length of the time for given units. The&nbsp;<strong>humanize<\/strong>&nbsp;method available displays date in a human readable format.<\/p>\n\n\n\n<h3>Internationalization<\/h3>\n\n\n\n<p>Internationalization is yet another important features in MomentJS. You can display Date and Time based on locale. The locale can be applied to a specific moment if required. You will get a minified file from the MomentJS home site which has all the locales. In case you are dealing with a specific locale, you can also add just that locale file and work with it. The names of months, weeks and days are displayed in the locale specified.<\/p>\n\n\n\n<h3>Customization<\/h3>\n\n\n\n<p>MomentJS allows customization to the locale created. You can customize month names, month abbreviation, weekday names, weekday abbreviation, long date format, and calendar format for a defined locale as per your requirements.<\/p>\n\n\n\n<h3>Utilities<\/h3>\n\n\n\n<p>Utilities comes with two methods:&nbsp;<strong>normalize units<\/strong>&nbsp;and&nbsp;<strong>invalid<\/strong>. They are used with the moment and helps us change or customize the output as we need. It also allows to set our own custom validation on the moment object.<\/p>\n\n\n\n<h3>Plugins<\/h3>\n\n\n\n<p>Plugins are additional features of MomentJS. There are many plugins added to calendars, date format, parsing, date ranges, precise range etc. You can add your own plugins and make them available with Node.js and GitHub.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJS is a JavaScript library which helps is parsing, validating, manipulating and displaying date\/time in JavaScript in a very easy way. This chapter will provide an overview of MomentJS and discusses its features in detail. Moment JS allows displaying of date as per localization and in human readable format. You can use MomentJS inside a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4503"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4503"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4503\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4503"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4503"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4503"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4502,
        "date": "2020-07-21T11:15:58",
        "date_gmt": "2020-07-21T11:15:58",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=170"
        },
        "modified": "2020-07-21T11:15:58",
        "modified_gmt": "2020-07-21T11:15:58",
        "slug": "environment-setup-3-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/environment-setup-3-2\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<p>In this chapter, you will learn in detail about setting up the working environment of MomentJS on your local computer. Before you begin with working on MomentJS, you need to have the access to the library. You can access its files in any of the following methods \u2212<\/p>\n\n\n\n<h2>Method 1: Using MomentJS File in Browser<\/h2>\n\n\n\n<p>In this method, we are going to need MomentJS file from its official website and will use it directly in the browser.<\/p>\n\n\n\n<h3>Step 1<\/h3>\n\n\n\n<p>As a first step, go to the official website of MomentJS\u00a0https:\/\/momentjs.comYou will find the home page as shown here \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/setup.jpg\" alt=\"Setup\"\/><\/figure>\n\n\n\n<p>Observe that there is a download option available which gives you the latest MomentJS file available. Note that the file is available with and without minification.<\/p>\n\n\n\n<h3>Step 2<\/h3>\n\n\n\n<p>Now, include\u00a0<strong>moment.js<\/strong>\u00a0inside the\u00a0<strong>script<\/strong>\u00a0tag and start working with MomentJS. For this, you can use the code given below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script type = \"text\/JavaScript\" src = \" https:\/\/MomentJS.com\/downloads\/moment.js\">&lt;\/script><\/code><\/pre>\n\n\n\n<p>Given here is a working example and its output for a better understanding \u2212<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>MomentJS - Working Example&lt;\/title>\n      &lt;script type = \"text\/JavaScript\" src = \"https:\/\/MomentJS.com\/downloads\/moment.js\">&lt;\/script>\n      &lt;style>\n         div {\n            border: solid 1px #ccc;\n            padding:10px;\n            font-family: \"Segoe UI\",Arial,sans-serif;\n            width: 50%;\n         }\n      &lt;\/style>\n   &lt;\/head>\n   &lt;body>\n      &lt;div style = \"font-size:25px\" id = \"todaysdate\">&lt;\/div>\n      &lt;script type = \"text\/JavaScript\">\n         var a = moment().toString();\n         document.getElementById(\"todaysdate\").innerHTML = a;\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>The\u00a0<strong>moment-locale<\/strong>\u00a0file to work with different locales is also available as shown in the screenshot above. Now, add the file to the script tag as shown below and work with different locales of your choice. For this, you can use the code given below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script type=\"text\/JavaScript\" src=\"https:\/\/MomentJS.com\/downloads\/moment-with-locales.js\">&lt;\/script><\/code><\/pre>\n\n\n\n<p>Given here is a working example for moment-locale and its output for a better understanding \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/JavaScript\" src =\"https:\/\/MomentJS.com\/downloads\/moment-with-locales.js\">&lt;\/script>\n   &lt;\/head>\n   &lt;body>\n      &lt;h1>Moment Locale&lt;\/h1>\n      &lt;div id = \"datedisplay\" style = \"font-size:30px;\">&lt;\/div>\n      &lt;script type = \"text\/JavaScript\">\n         var a = moment.locale(\"fr\");\n         var c = moment().format(\"LLLL\");\n         document.getElementById(\"datedisplay\").innerHTML = c;\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>Method 2: Using Node.js<\/h2>\n\n\n\n<p>If you are opting for this method, make sure you have\u00a0<strong>Node.js<\/strong>\u00a0and\u00a0<strong>npm<\/strong>\u00a0installed on your system. You can use the following command to install MomentJS \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install moment<\/code><\/pre>\n\n\n\n<p>You can observe the following output once MomentJS is successfully installed \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/nodejs.jpg\" alt=\"NodeJs\"\/><\/figure>\n\n\n\n<p>Now, to test if MomentJS works fine with Node.js, create the file test.js and add the following code to it \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var moment = require('moment');\nvar a = moment().toString();\nconsole.log(a);<\/code><\/pre>\n\n\n\n<p>Now, in the command prompt, run the command node test.js as shown in the screenshot given below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/nodejs_test.jpg\" alt=\"NodeJS Test\"\/><\/figure>\n\n\n\n<p>Note that this command displays the output for&nbsp;<strong>moment().toString()<\/strong>.<\/p>\n\n\n\n<h2>Method 3: Using Bower<\/h2>\n\n\n\n<p>Bower is another method to get the required files for MomentJS. You can use the following command to install MomentJS using Bower \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>bower install --save moment<\/code><\/pre>\n\n\n\n<p>The screenshot given below shows the installation of MomentJS using Bower \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/using_bower.jpg\" alt=\"Using Bower\"\/><\/figure>\n\n\n\n<p>These are the files loaded from Bower for MomentJS to install. The installed moment and locale files are shown in the image given below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/bower_momentjs.jpg\" alt=\"Bower MomentJS\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, you will learn in detail about setting up the working environment of MomentJS on your local computer. Before you begin with working on MomentJS, you need to have the access to the library. You can access its files in any of the following methods \u2212 Method 1: Using MomentJS File in Browser [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4502"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4502"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4502\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4502"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4502"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4502"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4501,
        "date": "2020-07-21T11:17:18",
        "date_gmt": "2020-07-21T11:17:18",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=169"
        },
        "modified": "2020-07-21T11:17:18",
        "modified_gmt": "2020-07-21T11:17:18",
        "slug": "introduction-2-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/introduction-2-2\/",
        "title": {
            "rendered": "Introduction"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will discuss how to work with&nbsp;<strong>MomentJS using RequireJS<\/strong>&nbsp;and&nbsp;<strong>MomentJS and TypeScript<\/strong>.<\/p>\n\n\n\n<h2>MomentJS and RequireJS<\/h2>\n\n\n\n<p>To understand the working of MomentJS using RequireJS, let us analyze a working example with MomentJS and RequireJS. The folder structure of the corresponding app is shown in the following image \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/momentjs_and_requirejs.jpg\" alt=\"MomentJS and RequireJS\"\/><\/figure>\n\n\n\n<p>You can obtain the require.js file fetched from RequireJS official site \u2212\u00a0https:\/\/requirejs.org\/docs\/download.html.\u00a0Observe the following code for a better understanding \u2212<\/p>\n\n\n\n<h3>Example project.html<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>RequireJS and MomentJS&lt;\/title>\n      &lt;!-- data-main attribute tells require.js to load\n         scripts\/main.js after require.js loads. -->\n      &lt;script data-main=\"scripts\/main\" src=\"scripts\/require.js\">&lt;\/script>\n   &lt;\/head>\n   &lt;body>\n      &lt;h1>RequireJS and MomentJS&lt;\/h1>\n      &lt;div id=\"datedisplay\" style=\"font-size:25px;\">&lt;\/div>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h3>main.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>require.config({\n   paths:{\n      'momentlocale':'libs\/momentlocale',\n   },\n});\nrequire(&#91;'momentlocale'], function (moment) {\n   moment.locale('fr');\n   var a = moment().format(\"LLLL\");\n   document.getElementById(\"datedisplay\").innerHTML = a;\n});<\/code><\/pre>\n\n\n\n<p>Note that&nbsp;<strong>Moment.js<\/strong>&nbsp;and&nbsp;<strong>momentlocale.js<\/strong>&nbsp;are in the folder&nbsp;<strong>libs<\/strong>.<\/p>\n\n\n\n<p>The following is the output for&nbsp;<strong>project.html<\/strong>&nbsp;that you will observe in the browser \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/requiredjs_and_momentjs.jpg\" alt=\"Requiredjs and MomentJS\"\/><\/figure>\n\n\n\n<h2>MomentJS and TypeScript<\/h2>\n\n\n\n<p>The code used for building MomentJS and Typescript project are as given below \u2212<\/p>\n\n\n\n<h3>package.json<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"name\": \"momenttypescript\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n   \"main\": \"index.js\",\n   \"dependencies\": {\n      \"browserify\": \"^16.2.0\",\n      \"gulp\": \"^3.9.1\",\n      \"gulp-connect\": \"^5.5.0\",\n      \"gulp-typescript\": \"^4.0.2\",\n      \"moment\": \"^2.22.1\",\n      \"tsify\": \"^4.0.0\",\n      \"typescript\": \"^2.8.3\",\n      \"vinyl-source-stream\": \"^2.0.0\"\n   },\n   \"devDependencies\": {},\n   \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n   },\n   \"author\": \"\",\n   \"license\": \"ISC\"\n}<\/code><\/pre>\n\n\n\n<p>Note that the dependencies available in&nbsp;<strong>package,json<\/strong>&nbsp;needs to be installed using npm&nbsp;<strong>install<\/strong>.<\/p>\n\n\n\n<h3>main.ts<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import * as moment from 'moment';\nlet now = moment().format('LLLL');\ndocument.getElementById(\"datedisplay\").innerHTML = now;<\/code><\/pre>\n\n\n\n<p>You need to&nbsp;<strong>use<\/strong>&nbsp;Gulp to build the file from typescript to JavaScript, that is from&nbsp;<strong>main.ts<\/strong>&nbsp;to&nbsp;<strong>main.js<\/strong>. The following code shows the&nbsp;<strong>gulpfile<\/strong>.js which is used to build the file. Note that we have used&nbsp;<strong>gulp-connect<\/strong>&nbsp;package which opens a local server to display the output.<\/p>\n\n\n\n<h3>gulpfile.js<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var gulp = require(\"gulp\");\nvar connect = require(\"gulp-connect\");\nvar browserify = require(\"browserify\");\nvar tsify = require(\"tsify\");\nvar source = require(\"vinyl-source-stream\");\ngulp.task(\"build\", function (cb) {\n   runSequence(\"browserify\", \"minify\", cb);\n});\ngulp.task(\"startserver\", &#91;\"browserify\", \"connect\"]);\ngulp.task(\"browserify\", function () {\nvar b = browserify({\n   insertGlobals: true,\n   debug: false\n}) .add(\"src\/main.ts\") .plugin(tsify, { typescript: require(\"typescript\") });\nreturn b\n   .bundle()\n   .pipe(source(\"main.js\"))\n   .pipe(gulp.dest(\"build\/\"));\n});\ngulp.task(\"connect\", function () {\n   connect.server({\n      root: \".\",\n      \/\/ port: '80',\n      livereload: true\n   });\n});<\/code><\/pre>\n\n\n\n<p>This is the output that you observe when you run the code given above \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/momentjs_and_typescript.jpg\" alt=\"MomentJS and Typescript\"\/><\/figure>\n\n\n\n<p>You can see the folder structure as shown in the following format \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/folder_structure.jpg\" alt=\"Folder Structure\"\/><\/figure>\n\n\n\n<p>The code for index.html is shown below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>&lt;\/head>\n   &lt;body>\n      &lt;h1>MomentJS and typescript&lt;\/h1>\n      &lt;div id=\"datedisplay\" style=\"font-size:30px;\">&lt;\/div>\n      &lt;script src=\"build\/main.js\">&lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Now, if you open&nbsp;<strong>http:\/\/localhost:8080\/<\/strong>, you can see the output as shown below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/localhost.jpg\" alt=\"Localhost\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will discuss how to work with&nbsp;MomentJS using RequireJS&nbsp;and&nbsp;MomentJS and TypeScript. MomentJS and RequireJS To understand the working of MomentJS using RequireJS, let us analyze a working example with MomentJS and RequireJS. The folder structure of the corresponding app is shown in the following image \u2212 You can obtain the require.js file [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4501"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4501"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4501\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4501"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4501"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4501"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4500,
        "date": "2020-07-21T11:17:58",
        "date_gmt": "2020-07-21T11:17:58",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=168"
        },
        "modified": "2020-07-21T11:17:58",
        "modified_gmt": "2020-07-21T11:17:58",
        "slug": "parsing-date-and-time",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/parsing-date-and-time\/",
        "title": {
            "rendered": "Parsing Date and Time"
        },
        "content": {
            "rendered": "\n<p>MomentJS has many easy to use methods which helps in parsing Date and Time. It can parse dates in the form of object, string, array, JavaScript native date object etc. This chapter discusses them in detail.<\/p>\n\n\n\n<h2>Parsing Date<\/h2>\n\n\n\n<p>MomentJS gives wrapper object as output when&nbsp;<strong>moment()<\/strong>&nbsp;is called. You can observe the following when you console the output in the browser.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/parsing_date.jpg\" alt=\"Parsing Date\"\/><\/figure>\n\n\n\n<p>MomentJS provides various methods to parse the Date as listed below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Method &amp; Syntax<\/th><\/tr><tr><td>1<\/td><td>Nowmoment()<\/td><\/tr><tr><td>2<\/td><td>Stringmoment(string)<\/td><\/tr><tr><td>3<\/td><td>Objectmoment(object)<\/td><\/tr><tr><td>4<\/td><td>Datemoment(Date)<\/td><\/tr><tr><td>5<\/td><td>Arraymoment(Array[])<\/td><\/tr><tr><td>6<\/td><td>Unix Timestampmoment(number)<\/td><\/tr><tr><td>7<\/td><td>Moment Clonemoment(Moment)<\/td><\/tr><tr><td>8<\/td><td>UTCmoment.utc()<\/td><\/tr><tr><td>9<\/td><td>parseZonemoment.parseZone()<\/td><\/tr><tr><td>10<\/td><td>Creation Datamoment().creationData();<\/td><\/tr><tr><td>11<\/td><td>Defaultsvar m = moment({hour: 3, minute: 40, seconds: 10});<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJS has many easy to use methods which helps in parsing Date and Time. It can parse dates in the form of object, string, array, JavaScript native date object etc. This chapter discusses them in detail. Parsing Date MomentJS gives wrapper object as output when&nbsp;moment()&nbsp;is called. You can observe the following when you console the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4500"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4500"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4500\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4500"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4500"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4500"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4499,
        "date": "2020-07-21T11:18:24",
        "date_gmt": "2020-07-21T11:18:24",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=167"
        },
        "modified": "2020-07-21T11:18:24",
        "modified_gmt": "2020-07-21T11:18:24",
        "slug": "date-validation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/date-validation\/",
        "title": {
            "rendered": "Date Validation"
        },
        "content": {
            "rendered": "\n<p><strong>MomentJS<\/strong>&nbsp;handles date validation in an easy way. You need not write lots of code to validate date.&nbsp;<strong>isValid()<\/strong>&nbsp;is the method available on moment which tells if the date is valid or not. MomentJS also provides many parsing flags which can be used to check for date validation.<\/p>\n\n\n\n<h2>Parsing Flags<\/h2>\n\n\n\n<p>MomentJS provides the following parsing flags in cases where the date given is considered as invalid \u2212<\/p>\n\n\n\n<p><strong>overflow<\/strong>&nbsp;\u2212 This will occur when the month given is 13th, day is 367th in an year or 32nd in a month, 29th for Feb on a non-leap year etc. Overflow contains the index of the invalid unit to match towards&nbsp;<strong>invalidAt<\/strong>. Note that&nbsp;<strong>-1<\/strong>&nbsp;means no overflow.<\/p>\n\n\n\n<p><strong>invalidMonth<\/strong>&nbsp;\u2212 It shows an invalid month name. It will give the invalid month string or null.<\/p>\n\n\n\n<p><strong>Empty<\/strong>&nbsp;\u2212 When an input is given which is not a date. It gives a Boolean.<\/p>\n\n\n\n<p><strong>nullInput<\/strong>&nbsp;\u2212 A null input, like moment(null);It returns a Boolean.<\/p>\n\n\n\n<p><strong>invalidFormat<\/strong>&nbsp;\u2212 When the format given is empty such as&nbsp;<strong>moment(&#8216;2018-04-25&#8217;, [])<\/strong>. It gives Boolean back.<\/p>\n\n\n\n<p><strong>userInvalidated<\/strong>&nbsp;\u2212 A date created explicitly as invalid, such as&nbsp;<strong>moment.invalid()<\/strong>. It returns Boolean.<\/p>\n\n\n\n<p><strong>meridiem<\/strong>&nbsp;\u2212 Indicates the meridiem (AM\/PM) parsed, if any. It returns string.<\/p>\n\n\n\n<p><strong>parsedDateParts<\/strong>&nbsp;\u2212 It returns an array of date parts parsed such as&nbsp;<strong>parsedDateParts[0]<\/strong>&nbsp;as year,&nbsp;<strong>parsedDateParts[1]<\/strong>&nbsp;as month and&nbsp;<strong>parsedDateParts[2]<\/strong>&nbsp;as day. If no parts are present, but meridiem has value, date is invalid. It returns an array.<\/p>\n\n\n\n<p>Consider the following example to understand date validation \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var a = moment(\"2018-18-10T10:20:25\");\na.isValid();\na.invalidAt();<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/validation.jpg\" alt=\"Validation\"\/><\/figure>\n\n\n\n<p>The invalidAt gives the output as 1 , which points to the month as the month value is greater than 12 and it overflows. If there is an overflow, invalidAt will give the output as shown in the table given here \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>0<\/td><td>years<\/td><\/tr><tr><td>1<\/td><td>months<\/td><\/tr><tr><td>2<\/td><td>days<\/td><\/tr><tr><td>3<\/td><td>hours<\/td><\/tr><tr><td>4<\/td><td>minutes<\/td><\/tr><tr><td>5<\/td><td>seconds<\/td><\/tr><tr><td>6<\/td><td>milliseconds<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>If there are multiple overflows in the date given, it will be an output for the first overflowed index.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJS&nbsp;handles date validation in an easy way. You need not write lots of code to validate date.&nbsp;isValid()&nbsp;is the method available on moment which tells if the date is valid or not. MomentJS also provides many parsing flags which can be used to check for date validation. Parsing Flags MomentJS provides the following parsing flags in [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4499"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4499"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4499\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4499"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4499"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4499"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4498,
        "date": "2020-07-21T11:19:08",
        "date_gmt": "2020-07-21T11:19:08",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=166"
        },
        "modified": "2020-07-21T11:19:08",
        "modified_gmt": "2020-07-21T11:19:08",
        "slug": "getter-setter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/getter-setter\/",
        "title": {
            "rendered": "Getter\/Setter"
        },
        "content": {
            "rendered": "\n<p>MomentJS has many methods to get\/set the date inputs. Get will allow us to read the required input unit and set will allow to modify the input unit. This chapter discusses in detail the get\/set methods to be used on the moment.<\/p>\n\n\n\n<p>The following table shows the get\/set methods available \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Syntax<\/th><\/tr><tr><td>Millisecond<\/td><td>moment().millisecond(Number)moment().millisecond();moment().milliseconds(Number);moment().milliseconds();<\/td><\/tr><tr><td>Second<\/td><td>moment().second(Number);moment().second();moment().seconds(Number);moment().seconds();<\/td><\/tr><tr><td>Minute<\/td><td>moment().minute(Number);moment().minute();moment().minutes(Number);moment().minutes();<\/td><\/tr><tr><td>Hour<\/td><td>moment().date(Number);moment().date();moment().dates(Number);moment().dates();<\/td><\/tr><tr><td>Day of week<\/td><td>moment().day(Number|String);moment().day();moment().days(Number|String);moment().days();<\/td><\/tr><tr><td>Date of Month<\/td><td>moment().date(Number);moment().date();moment().dates(Number);moment().dates();<\/td><\/tr><tr><td>Day of year<\/td><td>moment().dayOfYear(Number);moment().dayOfYear();<\/td><\/tr><tr><td>Week of year<\/td><td>moment().week(Number);moment().week();moment().weeks(Number);moment().weeks();<\/td><\/tr><tr><td>Week of year (ISO)<\/td><td>moment().isoWeek(Number);moment().isoWeek();moment().isoWeeks(Number);moment().isoWeeks();<\/td><\/tr><tr><td>Month<\/td><td>moment().month(Number|String);moment().month();<\/td><\/tr><tr><td>Quarter<\/td><td>moment().quarter();moment().quarter(Number);moment().quarters();moment().quarters(Number);<\/td><\/tr><tr><td>Year<\/td><td>moment().year(Number);moment().year();<\/td><\/tr><tr><td><strong>Week year<\/strong><\/td><td>moment().weekYear(Number);moment().weekYear();<\/td><\/tr><tr><td><strong>Weeks in year<\/strong><\/td><td>moment().weeksInYear();<\/td><\/tr><tr><td>Get<\/td><td>moment().get(&#8216;year&#8217;);moment().get(&#8216;month&#8217;);moment().get(&#8216;date&#8217;);moment().get(&#8216;hour&#8217;);moment().get(&#8216;minute&#8217;);moment().get(&#8216;second&#8217;);moment().get(&#8216;millisecond&#8217;);<\/td><\/tr><tr><td>Set<\/td><td>moment().set(String, Int);moment().set(Object(String, Int));<\/td><\/tr><tr><td>Maximum<\/td><td>moment.max(Moment[,Moment&#8230;]);moment.max(Moment[]);<\/td><\/tr><tr><td>Minimum<\/td><td>moment.min(Moment[,Moment&#8230;]);moment.min(Moment[]);<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJS has many methods to get\/set the date inputs. Get will allow us to read the required input unit and set will allow to modify the input unit. This chapter discusses in detail the get\/set methods to be used on the moment. The following table shows the get\/set methods available \u2212 Method Syntax Millisecond moment().millisecond(Number)moment().millisecond();moment().milliseconds(Number);moment().milliseconds(); [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4498"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4498"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4498\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4498"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4498"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4498"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4497,
        "date": "2020-07-21T11:19:33",
        "date_gmt": "2020-07-21T11:19:33",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=165"
        },
        "modified": "2020-07-21T11:19:33",
        "modified_gmt": "2020-07-21T11:19:33",
        "slug": "manipulate-date-and-time",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/manipulate-date-and-time\/",
        "title": {
            "rendered": "Manipulate Date and Time"
        },
        "content": {
            "rendered": "\n<p><strong>MomentJS<\/strong>provides various methods to manipulate Date and Time on the moment object. This chapter deal with all such methods in detail.<\/p>\n\n\n\n<h2>Methods to Manipulate Date and Time<\/h2>\n\n\n\n<p>The following table shows the methods available in MomentJS which helps in manipulating the Date and Time as required \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Method &amp; Syntax<\/th><\/tr><tr><td>1<\/td><td>Addmoment.add()<\/td><\/tr><tr><td>2<\/td><td>Subtractmoment.subtract()<\/td><\/tr><tr><td>3<\/td><td>Start of Timemoment.startof()<\/td><\/tr><tr><td>4<\/td><td>End of Timemoment.endof()<\/td><\/tr><tr><td>5<\/td><td>Localmoment.local()<\/td><\/tr><tr><td>6<\/td><td>UTCmoment.utc()<\/td><\/tr><tr><td>7<\/td><td>UTC offsetmoment.utcOffset()<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJSprovides various methods to manipulate Date and Time on the moment object. This chapter deal with all such methods in detail. Methods to Manipulate Date and Time The following table shows the methods available in MomentJS which helps in manipulating the Date and Time as required \u2212 Sr.No. Method &amp; Syntax 1 Addmoment.add() 2 Subtractmoment.subtract() [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4497"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4497"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4497\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4497"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4497"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4497"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4496,
        "date": "2020-07-21T11:20:18",
        "date_gmt": "2020-07-21T11:20:18",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=164"
        },
        "modified": "2020-07-21T11:20:18",
        "modified_gmt": "2020-07-21T11:20:18",
        "slug": "formatting-date-and-time",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/formatting-date-and-time\/",
        "title": {
            "rendered": "Formatting Date and Time"
        },
        "content": {
            "rendered": "\n<p>MomentJS provides formats to display date in different ways. There are methods available which tells the time from a given moment, from the current moment, difference between two moments etc. It can display date in JSON format, Array, Object, String etc.<\/p>\n\n\n\n<h2>Methods to Format Date and Time<\/h2>\n\n\n\n<p>The following table shows a list of methods available which helps in the displaying\/formatting of the date as required.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Syntax<\/th><\/tr><tr><td>Format<\/td><td>moment().format();moment().format(String);<\/td><\/tr><tr><td>Time from now<\/td><td>moment().fromNow();moment().fromNow(Boolean);<\/td><\/tr><tr><td>Time from X<\/td><td>moment().from (Moment|String|Number|Date|Array);<\/td><\/tr><tr><td>Time to now<\/td><td>moment().toNow();moment().toNow(Boolean);<\/td><\/tr><tr><td>Time to X<\/td><td>moment().to(Moment|String| Number|Date|Array);moment().to(Moment|String| Number|Date|Array, Boolean);<\/td><\/tr><tr><td>Calendar Time<\/td><td>moment().calendar();moment().calendar(referenceTime);moment().calendar(referenceTime, formats);<\/td><\/tr><tr><td>Difference<\/td><td>moment().diff(Moment|String| Number|Date|Array);moment().diff(Moment|String| Number|Date|Array, String);moment().diff(Moment|String| Number|Date|Array, String, Boolean);<\/td><\/tr><tr><td>Unix Timestamp(milliseconds)<\/td><td>moment().valueOf();+moment();<\/td><\/tr><tr><td>Unix Timestamp(seconds)<\/td><td>moment().unix();<\/td><\/tr><tr><td>Days in Month<\/td><td>moment().daysInMonth();<\/td><\/tr><tr><td>As JavaScript Date<\/td><td>moment().toDate();<\/td><\/tr><tr><td>As Array<\/td><td>moment().toArray();<\/td><\/tr><tr><td>As JSON<\/td><td>moment().toJSON();<\/td><\/tr><tr><td>As ISO 8601 String<\/td><td>moment().toISOString();moment().toISOString(keepOffset);<\/td><\/tr><tr><td>As Object<\/td><td>moment().toObject();<\/td><\/tr><tr><td>As String<\/td><td>moment().toString();<\/td><\/tr><tr><td>Inspect<\/td><td>moment().inspect();<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJS provides formats to display date in different ways. There are methods available which tells the time from a given moment, from the current moment, difference between two moments etc. It can display date in JSON format, Array, Object, String etc. Methods to Format Date and Time The following table shows a list of methods [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4496"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4496"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4496\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4496"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4496"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4496"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4495,
        "date": "2020-07-21T11:20:50",
        "date_gmt": "2020-07-21T11:20:50",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=163"
        },
        "modified": "2020-07-21T11:20:50",
        "modified_gmt": "2020-07-21T11:20:50",
        "slug": "date-queries",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/date-queries\/",
        "title": {
            "rendered": "Date Queries"
        },
        "content": {
            "rendered": "\n<p><strong>MomentJS<\/strong>&nbsp;provides methods to query the date\/time for leap year, date comparison, date validation etc. This chapter discusses them in detail.<\/p>\n\n\n\n<h2>Methods for Querying Date in MomentJS<\/h2>\n\n\n\n<p>The following table shows methods available in MomentJS and their syntax for querying date \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Syntax<\/th><\/tr><tr><td>Is Before<\/td><td>moment().isBefore(Moment|String|Number|Date|Array);moment().isBefore(Moment|String|Number|Date|Array, String);<\/td><\/tr><tr><td>Is Same<\/td><td>moment().isSame(Moment|String|Number|Date|Array);moment().isSame(Moment|String|Number|Date|Array, String);<\/td><\/tr><tr><td>Is After<\/td><td>moment().isAfter(Moment|String|Number|Date|Array);moment().isAfter(Moment|String|Number|Date|Array, String);<\/td><\/tr><tr><td>Is Same or Before<\/td><td>moment().isSameOrBefore(Moment|String|Number|Date|Array);moment().isSameOrBefore(Moment|String|Number|Date|Array, String);<\/td><\/tr><tr><td>Is Same or After<\/td><td>moment().isSameOrAfter(Moment|String|Number|Date|Array);moment().isSameOrAfter(Moment|String|Number|Date|Array, String);<\/td><\/tr><tr><td>Is Between<\/td><td>moment().isBetween(moment-like, moment-like);moment().isBetween(moment-like, moment-like, String);<\/td><\/tr><tr><td>Is Daylight Saving Time<\/td><td>moment().isDST();<\/td><\/tr><tr><td>Is Leap Year<\/td><td>moment().isLeapYear();<\/td><\/tr><tr><td>Is a Moment<\/td><td>moment.isMoment(obj);<\/td><\/tr><tr><td>Is a Date<\/td><td>moment.isDate(obj);<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJS&nbsp;provides methods to query the date\/time for leap year, date comparison, date validation etc. This chapter discusses them in detail. Methods for Querying Date in MomentJS The following table shows methods available in MomentJS and their syntax for querying date \u2212 Method Syntax Is Before moment().isBefore(Moment|String|Number|Date|Array);moment().isBefore(Moment|String|Number|Date|Array, String); Is Same moment().isSame(Moment|String|Number|Date|Array);moment().isSame(Moment|String|Number|Date|Array, String); Is After moment().isAfter(Moment|String|Number|Date|Array);moment().isAfter(Moment|String|Number|Date|Array, String); [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4495"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4495"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4495\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4495"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4495"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4495"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4494,
        "date": "2020-07-21T11:21:18",
        "date_gmt": "2020-07-21T11:21:18",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=162"
        },
        "modified": "2020-07-21T11:21:18",
        "modified_gmt": "2020-07-21T11:21:18",
        "slug": "internationalization",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/internationalization\/",
        "title": {
            "rendered": "Internationalization"
        },
        "content": {
            "rendered": "\n<p>Internationalization is one of the important features in MomentJS. You can display Date and Time based on localization, in other words, based on the country\/region. The locale can be applied to specific moment if required.<\/p>\n\n\n\n<p>This chapter discusses in detail about how to make apply locale globally, locally, work with locale using Node.js, in browser, get the units (months, weekdays etc.) in the required locale etc.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Locale &amp; Description<\/th><\/tr><tr><td>1<\/td><td>Global localeWe can assign locale globally and all the date \/time details will be available in the locale assigned.<\/td><\/tr><tr><td>2<\/td><td>Changing Locale LocallyWe need locale to applied locally in case we need to handle many locales in an application.<\/td><\/tr><tr><td>3<\/td><td>Using Locale in BrowserWe can start working with locale by including the locale file in script tag.<\/td><\/tr><tr><td>4<\/td><td>Using Locale using Node.jsIf you happen to use Node.js , you will have the locale files already in moment when you do npm install moment.<\/td><\/tr><tr><td>5<\/td><td>momentjs_Listing date\/time details of current localeYou can set the locale and check the details like months, weekdays etc.<\/td><\/tr><tr><td>6<\/td><td>Checking current localeWe can check the current locale using moment.locale().<\/td><\/tr><tr><td>7<\/td><td>Accessing Locale Specific FunctionalityHere will see the methods and properties available on currently loaded locale.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Internationalization is one of the important features in MomentJS. You can display Date and Time based on localization, in other words, based on the country\/region. The locale can be applied to specific moment if required. This chapter discusses in detail about how to make apply locale globally, locally, work with locale using Node.js, in browser, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4494"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4494"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4494\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4494"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4494"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4494"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4493,
        "date": "2020-07-21T11:22:29",
        "date_gmt": "2020-07-21T11:22:29",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=161"
        },
        "modified": "2020-07-21T11:22:29",
        "modified_gmt": "2020-07-21T11:22:29",
        "slug": "customization",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/customization\/",
        "title": {
            "rendered": "Customization"
        },
        "content": {
            "rendered": "\n<p><strong>MomentJS<\/strong>&nbsp;allows to add customization to the locale created. This chapter discusses them in detail.<\/p>\n\n\n\n<p>The following list shows the customizations possible on localization \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Localization &amp; Description<\/th><\/tr><tr><td>1<\/td><td>Month NamesYou can add month names to the locale customization.<\/td><\/tr><tr><td>2<\/td><td>Month AbbreviationThis method helps in customizing the month abbreviations.<\/td><\/tr><tr><td>3<\/td><td>Weekday NamesThis method helps in customizing the weekdays names as per locale.<\/td><\/tr><tr><td>4<\/td><td>Weekday AbbreviationThis method helps in customizing the weekday abbreviations based on the locale set.<\/td><\/tr><tr><td>5<\/td><td>Minimal Weekday AbbreviationThis method helps in customizing the Minimal Weekday abbreviations based on the locale set.<\/td><\/tr><tr><td>6<\/td><td>Long Date FormatsThis method helps in customizing longdateformat for a locale.<\/td><\/tr><tr><td>7<\/td><td>Relative TimeThis method helps in obtaining the relative time.<\/td><\/tr><tr><td>8<\/td><td>AM\/PMThis method helps in customizing the meridiem as per locale.<\/td><\/tr><tr><td>9<\/td><td>AM\/PM ParsingYou can parse AM\/PM using this method.<\/td><\/tr><tr><td>10<\/td><td>CalendarThis helps in customizing calendar object for a locale set.<\/td><\/tr><tr><td>11<\/td><td>OrdinalThe ordinal display for dates can be changed based on locale.<\/td><\/tr><tr><td>12<\/td><td>Relative Time ThresholdsThis is used with duration.humanize where the length of duration is displayed as a\u00a0<strong>few seconds ago, in a minute, an hour ago<\/strong>\u00a0etc.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJS&nbsp;allows to add customization to the locale created. This chapter discusses them in detail. The following list shows the customizations possible on localization \u2212 Sr.No. Localization &amp; Description 1 Month NamesYou can add month names to the locale customization. 2 Month AbbreviationThis method helps in customizing the month abbreviations. 3 Weekday NamesThis method helps in [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4493"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4493"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4493\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4493"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4493"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4493"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4492,
        "date": "2020-07-21T11:23:21",
        "date_gmt": "2020-07-21T11:23:21",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=160"
        },
        "modified": "2020-07-21T11:23:21",
        "modified_gmt": "2020-07-21T11:23:21",
        "slug": "durations",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/durations\/",
        "title": {
            "rendered": "Durations"
        },
        "content": {
            "rendered": "\n<p>MomentJS provides an important feature called durations which handles length of time for given units. In this chapter, you will learn this in detail.<\/p>\n\n\n\n<h2>Methods Available with Durations<\/h2>\n\n\n\n<p>The following table shows the methods available with duration for different units to be used with moment duration \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Syntax<\/th><\/tr><tr><td>Creating<\/td><td>moment.duration(Number, String);moment.duration(Number);moment.duration(Object);moment.duration(String);<\/td><\/tr><tr><td>Clone<\/td><td>moment.duration().clone();<\/td><\/tr><tr><td>Humanize<\/td><td>moment.duration().humanize();<\/td><\/tr><tr><td>Milliseconds<\/td><td>moment.duration().milliseconds();moment.duration().asMilliseconds();<\/td><\/tr><tr><td>Seconds<\/td><td>moment.duration().seconds();moment.duration().asSeconds();<\/td><\/tr><tr><td>Minutes<\/td><td>moment.duration().minutes();moment.duration().asMinutes();<\/td><\/tr><tr><td>Hours<\/td><td>moment.duration().hours();moment.duration().asHours();<\/td><\/tr><tr><td>Days<\/td><td>moment.duration().days();moment.duration().asDays();<\/td><\/tr><tr><td>Weeks<\/td><td>moment.duration().weeks();moment.duration().asWeeks();<\/td><\/tr><tr><td>Months<\/td><td>moment.duration().months();moment.duration().asMonths();<\/td><\/tr><tr><td><strong>Years<\/strong><\/td><td>moment.duration().years();moment.duration().asYears();<\/td><\/tr><tr><td>Add Time<\/td><td>moment.duration().add(Number, String);moment.duration().add(Number);moment.duration().add(Duration);moment.duration().add(Object);<\/td><\/tr><tr><td>Subtract Time<\/td><td>moment.duration().subtract(Number, String);moment.duration().subtract(Number);moment.duration().subtract(Duration);moment.duration().subtract(Object);<\/td><\/tr><tr><td>Using Duration with Diff<\/td><td>var duration = moment.duration(x.diff(y))<\/td><\/tr><tr><td>As Unit of Time<\/td><td>moment.duration().as(String);<\/td><\/tr><tr><td>Get Unit of Time<\/td><td>duration.get(&#8216;hours&#8217;);duration.get(&#8216;minutes&#8217;);duration.get(&#8216;seconds&#8217;);duration.get(&#8216;milliseconds&#8217;);<\/td><\/tr><tr><td>As JSON<\/td><td>moment.duration().toJSON();<\/td><\/tr><tr><td>Is a Duration<\/td><td>moment.isDuration(obj);<\/td><\/tr><tr><td>As ISO 8601 String<\/td><td>moment.duration().toISOString();<\/td><\/tr><tr><td>Locale<\/td><td>moment.duration().locale();moment.duration().locale(String);<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>MomentJS provides an important feature called durations which handles length of time for given units. In this chapter, you will learn this in detail. Methods Available with Durations The following table shows the methods available with duration for different units to be used with moment duration \u2212 Method Syntax Creating moment.duration(Number, String);moment.duration(Number);moment.duration(Object);moment.duration(String); Clone moment.duration().clone(); Humanize [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4492"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4492"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4492\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4492"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4492"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4492"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4491,
        "date": "2020-07-21T11:23:44",
        "date_gmt": "2020-07-21T11:23:44",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=159"
        },
        "modified": "2020-07-21T11:23:44",
        "modified_gmt": "2020-07-21T11:23:44",
        "slug": "utilities",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/utilities\/",
        "title": {
            "rendered": "Utilities"
        },
        "content": {
            "rendered": "\n<p>In MomentJS, you can change or customize the output as per the requirement using normalize units and invalid methods. You can also set your own custom validation on the moment object.<\/p>\n\n\n\n<p>Observe the following table for more information \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Method &amp; Syntax<\/th><\/tr><tr><td>1<\/td><td>Normalize Unitsmoment.normalizeUnits(String);<\/td><\/tr><tr><td>2<\/td><td>Invalidmoment.invalid(Object);<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In MomentJS, you can change or customize the output as per the requirement using normalize units and invalid methods. You can also set your own custom validation on the moment object. Observe the following table for more information \u2212 Sr.No. Method &amp; Syntax 1 Normalize Unitsmoment.normalizeUnits(String); 2 Invalidmoment.invalid(Object);<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4491"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4491"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4491\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4491"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4491"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4491"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4490,
        "date": "2020-07-21T11:25:02",
        "date_gmt": "2020-07-21T11:25:02",
        "guid": {
            "rendered": "http:\/\/javascript.foobrdigital.com\/?p=158"
        },
        "modified": "2020-07-21T11:25:02",
        "modified_gmt": "2020-07-21T11:25:02",
        "slug": "examples-3",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/examples-3\/",
        "title": {
            "rendered": "Examples"
        },
        "content": {
            "rendered": "\n<p>Till now, we have learnt many concepts in MomentJS. This chapter gives you further examples for a better understanding.<\/p>\n\n\n\n<h2>Display Date Range Between Two Dates<\/h2>\n\n\n\n<p>This is an example which displays the dates between two given dates.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type=\"text\/JavaScript\" src=\"MomentJS.js\">&lt;\/script>\n      &lt;style>\n         table, td {\n            border: 1px solid #F1E8E8;\n            border-collapse: collapse;\n            padding: 4px;\n         }\n         table tr:nth-child(odd) {\n            background-color: #CFCACA;\n         }\n         table tr:nth-child(even) {\n            background-color: #C4B4B4;\n         }\n      &lt;\/style>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;h1>Dates display between 2014-05-01 and 2014-05-16&lt;\/h1>\n      &lt;div id=\"container\">\n         &lt;table id=\"datedetails\" >&lt;\/table>\n      &lt;\/div>\n      &lt;script type=\"text\/JavaScript\">\n         function getDaterange(start, end, arr) {\n            if (!moment(start).isSameOrAfter(end)) {\n               if (arr.length==0) arr.push(moment(start).format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\n               var next = moment(start).add(1, 'd');\n               arr.push(next.format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\n               getDaterange(next, end, arr);\n            } else {\n               return arr;\n            }\n            return arr;\n         }\n         var a = getDaterange(\"2014-05-01\", \"2014-05-16\", &#91;]);\n         var tr = \"\";\n         for (var i = 0; i&lt;a.length;i++ ) {\n            tr += \"&lt;tr>&lt;td>\"+a&#91;i]+\"&lt;\/td>&lt;\/tr>\";\n         }\n         document.getElementById(\"datedetails\").innerHTML = tr;\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>We want to display all the dates between&nbsp;<strong>2014-05-01<\/strong>&nbsp;to&nbsp;<strong>2014-05-16<\/strong>. We have used date query&nbsp;<strong>isSameOrAfter, date addition and date format<\/strong>&nbsp;to achieve what we want.<\/p>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/date_range.jpg\" alt=\"Date Range\"\/><\/figure>\n\n\n\n<h2>Display Sundays Between 2014-05-01 and 2014-08-16<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type=\"text\/JavaScript\" src=\"MomentJS.js\">&lt;\/script>\n      &lt;style>\n         table, td {\n            border: 1px solid #F1E8E8;\n            border-collapse: collapse;\n            padding: 4px;\n         }\n         table tr:nth-child(odd) {\n            background-color: #CFCACA;\n         }\n         table tr:nth-child(even) {\n            background-color: #C4B4B4;\n         }\n      &lt;\/style>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;h1>Sundays between 2014-05-01 and 2014-08-16&lt;\/h1>\n      &lt;div id=\"container\">\n         &lt;table id=\"datedetails\">&lt;\/table>\n      &lt;\/div>\n      &lt;script type=\"text\/JavaScript\">\n         function getDaterange(start, end, arr) {\n            if (!moment(start).isSameOrAfter(end)) {\n               if (arr.length==0) {\n                  if (moment(start).format(\"dddd\") === \"Sunday\") {\n                     arr.push(moment(start).format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\n                  }\n               }\n               var next = moment(start).add(1, 'd');\n               if (moment(next).format(\"dddd\") === \"Sunday\") {\n                  arr.push(next.format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\n               }\n               getDaterange(next, end, arr);\n            } else {\n               return arr;\n            }\n            return arr;\n         }\n         var a = getDaterange(\"2014-05-01\", \"2014-08-16\", &#91;]);\n         var tr = \"\";\n         for (var i = 0; i&lt;a.length;i++ ) {\n            tr += \"&lt;tr>&lt;td>\"+a&#91;i]+\"&lt;\/td>&lt;\/tr>\";\n         }\n         document.getElementById(\"datedetails\").innerHTML = tr;\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/sundays.jpg\" alt=\"Sundays\"\/><\/figure>\n\n\n\n<h2>Display Date Details as per Locale<\/h2>\n\n\n\n<p>Here we are using moment.locale script which has all the locales.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type=\"text\/JavaScript\" src=\"MomentJS.js\">&lt;\/script>\n      &lt;script type=\"text\/JavaScript\" src=\"momentlocale.js\" charset=\"UTF-8\">&lt;\/script>\n      &lt;style type=\"text\/css\">\n         div {\n            margin-top: 16px!important;\n            margin-bottom: 16px!important;\n            width:100%;\n         }\n         table, td {\n            border: 1px solid #F1E8E8;\n            border-collapse: collapse;\n            padding: 4px;\n         }\n         table tr:nth-child(odd) {\n            background-color: #CFCACA;\n         }\n         table tr:nth-child(even) {\n            background-color: #C4B4B4;\n         }\n      &lt;\/style>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;div >\n         Select Locale : &lt;select id=\"locale\" onchange=\"updatelocale()\" style=\"width:200px;\">\n            &lt;option value=\"en\">English&lt;\/option>\n            &lt;option value=\"fr\">French&lt;\/option>\n            &lt;option value=\"fr-ca\">French Canada&lt;\/option>\n            &lt;option value=\"cs\">Czech&lt;\/option>\n            &lt;option value=\"zh-cn\">Chinese&lt;\/option>\n            &lt;option value=\"nl\">Dutch&lt;   \/option>\n            &lt;option value=\"ka\">Georgian&lt;\/option>\n            &lt;option value=\"he\">Hebrew&lt;\/option>\n            &lt;option value=\"hi\">Hindi&lt;\/option>\n            &lt;option value=\"id\">Indonesian&lt;\/option>\n            &lt;option value=\"it\">Italian&lt;\/option>\n            &lt;option value=\"jv\";Japanese&lt;\/option>\n            &lt;option value=\"ko\";Korean&lt;\/option>\n         &lt;\/select>\n      &lt;\/div>\n      &lt;br\/>\n      &lt;br\/>>\n      Display Date is different formats as per locale :&lt;span id=\"localeid\">&lt;\/span>&lt;br\/>\n      &lt;div>\n         &lt;table>\n            &lt;tr>\n               &lt;th>Format&lt;\/th>\n               &lt;th>Display&lt;\/th>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;i>dddd, MMMM Do YYYY, h:mm:ss a&lt;\/i>&lt;\/td>\n               &lt;td>\n                  &lt;div id=\"ldate\">&lt;\/div>\n               &lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;i>LLLL&lt;\/i>&lt;\/td>\n               &lt;td>\n                  &lt;div id=\"ldate1\">&lt;\/div>\n               &lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;i>moment().format()&lt;\/i>&lt;\/td>\n               &lt;td>\n                  &lt;div id=\"ldate2\">&lt;\/div>\n               &lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;i>moment().calendar()&lt;\/i>&lt;\/td>\n               &lt;td>\n                  &lt;div id=\"ldate3\">&lt;\/div>\n               &lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;i>Months&lt;\/i>&lt;\/td>\n               &lt;td>\n                  &lt;div id=\"ldate4\">&lt;\/div>\n               &lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;i>Weekdays&lt;\/i>&lt;\/td>\n               &lt;td>\n                  &lt;div id=\"ldate5\">&lt;\/div>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>\n      &lt;\/div>\n      &lt;script type=\"text\/JavaScript\">\n         var updatelocale = function() {\n            var a = moment.locale(document.getElementById(\"locale\").value);\n            var k = moment().format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n            var k1 = moment().format(\"LLLL\");\n            var k2 = moment().format();\n            var k3 = moment().calendar();\n            var k4 = moment.months();\n            var k5 = moment.weekdays();\n            document.getElementById(\"localeid\").innerHTML = \"&lt;b>\"+a+\"&lt;\/b>\";\n            document.getElementById(\"ldate\").innerHTML = k;\n            document.getElementById(\"ldate1\").innerHTML = k1;\n            document.getElementById(\"ldate2\").innerHTML = k2;\n            document.getElementById(\"ldate3\").innerHTML = k3;\n            document.getElementById(\"ldate4\").innerHTML = k4;\n            document.getElementById(\"ldate5\").innerHTML = k5;\n         };\n         updatelocale();\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h3>Output 1<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/display_date.jpg\" alt=\"Display Date\"\/><\/figure>\n\n\n\n<h3>Output 2<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/display_date_ka.jpg\" alt=\"Display Date EA\"\/><\/figure>\n\n\n\n<h3>Output 3<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/display_date_hi.jpg\" alt=\"Display Date Hi\"\/><\/figure>\n\n\n\n<h3>Output 4<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/momentjs\/images\/display_date_jv.jpg\" alt=\"Display Date JV\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Till now, we have learnt many concepts in MomentJS. This chapter gives you further examples for a better understanding. Display Date Range Between Two Dates This is an example which displays the dates between two given dates. We want to display all the dates between&nbsp;2014-05-01&nbsp;to&nbsp;2014-05-16. We have used date query&nbsp;isSameOrAfter, date addition and date format&nbsp;to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            225,
            226
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4490"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=4490"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/4490\/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=4490"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=4490"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=4490"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]