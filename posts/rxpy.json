[{"id":4834,"date":"2021-02-11T11:13:04","date_gmt":"2021-02-11T11:13:04","guid":{"rendered":"http://python3.foobrdigital.com/?p=4834"},"modified":"2021-02-11T11:13:04","modified_gmt":"2021-02-11T11:13:04","slug":"overview-6","status":"publish","type":"post","link":"https://python3.foobrdigital.com/overview-6/","title":{"rendered":"Overview"},"content":{"rendered":"\n<h2>What is Reactive Programming?</h2>\n\n\n\n<p>Reactive programming is a programming paradigm, that deals with data flow and the propagation of change. It means that, when a data flow is emitted by one component, the change will be propagated to other components by a reactive programming library. The propagation of change will continue until it reaches the final receiver.</p>\n\n\n\n<p>By using RxPY, you have good control on the asynchronous data streams, for example, a request made to URL can be traced by using observable, and use the observer to listen to when the request is complete for response or error.</p>\n\n\n\n<p>RxPY offers you to handle asynchronous data streams using&nbsp;<strong>Observables</strong>, query the data streams using&nbsp;<strong>Operators</strong>&nbsp;i.e. filter, sum, concat, map and also make use of concurrency for the data streams using&nbsp;<strong>Schedulers</strong>. Creating an Observable, gives an observer object with on_next(v), on_error(e) and on_completed() methods, that needs to be&nbsp;<strong>subscribed</strong>&nbsp;so that we get a notification when an event occurs.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/rxpy/images/observable.jpg\" alt=\"Observable\"/></figure>\n\n\n\n<p>The Observable can be queried using multiple operators in a chain format by using the pipe operator.</p>\n\n\n\n<p>RxPY offers operators in various categories like:−</p>\n\n\n\n<ul><li>Mathematical operators</li><li>Transformation operators</li><li>Filtering operators</li><li>Error handling operators</li><li>Utility operators</li><li>Conditional operators</li><li>Creation operators</li><li>Connectable operators</li></ul>\n\n\n\n<p>These operators are explained in detail in this tutorial.</p>\n\n\n\n<h2>What is RxPy?</h2>\n\n\n\n<p>RxPY is defined as&nbsp;<strong>a library for composing asynchronous and event-based programs using observable collections and pipable query operators in Python&nbsp;</strong>as per the official website of RxPy, which is&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://rxpy.readthedocs.io/en/latest/\">https://rxpy.readthedocs.io/en/latest/.</a></p>\n\n\n\n<p>RxPY is a python library to support Reactive Programming. RxPy stands for&nbsp;<strong>Reactive Extensions for Python</strong>. It&#8217;s a library that uses observables to work with reactive programming that deals with asynchronous data calls, callbacks and event−based programs.</p>\n\n\n\n<h2>Features of RxPy</h2>\n\n\n\n<p>In RxPy, following concepts take care of handling the asynchronous task −</p>\n\n\n\n<h3>Observable</h3>\n\n\n\n<p>An observable is a function that creates an observer and attaches it to the source having data streams that are expected from, for example, Tweets, computer−related events, etc.</p>\n\n\n\n<h3>Observer</h3>\n\n\n\n<p>It is an object with on_next(), on_error() and on_completed() methods, that will get called when there is interaction with the observable i.e. the source interacts for an example incoming Tweets, etc.</p>\n\n\n\n<h3>Subscription</h3>\n\n\n\n<p>When the observable is created, to execute the observable we need to subscribe to it.</p>\n\n\n\n<h3>Operators</h3>\n\n\n\n<p>An operator is a pure function that takes in observable as input and the output is also an observable. You can use multiple operators on an observable data by using the pipe operator.</p>\n\n\n\n<h3>Subject</h3>\n\n\n\n<p>A subject is an observable sequence as well as an observer that can multicast, i.e. talk to many observers that have subscribed. The subject is a cold observable, i.e. the values will be shared between the observers that have been subscribed.</p>\n\n\n\n<h3>Schedulers</h3>\n\n\n\n<p>One important feature of RxPy is concurrency i.e. to allow the task to execute in parallel. To make that happen RxPy has two operators subscribe_on() and observe_on() that works with schedulers and will decide the execution of the subscribed task.</p>\n\n\n\n<h2>Advantages of using RxPY</h2>\n\n\n\n<p>The following are the advantages of RxPy −</p>\n\n\n\n<ul><li>RxPY is an awesome library when it comes to the handling of async data streams and events. RxPY uses observables to work with reactive programming that deals with asynchronous data calls, callbacks and event-based programs.</li><li>RxPY offers a huge collection of operators in mathematical, transformation, filtering, utility, conditional, error handling, join categories that makes life easy when used with reactive programming.</li><li>Concurrency i.e. working of multiple tasks together is achieved using schedulers in RxPY.</li><li>The performance is improved using RxPY as handling of async task and parallel processing is made easy.</li></ul>\n\n\n\n<h2>Disadvantage of using RxPY</h2>\n\n\n\n<ul><li>Debugging the code with observables is a little difficult.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>What is Reactive Programming? Reactive programming is a programming paradigm, that deals with data flow and the propagation of change. It means that, when a data flow is emitted by one component, the change will be propagated to other components by a reactive programming library. The propagation of change will continue until it reaches the [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[198],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4834"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4834"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4834/revisions"}],"predecessor-version":[{"id":4835,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4834/revisions/4835"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4834"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4834"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4834"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4836,"date":"2021-02-11T11:14:06","date_gmt":"2021-02-11T11:14:06","guid":{"rendered":"http://python3.foobrdigital.com/?p=4836"},"modified":"2021-02-11T11:14:06","modified_gmt":"2021-02-11T11:14:06","slug":"environment-setup-4","status":"publish","type":"post","link":"https://python3.foobrdigital.com/environment-setup-4/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>In this chapter, we will work on the installation of RxPy. To start working with RxPY, we need to install Python first. So, we are going to work on the following −</p>\n\n\n\n<ul><li>Install Python</li><li>Install RxPy</li></ul>\n\n\n\n<h2>Installing Python</h2>\n\n\n\n<p>Go to the Python official site: https://www.python.org/downloads/. as shown below, and click on the latest version available for Windows, Linux/Unix, and mac os. Download Python as per your 64 or 32-bit OS available with you.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/rxpy/images/python.jpg\" alt=\"Python\"/></figure>\n\n\n\n<p>Once you have downloaded, click on the&nbsp;<strong>.exe file</strong>&nbsp;and follow the steps to install python on your system.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/rxpy/images/python_install.jpg\" alt=\"Python Install\"/></figure>\n\n\n\n<p>The python package manager, i.e. pip will also get installed by default with the above installation. To make it work globally on your system, directly add the location of python to the PATH variable, the same is shown at the start of the installation, to remember to check the checkbox, which says ADD to PATH. In case, you forget to check it, please follow the below given steps to add to PATH.</p>\n\n\n\n<p>To add to PATH follow the below steps −</p>\n\n\n\n<p>Right-click on your Computer icon and click on properties → Advanced System Settings.</p>\n\n\n\n<p>It will display the screen as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/rxpy/images/system_properties.jpg\" alt=\"System Properties\"/></figure>\n\n\n\n<p>Click on Environment Variables as shown above. It will display the screen as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/rxpy/images/environment_variable.jpg\" alt=\"Environment Variable\"/></figure>\n\n\n\n<p>Select Path and click on Edit button, add the location path of your python at the end. Now, let’s check the python version.</p>\n\n\n\n<h3>Checking for python version</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python --version\r\nPython 3.7.3\n</code></pre>\n\n\n\n<h2>Install RxPY</h2>\n\n\n\n<p>Now, that we have python installed, we are going to install RxPy.</p>\n\n\n\n<p>Once python is installed, python package manager, i.e. pip will also get installed. Following is the command to check pip version −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>pip --version\r\npip 19.1.1 from c:\\users\\xxxx\\appdata\\local\\programs\\python\\python37\\lib\\site-\r\npackages\\pip (python 3.7)\n</code></pre>\n\n\n\n<p>We have pip installed and the version is&nbsp;<strong>19.1.1.</strong>&nbsp;Now, we will use pip to install RxPy</p>\n\n\n\n<p>The command is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install rx\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will work on the installation of RxPy. To start working with RxPY, we need to install Python first. So, we are going to work on the following − Install Python Install RxPy Installing Python Go to the Python official site: https://www.python.org/downloads/. as shown below, and click on the latest version available for Windows, [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[198],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4836"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4836"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4836/revisions"}],"predecessor-version":[{"id":4837,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4836/revisions/4837"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4836"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4836"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4836"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4838,"date":"2021-02-11T11:15:35","date_gmt":"2021-02-11T11:15:35","guid":{"rendered":"http://python3.foobrdigital.com/?p=4838"},"modified":"2021-02-11T11:15:35","modified_gmt":"2021-02-11T11:15:35","slug":"latest-release-updates","status":"publish","type":"post","link":"https://python3.foobrdigital.com/latest-release-updates/","title":{"rendered":"Latest Release Updates"},"content":{"rendered":"\n<p>In this tutorial, we are using RxPY version 3 and python version 3.7.3. The working of RxPY version 3 differs a little bit with the earlier version, i.e. RxPY version 1.</p>\n\n\n\n<p>In this chapter, we are going to discuss the differences between the 2 versions and changes that need to be done in case you are updating Python and RxPY versions.</p>\n\n\n\n<h2>Observable in RxPY</h2>\n\n\n\n<p>In RxPy version 1, Observable was a separate class −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import Observable\n</code></pre>\n\n\n\n<p>To use the Observable, you have to use it as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Observable.of(1,2,3,4,5,6,7,8,9,10)\n</code></pre>\n\n\n\n<p>In RxPy version 3, Observable is directly a part of the rx package.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import rx\r\nrx.of(1,2,3,4,5,6,7,8,9,10)\r\n</code></pre>\n\n\n\n<h2>Operators in RxPy</h2>\n\n\n\n<p>In version 1, the operator was methods in the Observable class. For example, to make use of operators we have to import Observable as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import Observable\n</code></pre>\n\n\n\n<p>The operators are used as Observable.operator, for example, as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Observable.of(1,2,3,4,5,6,7,8,9,10)\\\r\n   .filter(lambda i: i %2 == 0) \\\r\n   .sum() \\\r\n   .subscribe(lambda x: print(\"Value is {0}\".format(x)))</code></pre>\n\n\n\n<p>In the case of RxPY version 3, operators are function and are imported and used as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import rx\r\nfrom rx import operators as ops\r\nrx.of(1,2,3,4,5,6,7,8,9,10).pipe(\r\n   ops.filter(lambda i: i %2 == 0),\r\n   ops.sum()\r\n).subscribe(lambda x: print(\"Value is {0}\".format(x)))</code></pre>\n\n\n\n<h3>Chaining Operators Using Pipe() method</h3>\n\n\n\n<p>In RxPy version 1, in case you had to use multiple operators on an observable, it had to be done as follows −</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import Observable\r\nObservable.of(1,2,3,4,5,6,7,8,9,10)\\\r\n   .filter(lambda i: i %2 == 0) \\\r\n   .sum() \\\r\n   .subscribe(lambda x: print(\"Value is {0}\".format(x)))</code></pre>\n\n\n\n<p>But, in case of RxPY version 3, you can use pipe() method and multiple operators as shown below −</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import rx\r\nfrom rx import operators as ops\r\nrx.of(1,2,3,4,5,6,7,8,9,10).pipe(\r\n   ops.filter(lambda i: i %2 == 0),\r\n   ops.sum()\r\n).subscribe(lambda x: print(\"Value is {0}\".format(x)))</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, we are using RxPY version 3 and python version 3.7.3. The working of RxPY version 3 differs a little bit with the earlier version, i.e. RxPY version 1. In this chapter, we are going to discuss the differences between the 2 versions and changes that need to be done in case you [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[198],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4838"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4838"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4838/revisions"}],"predecessor-version":[{"id":4839,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4838/revisions/4839"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4838"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4838"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4838"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4840,"date":"2021-02-11T11:16:46","date_gmt":"2021-02-11T11:16:46","guid":{"rendered":"http://python3.foobrdigital.com/?p=4840"},"modified":"2021-02-11T11:16:46","modified_gmt":"2021-02-11T11:16:46","slug":"working-with-observables","status":"publish","type":"post","link":"https://python3.foobrdigital.com/working-with-observables/","title":{"rendered":"Working With Observables"},"content":{"rendered":"\n<p>An observable, is a function that creates an observer and attaches it to the source where values are expected, for example, clicks, mouse events from a dom element, etc.</p>\n\n\n\n<p>The topics mentioned below will be studied in detail in this chapter.</p>\n\n\n\n<ul><li>Create Observables</li><li>Subscribe and Execute an Observable</li></ul>\n\n\n\n<h2>Create observables</h2>\n\n\n\n<p>To create an observable we will use&nbsp;<strong>create()</strong>&nbsp;method and pass the function to it that has the following items.</p>\n\n\n\n<ul><li><strong>on_next()</strong>&nbsp;− This function gets called when the Observable emits an item.</li><li><strong>on_completed()</strong>&nbsp;− This function gets called when the Observable is complete.</li><li><strong>on_error()</strong>&nbsp;− This function gets called when an error occurs on the Observable.</li></ul>\n\n\n\n<p>To work with create() method first import the method as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import create\n</code></pre>\n\n\n\n<p>Here is a working example, to create an observable −</p>\n\n\n\n<p><strong>testrx.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import create\r\ndeftest_observable(observer, scheduler):\r\n   observer.on_next(\"Hello\")\r\n   observer.on_error(\"Error\")\r\n   observer.on_completed()\r\nsource = create(test_observable).</code></pre>\n\n\n\n<h2>Subscribe and Execute an Observable</h2>\n\n\n\n<p>To subscribe to an observable, we need to use subscribe() function and pass the callback function on_next, on_error and on_completed.</p>\n\n\n\n<p>Here is a working example −</p>\n\n\n\n<p><strong>testrx.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import create\r\ndeftest_observable(observer, scheduler):\r\n   observer.on_next(\"Hello\")\r\n   observer.on_completed()\r\nsource = create(test_observable)\r\nsource.subscribe(\r\n   on_next = lambda i: print(\"Got - {0}\".format(i)),\r\n   on_error = lambda e: print(\"Error : {0}\".format(e)),\r\n   on_completed = lambda: print(\"Job Done!\"),\r\n)</code></pre>\n\n\n\n<p>The subscribe() method takes care of executing the observable. The callback function&nbsp;<strong>on_next</strong>,&nbsp;<strong>on_error</strong>&nbsp;and&nbsp;<strong>on_completed</strong>&nbsp;has to be passed to the subscribe method. Call to subscribe method, in turn, executes the test_observable() function.</p>\n\n\n\n<p>It is not mandatory to pass all three callback functions to the subscribe() method. You can pass as per your requirements the on_next(), on_error() and on_completed().</p>\n\n\n\n<p>The lambda function is used for on_next, on_error and on_completed. It will take in the arguments and execute the expression given.</p>\n\n\n\n<p>Here is the output, of the observable created −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nGot - Hello\r\nJob Done!\r\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>An observable, is a function that creates an observer and attaches it to the source where values are expected, for example, clicks, mouse events from a dom element, etc. The topics mentioned below will be studied in detail in this chapter. Create Observables Subscribe and Execute an Observable Create observables To create an observable we [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[198],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4840"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4840"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4840/revisions"}],"predecessor-version":[{"id":4841,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4840/revisions/4841"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4840"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4840"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4840"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4842,"date":"2021-02-11T11:18:36","date_gmt":"2021-02-11T11:18:36","guid":{"rendered":"http://python3.foobrdigital.com/?p=4842"},"modified":"2021-02-11T11:18:36","modified_gmt":"2021-02-11T11:18:36","slug":"operators-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/operators-2/","title":{"rendered":"Operators"},"content":{"rendered":"\n<p>This chapter explains about the operators in RxPY in detail. These operators include −</p>\n\n\n\n<ul><li>Working with Operators</li><li>Mathematical operators</li><li>Transformation operators</li><li>Filtering operators</li><li>Error handling operators</li><li>Utility operators</li><li>Conditional operators</li><li>Creation operators</li><li>Connectable operators</li><li>Combining operators</li></ul>\n\n\n\n<p>Reactive (Rx) python has almost lots of operators, that make life easy with python coding. You can use these multiple operators together, for example, while working with strings you can use map, filter, merge operators.</p>\n\n\n\n<h2>Working with Operators</h2>\n\n\n\n<p>You can work with multiple operators together using pipe() method. This method allows chaining multiple operators together.</p>\n\n\n\n<p>Here, is a working example of using operators −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test = of(1,2,3) // an observable\r\nsubscriber = test.pipe(\r\n   op1(),\r\n   op2(),\r\n   op3()\r\n)</code></pre>\n\n\n\n<p>In the above example, we have created an observable using of() method that takes in values 1, 2 and 3. Now, on this observable, you can perform a different operation, using any numbers of operators using pipe() method as shown above. The execution of operators will go on sequentially on the observable given.</p>\n\n\n\n<p>To work with operators, first import it as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import of, operators as op</code></pre>\n\n\n\n<p>Here, is a working example −</p>\n\n\n\n<p><strong>testrx.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import of, operators as op\r\ntest = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nsub1 = test.pipe(\r\n   op.filter(lambda s: s%2==0),\r\n   op.reduce(lambda acc, x: acc + x)\r\n)\r\nsub1.subscribe(lambda x: print(\"Sum of Even numbers is {0}\".format(x)))</code></pre>\n\n\n\n<p>In the above example, there is a list of numbers, from which we are filtering even numbers using a filter operator and later adding it using a reduce operator.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nSum of Even numbers is 30\n</code></pre>\n\n\n\n<p>Here is a list of Operators, that we are going to discuss −</p>\n\n\n\n<ul><li>Creating Observables</li><li>Mathematical operators</li><li>Transformation operators</li><li>Filtering operators</li><li>Error handling operators</li><li>Utility operators</li><li>Conditional</li><li>Connectable</li><li>Combining operators</li></ul>\n\n\n\n<h2>Creating Observables</h2>\n\n\n\n<p>Following are the observables, we are going to discuss in Creation category</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Observable</th><th>Description</th></tr><tr><td>create</td><td>This method is used to create an observable.</td></tr><tr><td>empty</td><td>This observable will not output anything and directly emit the complete state.</td></tr><tr><td>never</td><td>This method creates an observable that will never reach the complete state.</td></tr><tr><td>throw</td><td>This method will create an observable that will throw an error.</td></tr><tr><td>from_</td><td>This method will convert the given array or object into an observable.</td></tr><tr><td>interval</td><td>This method will give a series of values produced after a timeout.</td></tr><tr><td>just</td><td>This method will convert given value into an observable.</td></tr><tr><td>range</td><td>This method will give a range of integers based on the input given.</td></tr><tr><td>repeat_value</td><td>This method will create an observable that will repeat the given value as per the count is given.</td></tr><tr><td>start</td><td>This method takes in a function as an input and returns an observable that will return value from the input function.</td></tr><tr><td>timer</td><td>This method will emit the values in sequence after the timeout is done.</td></tr></tbody></table></figure>\n\n\n\n<h2>Mathematical operators</h2>\n\n\n\n<p>The operators we are going to discuss in Mathematical operator category are as follows: −</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>average</td><td>This operator will calculate the average from the source observable given and output an observable that will have the average value.</td></tr><tr><td>concat</td><td>This operator will take in two or more observables and given a single observable with all the values in the sequence.</td></tr><tr><td>count</td><td>This operator takes in an Observable with values and converts it into an Observable that will have a single value. The count function takes in predicate function as an optional argument.The function is of type boolean and will add value to the output only if it satisfies the condition.</td></tr><tr><td>max</td><td>This operator will give an observable with max value from the source observable.</td></tr><tr><td>min</td><td>This operator will give an observable with min value from the source observable.</td></tr><tr><td>reduce</td><td>This operator takes in a function called accumulator function that is used on the values coming from the source observable, and it returns the accumulated values in the form of an observable, with an optional seed value passed to the accumulator function.</td></tr><tr><td>sum</td><td>This operator will return an observable with the sum of all the values from source observables.</td></tr></tbody></table></figure>\n\n\n\n<h2>Transformation operators</h2>\n\n\n\n<p>The operators we are going to discuss in the Transformation operator category are mentioned below −</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Category</th></tr><tr><td>buffer</td><td>This operator will collect all the values from the source observable, and emit them at regular intervals once the given boundary condition is satisfied.</td></tr><tr><td>ground_by</td><td>This operator will group the values coming from the source observable based on the key_mapper function given.</td></tr><tr><td>map</td><td>This operator will change each value from the source observable into a new value based on the output of the mapper_func given.</td></tr><tr><td>scan</td><td>This operator will apply an accumulator function to the values coming from the source observable and return an observable with new values.</td></tr></tbody></table></figure>\n\n\n\n<h2>Filtering operators</h2>\n\n\n\n<p>The operators we are going to discuss in Filtering operator category are given below −</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Category</th></tr><tr><td>debounce</td><td>This operator will give the values from the source observable, until the timespan given and ignore the rest of the time passes.</td></tr><tr><td>distinct</td><td>This operator will give all the values that are distinct from the source observable.</td></tr><tr><td>element_at</td><td>This operator will give an element from the source observable for the index given.</td></tr><tr><td>filter</td><td>This operator will filter values from the source observable based on the predicate function given.</td></tr><tr><td>first</td><td>This operator will give the first element from the source observable.</td></tr><tr><td>ignore_elements</td><td>This operator will ignore all the values from the source observable and only execute calls to complete or error callback functions.</td></tr><tr><td>last</td><td>This operator will give the last element from the source observable.</td></tr><tr><td>skip</td><td>This operator will give back an observable that will skip the first occurrence of count items taken as input.</td></tr><tr><td>skip_last</td><td>This operator will give back an observable that will skip the last occurrence of count items taken as input.</td></tr><tr><td>take</td><td>This operator will give a list of source values in continuous order based on the count given.</td></tr><tr><td>take_last</td><td>This operator will give a list of source values in continuous order from last based on the count given.</td></tr></tbody></table></figure>\n\n\n\n<h2>Error handling operators</h2>\n\n\n\n<p>The operators we are going to discuss in the Error handling operator category are: &#8211;</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>catch</td><td>This operator will terminate the source observable when there is an exception.</td></tr><tr><td>retry</td><td>This operator will retry on the source observable when there is an error and once the retry count is done it will terminate.</td></tr></tbody></table></figure>\n\n\n\n<h2>Utility operators</h2>\n\n\n\n<p>The following are the operators we are going to discuss in the Utility operator category.</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>delay</td><td>This operator will delay the source observable emission as per the time or date is given.</td></tr><tr><td>materialize</td><td>This operator will convert the values from the source observable with the values emitted in the form of explicit notification values.</td></tr><tr><td>time_interval</td><td>This operator will give the time elapsed between the values from the source observable.</td></tr><tr><td>timeout</td><td>This operator will give all the values from the source observable after the elapsed time or else will trigger an error.</td></tr><tr><td>timestamp</td><td>This operator will attach a timestamp to all the values from the source observable.</td></tr></tbody></table></figure>\n\n\n\n<h2>Conditional and Boolean operators</h2>\n\n\n\n<p>The operators we are going to discuss in Conditional and Boolean Operator category are as given below −</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>all</td><td>This operator will check if all the values from the source observable satisfy the condition given.</td></tr><tr><td>contains</td><td>This operator will return an observable with the value true or false if the given value is present and if it is the value of the source observable.</td></tr><tr><td>default_if_empty</td><td>This operator will return a default value if the source observable is empty.</td></tr><tr><td>sequence_equal</td><td>This operator will compare two sequences of observables or an array of values and return an observable with the value true or false.</td></tr><tr><td>skip_until</td><td>This operator will discard values from the source observable until the second observable emits a value.</td></tr><tr><td>skip_while</td><td>This operator will return an observable with values from the source observable that satisfies the condition passed.</td></tr><tr><td>take_until</td><td>This operator will discard values from the source observable after the second observable emits a value or is terminated.</td></tr><tr><td>take_while</td><td>This operator will discard values from the source observable when the condition fails.</td></tr></tbody></table></figure>\n\n\n\n<h2>Connectable Operators</h2>\n\n\n\n<p>The operators we are going to discuss in Connectable Operator category are −</p>\n\n\n\n<p>Show Examples</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>publish</td><td>This method will convert the observable into a connectable observable.</td></tr><tr><td>ref_count</td><td>This operator will make the observable a normal observable.</td></tr><tr><td>replay</td><td>This method works similar to the replaySubject. This method will return the same values, even if the observable has already emitted and some of the subscribers are late in subscribing.</td></tr></tbody></table></figure>\n\n\n\n<h2>Combining Operators</h2>\n\n\n\n<p>The following are the operators we are going to discuss in the Combining operator category.</p>\n\n\n\n<p><a href=\"https://www.tutorialspoint.com/rxpy/rxpy_combining_operators.htm\">Show Examples</a></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>combine_latest</td><td>This operator will create a tuple for the observable given as input.</td></tr><tr><td>merge</td><td>This operator will merge given observables.</td></tr><tr><td>start_with</td><td>This operator will take in the given values and add at the start of the source observable return back the full sequence.</td></tr><tr><td>zip</td><td>This operator returns an observable with values in a tuple form which is formed by taking the first value of the given observable and so on.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>This chapter explains about the operators in RxPY in detail. These operators include − Working with Operators Mathematical operators Transformation operators Filtering operators Error handling operators Utility operators Conditional operators Creation operators Connectable operators Combining operators Reactive (Rx) python has almost lots of operators, that make life easy with python coding. You can use these [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[198],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4842"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4842"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4842/revisions"}],"predecessor-version":[{"id":4843,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4842/revisions/4843"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4842"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4842"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4842"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4844,"date":"2021-02-11T11:20:48","date_gmt":"2021-02-11T11:20:48","guid":{"rendered":"http://python3.foobrdigital.com/?p=4844"},"modified":"2021-02-11T11:20:48","modified_gmt":"2021-02-11T11:20:48","slug":"working-with-subject","status":"publish","type":"post","link":"https://python3.foobrdigital.com/working-with-subject/","title":{"rendered":"Working with Subject"},"content":{"rendered":"\n<p>A subject is an observable sequence, as well as, an observer that can multicast, i.e. talk to many observers that have subscribed.</p>\n\n\n\n<p>We are going to discuss the following topics on subject −</p>\n\n\n\n<ul><li>Create a subject</li><li>Subscribe to a subject</li><li>Passing data to subject</li><li>BehaviorSubject</li><li>ReplaySubject</li><li>AsyncSubject</li></ul>\n\n\n\n<h2>Create a subject</h2>\n\n\n\n<p>To work with a subject, we need to import Subject as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx.subject import Subject\r\n</code></pre>\n\n\n\n<p>You can create a subject-object as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>subject_test = Subject()\n</code></pre>\n\n\n\n<p>The object is an observer that has three methods −</p>\n\n\n\n<ul><li>on_next(value)</li><li>on_error(error) and</li><li>on_completed()</li></ul>\n\n\n\n<h2>Subscribe to a Subject</h2>\n\n\n\n<p>You can create multiple subscription on the subject as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>subject_test.subscribe(\r\n   lambda x: print(\"The value is {0}\".format(x))\r\n)\r\nsubject_test.subscribe(\r\n   lambda x: print(\"The value is {0}\".format(x))\r\n)</code></pre>\n\n\n\n<h2>Passing Data to Subject</h2>\n\n\n\n<p>You can pass data to the subject created using the on_next(value) method as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>subject_test.on_next(\"A\")\r\nsubject_test.on_next(\"B\")\n</code></pre>\n\n\n\n<p>The data will be passed to all the subscription, added on the subject.</p>\n\n\n\n<p>Here, is a working example of the subject.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx.subject import Subject\r\nsubject_test = Subject()\r\nsubject_test.subscribe(\r\n   lambda x: print(\"The value is {0}\".format(x))\r\n)\r\nsubject_test.subscribe(\r\n   lambda x: print(\"The value is {0}\".format(x))\r\n)\r\nsubject_test.on_next(\"A\")\r\nsubject_test.on_next(\"B\")</code></pre>\n\n\n\n<p>The subject_test object is created by calling a Subject(). The subject_test object has reference to on_next(value), on_error(error) and on_completed() methods. The output of the above example is shown below −</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nThe value is A\r\nThe value is A\r\nThe value is B\r\nThe value is B\r\n</code></pre>\n\n\n\n<p>We can use the on_completed() method, to stop the subject execution as shown below.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx.subject import Subject\r\nsubject_test = Subject()\r\nsubject_test.subscribe(\r\n   lambda x: print(\"The value is {0}\".format(x))\r\n)\r\nsubject_test.subscribe(\r\n   lambda x: print(\"The value is {0}\".format(x))\r\n)\r\nsubject_test.on_next(\"A\")\r\nsubject_test.on_completed()\r\nsubject_test.on_next(\"B\")</code></pre>\n\n\n\n<p>Once we call complete, the next method called later is not invoked.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nThe value is A\r\nThe value is A\r\n</code></pre>\n\n\n\n<p>Let us now see, how to call on_error(error) method.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx.subject import Subject\r\nsubject_test = Subject()\r\nsubject_test.subscribe(\r\n   on_error = lambda e: print(\"Error : {0}\".format(e))\r\n)\r\nsubject_test.subscribe(\r\n   on_error = lambda e: print(\"Error : {0}\".format(e))\r\n)\r\nsubject_test.on_error(Exception('There is an Error!'))</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nError: There is an Error!\r\nError: There is an Error!\n</code></pre>\n\n\n\n<h2>BehaviorSubject</h2>\n\n\n\n<p>BehaviorSubject will give you the latest value when called. You can create behavior subject as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx.subject import BehaviorSubject\r\nbehavior_subject = BehaviorSubject(\"Testing Behaviour Subject\"); // initialized the behaviour subject with value:Testing Behaviour Subject</code></pre>\n\n\n\n<p>Here, is a working example to use Behaviour Subject</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx.subject import BehaviorSubject\r\nbehavior_subject = BehaviorSubject(\"Testing Behaviour Subject\");\r\nbehavior_subject.subscribe(\r\n   lambda x: print(\"Observer A : {0}\".format(x))\r\n)\r\nbehavior_subject.on_next(\"Hello\")\r\nbehavior_subject.subscribe(\r\n   lambda x: print(\"Observer B : {0}\".format(x))\r\n)\r\nbehavior_subject.on_next(\"Last call to Behaviour Subject\")</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nObserver A : Testing Behaviour Subject\r\nObserver A : Hello\r\nObserver B : Hello\r\nObserver A : Last call to Behaviour Subject\r\nObserver B : Last call to Behaviour Subject\r\n</code></pre>\n\n\n\n<h2>Replay Subject</h2>\n\n\n\n<p>A replaysubject is similar to behavior subject, wherein, it can buffer the values and replay the same to the new subscribers. Here, is a working example of replay subject.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx.subject import ReplaySubject\r\nreplay_subject = ReplaySubject(2)\r\nreplay_subject.subscribe(lambda x: print(\"Testing Replay Subject A: {0}\".format(x)))\r\nreplay_subject.on_next(1)\r\nreplay_subject.on_next(2)\r\nreplay_subject.on_next(3)\r\nreplay_subject.subscribe(lambda x: print(\"Testing Replay Subject B: {0}\".format(x)));\r\nreplay_subject.on_next(5)</code></pre>\n\n\n\n<p>The buffer value used is 2 on the replay subject. So, the last two values will be buffered and used for the new subscribers called.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nTesting Replay Subject A: 1\r\nTesting Replay Subject A: 2\r\nTesting Replay Subject A: 3\r\nTesting Replay Subject B: 2\r\nTesting Replay Subject B: 3\r\nTesting Replay Subject A: 5\r\nTesting Replay Subject B: 5\n</code></pre>\n\n\n\n<h2>AsyncSubject</h2>\n\n\n\n<p>In the case of AsyncSubject, the last value called is passed to the subscriber, and it will be done only after the complete() method is called.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx.subject import AsyncSubject\r\nasync_subject = AsyncSubject()\r\nasync_subject.subscribe(lambda x: print(\"Testing Async Subject A: {0}\".format(x)))\r\nasync_subject.on_next(1)\r\nasync_subject.on_next(2)\r\nasync_subject.on_completed()\r\nasync_subject.subscribe(lambda x: print(\"Testing Async Subject B: {0}\".format(x)))\r\nHere, before complete is called, the last value passed to the subject is 2, and the same is given to the subscribers.</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nTesting Async Subject A: 2\r\nTesting Async Subject B: 2\r\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>A subject is an observable sequence, as well as, an observer that can multicast, i.e. talk to many observers that have subscribed. We are going to discuss the following topics on subject − Create a subject Subscribe to a subject Passing data to subject BehaviorSubject ReplaySubject AsyncSubject Create a subject To work with a subject, [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[198],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4844"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4844"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4844/revisions"}],"predecessor-version":[{"id":4845,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4844/revisions/4845"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4844"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4844"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4844"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4846,"date":"2021-02-11T11:22:18","date_gmt":"2021-02-11T11:22:18","guid":{"rendered":"http://python3.foobrdigital.com/?p=4846"},"modified":"2021-02-11T11:22:18","modified_gmt":"2021-02-11T11:22:18","slug":"concurrency-using-scheduler","status":"publish","type":"post","link":"https://python3.foobrdigital.com/concurrency-using-scheduler/","title":{"rendered":"Concurrency using Scheduler"},"content":{"rendered":"\n<p>One important feature of RxPy is concurrency, i.e. to allow the task to execute in parallel. To make that happen, we have two operators subscribe_on() and observe_on() that will work with a scheduler, that will decide the execution of the subscribed task.</p>\n\n\n\n<p>Here, is a working example, that shows the need for subscibe_on(), observe_on() and scheduler.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import random\r\nimport time\r\nimport rx\r\nfrom rx import operators as ops\r\ndef adding_delay(value):\r\n   time.sleep(random.randint(5, 20) * 0.1)\r\n   return value\r\n# Task 1\r\nrx.of(1,2,3,4,5).pipe(\r\n   ops.map(lambda a: adding_delay(a))\r\n).subscribe(\r\n   lambda s: print(\"From Task 1: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 1 complete\")\r\n)\r\n# Task 2\r\nrx.range(1, 5).pipe(\r\n   ops.map(lambda a: adding_delay(a))\r\n).subscribe(\r\n   lambda s: print(\"From Task 2: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 2 complete\")\r\n) \r\ninput(\"Press any key to exit\\n\")</code></pre>\n\n\n\n<p>In the above example, I have 2 tasks: Task 1 and Task 2. The execution of the task is in sequence. The second task starts only, when the first task is done.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nFrom Task 1: 1\r\nFrom Task 1: 2\r\nFrom Task 1: 3\r\nFrom Task 1: 4\r\nFrom Task 1: 5\r\nTask 1 complete\r\nFrom Task 2: 1\r\nFrom Task 2: 2\r\nFrom Task 2: 3\r\nFrom Task 2: 4\r\nTask 2 complete\n</code></pre>\n\n\n\n<p>RxPy supports many Scheduler, and here, we are going to make use of ThreadPoolScheduler. ThreadPoolScheduler mainly will try to manage with the CPU threads available.</p>\n\n\n\n<p>In the example, we have seen earlier, we are going to make use of a multiprocessing module that will give us the cpu_count. The count will be given to the ThreadPoolScheduler that will manage to get the task working in parallel based on the threads available.</p>\n\n\n\n<p>Here, is a working example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import multiprocessing\r\nimport random\r\nimport time\r\nfrom threading import current_thread\r\nimport rx\r\nfrom rx.scheduler import ThreadPoolScheduler\r\nfrom rx import operators as ops\r\n# calculate cpu count, using which will create a ThreadPoolScheduler\r\nthread_count = multiprocessing.cpu_count()\r\nthread_pool_scheduler = ThreadPoolScheduler(thread_count)\r\nprint(\"Cpu count is : {0}\".format(thread_count))\r\ndef adding_delay(value):\r\n   time.sleep(random.randint(5, 20) * 0.1)\r\n   return value\r\n# Task 1\r\nrx.of(1,2,3,4,5).pipe(\r\n   ops.map(lambda a: adding_delay(a)),\r\n   ops.subscribe_on(thread_pool_scheduler)\r\n).subscribe(\r\n   lambda s: print(\"From Task 1: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 1 complete\")\r\n)\r\n# Task 2\r\nrx.range(1, 5).pipe(\r\n   ops.map(lambda a: adding_delay(a)),\r\n   ops.subscribe_on(thread_pool_scheduler)\r\n).subscribe(\r\n   lambda s: print(\"From Task 2: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 2 complete\")\r\n)\r\ninput(\"Press any key to exit\\n\")</code></pre>\n\n\n\n<p>In the above example, I have 2 tasks and the cpu_count is 4. Since, the task is 2 and threads available with us are 4, both the task can start in parallel.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nCpu count is : 4\r\nPress any key to exit\r\nFrom Task 1: 1\r\nFrom Task 2: 1\r\nFrom Task 1: 2\r\nFrom Task 2: 2\r\nFrom Task 2: 3\r\nFrom Task 1: 3\r\nFrom Task 2: 4\r\nTask 2 complete\r\nFrom Task 1: 4\r\nFrom Task 1: 5\r\nTask 1 complete\n</code></pre>\n\n\n\n<p>If you see the output, both the task has started in parallel.</p>\n\n\n\n<p>Now, consider a scenario, where the task is more than the CPU count i.e. CPU count is 4 and tasks are 5. In this case, we would need to check if any thread has got free after task completion, so that, it can be assigned to the new task available in the queue.</p>\n\n\n\n<p>For this purpose, we can use the observe_on() operator which will observe the scheduler if any threads are free. Here, is a working example using observe_on()</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import multiprocessing\r\nimport random\r\nimport time\r\nfrom threading import current_thread\r\nimport rx\r\nfrom rx.scheduler import ThreadPoolScheduler\r\nfrom rx import operators as ops\r\n# calculate cpu count, using which will create a ThreadPoolScheduler\r\nthread_count = multiprocessing.cpu_count()\r\nthread_pool_scheduler = ThreadPoolScheduler(thread_count)\r\nprint(\"Cpu count is : {0}\".format(thread_count))\r\ndef adding_delay(value):\r\n   time.sleep(random.randint(5, 20) * 0.1)\r\n   return value\r\n# Task 1\r\nrx.of(1,2,3,4,5).pipe(\r\n   ops.map(lambda a: adding_delay(a)),\r\n   ops.subscribe_on(thread_pool_scheduler)\r\n).subscribe(\r\n   lambda s: print(\"From Task 1: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 1 complete\")\r\n)\r\n# Task 2\r\nrx.range(1, 5).pipe(\r\n   ops.map(lambda a: adding_delay(a)),\r\n   ops.subscribe_on(thread_pool_scheduler)\r\n).subscribe(\r\n   lambda s: print(\"From Task 2: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 2 complete\")\r\n)\r\n#Task 3\r\nrx.range(1, 5).pipe(\r\n   ops.map(lambda a: adding_delay(a)),\r\n   ops.subscribe_on(thread_pool_scheduler)\r\n).subscribe(\r\n   lambda s: print(\"From Task 3: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 3 complete\")\r\n)\r\n#Task 4\r\nrx.range(1, 5).pipe(\r\n   ops.map(lambda a: adding_delay(a)),\r\n   ops.subscribe_on(thread_pool_scheduler)\r\n).subscribe(\r\n   lambda s: print(\"From Task 4: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 4 complete\")\r\n)\r\n#Task 5\r\nrx.range(1, 5).pipe(\r\n   ops.map(lambda a: adding_delay(a)),\r\n   ops.observe_on(thread_pool_scheduler)\r\n).subscribe(\r\n   lambda s: print(\"From Task 5: {0}\".format(s)),\r\n   lambda e: print(e),\r\n   lambda: print(\"Task 5 complete\")\r\n)\r\ninput(\"Press any key to exit\\n\")</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nCpu count is : 4\r\nFrom Task 4: 1\r\nFrom Task 4: 2\r\nFrom Task 1: 1\r\nFrom Task 2: 1\r\nFrom Task 3: 1\r\nFrom Task 1: 2\r\nFrom Task 3: 2\r\nFrom Task 4: 3\r\nFrom Task 3: 3\r\nFrom Task 2: 2\r\nFrom Task 1: 3\r\nFrom Task 4: 4\r\nTask 4 complete\r\nFrom Task 5: 1\r\nFrom Task 5: 2\r\nFrom Task 5: 3\r\nFrom Task 3: 4\r\nTask 3 complete\r\nFrom Task 2: 3\r\nPress any key to exit\r\nFrom Task 5: 4\r\nTask 5 complete\r\nFrom Task 1: 4\r\nFrom Task 2: 4\r\nTask 2 complete\r\nFrom Task 1: 5\r\nTask 1 complete\n</code></pre>\n\n\n\n<p>If you see the output, the moment task 4 is complete, the thread is given to the next task i.e., task 5 and the same starts executing.</p>\n","protected":false},"excerpt":{"rendered":"<p>One important feature of RxPy is concurrency, i.e. to allow the task to execute in parallel. To make that happen, we have two operators subscribe_on() and observe_on() that will work with a scheduler, that will decide the execution of the subscribed task. Here, is a working example, that shows the need for subscibe_on(), observe_on() and [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[198],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4846"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4846"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4846/revisions"}],"predecessor-version":[{"id":4847,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4846/revisions/4847"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4846"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4846"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4846"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4848,"date":"2021-02-11T11:29:03","date_gmt":"2021-02-11T11:29:03","guid":{"rendered":"http://python3.foobrdigital.com/?p=4848"},"modified":"2021-02-11T11:29:03","modified_gmt":"2021-02-11T11:29:03","slug":"examples","status":"publish","type":"post","link":"https://python3.foobrdigital.com/examples/","title":{"rendered":"Examples"},"content":{"rendered":"\n<p>In this chapter, we will discuss the following topics in detail −</p>\n\n\n\n<ul><li>Basic Example showing the working of observable, operators, and subscribing to the observer.</li><li>Difference between observable and subject.</li><li>Understanding cold and hot observables.</li></ul>\n\n\n\n<p>Given below is a basic example showing the working of observable, operators, and subscribing to the observer.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>test.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import requests\r\nimport rx\r\nimport json\r\nfrom rx import operators as ops\r\ndef filternames(x):\r\n   if (x&#91;\"name\"].startswith(\"C\")):\r\n      return x&#91;\"name\"]\r\n   else :\r\n      return \"\"\r\ncontent = requests.get('https://jsonplaceholder.typicode.com/users')\r\ny = json.loads(content.text)\r\nsource = rx.from_(y)\r\ncase1 = source.pipe(\r\n   ops.filter(lambda c: filternames(c)),\r\n   ops.map(lambda a:a&#91;\"name\"])\r\n)\r\ncase1.subscribe(\r\n   on_next = lambda i: print(\"Got - {0}\".format(i)), 8. RxPy — Examples\r\n   on_error = lambda e: print(\"Error : {0}\".format(e)),\r\n   on_completed = lambda: print(\"Job Done!\"),\r\n)</code></pre>\n\n\n\n<p>Here, is a very simple example, wherein, I am getting user data from this URL −https://jsonplaceholder.typicode.com/users.</p>\n\n\n\n<p>Filtering the data, to give the names starting with &#8220;C&#8221;, and later using the map to return the names only. Here is the output for the same −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx\\examples>python test.py\r\nGot - Clementine Bauch\r\nGot - Chelsey Dietrich\r\nGot - Clementina DuBuque\r\nJob Done!\n</code></pre>\n\n\n\n<h2>Difference between observable and subject</h2>\n\n\n\n<p>In this example, we will see the difference between an observable and a subject.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import of, operators as op\r\nimport random\r\ntest1 = of(1,2,3,4,5)\r\nsub1 = test1.pipe(\r\n   op.map(lambda a : a+random.random())\r\n)\r\nprint(\"From first subscriber\")\r\nsubscriber1 = sub1.subscribe(lambda i: print(\"From sub1 {0}\".format(i)))\r\nprint(\"From second subscriber\")\r\nsubscriber2 = sub1.subscribe(lambda i: print(\"From sub2 {0}\".format(i)))</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nFrom first subscriber\r\nFrom sub1 1.610450821095726\r\nFrom sub1 2.9567564032037335\r\nFrom sub1 3.933217537811936\r\nFrom sub1 4.82444905626622\r\nFrom sub1 5.929414892567188\r\nFrom second subscriber\r\nFrom sub2 1.8573813517529874\r\nFrom sub2 2.902433239469483\r\nFrom sub2 3.2289868093016825\r\nFrom sub2 4.050413890694411\r\nFrom sub2 5.226515068012821\n</code></pre>\n\n\n\n<p>In the above example, every time you subscribe to the observable, it will give you new values.</p>\n\n\n\n<h3>Subject Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import of, operators as op\r\nimport random\r\nfrom rx.subject import Subject\r\nsubject_test = Subject()\r\nsubject_test.subscribe(\r\n   lambda x: print(\"From sub1 {0}\".format(x))\r\n)\r\nsubject_test.subscribe(\r\n   lambda x: print(\"From sub2 {0}\".format(x))\r\n)\r\ntest1 = of(1,2,3,4,5)\r\nsub1 = test1.pipe(\r\n   op.map(lambda a : a+random.random())\r\n)\r\nsubscriber = sub1.subscribe(subject_test)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nFrom sub1 1.1789422863284509\r\nFrom sub2 1.1789422863284509\r\nFrom sub1 2.5525627903260153\r\nFrom sub2 2.5525627903260153\r\nFrom sub1 3.4191549324778325\r\nFrom sub2 3.4191549324778325\r\nFrom sub1 4.644042420199624\r\nFrom sub2 4.644042420199624\r\nFrom sub1 5.079896897489065\r\nFrom sub2 5.079896897489065</code></pre>\n\n\n\n<p>If you see the values are shared, between both subscribers using the subject.</p>\n\n\n\n<h2>Understanding Cold and Hot Observables</h2>\n\n\n\n<p>An observable is classified as</p>\n\n\n\n<ul><li>Cold Observables</li><li>Hot Observables</li></ul>\n\n\n\n<p>The difference in observables will be noticed when multiple subscribers are subscribing.</p>\n\n\n\n<h3>Cold Observables</h3>\n\n\n\n<p>Cold observables, are observable that are executed, and renders data each time it is subscribed. When it is subscribed, the observable is executed and the fresh values are given.</p>\n\n\n\n<p>The following example gives the understanding of cold observable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import of, operators as op\r\nimport random\r\ntest1 = of(1,2,3,4,5)\r\nsub1 = test1.pipe(\r\n   op.map(lambda a : a+random.random())\r\n)\r\nprint(\"From first subscriber\")\r\nsubscriber1 = sub1.subscribe(lambda i: print(\"From sub1 {0}\".format(i)))\r\nprint(\"From second subscriber\")\r\nsubscriber2 = sub1.subscribe(lambda i: print(\"From sub2 {0}\".format(i)))</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nFrom first subscriber\r\nFrom sub1 1.610450821095726\r\nFrom sub1 2.9567564032037335\r\nFrom sub1 3.933217537811936\r\nFrom sub1 4.82444905626622\r\nFrom sub1 5.929414892567188\r\nFrom second subscriber\r\nFrom sub2 1.8573813517529874\r\nFrom sub2 2.902433239469483\r\nFrom sub2 3.2289868093016825\r\nFrom sub2 4.050413890694411\r\nFrom sub2 5.226515068012821\n</code></pre>\n\n\n\n<p>In the above example, every time you subscribe to the observable, it will execute the observable and emit values. The values can also differ from subscriber to subscriber as shown in the example above.</p>\n\n\n\n<h3>Hot Observables</h3>\n\n\n\n<p>In the case of hot observable, they will emit the values when they are ready and will not always wait for a subscription. When the values are emitted, all the subscribers will get the same value.</p>\n\n\n\n<p>You can make use of hot observable when you want values to emitted when the observable is ready, or you want to share the same values to all your subscribers.</p>\n\n\n\n<p>An example of hot observable is Subject and connectable operators.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from rx import of, operators as op\r\nimport random\r\nfrom rx.subject import Subject\r\nsubject_test = Subject()\r\nsubject_test.subscribe(\r\n   lambda x: print(\"From sub1 {0}\".format(x))\r\n)\r\nsubject_test.subscribe(\r\n   lambda x: print(\"From sub2 {0}\".format(x))\r\n)\r\ntest1 = of(1,2,3,4,5)\r\nsub1 = test1.pipe(\r\n   op.map(lambda a : a+random.random())\r\n)\r\nsubscriber = sub1.subscribe(subject_test)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>E:\\pyrx>python testrx.py\r\nFrom sub1 1.1789422863284509\r\nFrom sub2 1.1789422863284509\r\nFrom sub1 2.5525627903260153\r\nFrom sub2 2.5525627903260153\r\nFrom sub1 3.4191549324778325\r\nFrom sub2 3.4191549324778325\r\nFrom sub1 4.644042420199624\r\nFrom sub2 4.644042420199624\r\nFrom sub1 5.079896897489065\r\nFrom sub2 5.079896897489065\n</code></pre>\n\n\n\n<p>If you see, the same value is shared between the subscribers. You can achieve the same using publish () connectable observable operator.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss the following topics in detail − Basic Example showing the working of observable, operators, and subscribing to the observer. Difference between observable and subject. Understanding cold and hot observables. Given below is a basic example showing the working of observable, operators, and subscribing to the observer. Example test.py Here, [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[198],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4848"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4848"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4848/revisions"}],"predecessor-version":[{"id":4849,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4848/revisions/4849"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4848"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4848"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4848"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]