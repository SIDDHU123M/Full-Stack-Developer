[
  {
    "id": 3963,
    "date": "2020-08-13T05:24:43",
    "date_gmt": "2020-08-13T05:24:43",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=67"
    },
    "modified": "2020-08-13T05:24:43",
    "modified_gmt": "2020-08-13T05:24:43",
    "slug": "css-tutorial",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-tutorial/",
    "title": {
      "rendered": "CSS Tutorial"
    },
    "content": {
      "rendered": "\n<p><strong>CSS</strong>&nbsp;is used to control the style of a web document in a simple and easy way.</p>\n\n\n\n<p><strong>CSS</strong>&nbsp;is the acronym for&nbsp;<strong>&#8220;Cascading Style Sheet&#8221;</strong>. This tutorial covers both the versions CSS1,CSS2 and CSS3, and gives a complete understanding of CSS, starting from its basics to advanced concepts.</p>\n\n\n\n<h2>Why to Learn CSS?</h2>\n\n\n\n<p><strong>Cascading Style Sheets</strong>, fondly referred to as&nbsp;<strong>CSS</strong>, is a simple design language intended to simplify the process of making web pages presentable.</p>\n\n\n\n<p><strong>CSS</strong>&nbsp;is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Web Development Domain. I will list down some of the key advantages of learning CSS:</p>\n\n\n\n<ul><li><strong>Create Stunning Web site</strong>&nbsp;&#8211; CSS handles the look and feel part of a web page. Using CSS, you can control the color of the text, the style of fonts, the spacing between paragraphs, how columns are sized and laid out, what background images or colors are used, layout designs,variations in display for different devices and screen sizes as well as a variety of other effects.</li><li><strong>Become a web designer</strong>&nbsp;&#8211; If you want to start a carrer as a professional web designer, HTML and CSS designing is a must skill.</li><li><strong>Control web</strong>&nbsp;&#8211; CSS is easy to learn and understand but it provides powerful control over the presentation of an HTML document. Most commonly, CSS is combined with the markup languages HTML or XHTML.</li><li><strong>Learn other languages</strong>&nbsp;&#8211; Once you understands the basic of HTML and CSS then other related technologies like javascript, php, or angular are become easier to understand.</li></ul>\n\n\n\n<h2>Hello World using CSS.</h2>\n\n\n\n<p>Just to give you a little excitement about CSS, I&#8217;m going to give you a small conventional CSS Hello World program, You can try it using Demo link.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>This is document title&lt;/title>\n      &lt;style>\n      h1 {\n         color: #36CFFF; \n      }\n      &lt;/style>\n   &lt;/head>\t\n   &lt;body>\n      &lt;h1>Hello World!&lt;/h1>\n   &lt;/body>\t\n&lt;/html></code></pre>\n\n\n\n<h2>Applications of CSS</h2>\n\n\n\n<p>As mentioned before, CSS is one of the most widely used style language over the web. I&#8217;m going to list few of them here:</p>\n\n\n\n<ul><li><strong>CSS saves time</strong>&nbsp;&#8211; You can write CSS once and then reuse same sheet in multiple HTML pages. You can define a style for each HTML element and apply it to as many Web pages as you want.</li><li><strong>Pages load faster</strong>&nbsp;&#8211; If you are using CSS, you do not need to write HTML tag attributes every time. Just write one CSS rule of a tag and apply it to all the occurrences of that tag. So less code means faster download times.</li><li><strong>Easy maintenance</strong>&nbsp;&#8211; To make a global change, simply change the style, and all elements in all the web pages will be updated automatically.</li><li><strong>Superior styles to HTML</strong>&nbsp;&#8211; CSS has a much wider array of attributes than HTML, so you can give a far better look to your HTML page in comparison to HTML attributes.</li><li><strong>Multiple Device Compatibility</strong>&nbsp;&#8211; Style sheets allow content to be optimized for more than one type of device. By using the same HTML document, different versions of a website can be presented for handheld devices such as PDAs and cell phones or for printing.</li><li><strong>Global web standards&nbsp;</strong>&#8211; Now HTML attributes are being deprecated and it is being recommended to use CSS. So its a good idea to start using CSS in all the HTML pages to make them compatible to future browsers.</li></ul>\n\n\n\n<h2>Audience</h2>\n\n\n\n<p>This&nbsp;<strong>CSS tutorial</strong>&nbsp;will help both students as well as professionals who want to make their websites or personal blogs more attractive.</p>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<p>You should be familiar with:</p>\n\n\n\n<ul><li>Basic word processing using any text editor.</li><li>How to create directories and files.</li><li>How to navigate through different directories.</li><li>Internet browsing using popular browsers like Internet Explorer or Firefox.</li><li>Developing simple Web Pages using HTML or XHTML.</li></ul>\n\n\n\n<p>If you are new to HTML and XHTML, then we would suggest you to go through our HTML Tutorial or XHTML Tutorial first.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>CSS&nbsp;is used to control the style of a web document in a simple and easy way. CSS&nbsp;is the acronym for&nbsp;&#8220;Cascading Style Sheet&#8221;. This tutorial covers both the versions CSS1,CSS2 and CSS3, and gives a complete understanding of CSS, starting from its basics to advanced concepts. Why to Learn CSS? Cascading Style Sheets, fondly referred to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3963"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3963"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3963/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3963"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3963"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3963"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2809,
    "date": "2020-08-13T05:25:24",
    "date_gmt": "2020-08-13T05:25:24",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=69"
    },
    "modified": "2020-08-13T05:25:24",
    "modified_gmt": "2020-08-13T05:25:24",
    "slug": "what-is-css",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/what-is-css/",
    "title": {
      "rendered": "What is CSS?"
    },
    "content": {
      "rendered": "\n<p><strong>C</strong>ascading&nbsp;<strong>S</strong>tyle&nbsp;<strong>S</strong>heets, fondly referred to as CSS, is a simple design language intended to simplify the process of making web pages presentable.</p>\n\n\n\n<p>CSS handles the look and feel part of a web page. Using CSS, you can control the color of the text, the style of fonts, the spacing between paragraphs, how columns are sized and laid out, what background images or colors are used, layout designs,variations in display for different devices and screen sizes as well as a variety of other effects.</p>\n\n\n\n<p>CSS is easy to learn and understand but it provides powerful control over the presentation of an HTML document. Most commonly, CSS is combined with the markup languages HTML or XHTML.</p>\n\n\n\n<h2>Advantages of CSS</h2>\n\n\n\n<ul><li><strong>CSS saves time</strong>&nbsp;− You can write CSS once and then reuse same sheet in multiple HTML pages. You can define a style for each HTML element and apply it to as many Web pages as you want.</li><li><strong>Pages load faster</strong>&nbsp;− If you are using CSS, you do not need to write HTML tag attributes every time. Just write one CSS rule of a tag and apply it to all the occurrences of that tag. So less code means faster download times.</li><li><strong>Easy maintenance</strong>&nbsp;− To make a global change, simply change the style, and all elements in all the web pages will be updated automatically.</li><li><strong>Superior styles to HTML</strong>&nbsp;− CSS has a much wider array of attributes than HTML, so you can give a far better look to your HTML page in comparison to HTML attributes.</li><li><strong>Multiple Device Compatibility</strong>&nbsp;− Style sheets allow content to be optimized for more than one type of device. By using the same HTML document, different versions of a website can be presented for handheld devices such as PDAs and cell phones or for printing.</li><li><strong>Global web standards</strong>&nbsp;− Now HTML attributes are being deprecated and it is being recommended to use CSS. So its a good idea to start using CSS in all the HTML pages to make them compatible to future browsers.</li></ul>\n\n\n\n<h2>Who Creates and Maintains CSS?</h2>\n\n\n\n<p>CSS is created and maintained through a group of people within the W3C called the CSS Working Group. The CSS Working Group creates documents called specifications. When a specification has been discussed and officially ratified by the W3C members, it becomes a recommendation.</p>\n\n\n\n<p>These ratified specifications are called recommendations because the W3C has no control over the actual implementation of the language. Independent companies and organizations create that software.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− The World Wide Web Consortium, or W3C is a group that makes recommendations about how the Internet works and how it should evolve.</p>\n\n\n\n<h2>CSS Versions</h2>\n\n\n\n<p>Cascading Style Sheets level 1 (CSS1) came out of W3C as a recommendation in December 1996. This version describes the CSS language as well as a simple visual formatting model for all the HTML tags.</p>\n\n\n\n<p>CSS2 became a W3C recommendation in May 1998 and builds on CSS1. This version adds support for media-specific style sheets e.g. printers and aural devices, downloadable fonts, element positioning and tables.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Cascading&nbsp;Style&nbsp;Sheets, fondly referred to as CSS, is a simple design language intended to simplify the process of making web pages presentable. CSS handles the look and feel part of a web page. Using CSS, you can control the color of the text, the style of fonts, the spacing between paragraphs, how columns are sized and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2809"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2809"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2809/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2809"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2809"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2809"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3964,
    "date": "2020-08-13T05:31:00",
    "date_gmt": "2020-08-13T05:31:00",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=71"
    },
    "modified": "2020-08-13T05:31:00",
    "modified_gmt": "2020-08-13T05:31:00",
    "slug": "css-syntax",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-syntax/",
    "title": {
      "rendered": "CSS &#8211; Syntax"
    },
    "content": {
      "rendered": "\n<p>A CSS comprises of style rules that are interpreted by the browser and then applied to the corresponding elements in your document. A style rule is made of three parts −</p>\n\n\n\n<ul><li><strong>Selector</strong>&nbsp;− A selector is an HTML tag at which a style will be applied. This could be any tag like &lt;h1&gt; or &lt;table&gt; etc.</li><li><strong>Property</strong>&nbsp;− A property is a type of attribute of HTML tag. Put simply, all the HTML attributes are converted into CSS properties. They could be&nbsp;<em>color</em>,&nbsp;<em>border</em>&nbsp;etc.</li><li><strong>Value</strong>&nbsp;− Values are assigned to properties. For example,&nbsp;<em>color</em>&nbsp;property can have value either&nbsp;<em>red</em>&nbsp;or&nbsp;<em>#F1F1F1</em>&nbsp;etc.</li></ul>\n\n\n\n<p>You can put CSS Style Rule Syntax as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>selector { property: value }</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/css/images/syntax.png\" alt=\"Syntax\"/></figure>\n\n\n\n<p><strong>Example</strong> − You can define a table border as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>table{ border :1px solid #C00; }</code></pre>\n\n\n\n<p>Here table is a selector and border is a property and given value&nbsp;<em>1px solid #C00</em>&nbsp;is the value of that property.</p>\n\n\n\n<p>You can define selectors in various simple ways based on your comfort. Let me put these selectors one by one.</p>\n\n\n\n<h2>The Type Selectors</h2>\n\n\n\n<p>This is the same selector we have seen above. Again, one more example to give a color to all level 1 headings −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>h1 {\n   color: #36CFFF; \n}</code></pre>\n\n\n\n<h2>The Universal Selectors</h2>\n\n\n\n<p>Rather than selecting elements of a specific type, the universal selector quite simply matches the name of any element type −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>* { \n   color: #000000; \n}</code></pre>\n\n\n\n<p>This rule renders the content of every element in our document in black.</p>\n\n\n\n<h2>The Descendant Selectors</h2>\n\n\n\n<p>Suppose you want to apply a style rule to a particular element only when it lies inside a particular element. As given in the following example, style rule will apply to &lt;em> element only when it lies inside &lt;ul> tag.</p>\n\n\n\n<pre class=\"wp-block-code\"><code></code></pre>\n\n\n\n<h2>The Class Selectors</h2>\n\n\n\n<p>You can define style rules based on the class attribute of the elements. All the elements having that class will be formatted according to the defined rule.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.black {\n   color: #000000; \n}</code></pre>\n\n\n\n<p>This rule renders the content in black for every element with class attribute set to <em>black</em> in our document. You can make it a bit more particular. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>h1.black {\n   color: #000000; \n}</code></pre>\n\n\n\n<p>This rule renders the content in black for only &lt;h1&gt; elements with class attribute set to&nbsp;<em>black</em>.</p>\n\n\n\n<p>You can apply more than one class selectors to given element. Consider the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p class = \"center bold\">\n   This para will be styled by the classes center and bold.\n&lt;/p></code></pre>\n\n\n\n<h2>The ID Selectors</h2>\n\n\n\n<p>You can define style rules based on the <em>id</em> attribute of the elements. All the elements having that <em>id</em> will be formatted according to the defined rule.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#black {\n   color: #000000; \n}</code></pre>\n\n\n\n<p>This rule renders the content in black for every element with <em>id</em> attribute set to <em>black</em> in our document. You can make it a bit more particular. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>h1#black {\n   color: #000000; \n}</code></pre>\n\n\n\n<p>This rule renders the content in black for only &lt;h1&gt; elements with&nbsp;<em>id</em>&nbsp;attribute set to&nbsp;<em>black</em>.</p>\n\n\n\n<p>The true power of <em>id</em> selectors is when they are used as the foundation for descendant selectors, For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#black h2 {\n   color: #000000; \n}</code></pre>\n\n\n\n<p>In this example all level 2 headings will be displayed in black color when those headings will lie with in tags having&nbsp;<em>id</em>&nbsp;attribute set to&nbsp;<em>black</em>.</p>\n\n\n\n<h2>The Child Selectors</h2>\n\n\n\n<p>You have seen the descendant selectors. There is one more type of selector, which is very similar to descendants but have different functionality. Consider the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>body > p {\n   color: #000000; \n}</code></pre>\n\n\n\n<p>This rule will render all the paragraphs in black if they are direct child of &lt;body&gt; element. Other paragraphs put inside other elements like &lt;div&gt; or &lt;td&gt; would not have any effect of this rule.</p>\n\n\n\n<h2>The Attribute Selectors</h2>\n\n\n\n<p>You can also apply styles to HTML elements with particular attributes. The style rule below will match all the input elements having a type attribute with a value of <em>text</em> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>input&#91;type = \"text\"] {\n   color: #000000; \n}</code></pre>\n\n\n\n<p>The advantage to this method is that the &lt;input type = &#8220;submit&#8221; /&gt; element is unaffected, and the color applied only to the desired text fields.</p>\n\n\n\n<p>There are following rules applied to attribute selector.</p>\n\n\n\n<ul><li><strong>p[lang]</strong>&nbsp;− Selects all paragraph elements with a&nbsp;<em>lang</em>&nbsp;attribute.</li><li><strong>p[lang=&#8221;fr&#8221;]</strong>&nbsp;− Selects all paragraph elements whose&nbsp;<em>lang</em>&nbsp;attribute has a value of exactly &#8220;fr&#8221;.</li><li><strong>p[lang~=&#8221;fr&#8221;]</strong>&nbsp;− Selects all paragraph elements whose&nbsp;<em>lang</em>&nbsp;attribute contains the word &#8220;fr&#8221;.</li><li><strong>p[lang|=&#8221;en&#8221;]</strong>&nbsp;− Selects all paragraph elements whose&nbsp;<em>lang</em>&nbsp;attribute contains values that are exactly &#8220;en&#8221;, or begin with &#8220;en-&#8220;.</li></ul>\n\n\n\n<h2>Multiple Style Rules</h2>\n\n\n\n<p>You may need to define multiple style rules for a single element. You can define these rules to combine multiple properties and corresponding values into a single block as defined in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>h1 {\n   color: #36C;\n   font-weight: normal;\n   letter-spacing: .4em;\n   margin-bottom: 1em;\n   text-transform: lowercase;\n}</code></pre>\n\n\n\n<p>Here all the property and value pairs are separated by a&nbsp;<strong>semicolon (;)</strong>. You can keep them in a single line or multiple lines. For better readability, we keep them in separate lines.</p>\n\n\n\n<p>For a while, don&#8217;t bother about the properties mentioned in the above block. These properties will be explained in the coming chapters and you can find complete detail about properties in CSS References</p>\n\n\n\n<h2>Grouping Selectors</h2>\n\n\n\n<p>You can apply a style to many selectors if you like. Just separate the selectors with a comma, as given in the following example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>h1, h2, h3 {\n   color: #36C;\n   font-weight: normal;\n   letter-spacing: .4em;\n   margin-bottom: 1em;\n   text-transform: lowercase;\n}</code></pre>\n\n\n\n<p>This define style rule will be applicable to h1, h2 and h3 element as well. The order of the list is irrelevant. All the elements in the selector will have the corresponding declarations applied to them.</p>\n\n\n\n<p>You can combine the various <em>id</em> selectors together as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#content, #footer, #supplement {\n   position: absolute;\n   left: 510px;\n   width: 200px;\n}</code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A CSS comprises of style rules that are interpreted by the browser and then applied to the corresponding elements in your document. A style rule is made of three parts − Selector&nbsp;− A selector is an HTML tag at which a style will be applied. This could be any tag like &lt;h1&gt; or &lt;table&gt; etc. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3964"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3964"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3964/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3964"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3964"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3964"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3965,
    "date": "2020-08-13T05:35:51",
    "date_gmt": "2020-08-13T05:35:51",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=73"
    },
    "modified": "2020-08-13T05:35:51",
    "modified_gmt": "2020-08-13T05:35:51",
    "slug": "css-inclusion",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-inclusion/",
    "title": {
      "rendered": "CSS &#8211; Inclusion"
    },
    "content": {
      "rendered": "\n<p>There are four ways to associate styles with your HTML document. Most commonly used methods are inline CSS and External CSS.</p>\n\n\n\n<h2>Embedded CSS &#8211; The &lt;style&gt; Element</h2>\n\n\n\n<p>You can put your CSS rules into an HTML document using the &lt;style> element. This tag is placed inside the &lt;head>&#8230;&lt;/head> tags. Rules defined using this syntax will be applied to all the elements available in the document. Here is the generic syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\" media = \"all\">\n         body {\n            background-color: linen;\n         }\n         h1 {\n            color: maroon;\n            margin-left: 40px;\n         }\n      &lt;/style>\n   &lt;/head>   \n   &lt;body>\n      &lt;h1>This is a heading&lt;/h1>\n      &lt;p>This is a paragraph.&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h3>Attributes</h3>\n\n\n\n<p>Attributes associated with &lt;style&gt; elements are −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attribute</th><th>Value</th><th>Description</th></tr><tr><td>type</td><td>text/css</td><td>Specifies the style sheet language as a content-type (MIME type). This is required attribute.</td></tr><tr><td>media</td><td>screenttytvprojectionhandheldprintbrailleauralall</td><td>Specifies the device the document will be displayed on. Default value is&nbsp;<em>all</em>. This is an optional attribute.</td></tr></tbody></table></figure>\n\n\n\n<h2>Inline CSS &#8211; The&nbsp;<em>style</em>&nbsp;Attribute</h2>\n\n\n\n<p>You can use <em>style</em> attribute of any HTML element to define style rules. These rules will be applied to that element only. Here is the generic syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;element style = \"...style rules....\"></code></pre>\n\n\n\n<h3>Attributes</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attribute</th><th>Value</th><th>Description</th></tr><tr><td>style</td><td>style rules</td><td>The value of&nbsp;<em>style</em>&nbsp;attribute is a combination of style declarations separated by semicolon (;).</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the example of inline CSS based on the above syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;h1 style = \"color:#36C;\"> \n         This is inline CSS \n      &lt;/h1>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>External CSS &#8211; The &lt;link&gt; Element</h2>\n\n\n\n<p>The &lt;link&gt; element can be used to include an external stylesheet file in your HTML document.</p>\n\n\n\n<p>An external style sheet is a separate text file with&nbsp;<strong>.css</strong>&nbsp;extension. You define all the Style rules within this text file and then you can include this file in any HTML document using &lt;link&gt; element.</p>\n\n\n\n<p>Here is the generic syntax of including external CSS file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;link type = \"text/css\" href = \"...\" media = \"...\" />\n&lt;/head>\n﻿</code></pre>\n\n\n\n<h3>Attributes</h3>\n\n\n\n<p>Attributes associated with &lt;style&gt; elements are −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Attribute</th><th>Value</th><th>Description</th></tr><tr><td>type</td><td>text css</td><td>Specifies the style sheet language as a content-type (MIME type). This attribute is required.</td></tr><tr><td>href</td><td>URL</td><td>Specifies the style sheet file having Style rules. This attribute is a required.</td></tr><tr><td>media</td><td>screenttytvprojectionhandheldprintbrailleauralall</td><td>Specifies the device the document will be displayed on. Default value is&nbsp;<em>all</em>. This is optional attribute.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Consider a simple style sheet file with a name <em>mystyle.css</em> having the following rules −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>h1, h2, h3 {\n   color: #36C;\n   font-weight: normal;\n   letter-spacing: .4em;\n   margin-bottom: 1em;\n   text-transform: lowercase;\n}</code></pre>\n\n\n\n<p>Now you can include this file <em>mystyle.css</em> in any HTML document as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;link type = \"text/css\" href = \"mystyle.css\" media = \" all\" />\n&lt;/head></code></pre>\n\n\n\n<h2>Imported CSS &#8211; @import Rule</h2>\n\n\n\n<p>@import is used to import an external stylesheet in a manner similar to the &lt;link> element. Here is the generic syntax of @import rule.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   @import \"URL\";\n&lt;/head></code></pre>\n\n\n\n<p>Here URL is the URL of the style sheet file having style rules. You can use another syntax as well −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   @import url(\"URL\");\n&lt;/head></code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following is the example showing you how to import a style sheet file into HTML document −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   @import \"mystyle.css\";\n&lt;/head></code></pre>\n\n\n\n<h2>CSS Rules Overriding</h2>\n\n\n\n<p>We have discussed four ways to include style sheet rules in a an HTML document. Here is the rule to override any Style Sheet Rule.</p>\n\n\n\n<ul><li>Any inline style sheet takes highest priority. So, it will override any rule defined in &lt;style&gt;&#8230;&lt;/style&gt; tags or rules defined in any external style sheet file.</li><li>Any rule defined in &lt;style&gt;&#8230;&lt;/style&gt; tags will override rules defined in any external style sheet file.</li><li>Any rule defined in external style sheet file takes lowest priority, and rules defined in this file will be applied only when above two rules are not applicable.</li></ul>\n\n\n\n<h2>Handling old Browsers</h2>\n\n\n\n<p>There are still many old browsers who do not support CSS. So, we should take care while writing our Embedded CSS in an HTML document. The following snippet shows how you can use comment tags to hide CSS from older browsers −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style type = \"text/css\">\n   &lt;!--\n      body, td {\n         color: blue;\n      }\n   -->\n&lt;/style></code></pre>\n\n\n\n<h2>CSS Comments</h2>\n\n\n\n<p>Many times, you may need to put additional comments in your style sheet blocks. So, it is very easy to comment any part in style sheet. You can simple put your comments inside /*&#8230;..this is a comment in style sheet&#8230;..*/.</p>\n\n\n\n<p>You can use /* &#8230;.*/ to comment multi-line blocks in similar way you do in C and C++ programming languages.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;style>\n         p {\n            color: red;\n            /* This is a single-line comment */\n            text-align: center;\n         }\n         /* This is a multi-line comment */\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p>Hello World!&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are four ways to associate styles with your HTML document. Most commonly used methods are inline CSS and External CSS. Embedded CSS &#8211; The &lt;style&gt; Element You can put your CSS rules into an HTML document using the &lt;style> element. This tag is placed inside the &lt;head>&#8230;&lt;/head> tags. Rules defined using this syntax will [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3965"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3965"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3965/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3965"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3965"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3965"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3966,
    "date": "2020-08-13T05:36:46",
    "date_gmt": "2020-08-13T05:36:46",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=75"
    },
    "modified": "2020-08-13T05:36:46",
    "modified_gmt": "2020-08-13T05:36:46",
    "slug": "css-measurement-units",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-measurement-units/",
    "title": {
      "rendered": "Measurement Units"
    },
    "content": {
      "rendered": "\n<p>Before we start the actual exercise, we would like to give a brief idea about the CSS Measurement Units. CSS supports a number of measurements including absolute units such as inches, centimeters, points, and so on, as well as relative measures such as percentages and em units. You need these values while specifying various measurements in your Style rules e.g.&nbsp;<strong>border = &#8220;1px solid red&#8221;</strong>.</p>\n\n\n\n<p>We have listed out all the CSS Measurement Units along with proper Examples −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Unit</th><th>Description</th><th>Example</th></tr><tr><td>%</td><td>Defines a measurement as a percentage relative to another value, typically an enclosing element.</td><td>p {font-size: 16pt; line-height: 125%;}</td></tr><tr><td>cm</td><td>Defines a measurement in centimeters.</td><td>div {margin-bottom: 2cm;}</td></tr><tr><td>em</td><td>A relative measurement for the height of a font in em spaces. Because an em unit is equivalent to the size of a given font, if you assign a font to 12pt, each &#8220;em&#8221; unit would be 12pt; thus, 2em would be 24pt.</td><td>p {letter-spacing: 7em;}</td></tr><tr><td>ex</td><td>This value defines a measurement relative to a font&#8217;s x-height. The x-height is determined by the height of the font&#8217;s lowercase letter x.</td><td>p {font-size: 24pt; line-height: 3ex;}</td></tr><tr><td>in</td><td>Defines a measurement in inches.</td><td>p {word-spacing: .15in;}</td></tr><tr><td>mm</td><td>Defines a measurement in millimeters.</td><td>p {word-spacing: 15mm;}</td></tr><tr><td>pc</td><td>Defines a measurement in picas. A pica is equivalent to 12 points; thus, there are 6 picas per inch.</td><td>p {font-size: 20pc;}</td></tr><tr><td>pt</td><td>Defines a measurement in points. A point is defined as 1/72nd of an inch.</td><td>body {font-size: 18pt;}</td></tr><tr><td>px</td><td>Defines a measurement in screen pixels.</td><td>p {padding: 25px;}</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Before we start the actual exercise, we would like to give a brief idea about the CSS Measurement Units. CSS supports a number of measurements including absolute units such as inches, centimeters, points, and so on, as well as relative measures such as percentages and em units. You need these values while specifying various measurements [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3966"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3966"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3966/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3966"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3966"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3966"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3967,
    "date": "2020-08-13T05:37:55",
    "date_gmt": "2020-08-13T05:37:55",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=77"
    },
    "modified": "2020-08-13T05:37:55",
    "modified_gmt": "2020-08-13T05:37:55",
    "slug": "css-colors",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-colors/",
    "title": {
      "rendered": "CSS &#8211; Colors"
    },
    "content": {
      "rendered": "\n<p>CSS uses color values to specify a color. Typically, these are used to set a color either for the foreground of an element (i.e., its text) or else for the background of the element. They can also be used to affect the color of borders and other decorative effects.</p>\n\n\n\n<p>You can specify your color values in various formats. Following table lists all the possible formats −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Format</th><th>Syntax</th><th>Example</th></tr><tr><td>Hex Code</td><td>#RRGGBB</td><td>p{color:#FF0000;}</td></tr><tr><td>Short Hex Code</td><td>#RGB</td><td>p{color:#6A7;}</td></tr><tr><td>RGB %</td><td>rgb(rrr%,ggg%,bbb%)</td><td>p{color:rgb(50%,50%,50%);}</td></tr><tr><td>RGB Absolute</td><td>rgb(rrr,ggg,bbb)</td><td>p{color:rgb(0,0,255);}</td></tr><tr><td>keyword</td><td>aqua, black, etc.</td><td>p{color:teal;}</td></tr></tbody></table></figure>\n\n\n\n<p>These formats are explained in more detail in the following sections −</p>\n\n\n\n<h2>CSS Colors &#8211; Hex Codes</h2>\n\n\n\n<p>A hexadecimal is a 6 digit representation of a color. The first two digits(RR) represent a red value, the next two are a green value(GG), and the last are the blue value(BB).</p>\n\n\n\n<p>A hexadecimal value can be taken from any graphics software like Adobe Photoshop, Jasc Paintshop Pro, or even using Advanced Paint Brush.</p>\n\n\n\n<p>Each hexadecimal code will be preceded by a pound or hash sign &#8216;#&#8217;. Following are the examples to use Hexadecimal notation.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Color</th><th>Color HEX</th></tr><tr><td>&nbsp;</td><td>#000000</td></tr><tr><td>&nbsp;</td><td>#FF0000</td></tr><tr><td>&nbsp;</td><td>#00FF00</td></tr><tr><td>&nbsp;</td><td>#0000FF</td></tr><tr><td>&nbsp;</td><td>#FFFF00</td></tr><tr><td>&nbsp;</td><td>#00FFFF</td></tr><tr><td>&nbsp;</td><td>#FF00FF</td></tr><tr><td>&nbsp;</td><td>#C0C0C0</td></tr><tr><td>&nbsp;</td><td>#FFFFFF</td></tr></tbody></table></figure>\n\n\n\n<h2>CSS Colors &#8211; Short Hex Codes</h2>\n\n\n\n<p>This is a shorter form of the six-digit notation. In this format, each digit is replicated to arrive at an equivalent six-digit value. For example: #6A7 becomes #66AA77.</p>\n\n\n\n<p>A hexadecimal value can be taken from any graphics software like Adobe Photoshop, Jasc Paintshop Pro, or even using Advanced Paint Brush.</p>\n\n\n\n<p>Each hexadecimal code will be preceded by a pound or hash sign &#8216;#&#8217;. Following are the examples to use Hexadecimal notation.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Color</th><th>Color HEX</th></tr><tr><td>&nbsp;</td><td>#000</td></tr><tr><td>&nbsp;</td><td>#F00</td></tr><tr><td>&nbsp;</td><td>#0F0</td></tr><tr><td>&nbsp;</td><td>#0FF</td></tr><tr><td>&nbsp;</td><td>#FF0</td></tr><tr><td>&nbsp;</td><td>#0FF</td></tr><tr><td>&nbsp;</td><td>#F0F</td></tr><tr><td>&nbsp;</td><td>#FFF</td></tr></tbody></table></figure>\n\n\n\n<h2>CSS Colors &#8211; RGB Values</h2>\n\n\n\n<p>This color value is specified using the&nbsp;<strong>rgb( )</strong>&nbsp;property. This property takes three values, one each for red, green, and blue. The value can be an integer between 0 and 255 or a percentage.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− All the browsers does not support rgb() property of color so it is recommended not to use it.</p>\n\n\n\n<p>Following is the example to show few colors using RGB values.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Color</th><th>Color RGB</th></tr><tr><td>&nbsp;</td><td>rgb(0,0,0)</td></tr><tr><td>&nbsp;</td><td>rgb(255,0,0)</td></tr><tr><td>&nbsp;</td><td>rgb(0,255,0)</td></tr><tr><td>&nbsp;</td><td>rgb(0,0,255)</td></tr><tr><td>&nbsp;</td><td>rgb(255,255,0)</td></tr><tr><td>&nbsp;</td><td>rgb(0,255,255)</td></tr><tr><td>&nbsp;</td><td>rgb(255,0,255)</td></tr><tr><td>&nbsp;</td><td>rgb(192,192,192)</td></tr><tr><td>&nbsp;</td><td>rgb(255,255,255)</td></tr></tbody></table></figure>\n\n\n\n<h2>Building Color Codes</h2>\n\n\n\n<p>You can build millions of color codes using our Color Code Builder. Check our&nbsp;<strong>HTML Color Code Builder</strong>. To use this tool, you would need a Java Enabled Browser.</p>\n\n\n\n<h2>Browser Safe Colors</h2>\n\n\n\n<p>Here is the list of 216 colors which are supposed to be most safe and computer independent colors. These colors vary from hexa code 000000 to FFFFFF. These colors are safe to use because they ensure that all computers would display the colors correctly when running a 256 color palette −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>000000</td><td>000033</td><td>000066</td><td>000099</td><td>0000CC</td><td>0000FF</td></tr><tr><td>003300</td><td>003333</td><td>003366</td><td>003399</td><td>0033CC</td><td>0033FF</td></tr><tr><td>006600</td><td>006633</td><td>006666</td><td>006699</td><td>0066CC</td><td>0066FF</td></tr><tr><td>009900</td><td>009933</td><td>009966</td><td>009999</td><td>0099CC</td><td>0099FF</td></tr><tr><td>00CC00</td><td>00CC33</td><td>00CC66</td><td>00CC99</td><td>00CCCC</td><td>00CCFF</td></tr><tr><td>00FF00</td><td>00FF33</td><td>00FF66</td><td>00FF99</td><td>00FFCC</td><td>00FFFF</td></tr><tr><td>330000</td><td>330033</td><td>330066</td><td>330099</td><td>3300CC</td><td>3300FF</td></tr><tr><td>333300</td><td>333333</td><td>333366</td><td>333399</td><td>3333CC</td><td>3333FF</td></tr><tr><td>336600</td><td>336633</td><td>336666</td><td>336699</td><td>3366CC</td><td>3366FF</td></tr><tr><td>339900</td><td>339933</td><td>339966</td><td>339999</td><td>3399CC</td><td>3399FF</td></tr><tr><td>33CC00</td><td>33CC33</td><td>33CC66</td><td>33CC99</td><td>33CCCC</td><td>33CCFF</td></tr><tr><td>33FF00</td><td>33FF33</td><td>33FF66</td><td>33FF99</td><td>33FFCC</td><td>33FFFF</td></tr><tr><td>660000</td><td>660033</td><td>660066</td><td>660099</td><td>6600CC</td><td>6600FF</td></tr><tr><td>663300</td><td>663333</td><td>663366</td><td>663399</td><td>6633CC</td><td>6633FF</td></tr><tr><td>666600</td><td>666633</td><td>666666</td><td>666699</td><td>6666CC</td><td>6666FF</td></tr><tr><td>669900</td><td>669933</td><td>669966</td><td>669999</td><td>6699CC</td><td>6699FF</td></tr><tr><td>66CC00</td><td>66CC33</td><td>66CC66</td><td>66CC99</td><td>66CCCC</td><td>66CCFF</td></tr><tr><td>66FF00</td><td>66FF33</td><td>66FF66</td><td>66FF99</td><td>66FFCC</td><td>66FFFF</td></tr><tr><td>990000</td><td>990033</td><td>990066</td><td>990099</td><td>9900CC</td><td>9900FF</td></tr><tr><td>993300</td><td>993333</td><td>993366</td><td>993399</td><td>9933CC</td><td>9933FF</td></tr><tr><td>996600</td><td>996633</td><td>996666</td><td>996699</td><td>9966CC</td><td>9966FF</td></tr><tr><td>999900</td><td>999933</td><td>999966</td><td>999999</td><td>9999CC</td><td>9999FF</td></tr><tr><td>99CC00</td><td>99CC33</td><td>99CC66</td><td>99CC99</td><td>99CCCC</td><td>99CCFF</td></tr><tr><td>99FF00</td><td>99FF33</td><td>99FF66</td><td>99FF99</td><td>99FFCC</td><td>99FFFF</td></tr><tr><td>CC0000</td><td>CC0033</td><td>CC0066</td><td>CC0099</td><td>CC00CC</td><td>CC00FF</td></tr><tr><td>CC3300</td><td>CC3333</td><td>CC3366</td><td>CC3399</td><td>CC33CC</td><td>CC33FF</td></tr><tr><td>CC6600</td><td>CC6633</td><td>CC6666</td><td>CC6699</td><td>CC66CC</td><td>CC66FF</td></tr><tr><td>CC9900</td><td>CC9933</td><td>CC9966</td><td>CC9999</td><td>CC99CC</td><td>CC99FF</td></tr><tr><td>CCCC00</td><td>CCCC33</td><td>CCCC66</td><td>CCCC99</td><td>CCCCCC</td><td>CCCCFF</td></tr><tr><td>CCFF00</td><td>CCFF33</td><td>CCFF66</td><td>CCFF99</td><td>CCFFCC</td><td>CCFFFF</td></tr><tr><td>FF0000</td><td>FF0033</td><td>FF0066</td><td>FF0099</td><td>FF00CC</td><td>FF00FF</td></tr><tr><td>FF3300</td><td>FF3333</td><td>FF3366</td><td>FF3399</td><td>FF33CC</td><td>FF33FF</td></tr><tr><td>FF6600</td><td>FF6633</td><td>FF6666</td><td>FF6699</td><td>FF66CC</td><td>FF66FF</td></tr><tr><td>FF9900</td><td>FF9933</td><td>FF9966</td><td>FF9999</td><td>FF99CC</td><td>FF99FF</td></tr><tr><td>FFCC00</td><td>FFCC33</td><td>FFCC66</td><td>FFCC99</td><td>FFCCCC</td><td>FFCCFF</td></tr><tr><td>FFFF00</td><td>FFFF33</td><td>FFFF66</td><td>FFFF99</td><td>FFFFCC</td><td>FFFFFF</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>CSS uses color values to specify a color. Typically, these are used to set a color either for the foreground of an element (i.e., its text) or else for the background of the element. They can also be used to affect the color of borders and other decorative effects. You can specify your color values [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3967"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3967"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3967/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3967"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3967"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3967"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3968,
    "date": "2020-08-13T05:44:18",
    "date_gmt": "2020-08-13T05:44:18",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=79"
    },
    "modified": "2020-08-13T05:44:18",
    "modified_gmt": "2020-08-13T05:44:18",
    "slug": "css-backgrounds",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-backgrounds/",
    "title": {
      "rendered": "Backgrounds"
    },
    "content": {
      "rendered": "\n<p>This chapter teaches you how to set backgrounds of various HTML elements. You can set the following background properties of an element −</p>\n\n\n\n<ul><li>The&nbsp;<strong>background-color</strong>&nbsp;property is used to set the background color of an element.</li><li>The&nbsp;<strong>background-image</strong>&nbsp;property is used to set the background image of an element.</li><li>The&nbsp;<strong>background-repeat</strong>&nbsp;property is used to control the repetition of an image in the background.</li><li>The&nbsp;<strong>background-position</strong>&nbsp;property is used to control the position of an image in the background.</li><li>The&nbsp;<strong>background-attachment</strong>&nbsp;property is used to control the scrolling of an image in the background.</li><li>The&nbsp;<strong>background</strong>&nbsp;property is used as a shorthand to specify a number of other background properties.</li></ul>\n\n\n\n<h2>Set the Background Color</h2>\n\n\n\n<p>Following is the example which demonstrates how to set the background color for an element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"background-color:yellow;\">\n         This text has a yellow background color.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Background Image</h2>\n\n\n\n<p>We can set the background image by calling local stored images as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style>\n         body  {\n            background-image: url(\"/css/images/css.jpg\");\n            background-color: #cccccc;\n         }\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h1>Hello World!&lt;/h1>\n   &lt;/body>\n&lt;html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Repeat the Background Image</h2>\n\n\n\n<p>The following example demonstrates how to repeat the background image if an image is small. You can use&nbsp;<em>no-repeat</em>&nbsp;value for&nbsp;<em>background-repeat</em>&nbsp;property if you don&#8217;t want to repeat an image, in this case image will display only once.</p>\n\n\n\n<p>By default&nbsp;<em>background-repeat</em>&nbsp;property will have&nbsp;<em>repeat</em>&nbsp;value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style>\n         body {\n            background-image: url(\"/css/images/css.jpg\");\n            background-repeat: repeat;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p>CodeMeals&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<p>The following example which demonstrates how to repeat the background image vertically.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style>\n         body {\n            background-image: url(\"/css/images/css.jpg\");\n            background-repeat: repeat-y;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p>CodeMeals&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<p>The following example demonstrates how to repeat the background image horizontally.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style>\n         body {\n            background-image: url(\"/css/images/css.jpg\");\n            background-repeat: repeat-x;\n         }\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p>CodeMeals&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Set the Background Image Position</h2>\n\n\n\n<p>The following example demonstrates how to set the background image position 100 pixels away from the left side.</p>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<p></p>\n\n\n\n<p>The following example demonstrates how to set the background image position 100 pixels away from the left side and 200 pixels down from the top.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style>\n         body {\n            background-image: url(\"/css/images/css.jpg\");\n            background-position:100px 200px;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p>CodeMeals&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Set the Background Attachment</h2>\n\n\n\n<p>Background attachment determines whether a background image is fixed or scrolls with the rest of the page.</p>\n\n\n\n<p>The following example demonstrates how to set the fixed background image.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;style>\n         body {\n            background-image: url('/css/images/css.jpg');\n            background-repeat: no-repeat;\n            background-attachment: fixed;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<p>The following example demonstrates how to set the scrolling background image.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;style>\n         body {\n            background-image: url('/css/images/css.jpg');\n            background-repeat: no-repeat;\n            background-attachment: fixed;\n            background-attachment:scroll;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n      &lt;p>The background-image is fixed. Try to scroll down the page.&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Shorthand Property</h2>\n\n\n\n<p>You can use the&nbsp;<em>background</em>&nbsp;property to set all the background properties at once. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p style = \"background:url(/images/pattern1.gif) repeat fixed;\">\n   This parapgraph has fixed repeated background image.\n&lt;/p></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter teaches you how to set backgrounds of various HTML elements. You can set the following background properties of an element − The&nbsp;background-color&nbsp;property is used to set the background color of an element. The&nbsp;background-image&nbsp;property is used to set the background image of an element. The&nbsp;background-repeat&nbsp;property is used to control the repetition of an image [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3968"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3968"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3968/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3968"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3968"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3968"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3969,
    "date": "2020-08-13T05:50:04",
    "date_gmt": "2020-08-13T05:50:04",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=81"
    },
    "modified": "2020-08-13T05:50:04",
    "modified_gmt": "2020-08-13T05:50:04",
    "slug": "css-fonts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-fonts/",
    "title": {
      "rendered": "CSS &#8211; Fonts"
    },
    "content": {
      "rendered": "\n<p>This chapter teaches you how to set fonts of a content, available in an HTML element. You can set following font properties of an element −</p>\n\n\n\n<ul><li>The&nbsp;<strong>font-family</strong>&nbsp;property is used to change the face of a font.</li><li>The&nbsp;<strong>font-style</strong>&nbsp;property is used to make a font italic or oblique.</li><li>The&nbsp;<strong>font-variant</strong>&nbsp;property is used to create a small-caps effect.</li><li>The&nbsp;<strong>font-weight</strong>&nbsp;property is used to increase or decrease how bold or light a font appears.</li><li>The&nbsp;<strong>font-size</strong>&nbsp;property is used to increase or decrease the size of a font.</li><li>The&nbsp;<strong>font</strong>&nbsp;property is used as shorthand to specify a number of other font properties.</li></ul>\n\n\n\n<h2>Set the Font Family</h2>\n\n\n\n<p>Following is the example, which demonstrates how to set the font family of an element. Possible value could be any font family name.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"font-family:georgia,garamond,serif;\">\n         This text is rendered in either georgia, garamond, or the \n         default serif font depending on which font  you have at your system.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Font Style</h2>\n\n\n\n<p>Following is the example, which demonstrates how to set the font style of an element. Possible values are <em>normal, italic and oblique</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"font-style:italic;\">\n         This text will be rendered in italic style\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Font Variant</h2>\n\n\n\n<p>The following example demonstrates how to set the font variant of an element. Possible values are <em>normal and small-caps</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"font-variant:small-caps;\">\n         This text will be rendered as small caps\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Font Weight</h2>\n\n\n\n<p>The following example demonstrates how to set the font weight of an element. The font-weight property provides the functionality to specify how bold a font is. Possible values could be <em>normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"font-weight:bold;\">\n         This font is bold.\n      &lt;/p>\n      \n      &lt;p style = \"font-weight:bolder;\">\n         This font is bolder.\n      &lt;/p>\n      \n      &lt;p style = \"font-weight:500;\">\n         This font is 500 weight.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Font Size</h2>\n\n\n\n<p>The following example demonstrates how to set the font size of an element. The font-size property is used to control the size of fonts. Possible values could be <em>xx-small, x-small, small, medium, large, x-large, xx-large, smaller, larger, size in pixels or in %</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"font-size:20px;\">\n         This font size is 20 pixels\n      &lt;/p>\n      \n      &lt;p style = \"font-size:small;\">\n         This font size is small\n      &lt;/p>\n      \n      &lt;p style = \"font-size:large;\">\n         This font size is large\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Font Size Adjust</h2>\n\n\n\n<p>The following example demonstrates how to set the font size adjust of an element. This property enables you to adjust the x-height to make fonts more legible. Possible value could be any number.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"font-size-adjust:0.61;\">\n         This text is using a font-size-adjust value.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Font Stretch</h2>\n\n\n\n<p>The following example demonstrates how to set the font stretch of an element. This property relies on the user&#8217;s computer to have an expanded or condensed version of the font being used.</p>\n\n\n\n<p>Possible values could be <em>normal, wider, narrower, ultra-condensed, extra-condensed, condensed, semi-condensed, semi-expanded, expanded, extra-expanded, ultra-expanded</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"font-stretch:ultra-expanded;\">\n         If this doesn't appear to work, it is likely that your computer \n         doesn't have a &lt;br>condensed or expanded version of the font being used.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Shorthand Property</h2>\n\n\n\n<p>You can use the <em>font</em> property to set all the font properties at once. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"font:italic small-caps bold 15px georgia;\">\n         Applying all the properties on the text at once.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter teaches you how to set fonts of a content, available in an HTML element. You can set following font properties of an element − The&nbsp;font-family&nbsp;property is used to change the face of a font. The&nbsp;font-style&nbsp;property is used to make a font italic or oblique. The&nbsp;font-variant&nbsp;property is used to create a small-caps effect. The&nbsp;font-weight&nbsp;property [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3969"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3969"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3969/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3969"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3969"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3969"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3970,
    "date": "2020-08-13T06:03:33",
    "date_gmt": "2020-08-13T06:03:33",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=83"
    },
    "modified": "2020-08-13T06:03:33",
    "modified_gmt": "2020-08-13T06:03:33",
    "slug": "css-text",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-text/",
    "title": {
      "rendered": "CSS &#8211; Text"
    },
    "content": {
      "rendered": "\n<p>This chapter teaches you how to manipulate text using CSS properties. You can set following text properties of an element −</p>\n\n\n\n<ul><li>The&nbsp;<strong>color</strong>&nbsp;property is used to set the color of a text.</li><li>The&nbsp;<strong>direction</strong>&nbsp;property is used to set the text direction.</li><li>The&nbsp;<strong>letter-spacing</strong>&nbsp;property is used to add or subtract space between the letters that make up a word.</li><li>The&nbsp;<strong>word-spacing</strong>&nbsp;property is used to add or subtract space between the words of a sentence.</li><li>The&nbsp;<strong>text-indent</strong>&nbsp;property is used to indent the text of a paragraph.</li><li>The&nbsp;<strong>text-align</strong>&nbsp;property is used to align the text of a document.</li><li>The&nbsp;<strong>text-decoration</strong>&nbsp;property is used to underline, overline, and strikethrough text.</li><li>The&nbsp;<strong>text-transform</strong>&nbsp;property is used to capitalize text or convert text to uppercase or lowercase letters.</li><li>The&nbsp;<strong>white-space</strong>&nbsp;property is used to control the flow and formatting of text.</li><li>The&nbsp;<strong>text-shadow</strong>&nbsp;property is used to set the text shadow around a text.</li></ul>\n\n\n\n<h2>Set the Text Color</h2>\n\n\n\n<p>The following example demonstrates how to set the text color. Possible value could be any color name in any valid format.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"color:red;\">\n         This text will be written in red.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Set the Text Direction</h2>\n\n\n\n<p>The following example demonstrates how to set the direction of a text. Possible values are&nbsp;<em>ltr or rtl</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"direction:rtl;\">\n         This text will be rendered from right to left\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Set the Space between Characters</h2>\n\n\n\n<p>The following example demonstrates how to set the space between characters. Possible values are&nbsp;<em>normal or a number specifying space.</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"letter-spacing:5px;\">\n         This text is having space between letters.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Set the Space between Words</h2>\n\n\n\n<p>The following example demonstrates how to set the space between words. Possible values are&nbsp;<em>normal or a number specifying space</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"word-spacing:5px;\">\n         This text is having space between words.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Text Indent</h2>\n\n\n\n<p>The following example demonstrates how to indent the first line of a paragraph. Possible values are&nbsp;<em>% or a number specifying indent space</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"text-indent:1cm;\">\n         This text will have first line indented by 1cm and this line will remain at \n         its actual position this is done by CSS text-indent property.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Set the Text Alignment</h2>\n\n\n\n<p>The following example demonstrates how to align a text. Possible values are&nbsp;<em>left, right, center, justify</em>.</p>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Decorating the Text</h2>\n\n\n\n<p>The following example demonstrates how to decorate a text. Possible values are&nbsp;<em>none, underline, overline, line-through, blink</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"text-decoration:underline;\">\n         This will be underlined\n      &lt;/p>\n      \n      &lt;p style = \"text-decoration:line-through;\">\n         This will be striked through.\n      &lt;/p>\n      \n      &lt;p style = \"text-decoration:overline;\">\n         This will have a over line.\n      &lt;/p>\n      \n      &lt;p style = \"text-decoration:blink;\">\n         This text will have blinking effect\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Text Cases</h2>\n\n\n\n<p>The following example demonstrates how to set the cases for a text. Possible values are&nbsp;<em>none, capitalize, uppercase, lowercase</em>.</p>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the White Space between Text</h2>\n\n\n\n<p>The following example demonstrates how white space inside an element is handled. Possible values are&nbsp;<em>normal, pre, nowrap</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"white-space:pre;\">\n         This text has a line break and the white-space pre setting \n         tells the browser to honor it just like the HTML pre tag.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>This will produce following result −</p>\n\n\n\n<h2>Set the Text Shadow</h2>\n\n\n\n<p>The following example demonstrates how to set the shadow around a text. This may not be supported by all the browsers.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"text-shadow:4px 4px 8px blue;\">\n         If your browser supports the CSS text-shadow property, \n         this text will have a  blue shadow.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter teaches you how to manipulate text using CSS properties. You can set following text properties of an element − The&nbsp;color&nbsp;property is used to set the color of a text. The&nbsp;direction&nbsp;property is used to set the text direction. The&nbsp;letter-spacing&nbsp;property is used to add or subtract space between the letters that make up a word. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3970"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3970"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3970/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3970"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3970"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3970"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3971,
    "date": "2020-08-13T06:05:54",
    "date_gmt": "2020-08-13T06:05:54",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=85"
    },
    "modified": "2020-08-13T06:05:54",
    "modified_gmt": "2020-08-13T06:05:54",
    "slug": "css-using-images",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-using-images/",
    "title": {
      "rendered": "Using Images"
    },
    "content": {
      "rendered": "\n<p>Images play an important role in any webpage. Though it is not recommended to include a lot of images, but it is still important to use good images wherever required.</p>\n\n\n\n<p>CSS plays a good role to control image display. You can set the following image properties using CSS.</p>\n\n\n\n<ul><li>The&nbsp;<strong>border</strong>&nbsp;property is used to set the width of an image border.</li><li>The&nbsp;<strong>height</strong>&nbsp;property is used to set the height of an image.</li><li>The&nbsp;<strong>width</strong>&nbsp;property is used to set the width of an image.</li><li>The&nbsp;<strong>-moz-opacity</strong>&nbsp;property is used to set the opacity of an image.</li></ul>\n\n\n\n<h2>The Image Border Property</h2>\n\n\n\n<p>The&nbsp;<em>border</em>&nbsp;property of an image is used to set the width of an image border. This property can have a value in length or in %.</p>\n\n\n\n<p>A width of zero pixels means no border.</p>\n\n\n\n<p>Here is the example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;img style = \"border:0px;\" src = \"/css/images/logo.png\" />\n      &lt;br />\n      &lt;img style = \"border:3px dashed red;\" src = \"/css/images/logo.png\" />\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The Image Height Property</h2>\n\n\n\n<p>The&nbsp;<em>height</em>&nbsp;property of an image is used to set the height of an image. This property can have a value in length or in %. While giving value in %, it applies it in respect of the box in which an image is available.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;img style = \"border:1px solid red; height:100px;\" src = \"/css/images/logo.png\" />\n      &lt;br />\n      &lt;img style = \"border:1px solid red; height:50%;\" src = \"/css/images/logo.png\" />\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The Image Width Property</h2>\n\n\n\n<p>The&nbsp;<em>width</em>&nbsp;property of an image is used to set the width of an image. This property can have a value in length or in %. While giving value in %, it applies it in respect of the box in which an image is available.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;img style = \"border:1px solid red; width:150px;\" src = \"/css/images/logo.png\" />\n      &lt;br />\n      &lt;img style = \"border:1px solid red; width:100%;\" src = \"/css/images/logo.png\" />\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The -moz-opacity Property</h2>\n\n\n\n<p>The&nbsp;<em>-moz-opacity</em>&nbsp;property of an image is used to set the opacity of an image. This property is used to create a transparent image in Mozilla. IE uses&nbsp;<strong>filter:alpha(opacity=x)</strong>&nbsp;to create transparent images.</p>\n\n\n\n<p>In Mozilla (-moz-opacity:x) x can be a value from 0.0 &#8211; 1.0. A lower value makes the element more transparent (The same things goes for the CSS3-valid syntax opacity:x).</p>\n\n\n\n<p>In IE (filter:alpha(opacity=x)) x can be a value from 0 &#8211; 100. A lower value makes the element more transparent.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;img style = \"border:1px solid red; -moz-opacity:0.4; filter:alpha(opacity=40);\" src = \"/css/images/logo.png\" />\n   &lt;/body>\n&lt;/html> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Images play an important role in any webpage. Though it is not recommended to include a lot of images, but it is still important to use good images wherever required. CSS plays a good role to control image display. You can set the following image properties using CSS. The&nbsp;border&nbsp;property is used to set the width [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3971"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3971"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3971/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3971"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3971"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3971"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3972,
    "date": "2020-08-13T06:09:24",
    "date_gmt": "2020-08-13T06:09:24",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=87"
    },
    "modified": "2020-08-13T06:09:24",
    "modified_gmt": "2020-08-13T06:09:24",
    "slug": "css-links",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-links/",
    "title": {
      "rendered": "Links"
    },
    "content": {
      "rendered": "\n<p>T come after a:link and a:visited in the CSS definition in order to be effective. Also, a:active MUST come after a:hover in the CSS definition as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style type = \"text/css\">\n   a:link {color: #000000}\n   a:visited {color: #006600}\n   a:hover {color: #FFCC00}\n   a:active {color: #FF00CC}\n&lt;/style></code></pre>\n\n\n\n<p>Now, we will see how to use these properties to give different effects to hyperlinks.</p>\n\n\n\n<h2>Set the Color of Links</h2>\n\n\n\n<p>The following example demonstrates how to set the link color. Possible values could be any color name in any valid format.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         a:link {color:#000000}\n     &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;a href = \"\">Link&lt;/a>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following black link −</p>\n\n\n\n<h2>Set the Color of Visited Links</h2>\n\n\n\n<p>The following example demonstrates how to set the color of visited links. Possible values could be any color name in any valid format.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         a:visited {color: #006600}\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;a href = \"\"> link&lt;/a> \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following link. Once you will click this link, it will change its color to green.</p>\n\n\n\n<h2>Change the Color of Links when Mouse is Over</h2>\n\n\n\n<p>The following example demonstrates how to change the color of links when we bring a mouse pointer over that link. Possible values could be any color name in any valid format.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         a:hover {color: #FFCC00}\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;a href = \"\">Link&lt;/a>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following link. Now, you bring your mouse over this link and you will see that it changes its color to yellow.</p>\n\n\n\n<h2>Change the Color of Active Links</h2>\n\n\n\n<p>The following example demonstrates how to change the color of active links. Possible values could be any color name in any valid format.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         a:active {color: #FF00CC}\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;a href = \"\">Link&lt;/a>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following link. It will change its color to pink when the user clicks it.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>T come after a:link and a:visited in the CSS definition in order to be effective. Also, a:active MUST come after a:hover in the CSS definition as follows − Now, we will see how to use these properties to give different effects to hyperlinks. Set the Color of Links The following example demonstrates how to set [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3972"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3972"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3972/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3972"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3972"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3972"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3973,
    "date": "2020-08-13T06:13:52",
    "date_gmt": "2020-08-13T06:13:52",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=89"
    },
    "modified": "2020-08-13T06:13:52",
    "modified_gmt": "2020-08-13T06:13:52",
    "slug": "css-tables",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-tables/",
    "title": {
      "rendered": "Tables"
    },
    "content": {
      "rendered": "\n<p>This tutorial will teach you how to set different properties of an HTML table using CSS. You can set following properties of a table −</p>\n\n\n\n<ul><li>The&nbsp;<strong>border-collapse</strong>&nbsp;specifies whether the browser should control the appearance of the adjacent borders that touch each other or whether each cell should maintain its style.</li><li>The&nbsp;<strong>border-spacing</strong>&nbsp;specifies the width that should appear between table cells.</li><li>The&nbsp;<strong>caption-side</strong>&nbsp;captions are presented in the &lt;caption&gt; element. By default, these are rendered above the table in the document. You use the&nbsp;<em>caption-side</em>&nbsp;property to control the placement of the table caption.</li><li>The&nbsp;<strong>empty-cells</strong>&nbsp;specifies whether the border should be shown if a cell is empty.</li><li>The&nbsp;<strong>table-layout</strong>&nbsp;allows browsers to speed up layout of a table by using the first width properties it comes across for the rest of a column rather than having to load the whole table before rendering it.</li></ul>\n\n\n\n<p>Now, we will see how to use these properties with examples.</p>\n\n\n\n<h2>The border-collapse Property</h2>\n\n\n\n<p>This property can have two values&nbsp;<em>collapse</em>&nbsp;and&nbsp;<em>separate</em>. The following example uses both the values −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         table.one {border-collapse:collapse;}\n         table.two {border-collapse:separate;}\n         \n         td.a {\n            border-style:dotted; \n            border-width:3px; \n            border-color:#000000; \n            padding: 10px;\n         }\n         td.b {\n            border-style:solid; \n            border-width:3px; \n            border-color:#333333; \n            padding:10px;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;table class = \"one\">\n         &lt;caption>Collapse Border Example&lt;/caption>\n         &lt;tr>&lt;td class = \"a\"> Cell A Collapse Example&lt;/td>&lt;/tr>\n         &lt;tr>&lt;td class = \"b\"> Cell B Collapse Example&lt;/td>&lt;/tr>\n      &lt;/table>\n      &lt;br />\n      \n      &lt;table class = \"two\">\n         &lt;caption>Separate Border Example&lt;/caption>\n         &lt;tr>&lt;td class = \"a\"> Cell A Separate Example&lt;/td>&lt;/tr>\n         &lt;tr>&lt;td class = \"b\"> Cell B Separate Example&lt;/td>&lt;/tr>\n      &lt;/table>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The border-spacing Property</h2>\n\n\n\n<p>The border-spacing property specifies the distance that separates adjacent cells&#8217;. borders. It can take either one or two values; these should be units of length.</p>\n\n\n\n<p>If you provide one value, it will applies to both vertical and horizontal borders. Or you can specify two values, in which case, the first refers to the horizontal spacing and the second to the vertical spacing −</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− Unfortunately, this property does not work in Netscape 7 or IE 6.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style type=\"text/css\">\n   /* If you provide one value */\n   table.example {border-spacing:10px;}\n   /* This is how you can provide two values */\n   table.example {border-spacing:10px; 15px;}\n&lt;/style>\n﻿</code></pre>\n\n\n\n<p>Now let&#8217;s modify the previous example and see the effect −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         table.one {\n            border-collapse:separate;\n            width:400px;\n            border-spacing:10px;\n         }\n         table.two {\n            border-collapse:separate;\n            width:400px;\n            border-spacing:10px 50px;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n   \n      &lt;table class = \"one\" border = \"1\">\n         &lt;caption>Separate Border Example with border-spacing&lt;/caption>\n         &lt;tr>&lt;td> Cell A Collapse Example&lt;/td>&lt;/tr>\n         &lt;tr>&lt;td> Cell B Collapse Example&lt;/td>&lt;/tr>\n      &lt;/table>\n      &lt;br />\n      \n      &lt;table class = \"two\" border = \"1\">\n         &lt;caption>Separate Border Example with border-spacing&lt;/caption>\n         &lt;tr>&lt;td> Cell A Separate Example&lt;/td>&lt;/tr>\n         &lt;tr>&lt;td> Cell B Separate Example&lt;/td>&lt;/tr>\n      &lt;/table>\n      \n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The caption-side Property</h2>\n\n\n\n<p>The caption-side property allows you to specify where the content of a &lt;caption&gt; element should be placed in relationship to the table. The table that follows lists the possible values.</p>\n\n\n\n<p>This property can have one of the four values&nbsp;<em>top, bottom, left&nbsp;</em>or&nbsp;<em>right</em>. The following example uses each value.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− These properties may not work with your IE Browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         caption.top {caption-side:top}\n         caption.bottom {caption-side:bottom}\n         caption.left {caption-side:left}\n         caption.right {caption-side:right}\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n   \n      &lt;table style = \"width:400px; border:1px solid black;\">\n         &lt;caption class = \"top\">\n            This caption will appear at the top\n         &lt;/caption>\n         &lt;tr>&lt;td > Cell A&lt;/td>&lt;/tr>\n         &lt;tr>&lt;td > Cell B&lt;/td>&lt;/tr>\n      &lt;/table>\n      &lt;br />\n      \n      &lt;table style = \"width:400px; border:1px solid black;\">\n         &lt;caption class = \"bottom\">\n            This caption will appear at the bottom\n         &lt;/caption>\n         &lt;tr>&lt;td > Cell A&lt;/td>&lt;/tr>\n         &lt;tr>&lt;td > Cell B&lt;/td>&lt;/tr>\n      &lt;/table>\n      &lt;br />\n      \n      &lt;table style = \"width:400px; border:1px solid black;\">\n         &lt;caption class = \"left\">\n            This caption will appear at the left\n         &lt;/caption>\n         &lt;tr>&lt;td > Cell A&lt;/td>&lt;/tr>\n         &lt;tr>&lt;td > Cell B&lt;/td>&lt;/tr>\n      &lt;/table>\n      &lt;br />\n      \n      &lt;table style = \"width:400px; border:1px solid black;\">\n         &lt;caption class = \"right\">\n            This caption will appear at the right\n         &lt;/caption>\n         &lt;tr>&lt;td > Cell A&lt;/td>&lt;/tr>\n         &lt;tr>&lt;td > Cell B&lt;/td>&lt;/tr>\n      &lt;/table>\n      \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The empty-cells Property</h2>\n\n\n\n<p>The empty-cells property indicates whether a cell without any content should have a border displayed.</p>\n\n\n\n<p>This property can have one of the three values &#8211;&nbsp;<em>show, hide</em>&nbsp;or&nbsp;<em>inherit</em>.</p>\n\n\n\n<p>Here is the empty-cells property used to hide borders of empty cells in the &lt;table&gt; element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         table.empty {\n            width:350px;\n            border-collapse:separate;\n            empty-cells:hide;\n         }\n         td.empty {\n            padding:5px;\n            border-style:solid;\n            border-width:1px;\n            border-color:#999999;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n   \n      &lt;table class = \"empty\">\n         &lt;tr>\n            &lt;th>&lt;/th>\n            &lt;th>Title one&lt;/th>\n            &lt;th>Title two&lt;/th>\n         &lt;/tr>\n      \n         &lt;tr>\n            &lt;th>Row Title&lt;/th>\n            &lt;td class = \"empty\">value&lt;/td>\n            &lt;td class = \"empty\">value&lt;/td>\n         &lt;/tr>\n      \n         &lt;tr>\n            &lt;th>Row Title&lt;/th>\n            &lt;td class = \"empty\">value&lt;/td>\n            &lt;td class = \"empty\">&lt;/td>\n         &lt;/tr>\n      &lt;/table>\n      \n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The table-layout Property</h2>\n\n\n\n<p>The table-layout property is supposed to help you control how a browser should render or lay out a table.</p>\n\n\n\n<p>This property can have one of the three values:&nbsp;<em>fixed, auto</em>&nbsp;or&nbsp;<em>inherit</em>.</p>\n\n\n\n<p>The following example shows the difference between these properties.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− This property is not supported by many browsers so do not rely on this property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         table.auto {\n            table-layout: auto\n         }\n         table.fixed {\n            table-layout: fixed\n         }\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n   \n      &lt;table class = \"auto\" border = \"1\" width = \"100%\">\n         &lt;tr>\n            &lt;td width = \"20%\">1000000000000000000000000000&lt;/td>\n            &lt;td width = \"40%\">10000000&lt;/td>\n            &lt;td width = \"40%\">100&lt;/td>\n         &lt;/tr>\n      &lt;/table>\n      &lt;br />\n      \n      &lt;table class = \"fixed\" border = \"1\" width = \"100%\">\n         &lt;tr>\n            &lt;td width = \"20%\">1000000000000000000000000000&lt;/td>\n            &lt;td width = \"40%\">10000000&lt;/td>\n            &lt;td width = \"40%\">100&lt;/td>\n         &lt;/tr>\n      &lt;/table>\n   \n   &lt;/body>\n&lt;/html> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This tutorial will teach you how to set different properties of an HTML table using CSS. You can set following properties of a table − The&nbsp;border-collapse&nbsp;specifies whether the browser should control the appearance of the adjacent borders that touch each other or whether each cell should maintain its style. The&nbsp;border-spacing&nbsp;specifies the width that should appear [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3973"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3973"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3973/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3973"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3973"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3973"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3974,
    "date": "2020-08-13T06:17:06",
    "date_gmt": "2020-08-13T06:17:06",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=91"
    },
    "modified": "2020-08-13T06:17:06",
    "modified_gmt": "2020-08-13T06:17:06",
    "slug": "css-borders",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-borders/",
    "title": {
      "rendered": "CSS &#8211; Borders"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<em>border</em>&nbsp;properties allow you to specify how the border of the box representing an element should look. There are three properties of a border you can change −</p>\n\n\n\n<ul><li>The&nbsp;<strong>border-color</strong>&nbsp;specifies the color of a border.</li><li>The&nbsp;<strong>border-style</strong>&nbsp;specifies whether a border should be solid, dashed line, double line, or one of the other possible values.</li><li>The&nbsp;<strong>border-width</strong>&nbsp;specifies the width of a border.</li></ul>\n\n\n\n<p>Now, we will see how to use these properties with examples.</p>\n\n\n\n<h2>The border-color Property</h2>\n\n\n\n<p>The border-color property allows you to change the color of the border surrounding an element. You can individually change the color of the bottom, left, top and right sides of an element&#8217;s border using the properties −</p>\n\n\n\n<ul><li><strong>border-bottom-color</strong>&nbsp;changes the color of bottom border.</li><li><strong>border-top-color</strong>&nbsp;changes the color of top border.</li><li><strong>border-left-color</strong>&nbsp;changes the color of left border.</li><li><strong>border-right-color</strong>&nbsp;changes the color of right border.</li></ul>\n\n\n\n<p>The following example shows the effect of all these properties −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         p.example1 {\n            border:1px solid;\n            border-bottom-color:#009900; /* Green */\n            border-top-color:#FF0000;    /* Red */\n            border-left-color:#330000;   /* Black */\n            border-right-color:#0000CC;  /* Blue */\n         }\n         p.example2 {\n            border:1px solid;\n            border-color:#009900;        /* Green */\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p class = \"example1\">\n         This example is showing all borders in different colors.\n      &lt;/p>\n      \n      &lt;p class = \"example2\">\n         This example is showing all borders in green color only.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The border-style Property</h2>\n\n\n\n<p>The border-style property allows you to select one of the following styles of border −</p>\n\n\n\n<ul><li><strong>none</strong>&nbsp;− No border. (Equivalent of border-width:0;)</li><li><strong>solid</strong>&nbsp;− Border is a single solid line.</li><li><strong>dotted</strong>&nbsp;− Border is a series of dots.</li><li><strong>dashed</strong>&nbsp;− Border is a series of short lines.</li><li><strong>double</strong>&nbsp;− Border is two solid lines.</li><li><strong>groove</strong>&nbsp;− Border looks as though it is carved into the page.</li><li><strong>ridge</strong>&nbsp;− Border looks the opposite of groove.</li><li><strong>inset</strong>&nbsp;− Border makes the box look like it is embedded in the page.</li><li><strong>outset</strong>&nbsp;− Border makes the box look like it is coming out of the canvas.</li><li><strong>hidden</strong>&nbsp;− Same as none, except in terms of border-conflict resolution for table elements.</li></ul>\n\n\n\n<p>You can individually change the style of the bottom, left, top, and right borders of an element using the following properties −</p>\n\n\n\n<ul><li><strong>border-bottom-style</strong>&nbsp;changes the style of bottom border.</li><li><strong>border-top-style</strong>&nbsp;changes the style of top border.</li><li><strong>border-left-style</strong>&nbsp;changes the style of left border.</li><li><strong>border-right-style</strong>&nbsp;changes the style of right border.</li></ul>\n\n\n\n<p>The following example shows all these border styles −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"border-width:4px; border-style:none;\">\n         This is a border with none width.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; border-style:solid;\">\n         This is a solid border.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; border-style:dashed;\">\n         This is a dashed border.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; border-style:double;\">\n         This is a double border.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; border-style:groove;\">\n         This is a groove border.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; border-style:ridge\">\n         This is a ridge  border.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; border-style:inset;\">\n         This is a inset border.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; border-style:outset;\">\n         This is a outset border.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; border-style:hidden;\">\n         This is a hidden border.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4px; \n         border-top-style:solid;\n         border-bottom-style:dashed;\n         border-left-style:groove;\n         border-right-style:double;\">\n         This is a a border with four different styles.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The border-width Property</h2>\n\n\n\n<p>The border-width property allows you to set the width of an element borders. The value of this property could be either a length in px, pt or cm or it should be set to&nbsp;<em>thin, medium or thick.</em></p>\n\n\n\n<p>You can individually change the width of the bottom, top, left, and right borders of an element using the following properties −</p>\n\n\n\n<ul><li><strong>border-bottom-width</strong>&nbsp;changes the width of bottom border.</li><li><strong>border-top-width</strong>&nbsp;changes the width of top border.</li><li><strong>border-left-width</strong>&nbsp;changes the width of left border.</li><li><strong>border-right-width</strong>&nbsp;changes the width of right border.</li></ul>\n\n\n\n<p>The following example shows all these border width −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"border-width:4px; border-style:solid;\">\n         This is a solid border whose width is 4px.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:4pt; border-style:solid;\">\n         This is a solid border whose width is 4pt.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:thin; border-style:solid;\">\n         This is a solid border whose width is thin.\n      &lt;/p>\n      \n      &lt;p style = \"border-width:medium; border-style:solid;\">\n         This is a solid border whose width is medium;\n      &lt;/p>\n      \n      &lt;p style = \"border-width:thick; border-style:solid;\">\n         This is a solid border whose width is thick.\n      &lt;/p>\n      \n      &lt;p style = \"border-bottom-width:4px;border-top-width:10px;\n         border-left-width: 2px;border-right-width:15px;border-style:solid;\">\n         This is a a border with four different width.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>Border Properties Using Shorthand</h2>\n\n\n\n<p>The border property allows you to specify color, style, and width of lines in one property −</p>\n\n\n\n<p>The following example shows how to use all the three properties into a single property. This is the most frequently used property to set border around any element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"border:4px solid red;\">\n         This example is showing shorthand property for border.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;border&nbsp;properties allow you to specify how the border of the box representing an element should look. There are three properties of a border you can change − The&nbsp;border-color&nbsp;specifies the color of a border. The&nbsp;border-style&nbsp;specifies whether a border should be solid, dashed line, double line, or one of the other possible values. The&nbsp;border-width&nbsp;specifies the width of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3974"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3974"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3974/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3974"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3974"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3974"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3975,
    "date": "2020-08-13T06:21:02",
    "date_gmt": "2020-08-13T06:21:02",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=93"
    },
    "modified": "2020-08-13T06:21:02",
    "modified_gmt": "2020-08-13T06:21:02",
    "slug": "css-margins",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-margins/",
    "title": {
      "rendered": "CSS &#8211; Margins"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<em>margin</em>&nbsp;property defines the space around an HTML element. It is possible to use negative values to overlap content.</p>\n\n\n\n<p>The values of the margin property are not inherited by the child elements. Remember that the adjacent vertical margins (top and bottom margins) will collapse into each other so that the distance between the blocks is not the sum of the margins, but only the greater of the two margins or the same size as one margin if both are equal.</p>\n\n\n\n<p>We have the following properties to set an element margin.</p>\n\n\n\n<ul><li>The&nbsp;<strong>margin</strong>&nbsp;specifies a shorthand property for setting the margin properties in one declaration.</li><li>The&nbsp;<strong>margin-bottom</strong>&nbsp;specifies the bottom margin of an element.</li><li>The&nbsp;<strong>margin-top</strong>&nbsp;specifies the top margin of an element.</li><li>The&nbsp;<strong>margin-left</strong>&nbsp;specifies the left margin of an element.</li><li>The&nbsp;<strong>margin-right</strong>&nbsp;specifies the right margin of an element.</li></ul>\n\n\n\n<p>Now, we will see how to use these properties with examples.</p>\n\n\n\n<h2>The Margin Property</h2>\n\n\n\n<p>The margin property allows you set all of the properties for the four margins in one declaration. Here is the syntax to set margin around a paragraph −</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"margin: 15px; border:1px solid black;\">\n         all four margins will be 15px\n      &lt;/p>\n      \n      &lt;p style = \"margin:10px 2%; border:1px solid black;\">\n         top and bottom margin will be 10px, left and right margin will be 2% \n         of the total width of the document.\n      &lt;/p>\n      \n      &lt;p style = \"margin: 10px 2% -10px; border:1px solid black;\">\n         top margin will be 10px, left and right margin will be 2% of the \n         total width of the document, bottom margin will be -10px\n      &lt;/p>\n      \n      &lt;p style = \"margin: 10px 2% -10px auto; border:1px solid black;\">\n         top margin will be 10px, right margin will be 2% of the total \n         width of the document, bottom margin will be -10px, left margin \n         will be set by the browser\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The margin-bottom Property</h2>\n\n\n\n<p>The margin-bottom property allows you set bottom margin of an element. It can have a value in length, % or auto.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"margin-bottom: 15px; border:1px solid black;\">\n         This is a paragraph with a specified bottom margin\n      &lt;/p>\n      \n      &lt;p style = \"margin-bottom: 5%; border:1px solid black;\">\n         This is another paragraph with a specified bottom margin in percent\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<h2>The margin-top Property</h2>\n\n\n\n<p>The margin-top property allows you set top margin of an element. It can have a value in length, % or auto.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"margin-top: 15px; border:1px solid black;\">\n         This is a paragraph with a specified top margin\n      &lt;/p>\n      \n      &lt;p style = \"margin-top: 5%; border:1px solid black;\">\n         This is another paragraph with a specified top margin in percent\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The margin-left Property</h2>\n\n\n\n<p>The margin-left property allows you set left margin of an element. It can have a value in length, % or auto.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"margin-left: 15px; border:1px solid black;\">\n         This is a paragraph with a specified left margin\n      &lt;/p>\n      \n      &lt;p style = \"margin-left: 5%; border:1px solid black;\">\n         This is another paragraph with a specified top margin in percent\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<h2>The margin-right Property</h2>\n\n\n\n<p>The margin-right property allows you set right margin of an element. It can have a value in length, % or auto.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"margin-right: 15px; border:1px solid black;\">\n         This is a paragraph with a specified right margin\n      &lt;/p>\n      &lt;p style = \"margin-right: 5%; border:1px solid black;\">\n         This is another paragraph with a specified right margin in percent\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;margin&nbsp;property defines the space around an HTML element. It is possible to use negative values to overlap content. The values of the margin property are not inherited by the child elements. Remember that the adjacent vertical margins (top and bottom margins) will collapse into each other so that the distance between the blocks is not [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3975"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3975"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3975/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3975"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3975"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3975"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3976,
    "date": "2020-08-13T06:41:44",
    "date_gmt": "2020-08-13T06:41:44",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=95"
    },
    "modified": "2020-08-13T06:41:44",
    "modified_gmt": "2020-08-13T06:41:44",
    "slug": "css-lists",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-lists/",
    "title": {
      "rendered": "CSS &#8211; Lists"
    },
    "content": {
      "rendered": "\n<p>Lists are very helpful in conveying a set of either numbered or bullet points. This chapter teaches you how to control list type, position, style, etc., using CSS.</p>\n\n\n\n<p>We have the following five CSS properties, which can be used to control lists −</p>\n\n\n\n<ul><li>The&nbsp;<strong>list-style-type</strong>&nbsp;allows you to control the shape or appearance of the marker.</li><li>The&nbsp;<strong>list-style-position</strong>&nbsp;specifies whether a long point that wraps to a second line should align with the first line or start underneath the start of the marker.</li><li>The&nbsp;<strong>list-style-image</strong>&nbsp;specifies an image for the marker rather than a bullet point or number.</li><li>The&nbsp;<strong>list-style</strong>&nbsp;serves as shorthand for the preceding properties.</li><li>The&nbsp;<strong>marker-offset</strong>&nbsp;specifies the distance between a marker and the text in the list.</li></ul>\n\n\n\n<p>Now, we will see how to use these properties with examples.</p>\n\n\n\n<h2>The list-style-type Property</h2>\n\n\n\n<p>The&nbsp;<em>list-style-type</em>&nbsp;property allows you to control the shape or style of bullet point (also known as a marker) in the case of unordered lists and the style of numbering characters in ordered lists.</p>\n\n\n\n<p>Here are the values which can be used for an unordered list −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Value &amp; Description</th></tr><tr><td>1</td><td><strong>none</strong>NA</td></tr><tr><td>2</td><td><strong>disc (default)</strong>A filled-in circle</td></tr><tr><td>3</td><td><strong>circle</strong>An empty circle</td></tr><tr><td>4</td><td><strong>square</strong>A filled-in square</td></tr></tbody></table></figure>\n\n\n\n<p>Here are the values, which can be used for an ordered list −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Value</th><th>Description</th><th>Example</th></tr><tr><td>decimal</td><td>Number</td><td>1,2,3,4,5</td></tr><tr><td>decimal-leading-zero</td><td>0 before the number</td><td>01, 02, 03, 04, 05</td></tr><tr><td>lower-alpha</td><td>Lowercase alphanumeric characters</td><td>a, b, c, d, e</td></tr><tr><td>upper-alpha</td><td>Uppercase alphanumeric characters</td><td>A, B, C, D, E</td></tr><tr><td>lower-roman</td><td>Lowercase Roman numerals</td><td>i, ii, iii, iv, v</td></tr><tr><td>upper-roman</td><td>Uppercase Roman numerals</td><td>I, II, III, IV, V</td></tr><tr><td>lower-greek</td><td>The marker is lower-greek</td><td>alpha, beta, gamma</td></tr><tr><td>lower-latin</td><td>The marker is lower-latin</td><td>a, b, c, d, e</td></tr><tr><td>upper-latin</td><td>The marker is upper-latin</td><td>A, B, C, D, E</td></tr><tr><td>hebrew</td><td>The marker is traditional Hebrew numbering</td><td>&nbsp;</td></tr><tr><td>armenian</td><td>The marker is traditional Armenian numbering</td><td>&nbsp;</td></tr><tr><td>georgian</td><td>The marker is traditional Georgian numbering</td><td>&nbsp;</td></tr><tr><td>cjk-ideographic</td><td>The marker is plain ideographic numbers</td><td>&nbsp;</td></tr><tr><td>hiragana</td><td>The marker is hiragana</td><td>a, i, u, e, o, ka, ki</td></tr><tr><td>katakana</td><td>The marker is katakana</td><td>A, I, U, E, O, KA, KI</td></tr><tr><td>hiragana-iroha</td><td>The marker is hiragana-iroha</td><td>i, ro, ha, ni, ho, he, to</td></tr><tr><td>katakana-iroha</td><td>The marker is katakana-iroha</td><td>I, RO, HA, NI, HO, HE, TO</td></tr></tbody></table></figure>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ul style = \"list-style-type:circle;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ul>\n      \n      &lt;ul style = \"list-style-type:square;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ul>\n      \n      &lt;ol style = \"list-style-type:decimal;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ol>\n      \n      &lt;ol style = \"list-style-type:lower-alpha;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ol>\n      \n      &lt;ol style = \"list-style-type:lower-roman;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ol>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The list-style-position Property</h2>\n\n\n\n<p>The&nbsp;<em>list-style-position</em>&nbsp;property indicates whether the marker should appear inside or outside of the box containing the bullet points. It can have one the two values −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Value &amp; Description</th></tr><tr><td>1</td><td><strong>none</strong>NA</td></tr><tr><td>2</td><td><strong>inside</strong>If the text goes onto a second line, the text will wrap underneath the marker. It will also appear indented to where the text would have started if the list had a value of outside.</td></tr><tr><td>3</td><td><strong>outside</strong>If the text goes onto a second line, the text will be aligned with the start of the first line (to the right of the bullet).</td></tr></tbody></table></figure>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ul style = \"list-style-type:circle; list-stlye-position:outside;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ul>\n      \n      &lt;ul style = \"list-style-type:square;list-style-position:inside;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ul>\n      \n      &lt;ol style = \"list-style-type:decimal;list-stlye-position:outside;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ol>\n      \n      &lt;ol style = \"list-style-type:lower-alpha;list-style-position:inside;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ol>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<h2>The list-style-image Property</h2>\n\n\n\n<p>The&nbsp;<em>list-style-image</em>&nbsp;allows you to specify an image so that you can use your own bullet style. The syntax is similar to the background-image property with the letters url starting the value of the property followed by the URL in brackets. If it does not find the given image then default bullets are used.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ul>\n         &lt;li style = \"list-style-image: url(/images/bullet.gif);\">Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ul>\n      \n      &lt;ol>\n         &lt;li style = \"list-style-image: url(/images/bullet.gif);\">Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ol>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The list-style Property</h2>\n\n\n\n<p>The&nbsp;<em>list-style</em>&nbsp;allows you to specify all the list properties into a single expression. These properties can appear in any order.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ul style = \"list-style: inside square;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ul>\n      \n      &lt;ol style = \"list-style: outside upper-alpha;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ol>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The marker-offset Property</h2>\n\n\n\n<p>The&nbsp;<em>marker-offset</em>&nbsp;property allows you to specify the distance between the marker and the text relating to that marker. Its value should be a length as shown in the following example −</p>\n\n\n\n<p>Unfortunately, this property is not supported in IE 6 or Netscape 7.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;ul style = \"list-style: inside square; marker-offset:2em;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ul>\n      \n      &lt;ol style = \"list-style: outside upper-alpha; marker-offset:2cm;\">\n         &lt;li>Maths&lt;/li>\n         &lt;li>Social Science&lt;/li>\n         &lt;li>Physics&lt;/li>\n      &lt;/ol>\n   &lt;/body>\n&lt;/html></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Lists are very helpful in conveying a set of either numbered or bullet points. This chapter teaches you how to control list type, position, style, etc., using CSS. We have the following five CSS properties, which can be used to control lists − The&nbsp;list-style-type&nbsp;allows you to control the shape or appearance of the marker. The&nbsp;list-style-position&nbsp;specifies [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3976"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3976"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3976/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3976"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3976"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3976"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3977,
    "date": "2020-08-13T07:24:08",
    "date_gmt": "2020-08-13T07:24:08",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=97"
    },
    "modified": "2020-08-13T07:24:08",
    "modified_gmt": "2020-08-13T07:24:08",
    "slug": "css-paddings",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-paddings/",
    "title": {
      "rendered": "Paddings"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<em>padding</em>&nbsp;property allows you to specify how much space should appear between the content of an element and its border −</p>\n\n\n\n<p>The value of this attribute should be either a length, a percentage, or the word&nbsp;<em>inherit</em>. If the value is&nbsp;<em>inherit</em>, it will have the same padding as its parent element. If a percentage is used, the percentage is of the containing box.</p>\n\n\n\n<p>The following CSS properties can be used to control lists. You can also set different values for the padding on each side of the box using the following properties −</p>\n\n\n\n<ul><li>The&nbsp;<strong>padding-bottom</strong>&nbsp;specifies the bottom padding of an element.</li><li>The&nbsp;<strong>padding-top</strong>&nbsp;specifies the top padding of an element.</li><li>The&nbsp;<strong>padding-left</strong>&nbsp;specifies the left padding of an element.</li><li>The&nbsp;<strong>padding-right</strong>&nbsp;specifies the right padding of an element.</li><li>The&nbsp;<strong>padding</strong>&nbsp;serves as shorthand for the preceding properties.</li></ul>\n\n\n\n<p>Now, we will see how to use these properties with examples.</p>\n\n\n\n<h2>The padding-bottom Property</h2>\n\n\n\n<p>The&nbsp;<em>padding-bottom</em>&nbsp;property sets the bottom padding (space) of an element. This can take a value in terms of length of %.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"padding-bottom: 15px; border:1px solid black;\">\n         This is a paragraph with a specified bottom padding\n      &lt;/p>\n      \n      &lt;p style = \"padding-bottom: 5%; border:1px solid black;\">\n         This is another paragraph with a specified bottom padding in percent\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The padding-top Property</h2>\n\n\n\n<p>The&nbsp;<em>padding-top</em>&nbsp;property sets the top padding (space) of an element. This can take a value in terms of length of %.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"padding-top: 15px; border:1px solid black;\">\n         This is a paragraph with a specified top padding\n      &lt;/p>\n      \n      &lt;p style = \"padding-top: 5%; border:1px solid black;\">\n         This is another paragraph with a specified top padding in percent\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The padding-left Property</h2>\n\n\n\n<p>The&nbsp;<em>padding-left</em>&nbsp;property sets the left padding (space) of an element. This can take a value in terms of length of %.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"padding-left: 15px; border:1px solid black;\">\n         This is a paragraph with a specified left padding\n      &lt;/p>\n      \n      &lt;p style = \"padding-left: 15%; border:1px solid black;\">\n         This is another paragraph with a specified left padding in percent\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h2>The padding-right Property</h2>\n\n\n\n<p>The&nbsp;<em>padding-right</em>&nbsp;property sets the right padding (space) of an element. This can take a value in terms of length of %.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"padding-right: 15px; border:1px solid black;\">\n         This is a paragraph with a specified right padding\n      &lt;/p>\n      \n      &lt;p style = \"padding-right: 5%; border:1px solid black;\">\n         This is another paragraph with a specified right padding in percent\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The Padding Property</h2>\n\n\n\n<p>The&nbsp;<em>padding</em>&nbsp;property sets the left, right, top and bottom padding (space) of an element. This can take a value in terms of length of %.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"padding: 15px; border:1px solid black;\">\n         all four padding will be 15px \n      &lt;/p> \n      \n      &lt;p style = \"padding:10px 2%; border:1px solid black;\"> \n         top and bottom padding will be 10px, left and right\n         padding will be 2% of the total width of the document. \n      &lt;/p> \n      \n      &lt;p style = \"padding: 10px 2% 10px; border:1px solid black;\">\n         top padding will be 10px, left and right padding will \n         be 2% of the total width of the document, bottom padding will be 10px\n      &lt;/p> \n      \n      &lt;p style = \"padding: 10px 2% 10px 10px; border:1px solid black;\">\n         top padding will be 10px, right padding will be 2% of\n         the total width of the document, bottom padding and top padding will be 10px \n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;padding&nbsp;property allows you to specify how much space should appear between the content of an element and its border − The value of this attribute should be either a length, a percentage, or the word&nbsp;inherit. If the value is&nbsp;inherit, it will have the same padding as its parent element. If a percentage is used, the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3977"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3977"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3977/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3977"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3977"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3977"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3978,
    "date": "2020-08-13T07:27:37",
    "date_gmt": "2020-08-13T07:27:37",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=101"
    },
    "modified": "2020-08-13T07:27:37",
    "modified_gmt": "2020-08-13T07:27:37",
    "slug": "css-cursors",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-cursors/",
    "title": {
      "rendered": "CSS &#8211; Cursors"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<em>cursor</em>&nbsp;property of CSS allows you to specify the type of cursor that should be displayed to the user.</p>\n\n\n\n<p>One good usage of this property is in using images for submit buttons on forms. By default, when a cursor hovers over a link, the cursor changes from a pointer to a hand. However, it does not change form for a submit button on a form. Therefore, whenever someone hovers over an image that is a submit button, it provides a visual clue that the image is clickable.</p>\n\n\n\n<p>The following table shows the possible values for the cursor property −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Value &amp; Description</th></tr><tr><td>1</td><td><strong>auto</strong>Shape of the cursor depends on the context area it is over. For example an I over text, a hand over a link, and so on&#8230;</td></tr><tr><td>2</td><td><strong>crosshair</strong>A crosshair or plus sign</td></tr><tr><td>3</td><td><strong>default</strong>An arrow</td></tr><tr><td>4</td><td><strong>pointer</strong>A pointing hand (in IE 4 this value is hand)</td></tr><tr><td>5</td><td><strong>move</strong>The I bar</td></tr><tr><td>6</td><td><strong>e-resize</strong>The cursor indicates that an edge of a box is to be moved right (east)</td></tr><tr><td>7</td><td><strong>ne-resize</strong>The cursor indicates that an edge of a box is to be moved up and right (north/east)</td></tr><tr><td>8</td><td><strong>nw-resize</strong>The cursor indicates that an edge of a box is to be moved up and left (north/west)</td></tr><tr><td>9</td><td><strong>n-resize</strong>The cursor indicates that an edge of a box is to be moved up (north)</td></tr><tr><td>10</td><td><strong>se-resize</strong>The cursor indicates that an edge of a box is to be moved down and right (south/east)</td></tr><tr><td>11</td><td><strong>sw-resize</strong>The cursor indicates that an edge of a box is to be moved down and left (south/west)</td></tr><tr><td>12</td><td><strong>s-resize</strong>The cursor indicates that an edge of a box is to be moved down (south)</td></tr><tr><td>13</td><td><strong>w-resize</strong>The cursor indicates that an edge of a box is to be moved left (west)</td></tr><tr><td>14</td><td><strong>text</strong>The I bar</td></tr><tr><td>15</td><td><strong>wait</strong>An hour glass</td></tr><tr><td>16</td><td><strong>help</strong>A question mark or balloon, ideal for use over help buttons</td></tr><tr><td>17</td><td><strong>&lt;url&gt;</strong>The source of a cursor image file</td></tr></tbody></table></figure>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− You should try to use only these values to add helpful information for users, and in places, they would expect to see that cursor. For example, using the crosshair when someone hovers over a link can confuse visitors.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p>Move the mouse over the words to see the cursor change:&lt;/p>\n      \n      &lt;div style = \"cursor:auto\">Auto&lt;/div>\n      &lt;div style = \"cursor:crosshair\">Crosshair&lt;/div>\n      &lt;div style = \"cursor:default\">Default&lt;/div>\n      \n      &lt;div style = \"cursor:pointer\">Pointer&lt;/div>\n      &lt;div style = \"cursor:move\">Move&lt;/div>\n      &lt;div style = \"cursor:e-resize\">e-resize&lt;/div>\n      &lt;div style = \"cursor:ne-resize\">ne-resize&lt;/div>\n      &lt;div style = \"cursor:nw-resize\">nw-resize&lt;/div>\n      \n      &lt;div style = \"cursor:n-resize\">n-resize&lt;/div>\n      &lt;div style = \"cursor:se-resize\">se-resize&lt;/div>\n      &lt;div style = \"cursor:sw-resize\">sw-resize&lt;/div>\n      &lt;div style = \"cursor:s-resize\">s-resize&lt;/div>\n      &lt;div style = \"cursor:w-resize\">w-resize&lt;/div>\n      \n      &lt;div style = \"cursor:text\">text&lt;/div>\n      &lt;div style = \"cursor:wait\">wait&lt;/div>\n      &lt;div style = \"cursor:help\">help&lt;/div>\n   &lt;/body>\n&lt;/html> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;cursor&nbsp;property of CSS allows you to specify the type of cursor that should be displayed to the user. One good usage of this property is in using images for submit buttons on forms. By default, when a cursor hovers over a link, the cursor changes from a pointer to a hand. However, it does not [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3978"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3978"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3978/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3978"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3978"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3978"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3979,
    "date": "2020-08-13T07:29:50",
    "date_gmt": "2020-08-13T07:29:50",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=103"
    },
    "modified": "2020-08-13T07:29:50",
    "modified_gmt": "2020-08-13T07:29:50",
    "slug": "css-outlines",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-outlines/",
    "title": {
      "rendered": "CSS &#8211; Outlines"
    },
    "content": {
      "rendered": "\n<p>Outlines are very similar to borders, but there are few major differences as well −</p>\n\n\n\n<ul><li>An outline does not take up space.</li><li>Outlines do not have to be rectangular.</li><li>Outline is always the same on all sides; you cannot specify different values for different sides of an element.</li></ul>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− The outline properties are not supported by IE 6 or Netscape 7.</p>\n\n\n\n<p>You can set the following outline properties using CSS.</p>\n\n\n\n<ul><li>The&nbsp;<strong>outline-width</strong>&nbsp;property is used to set the width of the outline.</li><li>The&nbsp;<strong>outline-style</strong>&nbsp;property is used to set the line style for the outline.</li><li>The&nbsp;<strong>outline-color</strong>&nbsp;property is used to set the color of the outline.</li><li>The&nbsp;<strong>outline</strong>&nbsp;property is used to set all the above three properties in a single statement.</li></ul>\n\n\n\n<h2>The outline-width Property</h2>\n\n\n\n<p>The&nbsp;<em>outline-width</em>&nbsp;property specifies the width of the outline to be added to the box. Its value should be a length or one of the values&nbsp;<em>thin, medium, or thick,</em>&nbsp;just like the border-width attribute.</p>\n\n\n\n<p>A width of zero pixels means no outline.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"outline-width:thin; outline-style:solid;\">\n         This text is having thin outline.\n      &lt;/p>\n      &lt;br />\n      \n      &lt;p style = \"outline-width:thick; outline-style:solid;\">\n         This text is having thick outline.\n      &lt;/p>\n      &lt;br />\n      \n      &lt;p style = \"outline-width:5px; outline-style:solid;\">\n         This text is having 5x outline.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The outline-style Property</h2>\n\n\n\n<p>The&nbsp;<em>outline-style</em>&nbsp;property specifies the style for the line (solid, dotted, or dashed) that goes around an element. It can take one of the following values −</p>\n\n\n\n<ul><li><strong>none</strong>&nbsp;− No border. (Equivalent of outline-width:0;)</li><li><strong>solid</strong>&nbsp;− Outline is a single solid line.</li><li><strong>dotted</strong>&nbsp;− Outline is a series of dots.</li><li><strong>dashed</strong>&nbsp;− Outline is a series of short lines.</li><li><strong>double</strong>&nbsp;− Outline is two solid lines.</li><li><strong>groove</strong>&nbsp;− Outline looks as though it is carved into the page.</li><li><strong>ridge</strong>&nbsp;− Outline looks the opposite of groove.</li><li><strong>inset</strong>&nbsp;− Outline makes the box look like it is embedded in the page.</li><li><strong>outset</strong>&nbsp;− Outline makes the box look like it is coming out of the canvas.</li><li><strong>hidden</strong>&nbsp;− Same as none.</li></ul>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"outline-width:thin; outline-style:solid;\">\n         This text is having thin solid  outline.\n      &lt;/p>\n      &lt;br />\n      \n      &lt;p style = \"outline-width:thick; outline-style:dashed;\">\n         This text is having thick dashed outline.\n      &lt;/p>\n      &lt;br />\n      \n      &lt;p style = \"outline-width:5px;outline-style:dotted;\">\n         This text is having 5x dotted outline.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The outline-color Property</h2>\n\n\n\n<p>The&nbsp;<em>outline-color</em>&nbsp;property allows you to specify the color of the outline. Its value should either be a color name, a hex color, or an RGB value, as with the color and border-color properties.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"outline-width:thin; outline-style:solid;outline-color:red\">\n         This text is having thin solid red  outline.\n      &lt;/p>\n      &lt;br />\n      \n      &lt;p style = \"outline-width:thick; outline-style:dashed;outline-color:#009900\">\n         This text is having thick dashed green outline.\n      &lt;/p>\n      &lt;br />\n      \n      &lt;p style = \"outline-width:5px;outline-style:dotted;outline-color:rgb(13,33,232)\">\n         This text is having 5x dotted blue outline.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The outline Property</h2>\n\n\n\n<p>The&nbsp;<em>outline</em>&nbsp;property is a shorthand property that allows you to specify values for any of the three properties discussed previously in any order but in a single statement.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p style = \"outline:thin solid red;\">\n         This text is having thin solid red outline.\n      &lt;/p>\n      &lt;br />\n      \n      &lt;p style = \"outline:thick dashed #009900;\">\n         This text is having thick dashed green outline.\n      &lt;/p>\n      &lt;br />\n      \n      &lt;p style = \"outline:5px dotted rgb(13,33,232);\">\n         This text is having 5x dotted blue outline.\n      &lt;/p>\n   &lt;/body>\n&lt;/html> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Outlines are very similar to borders, but there are few major differences as well − An outline does not take up space. Outlines do not have to be rectangular. Outline is always the same on all sides; you cannot specify different values for different sides of an element. NOTE&nbsp;− The outline properties are not supported [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3979"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3979"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3979/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3979"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3979"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3979"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2826,
    "date": "2020-08-13T07:34:22",
    "date_gmt": "2020-08-13T07:34:22",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=105"
    },
    "modified": "2020-08-13T07:34:22",
    "modified_gmt": "2020-08-13T07:34:22",
    "slug": "css-dimension",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-dimension/",
    "title": {
      "rendered": "CSS &#8211; Dimension"
    },
    "content": {
      "rendered": "\n<p>You have seen the border that surrounds every box ie. element, the padding that can appear inside each box and the margin that can go around them. In this tutorial we will learn how we can change the dimensions of boxes.</p>\n\n\n\n<p>We have the following properties that allow you to control the dimensions of a box.</p>\n\n\n\n<ul><li>The&nbsp;<strong>height</strong>&nbsp;property is used to set the height of a box.</li><li>The&nbsp;<strong>width</strong>&nbsp;property is used to set the width of a box.</li><li>The&nbsp;<strong>line-height</strong>&nbsp;property is used to set the height of a line of text.</li><li>The&nbsp;<strong>max-height</strong>&nbsp;property is used to set a maximum height that a box can be.</li><li>The&nbsp;<strong>min-height</strong>&nbsp;property is used to set the minimum height that a box can be.</li><li>The&nbsp;<strong>max-width</strong>&nbsp;property is used to set the maximum width that a box can be.</li><li>The&nbsp;<strong>min-width</strong>&nbsp;property is used to set the minimum width that a box can be.</li></ul>\n\n\n\n<h2>The Height and Width Properties</h2>\n\n\n\n<p>The&nbsp;<em>height</em>&nbsp;and&nbsp;<em>width</em>&nbsp;properties allow you to set the height and width for boxes. They can take values of a length, a percentage, or the keyword auto.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"width:400px; height:100px; border:1px solid red; padding:5px; margin:10px;\">\n         This paragraph is 400pixels wide and 100 pixels high\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The line-height Property</h2>\n\n\n\n<p>The&nbsp;<em>line-height</em>&nbsp;property allows you to increase the space between lines of text. The value of the line-height property can be a number, a length, or a percentage.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"width:400px; height:100px; border:1px solid red; padding:5px; margin:10px; line-height:30px;\">\n         This paragraph is 400pixels wide and 100 pixels high and here line height is 30pixels.\n         This paragraph is 400 pixels wide and 100 pixels high and here line height is 30pixels.\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The max-height Property</h2>\n\n\n\n<p>The&nbsp;<em>max-height</em>&nbsp;property allows you to specify maximum height of a box. The value of the max-height property can be a number, a length, or a percentage.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− This property does not work in either Netscape 7 or IE 6.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>  \n   &lt;body>\n      &lt;p style = \"width:400px; max-height:10px; border:1px solid red; padding:5px; margin:10px;\">\n         This paragraph is 400px wide and max height is 10px\n         This paragraph is 400px wide and max height is 10px\n         This paragraph is 400px wide and max height is 10px\n         This paragraph is 400px wide and max height is 10px\n      &lt;/p>\n      &lt;br>\n      &lt;br>\n      &lt;br>\n      &lt;img alt = \"logo\" src = \"/css/images/logo.png\" width = \"195\" height = \"84\" />\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The min-height Property</h2>\n\n\n\n<p>The&nbsp;<em>min-height</em>&nbsp;property allows you to specify minimum height of a box. The value of the min-height property can be a number, a length, or a percentage.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− This property does not work in either Netscape 7 or IE 6.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"width:400px; min-height:200px; border:1px solid red; padding:5px; margin:10px;\">\n         This paragraph is 400px wide and min height is 200px\n         This paragraph is 400px wide and min height is 200px\n         This paragraph is 400px wide and min height is 200px\n         This paragraph is 400px wide and min height is 200px\n      &lt;/p>\n      &lt;img alt = \"logo\" src = \"/css/images/logo.png\" width = \"95\" height = \"84\" />\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p>It will produce the following result −</p>\n\n\n\n<h2>The max-width Property</h2>\n\n\n\n<p>The&nbsp;<em>max-width</em>&nbsp;property allows you to specify maximum width of a box. The value of the max-width property can be a number, a length, or a percentage.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− This property does not work in either Netscape 7 or IE 6.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"max-width:100px; height:200px; border:1px solid red; padding:5px; margin:10px;\">\n         This paragraph is 200px high and max width is 100px\n         This paragraph is 200px high and max width is 100px\n         This paragraph is 200px high and max width is 100px\n         This paragraph is 200px high and max width is 100px\n         This paragraph is 200px high and max width is 100px\n      &lt;/p>\n      &lt;img alt = \"logo\" src = \"/images/css.gif\" width = \"95\" height = \"84\" />\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\">This will produce following result −</pre>\n\n\n\n<h2>The min-width Property</h2>\n\n\n\n<p>The&nbsp;<em>min-width</em>&nbsp;property allows you to specify minimum width of a box. The value of the min-width property can be a number, a length, or a percentage.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− This property does not work in either Netscape 7 or IE 6.</p>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p style = \"min-width:400px; height:100px; border:1px solid red; padding:5px; margin:10px;\">\n         This paragraph is 100px high and min width is 400px\n         This paragraph is 100px high and min width is 400px\n      &lt;/p>\n      &lt;img alt = \"logo\" src = \"/css/images/css.gif\" width = \"95\" height = \"84\" />\n   &lt;/body>\n&lt;/html> </code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You have seen the border that surrounds every box ie. element, the padding that can appear inside each box and the margin that can go around them. In this tutorial we will learn how we can change the dimensions of boxes. We have the following properties that allow you to control the dimensions of a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2826"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2826"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2826/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2826"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2826"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2826"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3980,
    "date": "2020-08-13T07:35:36",
    "date_gmt": "2020-08-13T07:35:36",
    "guid": {
      "rendered": "http://learncss.foobrdigital.com/?p=107"
    },
    "modified": "2020-08-13T07:35:36",
    "modified_gmt": "2020-08-13T07:35:36",
    "slug": "css-scrollbars",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/css-scrollbars/",
    "title": {
      "rendered": "CSS &#8211; Scrollbars"
    },
    "content": {
      "rendered": "\n<p>There may be a case when an element&#8217;s content might be larger than the amount of space allocated to it. For example, given width and height properties do not allow enough room to accommodate the content of the element.</p>\n\n\n\n<p>CSS provides a property called&nbsp;<em>overflow</em>&nbsp;which tells the browser what to do if the box&#8217;s contents is larger than the box itself. This property can take one of the following values −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Value &amp; Description</th></tr><tr><td>1</td><td><strong>visible</strong>Allows the content to overflow the borders of its containing element.</td></tr><tr><td>2</td><td><strong>hidden</strong>The content of the nested element is simply cut off at the border of the containing element and no scrollbars is visible.</td></tr><tr><td>3</td><td><strong>scroll</strong>The size of the containing element does not change, but the scrollbars are added to allow the user to scroll to see the content.</td></tr><tr><td>4</td><td><strong>auto</strong>The purpose is the same as scroll, but the scrollbar will be shown only if the content does overflow.</td></tr></tbody></table></figure>\n\n\n\n<p>Here is an example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;style type = \"text/css\">\n         .scroll {\n            display:block;\n            border: 1px solid red;\n            padding:5px;\n            margin-top:5px;\n            width:300px;\n            height:50px;\n            overflow:scroll;\n         }\n         .auto {\n            display:block;\n            border: 1px solid red;\n            padding:5px;\n            margin-top:5px;\n            width:300px;\n            height:50px;\n            overflow:auto;\n         }\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;p>Example of scroll value:&lt;/p>\n      &lt;div class = \"scroll\">\n         I am going to keep lot of content here just to show you how \n         scrollbars works if there is an overflow in an element box. \n         This provides your horizontal as well as vertical scrollbars.\n      &lt;/div>\n      &lt;br />\n      \n      &lt;p>Example of auto value:&lt;/p>\n      \n      &lt;div class = \"auto\">\n         I am going to keep lot of content here just to show you how \n         scrollbars works if there is an overflow in an element box. \n         This provides your horizontal as well as vertical scrollbars.\n      &lt;/div>\n   &lt;/body>\n&lt;/html> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There may be a case when an element&#8217;s content might be larger than the amount of space allocated to it. For example, given width and height properties do not allow enough room to accommodate the content of the element. CSS provides a property called&nbsp;overflow&nbsp;which tells the browser what to do if the box&#8217;s contents is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      47,
      15
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3980"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3980"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3980/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3980"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3980"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3980"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]