[
    {
        "id": 118,
        "date": "2020-05-27T08:46:20",
        "date_gmt": "2020-05-27T08:46:20",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=118"
        },
        "modified": "2020-05-27T08:46:20",
        "modified_gmt": "2020-05-27T08:46:20",
        "slug": "install-node-js",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/install-node-js\/",
        "title": {
            "rendered": "Install Node.js"
        },
        "content": {
            "rendered": "\n<h4 id=\"install-node\">Install Node<\/h4>\n\n\n\n<ol><li>Open your Terminal<\/li><li>Install node with Homebrew:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>brew install node<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#x1f4a1; If you don\u2019t want to install it through Homebrew, download the latest Node.js version from&nbsp;the official Node.js website, double click on the downloaded file and go through the installation process.<\/p><\/blockquote>\n\n\n\n<h3 id=\"windows-instructions\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#windows-instructions\"><\/a>Windows Instructions<\/h3>\n\n\n\n<ul><li>Download and install the latest Node.js version from&nbsp;the official Node.js website<\/li><\/ul>\n\n\n\n<h3 id=\"linux-instructions\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#linux-instructions\"><\/a>Linux Instructions<\/h3>\n\n\n\n<p>Install nvm (Node Version Manager) and needed dependencies. nvm is used to manage Node.js and all its associated versions.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#x1f4a1; When installing a package, if it asks for confirmation, type&nbsp;<code>y<\/code>&nbsp;and press enter.<\/p><\/blockquote>\n\n\n\n<p>Select your distro:<\/p>\n\n\n\n<ul><li>Ubuntu, Debian, and other apt based distros<\/li><li>Arch, Manjaro and other pacman based distros<\/li><li>Fedora, RedHat, and other dnf based distros<\/li><\/ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#x1f4a1; If the Linux distribution you are using is not listed here, please find instructions on the web.<\/p><\/blockquote>\n\n\n\n<h4 id=\"ubuntu-debian-and-other-apt-based-distros\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#ubuntu-debian-and-other-apt-based-distros\"><\/a>Ubuntu, Debian, and other&nbsp;<code>apt<\/code>&nbsp;based distros:<\/h4>\n\n\n\n<ol><li>Make sure your Linux distribution is ready to go run an update and an upgrade:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt update\nsudo apt -y upgrade<\/code><\/pre>\n\n\n\n<ol start=\"2\"><li>Install curl which allows you to transfer data and download additional dependencies:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install curl<\/code><\/pre>\n\n\n\n<ol start=\"3\"><li>After it finishes installing, download the latest nvm version:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -o- https:\/\/raw.githubusercontent.com\/nvm-sh\/nvm\/v0.35.1\/install.sh | bash<\/code><\/pre>\n\n\n\n<ol start=\"4\"><li>Confirm this has worked. The output should be a version number.<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>nvm --version<\/code><\/pre>\n\n\n\n<ol start=\"5\"><li>Continue with the section:&nbsp;Set default Node.js version<\/li><\/ol>\n\n\n\n<h4 id=\"arch-manjaro-and-other-pacman-based-distros\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#arch-manjaro-and-other-pacman-based-distros\"><\/a>Arch, Manjaro and other&nbsp;<code>pacman<\/code>&nbsp;based distros:<\/h4>\n\n\n\n<ol><li>Make sure your distribution is ready to go:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo pacman -Sy<\/code><\/pre>\n\n\n\n<ol start=\"2\"><li>These distros come installed with curl, so you can use that to download nvm:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -o- https:\/\/raw.githubusercontent.com\/nvm-sh\/nvm\/v0.35.1\/install.sh | bash<\/code><\/pre>\n\n\n\n<ol start=\"3\"><li>Before using nvm, you need to install additional dependencies by running:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo pacman -S grep awk tar<\/code><\/pre>\n\n\n\n<ol start=\"4\"><li>Confirm this has worked. The output should be a version number.<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>nvm --version<\/code><\/pre>\n\n\n\n<ol start=\"5\"><li>Continue with the section:&nbsp;Set default Node.js version<\/li><\/ol>\n\n\n\n<h4 id=\"fedora-redhat-and-other-dnf-based-distros\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#fedora-redhat-and-other-dnf-based-distros\"><\/a>Fedora, RedHat, and other&nbsp;<code>dnf<\/code>&nbsp;based distros:<\/h4>\n\n\n\n<ol><li>These distros come installed with curl, so you can use that to download nvm:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -o- https:\/\/raw.githubusercontent.com\/nvm-sh\/nvm\/v0.35.1\/install.sh | bash<\/code><\/pre>\n\n\n\n<ol start=\"2\"><li>Confirm this has worked. The output should be a version number.<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>nvm --version<\/code><\/pre>\n\n\n\n<ol start=\"3\"><li>Continue with the section:&nbsp;Set default Node.js version<\/li><\/ol>\n\n\n\n<h4 id=\"set-default-nodejs-version\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#set-default-nodejs-version\"><\/a>Set default Node.js version<\/h4>\n\n\n\n<p>When nvm is installed, it does not default to a particular node version. You\u2019ll need to install the version you want and give nvm instructions to use it. This example uses the version 10 release, but more recent version numbers can be used instead.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>nvm install 10nvm use 10<\/code><\/pre>\n\n\n\n<p>Confirm that this worked:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm --versionnode --version<\/code><\/pre>\n\n\n\n<p>The output should look similar to the screenshot below, showing version numbers in response to the commands.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/71e043f06cc476acc6722818e647e517\/f8915\/01-node-npm-versions.png\" alt=\"Check node and npm versions in terminal\" title=\"Check node and npm versions in terminal\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/71e043f06cc476acc6722818e647e517\/f8915\/01-node-npm-versions.png\"><\/a><\/p>\n\n\n\n<p>Once you have followed the installation steps and you have checked everything is installed properly, you can continue to the next step.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Install Node Open your Terminal Install node with Homebrew: &#x1f4a1; If you don\u2019t want to install it through Homebrew, download the latest Node.js version from&nbsp;the official Node.js website, double click on the downloaded file and go through the installation process. Windows Instructions Download and install the latest Node.js version from&nbsp;the official Node.js website Linux Instructions&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/install-node-js\/\">Continue reading <span class=\"screen-reader-text\">Install Node.js<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 557,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/118"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=118"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/118\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/557"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=118"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=118"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=118"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 119,
        "date": "2020-05-27T08:48:28",
        "date_gmt": "2020-05-27T08:48:28",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=119"
        },
        "modified": "2020-05-27T08:48:28",
        "modified_gmt": "2020-05-27T08:48:28",
        "slug": "install-git",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/install-git\/",
        "title": {
            "rendered": "Install Git"
        },
        "content": {
            "rendered": "\n<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. When you install a Gatsby \u201cstarter\u201d site, Gatsby uses Git behind the scenes to download and install the required files for your starter. You will need to have Git installed to set up your first Gatsby site.<\/p>\n\n\n\n<p>The steps to download and install Git depend on your operating system. Follow the guide for your system:<\/p>\n\n\n\n<ul><li>Install Git on macOS<\/li><li>Install Git on Windows<\/li><li>Install Git on Linux<\/li><\/ul>\n\n\n\n<h2 id=\"using-the-gatsby-cli\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#using-the-gatsby-cli\"><\/a>Using the Gatsby CLI<\/h2>\n\n\n\n<p>The Gatsby CLI tool lets you quickly create new Gatsby-powered sites and run commands for developing Gatsby sites. It is a published npm package.<\/p>\n\n\n\n<p>The Gatsby CLI is available via npm and should be installed globally by running:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g gatsby-cli<\/code><\/pre>\n\n\n\n<p><em><strong>Note<\/strong>: when you install Gatsby and run it for the first time, you\u2019ll see a short message notifying you about anonymous usage data that is being collected for Gatsby commands, you can read more about how that data is pulled out and used in the&nbsp;telemetry doc.<\/em><\/p>\n\n\n\n<p>See the available commands:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby --help<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/fac15c37d0c4e262ae8a3e4dcdf9251f\/748f4\/05-gatsby-help.png\" alt=\"Check gatsby commands in terminal\" title=\"Check gatsby commands in terminal\"\/><\/figure>\n\n\n\n<p><a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https:\/\/www.gatsbyjs.org\/static\/fac15c37d0c4e262ae8a3e4dcdf9251f\/748f4\/05-gatsby-help.png\"><\/a>If you are unable to successfully run the Gatsby CLI due to a permissions issue, you may want to check out the&nbsp;npm docs on fixing permissions, or&nbsp;this guide.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. When you install a Gatsby \u201cstarter\u201d site, Gatsby uses Git behind the scenes to download and install the required files for your starter. You will need to have Git installed&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/install-git\/\">Continue reading <span class=\"screen-reader-text\">Install Git<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 558,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/119"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=119"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/119\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=119"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=119"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=119"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4768,
        "date": "2020-05-27T08:53:30",
        "date_gmt": "2020-05-27T08:53:30",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=120"
        },
        "modified": "2020-05-27T08:53:30",
        "modified_gmt": "2020-05-27T08:53:30",
        "slug": "create-a-gatsby-site",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/create-a-gatsby-site\/",
        "title": {
            "rendered": "Create a Gatsby site"
        },
        "content": {
            "rendered": "\n<p>Now you are ready to use the Gatsby CLI tool to create your first Gatsby site. Using the tool, you can download \u201cstarters\u201d (partially built sites with some default configuration) to help you get moving faster on creating a certain type of site. The \u201cHello World\u201d starter you\u2019ll be using here is a starter with the bare essentials needed for a Gatsby site.<\/p>\n\n\n\n<ol><li>Open up your terminal.<\/li><li>Create a new site from a starter:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>gatsby new hello-world https:\/\/github.com\/gatsbyjs\/gatsby-starter-hello-world<\/code><\/pre>\n\n\n\n<p>What just happened?<\/p>\n\n\n\n<ul><li><code>new<\/code>&nbsp;is a gatsby command to create a new Gatsby project.<\/li><li>Here,&nbsp;<code>hello-world<\/code>&nbsp;is an arbitrary title \u2014 you could pick anything. The CLI tool will place the code for your new site in a new folder called \u201chello-world\u201d.<\/li><li>Lastly, the GitHub URL specified points to a code repository that holds the starter code you want to use.<\/li><\/ul>\n\n\n\n<p>Depending on your download speed, the amount of time this takes will vary. For brevity\u2019s sake, the gif below was paused during part of the install<\/p>\n\n\n\n<ol start=\"3\"><li>Change into the working directory:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>cd hello-world<\/code><\/pre>\n\n\n\n<p>This says&nbsp;<em>\u2018I want to change directories (<code>cd<\/code>) to the \u201chello-world\u201d subfolder\u2019<\/em>. Whenever you want to run any commands for your site, you need to be in the context for that site (aka, your terminal needs to be pointed at the directory where your site code lives)<\/p>\n\n\n\n<ol start=\"4\"><li>Start the development mode:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby develop<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code> This command starts a development server. You will be able to see and interact with your new site in a development environment \u2014 local (on your computer, not published to the internet).<\/code><\/pre>\n\n\n\n<h3 id=\"view-your-site-locally\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#view-your-site-locally\"><\/a>View your site locally<\/h3>\n\n\n\n<p>Open up a new tab in your browser and navigate to&nbsp;<code>http:\/\/localhost:8000\/<\/code><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/057f454229859b1752c44dba1580984e\/321ea\/04-home-page.png\" alt=\"Check homepage\" title=\"Check homepage\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/057f454229859b1752c44dba1580984e\/a8c87\/04-home-page.png\"><\/a><\/p>\n\n\n\n<p>Congrats! This is the beginning of your very first Gatsby site! &#x1f389;<\/p>\n\n\n\n<p>You\u2019ll be able to visit the site locally at&nbsp;<code>http:\/\/localhost:8000\/<\/code>&nbsp;for as long as your development server is running. That\u2019s the process you started by running the&nbsp;<code>gatsby develop<\/code>&nbsp;command. To stop running that process (or to \u201cstop running the development server\u201d), go back to your terminal window, hold down the \u201ccontrol\u201d key, and then hit \u201cc\u201d (ctrl-c). To start it again, run&nbsp;<code>gatsby develop<\/code>&nbsp;again!<\/p>\n\n\n\n<p><em><strong>Note:<\/strong>&nbsp;If you are using VM setup like&nbsp;<code>vagrant<\/code>&nbsp;and\/or would like to listen on your local IP address, run&nbsp;<code>gatsby develop --host=0.0.0.0<\/code>. Now, the development server listens on both&nbsp;<code>http:\/\/localhost<\/code>&nbsp;and your local IP.<\/em><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Now you are ready to use the Gatsby CLI tool to create your first Gatsby site. Using the tool, you can download \u201cstarters\u201d (partially built sites with some default configuration) to help you get moving faster on creating a certain type of site. The \u201cHello World\u201d starter you\u2019ll be using here is a starter with&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/create-a-gatsby-site\/\">Continue reading <span class=\"screen-reader-text\">Create a Gatsby site<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 569,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4768"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4768"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4768\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4768"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4768"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4768"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4769,
        "date": "2020-05-27T08:56:15",
        "date_gmt": "2020-05-27T08:56:15",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=121"
        },
        "modified": "2020-05-27T08:56:15",
        "modified_gmt": "2020-05-27T08:56:15",
        "slug": "set-up-a-code-editor",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/set-up-a-code-editor\/",
        "title": {
            "rendered": "Set up a code editor"
        },
        "content": {
            "rendered": "\n<p>A code editor is a program designed specifically for editing computer code. There are many great ones out there.<\/p>\n\n\n\n<h3 id=\"download-vs-code\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#download-vs-code\"><\/a>Download VS Code<\/h3>\n\n\n\n<p>Gatsby documentation sometimes includes screenshots that were taken in VS Code, so if you don\u2019t have a preferred code editor yet, using VS Code will make sure that your screen looks just like the screenshots in the tutorial and docs. If you choose to use VS Code, visit the&nbsp;VS Code site&nbsp;and download the version appropriate for your platform.<\/p>\n\n\n\n<h3 id=\"install-the-prettier-plugin\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-zero\/#install-the-prettier-plugin\"><\/a>Install the Prettier plugin<\/h3>\n\n\n\n<p>We also recommend using&nbsp;Prettier, a tool that helps format your code to avoid errors.<\/p>\n\n\n\n<p>You can use Prettier directly in your editor using the&nbsp;Prettier VS Code plugin:<\/p>\n\n\n\n<ol><li>Open the extensions view on VS Code (View =&gt; Extensions).<\/li><li>Search for \u201cPrettier &#8211; Code formatter\u201d.<\/li><li>Click \u201cInstall\u201d. (After installation, you\u2019ll be prompted to restart VS Code to enable the extension. Newer versions of VS Code will automatically enable the extension after download.)<\/li><\/ol>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A code editor is a program designed specifically for editing computer code. There are many great ones out there. Download VS Code Gatsby documentation sometimes includes screenshots that were taken in VS Code, so if you don\u2019t have a preferred code editor yet, using VS Code will make sure that your screen looks just like&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/set-up-a-code-editor\/\">Continue reading <span class=\"screen-reader-text\">Set up a code editor<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 570,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4769"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4769"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4769\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4769"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4769"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4769"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4770,
        "date": "2020-05-27T08:58:54",
        "date_gmt": "2020-05-27T08:58:54",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=122"
        },
        "modified": "2020-05-27T08:58:54",
        "modified_gmt": "2020-05-27T08:58:54",
        "slug": "using-gatsby-starters",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/using-gatsby-starters\/",
        "title": {
            "rendered": "Using Gatsby starters"
        },
        "content": {
            "rendered": "\n<p>In&nbsp;<strong>tutorial part zero<\/strong>, you created a new site based on the \u201chello world\u201d starter using the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby new hello-world https:\/\/github.com\/gatsbyjs\/gatsby-starter-hello-world<\/code><\/pre>\n\n\n\n<p>When creating a new Gatsby site, you can use the following command structure to create a new site based on any existing Gatsby starter:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby new &#91;SITE_DIRECTORY_NAME] &#91;URL_OF_STARTER_GITHUB_REPO]<\/code><\/pre>\n\n\n\n<p>If you omit a URL from the end, Gatsby will automatically generate a site for you based on the&nbsp;<strong>default starter<\/strong>. For this section of the tutorial, stick with the \u201cHello World\u201d site you already created in tutorial part zero. You can learn more about&nbsp;modifying starters&nbsp;in the docs.<\/p>\n\n\n\n<h3 id=\"-open-up-the-code\"> Open up the code<\/h3>\n\n\n\n<p>In your code editor, open up the code generated for your \u201cHello World\u201d site and take a look at the different directories and files contained in the \u2018hello-world\u2019 directory. It should look something like this:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/6fd22a2eaed057cc2692ac3a86404864\/cab8c\/01-hello-world-vscode.png\" alt=\"Hello World project in VS Code\" title=\"Hello World project in VS Code\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/6fd22a2eaed057cc2692ac3a86404864\/cab8c\/01-hello-world-vscode.png\"><\/a><\/p>\n\n\n\n<p><em>Note: Again, the editor shown here is Visual Studio Code. If you\u2019re using a different editor, it will look a little different.<\/em><\/p>\n\n\n\n<p>Let\u2019s take a look at the code that powers the homepage.<\/p>\n\n\n\n<p> If you stopped your development server after running&nbsp;<code>gatsby develop<\/code>&nbsp;in the previous section, start it up again now \u2014 time to make some changes to the hello-world site!<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In&nbsp;tutorial part zero, you created a new site based on the \u201chello world\u201d starter using the following command: When creating a new Gatsby site, you can use the following command structure to create a new site based on any existing Gatsby starter: If you omit a URL from the end, Gatsby will automatically generate a&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/using-gatsby-starters\/\">Continue reading <span class=\"screen-reader-text\">Using Gatsby starters<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 573,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4770"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4770"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4770\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4770"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4770"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4770"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4771,
        "date": "2020-05-27T09:24:50",
        "date_gmt": "2020-05-27T09:24:50",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=132"
        },
        "modified": "2020-05-27T09:24:50",
        "modified_gmt": "2020-05-27T09:24:50",
        "slug": "familiarizing-with-gatsby-pages",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/familiarizing-with-gatsby-pages\/",
        "title": {
            "rendered": "Familiarizing with Gatsby pages"
        },
        "content": {
            "rendered": "\n<p>Open up the&nbsp;<code>\/src<\/code>&nbsp;directory in your code editor. Inside is a single directory:&nbsp;<code>\/pages<\/code>.<\/p>\n\n\n\n<p>Open the file at&nbsp;<code>src\/pages\/index.js<\/code>. The code in this file creates a component that contains a single div and some text \u2014 appropriately, \u201cHello world!\u201d<\/p>\n\n\n\n<h3 id=\"-make-changes-to-the-hello-world-homepage\"> Make changes to the \u201cHello World\u201d homepage<\/h3>\n\n\n\n<ol><li>Change the \u201cHello World!\u201d text to \u201cHello Gatsby!\u201d and save the file. If your windows are side-by-side, you can see that your code and content changes are reflected almost instantly in the browser after you save the file.<\/li><\/ol>\n\n\n\n<p>Gatsby uses&nbsp;<strong>hot reloading<\/strong>&nbsp;to speed up your development process. Essentially, when you\u2019re running a Gatsby development server, the Gatsby site files are being \u201cwatched\u201d in the background \u2014 any time you save a file, your changes will be immediately reflected in the browser. You don\u2019t need to hard refresh the page or restart the development server \u2014 your changes just appear.<\/p>\n\n\n\n<ol start=\"2\"><li>Now you can make your changes a little more visible. Try replacing the code in&nbsp;<code>src\/pages\/index.js<\/code>&nbsp;with the code below and save again. You\u2019ll see changes to the text \u2014 the text color will be purple and the font size will be larger.<\/li><\/ol>\n\n\n\n<p>src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Home() {  return &lt;div style={{ color: `purple`, fontSize: `72px` }}>Hello Gatsby!&lt;\/div>}<\/code><\/pre>\n\n\n\n<p>We\u2019ll be covering more about styling in Gatsby in&nbsp;<strong>part two<\/strong>&nbsp;of the tutorial.<\/p>\n\n\n\n<ol start=\"3\"><li>Remove the font size styling, change the \u201cHello Gatsby!\u201d text to a level-one header, and add a paragraph beneath the header.<\/li><\/ol>\n\n\n\n<p>src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Home() {  return (    &lt;div style={{ color: `purple` }}>      &lt;h1>Hello Gatsby!&lt;\/h1>      &lt;p>What a world.&lt;\/p>    &lt;\/div>  );}<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/738f82e862eca8d878d19de628291f67\/321ea\/03-more-hot-reloading.png\" alt=\"More changes with hot reloading\" title=\"More changes with hot reloading\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/738f82e862eca8d878d19de628291f67\/6fcb6\/03-more-hot-reloading.png\"><\/a><\/p>\n\n\n\n<ol start=\"4\"><li>Add an image. (In this case, a random image from Unsplash).<\/li><\/ol>\n\n\n\n<p>src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Home() {  return (    &lt;div style={{ color: `purple` }}>      &lt;h1>Hello Gatsby!&lt;\/h1>      &lt;p>What a world.&lt;\/p>      &lt;img src=\"https:\/\/source.unsplash.com\/random\/400x200\" alt=\"\" \/>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/ae64a18bc63a9713d0a88f2570abe0dc\/321ea\/04-add-image.png\" alt=\"Add image\" title=\"Add image\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/ae64a18bc63a9713d0a88f2570abe0dc\/891d5\/04-add-image.png\"><\/a><\/p>\n\n\n\n<h3 id=\"wait-html-in-our-javascript\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-one\/#wait-html-in-our-javascript\"><\/a>Wait\u2026 HTML in our JavaScript?<\/h3>\n\n\n\n<p><em>If you\u2019re familiar with React and JSX, feel free to skip this section.<\/em>&nbsp;If you haven\u2019t worked with the React framework before, you may be wondering what HTML is doing in a JavaScript function. Or why we\u2019re importing&nbsp;<code>react<\/code>&nbsp;on the first line but seemingly not using it anywhere. This hybrid \u201cHTML-in-JS\u201d is actually a syntax extension of JavaScript, for React, called JSX. You can follow along with this tutorial without prior experience with React, but if you\u2019re curious, here\u2019s a brief primer\u2026<\/p>\n\n\n\n<p>Consider the original contents of the&nbsp;<code>src\/pages\/index.js<\/code>&nbsp;file:src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Home() {  return &lt;div>Hello world!&lt;\/div>}<\/code><\/pre>\n\n\n\n<p>In pure JavaScript, it looks more like this:src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Home() {  return React.createElement(\"div\", null, \"Hello world!\")}<\/code><\/pre>\n\n\n\n<p>Now you can spot the use of the&nbsp;<code>'react'<\/code>&nbsp;import! But wait. You\u2019re writing JSX, not pure HTML and JavaScript. How does the browser read that? The short answer: It doesn\u2019t. Gatsby sites come with tooling already set up to convert your source code into something that browsers can interpret.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Open up the&nbsp;\/src&nbsp;directory in your code editor. Inside is a single directory:&nbsp;\/pages. Open the file at&nbsp;src\/pages\/index.js. The code in this file creates a component that contains a single div and some text \u2014 appropriately, \u201cHello world!\u201d Make changes to the \u201cHello World\u201d homepage Change the \u201cHello World!\u201d text to \u201cHello Gatsby!\u201d and save the file.&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/familiarizing-with-gatsby-pages\/\">Continue reading <span class=\"screen-reader-text\">Familiarizing with Gatsby pages<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 562,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4771"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4771"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4771\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/562"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4771"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4771"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4771"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 133,
        "date": "2020-05-27T09:30:37",
        "date_gmt": "2020-05-27T09:30:37",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=133"
        },
        "modified": "2020-05-27T09:30:37",
        "modified_gmt": "2020-05-27T09:30:37",
        "slug": "building-with-components",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/building-with-components\/",
        "title": {
            "rendered": "Building with components"
        },
        "content": {
            "rendered": "\n<p>The homepage you were just making edits to was created by defining a page component. What exactly is a \u201ccomponent\u201d?<\/p>\n\n\n\n<p>Broadly defined, a component is a building block for your site; It is a self-contained piece of code that describes a section of UI (user interface).<\/p>\n\n\n\n<p>Gatsby is built on React. When we talk about using and defining&nbsp;<strong>components<\/strong>, we are really talking about&nbsp;<strong>React components<\/strong>&nbsp;\u2014 self-contained pieces of code (usually written with JSX) that can accept input and return React elements describing a section of UI.<\/p>\n\n\n\n<p>One of the big mental shifts you make when starting to build with components (if you are already a developer) is that now your CSS, HTML, and JavaScript are tightly coupled and often living even within the same file.<\/p>\n\n\n\n<p>While a seemingly simple change, this has profound implications for how you think about building websites.<\/p>\n\n\n\n<p>Take the example of creating a custom button. In the past, you would create a CSS class (perhaps&nbsp;<code>.primary-button<\/code>) with your custom styles and then use it whenever you want to apply those styles. For example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button class=\"primary-button\">Click me&lt;\/button><\/code><\/pre>\n\n\n\n<p>In the world of components, you instead create a&nbsp;<code>PrimaryButton<\/code>&nbsp;component with your button styles and use it throughout your site like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;PrimaryButton>Click me&lt;\/PrimaryButton><\/code><\/pre>\n\n\n\n<p>Components become the base building blocks of your site. Instead of being limited to the building blocks the browser provides, e.g.&nbsp;<code>&lt;button \/&gt;<\/code>, you can easily create new building blocks that elegantly meet the needs of your projects.<\/p>\n\n\n\n<h3 id=\"-using-page-components\"> Using page components<\/h3>\n\n\n\n<p>Any React component defined in&nbsp;<code>src\/pages\/*.js<\/code>&nbsp;will automatically become a page. Let\u2019s see this in action.<\/p>\n\n\n\n<p>You already have a&nbsp;<code>src\/pages\/index.js<\/code>&nbsp;file that came with the \u201cHello World\u201d starter. Let\u2019s create an about page.<\/p>\n\n\n\n<ol><li>Create a new file at&nbsp;<code>src\/pages\/about.js<\/code>, copy the following code into the new file, and save.<\/li><\/ol>\n\n\n\n<p>src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function About() {  return (    &lt;div style={{ color: `teal` }}>      &lt;h1>About Gatsby&lt;\/h1>      &lt;p>Such wow. Very React.&lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<ol start=\"2\"><li>Navigate to&nbsp;<code>http:\/\/localhost:8000\/about\/<\/code><\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/ff70fd3cbfd3a0e931b899ca245322fc\/f1d1f\/05-about-page.png\" alt=\"New about page\" title=\"New about page\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/ff70fd3cbfd3a0e931b899ca245322fc\/f1d1f\/05-about-page.png\"><\/a><\/p>\n\n\n\n<p>Just by putting a React component in the&nbsp;<code>src\/pages\/about.js<\/code>&nbsp;file, you now have a page accessible at&nbsp;<code>\/about<\/code>.<\/p>\n\n\n\n<h3 id=\"-using-sub-components\">Using sub-components<\/h3>\n\n\n\n<p>Let\u2019s say the homepage and the about page both got quite large and you were rewriting a lot of things. You can use sub-components to break the UI into reusable pieces. Both of your pages have&nbsp;<code>&lt;h1&gt;<\/code>&nbsp;headers \u2014 create a component that will describe a&nbsp;<code>Header<\/code>.<\/p>\n\n\n\n<ol><li>Create a new directory at&nbsp;<code>src\/components<\/code>&nbsp;and a file within that directory called&nbsp;<code>header.js<\/code>.<\/li><li>Add the following code to the new&nbsp;<code>src\/components\/header.js<\/code>&nbsp;file.<\/li><\/ol>\n\n\n\n<p>src\/components\/header.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Header() {  return &lt;h1>This is a header.&lt;\/h1>}<\/code><\/pre>\n\n\n\n<ol start=\"3\"><li>Modify the&nbsp;<code>about.js<\/code>&nbsp;file to import the&nbsp;<code>Header<\/code>&nbsp;component. Replace the&nbsp;<code>h1<\/code>&nbsp;markup with&nbsp;<code>&lt;Header \/&gt;<\/code>:<\/li><\/ol>\n\n\n\n<p>src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import Header from \"..\/components\/header\"export default function About() {  return (    &lt;div style={{ color: `teal` }}>      &lt;Header \/>      &lt;p>Such wow. Very React.&lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/ff64a1f15ebbe5e1f1aad740d0686ff7\/321ea\/06-header-component.png\" alt=\"Adding Header component\" title=\"Adding Header component\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/ff64a1f15ebbe5e1f1aad740d0686ff7\/fb4e7\/06-header-component.png\"><\/a><\/p>\n\n\n\n<p>In the browser, the \u201cAbout Gatsby\u201d header text should now be replaced with \u201cThis is a header.\u201d But you don\u2019t want the \u201cAbout\u201d page to say \u201cThis is a header.\u201d You want it to say, \u201cAbout Gatsby\u201d.<\/p>\n\n\n\n<ol start=\"4\"><li>Head back to&nbsp;<code>src\/components\/header.js<\/code>&nbsp;and make the following change:<\/li><\/ol>\n\n\n\n<p>src\/components\/header.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Header(props) {  return &lt;h1>{props.headerText}&lt;\/h1>}<\/code><\/pre>\n\n\n\n<ol start=\"5\"><li>Head back to&nbsp;<code>src\/pages\/about.js<\/code>&nbsp;and make the following change:<\/li><\/ol>\n\n\n\n<p>src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import Header from \"..\/components\/header\"export default function About() {  return (    &lt;div style={{ color: `teal` }}>      &lt;Header headerText=\"About Gatsby\" \/>      &lt;p>Such wow. Very React.&lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/a7da09d0252e86518be87c3608bb1c85\/321ea\/07-pass-data-header.png\" alt=\"Passing data to header\" title=\"Passing data to header\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/a7da09d0252e86518be87c3608bb1c85\/f2b95\/07-pass-data-header.png\"><\/a><\/p>\n\n\n\n<p>You should now see your \u201cAbout Gatsby\u201d header text again!<\/p>\n\n\n\n<h3 id=\"what-are-props\">What are \u201cprops\u201d?<\/h3>\n\n\n\n<p>Earlier, you defined React components as reusable pieces of code describing a UI. To make these reusable pieces dynamic you need to be able to supply them with different data. You do that with input called \u201cprops\u201d. Props are (appropriately enough) properties supplied to React components.<\/p>\n\n\n\n<p>In&nbsp;<code>about.js<\/code>&nbsp;you passed a&nbsp;<code>headerText<\/code>&nbsp;prop with the value of&nbsp;<code>\"About Gatsby\"<\/code>&nbsp;to the imported&nbsp;<code>Header<\/code>&nbsp;sub-component:src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Header headerText=\"About Gatsby\" \/><\/code><\/pre>\n\n\n\n<p>Over in&nbsp;<code>header.js<\/code>, the header component expects to receive the&nbsp;<code>headerText<\/code>&nbsp;prop (because you\u2019ve written it to expect that). So you can access it like so:src\/components\/header.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>{props.headerText}&lt;\/h1><\/code><\/pre>\n\n\n\n<p> In JSX, you can embed any JavaScript expression by wrapping it with&nbsp;<code>{}<\/code>. This is how you can access the&nbsp;<code>headerText<\/code>&nbsp;property (or \u201cprop!\u201d) from the \u201cprops\u201d object.<\/p>\n\n\n\n<p>If you had passed another prop to your&nbsp;<code>&lt;Header \/&gt;<\/code>&nbsp;component, like so\u2026src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Header headerText=\"About Gatsby\" arbitraryPhrase=\"is arbitrary\" \/><\/code><\/pre>\n\n\n\n<p>\u2026you would have been able to also access the&nbsp;<code>arbitraryPhrase<\/code>&nbsp;prop:&nbsp;<code>{props.arbitraryPhrase}<\/code>.<\/p>\n\n\n\n<ol start=\"6\"><li>To emphasize how this makes your components reusable, add an extra&nbsp;<code>&lt;Header \/&gt;<\/code>&nbsp;component to the about page, add the following code to the&nbsp;<code>src\/pages\/about.js<\/code>&nbsp;file, and save.<\/li><\/ol>\n\n\n\n<p>src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import Header from \"..\/components\/header\"export default function About() {  return (    &lt;div style={{ color: `teal` }}>      &lt;Header headerText=\"About Gatsby\" \/>      &lt;Header headerText=\"It's pretty cool\" \/>      &lt;p>Such wow. Very React.&lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/439851d3a4ba8a727b4c07abefce54a9\/321ea\/08-duplicate-header.png\" alt=\"Duplicate header to show reusability\" title=\"Duplicate header to show reusability\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/439851d3a4ba8a727b4c07abefce54a9\/891d5\/08-duplicate-header.png\"><\/a><\/p>\n\n\n\n<p>And there you have it; A second header \u2014 without rewriting any code \u2014 by passing different data using props.<\/p>\n\n\n\n<h3 id=\"using-layout-components\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-one\/#using-layout-components\"><\/a>Using layout components<\/h3>\n\n\n\n<p>Layout components are for sections of a site that you want to share across multiple pages. For example, Gatsby sites will commonly have a layout component with a shared header and footer. Other common things to add to layouts include a sidebar and\/or a navigation menu.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The homepage you were just making edits to was created by defining a page component. What exactly is a \u201ccomponent\u201d? Broadly defined, a component is a building block for your site; It is a self-contained piece of code that describes a section of UI (user interface). Gatsby is built on React. When we talk about&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/building-with-components\/\">Continue reading <span class=\"screen-reader-text\">Building with components<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 563,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/133"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=133"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/133\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=133"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=133"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=133"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4772,
        "date": "2020-05-27T09:34:36",
        "date_gmt": "2020-05-27T09:34:36",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=134"
        },
        "modified": "2020-05-27T09:34:36",
        "modified_gmt": "2020-05-27T09:34:36",
        "slug": "linking-between-pages",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/linking-between-pages\/",
        "title": {
            "rendered": "Linking between pages"
        },
        "content": {
            "rendered": "\n<h3 id=\"-using-the-link--component\">Using the&nbsp;<code>&lt;Link \/&gt;<\/code>&nbsp;component<\/h3>\n\n\n\n<ol><li>Open the index page component (<code>src\/pages\/index.js<\/code>), import the&nbsp;<code>&lt;Link \/&gt;<\/code>&nbsp;component from Gatsby, add a&nbsp;<code>&lt;Link \/&gt;<\/code>&nbsp;component above the header, and give it a&nbsp;<code>to<\/code>&nbsp;property with the value of&nbsp;<code>\"\/contact\/\"<\/code>&nbsp;for the pathname:<\/li><\/ol>\n\n\n\n<p>src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { Link } from \"gatsby\"import Header from \"..\/components\/header\"export default function Home() {  return (    &lt;div style={{ color: `purple` }}>      &lt;Link to=\"\/contact\/\">Contact&lt;\/Link>      &lt;Header headerText=\"Hello Gatsby!\" \/>      &lt;p>What a world.&lt;\/p>      &lt;img src=\"https:\/\/source.unsplash.com\/random\/400x200\" alt=\"\" \/>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<p>When you click the new \u201cContact\u201d link on the homepage, you should see\u2026<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/5b621cd422b1ccc1181808580a57dd32\/6bbf7\/09-dev-404.png\" alt=\"Gatsby dev 404 page\" title=\"Gatsby dev 404 page\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/5b621cd422b1ccc1181808580a57dd32\/6bbf7\/09-dev-404.png\"><\/a><\/p>\n\n\n\n<p>\u2026the Gatsby development 404 page. Why? Because you\u2019re attempting to link to a page that doesn\u2019t exist yet.<\/p>\n\n\n\n<ol start=\"2\"><li>Now you\u2019ll have to create a page component for your new \u201cContact\u201d page at&nbsp;<code>src\/pages\/contact.js<\/code>&nbsp;and have it link back to the homepage:<\/li><\/ol>\n\n\n\n<p>src\/pages\/contact.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { Link } from \"gatsby\"import Header from \"..\/components\/header\"export default function Contact() {  return (    &lt;div style={{ color: `teal` }}>      &lt;Link to=\"\/\">Home&lt;\/Link>      &lt;Header headerText=\"Contact\" \/>      &lt;p>Send us a message!&lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<p>The Gatsby&nbsp;<code>&lt;Link \/&gt;<\/code>&nbsp;component is for linking between pages within your site. For external links to pages not handled by your Gatsby site, use the regular HTML&nbsp;<code>&lt;a&gt;<\/code>&nbsp;tag.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Using the&nbsp;&lt;Link \/&gt;&nbsp;component Open the index page component (src\/pages\/index.js), import the&nbsp;&lt;Link \/&gt;&nbsp;component from Gatsby, add a&nbsp;&lt;Link \/&gt;&nbsp;component above the header, and give it a&nbsp;to&nbsp;property with the value of&nbsp;&#8220;\/contact\/&#8221;&nbsp;for the pathname: src\/pages\/index.js When you click the new \u201cContact\u201d link on the homepage, you should see\u2026 \u2026the Gatsby development 404 page. Why? Because you\u2019re attempting to link&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/linking-between-pages\/\">Continue reading <span class=\"screen-reader-text\">Linking between pages<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 564,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4772"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4772"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4772\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/564"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4772"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4772"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4772"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 135,
        "date": "2020-05-27T09:36:02",
        "date_gmt": "2020-05-27T09:36:02",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=135"
        },
        "modified": "2020-05-27T09:36:02",
        "modified_gmt": "2020-05-27T09:36:02",
        "slug": "deploying-a-gatsby-site",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/deploying-a-gatsby-site\/",
        "title": {
            "rendered": "Deploying a Gatsby site"
        },
        "content": {
            "rendered": "\n<p>Gatsby.js is a&nbsp;<em>modern site generator<\/em>, which means there are no servers to set up or complicated databases to deploy. Instead, the Gatsby&nbsp;<code>build<\/code>&nbsp;command produces a directory of static HTML and JavaScript files which you can deploy to a static site hosting service.<\/p>\n\n\n\n<p>Try using&nbsp;Surge&nbsp;for deploying your first Gatsby website. Surge is one of many \u201cstatic site hosts\u201d which makes it possible to deploy Gatsby sites.<\/p>\n\n\n\n<p>If you haven\u2019t previously installed &amp; set up Surge, open a new terminal window and install their command-line tool:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --global surge# Then create a (free) account with themsurge login<\/code><\/pre>\n\n\n\n<p>Next, build your site by running the following command in the terminal at the root of your site (tip: make sure you\u2019re running this command at the root of your site, in this case in the hello-world folder, which you can do by opening a new tab in the same window you used to run&nbsp;<code>gatsby develop<\/code>):<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby build<\/code><\/pre>\n\n\n\n<p>The build should take 15-30 seconds. Once the build is finished, it\u2019s interesting to take a look at the files that the&nbsp;<code>gatsby build<\/code>&nbsp;command just prepared to deploy.<\/p>\n\n\n\n<p>Take a look at a list of the generated files by typing in the following terminal command into the root of your site, which will let you look at the&nbsp;<code>public<\/code>&nbsp;directory:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ls public<\/code><\/pre>\n\n\n\n<p>Then finally deploy your site by publishing the generated files to surge.sh. For newly-created surge account, you need to verify your email with surge before publishing your site (check your inbox first and verify your email).<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Copycopy code to clipboardsurge public\/<\/code><\/pre>\n\n\n\n<p>Note that you will have to press the&nbsp;<code>enter<\/code>&nbsp;key after you see the&nbsp;<code>domain: some-name.surge.sh<\/code>&nbsp;information on your command-line interface.<\/p>\n\n\n\n<p>Once this finishes running, you should see in your terminal something like:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/2718feec8167496f9e7a5087a5f539e7\/321ea\/surge-deployment.png\" alt=\"Screenshot of publishing Gatsby site with Surge\" title=\"Screenshot of publishing Gatsby site with Surge\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/2718feec8167496f9e7a5087a5f539e7\/f32b7\/surge-deployment.png\"><\/a><\/p>\n\n\n\n<p>Open the web address listed on the bottom line (<code>lowly-pain.surge.sh<\/code>&nbsp;in this case) and you\u2019ll see your newly published site! Great work!<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Gatsby.js is a&nbsp;modern site generator, which means there are no servers to set up or complicated databases to deploy. Instead, the Gatsby&nbsp;build&nbsp;command produces a directory of static HTML and JavaScript files which you can deploy to a static site hosting service. Try using&nbsp;Surge&nbsp;for deploying your first Gatsby website. Surge is one of many \u201cstatic site&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/deploying-a-gatsby-site\/\">Continue reading <span class=\"screen-reader-text\">Deploying a Gatsby site<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 565,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/135"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=135"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/135\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=135"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=135"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=135"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4773,
        "date": "2020-05-27T09:41:32",
        "date_gmt": "2020-05-27T09:41:32",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=136"
        },
        "modified": "2020-05-27T09:41:32",
        "modified_gmt": "2020-05-27T09:41:32",
        "slug": "creating-global-styles-with-standard-css-files",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/creating-global-styles-with-standard-css-files\/",
        "title": {
            "rendered": "Creating global styles with standard CSS files"
        },
        "content": {
            "rendered": "\n<p>One of the most straightforward ways to add global styles to a site is using a global&nbsp;<code>.css<\/code>&nbsp;stylesheet.<\/p>\n\n\n\n<h4 id=\"-create-a-new-gatsby-site\"> Create a new Gatsby site<\/h4>\n\n\n\n<p>Start by creating a new Gatsby site. It may be best (especially if you\u2019re new to the command line) to close the terminal windows you used for&nbsp;part one&nbsp;and start a new terminal session for part two.<\/p>\n\n\n\n<p>Open a new terminal window, create a new \u201chello world\u201d Gatsby site in a directory called&nbsp;<code>tutorial-part-two<\/code>, and then move to this new directory:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby new tutorial-part-two https:\/\/github.com\/gatsbyjs\/gatsby-starter-hello-worldcd tutorial-part-two<\/code><\/pre>\n\n\n\n<p>You now have a new Gatsby site (based on the Gatsby \u201chello world\u201d starter) with the following structure:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Copycopy code to clipboard<code>\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502&nbsp;&nbsp; \u2514\u2500\u2500 pages\u2502&nbsp;&nbsp;     \u2514\u2500\u2500 index.js<\/code><\/pre>\n\n\n\n<h4 id=\"-add-styles-to-a-css-file\">Add styles to a CSS file<\/h4>\n\n\n\n<ol><li>Create a&nbsp;<code>.css<\/code>&nbsp;file in your new project:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-preformatted\">Copycopy code to clipboard<code>cd srcmkdir stylescd stylestouch global.css<\/code><\/pre>\n\n\n\n<p>Note: Feel free to create these directories and files using your code editor, if you\u2019d prefer.<\/p>\n\n\n\n<p>You should now have a structure like this:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Copycopy code to clipboard<code>\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502&nbsp;&nbsp; \u2514\u2500\u2500 pages\u2502&nbsp;&nbsp;     \u2514\u2500\u2500 index.js\u2502&nbsp;&nbsp; \u2514\u2500\u2500 styles\u2502&nbsp;&nbsp;     \u2514\u2500\u2500 global.css<\/code><\/pre>\n\n\n\n<ol start=\"2\"><li>Define some styles in the&nbsp;<code>global.css<\/code>&nbsp;file:<\/li><\/ol>\n\n\n\n<p>src\/styles\/global.css<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Copysrc\/styles\/global.css: copy code to clipboardhtml {  background-color: lavenderblush;}<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: The placement of the example CSS file in a&nbsp;<code>\/src\/styles\/<\/code>&nbsp;folder is arbitrary.<\/p><\/blockquote>\n\n\n\n<h4 id=\"-include-the-stylesheet-in-gatsby-browserjs\">Include the stylesheet in&nbsp;<code>gatsby-browser.js<\/code><\/h4>\n\n\n\n<ol><li>Create the&nbsp;<code>gatsby-browser.js<\/code><\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>cd ..\/..touch gatsby-browser.js<\/code><\/pre>\n\n\n\n<p>Your project\u2019s file structure should now look like this:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Copycopy code to clipboard<code>\u251c\u2500\u2500 package.json\u251c\u2500\u2500 src\u2502&nbsp;&nbsp; \u2514\u2500\u2500 pages\u2502&nbsp;&nbsp;     \u2514\u2500\u2500 index.js\u2502&nbsp;&nbsp; \u2514\u2500\u2500 styles\u2502&nbsp;&nbsp;     \u2514\u2500\u2500 global.css\u251c\u2500\u2500 gatsby-browser.js<\/code><\/pre>\n\n\n\n<p>What is&nbsp;<code>gatsby-browser.js<\/code>? Don\u2019t worry about this too much and for now, just know that&nbsp;<code>gatsby-browser.js<\/code>&nbsp;is one of a handful of special files that Gatsby looks for and uses (if they exist). Here, the naming of the file&nbsp;<strong>is<\/strong>&nbsp;important. If you do want to explore more now, check out&nbsp;the docs.<\/p>\n\n\n\n<ol start=\"2\"><li>Import your recently-created stylesheet in the&nbsp;<code>gatsby-browser.js<\/code>&nbsp;file:<\/li><\/ol>\n\n\n\n<p>gatsby-browser.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import \".\/src\/styles\/global.css\"\/\/ or:\/\/ require('.\/src\/styles\/global.css')<\/code><\/pre>\n\n\n\n<p>Note: Both CommonJS (<code>require<\/code>) and ES Module (<code>import<\/code>) syntax work here. If you\u2019re not sure which to choose,&nbsp;<code>import<\/code>&nbsp;is usually a good default. When working with files that are only run in a Node.js environment however (like&nbsp;<code>gatsby-node.js<\/code>),&nbsp;<code>require<\/code>&nbsp;will need to be used.<\/p>\n\n\n\n<ol start=\"3\"><li>Start the development server:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby develop<\/code><\/pre>\n\n\n\n<p>If you take a look at your project in the browser, you should see a lavender background applied to the \u201chello world\u201d starter:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/4ddb5fc342a06be749f8a14b86b1edc2\/321ea\/global-css.png\" alt=\"Lavender Hello World!\" title=\"Lavender Hello World!\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/4ddb5fc342a06be749f8a14b86b1edc2\/6f278\/global-css.png\"><\/a><\/p>\n\n\n\n<p>Tip: This part of the tutorial has focused on the quickest and most straightforward way to get started styling a Gatsby site \u2014 importing standard CSS files directly, using&nbsp;<code>gatsby-browser.js<\/code>. In most cases, the best way to add global styles is with a shared layout component.&nbsp;Check out the docs&nbsp;for more on that approach.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>One of the most straightforward ways to add global styles to a site is using a global&nbsp;.css&nbsp;stylesheet. Create a new Gatsby site Start by creating a new Gatsby site. It may be best (especially if you\u2019re new to the command line) to close the terminal windows you used for&nbsp;part one&nbsp;and start a new terminal session&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/creating-global-styles-with-standard-css-files\/\">Continue reading <span class=\"screen-reader-text\">Creating global styles with standard CSS files<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 534,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4773"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4773"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4773\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4773"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4773"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4773"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 143,
        "date": "2020-05-27T09:46:23",
        "date_gmt": "2020-05-27T09:46:23",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=143"
        },
        "modified": "2020-05-27T09:46:23",
        "modified_gmt": "2020-05-27T09:46:23",
        "slug": "using-component-scoped-css",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/using-component-scoped-css\/",
        "title": {
            "rendered": "Using component-scoped CSS"
        },
        "content": {
            "rendered": "\n<p>So far, we\u2019ve talked about the more traditional approach of using standard CSS stylesheets. Now, we\u2019ll talk about various methods of modularising CSS to tackle styling in a component-oriented way.<\/p>\n\n\n\n<h3 id=\"css-modules\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-two\/#css-modules\"><\/a>CSS Modules<\/h3>\n\n\n\n<p>Let\u2019s explore&nbsp;<strong>CSS Modules<\/strong>. Quoting from&nbsp;the CSS Module homepage:<\/p>\n\n\n\n<p>A&nbsp;<strong>CSS Module<\/strong>&nbsp;is a CSS file in which all class names and animation names are scoped locally by default.<\/p>\n\n\n\n<p>CSS Modules are very popular because they let you write CSS normally but with a lot more safety. The tool automatically generates unique class and animation names, so you don\u2019t have to worry about selector name collisions.<\/p>\n\n\n\n<p>Gatsby works out of the box with CSS Modules. This approach is highly recommended for those new to building with Gatsby (and React in general).<\/p>\n\n\n\n<h4 id=\"-build-a-new-page-using-css-modules\">Build a new page using CSS Modules<\/h4>\n\n\n\n<p>In this section, you\u2019ll create a new page component and style that page component using a CSS Module.<\/p>\n\n\n\n<p>First, create a new&nbsp;<code>Container<\/code>&nbsp;component.<\/p>\n\n\n\n<ol><li>Create a new directory at&nbsp;<code>src\/components<\/code>&nbsp;and then, in this new directory, create a file named&nbsp;<code>container.js<\/code>&nbsp;and paste the following:<\/li><\/ol>\n\n\n\n<p>src\/components\/container.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import containerStyles from \".\/container.module.css\"export default function Container({ children }) {  return &lt;div className={containerStyles.container}>{children}&lt;\/div>}<\/code><\/pre>\n\n\n\n<p>You\u2019ll notice you imported a CSS module file named&nbsp;<code>container.module.css<\/code>. Let\u2019s create that file now.<\/p>\n\n\n\n<ol start=\"2\"><li>In the same directory (<code>src\/components<\/code>), create a&nbsp;<code>container.module.css<\/code>&nbsp;file and copy\/paste the following:<\/li><\/ol>\n\n\n\n<p>src\/components\/container.module.css<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Copysrc\/components\/container.module.css: copy code to clipboard.container {  margin: 3rem auto;  max-width: 600px;}<\/code><\/pre>\n\n\n\n<p>You\u2019ll notice that the file name ends with&nbsp;<code>.module.css<\/code>&nbsp;instead of the usual&nbsp;<code>.css<\/code>. This is how you tell Gatsby that this CSS file should be processed as a CSS module rather than plain CSS.<\/p>\n\n\n\n<ol start=\"3\"><li>Create a new page component by creating a file at&nbsp;<code>src\/pages\/about-css-modules.js<\/code>:<\/li><\/ol>\n\n\n\n<p>src\/pages\/about-css-modules.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import Container from \"..\/components\/container\"export default function About() {  return (    &lt;Container>      &lt;h1>About CSS Modules&lt;\/h1>      &lt;p>CSS Modules are cool&lt;\/p>    &lt;\/Container>  )}<\/code><\/pre>\n\n\n\n<p>Now, if you visit&nbsp;<code>http:\/\/localhost:8000\/about-css-modules\/<\/code>, your page should look something like this:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/react.foobrdigital.com\/wp-content\/uploads\/2020\/05\/css-modules-basic-1-1024x768.png\" alt=\"\" class=\"wp-image-150\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>So far, we\u2019ve talked about the more traditional approach of using standard CSS stylesheets. Now, we\u2019ll talk about various methods of modularising CSS to tackle styling in a component-oriented way. CSS Modules Let\u2019s explore&nbsp;CSS Modules. Quoting from&nbsp;the CSS Module homepage: A&nbsp;CSS Module&nbsp;is a CSS file in which all class names and animation names are scoped&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/using-component-scoped-css\/\">Continue reading <span class=\"screen-reader-text\">Using component-scoped CSS<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 514,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/143"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=143"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/143\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=143"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=143"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=143"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4774,
        "date": "2020-05-27T10:25:02",
        "date_gmt": "2020-05-27T10:25:02",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=144"
        },
        "modified": "2020-05-27T10:25:02",
        "modified_gmt": "2020-05-27T10:25:02",
        "slug": "style-a-component-using-css-modules",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/style-a-component-using-css-modules\/",
        "title": {
            "rendered": "Style a component using CSS Modules"
        },
        "content": {
            "rendered": "\n<p>In this section, you\u2019ll create a list of people with names, avatars, and short Latin biographies. You\u2019ll create a&nbsp;<code>&lt;User \/&gt;<\/code>&nbsp;component and style that component using a CSS module.<\/p>\n\n\n\n<ol><li>Create the file for the CSS at&nbsp;<code>src\/pages\/about-css-modules.module.css<\/code>.<\/li><li>Paste the following into the new file:<\/li><\/ol>\n\n\n\n<p>src\/pages\/about-css-modules.module.css<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Copysrc\/pages\/about-css-modules.module.css: copy code to clipboard.user {  display: flex;  align-items: center;  margin: 0 auto 12px auto;}.user:last-child {  margin-bottom: 0;}.avatar {  flex: 0 0 96px;  width: 96px;  height: 96px;  margin: 0;}.description {  flex: 1;  margin-left: 18px;  padding: 12px;}.username {  margin: 0 0 12px 0;  padding: 0;}.excerpt {  margin: 0;}<\/code><\/pre>\n\n\n\n<ol start=\"3\"><li>Import the new&nbsp;<code>src\/pages\/about-css-modules.module.css<\/code>&nbsp;file into the&nbsp;<code>about-css-modules.js<\/code>&nbsp;page you created earlier by editing the first few lines of the file like so:<\/li><\/ol>\n\n\n\n<p>src\/pages\/about-css-modules.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import styles from \".\/about-css-modules.module.css\"import Container from \"..\/components\/container\"console.log(styles)<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>console.log(styles)<\/code>&nbsp;code will log the resulting import so you can see the result of your processed&nbsp;<code>.\/about-css-modules.module.css<\/code>&nbsp;file. If you open the developer console (using e.g. Firefox or Chrome\u2019s developer tools, often by the F12 key) in your browser, you\u2019ll see:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/c1449b13fbeab2d990b6be27f26e364f\/321ea\/css-modules-console.png\" alt=\"Import result of CSS module in console\" title=\"Import result of CSS module in console\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/c1449b13fbeab2d990b6be27f26e364f\/0e904\/css-modules-console.png\"><\/a><\/p>\n\n\n\n<p>If you compare that to your CSS file, you\u2019ll see that each class is now a key in the imported object pointing to a long string e.g.&nbsp;<code>avatar<\/code>&nbsp;points to&nbsp;<code>src-pages----about-css-modules-module---avatar---2lRF7<\/code>. These are the class names CSS Modules generates. They\u2019re guaranteed to be unique across your site. And because you have to import them to use the classes, there\u2019s never any question about where some CSS is being used.<\/p>\n\n\n\n<ol start=\"4\"><li>Create a new&nbsp;<code>&lt;User \/&gt;<\/code>&nbsp;component inline in the&nbsp;<code>about-css-modules.js<\/code>&nbsp;page component. Modify&nbsp;<code>about-css-modules.js<\/code>&nbsp;so it looks like the following:<\/li><\/ol>\n\n\n\n<p>src\/pages\/about-css-modules.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import styles from \".\/about-css-modules.module.css\"import Container from \"..\/components\/container\"console.log(styles)const User = props => (  &lt;div className={styles.user}>    &lt;img src={props.avatar} className={styles.avatar} alt=\"\" \/>    &lt;div className={styles.description}>      &lt;h2 className={styles.username}>{props.username}&lt;\/h2>      &lt;p className={styles.excerpt}>{props.excerpt}&lt;\/p>    &lt;\/div>  &lt;\/div>)export default function About() {  return (    &lt;Container>      &lt;h1>About CSS Modules&lt;\/h1>      &lt;p>CSS Modules are cool&lt;\/p>      &lt;User        username=\"Jane Doe\"        avatar=\"https:\/\/s3.amazonaws.com\/uifaces\/faces\/twitter\/adellecharles\/128.jpg\"        excerpt=\"I'm Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\"      \/>      &lt;User        username=\"Bob Smith\"        avatar=\"https:\/\/s3.amazonaws.com\/uifaces\/faces\/twitter\/vladarbatov\/128.jpg\"        excerpt=\"I'm Bob Smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\"      \/>    &lt;\/Container>  )}<\/code><\/pre>\n\n\n\n<p>Tip: Generally, if you use a component in multiple places on a site, it should be in its own module file in the&nbsp;<code>components<\/code>&nbsp;directory. But, if it\u2019s used only in one file, create it inline.<\/p>\n\n\n\n<p>The finished page should now look like:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/react.foobrdigital.com\/wp-content\/uploads\/2020\/05\/css-modules-userlist-1024x770.png\" alt=\"\" class=\"wp-image-152\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this section, you\u2019ll create a list of people with names, avatars, and short Latin biographies. You\u2019ll create a&nbsp;&lt;User \/&gt;&nbsp;component and style that component using a CSS module. Create the file for the CSS at&nbsp;src\/pages\/about-css-modules.module.css. Paste the following into the new file: src\/pages\/about-css-modules.module.css Import the new&nbsp;src\/pages\/about-css-modules.module.css&nbsp;file into the&nbsp;about-css-modules.js&nbsp;page you created earlier by editing the first&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/style-a-component-using-css-modules\/\">Continue reading <span class=\"screen-reader-text\">Style a component using CSS Modules<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 515,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4774"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4774"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4774\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4774"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4774"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4774"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 145,
        "date": "2020-05-27T10:28:29",
        "date_gmt": "2020-05-27T10:28:29",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=145"
        },
        "modified": "2020-05-27T10:28:29",
        "modified_gmt": "2020-05-27T10:28:29",
        "slug": "using-plugins",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/using-plugins\/",
        "title": {
            "rendered": "Using plugins"
        },
        "content": {
            "rendered": "\n<p>You\u2019re probably familiar with the idea of plugins. Many software systems support adding custom plugins to add new functionality or even modify the core workings of the software. Gatsby plugins work the same way.<\/p>\n\n\n\n<p>Community members (like you!) can contribute plugins (small amounts of JavaScript code) that others can then use when building Gatsby sites.<\/p>\n\n\n\n<p>There are already hundreds of plugins! Explore the Gatsby&nbsp;Plugin Library.<\/p>\n\n\n\n<p>Our goal with plugins is to make them straightforward to install and use. You will likely be using plugins in almost every Gatsby site you build. While working through the rest of the tutorial you\u2019ll have many opportunities to practice installing and using plugins.<\/p>\n\n\n\n<p>For an initial introduction to using plugins, we\u2019ll install and implement the Gatsby plugin for Typography.js.<\/p>\n\n\n\n<p>Typography.js&nbsp;is a JavaScript library which generates global base styles for your site\u2019s typography. The library has a&nbsp;corresponding Gatsby plugin&nbsp;to streamline using it in a Gatsby site.<\/p>\n\n\n\n<h3 id=\"-create-a-new-gatsby-site\">Create a new Gatsby site<\/h3>\n\n\n\n<p>As we mentioned in&nbsp;part two, at this point it\u2019s probably a good idea to close the terminal window(s) and project files from previous parts of the tutorial, to keep things clean on your desktop. Then open a new terminal window and run the following commands to create a new Gatsby site in a directory called&nbsp;<code>tutorial-part-three<\/code>&nbsp;and then move to this new directory:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby new tutorial-part-three https:\/\/github.com\/gatsbyjs\/gatsby-starter-hello-worldcd tutorial-part-three<\/code><\/pre>\n\n\n\n<h3 id=\"-install-and-configure-gatsby-plugin-typography\"> Install and configure&nbsp;<code>gatsby-plugin-typography<\/code><\/h3>\n\n\n\n<p>There are two main steps to using a plugin: Installing and configuring.<\/p>\n\n\n\n<ol><li>Install the&nbsp;<code>gatsby-plugin-typography<\/code>&nbsp;NPM package.<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: Typography.js requires a few additional packages, so those are included in the instructions. Additional requirements like this will be listed in the \u201cinstall\u201d instructions of each plugin.<\/p><\/blockquote>\n\n\n\n<ol start=\"2\"><li>Edit the file&nbsp;<code>gatsby-config.js<\/code>&nbsp;at the root of your project to the following:<\/li><\/ol>\n\n\n\n<p>gatsby-config.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>module.exports = {  plugins: &#91;    {      resolve: `gatsby-plugin-typography`,      options: {        pathToConfigModule: `src\/utils\/typography`,      },    },  ],}<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>gatsby-config.js<\/code>&nbsp;is another special file that Gatsby will automatically recognize. This is where you add plugins and other site configuration.<\/p>\n\n\n\n<p>Check out the&nbsp;doc on gatsby-config.js&nbsp;to read more, if you wish.<\/p>\n\n\n\n<ol start=\"3\"><li>Typography.js needs a configuration file. Create a new directory called&nbsp;<code>utils<\/code>&nbsp;in the&nbsp;<code>src<\/code>&nbsp;directory. Then add a new file called&nbsp;<code>typography.js<\/code>&nbsp;to&nbsp;<code>utils<\/code>&nbsp;and copy the following into the file:<\/li><\/ol>\n\n\n\n<p>src\/utils\/typography.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Typography from \"typography\"import fairyGateTheme from \"typography-theme-fairy-gates\"const typography = new Typography(fairyGateTheme)export const { scale, rhythm, options } = typographyexport default typography<\/code><\/pre>\n\n\n\n<ol start=\"4\"><li>Start the development server.<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby develop<\/code><\/pre>\n\n\n\n<p>Once you load the site, if you inspect the generated HTML using the Chrome developer tools, you\u2019ll see that the typography plugin added a&nbsp;<code>&lt;style&gt;<\/code>&nbsp;element to the&nbsp;<code>&lt;head&gt;<\/code>&nbsp;element with its generated CSS:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/2c34a22832b1dd0828ac87fde925622a\/321ea\/typography-styles.png\" alt=\"typography-styles\" title=\"typography-styles\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/2c34a22832b1dd0828ac87fde925622a\/04784\/typography-styles.png\"><\/a><\/p>\n\n\n\n<h3 id=\"-make-some-content-and-style-changes\"> Make some content and style changes<\/h3>\n\n\n\n<p>Copy the following into your&nbsp;<code>src\/pages\/index.js<\/code>&nbsp;so you can see the effect of the CSS generated by Typography.js better.src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Home() {  return (    &lt;div>      &lt;h1>Hi! I'm building a fake Gatsby site as part of a tutorial!&lt;\/h1>      &lt;p>        What do I like to do? Lots of course but definitely enjoy building        websites.      &lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<p>Your site should now look like this:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/95ba417a726c828267d5ca0f02cf0bb5\/321ea\/no-layout.png\" alt=\"no-layout\" title=\"no-layout\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/95ba417a726c828267d5ca0f02cf0bb5\/ca3c3\/no-layout.png\"><\/a><\/p>\n\n\n\n<p>Let\u2019s make a quick improvement. Many sites have a single column of text centered in the middle of the page. To create this, add the following styles to the&nbsp;<code>&lt;div&gt;<\/code>&nbsp;in&nbsp;<code>src\/pages\/index.js<\/code>.src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Home() {  return (    &lt;div style={{ margin: `3rem auto`, maxWidth: 600 }}>      &lt;h1>Hi! I'm building a fake Gatsby site as part of a tutorial!&lt;\/h1>      &lt;p>        What do I like to do? Lots of course but definitely enjoy building        websites.      &lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/a82222caf76c514d5ee974e197730fb1\/321ea\/with-layout2.png\" alt=\"with-layout2\" title=\"with-layout2\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/a82222caf76c514d5ee974e197730fb1\/ca3c3\/with-layout2.png\"><\/a><\/p>\n\n\n\n<p>Sweet. You\u2019ve installed and configured your very first Gatsby plugin!<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>You\u2019re probably familiar with the idea of plugins. Many software systems support adding custom plugins to add new functionality or even modify the core workings of the software. Gatsby plugins work the same way. Community members (like you!) can contribute plugins (small amounts of JavaScript code) that others can then use when building Gatsby sites.&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/using-plugins\/\">Continue reading <span class=\"screen-reader-text\">Using plugins<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 516,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/145"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=145"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/145\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=145"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=145"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=145"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4775,
        "date": "2020-05-27T10:29:53",
        "date_gmt": "2020-05-27T10:29:53",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=146"
        },
        "modified": "2020-05-27T10:29:53",
        "modified_gmt": "2020-05-27T10:29:53",
        "slug": "creating-layout-components",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/creating-layout-components\/",
        "title": {
            "rendered": "Creating layout components"
        },
        "content": {
            "rendered": "\n<p>Now let\u2019s move on to learning about layout components. To get ready for this part, add a couple new pages to your project: an about page and a contact page.src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function About() {  return (    &lt;div>      &lt;h1>About me&lt;\/h1>      &lt;p>        I\u2019m good enough, I\u2019m smart enough, and gosh darn it, people like me!      &lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<p>src\/pages\/contact.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"export default function Contact() {  return (    &lt;div>      &lt;h1>I'd love to talk! Email me at the address below&lt;\/h1>      &lt;p>        &lt;a href=\"mailto:me@example.com\">me@example.com&lt;\/a>      &lt;\/p>    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<p>Let\u2019s see what the new about page looks like:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/3f584fa0620c329508c29d35ccde9c30\/321ea\/about-uncentered.png\" alt=\"about-uncentered\" title=\"about-uncentered\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/3f584fa0620c329508c29d35ccde9c30\/c4451\/about-uncentered.png\"><\/a><\/p>\n\n\n\n<p>Hmm. It would be nice if the content of the two new pages were centered like the index page. And it would be nice to have some sort of global navigation so it\u2019s easy for visitors to find and visit each of the sub-pages.<\/p>\n\n\n\n<p>You\u2019ll tackle these changes by creating your first layout component.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Now let\u2019s move on to learning about layout components. To get ready for this part, add a couple new pages to your project: an about page and a contact page.src\/pages\/about.js src\/pages\/contact.js Let\u2019s see what the new about page looks like: Hmm. It would be nice if the content of the two new pages were centered&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/creating-layout-components\/\">Continue reading <span class=\"screen-reader-text\">Creating layout components<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 517,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4775"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4775"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4775\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4775"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4775"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4775"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 147,
        "date": "2020-05-27T10:30:41",
        "date_gmt": "2020-05-27T10:30:41",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=147"
        },
        "modified": "2020-05-27T10:30:41",
        "modified_gmt": "2020-05-27T10:30:41",
        "slug": "recap-of-the-first-half-of-the-tutorial",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/recap-of-the-first-half-of-the-tutorial\/",
        "title": {
            "rendered": "Recap of the first half of the tutorial"
        },
        "content": {
            "rendered": "\n<p>So far, you\u2019ve been learning how to use React.js\u2014how powerful it is to be able to create your&nbsp;<em>own<\/em>&nbsp;components to act as custom building blocks for websites.<\/p>\n\n\n\n<p>You\u2019ve also explored styling components using CSS Modules.<\/p>\n\n\n\n<h2 id=\"whats-in-this-tutorial\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-four\/#whats-in-this-tutorial\"><\/a>What\u2019s in this tutorial?<\/h2>\n\n\n\n<p>In the next four parts of the tutorial (including this one), you\u2019ll be diving into the Gatsby data layer, which is a powerful feature of Gatsby that lets you easily build sites from Markdown, WordPress, headless CMSs, and other data sources of all flavors.<\/p>\n\n\n\n<p><strong>NOTE:<\/strong>&nbsp;Gatsby\u2019s data layer is powered by GraphQL. For an in-depth tutorial on GraphQL, we recommend&nbsp;How to GraphQL.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>So far, you\u2019ve been learning how to use React.js\u2014how powerful it is to be able to create your&nbsp;own&nbsp;components to act as custom building blocks for websites. You\u2019ve also explored styling components using CSS Modules. What\u2019s in this tutorial? In the next four parts of the tutorial (including this one), you\u2019ll be diving into the Gatsby&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/recap-of-the-first-half-of-the-tutorial\/\">Continue reading <span class=\"screen-reader-text\">Recap of the first half of the tutorial<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 518,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/147"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=147"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/147\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=147"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=147"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=147"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4776,
        "date": "2020-05-27T10:32:35",
        "date_gmt": "2020-05-27T10:32:35",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=148"
        },
        "modified": "2020-05-27T10:32:35",
        "modified_gmt": "2020-05-27T10:32:35",
        "slug": "data-in-gatsby",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/data-in-gatsby\/",
        "title": {
            "rendered": "Data in Gatsby"
        },
        "content": {
            "rendered": "\n<p>A website has four parts: HTML, CSS, JS, and data. The first half of the tutorial focused on the first three. Now let\u2019s learn how to use data in Gatsby sites.<\/p>\n\n\n\n<p><strong>What is data?<\/strong><\/p>\n\n\n\n<p>A very computer science-y answer would be: data is things like&nbsp;<code>\"strings\"<\/code>, integers (<code>42<\/code>), objects (<code>{ pizza: true }<\/code>), etc.<\/p>\n\n\n\n<p>For the purpose of working in Gatsby, however, a more useful answer is \u201ceverything that lives outside a React component\u201d.<\/p>\n\n\n\n<p>So far, you\u2019ve been writing text and adding images&nbsp;<em>directly<\/em>&nbsp;in components. Which is an&nbsp;<em>excellent<\/em>&nbsp;way to build many websites. But, often you want to store data&nbsp;<em>outside<\/em>&nbsp;components and then bring the data&nbsp;<em>into<\/em>&nbsp;the component as needed.<\/p>\n\n\n\n<p>If you\u2019re building a site with WordPress (so other contributors have a nice interface for adding &amp; maintaining content) and Gatsby, the&nbsp;<em>data<\/em>&nbsp;for the site (pages and posts) are in WordPress and you&nbsp;<em>pull<\/em>&nbsp;that data, as needed, into your components.<\/p>\n\n\n\n<p>Data can also live in file types like Markdown, CSV, etc. as well as databases and APIs of all sorts.<\/p>\n\n\n\n<p><strong>Gatsby\u2019s data layer lets you pull data from these (and any other source) directly into your components<\/strong>&nbsp;\u2014 in the shape and form you want.<\/p>\n\n\n\n<h2 id=\"using-unstructured-data-vs-graphql\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-four\/#using-unstructured-data-vs-graphql\"><\/a>Using Unstructured Data vs GraphQL<\/h2>\n\n\n\n<h3 id=\"do-i-have-to-use-graphql-and-source-plugins-to-pull-data-into-gatsby-sites\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-four\/#do-i-have-to-use-graphql-and-source-plugins-to-pull-data-into-gatsby-sites\"><\/a>Do I have to use GraphQL and source plugins to pull data into Gatsby sites?<\/h3>\n\n\n\n<p>Absolutely not! You can use the node&nbsp;<code>createPages<\/code>&nbsp;API to pull unstructured data into Gatsby pages directly, rather than through the GraphQL data layer. This is a great choice for small sites, while GraphQL and source plugins can help save time with more complex sites.<\/p>\n\n\n\n<p>See the&nbsp;Using Gatsby without GraphQL&nbsp;guide to learn how to pull data into your Gatsby site using the node&nbsp;<code>createPages<\/code>&nbsp;API and to see an example site!<\/p>\n\n\n\n<h3 id=\"when-do-i-use-unstructured-data-vs-graphql\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-four\/#when-do-i-use-unstructured-data-vs-graphql\"><\/a>When do I use unstructured data vs GraphQL?<\/h3>\n\n\n\n<p>If you\u2019re building a small site, one efficient way to build it is to pull in unstructured data as outlined in this guide, using&nbsp;<code>createPages<\/code>&nbsp;API, and then if the site becomes more complex later on, you move on to building more complex sites, or you\u2019d like to transform your data, follow these steps:<\/p>\n\n\n\n<ol><li>Check out the&nbsp;Plugin Library&nbsp;to see if the source plugins and\/or transformer plugins you\u2019d like to use already exist<\/li><li>If they don\u2019t exist, read the&nbsp;Plugin Authoring&nbsp;guide and consider building your own!<\/li><\/ol>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A website has four parts: HTML, CSS, JS, and data. The first half of the tutorial focused on the first three. Now let\u2019s learn how to use data in Gatsby sites. What is data? A very computer science-y answer would be: data is things like&nbsp;&#8220;strings&#8221;, integers (42), objects ({ pizza: true }), etc. For the&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/data-in-gatsby\/\">Continue reading <span class=\"screen-reader-text\">Data in Gatsby<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 519,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4776"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4776"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4776\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4776"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4776"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4776"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 149,
        "date": "2020-05-27T10:38:35",
        "date_gmt": "2020-05-27T10:38:35",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=149"
        },
        "modified": "2020-05-27T10:38:35",
        "modified_gmt": "2020-05-27T10:38:35",
        "slug": "how-gatsby-uses-graphql",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/how-gatsby-uses-graphql\/",
        "title": {
            "rendered": "How Gatsby uses GraphQL"
        },
        "content": {
            "rendered": "\n<p>There are many options for loading data into React components. One of the most popular and powerful of these is a technology called&nbsp;GraphQL.<\/p>\n\n\n\n<p>GraphQL was invented at Facebook to help product engineers&nbsp;<em>pull<\/em>&nbsp;needed data into components.<\/p>\n\n\n\n<p>GraphQL is a&nbsp;<strong>q<\/strong>uery&nbsp;<strong>l<\/strong>anguage (the&nbsp;<em>QL<\/em>&nbsp;part of its name). If you\u2019re familiar with SQL, it works in a very similar way. Using a special syntax, you describe the data you want in your component and then that data is given to you.<\/p>\n\n\n\n<p>Gatsby uses GraphQL to enable components to declare the data they need.<\/p>\n\n\n\n<h2 id=\"create-a-new-example-site\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-four\/#create-a-new-example-site\"><\/a>Create a new example site<\/h2>\n\n\n\n<p>Create another new site for this part of the tutorial. You\u2019re going to build a Markdown blog called \u201cPandas Eating Lots\u201d. It\u2019s dedicated to showing off the best pictures and videos of pandas eating lots of food. Along the way, you\u2019ll be dipping your toes into GraphQL and Gatsby\u2019s Markdown support.<\/p>\n\n\n\n<p>Open a new terminal window and run the following commands to create a new Gatsby site in a directory called&nbsp;<code>tutorial-part-four<\/code>. Then navigate to the new directory:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby new tutorial-part-four https:\/\/github.com\/gatsbyjs\/gatsby-starter-hello-worldcd tutorial-part-four<\/code><\/pre>\n\n\n\n<p>Then install some other needed dependencies at the root of the project. You\u2019ll use the Typography theme \u201cKirkham\u201d, and you\u2019ll try out a CSS-in-JS library,&nbsp;\u201cEmotion\u201d:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save gatsby-plugin-typography typography react-typography typography-theme-kirkham gatsby-plugin-emotion @emotion\/core<\/code><\/pre>\n\n\n\n<p>Set up a site similar to what you ended with in&nbsp;Part Three. This site will have a layout component and two page components:src\/components\/layout.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { css } from \"@emotion\/core\"import { Link } from \"gatsby\"import { rhythm } from \"..\/utils\/typography\"export default function Layout({ children }) {  return (    &lt;div      css={css`        margin: 0 auto;        max-width: 700px;        padding: ${rhythm(2)};        padding-top: ${rhythm(1.5)};      `}    >      &lt;Link to={`\/`}>        &lt;h3          css={css`            margin-bottom: ${rhythm(2)};            display: inline-block;            font-style: normal;          `}        >          Pandas Eating Lots        &lt;\/h3>      &lt;\/Link>      &lt;Link        to={`\/about\/`}        css={css`          float: right;        `}      >        About      &lt;\/Link>      {children}    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<p>src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import Layout from \"..\/components\/layout\"export default function Home() {  return (    &lt;Layout>      &lt;h1>Amazing Pandas Eating Things&lt;\/h1>      &lt;div>        &lt;img          src=\"https:\/\/2.bp.blogspot.com\/-BMP2l6Hwvp4\/TiAxeGx4CTI\/AAAAAAAAD_M\/XlC_mY3SoEw\/s1600\/panda-group-eating-bamboo.jpg\"          alt=\"Group of pandas eating bamboo\"        \/>      &lt;\/div>    &lt;\/Layout>  )}<\/code><\/pre>\n\n\n\n<p>src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import Layout from \"..\/components\/layout\"export default function About() {  return (    &lt;Layout>      &lt;h1>About Pandas Eating Lots&lt;\/h1>      &lt;p>        We're the only site running on your computer dedicated to showing the        best photos and videos of pandas eating lots of food.      &lt;\/p>    &lt;\/Layout>  )}<\/code><\/pre>\n\n\n\n<p>src\/utils\/typography.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Typography from \"typography\"import kirkhamTheme from \"typography-theme-kirkham\"const typography = new Typography(kirkhamTheme)export default typographyexport const rhythm = typography.rhythm<\/code><\/pre>\n\n\n\n<p><code>gatsby-config.js<\/code>&nbsp;(must be in the root of your project, not under src)gatsby-config.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>module.exports = {  plugins: &#91;    `gatsby-plugin-emotion`,    {      resolve: `gatsby-plugin-typography`,      options: {        pathToConfigModule: `src\/utils\/typography`,      },    },  ],}<\/code><\/pre>\n\n\n\n<p>Add the above files and then run&nbsp;<code>gatsby develop<\/code>, per usual, and you should see the following:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/9a136a7536d2f4b315d446f6a1a83725\/321ea\/start.png\" alt=\"start\" title=\"start\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/9a136a7536d2f4b315d446f6a1a83725\/ca3c3\/start.png\"><\/a><\/p>\n\n\n\n<p>You have another small site with a layout and two pages.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There are many options for loading data into React components. One of the most popular and powerful of these is a technology called&nbsp;GraphQL. GraphQL was invented at Facebook to help product engineers&nbsp;pull&nbsp;needed data into components. GraphQL is a&nbsp;query&nbsp;language (the&nbsp;QL&nbsp;part of its name). If you\u2019re familiar with SQL, it works in a very similar way. Using&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/how-gatsby-uses-graphql\/\">Continue reading <span class=\"screen-reader-text\">How Gatsby uses GraphQL<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 520,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/149"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=149"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/149\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=149"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=149"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=149"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 159,
        "date": "2020-05-27T10:41:17",
        "date_gmt": "2020-05-27T10:41:17",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=159"
        },
        "modified": "2020-05-27T10:41:17",
        "modified_gmt": "2020-05-27T10:41:17",
        "slug": "your-first-graphql-query",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/your-first-graphql-query\/",
        "title": {
            "rendered": "Your first GraphQL query"
        },
        "content": {
            "rendered": "\n<p>When building sites, you\u2019ll probably want to reuse common bits of data \u2014 like the&nbsp;<em>site title<\/em>&nbsp;for example. Look at the&nbsp;<code>\/about\/<\/code>&nbsp;page. You\u2019ll notice that you have the site title (<code>Pandas Eating Lots<\/code>) in both the layout component (the site header) as well as in the&nbsp;<code>&lt;h1 \/&gt;<\/code>&nbsp;of the&nbsp;<code>about.js<\/code>&nbsp;page (the page header).<\/p>\n\n\n\n<p>But what if you want to change the site title in the future? You\u2019d have to search for the title across all your components and edit each instance. This is both cumbersome and error-prone, especially for larger, more complex sites. Instead, you can store the title in one location and reference that location from other files; change the title in a single place, and Gatsby will&nbsp;<em>pull<\/em>&nbsp;your updated title into files that reference it.<\/p>\n\n\n\n<p>The place for these common bits of data is the&nbsp;<code>siteMetadata<\/code>&nbsp;object in the&nbsp;<code>gatsby-config.js<\/code>&nbsp;file. Add your site title to the&nbsp;<code>gatsby-config.js<\/code>&nbsp;file:gatsby-config.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>module.exports = {  siteMetadata: {    title: `Title from siteMetadata`,  },  plugins: &#91;    `gatsby-plugin-emotion`,    {      resolve: `gatsby-plugin-typography`,      options: {        pathToConfigModule: `src\/utils\/typography`,      },    },  ],}<\/code><\/pre>\n\n\n\n<p>Restart the development server.<\/p>\n\n\n\n<h3 id=\"use-a-page-query\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-four\/#use-a-page-query\"><\/a>Use a page query<\/h3>\n\n\n\n<p>Now the site title is available to be queried; Add it to the&nbsp;<code>about.js<\/code>&nbsp;file using a&nbsp;page query:src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { graphql } from \"gatsby\"import Layout from \"..\/components\/layout\"export default function About({ data }) {  return (    &lt;Layout>      &lt;h1>About {data.site.siteMetadata.title}&lt;\/h1>      &lt;p>        We're the only site running on your computer dedicated to showing the        best photos and videos of pandas eating lots of food.      &lt;\/p>    &lt;\/Layout>  )}export const query = graphql`  query {    site {      siteMetadata {        title      }    }  }`<\/code><\/pre>\n\n\n\n<p>It worked! &#x1f389;<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/4df7cdfeb994c1a07b4557f0f6010d91\/c5bb3\/site-metadata-title.png\" alt=\"Page title pulling from siteMetadata\" title=\"Page title pulling from siteMetadata\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/4df7cdfeb994c1a07b4557f0f6010d91\/c5bb3\/site-metadata-title.png\"><\/a><\/p>\n\n\n\n<p>The basic GraphQL query that retrieves the&nbsp;<code>title<\/code>&nbsp;in your&nbsp;<code>about.js<\/code>&nbsp;changes above is:src\/pages\/about.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{  site {    siteMetadata {      title    }  }}<\/code><\/pre>\n\n\n\n<p>In&nbsp;part five, you\u2019ll meet a tool that lets us interactively explore the data available through GraphQL, and help formulate queries like the one above.<\/p>\n\n\n\n<p>Page queries live outside of the component definition \u2014 by convention at the end of a page component file \u2014 and are only available on page components.<\/p>\n\n\n\n<h3 id=\"use-a-staticquery\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-four\/#use-a-staticquery\"><\/a>Use a StaticQuery<\/h3>\n\n\n\n<p>StaticQuery&nbsp;is a new API introduced in Gatsby v2 that allows non-page components (like your&nbsp;<code>layout.js<\/code>&nbsp;component), to retrieve data via GraphQL queries. Let\u2019s use its newly introduced hook version \u2014&nbsp;<a href=\"https:\/\/www.gatsbyjs.org\/docs\/use-static-query\/\"><code>useStaticQuery<\/code><\/a>.<\/p>\n\n\n\n<p>Go ahead and make some changes to your&nbsp;<code>src\/components\/layout.js<\/code>&nbsp;file to use the&nbsp;<code>useStaticQuery<\/code>&nbsp;hook and a&nbsp;<code>{data.site.siteMetadata.title}<\/code>&nbsp;reference that uses this data. When you are done, your file will look like this:src\/components\/layout.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { css } from \"@emotion\/core\"import { useStaticQuery, Link, graphql } from \"gatsby\"import { rhythm } from \"..\/utils\/typography\"export default function Layout({ children }) {  const data = useStaticQuery(    graphql`      query {        site {          siteMetadata {            title          }        }      }    `  )  return (    &lt;div      css={css`        margin: 0 auto;        max-width: 700px;        padding: ${rhythm(2)};        padding-top: ${rhythm(1.5)};      `}    >      &lt;Link to={`\/`}>        &lt;h3          css={css`            margin-bottom: ${rhythm(2)};            display: inline-block;            font-style: normal;          `}        >          {data.site.siteMetadata.title}        &lt;\/h3>      &lt;\/Link>      &lt;Link        to={`\/about\/`}        css={css`          float: right;        `}      >        About      &lt;\/Link>      {children}    &lt;\/div>  )}<\/code><\/pre>\n\n\n\n<p>Another success! &#x1f389;<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/500fd2f12d69813d2bbe6d669eaf3ce8\/8ce52\/site-metadata-two-titles.png\" alt=\"Page title and layout title both pulling from siteMetadata\" title=\"Page title and layout title both pulling from siteMetadata\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/500fd2f12d69813d2bbe6d669eaf3ce8\/8ce52\/site-metadata-two-titles.png\"><\/a><\/p>\n\n\n\n<p>Why use two different queries here? These examples were quick introductions to the query types, how they are formatted, and where they can be used. For now, keep in mind that only pages can make page queries. Non-page components, such as Layout, can use StaticQuery.&nbsp;Part 7&nbsp;of the tutorial explains these in greater depth.<\/p>\n\n\n\n<p>But let\u2019s restore the real title.<\/p>\n\n\n\n<p>One of the core principles of Gatsby is that&nbsp;<em>creators need an immediate connection to what they\u2019re creating<\/em>&nbsp;(hat tip to Bret Victor). In other words, when you make any change to code you should immediately see the effect of that change. You manipulate an input of Gatsby and you see the new output showing up on the screen.<\/p>\n\n\n\n<p>So almost everywhere, changes you make will immediately take effect. Edit the&nbsp;<code>gatsby-config.js<\/code>&nbsp;file again, this time changing the&nbsp;<code>title<\/code>&nbsp;back to \u201cPandas Eating Lots\u201d. The change should show up very quickly in your site pages.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/550fbd5e51d2ec54cad87687acb76a06\/c5bb3\/pandas-eating-lots-titles.png\" alt=\"Both titles say Pandas Eating Lots\" title=\"Both titles say Pandas Eating Lots\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/550fbd5e51d2ec54cad87687acb76a06\/c5bb3\/pandas-eating-lots-titles.png\"><\/a><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>When building sites, you\u2019ll probably want to reuse common bits of data \u2014 like the&nbsp;site title&nbsp;for example. Look at the&nbsp;\/about\/&nbsp;page. You\u2019ll notice that you have the site title (Pandas Eating Lots) in both the layout component (the site header) as well as in the&nbsp;&lt;h1 \/&gt;&nbsp;of the&nbsp;about.js&nbsp;page (the page header). But what if you want to&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/your-first-graphql-query\/\">Continue reading <span class=\"screen-reader-text\">Your first GraphQL query<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 554,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/159"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=159"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/159\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=159"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=159"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=159"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 160,
        "date": "2020-05-27T10:42:41",
        "date_gmt": "2020-05-27T10:42:41",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=160"
        },
        "modified": "2020-05-27T10:42:41",
        "modified_gmt": "2020-05-27T10:42:41",
        "slug": "introducing-graphiql",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/introducing-graphiql\/",
        "title": {
            "rendered": "Introducing GraphiQL"
        },
        "content": {
            "rendered": "\n<p>GraphQL is the GraphQL integrated development environment (IDE). It\u2019s a powerful (and all-around awesome) tool you\u2019ll use often while building Gatsby websites.<\/p>\n\n\n\n<p>Poke around the built-in&nbsp;<code>Site<\/code>&nbsp;\u201ctype\u201d and see what fields are available on it \u2014 including the&nbsp;<code>siteMetadata<\/code>&nbsp;object you queried earlier. Try opening GraphiQL and play with your data! Press&nbsp;<kbd>Ctrl + Space<\/kbd>&nbsp;(or use&nbsp;<kbd>Shift + Space<\/kbd>&nbsp;as an alternate keyboard shortcut) to bring up the autocomplete window and&nbsp;<kbd>Ctrl + Enter<\/kbd>&nbsp;to run the GraphQL query. You\u2019ll be using GraphiQL a lot more through the remainder of the tutorial.<\/p>\n\n\n\n<h2 id=\"using-the-graphiql-explorer\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-five\/#using-the-graphiql-explorer\"><\/a>Using the GraphQL Explorer<\/h2>\n\n\n\n<p>The GraphQL Explorer enables you to interactively construct full queries by clicking through available fields and inputs without the repetitive process of typing these queries out by hand.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>GraphQL is the GraphQL integrated development environment (IDE). It\u2019s a powerful (and all-around awesome) tool you\u2019ll use often while building Gatsby websites. Poke around the built-in&nbsp;Site&nbsp;\u201ctype\u201d and see what fields are available on it \u2014 including the&nbsp;siteMetadata&nbsp;object you queried earlier. Try opening GraphiQL and play with your data! Press&nbsp;Ctrl + Space&nbsp;(or use&nbsp;Shift + Space&nbsp;as an&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/introducing-graphiql\/\">Continue reading <span class=\"screen-reader-text\">Introducing GraphiQL<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 522,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/160"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=160"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/160\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=160"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=160"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=160"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 161,
        "date": "2020-05-27T10:44:11",
        "date_gmt": "2020-05-27T10:44:11",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=161"
        },
        "modified": "2020-05-27T10:44:11",
        "modified_gmt": "2020-05-27T10:44:11",
        "slug": "source-plugins",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/source-plugins\/",
        "title": {
            "rendered": "Source plugins"
        },
        "content": {
            "rendered": "\n<p>Data in Gatsby sites can come from anywhere: APIs, databases, CMSs, local files, etc.<\/p>\n\n\n\n<p>Source plugins fetch data from their source. E.g. the filesystem source plugin knows how to fetch data from the file system. The WordPress plugin knows how to fetch data from the WordPress API.<\/p>\n\n\n\n<p>Add&nbsp;<code>gatsby-source-filesystem<\/code>&nbsp;and explore how it works.<\/p>\n\n\n\n<p>First, install the plugin at the root of the project:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save gatsby-source-filesystem<\/code><\/pre>\n\n\n\n<p>Then add it to your&nbsp;<code>gatsby-config.js<\/code>:gatsby-config.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>module.exports = {  siteMetadata: {    title: `Pandas Eating Lots`,  },  plugins: &#91;    {      resolve: `gatsby-source-filesystem`,      options: {        name: `src`,        path: `${__dirname}\/src\/`,      },    },    `gatsby-plugin-emotion`,    {      resolve: `gatsby-plugin-typography`,      options: {        pathToConfigModule: `src\/utils\/typography`,      },    },  ],}<\/code><\/pre>\n\n\n\n<p>Save that and restart the gatsby development server. Then open up GraphiQL again.<\/p>\n\n\n\n<p>In the explorer pane, you\u2019ll see&nbsp;<code>allFile<\/code>&nbsp;and&nbsp;<code>file<\/code>&nbsp;available as selections:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/88ec3efe94e380d32bc1a20cd82dd8bf\/321ea\/graphiql-filesystem.png\" alt=\"graphiql-filesystem\" title=\"graphiql-filesystem\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/88ec3efe94e380d32bc1a20cd82dd8bf\/373fb\/graphiql-filesystem.png\"><\/a><\/p>\n\n\n\n<p>Click the&nbsp;<code>allFile<\/code>&nbsp;dropdown. Position your cursor after&nbsp;<code>allFile<\/code>&nbsp;in the query area, and then type&nbsp;<kbd>Ctrl + Enter<\/kbd>. This will pre-fill a query for the&nbsp;<code>id<\/code>&nbsp;of each file. Press \u201cPlay\u201d to run the query:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/cf2ffc2f9d3aa512fb742efd377691da\/321ea\/filesystem-query.png\" alt=\"filesystem-query\" title=\"filesystem-query\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/cf2ffc2f9d3aa512fb742efd377691da\/1d7f7\/filesystem-query.png\"><\/a><\/p>\n\n\n\n<p>In the Explorer pane, the&nbsp;<code>id<\/code>&nbsp;field has automatically been selected. Make selections for more fields by checking the field\u2019s corresponding checkbox. Press \u201cPlay\u201d to run the query again, with the new fields:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/d430ba8bcbc8eb92cd549b70f3798561\/321ea\/filesystem-explorer-options.png\" alt=\"filesystem-explorer-options\" title=\"filesystem-explorer-options\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/d430ba8bcbc8eb92cd549b70f3798561\/10c1e\/filesystem-explorer-options.png\"><\/a><\/p>\n\n\n\n<p>Alternatively, you can add fields by using the autocomplete shortcut (<kbd>Ctrl + Space<\/kbd>). This will show queryable fields on the&nbsp;<code>File<\/code>&nbsp;nodes.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/b2b05958c518b34568861f40449228f4\/321ea\/filesystem-autocomplete.png\" alt=\"filesystem-autocomplete\" title=\"filesystem-autocomplete\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/b2b05958c518b34568861f40449228f4\/8c48a\/filesystem-autocomplete.png\"><\/a><\/p>\n\n\n\n<p>Try adding a number of fields to your query, press&nbsp;<kbd>Ctrl + Enter<\/kbd>&nbsp;each time to re-run the query. You\u2019ll see the updated query results:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/077caa982416bc5df87e31f21a1a3417\/321ea\/allfile-query.png\" alt=\"allfile-query\" title=\"allfile-query\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/077caa982416bc5df87e31f21a1a3417\/eff3b\/allfile-query.png\"><\/a><\/p>\n\n\n\n<p>The result is an array of&nbsp;<code>File<\/code>&nbsp;\u201cnodes\u201d (node is a fancy name for an object in a \u201cgraph\u201d). Each&nbsp;<code>File<\/code>&nbsp;node object has the fields you queried for.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Data in Gatsby sites can come from anywhere: APIs, databases, CMSs, local files, etc. Source plugins fetch data from their source. E.g. the filesystem source plugin knows how to fetch data from the file system. The WordPress plugin knows how to fetch data from the WordPress API. Add&nbsp;gatsby-source-filesystem&nbsp;and explore how it works. First, install the&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/source-plugins\/\">Continue reading <span class=\"screen-reader-text\">Source plugins<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 523,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/161"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=161"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/161\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=161"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=161"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=161"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 162,
        "date": "2020-05-27T10:45:44",
        "date_gmt": "2020-05-27T10:45:44",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=162"
        },
        "modified": "2020-05-27T10:45:44",
        "modified_gmt": "2020-05-27T10:45:44",
        "slug": "build-a-page-with-a-graphql-query",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/build-a-page-with-a-graphql-query\/",
        "title": {
            "rendered": "Build a page with a GraphQL query"
        },
        "content": {
            "rendered": "\n<p>Building new pages with Gatsby often starts in GraphiQL. You first sketch out the data query by playing in GraphiQL then copy this to a React page component to start building the UI.<\/p>\n\n\n\n<p>Let\u2019s try this.<\/p>\n\n\n\n<p>Create a new file at&nbsp;<code>src\/pages\/my-files.js<\/code>&nbsp;with the&nbsp;<code>allFile<\/code>&nbsp;GraphQL query you just created:src\/pages\/my-files.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { graphql } from \"gatsby\"import Layout from \"..\/components\/layout\"export default function MyFiles({ data }) {  console.log(data)  return (    &lt;Layout>      &lt;div>Hello world&lt;\/div>    &lt;\/Layout>  )}export const query = graphql`  query {    allFile {      edges {        node {          relativePath          prettySize          extension          birthTime(fromNow: true)        }      }    }  }`<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>console.log(data)<\/code>&nbsp;line is highlighted above. It\u2019s often helpful when creating a new component to console out the data you\u2019re getting from the GraphQL query so you can explore the data in your browser console while building the UI.<\/p>\n\n\n\n<p>If you visit the new page at&nbsp;<code>\/my-files\/<\/code>&nbsp;and open up your browser console you will see something like:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/3fd681a2f33d483a82d067b07704f7e5\/321ea\/data-in-console.png\" alt=\"data-in-console\" title=\"data-in-console\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/3fd681a2f33d483a82d067b07704f7e5\/fbf08\/data-in-console.png\"><\/a><\/p>\n\n\n\n<p>The shape of the data matches the shape of the GraphQL query.<\/p>\n\n\n\n<p>Add some code to your component to print out the File data.src\/pages\/my-files.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { graphql } from \"gatsby\"import Layout from \"..\/components\/layout\"export default function MyFiles({ data }) {  console.log(data)  return (    &lt;Layout>      &lt;div>        &lt;h1>My Site's Files&lt;\/h1>        &lt;table>          &lt;thead>            &lt;tr>              &lt;th>relativePath&lt;\/th>              &lt;th>prettySize&lt;\/th>              &lt;th>extension&lt;\/th>              &lt;th>birthTime&lt;\/th>            &lt;\/tr>          &lt;\/thead>          &lt;tbody>            {data.allFile.edges.map(({ node }, index) => (              &lt;tr key={index}>                &lt;td>{node.relativePath}&lt;\/td>                &lt;td>{node.prettySize}&lt;\/td>                &lt;td>{node.extension}&lt;\/td>                &lt;td>{node.birthTime}&lt;\/td>              &lt;\/tr>            ))}          &lt;\/tbody>        &lt;\/table>      &lt;\/div>    &lt;\/Layout>  )}export const query = graphql`  query {    allFile {      edges {        node {          relativePath          prettySize          extension          birthTime(fromNow: true)        }      }    }  }`<\/code><\/pre>\n\n\n\n<p>And now visit&nbsp;<code>http:\/\/localhost:8000\/my-files<\/code>\u2026 &#x1f632;<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/d5507ac06a742b5fe3a91a40f9c3148a\/321ea\/my-files-page.png\" alt=\"my-files-page\" title=\"my-files-page\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/d5507ac06a742b5fe3a91a40f9c3148a\/1ffbd\/my-files-page.png\"><\/a><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Building new pages with Gatsby often starts in GraphiQL. You first sketch out the data query by playing in GraphiQL then copy this to a React page component to start building the UI. Let\u2019s try this. Create a new file at&nbsp;src\/pages\/my-files.js&nbsp;with the&nbsp;allFile&nbsp;GraphQL query you just created:src\/pages\/my-files.js The&nbsp;console.log(data)&nbsp;line is highlighted above. It\u2019s often helpful when creating&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/build-a-page-with-a-graphql-query\/\">Continue reading <span class=\"screen-reader-text\">Build a page with a GraphQL query<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 524,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/162"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=162"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/162\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=162"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=162"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=162"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 163,
        "date": "2020-05-27T10:47:25",
        "date_gmt": "2020-05-27T10:47:25",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=163"
        },
        "modified": "2020-05-27T10:47:25",
        "modified_gmt": "2020-05-27T10:47:25",
        "slug": "transformer-plugins",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/transformer-plugins\/",
        "title": {
            "rendered": "Transformer plugins"
        },
        "content": {
            "rendered": "\n<p>Often, the format of the data you get from source plugins isn\u2019t what you want to use to build your website. The filesystem source plugin lets you query data&nbsp;<em>about<\/em>&nbsp;files but what if you want to query data&nbsp;<em>inside<\/em>&nbsp;files?<\/p>\n\n\n\n<p>To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and&nbsp;<em>transform<\/em>&nbsp;it into something more usable.<\/p>\n\n\n\n<p>For example, markdown files. Markdown is nice to write in but when you build a page with it, you need the markdown to be HTML.<\/p>\n\n\n\n<p>Add a markdown file to your site at&nbsp;<code>src\/pages\/sweet-pandas-eating-sweets.md<\/code>&nbsp;(This will become your first markdown blog post) and learn how to&nbsp;<em>transform<\/em>&nbsp;it to HTML using transformer plugins and GraphQL.src\/pages\/sweet-pandas-eating-sweets.md<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>---title: \"Sweet Pandas Eating Sweets\"date: \"2017-08-10\"---Pandas are really sweet.Here's a video of a panda eating sweets.&lt;iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/4n0xNbfJLR8\" frameborder=\"0\" allowfullscreen>&lt;\/iframe><\/code><\/pre>\n\n\n\n<p>Once you save the file, look at&nbsp;<code>\/my-files\/<\/code>&nbsp;again\u2014the new markdown file is in the table. This is a very powerful feature of Gatsby. Like the earlier&nbsp;<code>siteMetadata<\/code>&nbsp;example, source plugins can live-reload data.&nbsp;<code>gatsby-source-filesystem<\/code>&nbsp;is always scanning for new files to be added and when they are, re-runs your queries.<\/p>\n\n\n\n<p>Add a transformer plugin that can transform markdown files:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save gatsby-transformer-remark<\/code><\/pre>\n\n\n\n<p>Then add it to the&nbsp;<code>gatsby-config.js<\/code>&nbsp;like normal:gatsby-config.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>module.exports = {  siteMetadata: {    title: `Pandas Eating Lots`,  },  plugins: &#91;    {      resolve: `gatsby-source-filesystem`,      options: {        name: `src`,        path: `${__dirname}\/src\/`,      },    },    `gatsby-transformer-remark`,    `gatsby-plugin-emotion`,    {      resolve: `gatsby-plugin-typography`,      options: {        pathToConfigModule: `src\/utils\/typography`,      },    },  ],}<\/code><\/pre>\n\n\n\n<p>Restart the development server then refresh (or open again) GraphiQL and look at the autocomplete:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/646695e05a4aafdf903b727c8013f6b7\/321ea\/markdown-autocomplete.png\" alt=\"markdown-autocomplete\" title=\"markdown-autocomplete\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/646695e05a4aafdf903b727c8013f6b7\/7bf07\/markdown-autocomplete.png\"><\/a><\/p>\n\n\n\n<p>Select&nbsp;<code>allMarkdownRemark<\/code>&nbsp;again and run it as you did for&nbsp;<code>allFile<\/code>. You\u2019ll see there the markdown file you recently added. Explore the fields that are available on the&nbsp;<code>MarkdownRemark<\/code>&nbsp;node.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/26081bb3e08de00f1d878b807b552daf\/321ea\/markdown-query.png\" alt=\"markdown-query\" title=\"markdown-query\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/26081bb3e08de00f1d878b807b552daf\/ca3c3\/markdown-query.png\"><\/a><\/p>\n\n\n\n<p>Ok! Hopefully, some basics are starting to fall into place. Source plugins bring data&nbsp;<em>into<\/em>&nbsp;Gatsby\u2019s data system and&nbsp;<em>transformer<\/em>&nbsp;plugins transform raw content brought by source plugins. This pattern can handle all data sourcing and data transformation you might need when building a Gatsby site.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Often, the format of the data you get from source plugins isn\u2019t what you want to use to build your website. The filesystem source plugin lets you query data&nbsp;about&nbsp;files but what if you want to query data&nbsp;inside&nbsp;files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and&nbsp;transform&nbsp;it into something&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/transformer-plugins\/\">Continue reading <span class=\"screen-reader-text\">Transformer plugins<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 525,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/163"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=163"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/163\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=163"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=163"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=163"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 164,
        "date": "2020-05-27T10:48:59",
        "date_gmt": "2020-05-27T10:48:59",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=164"
        },
        "modified": "2020-05-27T10:48:59",
        "modified_gmt": "2020-05-27T10:48:59",
        "slug": "create-a-list-of-your-sites-markdown-files-in",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/create-a-list-of-your-sites-markdown-files-in\/",
        "title": {
            "rendered": "Create a list of your site\u2019s markdown files in"
        },
        "content": {
            "rendered": "\n<h2 id=\"create-a-list-of-your-sites-markdown-files-in-srcpagesindexjs\"><code>src\/pages\/index.js<\/code><\/h2>\n\n\n\n<p>Now you\u2019ll have to create a list of your markdown files on the front page. Like many blogs, you want to end up with a list of links on the front page pointing to each blog post. With GraphQL you can&nbsp;<em>query<\/em>&nbsp;for the current list of markdown blog posts so you won\u2019t need to maintain the list manually.<\/p>\n\n\n\n<p>Like with the&nbsp;<code>src\/pages\/my-files.js<\/code>&nbsp;page, replace&nbsp;<code>src\/pages\/index.js<\/code>&nbsp;with the following to add a GraphQL query with some initial HTML and styling.src\/pages\/index.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { graphql } from \"gatsby\"import { css } from \"@emotion\/core\"import { rhythm } from \"..\/utils\/typography\"import Layout from \"..\/components\/layout\"export default function Home({ data }) {  console.log(data)  return (    &lt;Layout>      &lt;div>        &lt;h1          css={css`            display: inline-block;            border-bottom: 1px solid;          `}        >          Amazing Pandas Eating Things        &lt;\/h1>        &lt;h4>{data.allMarkdownRemark.totalCount} Posts&lt;\/h4>        {data.allMarkdownRemark.edges.map(({ node }) => (          &lt;div key={node.id}>            &lt;h3              css={css`                margin-bottom: ${rhythm(1 \/ 4)};              `}            >              {node.frontmatter.title}{\" \"}              &lt;span                css={css`                  color: #bbb;                `}              >                \u2014 {node.frontmatter.date}              &lt;\/span>            &lt;\/h3>            &lt;p>{node.excerpt}&lt;\/p>          &lt;\/div>        ))}      &lt;\/div>    &lt;\/Layout>  )}export const query = graphql`  query {    allMarkdownRemark {      totalCount      edges {        node {          id          frontmatter {            title            date(formatString: \"DD MMMM, YYYY\")          }          excerpt        }      }    }  }`<\/code><\/pre>\n\n\n\n<p>Now the frontpage should look like:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/c12c3c281af8226af74349e0f316b797\/321ea\/frontpage.png\" alt=\"frontpage\" title=\"frontpage\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/c12c3c281af8226af74349e0f316b797\/ca3c3\/frontpage.png\"><\/a><\/p>\n\n\n\n<p>But your one blog post looks a bit lonely. So let\u2019s add another one at&nbsp;<code>src\/pages\/pandas-and-bananas.md<\/code>src\/pages\/pandas-and-bananas.md<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>---title: \"Pandas and Bananas\"date: \"2017-08-21\"---Do Pandas eat bananas? Check out this short video that shows that yes! pandas do seem to really enjoy bananas!&lt;iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/4SZl1r2O_bY\" frameborder=\"0\" allowfullscreen>&lt;\/iframe><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/d7b4537b69b87253593231268802baaa\/321ea\/two-posts.png\" alt=\"two-posts\" title=\"two-posts\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/d7b4537b69b87253593231268802baaa\/ca3c3\/two-posts.png\"><\/a><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>src\/pages\/index.js Now you\u2019ll have to create a list of your markdown files on the front page. Like many blogs, you want to end up with a list of links on the front page pointing to each blog post. With GraphQL you can&nbsp;query&nbsp;for the current list of markdown blog posts so you won\u2019t need to maintain&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/create-a-list-of-your-sites-markdown-files-in\/\">Continue reading <span class=\"screen-reader-text\">Create a list of your site\u2019s markdown files in<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 526,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/164"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=164"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/164\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=164"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=164"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=164"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 171,
        "date": "2020-05-27T11:24:23",
        "date_gmt": "2020-05-27T11:24:23",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=171"
        },
        "modified": "2020-05-27T11:24:23",
        "modified_gmt": "2020-05-27T11:24:23",
        "slug": "creating-slugs-for-pages",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/creating-slugs-for-pages\/",
        "title": {
            "rendered": "Creating slugs for pages"
        },
        "content": {
            "rendered": "\n<p>A \u2018slug\u2019 is the unique identifying part of a web address, such as the&nbsp;<code>\/tutorial\/part-seven<\/code>&nbsp;part of the page&nbsp;<code>https:\/\/www.gatsbyjs.org\/tutorial\/part-seven\/<\/code>.<\/p>\n\n\n\n<p>It is also referred to as the \u2018path\u2019 but this tutorial will use the term \u2018slug\u2019 for consistency.<\/p>\n\n\n\n<p>Creating new pages has two steps:<\/p>\n\n\n\n<ol><li>Generate the \u201cpath\u201d or \u201cslug\u201d for the page.<\/li><li>Create the page.<\/li><\/ol>\n\n\n\n<p><em><strong>Note<\/strong>: Often data sources will directly provide a slug or pathname for content \u2014 when working with one of those systems (e.g. a CMS), you don\u2019t need to create the slugs yourself as you do with markdown files.<\/em><\/p>\n\n\n\n<p>To create your markdown pages, you\u2019ll learn to use two Gatsby APIs:&nbsp;<a href=\"https:\/\/www.gatsbyjs.org\/docs\/node-apis\/#onCreateNode\"><code>onCreateNode<\/code><\/a>&nbsp;and&nbsp;<a href=\"https:\/\/www.gatsbyjs.org\/docs\/node-apis\/#createPages\"><code>createPages<\/code><\/a>. These are two workhorse APIs you\u2019ll see used in many sites and plugins.<\/p>\n\n\n\n<p>We do our best to make Gatsby APIs simple to implement. To implement an API, you export a function with the name of the API from&nbsp;<code>gatsby-node.js<\/code>.<\/p>\n\n\n\n<p>So, here\u2019s where you\u2019ll do that. In the root of your site, create a file named&nbsp;<code>gatsby-node.js<\/code>. Then add the following.gatsby-node.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.onCreateNode = ({ node }) => {  console.log(node.internal.type)}<\/code><\/pre>\n\n\n\n<p>This&nbsp;<code>onCreateNode<\/code>&nbsp;function will be called by Gatsby whenever a new node is created (or updated).<\/p>\n\n\n\n<p>Stop and restart the development server. As you do, you\u2019ll see quite a few newly created nodes get logged to the terminal console.<\/p>\n\n\n\n<p>In the next section, you will use this API to add slugs for your Markdown pages to&nbsp;<code>MarkdownRemark<\/code>&nbsp;nodes.<\/p>\n\n\n\n<p>Change your function so it now only logs&nbsp;<code>MarkdownRemark<\/code>&nbsp;nodes.gatsby-node.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.onCreateNode = ({ node }) => {  if (node.internal.type === `MarkdownRemark`) {    console.log(node.internal.type)  }}<\/code><\/pre>\n\n\n\n<p>You want to use each markdown file name to create the page slug. So&nbsp;<code>pandas-and-bananas.md<\/code>&nbsp;will become&nbsp;<code>\/pandas-and-bananas\/<\/code>. But how do you get the file name from the&nbsp;<code>MarkdownRemark<\/code>&nbsp;node? To get it, you need to&nbsp;<em>traverse<\/em>&nbsp;the \u201cnode graph\u201d to its&nbsp;<em>parent<\/em>&nbsp;<code>File<\/code>&nbsp;node, as&nbsp;<code>File<\/code>&nbsp;nodes contain data you need about files on disk. To do that, you\u2019ll use the&nbsp;<a href=\"https:\/\/www.gatsbyjs.org\/docs\/node-api-helpers\/#getNode\"><code>getNode()<\/code><\/a>&nbsp;helper. Add it to&nbsp;<code>onCreateNode<\/code>\u2019s function parameters, and call it to get the file node:gatsby-node.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.onCreateNode = ({ node, getNode }) => {  if (node.internal.type === `MarkdownRemark`) {    const fileNode = getNode(node.parent)    console.log(`\\n`, fileNode.relativePath)  }}<\/code><\/pre>\n\n\n\n<p>After restarting your development server, you should see the relative paths for your two markdown files print to the terminal screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/01e3ab44062c37f7f8c749101e8b8915\/4971b\/markdown-relative-path.png\" alt=\"markdown-relative-path\" title=\"markdown-relative-path\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/01e3ab44062c37f7f8c749101e8b8915\/4971b\/markdown-relative-path.png\"><\/a><\/p>\n\n\n\n<p>Now you\u2019ll have to create slugs. As the logic for creating slugs from file names can get tricky, the&nbsp;<code>gatsby-source-filesystem<\/code>&nbsp;plugin ships with a function for creating slugs. Let\u2019s use that.gatsby-node.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const { createFilePath } = require(`gatsby-source-filesystem`)exports.onCreateNode = ({ node, getNode }) => {  if (node.internal.type === `MarkdownRemark`) {    console.log(createFilePath({ node, getNode, basePath: `pages` }))  }}<\/code><\/pre>\n\n\n\n<p>The function handles finding the parent&nbsp;<code>File<\/code>&nbsp;node along with creating the slug. Run the development server again and you should see logged to the terminal two slugs, one for each markdown file.<\/p>\n\n\n\n<p>Now you can add your new slugs directly onto the&nbsp;<code>MarkdownRemark<\/code>&nbsp;nodes. This is powerful, as any data you add to nodes is available to query later with GraphQL. So, it\u2019ll be easy to get the slug when it comes time to create the pages.<\/p>\n\n\n\n<p>To do so, you\u2019ll use a function passed to your API implementation called&nbsp;<a href=\"https:\/\/www.gatsbyjs.org\/docs\/actions\/#createNodeField\"><code>createNodeField<\/code><\/a>. This function allows you to create additional fields on nodes created by other plugins. Only the original creator of a node can directly modify the node\u2014all other plugins (including your&nbsp;<code>gatsby-node.js<\/code>) must use this function to create additional fields.gatsby-node.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const { createFilePath } = require(`gatsby-source-filesystem`)exports.onCreateNode = ({ node, getNode, actions }) => {  const { createNodeField } = actions  if (node.internal.type === `MarkdownRemark`) {    const slug = createFilePath({ node, getNode, basePath: `pages` })    createNodeField({      node,      name: `slug`,      value: slug,    })  }}<\/code><\/pre>\n\n\n\n<p>Restart the development server and open or refresh GraphQL. Then run this GraphQL query to see your new slugs.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{  allMarkdownRemark {    edges {      node {        fields {          slug        }      }    }  }}<\/code><\/pre>\n\n\n\n<p>Now that the slugs are created, you can create the pages.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A \u2018slug\u2019 is the unique identifying part of a web address, such as the&nbsp;\/tutorial\/part-seven&nbsp;part of the page&nbsp;https:\/\/www.gatsbyjs.org\/tutorial\/part-seven\/. It is also referred to as the \u2018path\u2019 but this tutorial will use the term \u2018slug\u2019 for consistency. Creating new pages has two steps: Generate the \u201cpath\u201d or \u201cslug\u201d for the page. Create the page. Note: Often data&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/creating-slugs-for-pages\/\">Continue reading <span class=\"screen-reader-text\">Creating slugs for pages<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 527,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/171"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=171"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/171\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=171"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=171"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=171"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 172,
        "date": "2020-05-27T11:27:47",
        "date_gmt": "2020-05-27T11:27:47",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=172"
        },
        "modified": "2020-05-27T11:27:47",
        "modified_gmt": "2020-05-27T11:27:47",
        "slug": "creating-pages",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/creating-pages\/",
        "title": {
            "rendered": "Creating pages"
        },
        "content": {
            "rendered": "\n<p>In the same&nbsp;<code>gatsby-node.js<\/code>&nbsp;file, add the following.gatsby-node.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const { createFilePath } = require(`gatsby-source-filesystem`)exports.onCreateNode = ({ node, getNode, actions }) => {  const { createNodeField } = actions  if (node.internal.type === `MarkdownRemark`) {    const slug = createFilePath({ node, getNode, basePath: `pages` })    createNodeField({      node,      name: `slug`,      value: slug,    })  }}exports.createPages = async ({ graphql, actions }) => {  \/\/ **Note:** The graphql function call returns a Promise  \/\/ see: https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Promise for more info  const result = await graphql(`    query {      allMarkdownRemark {        edges {          node {            fields {              slug            }          }        }      }    }  `)  console.log(JSON.stringify(result, null, 4))}<\/code><\/pre>\n\n\n\n<p>You\u2019ve added an implementation of the&nbsp;<a href=\"https:\/\/www.gatsbyjs.org\/docs\/node-apis\/#createPages\"><code>createPages<\/code><\/a>&nbsp;API which Gatsby calls so plugins can add pages.<\/p>\n\n\n\n<p>As mentioned in the intro to this part of the tutorial, the steps to programmatically creating pages are:<\/p>\n\n\n\n<ol><li>Query data with GraphQL<\/li><li>Map the query results to pages<\/li><\/ol>\n\n\n\n<p>The above code is the first step for creating pages from your markdown as you\u2019re using the supplied&nbsp;<code>graphql<\/code>&nbsp;function to query the markdown slugs you created. Then you\u2019re logging out the result of the query which should look like:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/5193a6c95058806213c59a7bcf73d526\/321ea\/query-markdown-slugs.png\" alt=\"query-markdown-slugs\" title=\"query-markdown-slugs\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/5193a6c95058806213c59a7bcf73d526\/84bf8\/query-markdown-slugs.png\"><\/a><\/p>\n\n\n\n<p>You need one additional thing beyond a slug to create pages: a page template component. Like everything in Gatsby, programmatic pages are powered by React components. When creating a page, you need to specify which component to use.<\/p>\n\n\n\n<p>Create a directory at&nbsp;<code>src\/templates<\/code>, and then add the following in a file named&nbsp;<code>src\/templates\/blog-post.js<\/code>.src\/templates\/blog-post.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import Layout from \"..\/components\/layout\"export default function BlogPost() {  return (    &lt;Layout>      &lt;div>Hello blog post&lt;\/div>    &lt;\/Layout>  )}<\/code><\/pre>\n\n\n\n<p>Then update&nbsp;<code>gatsby-node.js<\/code>gatsby-node.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const path = require(`path`)const { createFilePath } = require(`gatsby-source-filesystem`)exports.onCreateNode = ({ node, getNode, actions }) => {  const { createNodeField } = actions  if (node.internal.type === `MarkdownRemark`) {    const slug = createFilePath({ node, getNode, basePath: `pages` })    createNodeField({      node,      name: `slug`,      value: slug,    })  }}exports.createPages = async ({ graphql, actions }) => {  const { createPage } = actions  const result = await graphql(`    query {      allMarkdownRemark {        edges {          node {            fields {              slug            }          }        }      }    }  `)  result.data.allMarkdownRemark.edges.forEach(({ node }) => {    createPage({      path: node.fields.slug,      component: path.resolve(`.\/src\/templates\/blog-post.js`),      context: {        \/\/ Data passed to context is available        \/\/ in page queries as GraphQL variables.        slug: node.fields.slug,      },    })  })}<\/code><\/pre>\n\n\n\n<p>Restart the development server and your pages will be created! An easy way to find new pages you create while developing is to go to a random path where Gatsby will helpfully show you a list of pages on the site. If you go to&nbsp;<code>http:\/\/localhost:8000\/sdf<\/code>, you\u2019ll see the new pages you created.<\/p>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In the same&nbsp;gatsby-node.js&nbsp;file, add the following.gatsby-node.js You\u2019ve added an implementation of the&nbsp;createPages&nbsp;API which Gatsby calls so plugins can add pages. As mentioned in the intro to this part of the tutorial, the steps to programmatically creating pages are: Query data with GraphQL Map the query results to pages The above code is the first step&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/creating-pages\/\">Continue reading <span class=\"screen-reader-text\">Creating pages<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 528,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/172"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=172"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/172\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=172"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=172"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=172"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 173,
        "date": "2020-05-27T11:34:57",
        "date_gmt": "2020-05-27T11:34:57",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=173"
        },
        "modified": "2020-05-27T11:34:57",
        "modified_gmt": "2020-05-27T11:34:57",
        "slug": "audit-with-lighthouse",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/audit-with-lighthouse\/",
        "title": {
            "rendered": "Audit with Lighthouse"
        },
        "content": {
            "rendered": "\n<blockquote class=\"wp-block-quote\"><p>Lighthouse is an open-source, automated tool for improving the quality of web pages. You can run it against any web page, public or requiring authentication. It has audits for performance, accessibility, progressive web apps (PWAs), and more.<\/p><\/blockquote>\n\n\n\n<p>Lighthouse is included in Chrome DevTools. Running its audit \u2014 and then addressing the errors it finds and implementing the improvements it suggests \u2014 is a great way to prepare your site to go live. It helps give you confidence that your site is as fast and accessible as possible.<\/p>\n\n\n\n<p>Try it out!<\/p>\n\n\n\n<p>First, you need to create a production build of your Gatsby site. The Gatsby development server is optimized for making development fast; But the site that it generates, while closely resembling a production version of the site, isn\u2019t as optimized.<\/p>\n\n\n\n<h3 id=\"-create-a-production-build\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-eight\/#-create-a-production-build\"><\/a>&#x270b; Create a production build<\/h3>\n\n\n\n<ol><li>Stop the development server (if it\u2019s still running) and run the following command:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby build<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#x1f4a1; As you learned in&nbsp;part 1, this does a production build of your site and outputs the built static files into the&nbsp;<code>public<\/code>&nbsp;directory.<\/p><\/blockquote>\n\n\n\n<ol start=\"2\"><li>View the production site locally. Run:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>gatsby serve<\/code><\/pre>\n\n\n\n<p>Once this starts, you can view your site at&nbsp;<code>http:\/\/localhost:9000<\/code>.<\/p>\n\n\n\n<h3 id=\"run-a-lighthouse-audit\"><a href=\"https:\/\/www.gatsbyjs.org\/tutorial\/part-eight\/#run-a-lighthouse-audit\"><\/a>Run a Lighthouse audit<\/h3>\n\n\n\n<p>Now you\u2019re going to run your first Lighthouse test.<\/p>\n\n\n\n<ol><li>If you haven\u2019t already done so, open the site in Chrome Incognito Mode so no extensions interfere with the test. Then, open up the Chrome DevTools.<\/li><li>Click on the \u201cAudits\u201d tab where you\u2019ll see a screen that looks like:<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/cdc985b7497f4a6b99b6bbd19f9168fa\/321ea\/lighthouse-audit.png\" alt=\"Lighthouse audit start\" title=\"Lighthouse audit start\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/cdc985b7497f4a6b99b6bbd19f9168fa\/df56e\/lighthouse-audit.png\"><\/a><\/p>\n\n\n\n<ol start=\"3\"><li>Click \u201cPerform an audit\u2026\u201d (All available audit types should be selected by default). Then click \u201cRun audit\u201d. (It\u2019ll then take a minute or so to run the audit). Once the audit is complete, you should see results that look like this:<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.gatsbyjs.org\/static\/46b36f48f05e2a3ce358991fe95c5446\/321ea\/lighthouse-audit-results.png\" alt=\"Lighthouse audit results\" title=\"Lighthouse audit results\"\/><\/figure>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.gatsbyjs.org\/static\/46b36f48f05e2a3ce358991fe95c5446\/d7ceb\/lighthouse-audit-results.png\"><\/a><\/p>\n\n\n\n<p>As you can see, Gatsby\u2019s performance is excellent out of the box but you\u2019re missing some things for PWA, Accessibility, Best Practices, and SEO that will improve your scores (and in the process make your site much more friendly to visitors and search engines).<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Lighthouse is an open-source, automated tool for improving the quality of web pages. You can run it against any web page, public or requiring authentication. It has audits for performance, accessibility, progressive web apps (PWAs), and more. Lighthouse is included in Chrome DevTools. Running its audit \u2014 and then addressing the errors it finds and&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/audit-with-lighthouse\/\">Continue reading <span class=\"screen-reader-text\">Audit with Lighthouse<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 529,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/173"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=173"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/173\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=173"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=173"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=173"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4777,
        "date": "2020-05-27T11:40:14",
        "date_gmt": "2020-05-27T11:40:14",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=174"
        },
        "modified": "2020-05-27T11:40:14",
        "modified_gmt": "2020-05-27T11:40:14",
        "slug": "add-a-manifest-file",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/add-a-manifest-file\/",
        "title": {
            "rendered": "Add a manifest file"
        },
        "content": {
            "rendered": "\n<p>Looks like you have a pretty lackluster score in the \u201cProgressive Web App\u201d category. Let\u2019s address that.<\/p>\n\n\n\n<p>But first, what exactly&nbsp;<em>are<\/em>&nbsp;PWAs?<\/p>\n\n\n\n<p>They are regular websites that take advantage of modern browser functionality to augment the web experience with app-like features and benefits. Check out&nbsp;Google\u2019s overview&nbsp;of what defines a PWA experience.<\/p>\n\n\n\n<p>Inclusion of a web app manifest is one of the three generally accepted&nbsp;baseline requirements for a PWA.<\/p>\n\n\n\n<p>Quoting&nbsp;Google:<\/p>\n\n\n\n<p>The web app manifest is a simple JSON file that tells the browser about your web application and how it should behave when \u2018installed\u2019 on the user\u2019s mobile device or desktop.<\/p>\n\n\n\n<p>Gatsby\u2019s manifest plugin&nbsp;configures Gatsby to create a&nbsp;<code>manifest.webmanifest<\/code>&nbsp;file on every site build.<\/p>\n\n\n\n<h3 id=\"-using-gatsby-plugin-manifest\">Using&nbsp;<code>gatsby-plugin-manifest<\/code><\/h3>\n\n\n\n<ol><li>Install the plugin:<\/li><\/ol>\n\n\n\n<p><\/p>\n\n\n\n<ol start=\"2\"><li>Add a favicon for your app under&nbsp;<code>src\/images\/icon.png<\/code>. For the purposes of this tutorial you can use&nbsp;this example icon, should you not have one available. The icon is necessary to build all images for the manifest. For more information, look at the docs for&nbsp;<a href=\"https:\/\/github.com\/gatsbyjs\/gatsby\/blob\/master\/packages\/gatsby-plugin-manifest\/README.md\"><code>gatsby-plugin-manifest<\/code><\/a>.<\/li><li>Add the plugin to the&nbsp;<code>plugins<\/code>&nbsp;array in your&nbsp;<code>gatsby-config.js<\/code>&nbsp;file.<\/li><\/ol>\n\n\n\n<p>gatsby-config.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{  plugins: &#91;    {      resolve: `gatsby-plugin-manifest`,      options: {        name: `GatsbyJS`,        short_name: `GatsbyJS`,        start_url: `\/`,        background_color: `#6b37bf`,        theme_color: `#6b37bf`,        \/\/ Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)        \/\/ see https:\/\/developers.google.com\/web\/fundamentals\/web-app-manifest\/#display        display: `standalone`,        icon: `src\/images\/icon.png`, \/\/ This path is relative to the root of the site.      },    },  ]}<\/code><\/pre>\n\n\n\n<p>That\u2019s all you need to get started with adding a web manifest to a Gatsby site. The example given reflects a base configuration \u2014 Check out the&nbsp;plugin reference&nbsp;for more options.<\/p>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Looks like you have a pretty lackluster score in the \u201cProgressive Web App\u201d category. Let\u2019s address that. But first, what exactly&nbsp;are&nbsp;PWAs? They are regular websites that take advantage of modern browser functionality to augment the web experience with app-like features and benefits. Check out&nbsp;Google\u2019s overview&nbsp;of what defines a PWA experience. Inclusion of a web app&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/add-a-manifest-file\/\">Continue reading <span class=\"screen-reader-text\">Add a manifest file<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 530,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4777"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=4777"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/4777\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=4777"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=4777"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=4777"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 175,
        "date": "2020-05-27T11:41:24",
        "date_gmt": "2020-05-27T11:41:24",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=175"
        },
        "modified": "2020-05-27T11:41:24",
        "modified_gmt": "2020-05-27T11:41:24",
        "slug": "add-offline-support",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/add-offline-support\/",
        "title": {
            "rendered": "Add offline support"
        },
        "content": {
            "rendered": "\n<p>Another requirement for a website to qualify as a PWA is the use of a&nbsp;service worker. A service worker runs in the background, deciding to serve network or cached content based on connectivity, allowing for a seamless, managed offline experience.<\/p>\n\n\n\n<p>Gatsby\u2019s offline plugin&nbsp;makes a Gatsby site work offline and more resistant to bad network conditions by creating a service worker for your site.<\/p>\n\n\n\n<h3 id=\"-using-gatsby-plugin-offline\">Using&nbsp;<code>gatsby-plugin-offline<\/code><\/h3>\n\n\n\n<ol><li>Install the plugin:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save gatsby-plugin-offline<\/code><\/pre>\n\n\n\n<ol start=\"2\"><li>Add the plugin to the&nbsp;<code>plugins<\/code>&nbsp;array in your&nbsp;<code>gatsby-config.js<\/code>&nbsp;file.<\/li><\/ol>\n\n\n\n<p>gatsby-config.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{  plugins: &#91;    {      resolve: `gatsby-plugin-manifest`,      options: {        name: `GatsbyJS`,        short_name: `GatsbyJS`,        start_url: `\/`,        background_color: `#6b37bf`,        theme_color: `#6b37bf`,        \/\/ Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)        \/\/ see https:\/\/developers.google.com\/web\/fundamentals\/web-app-manifest\/#display        display: `standalone`,        icon: `src\/images\/icon.png`, \/\/ This path is relative to the root of the site.      },    },    `gatsby-plugin-offline`,  ]}<\/code><\/pre>\n\n\n\n<p>That\u2019s all you need to get started with service workers with Gatsby.<\/p>\n\n\n\n<p>&#x1f4a1; The offline plugin should be listed&nbsp;<em>after<\/em>&nbsp;the manifest plugin so that the offline plugin can cache the created&nbsp;<code>manifest.webmanifest<\/code>.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Another requirement for a website to qualify as a PWA is the use of a&nbsp;service worker. A service worker runs in the background, deciding to serve network or cached content based on connectivity, allowing for a seamless, managed offline experience. Gatsby\u2019s offline plugin&nbsp;makes a Gatsby site work offline and more resistant to bad network conditions&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/add-offline-support\/\">Continue reading <span class=\"screen-reader-text\">Add offline support<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 531,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/175"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=175"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/175\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=175"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=175"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=175"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 177,
        "date": "2020-05-27T11:43:45",
        "date_gmt": "2020-05-27T11:43:45",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=177"
        },
        "modified": "2020-05-27T11:43:45",
        "modified_gmt": "2020-05-27T11:43:45",
        "slug": "add-page-metadata",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/fullstack.smartstart.institute\/add-page-metadata\/",
        "title": {
            "rendered": "Add page metadata"
        },
        "content": {
            "rendered": "\n<p>Adding metadata to pages (such as a title or description) is key in helping search engines like Google understand your content and decide when to surface it in search results.<\/p>\n\n\n\n<p>React Helmet&nbsp;is a package that provides a React component interface for you to manage your&nbsp;document head.<\/p>\n\n\n\n<p>Gatsby\u2019s&nbsp;react helmet plugin&nbsp;provides drop-in support for server rendering data added with React Helmet. Using the plugin, attributes you add to React Helmet will be added to the static HTML pages that Gatsby builds.<\/p>\n\n\n\n<h3 id=\"-using-react-helmet-and-gatsby-plugin-react-helmet\">Using&nbsp;<code>React Helmet<\/code>&nbsp;and&nbsp;<code>gatsby-plugin-react-helmet<\/code><\/h3>\n\n\n\n<ol><li>Install both packages:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save gatsby-plugin-react-helmet react-helmet<\/code><\/pre>\n\n\n\n<ol start=\"2\"><li>Make sure you have a&nbsp;<code>description<\/code>&nbsp;and an&nbsp;<code>author<\/code>&nbsp;configured inside your&nbsp;<code>siteMetadata<\/code>&nbsp;object. Also, add the&nbsp;<code>gatsby-plugin-react-helmet<\/code>&nbsp;plugin to the&nbsp;<code>plugins<\/code>&nbsp;array in your&nbsp;<code>gatsby-config.js<\/code>&nbsp;file.<\/li><\/ol>\n\n\n\n<p>gatsby-config.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>module.exports = {  siteMetadata: {    title: `Pandas Eating Lots`,    description: `A simple description about pandas eating lots...`,    author: `gatsbyjs`,  },  plugins: &#91;    {      resolve: `gatsby-plugin-manifest`,      options: {        name: `GatsbyJS`,        short_name: `GatsbyJS`,        start_url: `\/`,        background_color: `#6b37bf`,        theme_color: `#6b37bf`,        \/\/ Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)        \/\/ see https:\/\/developers.google.com\/web\/fundamentals\/web-app-manifest\/#display        display: `standalone`,        icon: `src\/images\/icon.png`, \/\/ This path is relative to the root of the site.      },    },    `gatsby-plugin-offline`,    `gatsby-plugin-react-helmet`,  ],}<\/code><\/pre>\n\n\n\n<ol start=\"3\"><li>In the&nbsp;<code>src\/components<\/code>&nbsp;directory, create a file called&nbsp;<code>seo.js<\/code>&nbsp;and add the following:<\/li><\/ol>\n\n\n\n<p>src\/components\/seo.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import PropTypes from \"prop-types\"import { Helmet } from \"react-helmet\"import { useStaticQuery, graphql } from \"gatsby\"function SEO({ description, lang, meta, title }) {  const { site } = useStaticQuery(    graphql`      query {        site {          siteMetadata {            title            description            author          }        }      }    `  )  const metaDescription = description || site.siteMetadata.description  return (    &lt;Helmet      htmlAttributes={{        lang,      }}      title={title}      titleTemplate={`%s | ${site.siteMetadata.title}`}      meta={&#91;        {          name: `description`,          content: metaDescription,        },        {          property: `og:title`,          content: title,        },        {          property: `og:description`,          content: metaDescription,        },        {          property: `og:type`,          content: `website`,        },        {          name: `twitter:card`,          content: `summary`,        },        {          name: `twitter:creator`,          content: site.siteMetadata.author,        },        {          name: `twitter:title`,          content: title,        },        {          name: `twitter:description`,          content: metaDescription,        },      ].concat(meta)}    \/>  )}SEO.defaultProps = {  lang: `en`,  meta: &#91;],  description: ``,}SEO.propTypes = {  description: PropTypes.string,  lang: PropTypes.string,  meta: PropTypes.arrayOf(PropTypes.object),  title: PropTypes.string.isRequired,}export default SEO<\/code><\/pre>\n\n\n\n<p>The above code sets up defaults for your most common metadata tags and provides you an&nbsp;<code>&lt;SEO&gt;<\/code>&nbsp;component to work with in the rest of your project. Pretty cool, right?<\/p>\n\n\n\n<ol start=\"4\"><li>Now, you can use the&nbsp;<code>&lt;SEO&gt;<\/code>&nbsp;component in your templates and pages and pass props to it. For example, add it to your&nbsp;<code>blog-post.js<\/code>&nbsp;template like so:<\/li><\/ol>\n\n\n\n<p>src\/templates\/blog-post.js<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from \"react\"import { graphql } from \"gatsby\"import Layout from \"..\/components\/layout\"import SEO from \"..\/components\/seo\"export default function BlogPost({ data }) {  const post = data.markdownRemark  return (    &lt;Layout>      &lt;SEO title={post.frontmatter.title} description={post.excerpt} \/>      &lt;div>        &lt;h1>{post.frontmatter.title}&lt;\/h1>        &lt;div dangerouslySetInnerHTML={{ __html: post.html }} \/>      &lt;\/div>    &lt;\/Layout>  )}export const query = graphql`  query($slug: String!) {    markdownRemark(fields: { slug: { eq: $slug } }) {      html      frontmatter {        title      }      excerpt    }  }`<\/code><\/pre>\n\n\n\n<p>The above example is based off the&nbsp;Gatsby Starter Blog. By passing props to the&nbsp;<code>&lt;SEO&gt;<\/code>&nbsp;component, you can dynamically change the metadata for a post. In this case, the blog post&nbsp;<code>title<\/code>&nbsp;and&nbsp;<code>excerpt<\/code>&nbsp;(if it exists in the blog post markdown file) will be used instead of the default&nbsp;<code>siteMetadata<\/code>&nbsp;properties in your&nbsp;<code>gatsby-config.js<\/code>&nbsp;file.<\/p>\n\n\n\n<p>Now, if you run the Lighthouse audit again as laid out above, you should get close to\u2014if not a perfect\u2014 100 score!<\/p>\n\n\n\n<p>For further reading and examples, check out&nbsp;Adding an SEO Component&nbsp;and the&nbsp;React Helmet docs!<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Adding metadata to pages (such as a title or description) is key in helping search engines like Google understand your content and decide when to surface it in search results. React Helmet&nbsp;is a package that provides a React component interface for you to manage your&nbsp;document head. Gatsby\u2019s&nbsp;react helmet plugin&nbsp;provides drop-in support for server rendering data&hellip; <a class=\"more-link\" href=\"https:\/\/fullstack.smartstart.institute\/add-page-metadata\/\">Continue reading <span class=\"screen-reader-text\">Add page metadata<\/span><\/a><\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 532,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            136
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/177"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/comments?post=177"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/posts\/177\/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/media?parent=177"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/categories?post=177"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/fullstack.smartstart.institute\/wp-json\/wp\/v2\/tags?post=177"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]