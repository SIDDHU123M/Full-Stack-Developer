[{"id":6,"date":"2020-05-27T05:44:07","date_gmt":"2020-05-27T05:44:07","guid":{"rendered":"http://react.foobrdigital.com/?p=6"},"modified":"2020-05-27T05:44:07","modified_gmt":"2020-05-27T05:44:07","slug":"introduction-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/introduction-3/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<h2>What is React?</h2>\n\n\n\n<p>React is a flexible and powerful open-source library for developing rich client-side applications. It takes cues from the world of server-side development and applies them to HTML elements. React creates a foundation that makes building rich web applications easier.</p>\n\n\n\n<p>React is a library for building composable user interfaces. It encourages the creation of reusable UI components, which present data that changes over time. Lots of people use React as the V in MVC. React abstracts away the DOM from you, offering a simpler programming model and better performance. React can also render on the server using Node, and it can power native apps using React Native. React implements one-way reactive data flow, which reduces the boilerplate and is easier to reason about than traditional data binding.</p>\n\n\n\n<h4>Note</h4>\n\n\n\n<p>Before Starting React you should have a basic knowledge of Javascript. If you are not already familiar with Javacript, go ahead and complete our javascript lectures.</p>\n\n\n\n<h2>Why you should use React</h2>\n\n\n\n<p>React is not the perfect solution to every problem, and it is important to know when you should use React and when you should seek an alternative. React delivers the kind of functionality that used to be available only to server-side developers but is delivered entirely in the browser. The browser has to do a lot of work each time an HTML document to which React has been applied is loaded, data has to be loaded, components have to be created and composed, expressions have to be evaluated, etc.</p>\n\n\n\n<p>This kind of work takes time to perform, and the amount of time depends on the complexity of the React application and—critically—on the quality of the browser and the processing capability of the device. You won’t notice any performance issues when using the latest browsers on a capable desktop machine, but old browsers on underpowered smartphones can really slow down the initial setup of a React apps.</p>\n\n\n\n<p>The goal, is to perform this setup as infrequently as possible and deliver as much of the app as possible to the user when it is performed. This means giving careful thought to the kind of web application you build. In broad terms, there are two basic kinds of web application, 1- round-trip and 2- single-page.</p>\n\n\n\n<h3>What are round-trip applications?</h3>\n\n\n\n<p>For a long time, web apps were developed to follow a round-trip model. The browser requests an HTML document from the server. User interactions likw as clicking a button or submitting a form—leads the browser to request and receive a completely new HTML document from the server. In this kind of application, the browser is essentially a rending engine for HTML content, and all of the application logic and data resides on the server. The browser makes a series of stateless HTTP requests that the server handles by generating HTML documents dynamically.</p>\n\n\n\n<h3>What are Single Page Applications?</h3>\n\n\n\n<p>Single-page applications take a different approach than round-trip apps. An initial HTML document is sent to the browser, but user interactions lead to HTTP requests for small fragments of HTML or data inserted into the existing set of elements being displayed to the user. The initial HTML document is never reloaded or replaced, and the user can continue to interact with the existing HTML while the HTTP requests are being performed asynchronously.</p>\n\n\n\n<h2>React Features</h2>\n\n\n\n<ul><li><strong>JSX</strong>&nbsp;− JSX is JavaScript syntax extension. It isn&#8217;t necessary to use JSX in React development, but it is recommended.</li><li><strong>Components</strong>&nbsp;− React is all about components. You need to think of everything as a component. This will help you maintain the code when working on larger scale projects.</li><li><strong>Unidirectional data flow and Flux</strong>&nbsp;− React uses one-way data flow which makes it easy to reason about your app. Flux is a pattern that helps keeping your data unidirectional.</li></ul>\n\n\n\n<h2>Advantages of React</h2>\n\n\n\n<ul><li>React used virtual DOM. This will improve apps performance, since JavaScript virtual DOM is faster than the regular DOM.</li><li>React Can be used on client and server side as well as with other frameworks.</li><li>Component and data patterns improve readability, which helps to maintain larger apps.</li></ul>\n\n\n\n<h2>React Limitations</h2>\n\n\n\n<ul><li>Covers only the view layer of the app, hence you still need to choose other technologies to get a complete tooling set for development.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>What is React? React is a flexible and powerful open-source library for developing rich client-side applications. It takes cues from the world of server-side development and applies them to HTML elements. React creates a foundation that makes building rich web applications easier. React is a library for building composable user interfaces. It encourages the creation [&hellip;]</p>\n","protected":false},"author":1,"featured_media":423,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/6"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=6"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/6/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/423"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=6"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=6"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=6"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4034,"date":"2020-05-27T05:45:32","date_gmt":"2020-05-27T05:45:32","guid":{"rendered":"http://react.foobrdigital.com/?p=7"},"modified":"2020-05-27T05:45:32","modified_gmt":"2020-05-27T05:45:32","slug":"version","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/version/","title":{"rendered":"React Features"},"content":{"rendered":"\n<p>Currently, ReactJS gaining quick popularity as the best JavaScript framework among web developers. It is playing an essential role in the front-end ecosystem. The important features of ReactJS are as following.</p>\n\n\n\n<ul><li>JSX</li><li>Components</li><li>One-way Data Binding</li><li>Virtual DOM</li><li>Simplicity</li><li>Performance</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>JSX</h3>\n\n\n\n<p>JSX stands for JavaScript XML. It is a JavaScript syntax extension. Its an XML or HTML like syntax used by ReactJS. This syntax is processed into JavaScript calls of React Framework. It extends the ES6 so that HTML like text can co-exist with JavaScript react code. It is not necessary to use JSX, but it is recommended to use in ReactJS.</p>\n\n\n\n<h3>Components</h3>\n\n\n\n<p>ReactJS is all about components. ReactJS application is made up of multiple components, and each component has its own logic and controls. These components can be reusable which help you to maintain the code when working on larger scale projects.</p>\n\n\n\n<h3>One-way Data Binding</h3>\n\n\n\n<p>ReactJS is designed in such a manner that follows unidirectional data flow or one-way data binding. The benefits of one-way data binding give you better control throughout the application. If the data flow is in another direction, then it requires additional features. It is because components are supposed to be immutable and the data within them cannot be changed. Flux is a pattern that helps to keep your data unidirectional. This makes the application more flexible that leads to increase efficiency.</p>\n\n\n\n<h3>Virtual DOM</h3>\n\n\n\n<p>A virtual DOM object is a representation of the original DOM object. It works like a one-way data binding. Whenever any modifications happen in the web application, the entire UI is re-rendered in virtual DOM representation. Then it checks the difference between the previous DOM representation and new DOM. Once it has done, the real DOM will update only the things that have actually changed. This makes the application faster, and there is no wastage of memory.</p>\n\n\n\n<h3>Simplicity</h3>\n\n\n\n<p>ReactJS uses JSX file which makes the application simple and to code as well as understand. We know that ReactJS is a component-based approach which makes the code reusable as your need. This makes it simple to use and learn.</p>\n\n\n\n<h3>Performance</h3>\n\n\n\n<p>ReactJS is known to be a great performer. This feature makes it much better than other frameworks out there today. The reason behind this is that it manages a virtual DOM. The DOM is a cross-platform and programming API which deals with HTML, XML, or XHTML. The DOM exists entirely in memory. Due to this, when we create a component, we did not write directly to the DOM. Instead, we are writing virtual components that will turn into the DOM leading to smoother and faster performance.</p>\n","protected":false},"excerpt":{"rendered":"<p>Currently, ReactJS gaining quick popularity as the best JavaScript framework among web developers. It is playing an essential role in the front-end ecosystem. The important features of ReactJS are as following. JSX Components One-way Data Binding Virtual DOM Simplicity Performance JSX JSX stands for JavaScript XML. It is a JavaScript syntax extension. Its an XML [&hellip;]</p>\n","protected":false},"author":1,"featured_media":424,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4034"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4034"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4034/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/424"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4034"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4034"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4034"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4035,"date":"2020-05-27T05:54:46","date_gmt":"2020-05-27T05:54:46","guid":{"rendered":"http://react.foobrdigital.com/?p=8"},"modified":"2020-05-27T05:54:46","modified_gmt":"2020-05-27T05:54:46","slug":"installation-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/installation-2/","title":{"rendered":"What&#8217;s New in React v16.9"},"content":{"rendered":"\n<p>React is one of the most popular JavaScript libraries around, with over 110,000 stars and over 2 million people using it on GitHub. A host of dedicated community members makes life easier for developers, building an amazing user interface that has released the newest version: 16.9.0 (React now has over 100 releases).</p>\n\n\n\n<p>Now let us look into these new features:</p>\n\n\n\n<h2 id=\"toc_1\">Async Act()</h2>\n\n\n\n<p>In the last major release of React.js, a new testing utility was shipped. It is called act() and it helps developers write tests that match the various browser behaviors better.</p>\n\n\n\n<p>A good example is how multiple state updates inside a single act get batched, matching normal React behavior for handling browser events. In React 16.8, the only act support was for synchronous functions and there were some warnings that still showed up while using it. But now in this new version 16.9 there is support for asynchronous functions, so you can await the act calls.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>await act(async () => {  // ...});</code></pre>\n\n\n\n<p>Fixes for the previous warnings were also included in this version, so all your warnings will disappear as you update your React version.</p>\n\n\n\n<p>Also the React team has invested some time into creating resources to help developers fully understand how to write tests with act() with the new&nbsp;<a href=\"https://reactjs.org/docs/testing-recipes.html\">testing recipes guide</a>. It contains common use cases and how act() can be used in each to write tests. The examples make use of DOM APIs, but you can also use the&nbsp;<a href=\"https://testing-library.com/docs/react-testing-library/intro\">React testing library</a>.</p>\n\n\n\n<h2 id=\"toc_2\">Performance Measurements with Profiler API</h2>\n\n\n\n<p>The Profiler API for DevTools first got shipped in the 16.5 React version. It helps developers find difficulties in your web application. In this new 16.9 version, the React team has gone a step further to enhance the API.</p>\n\n\n\n<p>With the new &lt;react.profiler&gt; you can measure a host of things programmatically yourself in the DevTools on DOM render from the phase to the times and even durations and interactions. It is ideally meant for larger applications to constantly check their performance and regressions over time. The Profiler is essentially a measuring tool for renders and it identifies the parts of your app that cause sluggishness and should benefit from memoization.&lt;/react.profiler&gt;</p>\n\n\n\n<p>A Profiler looks like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>render(  &lt;Profiler id=\"application\" onRender={onRenderCallback}>    &lt;App>      &lt;Navigation {...props} />      &lt;Main {...props} />    &lt;/App>  &lt;/Profiler>);</code></pre>\n\n\n\n<p>You can learn more about them and the parameters passed on render or callbacks <a href=\"https://reactjs.org/docs/profiler.html\">here in the official documentation</a>.</p>\n\n\n\n<p>It is important to note that they are disabled for production environments by default due to the additional overhead. If you want production profiling, then you can check out&nbsp;<a href=\"https://fb.me/react-profiling\">this resource</a>&nbsp;where React provides a special production build with profiling enabled.</p>\n\n\n\n<h2 id=\"toc_3\">Renaming Unsafe Lifecycle Methods</h2>\n\n\n\n<p>Sometime last year&nbsp;<a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\">in an update</a>, the React team informed us of a decision to change the names of lifecycle methods that were deemed unsafe.</p>\n\n\n\n<p>The lifecycle methods affected are listed below:</p>\n\n\n\n<ul><li><code>componentWillMount</code>&nbsp;→&nbsp;<code>UNSAFE_componentWillMount</code></li><li><code>componentWillReceiveProps</code>&nbsp;→&nbsp;<code>UNSAFE_componentWillReceiveProps</code></li><li><code>componentWillUpdate</code>&nbsp;→&nbsp;<code>UNSAFE_componentWillUpdate</code></li></ul>\n\n\n\n<p>Do not panic: Your old application will not break with this particular update, as the old names still work. However, whenever they are in use, there will be a warning in your terminal:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://react.foobrdigital.com/wp-content/uploads/2020/07/warningc3f3847de9c84543a218452c0b01a2c0-1024x160.png\" alt=\"\" class=\"wp-image-2391\"/></figure>\n\n\n\n<p>The warnings will send you links to resources for alternatives to these unsafe methods, but you can just run a simple codemod script that goes into your application and automatically renames all the unsafe lifecycle methods:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd your_projectnpx react-codemod rename-unsafe-lifecycles</code></pre>\n\n\n\n<p>Running this codemod will replace the old names like <code>componentWillMount</code> with the new names like <code>UNSAFE_componentWillMount</code>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://react.foobrdigital.com/wp-content/uploads/2020/07/warning-2.gif\" alt=\"\" class=\"wp-image-2392\"/></figure>\n\n\n\n<p>Moving forward, the React team promises that the unsafe methods will keep working on this update and even in version 17 soon to come. The prefix will enable developers to be constantly be reminded of their safety.</p>\n\n\n\n<h2 id=\"toc_4\">Removal of JavaScript URLs</h2>\n\n\n\n<p>It is a very old practice to use the&nbsp;<code>javascript:</code>&nbsp;inside the&nbsp;<code>href</code>&nbsp;attribute, but it is still done today. The React team has found it to be an unsafe practice, as it can open up security holes in your web applications.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const userProfile = {  website: \"javascript: alert('you got hacked')\",};// This will now warn:&lt;a href={userProfile.website}>Profile&lt;/a></code></pre>\n\n\n\n<p>In this new version of React, if you still use it, you will see warnings on your terminal to remind you that it is prone to vulnerability, and a solution like using event handlers is also suggested. In the future, however, this practice will be deprecated and so will throw an error.</p>\n\n\n\n<h2 id=\"toc_5\">Factory Components</h2>\n\n\n\n<p>This will not affect a whole lot of people, as it is not widely used, but during React compilation, factory components that return an object with a render method were supported; that was before Babel.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function FactoryComponent() {  return { render() { return &lt;div />; } }}</code></pre>\n\n\n\n<p>However, it is a confusing pattern, as it can be used in place of function components that return a template value instead. This support is also responsible for a little bit of the slowness React experiences during compilation, so it is being deprecated. A warning will be logged when you use it, and a great alternative should be adding:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>FactoryComponent.prototype = React.Component.prototype</code></pre>\n\n\n\n<p>In your file, you can also convert it to a class or a function component.</p>\n\n\n\n<h2 id=\"toc_6\">Future Plans</h2>\n\n\n\n<p>These are a few things to look forward to from the React team in the near future:</p>\n\n\n\n<ol><li>There is a plan to release support for both Concurrent Mode and Suspense for Data Fetching in a single combined release instead of as single updates soon.</li><li>The team has started working on a&nbsp;<a href=\"https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#suspense-for-server-rendering\">new Suspense-capable server renderer</a>, but it will not be out with the release above. However, a temporary solution that lets the existing server renderer emit HTML for Suspense fallbacks will be out with it.</li></ol>\n\n\n\n<h3 id=\"toc_7\">Upgrading Your Version</h3>\n\n\n\n<p>React v16.9.0 is available on the npm registry. To install React 16 with Yarn, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add react@^16.9.0 react-dom@^16.9.0</code></pre>\n\n\n\n<p>To install React 16 with npm, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --save react@^16.9.0 react-dom@^16.9.0</code></pre>\n\n\n\n<p>You can also use UMD builds of React through a CDN:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script crossorigin src=\"https://unpkg.com/react@16/umd/react.production.min.js\">&lt;/script>&lt;script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\">&lt;/script></code></pre>\n\n\n\n<h3 id=\"toc_8\">Conclusion</h3>\n\n\n\n<p>You have been introduced to the new React release and all the new features it ships with. As we wait for the next major version, 17, we also learn that a few important deprecations have been made in this minor version and you should take note of them. What is your favorite feature?</p>\n","protected":false},"excerpt":{"rendered":"<p>React is one of the most popular JavaScript libraries around, with over 110,000 stars and over 2 million people using it on GitHub. A host of dedicated community members makes life easier for developers, building an amazing user interface that has released the newest version: 16.9.0 (React now has over 100 releases). Now let us [&hellip;]</p>\n","protected":false},"author":1,"featured_media":390,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4035"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4035"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4035/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/390"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4035"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4035"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4035"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4036,"date":"2020-05-27T06:00:54","date_gmt":"2020-05-27T06:00:54","guid":{"rendered":"http://react.foobrdigital.com/?p=16"},"modified":"2020-05-27T06:00:54","modified_gmt":"2020-05-27T06:00:54","slug":"pros-and-cons","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/pros-and-cons/","title":{"rendered":"Pros and Cons"},"content":{"rendered":"\n<h1>Pros and Cons of ReactJS</h1>\n\n\n\n<p>Today, ReactJS is the highly used open-source JavaScript Library. It helps in creating impressive web apps that require minimal effort and coding. The main objective of ReactJS is to develop User Interfaces (UI) that improves the speed of the apps. There are important pros and cons of ReactJS given as following:</p>\n\n\n\n<h3>Advantage of ReactJS</h3>\n\n\n\n<p><strong>1. Easy to Learn and USe</strong></p>\n\n\n\n<p>ReactJS is much easier to learn and use. It comes with a good supply of documentation, tutorials, and training resources. Any developer who comes from a JavaScript background can easily understand and start creating web apps using React in a few days. It is the V(view part) in the MVC (Model-View-Controller) model, and referred to as ?one of the JavaScript frameworks.? It is not fully featured but has the advantage of open-source JavaScript User Interface(UI) library, which helps to execute the task in a better manner.</p>\n\n\n\n<p><strong>2. Creating Dynamic Web Applications Becomes Easier</strong></p>\n\n\n\n<p>To create a dynamic web application specifically with HTML strings was tricky because it requires a complex coding, but React JS solved that issue and makes it easier. It provides less coding and gives more functionality. It makes use of the JSX(JavaScript Extension), which is a particular syntax letting HTML quotes and HTML tag syntax to render particular subcomponents. It also supports the building of machine-readable codes.</p>\n\n\n\n<p><strong>3. Reusable Components</strong></p>\n\n\n\n<p>A ReactJS web application is made up of multiple components, and each component has its own logic and controls. These components are responsible for outputting a small, reusable piece of HTML code which can be reused wherever you need them. The reusable code helps to make your apps easier to develop and maintain. These Components can be nested with other components to allow complex applications to be built of simple building blocks. ReactJS uses virtual DOM based mechanism to fill data in HTML DOM. The virtual DOM works fast as it only changes individual DOM elements instead of reloading complete DOM every time.</p>\n\n\n\n<p><strong>4. Performance Enhancement</strong></p>\n\n\n\n<p>ReactJS improves performance due to virtual DOM. The DOM is a cross-platform and programming API which deals with HTML, XML or XHTML. Most of the developers faced the problem when the DOM was updated, which slowed down the performance of the application. ReactJS solved this problem by introducing virtual DOM. The React Virtual DOM exists entirely in memory and is a representation of the web browser&#8217;s DOM. Due to this, when we write a React component, we did not write directly to the DOM. Instead, we are writing virtual components that react will turn into the DOM, leading to smoother and faster performance.</p>\n\n\n\n<p><strong>5. The Support of Handy Tools</strong></p>\n\n\n\n<p>React JS has also gained popularity due to the presence of a handy set of tools. These tools make the task of the developers understandable and easier. The React Developer Tools have been designed as Chrome and Firefox dev extension and allow you to inspect the React component hierarchies in the virtual DOM. It also allows you to select particular components and examine and edit their current props and state.</p>\n\n\n\n<p><strong>6. Known to be SEO Friendly</strong></p>\n\n\n\n<p>Traditional JavaScript frameworks have an issue in dealing with SEO. The search engines generally having trouble in reading JavaScript-heavy applications. Many web developers have often complained about this problem. ReactJS overcomes this problem that helps developers to be easily navigated on various search engines. It is because React.js applications can run on the server, and the virtual DOM will be rendering and returning to the browser as a regular web page.</p>\n\n\n\n<p><strong>7. The Benefit of Having JavaScript Library</strong></p>\n\n\n\n<p>Today, ReactJS is choosing by most of the web developers. It is because it is offering a very rich JavaScript library. The JavaScript library provides more flexibility to the web developers to choose the way they want.</p>\n\n\n\n<p><strong>8. Scope for Testing the Codes</strong></p>\n\n\n\n<p>ReactJS applications are extremely easy to test. It offers a scope where the developer can test and debug their codes with the help of native tools.</p>\n\n\n\n<h3>Disadvantage of ReactJS</h3>\n\n\n\n<p><strong>1. The high pace of development</strong></p>\n\n\n\n<p>The high pace of development has an advantage and disadvantage both. In case of disadvantage, since the environment continually changes so fast, some of the developers not feeling comfortable to relearn the new ways of doing things regularly. It may be hard for them to adopt all these changes with all the continuous updates. They need to be always updated with their skills and learn new ways of doing things.</p>\n\n\n\n<p><strong>2. Poor Documentation</strong></p>\n\n\n\n<p>It is another cons which are common for constantly updating technologies. React technologies updating and accelerating so fast that there is no time to make proper documentation. To overcome this, developers write instructions on their own with the evolving of new releases and tools in their current projects.</p>\n\n\n\n<p><strong>3. View Part</strong></p>\n\n\n\n<p>ReactJS Covers only the UI Layers of the app and nothing else. So you still need to choose some other technologies to get a complete tooling set for development in the project.</p>\n\n\n\n<p><strong>4. JSX as a barrier</strong></p>\n\n\n\n<p>ReactJS uses JSX. It&#8217;s a syntax extension that allows HTML with JavaScript mixed together. This approach has its own benefits, but some members of the development community consider JSX as a barrier, especially for new developers. Developers complain about its complexity in the learning curve.</p>\n","protected":false},"excerpt":{"rendered":"<p>Pros and Cons of ReactJS Today, ReactJS is the highly used open-source JavaScript Library. It helps in creating impressive web apps that require minimal effort and coding. The main objective of ReactJS is to develop User Interfaces (UI) that improves the speed of the apps. There are important pros and cons of ReactJS given as [&hellip;]</p>\n","protected":false},"author":1,"featured_media":393,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4036"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4036"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4036/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/393"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4036"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4036"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4036"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4019,"date":"2020-05-27T06:02:10","date_gmt":"2020-05-27T06:02:10","guid":{"rendered":"http://react.foobrdigital.com/?p=17"},"modified":"2020-05-27T06:02:10","modified_gmt":"2020-05-27T06:02:10","slug":"difference-between-angularjs-and-reactjs","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/difference-between-angularjs-and-reactjs/","title":{"rendered":"Setting Up"},"content":{"rendered":"\n<p>In this chapter, we will show you how to set up an environment for successful React development. Notice that there are many steps involved but this will help speed up the development process later. We will need&nbsp;<strong>NodeJS</strong>, so if you don&#8217;t have it installed, check the link from the following table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Requirements</th></tr><tr><td>1</td><td><strong>NodeJS and NPM</strong>NodeJS is the platform needed for the ReactJS development. Checkout our&nbsp;<a href=\"/nodejs/nodejs_environment_setup.htm\">NodeJS Environment Setup</a>.</td></tr><tr><td>1</td><td><strong>create-react-app</strong>The create-react-app package is used to create projects and set up the tools that are required for effective React development.</td></tr></tbody></table></figure>\n\n\n\n<h4>Note:</h4>\n\n\n\n<p>Projects created with the create-react-app package are designed for the development of complex applications and provide a complete set of tools for development, testing, and deployment. The create-react-app package is opiniated, which means that it provides a specific way of working with available configuration options.</p>\n\n\n\n<p>After successfully installing both Node &amp; create-react-app, we can create the react project, open a new command prompt, navigate to a folder where you want to save the project and then type the code below,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npx create-react-app my-react-project</code></pre>\n\n\n\n<p>Now cd into the my-react-project folder:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-react-project</code></pre>\n\n\n\n<p>Then start the react server. you can run that by typing</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm start</code></pre>\n\n\n\n<p>Once the initial project compilation is complete, a new browser window will open and display the URL http://localhost:3000 and display the placeholder content.</p>\n\n\n\n<h4>Note:</h4>\n\n\n\n<p>Remember, When you create a new project, you may see warnings about security vulnerabilities. React relies on a large number of packages, each of which has its own dependencies, and security issues will inevitably be discovered.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will show you how to set up an environment for successful React development. Notice that there are many steps involved but this will help speed up the development process later. We will need&nbsp;NodeJS, so if you don&#8217;t have it installed, check the link from the following table. Sr.No. Requirements 1 NodeJS [&hellip;]</p>\n","protected":false},"author":1,"featured_media":394,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4019"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4019"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4019/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/394"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4019"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4019"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4019"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4020,"date":"2020-05-27T06:03:31","date_gmt":"2020-05-27T06:03:31","guid":{"rendered":"http://react.foobrdigital.com/?p=18"},"modified":"2020-05-27T06:03:31","modified_gmt":"2020-05-27T06:03:31","slug":"difference-between-reactjs-and-react-native","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/difference-between-reactjs-and-react-native/","title":{"rendered":"Project Structure"},"content":{"rendered":"\n<h2>React Project Structure</h2>\n\n\n\n<p>Let&#8217;s discuss different files that we have right now in our my-react-app folder.</p>\n\n\n\n<table style=\"border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n    <thead>\n    <tr>\n      <th style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">\n        Name</p></th>\n      <th style=\"border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">Description</p></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ;\"><p class=\"\">\n        <span class=\" \">node_modules</span>\n      </p></td>\n      <td style=\"border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">This folder contains the packages\n        that the application and development tools require.</p></td>\n    </tr>\n    <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">\n        <span class=\" \">public</span>\n      </p></td>\n      <td style=\"border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">This folder is used for static\n        content and includes the index.html file that is used\n        to respond to HTTP requests.</p></td>\n    </tr>\n    <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">\n        <span class=\" \">src</span>\n      </p></td>\n      <td style=\"border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">The src folder contains the\n        application code and content</p></td>\n    </tr>\n    <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">\n        <span class=\" \">.gitignore</span>\n      </p></td>\n      <td style=\"border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">This file is used to exclude\n        files and folders from the Git.</p></td>\n    </tr>\n    <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">\n        <span class=\" \">package.json</span>\n      </p></td>\n      <td style=\"border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">This folder contains the set of\n        top-level package dependencies for the project.</p></td>\n    </tr>\n    <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">\n        <span class=\" \">package-lock.json</span>\n      </p></td>\n      <td style=\"border-bottom: 0.5pt solid ; text-align: left;\"><p class=\"\">This file contains a complete\n        list of the package dependencies for the project.</p></td>\n    </tr>\n    <tr>\n      <td style=\"border-right: 0.5pt solid ; text-align: left;\"><p class=\"\">\n        <span class=\" \">README.md</span>\n      </p></td>\n      <td style=\"text-align: left;\"><p class=\"\">This file contains information about the project tools.</p></td>\n    </tr>\n    </tbody>\n  </table>\n\n\n\n<h3>Src Folder</h3>\n\n\n\n<p>The src folder is the most important in the project because it is where the application’s code and content files are placed and where you will define the custom features required by your project.</p>\n\n\n\n<table>\n    <tbody><tr>\n      <th>Name</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>index.js</td>\n      <td>This file is responsible for configuring and starting our react application.</td>\n    </tr>\n    <tr>\n      <td>index.css</td>\n      <td>This file contains the global CSS styles for the application.</td>\n    </tr>\n    <tr>\n      <td>App.js</td>\n      <td>This file contains the top-level React component.</td>\n    </tr>\n    <tr>\n      <td>App.css</td>\n      <td>This file contains the placeholder CSS styles for new projects.</td>\n    </tr>\n    <tr>\n      <td>App.test.js</td>\n      <td>App.test.js contains unit tests for the top-level component.</td>\n    </tr>\n    <tr>\n      <td>registerServiceWorker.js</td>\n      <td>This file is used by progressive web applications, which can work offline.</td>\n    </tr>\n    <tr>\n      <td>logo.svg</td>\n      <td>logo.svg contains the React logo and is displayed by the placeholder component added to the project when it is created.</td>\n    </tr>\n  </tbody></table>\n\n\n\n<p>When a react app is created, the package manager is given an initial list of packages required for React development, each of which is inspected to get the set of packages it depends on. The process is performed again to get the dependencies of those packages and repeated until a complete list of packages is built up. The package manager downloads and installs all of the packages and installs them into the node_modules folder.</p>\n\n\n\n<p>The initial packages are defined in the package.json file using the dependencies and devDependencies properties. The dependencies section is used to list the packages that the application will require to run. The devDependencies are list of packages that are required for development but that are not deployed as part of the application.</p>\n","protected":false},"excerpt":{"rendered":"<p>React Project Structure Let&#8217;s discuss different files that we have right now in our my-react-app folder. Name Description node_modules This folder contains the packages that the application and development tools require. public This folder is used for static content and includes the index.html file that is used to respond to HTTP requests. src The src [&hellip;]</p>\n","protected":false},"author":1,"featured_media":395,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4020"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4020"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4020/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/395"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4020"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4020"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4020"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4022,"date":"2020-05-27T06:04:42","date_gmt":"2020-05-27T06:04:42","guid":{"rendered":"http://react.foobrdigital.com/?p=20"},"modified":"2020-05-27T06:04:42","modified_gmt":"2020-05-27T06:04:42","slug":"vue","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/vue/","title":{"rendered":"Useful Npm Commands"},"content":{"rendered":"\n<p>Here are some of the commonly used and important npm commands that you will use in your day to day react development.</p>\n\n\n\n<h3>Essential Npm Commands</h3>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h5>1- npx create-react-app &lt;project-name&gt;</h5>\n\n\n\n<p>This command creates a new React project.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h5>2- npm install</h5>\n\n\n\n<p>This command install the packages specified in the package.json file.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h5>3- npm install package@version</h5>\n\n\n\n<p>This command performs a local install of a specific version of a package and updates the package.json file.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h5>4- npm install &#8211;save-dev package@version</h5>\n\n\n\n<p>This command performs a local install of a specific version of a package and updates the&nbsp;<em>package.json</em>&nbsp;file to add the package to the&nbsp;<em>devDependencies</em>&nbsp;section, which is used to add packages to the project that are required for development but are not part of the application.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h5>5- npm install &#8211;global package@version</h5>\n\n\n\n<p>This command will perform a global install of a specific version of a package.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h5>6- npm list</h5>\n\n\n\n<p>The npm list command will list all of the local packages and their dependencies.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h5>7- npm run</h5>\n\n\n\n<p>The npm run command will execute one of the scripts defined in the&nbsp;package.json&nbsp;file.</p>\n","protected":false},"excerpt":{"rendered":"<p>Here are some of the commonly used and important npm commands that you will use in your day to day react development. Essential Npm Commands 1- npx create-react-app &lt;project-name&gt; This command creates a new React project. 2- npm install This command install the packages specified in the package.json file. 3- npm install package@version This command [&hellip;]</p>\n","protected":false},"author":1,"featured_media":396,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4022"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4022"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4022/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/396"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4022"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4022"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4022"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4023,"date":"2020-05-27T06:08:08","date_gmt":"2020-05-27T06:08:08","guid":{"rendered":"http://react.foobrdigital.com/?p=21"},"modified":"2020-05-27T06:08:08","modified_gmt":"2020-05-27T06:08:08","slug":"jsx","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/jsx/","title":{"rendered":"JSX"},"content":{"rendered":"\n<p>Facebook’s React team released JSX when they released React to provide a concise syntax for creating complex DOM trees with attributes. They also hoped to make React more readable like HTML and XML. In JSX, an element’s type is specified with a tag. The tag’s attributes represent the properties. The element’s children can be added between the opening and closing tags.</p>\n\n\n\n<p>&nbsp;We&#8217;re going to use an online Babel REPL to play with JSX:</p>\n\n\n\n<ol><li>Open a browser, go to&nbsp;<a href=\"https://babeljs.io/repl\">https://babeljs.io/repl</a>, and enter the following JSX in the left-hand pane:</li></ol>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span>I am learning JSX&lt;/span></code></pre>\n\n\n\n<p>The following appears in the right-hand pane, which is what our JSX has compiled down to:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>React.createElement(\n  \"span\",\n  null,\n  \"I am learning JSX\"\n);</code></pre>\n\n\n\n<p>We can see that it compiles down to a call to&nbsp;<kbd>React.createElement</kbd>, which has three parameters:</p>\n\n\n\n<ul><li>The element type, which can be an HTML tag name string (such as&nbsp;<kbd>\"span\"</kbd>), a React component type, or a React fragment type</li><li>An object containing the props to be applied to the element</li><li>The children for the element</li></ul>\n\n\n\n<ol start=\"2\"><li>Let&#8217;s expand our example by putting&nbsp;<kbd>div</kbd>&nbsp;tags around our&nbsp;<kbd>span</kbd>:</li></ol>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div className=\"confirm-title-container\">\n  &lt;span>I am learning JSX&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>This now compiles down to two calls to&nbsp;<kbd>React.createElement</kbd>, with&nbsp;<kbd>span</kbd>&nbsp;being passed in as a child to&nbsp;<kbd>div</kbd>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>React.createElement(\n  \"div\",\n  {\n          className: \"confirm-title-container\" },\n  React.createElement(\n    \"span\",\n    null,\n    \"I am learning JSX\"\n  )\n);</code></pre>\n\n\n\n<ol start=\"3\"><li>This is starting to make sense, but so far our JSX has consisted of only HTML. Let&#8217;s add some JavaScript now, by declaring a props object literal. Let&#8217;s also reference the&nbsp;<kbd>title</kbd>&nbsp;prop inside the&nbsp;<kbd>span</kbd>&nbsp;using curly braces:</li></ol>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const props = {\n          \n  title: \"React and TypeScript\"\n};\n&lt;div className=\"confirm-title-container\">\n  &lt;span>{\n          props.title}&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>This is more interesting now. It compiles down to this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var props = {\n          \n title: \"React and TypeScript\"\n};\nReact.createElement(\n \"div\",\n {\n          className: \"confirm-title-container\" },\n React.createElement(\n \"span\",\n null,\n props.title\n )\n);</code></pre>\n\n\n\n<p>&nbsp;The key point is that we can inject JavaScript into HTML by using curly braces.&nbsp;</p>\n\n\n\n<ol start=\"4\"><li>To further illustrate the point, let&#8217;s empty the&nbsp;<kbd>props</kbd>&nbsp;object literal, and use a JavaScript ternary inside&nbsp;<kbd>span</kbd>:</li></ol>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const props = {};\n&lt;div className=\"confirm-title-container\">\n  &lt;span>{\n          props.title ? props.title : \"React and TypeScript\"}&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>We see that the nested call to&nbsp;<kbd>React.createElement</kbd>&nbsp;uses our ternary as the child of&nbsp;<kbd>span</kbd>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>React.createElement(\n  \"span\",\n  null,\n  props.title ? props.title : \"React and TypeScript\"\n)</code></pre>\n\n\n\n<p>So, why do we use the&nbsp;<kbd>className</kbd>&nbsp;attribute rather than&nbsp;<kbd>class</kbd>? Well, we now understand that JSX compiles down to&nbsp;JavaScript, and as&nbsp;<kbd>class</kbd>&nbsp;is a keyword in JavaScript, having a&nbsp;<kbd>class</kbd>&nbsp;attribute in JSX would&nbsp;clash. So,&nbsp;React uses&nbsp;<kbd>className</kbd>&nbsp;instead for CSS class references.</p>\n\n\n\n<p>Now that was a quick introduction to JSX. You can learn more in our dedicated JSX Section.</p>\n","protected":false},"excerpt":{"rendered":"<p>Facebook’s React team released JSX when they released React to provide a concise syntax for creating complex DOM trees with attributes. They also hoped to make React more readable like HTML and XML. In JSX, an element’s type is specified with a tag. The tag’s attributes represent the properties. The element’s children can be added [&hellip;]</p>\n","protected":false},"author":1,"featured_media":397,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4023"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4023"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4023/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/397"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4023"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4023"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4023"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4021,"date":"2020-05-27T06:09:54","date_gmt":"2020-05-27T06:09:54","guid":{"rendered":"http://react.foobrdigital.com/?p=19"},"modified":"2020-05-27T06:09:54","modified_gmt":"2020-05-27T06:09:54","slug":"components-4","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/components-4/","title":{"rendered":"Components"},"content":{"rendered":"\n<p>Earlier, the developers write more than thousands of lines of code for developing a single page application. These applications follow the traditional DOM structure, and making changes in them was a very challenging task. If any mistake found, it manually searches the entire application and update accordingly. The component-based approach was introduced to overcome an issue. In this approach, the entire application is divided into a small logical group of code, which is known as components.</p>\n\n\n\n<p>A Component is considered as the core building blocks of a React application. It makes the task of building UIs much easier. Each component exists in the same space, but they work independently from one another and merge all in a parent component, which will be the final UI of your application.</p>\n\n\n\n<p>Every React component have their own structure, methods as well as APIs. They can be reusable as per your need. For better understanding, consider the entire UI as a tree. Here, the root is the starting component, and each of the other pieces becomes branches, which are further divided into sub-branches.</p>\n\n\n\n<p>In ReactJS, we have mainly two types of components. They are</p>\n\n\n\n<ol><li>Functional Components</li><li>Class Components</li></ol>\n\n\n\n<h2>Functional Components</h2>\n\n\n\n<p>In React, function components are a way to write components that only contain a render method and don&#8217;t have their own state. They are simply JavaScript functions that may or may not receive data as parameters. We can create a function that takes props(properties) as input and returns what should be rendered. A valid functional component can be shown in the below example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function WelcomeMessage(props) { \n  return &lt;h1>Welcome to the , {props.name}&lt;/h1>;  \n}  </code></pre>\n\n\n\n<p>The functional component is also known as a stateless component because they do not hold or manage state. It can be explained in the below example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';  \nclass App extends React.Component { \n   render() { \n      return (  \n         &lt;div>  \n            &lt;First/>  \n            &lt;Second/>  \n         &lt;/div>  \n      );  \n   }  \n}  \nclass First extends React.Component { \n   render() {\n      return (  \n         &lt;div>  \n            &lt;h1>CodePoint&lt;/h1>  \n         &lt;/div>  \n      );  \n   }  \n}  \nclass Second extends React.Component { \n   render() {\n      return (  \n         &lt;div>  \n&lt;h2>Codepoint&lt;/h2\n&lt;>Best way to learn how to Code&lt;/p>\n         &lt;/div>  \n      );  \n   }  \n}  \nexport default App;  </code></pre>\n\n\n\n<h2>Class Components</h2>\n\n\n\n<p>Class components are more complex than functional components. It requires you to extend from React. Component and create a render function which returns a React element. You can pass data from one class to other class components. You can create a class by defining a class that extends Component and has a render function. Valid class component is shown in the below example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyComponent extends React.Component {\n  render() {\n    return (  \n      &lt;div>This is main component.&lt;/div>  \n    );  \n  }  \n}  </code></pre>\n\n\n\n<p>The class component is also known as a stateful component because they can hold or manage local state. It can be explained in the below example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In this example, we are creating the list of unordered elements, where we will dynamically insert StudentName for every object from the data array. Here, we are using ES6 arrow syntax (=&gt;) which looks much cleaner than the old JavaScript syntax. It helps us to create our elements with fewer lines of code. It is especially useful when we need to create a list with a lot of items.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';  \nclass App extends React.Component {  \n constructor() {\n      super();  \n      this.state = {\n         data:   \n         &#91;  \n            {            \n               \"name\":\"Harry\"             \n            },  \n            {           \n               \"name\":\"Ron\"             \n            },  \n            {   \n               \"name\":\"Harmione\"          \n            }  \n         ]  \n      }  \n   }  \n   render() {  \n      return (  \n         &lt;div>  \n            &lt;StudentName/>  \n            &lt;ul>            \n                { this.state.data.map((item) => &lt;List data = { item} />)}           \n            &lt;/ul>  \n         &lt;/div>  \n      );  \n   }  \n}  \nclass StudentName extends React.Component { \n   render() { \n      return (  \n         &lt;div>  \n            &lt;h1>Student Name Detail&lt;/h1>  \n         &lt;/div>  \n      );  \n   }  \n}  \nclass List extends React.Component {\n   render() {\n      return (  \n         &lt;ul>            \n            &lt;li>{this.props.data.name}&lt;/li>   \n         &lt;/ul>  \n      );  \n   }  \n}  \nexport default App;  </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Earlier, the developers write more than thousands of lines of code for developing a single page application. These applications follow the traditional DOM structure, and making changes in them was a very challenging task. If any mistake found, it manually searches the entire application and update accordingly. The component-based approach was introduced to overcome an [&hellip;]</p>\n","protected":false},"author":1,"featured_media":398,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4021"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4021"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4021/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/398"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4021"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4021"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4021"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4014,"date":"2020-05-27T06:11:30","date_gmt":"2020-05-27T06:11:30","guid":{"rendered":"http://react.foobrdigital.com/?p=28"},"modified":"2020-05-27T06:11:30","modified_gmt":"2020-05-27T06:11:30","slug":"state","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/state/","title":{"rendered":"Composing Components"},"content":{"rendered":"\n<p>When defining React components, we can use them as the children of another component by using that component as a React element. We already saw this when we included the MyComponent component inside of the App component, but let&#8217;s discuss this composition further.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nclass SuperHeroes extends React.Component {\n    render() {\n    return &lt;ul>\n      &lt;li>\n        &lt;h2>Superman&lt;/h2>\n      &lt;/li>\n      &lt;li>\n        &lt;h2>Batman&lt;/h2>\n      &lt;/li>\n      &lt;li>\n        &lt;h2>Spiderman&lt;/h2>\n      &lt;/li>\n    &lt;/ul>;\n  }\n}\nexport default SuperHeroes;</code></pre>\n\n\n\n<p>We&#8217;ve defined a superheroes component above that contains the name of the superheroes.</p>\n\n\n\n<p>Now, we want to integrate our MyComponent component with this superheores component, we can use it as a tag in the JSX markup of the MyComponent component:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport SuperHeroes from './SuperHeroes';\n\nclass MyComponent extends React.Component {\n    render() {\n    return &lt;div>\n      &lt;h2>My Component&lt;/h2>\n      &lt;SuperHeroes />\n    &lt;/div>\n  }\n}\n\nexport default MyComponent;</code></pre>\n\n\n\n<p>So, what we did? we just imported the SuperHeroes component in order to make it available inside the MyComponent component&#8217;s module, and we used the SuperHeroes tag where we wanted the list of the superheroes to appear.</p>\n\n\n\n<p>Let&#8217;s run npm start to launch the application. You should be able to see the list of superheroes.</p>\n\n\n\n<h1>Note</h1>\n\n\n\n<p>Remember, Tags corresponding to components must follow the case used in the class definition, and by convention, component class names use Pascal case, even though it is not required by React.</p>\n","protected":false},"excerpt":{"rendered":"<p>When defining React components, we can use them as the children of another component by using that component as a React element. We already saw this when we included the MyComponent component inside of the App component, but let&#8217;s discuss this composition further. We&#8217;ve defined a superheroes component above that contains the name of the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":399,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4014"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4014"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4014/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/399"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4014"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4014"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4014"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4015,"date":"2020-05-27T06:16:03","date_gmt":"2020-05-27T06:16:03","guid":{"rendered":"http://react.foobrdigital.com/?p=29"},"modified":"2020-05-27T06:16:03","modified_gmt":"2020-05-27T06:16:03","slug":"props","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/props/","title":{"rendered":"Component Life Cycle"},"content":{"rendered":"\n<p>In this tutorial, we will discuss component lifecycle methods.</p>\n\n\n\n<h2>Lifecycle Methods</h2>\n\n\n\n<ul><li><strong>componentWillMount</strong>&nbsp;is executed before rendering, on both the server and the client side.</li><li><strong>componentDidMount</strong>&nbsp;is executed after the first render only on the client side. This is where AJAX requests and DOM or state updates should occur. This method is also used for integration with other JavaScript frameworks and any functions with delayed execution such as&nbsp;<strong>setTimeout</strong>&nbsp;or&nbsp;<strong>setInterval</strong>. We are using it to update the state so we can trigger the other lifecycle methods.</li><li><strong>componentWillReceiveProps</strong>&nbsp;is invoked as soon as the props are updated before another render is called. We triggered it from&nbsp;<strong>setNewNumber</strong>&nbsp;when we updated the state.</li><li><strong>shouldComponentUpdate</strong>&nbsp;should return&nbsp;<strong>true</strong>&nbsp;or&nbsp;<strong>false</strong>&nbsp;value. This will determine if the component will be updated or not. This is set to&nbsp;<strong>true</strong>&nbsp;by default. If you are sure that the component doesn&#8217;t need to render after&nbsp;<strong>state</strong>&nbsp;or&nbsp;<strong>props</strong>&nbsp;are updated, you can return&nbsp;<strong>false</strong>&nbsp;value.</li><li><strong>componentWillUpdate</strong>&nbsp;is called just before rendering.</li><li><strong>componentDidUpdate</strong>&nbsp;is called just after rendering.</li><li><strong>componentWillUnmount</strong>&nbsp;is called after the component is unmounted from the dom. We are unmounting our component in&nbsp;<strong>main.js</strong>.</li></ul>\n\n\n\n<p>In the following example, we will set the initial&nbsp;<strong>state</strong>&nbsp;in the constructor function. The&nbsp;<strong>setNewnumber</strong>&nbsp;is used to update the&nbsp;<strong>state</strong>. All the lifecycle methods are inside the Content component.</p>\n\n\n\n<h3>App.jsx</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\n\nclass App extends React.Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         data: 0\n      }\n      this.setNewNumber = this.setNewNumber.bind(this)\n   };\n   setNewNumber() {\n      this.setState({data: this.state.data + 1})\n   }\n   render() {\n      return (\n         &lt;div>\n            &lt;button onClick = {this.setNewNumber}>INCREMENT&lt;/button>\n            &lt;Content myNumber = {this.state.data}>&lt;/Content>\n         &lt;/div>\n      );\n   }\n}\nclass Content extends React.Component {\n   componentWillMount() {\n      console.log('Component WILL MOUNT!')\n   }\n   componentDidMount() {\n      console.log('Component DID MOUNT!')\n   }\n   componentWillReceiveProps(newProps) {\n      console.log('Component WILL RECIEVE PROPS!')\n   }\n   shouldComponentUpdate(newProps, newState) {\n      return true;\n   }\n   componentWillUpdate(nextProps, nextState) {\n      console.log('Component WILL UPDATE!');\n   }\n   componentDidUpdate(prevProps, prevState) {\n      console.log('Component DID UPDATE!')\n   }\n   componentWillUnmount() {\n      console.log('Component WILL UNMOUNT!')\n   }\n   render() {\n      return (\n         &lt;div>\n            &lt;h3>{this.props.myNumber}&lt;/h3>\n         &lt;/div>\n      );\n   }\n}\nexport default App;</code></pre>\n\n\n\n<h3>main.js</h3>\n\n\n\n<pre class=\"wp-block-preformatted\">import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(&lt;App/>, document.getElementById('app'));\n\nsetTimeout(() => {\n   ReactDOM.unmountComponentAtNode(document.getElementById('app'));}, 10000);</pre>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, we will discuss component lifecycle methods. Lifecycle Methods componentWillMount&nbsp;is executed before rendering, on both the server and the client side. componentDidMount&nbsp;is executed after the first render only on the client side. This is where AJAX requests and DOM or state updates should occur. This method is also used for integration with other [&hellip;]</p>\n","protected":false},"author":1,"featured_media":400,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4015"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4015"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4015/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/400"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4015"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4015"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4015"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4024,"date":"2020-05-27T06:17:52","date_gmt":"2020-05-27T06:17:52","guid":{"rendered":"http://react.foobrdigital.com/?p=30"},"modified":"2020-05-27T06:17:52","modified_gmt":"2020-05-27T06:17:52","slug":"props-validation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/props-validation/","title":{"rendered":"React Props"},"content":{"rendered":"\n<p>Let&#8217;s discuss about Props and how we can pass data from one component to another. Props are used to pass data from a parent component to a child component in React and they are the main mechanism for component communication. So, props are a major part of what allows the React component pattern to work.</p>\n\n\n\n<p>The&nbsp;<kbd>Superheroes</kbd>&nbsp;component that we defined in the previous section is impractical.&nbsp;Let&#8217;s take a look at it again:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\n\nclass Superheroes extends React.Component {\n        \n  render() {\n    return &lt;&lt;ul>\n      &lt;&lt;li>\n        &lt;&lt;h2>Superman&lt;&lt;/h2>\n      &lt;&lt;/li>\n      &lt;&lt;li>\n        &lt;&lt;h2>Batman&lt;&lt;/h2>\n        &lt;&lt;/li>\n      &lt;&lt;li>\n        &lt;&lt;h2>Spiderman&lt;&lt;/h2>\n        &lt;&lt;/li>\n    &lt;&lt;/ul>;   }\n}\n\nexport default Superheroes;</code></pre>\n\n\n\n<p>The list items are all defined as JSX markup, so if we need to change something, we need to change all of the occurrences of&nbsp;each&nbsp;<kbd>&lt;li&gt;</kbd>&nbsp;element.</p>\n\n\n\n<p>We can make improve this implementation. We can consider each list item as a component, and the&nbsp;<kbd>SuperHeroes</kbd>&nbsp;component as the one defined by the following code:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">import React from 'react';\n\nclass SuperHero extends React.Component {\n  render() {\n    return &lt;li>\n      &lt;h3>SuperHero name&lt;/h3>\n      &lt;p>SuperHero description&lt;/p>\n    &lt;/li>;\n  }\n}\n\nexport default SuperHero;</pre>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s discuss about Props and how we can pass data from one component to another. Props are used to pass data from a parent component to a child component in React and they are the main mechanism for component communication. So, props are a major part of what allows the React component pattern to work. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":401,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4024"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4024"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4024/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/401"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4024"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4024"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4024"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4026,"date":"2020-05-27T06:21:11","date_gmt":"2020-05-27T06:21:11","guid":{"rendered":"http://react.foobrdigital.com/?p=32"},"modified":"2020-05-27T06:21:11","modified_gmt":"2020-05-27T06:21:11","slug":"vs-props","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/vs-props/","title":{"rendered":"React State"},"content":{"rendered":"\n<p>A React state is a mutable data store of components—self-contained, functionality-centric blocks of UI and logic. Mutable means state values can change. By using state in a view (render()) and changing values later, you can affect the view’s representation.</p>\n\n\n\n<p>So far our components are static and don&#8217;t allow for dynamic behavior, which isn&#8217;t very interesting and we would need to be able to make our components dynamic for them to be useful. React components have the concept of state to allow for dynamic behavior. The following code shows how we can use state to create some simple dynamic behavior:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let HelloReact = React.createClass({\n            getInitialState: function() {\n      return {\n            myMessage: 'I am from default state'\n      };\n  },\n  updateMyMessage: function(e) {\n      this.setState({myMessage: e.target.value});\n  },\n  render: function() {\n    return (\n      &lt;&lt;div>\n        &lt;&lt;input type='text' onChange={this.updateMyMessage}/>\n        &lt;&lt;div>Hello React!!&lt;&lt;/div>\n        &lt;&lt;div>{this.state.myMessage}&lt;&lt;/div>\n      &lt;&lt;/div>\n      );\n  }\n});\n\nReactDOM.render(\n  &lt;&lt;HelloReact/>,\n  document.getElementById('view'));</code></pre>\n\n\n\n<p>Go ahead and run the code your app and you will see the following result:<img src=\"{{imagePath}}react-state-hello-img.jpg\" alt=\"\"></p>\n\n\n\n<p>Now type something into the text box and you will see that the I am from default state will change to something dynamically as you type.</p>\n\n\n\n<h3>So What we did Above?</h3>\n\n\n\n<p>We are seeing a few new concepts here. First, we are wiring up our dynamic property from the state collection using the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n            &lt;&lt;div>{this.state.myMessage}&lt;/div>\n          </code></pre>\n\n\n\n<p>Now, anytime this.state.myMessage changes we will see that change reflected in the browser because React will rerender our component. Next, we need to wire up our UI to allow us to update this.state.myMessage in response to user input. To do this we will take advantage of the synthetic events&#8217; capabilities of React&#8217;s virtual DOM. We use the following code to subscribe the this.updateMyMessage method to the onChange synthetic event:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n              &lt;&lt;input type='text' onChange={this.updateMyMessage}/>\n            </code></pre>\n\n\n\n<p>Now, anytime we change the text in our textbox, this.updateMyMessage will be called, which is shown below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n             updateMessage: function(e) {\n            this.setState({message: e.target.value});\n  },\n          </code></pre>\n\n\n\n<p>Here we are capturing the event&#8217;s argument, e, and then calling this.setState and passing in a JavaScript object with a message property that is set to the value of e.target (our text box). The this.setState() method is added to our React component by React and it will update the component&#8217;s state with the properties that are defined in the JSON object that is passed in, and then rerender the component using the new state. Components in React are meant to be state machines and changing the state transitions the UI from one visual state to another.</p>\n\n\n\n<p>Remember that this.setState() method will merge the existing this.state with the object that is passed in. This means that you only need to specify the properties that you want to update as it will not delete any properties that are not defined in the JSON object, which are currently defined on this.state.</p>\n\n\n\n<p>The only remaining detail in the code sample is how we are able to declare a default state by defining a getInitialState() method:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ngetInitialState: function() {\n            return {\n          message: 'I am from default state'\n      };\n  },\n          </code></pre>\n\n\n\n<p>The object we return from the getInitialState() method will be used to initialize our component&#8217;s state.</p>\n\n\n\n<h4>Difference of Props and State.</h4>\n\n\n\n<p>We have already learned about Props and we got to know that Props is also an object that holds information to control the behavior of that particular component, sounds familiar to State indeed but props and states are nowhere near to be same. But:</p>\n\n\n\n<p>Props are immutable i.e. once set the props cannot be changed, while State is an observable object that is to be used to hold data that may change over time and to control the behavior after each change.</p>\n\n\n\n<p>States can only be used in Class Components while Props don’t have this limitation.</p>\n\n\n\n<p>While Props are set by the parent component, State is generally updated by event handlers.</p>\n\n\n\n<p>Now we have learned the basics of State and are able to differentiate it from Props.</p>\n","protected":false},"excerpt":{"rendered":"<p>A React state is a mutable data store of components—self-contained, functionality-centric blocks of UI and logic. Mutable means state values can change. By using state in a view (render()) and changing values later, you can affect the view’s representation. So far our components are static and don&#8217;t allow for dynamic behavior, which isn&#8217;t very interesting [&hellip;]</p>\n","protected":false},"author":1,"featured_media":402,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4026"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4026"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4026/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/402"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4026"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4026"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4026"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4025,"date":"2020-05-27T06:25:12","date_gmt":"2020-05-27T06:25:12","guid":{"rendered":"http://react.foobrdigital.com/?p=31"},"modified":"2020-05-27T06:25:12","modified_gmt":"2020-05-27T06:25:12","slug":"what-is-constructor","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/what-is-constructor/","title":{"rendered":"State Vs Props"},"content":{"rendered":"\n<h2>State</h2>\n\n\n\n<p>The state is an updatable structure that is used to contain data or information about the component and can change over time. The change in state can happen as a response to user action or system event. It is the heart of the react component which determines the behavior of the component and how it will render. A state must be kept as simple as possible. It represents the component&#8217;s local state or information. It can only be accessed or modified inside the component or by the component directly.</p>\n\n\n\n<h2>Props</h2>\n\n\n\n<p>Props are read-only components. It is an object which stores the value of attributes of a tag and work similar to the HTML attributes. It allows passing data from one component to other components. It is similar to function arguments and can be passed to the component the same way as arguments passed in a function. Props are immutable so we cannot modify the props from inside the component.</p>\n\n\n\n<h2>Difference between State and Props</h2>\n\n\n\n<table class=\"alt\">\n        <tbody><tr>\n          <th>SN</th>\n          <th>Props</th>\n          <th>State</th>\n        </tr>\n        <tr>\n          <td><strong>1.</strong></td>\n          <td>Props are read-only.</td>\n          <td>State changes can be asynchronous.</td>\n        </tr>\n        <tr>\n          <td><strong>2.</strong></td>\n          <td>Props are immutable.</td>\n          <td>State is mutable.</td>\n        </tr>\n        <tr>\n          <td><strong>3.</strong></td>\n          <td>Props allow you to pass data from one component to other components as an argument.</td>\n          <td>State holds information about the components.</td>\n        </tr>\n        <tr>\n          <td><strong>4.</strong></td>\n          <td>Props can be accessed by the child component.</td>\n          <td>State cannot be accessed by child components.</td>\n        </tr>\n        <tr>\n          <td><strong>5.</strong></td>\n          <td>Props are used to communicate between components.</td>\n          <td>States can be used for rendering dynamic changes with the component.</td>\n        </tr>\n        <tr>\n          <td><strong>6.</strong></td>\n          <td>Stateless component can have Props.</td>\n          <td>Stateless components cannot have State.</td>\n        </tr>\n        <tr>\n          <td><strong>7.</strong></td>\n          <td>Props make components reusable.</td>\n          <td>State cannot make components reusable.</td>\n        </tr>\n        <tr>\n          <td><strong>8.</strong></td>\n          <td>Props are external and controlled by whatever renders the component.</td>\n          <td>The State is internal and controlled by the React Component itself.</td>\n        </tr>\n        </tbody></table>\n\n\n\n<p>The below table will guide you about the changing in props and state.</p>\n\n\n\n<table class=\"alt\">\n        <tbody><tr>\n          <th>SN</th>\n          <th>Condition</th>\n          <th>Props</th>\n          <th>State</th>\n        </tr>\n        <tr>\n          <td><strong>1.</strong></td>\n          <td>Can get initial value from parent Component?</td>\n          <td>Yes</td>\n          <td>Yes</td>\n        </tr>\n\n        <tr>\n          <td><strong>2.</strong></td>\n          <td>Can be changed by parent Component?</td>\n          <td>Yes</td>\n          <td>No</td>\n        </tr>\n\n        <tr>\n          <td><strong>3.</strong></td>\n          <td>Can set default values inside Component?</td>\n          <td>Yes</td>\n          <td>Yes</td>\n        </tr>\n\n        <tr>\n          <td><strong>4.</strong></td>\n          <td>Can change inside Component?</td>\n          <td>No</td>\n          <td>Yes</td>\n        </tr>\n\n        <tr>\n          <td><strong>5.</strong></td>\n          <td>Can set initial value for child Components?</td>\n          <td>Yes</td>\n          <td>Yes</td>\n        </tr>\n\n        <tr>\n          <td><strong>6.</strong></td>\n          <td>Can change in child Components?</td>\n          <td>Yes</td>\n          <td>No</td>\n        </tr>\n        </tbody></table>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: The component State and Props share some common similarities. They are given in the below table.</p></blockquote>\n\n\n\n<table class=\"alt\">\n        <tbody><tr>\n          <th>SN</th>\n          <th>State and Props</th>\n        </tr>\n        <tr>\n          <td><strong>1.</strong></td>\n          <td>Both are plain JS object.</td>\n        </tr>\n        <tr>\n          <td><strong>2.</strong></td>\n          <td>Both can contain default values.</td>\n        </tr>\n        <tr>\n          <td><strong>3.</strong></td>\n          <td>Both are read-only when they are using by this.</td>\n        </tr>\n        </tbody></table>\n","protected":false},"excerpt":{"rendered":"<p>State The state is an updatable structure that is used to contain data or information about the component and can change over time. The change in state can happen as a response to user action or system event. It is the heart of the react component which determines the behavior of the component and how [&hellip;]</p>\n","protected":false},"author":1,"featured_media":403,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4025"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4025"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4025/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/403"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4025"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4025"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4025"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4027,"date":"2020-05-27T06:27:37","date_gmt":"2020-05-27T06:27:37","guid":{"rendered":"http://react.foobrdigital.com/?p=38"},"modified":"2020-05-27T06:27:37","modified_gmt":"2020-05-27T06:27:37","slug":"component-api","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/component-api/","title":{"rendered":"Constructor"},"content":{"rendered":"\n<h1>What is Constructor?</h1>\n\n\n\n<p>The constructor is a method used to initialize an object&#8217;s state in a class. It automatically called during the creation of an object in a class.</p>\n\n\n\n<p>The concept of a constructor is the same in React. The constructor in a React component is called before the component is mounted. When you implement the constructor for a React component, you need to call&nbsp;<strong>super(props)</strong>&nbsp;method before any other statement. If you do not call super(props) method,&nbsp;<strong>this.props</strong>&nbsp;will be undefined in the constructor and can lead to bugs.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-preformatted\"> \n      </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>       \n          Constructor(props){\n          super(props);\n}\n        </code></pre>\n\n\n\n<p>In React, constructors are mainly used for two purposes:</p>\n\n\n\n<ol><li>It used for initializing the local state of the component by assigning an object to this.state.</li><li>It used for binding event handler methods that occur in your component.</li></ol>\n\n\n\n<h4>Note: If you neither initialize state nor bind methods for your React component, there is no need to implement a constructor for React component.</h4>\n\n\n\n<p>You cannot call&nbsp;<strong>setState()</strong>&nbsp;method directly in the&nbsp;<strong>constructor()</strong>. If the component needs to use local state, you need directly to use &#8216;<strong>this.state</strong>&#8216; to assign the initial state in the constructor. The constructor only uses this.state to assign initial state, and all other methods need to use set.state() method.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<p>The concept of the constructor can understand from the below example.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\"> \n      </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>       \n          import React, { Component } from 'react';\n\nclass App extends Component {\n          constructor(props){\n    super(props);\n    this.state = {\n          data: 'www.codemeals.com'\n      }\n    this.handleEvent = this.handleEvent.bind(this);\n  }\n  handleEvent(){\n    console.log(this.props);\n  }\n  render() {\n    return (\n      &lt;div className=\"App\">\n    &lt;h2>React Constructor Demo&lt;/h2>\n    &lt;input type =\"text\" value={this.state.data} />\n        &lt;button onClick={this.handleEvent}>Click Me&lt;/button>\n      &lt;/div>\n    );\n  }\n}\nexport default App;\n        </code></pre>\n\n\n\n<p><strong>Main.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">       \n      </pre>\n\n\n\n<pre class=\"wp-block-code\"><code> \n          import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(&lt;App />, document.getElementById('app'));\n        </code></pre>\n\n\n\n<p>The most common question related to the constructor are:</p>\n\n\n\n<p><strong>1. Is it necessary to have a constructor in every component?</strong></p>\n\n\n\n<p>No, it is not necessary to have a constructor in every component. If the component is not complex, it simply returns a node.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">        <code>\n  </code>\n      </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>        class App extends Component {\n          render () {\n        return (\n            &lt;p> Name: { this.props.name }&lt;/p>\n        );\n    }\n}\n        </code></pre>\n\n\n\n<p><strong>2. Is it necessary to call super() inside a constructor?</strong></p>\n\n\n\n<p>Yes, it is necessary to call super() inside a constructor. If you need to set a property or access &#8216;this&#8217; inside the constructor in your component, you need to call super().</p>\n\n\n\n<pre class=\"wp-block-preformatted\">  <code>\n        </code>\n      </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>      \n          class App extends Component {\n          constructor(props){\n        this.fName = \"Harry\"; // 'this' is not allowed before super()\n    }\n    render () {\n        return (\n            &lt;p> Name: { this.props.name }&lt;/p>\n        );\n    }\n}</code></pre>\n\n\n\n<p>When you run the above code, you get an error saying&nbsp;<strong>&#8216;this&#8217; is not allowed before super()</strong>. So if you need to access the props inside the constructor, you need to call super(props).</p>\n\n\n\n<h2>Arrow Functions</h2>\n\n\n\n<p>The Arrow function is the new feature of the ES6 standard. If you need to use arrow functions, it is not necessary to bind any event to &#8216;this.&#8217; Here, the scope of &#8216;this&#8217; is global and not limited to any calling function. So If you are using Arrow Function, there is no need to bind &#8216;this&#8217; inside the constructor.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"> <code>\n        </code>\n      </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>       \nimport React, { Component } from 'react';\n\nclass App extends Component {\n          constructor(props){\n    super(props);\n    this.state = {\n          data: 'www.codemeals.com'\n      }\n  }\n  handleEvent = () => {\n    console.log(this.props);\n  }\n  render() {\n    return (\n      &lt;div className=\"App\">\n    &lt;h2>React Constructor Example&lt;/h2>\n    &lt;input type =\"text\" value={this.state.data} />\n        &lt;button onClick={this.handleEvent}>Click Me&lt;/button>\n      &lt;/div>\n    );\n  }\n}\nexport default App;</code></pre>\n\n\n\n<p>We can use a constructor in the following ways:</p>\n\n\n\n<p><strong>1) The constructor is used to initialize state.</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">      </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>        \n          class App extends Component {\n          constructor(props){\n        // Set initial value for 'inputTextValue'\n        this.state = {\n          inputTextValue: 'initial value',\n        };\n  }\n}\n        </code></pre>\n\n\n\n<p><strong>2) Using &#8216;this&#8217; inside constructor</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">        <code>\n          class App extends Component {\n          constructor(props) {\n        // when you use 'this' in constructor, super() needs to be called first\n        super();\n        // it means, when you want to use 'this.props' in constructor, call it as below\n        super(props);\n    }\n}\n        </code>\n      </pre>\n\n\n\n<p><strong>3) Initializing third-party libraries</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">  <code>\n    class App extends Component {\n    constructor(props) {\n\n    this.myApp = new MyAppsList();\n\n        //Here, you can access props without using 'this'\n        this.App = new MyAppsList(props.environment);\n    }\n}\n  </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>What is Constructor? The constructor is a method used to initialize an object&#8217;s state in a class. It automatically called during the creation of an object in a class. The concept of a constructor is the same in React. The constructor in a React component is called before the component is mounted. When you implement [&hellip;]</p>\n","protected":false},"author":1,"featured_media":422,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4027"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4027"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4027/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/422"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4027"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4027"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4027"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4028,"date":"2020-05-27T06:28:25","date_gmt":"2020-05-27T06:28:25","guid":{"rendered":"http://react.foobrdigital.com/?p=39"},"modified":"2020-05-27T06:28:25","modified_gmt":"2020-05-27T06:28:25","slug":"life-cycle","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/life-cycle/","title":{"rendered":"Forms"},"content":{"rendered":"\n<p>Form components such as &lt;input/&gt;, &lt;textarea/&gt; and &lt;option/&gt; are handled differently by React as they allow for being mutated by the users input unlike static components like &lt;div/&gt; or &lt;h1/&gt;. As we will the dynamic nature of form components combined with the determination of React components can lead to some unexpected things when you are first learning React.</p>\n\n\n\n<h3>Controlled components &#8211; the read-only input</h3>\n\n\n\n<p>Let&#8217;s start by exploring the concept of controlled components by looking at the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n    let myTextBox = React.createClass({\n    render: function() {\n        return &lt;input type='text' value='I am a Read Only Text'/>;\n    }\n});\n\nReactDOM.render(\n    &lt;myTextBox/>,\n    document.getElementById('view'));\n  </code></pre>\n\n\n\n<p>Let&#8217;s now run this code and try and change the text displayed in the text box. Go ahead and try to change the value of the text box and you will see the TextBox element doesn&#8217;t allow the text for being updated and as you type the text displayed, &#8220;I am a Read Only Text&#8221;, doesn&#8217;t change.</p>\n\n\n\n<p>The reason that our TextBox element doesn&#8217;t change as we type is because in React an input with its value prop set like the one below is a controlled component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n    let myTextBox = React.createClass({\n    render: function() {\n        return &lt;input type='text' value='Read only'/>;\n    }\n});\n  </code></pre>\n\n\n\n<p>What it means to be a controlled component is that the input will always display the value that is currently assigned to the input&#8217;s value prop. In our code we haven&#8217;t provided a way for the input&#8217;s value to change so our component always displays &#8220;Read only&#8221; and it ignores incoming input from the keyboard. This is because React form components are not wired up to respond to the peripheral input like keyboards. And this is because, as we just discussed, React form components are only wired to display what is set on the input component&#8217;s value prop.</p>\n\n\n\n<h3>Controlled components &#8211; the read and write input</h3>\n\n\n\n<p>Go ahead and see what happens when we wire up controlled components to state and props by looking at the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n    var DemoForm = React.createClass({\n    getInitialState: function() {\n        return { message: 'You can Change me Value' }\n    },\n    getDefaultProps: function () {\n        return { message: 'I am Read only' }\n    },\n    onChange: function(event) {\n        this.setState({message: event.target.value});\n    },\n    render: function() {\n        return (\n&lt;div>\n                &lt;input id='readOnly' className='form-control' type='text'\n                       value={this.props.message}/>\n                &lt;input id='readAndWrite' className=\"form-control\" type='text'\n                       value={this.state.message}\n                       onChange={this.onChange}/>\n            &lt;&lt;div>\n        );\n    }\n});\n\nReactDOM.render(\n    &lt;DemoForm/>,\n    document.getElementById('view'));\n  </code></pre>\n\n\n\n<p>After you run the code, you will see that if you try and change the values in the two text input boxes you will see that you can&#8217;t change the &#8216;I am Read only&#8217; text box but you can change the second text box.</p>\n\n\n\n<p>The Read only text box is the input with id of readOnly and has it&#8217;s value set to this.props.message shown as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n    &lt;input id='readOnly' className='form-control' type='text'\n           value=this.props.message}/>\n  </code></pre>\n\n\n\n<p>Note that this.props.message is given a default value of Read only from the ExampleForm.getDefaultProps method shown as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>getDefaultProps: function () {\n    return { message: 'Read only' }\n    },</code></pre>\n\n\n\n<p>Because React component props are immutable and because in our example this.props.message is only set inside the ExampleForm component that declares our Read only input box our Read only text input box can&#8217;t be changed.</p>\n\n\n\n<p>However, the Read and write input box with the id set to readAndWrite is set to this.state.message and it&#8217;s onChange synthetic event is set to the this.onChange method shown as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  &lt; input id='readAndWrite' className=\"form-control\" type='text' value={this.state.message} onChange={this.onChange}/></code></pre>\n\n\n\n<p>In the onChange method we are then taking the event that is passed in from the React synthetic event and then calling this.setState({message: event.target.value}). This call will update this.state.message reflect the input that the user sends in via a keyboard or some other input device.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  onChange: function(event) {\n    this.setState({message: event.target.value});\n    },</code></pre>\n\n\n\n<p>Updating state in this way will cause a rerender and when the component&#8217;s render method is called it will use the current value from this.state.message allowing our component to be dynamic to update it&#8217;s displayed value.</p>\n\n\n\n<p>If you are familiar with two-way data binding frameworks then this probably seems like a lot of work to do something in React that is really simple in frameworks that support two-way data-binding. However, the React team chose to follow a one-way data flow model below.</p>\n","protected":false},"excerpt":{"rendered":"<p>Form components such as &lt;input/&gt;, &lt;textarea/&gt; and &lt;option/&gt; are handled differently by React as they allow for being mutated by the users input unlike static components like &lt;div/&gt; or &lt;h1/&gt;. As we will the dynamic nature of form components combined with the determination of React components can lead to some unexpected things when you are [&hellip;]</p>\n","protected":false},"author":1,"featured_media":405,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4028"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4028"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4028/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/405"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4028"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4028"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4028"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4029,"date":"2020-05-27T06:29:52","date_gmt":"2020-05-27T06:29:52","guid":{"rendered":"http://react.foobrdigital.com/?p=40"},"modified":"2020-05-27T06:29:52","modified_gmt":"2020-05-27T06:29:52","slug":"forms","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/forms/","title":{"rendered":"Simple Form"},"content":{"rendered":"\n<h2>Creating Simple Form with Controlled Components</h2>\n\n\n\n<p>Let&#8217;s&nbsp;take a look at a simple form&nbsp;now using controlled components.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">    </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let TextBox = React.createClass({\n      render: function() {\n      return (\n            &lt;input className='form-control'\n                name={this.props.name}\n                type='text'\n                value={this.props.value}\n                onChange={this.props.onChange}/>\n        );\n    }\n});\n\nlet DemoForm = React.createClass({\n      getInitialState: function () {\n      return { form: { firstName: 'Harry', lastName: 'Potter'} }\n    },\n    onChange: function(event) {\n      this.state.form&#91;event.target.name] = event.target.value;\n\n        this.setState({form: this.state.form});\n    },\n    onSubmit: function(event) {\n      event.preventDefault();\n\n        alert('Form submitted. firstName: ' +\n            this.state.form.firstName +\n            ', lastName: ' +\n            this.state.form.lastName);\n\n    },\n    render: function() {\n      let self = this;\n       return (\n            &lt;form onSubmit={this.onSubmit}>\n                &lt;TextBox name='firstName'\n                    value={this.state.form.firstName}\n                    onChange={this.onChange}/>\n                &lt;TextBox name='lastName'\n                    value={this.state.form.lastName}\n                    onChange={this.onChange}/>\n                &lt;button className='btn btn-success'\n                type='submit'>Submit&lt;/button>\n            &lt;/form>\n        );\n    }\n});\n\nReactDOM.render(\n    &lt;DemoForm/>,\n    document.getElementById('view'));</code></pre>\n\n\n\n<p>Run the code and click&nbsp;<strong>Submit</strong>&nbsp;and you will see an alert showing user&#8217;s first name and last name.</p>\n\n\n\n<h3>So what is happening above?</h3>\n\n\n\n<p>This code creates a simple first name, last name form by doing the following.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Create a reusable TextBox component that allows for wiring up name, value and onChange in a consistent way.\n\nlet TextBox = React.createClass({\n        render: function() {\n        return (\n            &lt;input className='form-control'\n                name={this.props.name}\n                type='text'\n                value={this.props.value}\n                onChange={this.props.onChange}/>\n        );\n    }\n});</code></pre>\n\n\n\n<p>In our&nbsp;<code>DemoForm</code>&nbsp;component we create a simple form for the first name and last&nbsp;name using our&nbsp;<code>TextBox</code>&nbsp;component. We also wire up form&#8217;s&nbsp;<code>onSubmit</code>&nbsp;to the&nbsp;<code>this.onSubmit</code>&nbsp;method and wire up each&nbsp;<code>TextBox</code>&nbsp;instance&nbsp;<code>onChange</code>&nbsp;to&nbsp;<code>this.onChange</code>.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">   </pre>\n\n\n\n<pre class=\"wp-block-code\"><code> render: function() {\n              let self = this;\n    return (\n            &lt;form onSubmit={this.onSubmit}>\n                &lt;TextBox name='firstName'\n                    value={this.state.form.firstName}\n                    onChange={this.onChange}/>\n                &lt;TextBox name='lastName'\n                    value={this.state.form.lastName}\n                    onChange={this.onChange}/>\n                &lt;button className='btn btn-success'\n                type='submit'>Submit&lt;/button>\n            &lt;/form>\n        );\n    }</code></pre>\n\n\n\n<p>We wire up our&nbsp;<code>DemoForm.onChange</code>&nbsp;method to allow our controlled components to be dynamic and to reflect our users input in the UI. Note that we are taking advantage of JavaScript&#8217;s implementation of objects as dictionaries here to set the property on&nbsp;<code>this.state.form</code>. Using this kind of approach will greatly reduce boiler plate that you need to write to wire up inputs.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"> </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>   onChange: function(event) {\n              this.state.form&#91;event.target.name] = event.target.value;\n\n    this.setState({form: this.state.form})\n    }</code></pre>\n\n\n\n<p>We then wire up&nbsp;<code>DemoForm.onSubmit</code>&nbsp;method to first suppress the default form behavior of HTML which will prevent a server side postback and then we&nbsp;show an&nbsp;alert with the first name and last name values that were entered into our form.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">  </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>  onSubmit: function(event) {\n              event.preventDefault();\n\n    alert('Form submitted. firstName: ' +\n        this.state.form.firstName +\n        ', lastName: ' +\n        this.state.form.lastName);\n                }</code></pre>\n\n\n\n<h3>But what about the best practices?</h3>\n\n\n\n<p>Now we&#8217;ve&nbsp;looked at how it works but let&#8217;s take a minute to focus on how we followed React&#8217;s best practices around state. The following is a quick refresher on the best practices.</p>\n\n\n\n<p>For each piece of state in your application, you have to identify every component that renders something based on that state. Then, find a common owner component (a single component above all the components that need the state in the hierarchy). Either the common owner or another component higher up in the hierarchy should own the state.</p>\n\n\n\n<p>If you can&#8217;t find a component where it makes sense to own the state, create a new component simply for holding the state and add it somewhere in the hierarchy above the common owner component.</p>\n\n\n\n<p>In the example above we applied these best practices in a way that is often called&nbsp;<strong>Smart</strong>&nbsp;and&nbsp;<strong>Dumb</strong>&nbsp;components but also called fat and skinny, stateful and&nbsp;pure, screens and components, and so on The approach involves dividing your components into two categories, Smart components that contain state and Dumb components that are immutable and only use props. Organizing your components in this way aligns really well with the React best practices and will make your app easier to understand and reason about.</p>\n\n\n\n<p>In our example we have created the&nbsp;<code>DemoForm</code>&nbsp;smart component that contains all the state for our application and the&nbsp;<code>TextBox</code>&nbsp;dumb component that is immutable and just provides a seam for our text input components allowing us to easily provide consistency in how we layout and wire up our text inputs. By using this approach we&#8217;ve moved the state out of the&nbsp;<code>TextBox</code>&nbsp;component and into the<code>&nbsp;DemoForm</code>. The example form is then able to store the state for all the&nbsp;<code>TextBox</code>&nbsp;instances and will update the&nbsp;<code>TextBox</code>&nbsp;instances with any changes in state through&nbsp;<code>TextBox</code>&nbsp;props.</p>\n\n\n\n<h3>Refactoring the form to be data driven</h3>\n\n\n\n<p>The modular design of&nbsp;our application makes it trivial to make our form data driven by changing our render method as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>render: function() {\n        let self = this;\n    return (\n            &lt;form onSubmit={this.onSubmit}>\n        {Object.keys(this.state.form).map(\n                function(key) {\n        return (\n                    &lt;TextBox name={key}\n                        value={self.state.form&#91;key]}\n                        onChange={self.onChange}/>\n                        )\n                    })\n                }\n\n                &lt;button className='btn btn-success' type='submit'>Submit&lt;/button>\n            &lt;/form>\n        );</code></pre>\n\n\n\n<h3>How it works</h3>\n\n\n\n<p>All we did here was&nbsp;replace the static&nbsp;<code>TextBox</code>&nbsp;component instances with code that dynamically generates the&nbsp;<code>TextBox</code>&nbsp;components based on&nbsp;<code>this.state.form</code>&nbsp;shown as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">        </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>    {Object.keys(this.state.form).map(\n                function(key) {\n        return (\n                        &lt;TextBox name={key}\n                    value={self.state.form&#91;key]}\n                    onChange={self.onChange}/>\n                        )\n                    })\n                }</code></pre>\n\n\n\n<p>The&nbsp;<code>Object.keys</code>&nbsp;method will return a collection of all the property names on&nbsp;<code>this.state.form</code>&nbsp;and we then call map on that collection to generate our&nbsp;<code>TextBox</code>&nbsp;instances. From here there are many exciting things we could do. We could make our&nbsp;<code>TextBox</code>&nbsp;component more generic so that it takes an input type from the data that it&#8217;s generated from and&nbsp;instead of just being a&nbsp;<code>TextBox</code>&nbsp;it could be a&nbsp;<code>FormInput</code>&nbsp;component that could be text, checkbox, and so on. There are micro frameworks, like Formsy that take this idea and add great features like validation to the mix. Speaking of validation, let&#8217;s take a closer look at validation in React.</p>\n","protected":false},"excerpt":{"rendered":"<p>Creating Simple Form with Controlled Components Let&#8217;s&nbsp;take a look at a simple form&nbsp;now using controlled components. Run the code and click&nbsp;Submit&nbsp;and you will see an alert showing user&#8217;s first name and last name. So what is happening above? This code creates a simple first name, last name form by doing the following. In our&nbsp;DemoForm&nbsp;component we [&hellip;]</p>\n","protected":false},"author":1,"featured_media":406,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4029"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4029"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4029/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/406"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4029"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4029"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4029"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4030,"date":"2020-05-27T06:31:32","date_gmt":"2020-05-27T06:31:32","guid":{"rendered":"http://react.foobrdigital.com/?p=41"},"modified":"2020-05-27T06:31:32","modified_gmt":"2020-05-27T06:31:32","slug":"react-controlled-vs-uncontrolled-component","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/react-controlled-vs-uncontrolled-component/","title":{"rendered":"Form Validation"},"content":{"rendered":"\n<h2>React Form Validation</h2>\n\n\n\n<p>In the previous lecture, we looked at how to build forms in react but how to do we handle validating the user input? There&#8217;s good and bad news on this for React users. The bad news is that this is not a concern that React address for us. However, the good news is that we have a lot of options when it comes to validation because React is focuses only on displaying and modifying the screen and not validating it. Our first options is that we could simply write our validation logic into our components or other JavaScript modules.</p>\n\n\n\n<p>If we started out writing our validation logic this way then we&#8217;d likely see some patterns emerging and wan&#8217;t to write some library style components, mixins and modules to reduce repetition and provide consistency. We could definitely roll our own solution to validating our apps as we saw at end of the last section where we looked at creating data driven forms. We could use generic components and\\or custom mixins to create our own library that would make writing forms and validation code easier. However, people have already done this and there are also open source libraries out there that can make things easier when it comes to validation.</p>\n\n\n\n<p>One of the key benefits of working in React is that you are working with a micro framework that only cares about view concerns and you can mix and match it with other tools allowing for a lot more flexibility than you will find in larger frameworks like Angular</p>\n\n\n\n<h3>Validation types</h3>\n\n\n\n<p>There are several places&nbsp;in a client-server style application that we can put validation logic. If we are using a relational database we can have validation that enforces the structure of our data for data coming into the database. On the server if we are using an N-Tier architecture we can have logic in our domain model and domain services, we can also have validation logic in our repositories or&nbsp;<strong>Data Access Objects</strong>&nbsp;(<strong>DAO</strong>). No matter&nbsp;what patterns we are using we can add validation logic to each tier of our application. In the same way we can have validation logic at the transport layer and validating that the data coming into our REST API is valid. However, none of those concerns are things that address with our React code as React is a view concern. This means that in a Client Server application we would only be looking at how to address Client Side validation within the context of React.</p>\n\n\n\n<h3>Note</h3>\n\n\n\n<p>Note that React is very flexible and it is possible to create applications with React that don&#8217;t follow a Client Server architecture. While you can build web applications with React you can also use React in Thick Client applications using technologies like NW.js or Electron. You can also use React to write native mobile applications using React Native. And that&#8217;s just some of the options available at the time of this writing. I&#8217;m sure we will see many other options come and go over time. However, for our conversation about React validation options we will refer to React&#8217;s area of concern as being on the Client Side.</p>\n\n\n\n<p>When writing client side&nbsp;validations and validating a form there are two scopes that we need to be able to validate at on the client side. We need to be able to do simple field level validations and more complex form level validations. Let&#8217;s now take a closer look at these two concepts.</p>\n\n\n\n<h4>Field-level validation</h4>\n\n\n\n<p>Field level validation is&nbsp;validating a single input, in isolation, for simple things like whether a field is required, whether a field&#8217;s length is under a maximum length or over a minimum, or whether a field satisfies a regular expression for things like emails, social security numbers, and so on.</p>\n\n\n\n<h4>Form-level validation</h4>\n\n\n\n<p>In addition to&nbsp;validating a form&#8217;s various fields against simple rules in isolation we also need the ability to validate our form against complex rules that consider more than one field. For example, we may need to make sure that two fields are the same when confirming an email address or password doesn&#8217;t have an obvious typo. Or we could have fields that are required when another field has a certain value, like requiring filling out a shipping address when it&#8217;s not the same as a billing address. There&#8217;s a whole host of complex business rules that we could need to validate that would require more than one field of data to process and these more complex, multi field rules fall into the scope of form level validations.</p>\n\n\n\n<h4>Let&#8217;s Start</h4>\n\n\n\n<p>Note that&nbsp;the first thing we had to do was install the React validation mixin module using NPM. We won&#8217;t cover those details here but you can find installation instructions on their site at. Now let&#8217;s look at the code found in&nbsp;<code>app.jsx</code>&nbsp;file which is the only file in our solution with logic. There is also an&nbsp;<code>index.html</code>&nbsp;that simply allows from displaying our components and references the needed JavaScript files. However, the heart of what we need to focus on here is all in the&nbsp;<code>app.jsx</code>&nbsp;file so let&#8217;s take a look at that code now.</p>\n\n\n\n<p>Because this example is longer we will look at the code in a few parts. The first thing we are doing in&nbsp;<code>app.jsx</code>&nbsp;is to bring in the dependencies that our code needs using CommonJs syntax as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>'use strict';\nvar React = require('react');\nvar Joi = require('joi');\nvar JoiValidationStrategy = require('joi-validation-strategy');\nvar ReactValidationMixin = require('react-validation-mixin');</code></pre>\n\n\n\n<p>We will cover CommonJs more in upcoming sections but for now what is important is to know that&nbsp;<code>require(\"dependency-name\")</code>&nbsp;allows us to pull in a dependency and assign it to a variable that we can then use in the file that we are in. Here we have pulled in React, joi, joi validation strategy and react-validation-mixin and assigned them all to local variables.</p>\n\n\n\n<p>Next we create a&nbsp;<code>ValidatedInput</code>&nbsp;component to wrap our fields so that we can easily implement a&nbsp;consistent form layout and provide a consistent field API for our form through our&nbsp;<code>ValidatedInput</code>&nbsp;component.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var ValidatedInput = React.createClass({\n          renderHelpText: function(message) {\n          return (\n            &lt;span className='help-block'>\n          {message}\n            &lt;/span>\n        );\n    },\n    render: function() {\n          var error\n            = this.props.getValidationMessages(\n                this.props.name);\n\n        var formClass = \"form-group\";\n\n        if (error.length > 0) {\n          formClass = formClass + \" has-error\";\n        }\n\n        return (\n            &lt;div className={formClass}>\n                &lt;label className=\"control-label\" htmlFor={this.props.name}>\n          {this.props.label}\n                &lt;/label>\n                &lt;input className=\"form-control\" {...this.props}/>\n          {this.renderHelpText(error)}\n            &lt;/div>\n        );\n    }\n});</code></pre>\n\n\n\n<p>All we are doing here is allowing for all the props that are applied to the&nbsp;<code>ValidatedInput</code>&nbsp;to be wired to our input as shown below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input className=\"form-control\" {...this.props}/></code></pre>\n\n\n\n<p>Using <code>{...this.props}</code> allows us to easily use this component to handle all the bootstrap styles and layout while delegating the controlled component wire up to the consuming component. We are adding an input with a label that will reference the input element&#8217;s name by setting the label element&#8217;s <code>for={this.props.name}</code> value. We&#8217;ve also added an error that will be displayed if:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>this.props.getValidationMessages(this.props.name)</code></pre>\n\n\n\n<p>Next let&#8217;s look at&nbsp;the&nbsp;<code>Demo</code>&nbsp;component below which contains our form.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var Demo = React.createClass({\n          validatorTypes: {\n          userName: Joi.string().required().label('User Name'),\n    password: Joi.string().required().regex(/&#91;a-zA-Z0-9]{3,30}/).label('Password')\n  },\n\n  getValidatorData: function() {\n          return this.state;\n  },\n\n  getInitialState: function() {\n          return {\n          userName: \"\",\n      password: \"\"\n    };\n  },\n\n      onSubmit(event) {\n          event.preventDefault();\n\n          // Handle field level validations\n          var onValidate = function(error) {\n\n          if (error) {\n          if (error.userName) {\n          alert(error.userName);\n            }\n\n            if (error.password) {\n          alert(error.password);\n            }\n            }\n\n            // Handle form level validations\n            var passwordContainsUserName\n                = this.state.password.indexOf(\n                    this.state.userName) > -1;\n\n        if (this.state.userName\n            &amp;&amp; passwordContainsUserName) {\n          alert(\"Password cannot contain the user name.\");\n            return;\n            }\n\n            if (!error) {\n          alert(\"Account created!\");\n            }\n            };\n\n            this.props.validate(onValidate.bind(this));\n        },\n\n  onChange: function(event) {\n          var state = {};\n    state&#91;event.target.name] = event.target.value;\n    this.setState(state);\n  },\n\n  render: function() {\n          return (\n        &lt;div className=\"container\">\n            &lt;form onSubmit={this.onSubmit}>\n                &lt;ValidatedInput\n                    name=\"userName\"\n                    type=\"text\"\n                    ref=\"userName\"\n                    placeholder=\"Enter User Name\"\n                    label=\"User Name\"\n                    value={this.state.userName}\n                    onChange={this.onChange}\n                    onBlur={this.props.handleValidation(\"userName\")}\n                    getValidationMessages=\n          {this.props.getValidationMessages}/>\n                &lt;ValidatedInput\n                    name=\"password\"\n                    className=\"form-control\"\n                    type=\"text\"\n                    ref=\"password\"\n                    placeholder=\"Enter Password\"\n                    label=\"Password\"\n                    value={this.state.password}\n                    onChange={this.onChange}\n                    onBlur={this.props.handleValidation(\"password\")}\n                    getValidationMessages=\n          {this.props.getValidationMessages}/>\n                &lt;button className=\"btn btn-success\" type=\"submit\">\n                    Submit\n                &lt;/button>\n            &lt;/form>\n &lt;/div>\n        );\n  }\n});</code></pre>\n\n\n\n<p>We start by&nbsp;implementing React-validation-mixin&#8217;s&nbsp;<code>validatorTypes</code>&nbsp;property that defines our validation rules shown as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>var Demo = React.createClass({\n          validatorTypes: {\n          userName: Joi.string().required().label(\"User Name\"),\n    password: Joi.string().required().regex(/&#91;a-zA-Z0-9]{3,30}/).label(\"Password\")\n  },</code></pre>\n\n\n\n<p>Here we are using&nbsp;<code>Joi</code>&nbsp;to make&nbsp;<code>userName</code>&nbsp;a required string with a label of&nbsp;<code>User Name</code>. We are also defining password to be a required string. We then use a regular expression so that our password must be between 3 and 30 characters that are either letters or numbers and we set the label to&nbsp;<code>Password</code>.</p>\n\n\n\n<p>Next we define react-validation-mixin&#8217;s&nbsp;<code>getValidatorData</code>&nbsp;method which returns the data that the validation rules will be applied too. In the&nbsp;<code>getValidatorData</code>&nbsp;method we simply return&nbsp;<code>this.state</code>&nbsp;and we are initializing&nbsp;<code>this.state</code>&nbsp;in&nbsp;<code>getInitialState</code>&nbsp;to return empty strings for&nbsp;<code>userName</code>&nbsp;and&nbsp;<code>password</code>&nbsp;shown as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"> </pre>\n\n\n\n<pre class=\"wp-block-code\"><code> getValidatorData: function() {\n          return this.state;\n  },\n  getInitialState: function() {\n          return {\n          userName: \"\",\n    password: \"\"\n    };\n  },</code></pre>\n\n\n\n<p>One of the things I like about react-validation-mixin is that it is very small and focused and relies on another library,&nbsp;<code>Joi</code>, for defining simple field level validation rules as we saw earlier in the code.</p>\n\n\n\n<p>Next let&#8217;s look&nbsp;at the render method that lays out and wires up our form shown as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">  </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>render: function() {\n          return (\n            &lt;form onSubmit={this.onSubmit}>\n                &lt;ValidatedInput\n                    name=\"userName\"\n                    type=\"text\"\n                    ref=\"userName\"\n                    placeholder=\"Enter User Name\"\n                    label=\"User Name\"\n                    value={this.state.userName}\n                    onChange={this.onChange}\n                    onBlur={this.props.handleValidation(\"userName\")}\n                    getValidationMessages=\n          {this.props.getValidationMessages}/>\n                &lt;ValidatedInput\n                    name=\"password\"\n                    className=\"form-control\"\n                    type=\"text\"\n                    ref=\"password\"\n                    placeholder=\"Enter Password\"\n                    label=\"Password\"\n                    value={this.state.password}\n                    onChange={this.onChange}\n                    onBlur={this.props.handleValidation(\"password\")}\n                    getValidationMessages=\n          {this.props.getValidationMessages}/>\n                &lt;button className=\"btn btn-success\" type=\"submit\">\n                    Submit\n                &lt;/button>\n            &lt;/form>\n);\n  }</code></pre>\n\n\n\n<p>Here we are doing the following:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">assigning <code>form.onSubmit</code> to <code>this.onSubmit</code> so that we can be notified when the form is submitted and execute our form level validations.\n&lt;form onSubmit={this.onSubmit}></pre>\n\n\n\n<ol><li>In <code>onSubmit</code> we are preventing the default HTML handling so the page doesn&#8217;t post back and then we are able easily do form level validations as we have access to <code>this.state</code> and can execute whatever logic we like here. When a validation rule fails we are just showing an alert box but you can and should do something more appropriate in your project code. Here we are first creating an <code>onValidate</code> function that takes an error and then performs field level validations using the properties of the error argument that was passed in. We will pass this <code>onValidate</code> function into the <code>this.props.validate</code> method that is part of the react-validation-mixin. The <code>this.props.validate</code> method it will then run the validation rules we configured above and pass any errors to <code>onValidate</code> in the first argument which is the error argument in our code. Additionally we are calling <code>bind(this)</code> on <code>onValidate</code> so that our <code>this</code> context is correctly set to our component instance and not the React runtime. Now when our <code>onValidate</code> callback function is called we can easily access <code>this.props</code> and <code>this.state</code> to do our complex validations. onSubmit(event) { event.preventDefault(); // Handle field level validations var onValidate = function(error) { if (error) { if (error.userName) { alert(error.userName); } if (error.password) { alert(error.password); } } // Handle form level validations var passwordContainsUserName = this.state.password.indexOf( this.state.userName) > -1; if (this.state.userName &amp;&amp; passwordContainsUserName) { alert(&#8220;Password cannot contain the user name.&#8221;); return; } if (!error) { alert(&#8220;Account created!&#8221;); } }; this.props.validate(onValidate.bind(this)); },</li><li>Assigning the <code>ValidatedInput</code> value to properties of our state so that our inputs will be dynamic. &lt;ValidatedInput name=&#8221;userName&#8221; type=&#8221;text&#8221; ref=&#8221;userName&#8221; placeholder=&#8221;Enter User Name&#8221; label=&#8221;User Name&#8221; value={this.state.userName} onChange={this.onChange} onBlur={this.props.handleValidation(&#8216;userName&#8217;)} getValidationMessages= {this.props.getValidationMessages}/></li><li>Assigning our <code>ValdiatedInput</code> instances&#8217; <code>onChange</code> properties to <code>this.onChange</code> so that we can update the state when <code>onChange</code> fires. Once <code>this.onChange</code> is called we are then taking advantage of how JavaScript objects are dictionaries to dynamically update our state based on the <code>event.target.name</code>. Here we are indexing into our state object with <code>state[event.target.name]</code>. This allows us to keep our code generic and reduce boilerplate code by following the simple convention that we assign the name attribute of our inputs to the same name that we use for that input&#8217;s data on our state object. This trick allows us to avoid having to write a function for each controlled component. onChange: function(event) { var state = {}; state[event.target.name] = event.target.value; this.setState(state); },</li><li>Assigning <code>onBlur</code> to <code>this.props.handleValidation</code> so that when our text input&#8217;s lose focus it&#8217;s associated validation rules will fire. The <code>handleValidation</code> function was added to our component by the react-validation-mixin and provides a convenient way to validate a field via a key from an event handler. When the <code>handleValidaiton</code> function is called our form will re-render if there is a validation error allowing us to display the error as we did in the <code>ValidatedInput</code> component we saw earlier in the code.</li><li>Assigning <code>this.props.getValidationMessages</code> to our <code>ValidatedInput</code> instance&#8217;s <code>getValidationMessages</code> property. The <code>getValidationMessages</code> function expects a call back that will be called to check for error messages that will be displayed as shown in the following code. We are simply delegating this call to <code>this.props.getValidationMessages</code> which is part of the react-validation-mixin which will use the configured label to create a standard user friendly error message.</li><li>Adding a submit button that will cause our form to submit shown as follows: &lt;button className=&#8221;btn btn-success&#8221; type=&#8221;submit&#8221;> Submit &lt;/button></li></ol>\n\n\n\n<p>Now we have looked at doing simple field and complex form level validations using the react-validation-mixin. At the time of this writing there are several validation libraries available in the open source community to choose from.</p>\n","protected":false},"excerpt":{"rendered":"<p>React Form Validation In the previous lecture, we looked at how to build forms in react but how to do we handle validating the user input? There&#8217;s good and bad news on this for React users. The bad news is that this is not a concern that React address for us. However, the good news [&hellip;]</p>\n","protected":false},"author":1,"featured_media":407,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4030"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4030"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4030/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/407"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4030"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4030"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4030"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4031,"date":"2020-05-27T06:33:20","date_gmt":"2020-05-27T06:33:20","guid":{"rendered":"http://react.foobrdigital.com/?p=42"},"modified":"2020-05-27T06:33:20","modified_gmt":"2020-05-27T06:33:20","slug":"events-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/events-3/","title":{"rendered":"Mixins"},"content":{"rendered":"\n<p><strong>mixins</strong>&nbsp;is a React&nbsp;feature that allows you to share cross cutting concerns with components. A mixin is simply an Object Literal that is used to add behavior to a component. It&#8217;s an implementation of the decorator pattern and the mixin you create can provide implementations of React&#8217;s component lifecycle events (<code>componentWillMount</code>,&nbsp;<code>componentDidMount</code>, and so on) and those will be called during your component&#8217;s lifecycle along with the component&#8217;s lifecycle methods.</p>\n\n\n\n<p>A nice feature of mixins is that if a component is using multiple mixins and several mixins define the same lifecycle method (i.e. several mixins want to do some cleanup when the component is destroyed), all of the lifecycle methods are guaranteed to be called</p>\n\n\n\n<p>Let&#8217;s take a look at a code sample below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let ReactMixin01 = {\n      log: function(message) {\n      console.log(message);\n    },\n    componentWillMount: function() {\n      this.log('componentWillMount from ReactMixin01');\n    }\n};\n\nlet ReactMixin02 = {\n      componentWillMount: function() {\n      console.log('componentWillMount from ReactMixin02');\n    }\n};\n\nlet HelloMessage = React.createClass({\n      mixins: &#91;ReactMixin01, ReactMixin02],\n        componentWillMount: function() {\n      this.log('componentWillMount from HelloMessage');\n    },\n    render: function() {\n      return &lt;h2>{this.props.message}&lt;/h2>;\n    }\n});\n\nlet Button = React.createClass({\n      mixins: &#91;ReactMixin02, ReactMixin01],\n    clicked: function() {\n      this.log(this.props.text + ' clicked');\n   },\n   componentWillMount: function() {\n      this.log('componentWillMount from Button');\n   },\n   render: function() {\n      return &lt;button onClick={this.clicked}>{this.props.text}&lt;/button>\n   }\n});\n\nlet HelloReact = React.createClass({\n      render: function() {\n      return (\n            &lt;div>\n                &lt;HelloMessage message='Hi'/>\n                &lt;Button text='OK'/>\n            &lt;/div>\n        );\n    }\n});\n\nReactDOM.render(\n    &lt;HelloReact/>,\n    document.getElementById('view'));</code></pre>\n\n\n\n<p>Let&#8217;s go ahead and run&nbsp;this code with the console open so we can see the&nbsp;<code>console.log</code>&nbsp;output. Click the&nbsp;<strong>OK</strong>&nbsp;button and then you will see the output shown as follows:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://react.foobrdigital.com/wp-content/uploads/2020/07/mixins-demo-01.jpg\" alt=\"\" class=\"wp-image-2445\"/></figure>\n\n\n\n<p>As you can see we have two&nbsp;logs for&nbsp;<code>componentWillMount from ReactMixin01</code>&nbsp;and&nbsp;<code>componentWillMount from ReactMixin02</code>. One pair of calls is for our&nbsp;<code>HelloMessage</code>&nbsp;component shown as follows:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://react.foobrdigital.com/wp-content/uploads/2020/07/mixins-demo-02.jpg\" alt=\"\" class=\"wp-image-2444\"/></figure>\n\n\n\n<p>And one pair for our&nbsp;<code>Button</code>&nbsp;component is shown as follows:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://react.foobrdigital.com/wp-content/uploads/2020/07/mixins-demo-03.jpg\" alt=\"\" class=\"wp-image-2443\"/></figure>\n\n\n\n<p>Take note of how each of these pairs of calls is then followed by a call from each component&#8217;s&nbsp;<code>componentWillMount</code>&nbsp;(<code>HelloMessage</code>&nbsp;and&nbsp;<code>Button</code>). Also note that for&nbsp;<code>HelloMessage</code>&nbsp;we get&nbsp;<code>ReactMixin01</code>&nbsp;and then&nbsp;<code>ReactMixin02</code>&nbsp;while for&nbsp;<code>Button</code>&nbsp;we get the opposite order. Then note that we get one message sent from the&nbsp;<code>Button</code>&nbsp;instance declared in our&nbsp;<code>HelloReact</code>&nbsp;component shown as follows:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://react.foobrdigital.com/wp-content/uploads/2020/07/mixins-demo-04.jpg\" alt=\"\" class=\"wp-image-2442\"/></figure>\n\n\n\n<h2>How it works</h2>\n\n\n\n<p>To take advantage of&nbsp;mixins we have created an object literal that defines a log method and a&nbsp;<code>componentWillMount</code>&nbsp;method that in turn calls&nbsp;<code>this.log</code>&nbsp;and logs out&nbsp;<code>componentWillMount from ReactMixin01</code>. We then assign that object literal to a&nbsp;<code>ReactMixin01</code>&nbsp;letiable shown as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let ReactMixin01 = {\n        log: function(message) {\n        console.log(message);\n    },\n    componentWillMount: function() {\n        this.log('componentWillMount from ReactMixin01');\n    }\n};</code></pre>\n\n\n\n<p>We then defined a second object literal that defines a&nbsp;<code>componentWillMount</code>&nbsp;method that calls&nbsp;<code>console.log</code>&nbsp;and passes&nbsp;<code>componentWillMount from ReactMixin02</code>&nbsp;shown as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let ReactMixin02 = {\n        componentWillMount: function() {\n        console.log('componentWillMount from ReactMixin02');\n    }\n};</code></pre>\n\n\n\n<p>We then use our object literals,&nbsp;<code>ReactMixin01</code>&nbsp;and&nbsp;<code>ReactMixin02</code>, as mixins in our&nbsp;<code>HelloMessage</code>&nbsp;component by adding them to the&nbsp;<code>HelloMessage.mixins</code>&nbsp;array shown as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let HelloMessage = React.createClass({\n        mixins: &#91;ReactMixin01, ReactMixin02],\n    componentWillMount: function() {\n        this.log('componentWillMount from HelloMessage');\n    },\n    render: function() {\n        return &lt;h2>{this.props.message}&lt;/h2>;\n    }\n});</code></pre>\n\n\n\n<p>After being added to the&nbsp;<code>HelloMessage.mixins</code>&nbsp;array our&nbsp;<code>ReactMixin01</code>&nbsp;will do two things:It will decorate our&nbsp;<code>HelloMessage.componentWillMount</code>&nbsp;lifecycle method by adding additional behavior. As we saw&nbsp;<code>ReactMixin01.componentWillMount</code>&nbsp;will be called followed by a call to&nbsp;<code>ReactMixin02.componentWillMount</code>&nbsp;followed by the call to&nbsp;<code>HelloMessage.componentWillMount</code>.It will make the log method available to the&nbsp;<code>HelloMessage</code>&nbsp;component. We are then able to use&nbsp;<code>this.long</code>&nbsp;in the&nbsp;<code>HellowMessage.componentWillMount</code>&nbsp;method.</p>\n\n\n\n<p>We then wire up&nbsp;<code>ReactMixin02</code>&nbsp;followed by&nbsp;<code>ReactMixin01</code>&nbsp;in our Button component shown as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>let Button = React.createClass({\n        mixins: &#91;ReactMixin02, ReactMixin01],\n    clicked: function() {\n        this.log(this.props.text + ' clicked');\n   },\n   componentWillMount: function() {\n        this.log('componentWillMount from Button');\n   },\n   render: function() {\n        return &lt;button onClick={this.clicked}>{this.props.text}&lt;/button>\n   }\n});</code></pre>\n\n\n\n<p>Adding the components in&nbsp;the reverse order from&nbsp;<code>HelloMessage</code>&nbsp;shows that the order that our mixins will be called is the same order as the order they are added to the mixins array in.</p>\n\n\n\n<p>We also use&nbsp;<code>this.log</code>&nbsp;from&nbsp;<code>ReactMixin01</code>&nbsp;mixin in the&nbsp;<code>Button.clicked</code>&nbsp;method to log out&nbsp;<code>this.props.text + ' clicked'</code>&nbsp;which is why we see&nbsp;<strong>OK</strong>&nbsp;clicked in the console output.</p>\n","protected":false},"excerpt":{"rendered":"<p>mixins&nbsp;is a React&nbsp;feature that allows you to share cross cutting concerns with components. A mixin is simply an Object Literal that is used to add behavior to a component. It&#8217;s an implementation of the decorator pattern and the mixin you create can provide implementations of React&#8217;s component lifecycle events (componentWillMount,&nbsp;componentDidMount, and so on) and those [&hellip;]</p>\n","protected":false},"author":1,"featured_media":408,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4031"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4031"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4031/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/408"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4031"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4031"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4031"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4032,"date":"2020-05-27T06:37:48","date_gmt":"2020-05-27T06:37:48","guid":{"rendered":"http://react.foobrdigital.com/?p=43"},"modified":"2020-05-27T06:37:48","modified_gmt":"2020-05-27T06:37:48","slug":"conditional-rendering","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/conditional-rendering/","title":{"rendered":"Events"},"content":{"rendered":"\n<h1>React Events</h1>\n\n\n\n<p>An event is an action that could be triggered as a result of the user action or system generated event. For example, a mouse click, loading of a web page, pressing a key, window resizes, and other interactions are called events.</p>\n\n\n\n<p>React has its own event handling system which is very similar to handling events on DOM elements. The react event handling system is known as Synthetic Events. The synthetic event is a cross-browser wrapper of the browser&#8217;s native event.</p>\n\n\n\n<p>Handling events with react have some syntactic differences from handling events on DOM. These are:</p>\n\n\n\n<ol><li>React events are named as&nbsp;<strong>camelCase</strong>&nbsp;instead of&nbsp;<strong>lowercase</strong>.</li><li>With JSX, a function is passed as the&nbsp;<strong>event handler</strong>&nbsp;instead of a&nbsp;<strong>string</strong>. For example:</li></ol>\n\n\n\n<p><strong>Event declaration in plain HTML:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>          \n       Hi CodePoint\n\n        </code></pre>\n\n\n\n<p><strong>Event declaration in React:</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">  \n      </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>      \n          \n      Hi CodePoint\n\n        </code></pre>\n\n\n\n<p>3. In react, we cannot return&nbsp;<strong>false</strong>&nbsp;to prevent the&nbsp;<strong>default</strong>&nbsp;behavior. We must call&nbsp;<strong>preventDefault</strong>&nbsp;event explicitly to prevent the default behavior. For example:</p>\n\n\n\n<p>In plain HTML, to prevent the default link behavior of opening a new page, we can write:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>    Click</code></pre>\n\n\n\n<p>In React, we can write it as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n          function ActionLink() {\n          function handleUserClick(e) {\n        e.preventDefault();\n        console.log('You Clicked Me.');\n    }\n    return (\n        \n              Click\n        \n    );\n}</code></pre>\n\n\n\n<p>In the above example, e is a&nbsp;<strong>Synthetic Event</strong>&nbsp;which defines according to the&nbsp;<strong>W3C</strong>&nbsp;spec.</p>\n\n\n\n<p>Now let us see how to use Event in React.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In the below example, we have used only one component and adding an onChange event. This event will trigger the&nbsp;<strong>changeText</strong>&nbsp;function, which returns the company name.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    \nimport React, { Component } from 'react';\nclass App extends React.Component {\n          constructor(props) {\n        super(props);\n        this.state = {\n          appName: ''\n        };\n    }\n    changeText(event) {\n        this.setState({\n          appName: event.target.value\n        });\n    }\n    render() {\n        return (\n            &lt;div>\n                &lt;h2>Simple Event Demo&lt;/h2>\n                &lt;label htmlFor=\"name\">Enter App name: &lt;/label>\n                &lt;input type=\"text\" id=\"appName\" onChange={this.changeText.bind(this)}/>\n                &lt;h3>You entered: { this.state.appName }&lt;/h3>\n            &lt;/div>\n        );\n    }\n}\nexport default App;</code></pre>\n\n\n\n<p>After running the code, when you will enter the App name the h3 tag will automatically update its content with the input value.</p>\n","protected":false},"excerpt":{"rendered":"<p>React Events An event is an action that could be triggered as a result of the user action or system generated event. For example, a mouse click, loading of a web page, pressing a key, window resizes, and other interactions are called events. React has its own event handling system which is very similar to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":409,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4032"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4032"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4032/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/409"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4032"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4032"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4032"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4033,"date":"2020-05-27T06:39:35","date_gmt":"2020-05-27T06:39:35","guid":{"rendered":"http://react.foobrdigital.com/?p=44"},"modified":"2020-05-27T06:39:35","modified_gmt":"2020-05-27T06:39:35","slug":"lists","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/lists/","title":{"rendered":"Lists"},"content":{"rendered":"\n<p>Lists are used to display data in an ordered format and mainly used to display menus on websites. In React, Lists can be created in a similar way as we create lists in JavaScript. Let us see how we transform Lists in regular JavaScript.</p>\n\n\n\n<p>The map() function is used for traversing the lists. In the below example, the map() function takes an array of numbers and multiply their values with 5. We assign the new array returned by map() to the variable multiplyNums and log it.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>            \nlet numbers = &#91;1, 2, 3, 4, 5];\nconst multiplyNums = numbers.map((number)=>{\n              return (number * 3);\n});\nconsole.log(multiplyNums);\n            </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>The above JavaScript code will log the output on the console. The output of the code is given below.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;3, 6, 9, 12, 15]\n﻿</code></pre>\n\n\n\n<p>Now, let us see how we create a list in React. To do this, we will use the map() function for traversing the list element, and for updates, we enclosed them between <strong>curly braces {}</strong>. Finally, we assign the array elements to listItems. Now, include this new list inside <strong>&lt;ul> &lt;/ul></strong> elements and render it to the DOM.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>            \nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst myFriendsList = &#91; 'Harry', 'Ron', 'Harmione' ];\nconst listItems = myFriendsList.map((myFriendsList)=>{\n              return &lt;li>{myFriendsList}&lt;/li>;\n});\nReactDOM.render(\n    &lt;ul> {listItems} &lt;/ul>,\n    document.getElementById('app')\n);\nexport default App;</code></pre>\n\n\n\n<p>After running the code you should list list of friends printed in your browser.</p>\n\n\n\n<h2>Rendering Lists inside components</h2>\n\n\n\n<p>In the previous example, we had directly rendered the list to the DOM. But it is not a good practice to render lists in React. In React, we had already seen that everything is built as individual components. Hence, we would need to render lists inside a component. We can understand it in the following code.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>          \n              import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction NameList(props) {\n              const myLists = props.myLists;\n              const listItems = myLists.map((myList) =>\n                &lt;li>{myList}&lt;/li>\n  );\n  return (\n    &lt;div>\n        &lt;h2>Rendering Lists inside component&lt;/h2>\n              &lt;ul>{listItems}&lt;/ul>\n    &lt;/div>\n  );\n}\nconst myLists = &#91; 'Harry', 'Ron', 'Harmione' ];\nReactDOM.render(\n  &lt;NameList myLists={myLists} />,\n  document.getElementById('app')\n);\nexport default App;\n            </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Lists are used to display data in an ordered format and mainly used to display menus on websites. In React, Lists can be created in a similar way as we create lists in JavaScript. Let us see how we transform Lists in regular JavaScript. The map() function is used for traversing the lists. In the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":356,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4033"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4033"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4033/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/356"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4033"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4033"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4033"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4016,"date":"2020-05-27T06:44:03","date_gmt":"2020-05-27T06:44:03","guid":{"rendered":"http://react.foobrdigital.com/?p=52"},"modified":"2020-05-27T06:44:03","modified_gmt":"2020-05-27T06:44:03","slug":"keys","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/keys/","title":{"rendered":"Keys"},"content":{"rendered":"\n<p>A key is a unique identifier. In React, it is used to identify which items have changed, updated, or deleted from the Lists. It is useful when we dynamically created components or when the users alter the lists. It also helps to determine which components in a collection needs to be re-rendered instead of re-rendering the entire set of components every time.</p>\n\n\n\n<p>Keys should be given inside the array to give the elements a stable identity. The best way to pick a key as a string that uniquely identifies the items in the list. It can be understood with the below example.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>\nconst stringLists = &#91; 'Harry', 'Ron', 'Harmione' ];\n\nconst updatedLists = stringLists.map((strList)=>{\n             {strList} ;\n});\n          </code></pre>\n\n\n\n<p>If there are no stable IDs for rendered items, you can assign the item&nbsp;<strong>index</strong>&nbsp;as a key to the lists. It can be shown in the below example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nconst stringLists = &#91; 'Harry', 'Ron', 'Harmione' ];\n\nconst updatedLists = stringLists.map((strList, index)=>{\n            &lt;li key={index}> {strList} &lt;/li>;\n});\n          </code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: It is not recommended to use indexes for keys if the order of the item may change in future. It creates confusion for the developer and may cause issues with the component state.</p></blockquote>\n\n\n\n<h2>Using Keys with component</h2>\n\n\n\n<p>Consider you have created a separate component for&nbsp;<strong>ListItem</strong>&nbsp;and extracting ListItem from that component. In this case, you should have to assign keys on the&nbsp;<strong>&lt;ListItem /&gt;</strong>&nbsp;elements in the array, not to the&nbsp;<strong>&lt;li&gt;</strong>&nbsp;elements in the ListItem itself. To avoid mistakes, you have to keep in mind that keys only make sense in the context of the surrounding array. So, anything you are returning from map() function is recommended to be assigned a key.</p>\n\n\n\n<h3>Demo: Wrong Key usage</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>            \nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction ListItem(props) {\n              const item = props.item;\n              return (\n                // Wrong! No need to specify the key here.\n                &lt;li key={item.toString()}>\n              {item}\n    &lt;/li>\n  );\n}\nfunction NameList(props) {\n              const myLists = props.myLists;\n              const listItems = myLists.map((strLists) =>\n                // The key should have been specified here.\n                &lt;ListItem item={strLists} />\n  );\n  return (\n    &lt;div>\n        &lt;h3>Wrong Key Usage Demo&lt;/h2>\n              &lt;ol>{listItems}&lt;/ol>\n    &lt;/div>\n  );\n}\nconst myLists = &#91; 'Harry', 'Ron', 'Harmione' ];\nReactDOM.render(\n  &lt;NameList myLists={myLists}/>,\n  document.getElementById('app')\n);\nexport default App;\n            </code></pre>\n\n\n\n<p>In the given example, the list is rendered successfully. But it is not a good practice that we had not assigned a key to the map() iterator.</p>\n\n\n\n<h3>Correct Key Implementation</h3>\n\n\n\n<p>To correct the above example, we should have to assign key to the map() iterator.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction ListItem(props) {\n    const item = props.item;\n    return (\n      // No need to specify the key here.\n      &lt;li> {item} &lt;/li>\n  );\n}\nfunction NameList(props) {\n    const myLists = props.myLists;\n    const listItems = myLists.map((strLists) =>\n      // The key should have been specified here.\n      &lt;ListItem key={myLists.toString()} item={strLists} />\n  );\n  return (&lt;&lt;div>\n        &lt;h2>Correct Key Usage &lt;/h2>\n            &lt;ol>{listItems}&lt;/ol>\n    &lt;/div>\n  );\n}\nconst myLists = &#91; 'Harry', 'Ron', 'Harmione' ];\nReactDOM.render(\n  &lt;NameList myLists={myLists}/>,\n  document.getElementById('app')\n);\nexport default App;\n  </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>A key is a unique identifier. In React, it is used to identify which items have changed, updated, or deleted from the Lists. It is useful when we dynamically created components or when the users alter the lists. It also helps to determine which components in a collection needs to be re-rendered instead of re-rendering [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4016"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4016"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4016/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4016"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4016"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4016"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4017,"date":"2020-05-27T06:46:22","date_gmt":"2020-05-27T06:46:22","guid":{"rendered":"http://react.foobrdigital.com/?p=53"},"modified":"2020-05-27T06:46:22","modified_gmt":"2020-05-27T06:46:22","slug":"refs","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/refs/","title":{"rendered":"Refs"},"content":{"rendered":"\n<p>Refs is the shorthand used for&nbsp;<strong>references</strong>&nbsp;in React. It is similar to&nbsp;<strong>keys</strong>&nbsp;in React. It is an attribute which makes it possible to store a reference to particular DOM nodes or React elements. It provides a way to access React DOM nodes or React elements and how to interact with it. It is used when we want to change the value of a child component, without making the use of props.</p>\n\n\n\n<h2>When to Use Refs</h2>\n\n\n\n<p>Refs can be used in the following cases:</p>\n\n\n\n<ul><li>When we need DOM measurements such as managing focus, text selection, or media playback.</li><li>It is used in triggering imperative animations.</li><li>When integrating with third-party DOM libraries.</li><li>It can also use as in callbacks.</li></ul>\n\n\n\n<h2>When to not use Refs</h2>\n\n\n\n<ul><li>Its use should be avoided for anything that can be done&nbsp;<strong>declaratively</strong>. For example, instead of using&nbsp;<strong>open()</strong>&nbsp;and&nbsp;<strong>close()</strong>&nbsp;methods on a Dialog component, you need to pass an&nbsp;<strong>isOpen</strong>&nbsp;prop to it.</li><li>You should have to avoid overuse of the Refs.</li></ul>\n\n\n\n<h2>How to create Refs</h2>\n\n\n\n<p>In React, Refs can be created by using&nbsp;<strong>React.createRef()</strong>. It can be assigned to React elements via the&nbsp;<strong>ref</strong>&nbsp;attribute. It is commonly assigned to an instance property when a component is created, and then can be referenced throughout the component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nclass MyComponent extends React.Component {\n   constructor(props) {\n            super(props);\n    this.callRef = React.createRef();\n  }\n  render() {\n            return &lt;div ref={this.callRef} />;\n  }\n}\n          </code></pre>\n\n\n\n<h2>How to access Refs</h2>\n\n\n\n<p>In React, when a ref is passed to an element inside render method, a reference to the node can be accessed via the current attribute of the ref.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const node = this.callRef.current;</code></pre>\n\n\n\n<h2>Refs current Properties</h2>\n\n\n\n<p>The ref value differs depending on the type of the node:</p>\n\n\n\n<ul><li>When the ref attribute is used in HTML element, the ref created with&nbsp;<strong>React.createRef()</strong>&nbsp;receives the underlying DOM element as its&nbsp;<strong>current</strong>&nbsp;property.</li><li>If the ref attribute is used on a custom class component, then ref object receives the&nbsp;<strong>mounted</strong>&nbsp;instance of the component as its current property.</li><li>The ref attribute cannot be used on&nbsp;<strong>function components</strong>&nbsp;because they don&#8217;t have instances.</li></ul>\n\n\n\n<h2>Add Ref to DOM elements</h2>\n\n\n\n<p>In the below example, we are adding a ref to store the reference to a DOM node or element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>       \nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass App extends React.Component {\n              constructor(props) {\n              super(props);\n    this.callRef = React.createRef();\n    this.addingRefInput = this.addingRefInput.bind(this);\n  }\n\n  addingRefInput() {\n              this.callRef.current.focus();\n  }\n\n  render() {\n              return (\n      &lt;div>\n        &lt;h2>Adding Ref to the DOM element&lt;/h2>\n        &lt;input\n          type=\"text\"\n          ref={this.callRef} />\n        &lt;input\n          type=\"button\"\n          value=\"Add text input\"\n          onClick={this.addingRefInput}\n        />\n      &lt;/div>\n    );\n  }\n}\nexport default App;\n            \n          </code></pre>\n\n\n\n<h2>Add Ref to Class components</h2>\n\n\n\n<p>In the below example, we are adding a ref to store the reference to a class component.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>         \nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nfunction CustomInput(props) {\n              let callRefInput = React.createRef();\n\n              function handleClick() {\n              callRefInput.current.focus();\n  }\n\n  return (\n    &lt;div>\n      &lt;h2>Adding Ref to Class Component&lt;/h2>\n      &lt;input\n        type=\"text\"\n        ref={callRefInput} />\n      &lt;input\n        type=\"button\"\n        value=\"Focus input\"\n        onClick={handleClick}\n      />\n    &lt;/div>\n  );\n}\nclass App extends React.Component {\n              constructor(props) {\n              super(props);\n    this.callRefInput = React.createRef();\n  }\n\n  focusRefInput() {\n              this.callRefInput.current.focus();\n  }\n\n  render() {\n              return (\n      &lt;CustomInput ref={this.callRefInput} />\n    );\n  }\n}\nexport default App;</code></pre>\n\n\n\n<h2>Callback refs</h2>\n\n\n\n<p>In react, there is another way to use refs that is called &#8220;<strong>callback refs</strong>&#8221; and it gives more control when the refs are&nbsp;<strong>set</strong>&nbsp;and&nbsp;<strong>unset</strong>. Instead of creating refs by createRef() method, React allows a way to create refs by passing a callback function to the ref attribute of a component. It looks like the below code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n&lt;input type=\"text\" ref={element => this.callRefInput = element} />\n          </code></pre>\n\n\n\n<p>The callback function is used to store a reference to the DOM node in an instance property and can be accessed elsewhere. It can be accessed as below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nthis.callRefInput.value\n          </code></pre>\n\n\n\n<p>The example below helps to understand the working of callback refs.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass App extends React.Component {\n              constructor(props) {\n              super(props);\n\n    this.callRefInput = null;\n\n    this.setInputRef = element => {\n              this.callRefInput = element;\n    };\n\n    this.focusRefInput = () => {\n              //Focus the input using the raw DOM API\n              if (this.callRefInput) this.callRefInput.focus();\n    };\n  }\n\n  componentDidMount() {\n              //autofocus of the input on mount\n    this.focusRefInput();\n  }\n\n  render() {\n              return (\n      &lt;div>\n    &lt;h2>Callback Refs Demo&lt;/h2>\n        &lt;input\n          type=\"text\"\n          ref={this.setInputRef}\n        />\n        &lt;input\n          type=\"button\"\n          value=\"Focus input text\"\n          onClick={this.focusRefInput}\n        />\n      &lt;/div>\n    );\n  }\n}\nexport default App;</code></pre>\n\n\n\n<p>In the above example, React will call the &#8220;ref&#8221; callback to store the reference to the input DOM element when the component&nbsp;<strong>mounts</strong>, and when the component&nbsp;<strong>unmounts</strong>, call it with&nbsp;<strong>null</strong>. Refs are always&nbsp;<strong>up-to-date</strong>&nbsp;before the&nbsp;<strong>componentDidMount</strong>&nbsp;or&nbsp;<strong>componentDidUpdate</strong>&nbsp;fires. The callback refs pass between components is the same as you can work with object refs, which is created with React.createRef().</p>\n\n\n\n<h2>Forwarding Ref from one component to another component</h2>\n\n\n\n<p>Ref forwarding is a technique that is used for passing a&nbsp;<strong>ref</strong>&nbsp;through a component to one of its child components. It can be performed by making use of the&nbsp;<strong>React.forwardRef()</strong>&nbsp;method. This technique is particularly useful with&nbsp;<strong>higher-order components</strong>&nbsp;and specially used in reusable component libraries. The most common example is given below.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>           \nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nconst TextInput = React.forwardRef((props, ref) => (\n  &lt;input type=\"text\" placeholder=\"Hello World\" ref={ref} />\n));\n\nconst inputRef = React.createRef();\n\nclass CustomTextInput extends React.Component {\n              handleSubmit = e => &lt;\n    e.preventDefault();\n    console.log(inputRef.current.value);\n  };\n  render() {\n              return (\n      &lt;div>\n        &lt;form onSubmit={e => this.handleSubmit(e)}>\n          &lt;TextInput ref={inputRef} />\n          &lt;button>Submit&lt;/button>\n        &lt;/form>\n      &lt;/div>\n    );\n  }\n}\nexport default App;</code></pre>\n\n\n\n<p>In the above example, there is a component <strong>TextInput</strong> that has a child as an input field. Now, to pass or forward the <strong>ref</strong> down to the input, first, create a ref and then pass your ref down to <strong>&lt;TextInput ref={inputRef}></strong>. After that, React forwards the ref to the <strong>forwardRef</strong> function as a second argument. Next, we forward this ref argument down to <strong>&lt;input ref={ref}></strong>. Now, the value of the DOM node can be accessed at <strong>inputRef.current</strong>.</p>\n\n\n\n<h2>React with useRef()</h2>\n\n\n\n<p>It is introduced in&nbsp;<strong>React 16.7</strong>&nbsp;and above version. It helps to get access the DOM node or element, and then we can interact with that DOM node or element such as focussing the input element or accessing the input element value. It returns the ref object whose&nbsp;<strong>.current</strong>&nbsp;property initialized to the passed argument. The returned object persist for the lifetime of the component.</p>\n\n\n\n<h3>Basic Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>const refContainer = useRef(initialValue);</code></pre>\n\n\n\n<h3>Demo</h3>\n\n\n\n<p>In the below code,&nbsp;<strong>useRef</strong>&nbsp;is a function that gets assigned to a variable,&nbsp;<strong>inputRef</strong>, and then attached to an attribute called ref inside the HTML element in which you want to reference.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nfunction useRefExample() {\n            const inputRef= useRef(null);\n            const onButtonClick = () => {\n            inputRef.current.focus();\n  };\n  return (\n    &lt;div>\n      &lt;input ref={inputRef} type=\"text\" />\n      &lt;button onClick={onButtonClick}>Submit&lt;/button>\n            &lt;/div>\n  );\n}\n          </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Refs is the shorthand used for&nbsp;references&nbsp;in React. It is similar to&nbsp;keys&nbsp;in React. It is an attribute which makes it possible to store a reference to particular DOM nodes or React elements. It provides a way to access React DOM nodes or React elements and how to interact with it. It is used when we want [&hellip;]</p>\n","protected":false},"author":1,"featured_media":357,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4017"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4017"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4017/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/357"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4017"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4017"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4017"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4018,"date":"2020-05-27T06:47:47","date_gmt":"2020-05-27T06:47:47","guid":{"rendered":"http://react.foobrdigital.com/?p=55"},"modified":"2020-05-27T06:47:47","modified_gmt":"2020-05-27T06:47:47","slug":"fragments","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/fragments/","title":{"rendered":"Fragments"},"content":{"rendered":"\n<p>In React, whenever you want to render something on the screen, you need to use a render method inside the component. This render method can return&nbsp;<strong>single</strong>&nbsp;elements or&nbsp;<strong>multiple</strong>&nbsp;elements. The render method will only render a single root node inside it at a time. However, if you want to return multiple elements, the render method will require a &#8216;<strong>div</strong>&#8216; tag and put the entire content or elements inside it. This extra node to the DOM sometimes results in the wrong formatting of your HTML output and also not loved by the many developers.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>\n    class App extends React.Component {\n    render() {\n      return (\n         &lt;div>\n           &lt;h1> Hi CodePoint &lt;/h1>\n         &lt;/div>\n      );\n     }\n}</code></pre>\n\n\n\n<p>To solve this problem, React introduced&nbsp;<strong>Fragments</strong>&nbsp;from the&nbsp;<strong>16.2</strong>&nbsp;and above version. Fragments allow you to group a list of children without adding extra nodes to the DOM.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>\n    &lt;React.Fragment>\n      &lt;h1> child1 &lt;/h1>\n    &lt;h2> child2 &lt;/h2>\n&lt;/React.Fragment></code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>       \nclass App extends React.Component {\n          render() {\n     return (\n       &lt;React.Fragment>\n            &lt;h1> Hello CodePoint &lt;/h1>\n         &lt;/React.Fragment>\n     );\n    }\n}</code></pre>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>In React, whenever you want to render something on the screen, you need to use a render method inside the component. This render method can return&nbsp;single&nbsp;elements or&nbsp;multiple&nbsp;elements. The render method will only render a single root node inside it at a time. However, if you want to return multiple elements, the render method will require [&hellip;]</p>\n","protected":false},"author":1,"featured_media":358,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4018"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4018"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4018/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/358"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4018"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4018"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4018"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3998,"date":"2020-05-27T06:53:19","date_gmt":"2020-05-27T06:53:19","guid":{"rendered":"http://react.foobrdigital.com/?p=54"},"modified":"2020-05-27T06:53:19","modified_gmt":"2020-05-27T06:53:19","slug":"router-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/router-3/","title":{"rendered":"Router"},"content":{"rendered":"\n<h1>Introduction to React Router</h1>\n\n\n\n<p>Routing is a process in which a user is directed to different pages based on their action or request. ReactJS Router is mainly used for developing Single Page Web Applications. React Router is used to define multiple routes in the application. When a user types a specific URL into the browser, and if this URL path matches any &#8216;route&#8217; inside the router file, the user will be redirected to that particular route.</p>\n\n\n\n<p>React Router is a standard library system built on top of the React and used to create routing in the React application using React Router Package. It provides the synchronous URL on the browser with data that will be displayed on the web page. It maintains the standard structure and behavior of the application and mainly used for developing single page web applications.</p>\n\n\n\n<h2>Need of React Router</h2>\n\n\n\n<p>React Router plays an important role to display multiple views in a single page application. Without React Router, it is not possible to display multiple views in React applications. Most of the social media websites like Facebook, Instagram uses React Router for rendering multiple views.</p>\n\n\n\n<h2>React Router Installation</h2>\n\n\n\n<p>React contains three different packages for routing. These are:</p>\n\n\n\n<ol><li><strong>react-router:</strong>&nbsp;It provides the core routing components and functions for the React Router applications.</li><li><strong>react-router-native:</strong>&nbsp;It is used for mobile applications.</li><li><strong>react-router-dom:</strong>&nbsp;It is used for web applications design.</li></ol>\n\n\n\n<p>It is not possible to install react-router directly in your application. To use react routing, first, you need to install react-router-dom modules in your application. The below command is used to install react router dom.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n  $ npm install react-router-dom --save\n\n</code></pre>\n\n\n\n<h2>Components in React Router</h2>\n\n\n\n<p>There are two types of router components:</p>\n\n\n\n<ul><li><strong>&lt;BrowserRouter&gt;:</strong>&nbsp;It is used for handling the dynamic URL.</li><li><strong>&lt;HashRouter&gt;:</strong>&nbsp;It is used for handling the static request.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step-1:</strong>&nbsp;In our project, we will create two more components along with&nbsp;<strong>App.js</strong>, which is already present.</p>\n\n\n\n<p><strong>About.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nimport React from 'react'\nclass About extends React.Component {\n    render() {\n    return &lt;h2>About&lt;/h1>\n  }\n}\nexport default About\n</code></pre>\n\n\n\n<p><strong>Contact.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n  import React from 'react'\nclass Contact extends React.Component {\n    render() {\n    return &lt;h2>Contact&lt;/h1>\n}\n}\nexport default Contact\n</code></pre>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n  import React from 'react'\nclass App extends React.Component {\n    render() {\n    return (\n &lt;div>\n        &lt;h2>Home&lt;/h1>\n      &lt;/div>\n)\n}\n}\nexport default App\n</code></pre>\n\n\n\n<p><strong>Step-2:</strong> For Routing, open the index.js file and import all the three component files in it. Here, you need to import line: <strong>import { Route, Link, BrowserRouter as Router } from &#8216;react-router-dom&#8217;</strong> which helps us to implement the Routing. Now, our index.js file looks like below.</p>\n\n\n\n<h2>What is Route?</h2>\n\n\n\n<p>It is used to define and render component based on the specified path. It will accept components and render to define what should be rendered.</p>\n\n\n\n<p><strong>Index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport App from './App';\nimport About from './about'\nimport Contact from './contact'\n\nconst routing = (\n  &lt;Router>\n    &lt;div>\n      &lt;h1>This is React Router Demo&lt;/h1>\n      &lt;Route path=\"/\" component={App} />\n      &lt;Route path=\"/about\" component={About} />\n      &lt;Route path=\"/contact\" component={Contact} />\n    &lt;/div>\n  &lt;/Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\n</code></pre>\n\n\n\n<p><strong>Step-3:</strong>&nbsp;Open&nbsp;<strong>command prompt</strong>, go to your project location, and then type&nbsp;<strong>npm start</strong>. You should be able to see &#8220;This is React Router Demo&#8221; and the current route in your browser.</p>\n\n\n\n<p>Now, if you enter&nbsp;<strong>manually</strong>&nbsp;in the browser:&nbsp;<strong>localhost:3000/about</strong>, you will see&nbsp;<strong>About</strong>&nbsp;component is rendered on the screen.</p>\n\n\n\n<p><strong>Step-4:</strong>&nbsp;In the above screen, you can see that&nbsp;<strong>Home</strong>&nbsp;component is still rendered. It is because the home path is &#8216;<strong>/</strong>&#8216; and about path is &#8216;<strong>/about</strong>&#8216;, so you can observe that&nbsp;<strong>slash</strong>&nbsp;is common in both paths which render both components. To stop this behavior, you need to use the&nbsp;<strong>exact</strong>&nbsp;prop. It can be seen in the below example.</p>\n\n\n\n<p><strong>Index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport App from './App';\nimport About from './about'\nimport Contact from './contact'\n\nconst routing = (\n  &lt;Router>\n    &lt;div>\n      &lt;h1>React Router Example&lt;/h1>\n      &lt;Route exact path=\"/\" component={App} />\n      &lt;Route path=\"/about\" component={About} />\n      &lt;Route path=\"/contact\" component={Contact} />\n    &lt;/div>\n  &lt;/Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\n</code></pre>\n\n\n\n<h2>Adding Navigation using Link component</h2>\n\n\n\n<p>Sometimes, we want to need&nbsp;<strong>multiple</strong>&nbsp;links on a single page. When we click on any of that particular&nbsp;<strong>Link</strong>, it should load that page which is associated with that path without&nbsp;<strong>reloading</strong>&nbsp;the web page. To do this, we need to import&nbsp;<strong>&lt;Link&gt;</strong>&nbsp;component in the&nbsp;<strong>index.js</strong>&nbsp;file.</p>\n\n\n\n<h3>What is &lt; Link&gt; component?</h3>\n\n\n\n<p>This component is used to create links which allow to&nbsp;<strong>navigate</strong>&nbsp;on different&nbsp;<strong>URLs</strong>&nbsp;and render its content without reloading the webpage.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport App from './App';\nimport About from './about'\nimport Contact from './contact'\n\nconst routing = (\n  &lt;Router>\n    &lt;div>\n      &lt;h1>React Router Example&lt;/h1>\n      &lt;ul>\n        &lt;li>\n          &lt;Link to=\"/\">Home&lt;/Link>\n        &lt;/li>\n        &lt;li>\n          &lt;Link to=\"/about\">About&lt;/Link>\n        &lt;/li>\n        &lt;li>\n          &lt;Link to=\"/contact\">Contact&lt;/Link>\n        &lt;/li>\n      &lt;/ul>\n      &lt;Route exact path=\"/\" component={App} />\n      &lt;Route path=\"/about\" component={About} />\n      &lt;Route path=\"/contact\" component={Contact} />\n    &lt;/div>\n  &lt;/Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\n</code></pre>\n\n\n\n<p>After adding Link, you should see that the routes are rendered on the screen. Now, if you click on the&nbsp;<strong>About</strong>, you will see URL is changing and About component is rendered.</p>\n\n\n\n<p>Now, we need to add some&nbsp;<strong>styles</strong>&nbsp;to the Link. So that when we click on any particular link, it can be easily&nbsp;<strong>identified</strong>&nbsp;which Link is&nbsp;<strong>active</strong>. To do this react router provides a new trick&nbsp;<strong>NavLink</strong>&nbsp;instead of&nbsp;<strong>Link</strong>. Now, in the index.js file, replace Link from Navlink and add properties&nbsp;<strong>activeStyle</strong>. The activeStyle properties mean when we click on the Link, it should have a specific style so that we can differentiate which one is currently active.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n  import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link, NavLink } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport About from './about'\nimport Contact from './contact'\n\nconst routing = (\n  &lt;Router>\n    &lt;div>\n      &lt;h1>React Router Example&lt;/h1>\n      &lt;ul>\n        &lt;li>\n          &lt;NavLink to=\"/\" exact activeStyle={\n    {color:'pink'}\n          }>Home&lt;/NavLink>\n        &lt;/li>\n        &lt;li>\n          &lt;NavLink to=\"/about\" exact activeStyle={\n    {color:'blue'}\n          }>About&lt;/NavLink>\n        &lt;/li>\n        &lt;li>\n          &lt;NavLink to=\"/contact\" exact activeStyle={\n    {color:'cyan'}\n          }>Contact&lt;/NavLink>\n        &lt;/li>\n      &lt;/ul>\n      &lt;Route exact path=\"/\" component={App} />\n      &lt;Route path=\"/about\" component={About} />\n      &lt;Route path=\"/contact\" component={Contact} />\n    &lt;/div>\n  &lt;/Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When we execute the above program, we will see that&nbsp;<strong>Home</strong>&nbsp;link is of color&nbsp;<strong>Pink</strong>&nbsp;and is the only currently&nbsp;<strong>active</strong>&nbsp;link.</p>\n\n\n\n<p>Now, when we click on&nbsp;<strong>About</strong>&nbsp;link, its color shown&nbsp;<strong>purple</strong>&nbsp;that is the currently&nbsp;<strong>active</strong>&nbsp;link.</p>\n\n\n\n<h3>&lt;Link&gt; vs &lt;NavLink&gt;</h3>\n\n\n\n<p>The Link component allows navigating the different routes on the websites, whereas NavLink component is used to add styles to the active routes.</p>\n\n\n\n<h2>React Router Switch</h2>\n\n\n\n<p>The &lt;<strong>Switch</strong>&gt; component is used to render components only when the path will be&nbsp;<strong>matched</strong>. Otherwise, it returns to the&nbsp;<strong>not found</strong>&nbsp;component.</p>\n\n\n\n<p>To understand this, first, we need to create a&nbsp;<strong>notfound</strong>&nbsp;component.</p>\n\n\n\n<p><strong>notfound.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n  import React from 'react'\nconst Notfound = () => Not found\nexport default Notfound\n</code></pre>\n\n\n\n<p>Now, import component in the index.js file. It can be seen in the below code.</p>\n\n\n\n<p><strong>Index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n  import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link, NavLink, Switch } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport About from './about'\nimport Contact from './contact'\nimport Notfound from './notfound'\n\nconst routing = (\n  &lt;Router>\n    &lt;div>\n      &lt;h1>React Router Example&lt;/h1>\n      &lt;ul>\n        &lt;li>\n          &lt;NavLink to=\"/\" exact activeStyle={\n    {color:'pink'}\n          }>Home&lt;/NavLink>\n        &lt;/li>\n        &lt;li>\n          &lt;NavLink to=\"/about\" exact activeStyle={\n    {color:'blue'}\n          }>About&lt;/NavLink>\n        &lt;/li>\n        &lt;li>\n          &lt;NavLink to=\"/contact\" exact activeStyle={\n    {color:'cyan'}\n          }>Contact&lt;/NavLink>\n        &lt;/li>\n      &lt;/ul>\n      &lt;Switch>\n         &lt;Route exact path=\"/\" component={App} />\n         &lt;Route path=\"/about\" component={About} />\n         &lt;Route path=\"/contact\" component={Contact} />\n         &lt;Route component={Notfound} />\n      &lt;/Switch>\n    &lt;/div>\n  &lt;/Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\n</code></pre>\n\n\n\n<p>If we manually enter the&nbsp;<strong>wrong</strong>&nbsp;path, it will give us the not found error.</p>\n\n\n\n<h2>React Router &lt;Redirect&gt;</h2>\n\n\n\n<p>A &lt;Redirect&gt; component is used to redirect to another route in our application to maintain the old URLs. It can be placed anywhere in the route hierarchy.</p>\n\n\n\n<h3>Nested Routing in React</h3>\n\n\n\n<p>Nested routing allows you to render&nbsp;<strong>sub-routes</strong>&nbsp;in your react application. Let&#8217;s see the process</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n  import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link, NavLink, Switch } from 'react-router-dom'\nimport './main.css';\nimport App from './App';\nimport About from './about'\nimport Contact from './contact'\nimport Notfound from './notfound'\n\nconst routing = (\n\nconst routing = (\n  &lt;Router>\n    &lt;div>\n      &lt;h1>React Router Example&lt;/h1>\n      &lt;ul>\n        &lt;li>\n          &lt;NavLink to=\"/\" exact activeStyle={\n                   {color:'pink'}\n          }>Home&lt;/NavLink>\n        &lt;/li>\n        &lt;li>\n          &lt;NavLink to=\"/about\" exact activeStyle={\n                   {color:'blue'}\n          }>About&lt;/NavLink>\n        &lt;/li>\n        &lt;li>\n          &lt;NavLink to=\"/contact\" exact activeStyle={\n                   {color:'cyan'}\n          }>Contact&lt;/NavLink>\n        &lt;/li>\n      &lt;/ul>\n      &lt;Switch>\n         &lt;Route exact path=\"/\" component={App} />\n         &lt;Route path=\"/about\" component={About} />\n         &lt;Route path=\"/contact\" component={Contact} />\n         &lt;Route component={Notfound} />\n      &lt;/Switch>\n    &lt;/div>\n  &lt;/Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\n</code></pre>\n\n\n\n<p>Now, we need to import the&nbsp;<strong>React Router</strong>&nbsp;component to implement the&nbsp;<strong>subroutes</strong>.</p>\n\n\n\n<p><strong>In contact.js</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">  <code>  import React from 'react'\nimport { Route, Link } from 'react-router-dom'\n\nconst Contacts = ({ match }) =&gt; &lt;p&gt;{match.params.id}&lt;/p&gt;\n\nclass Contact extends React.Component {\n    render() {\n    const { url } = this.props.match\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Welcome to Contact Page&lt;/h1&gt;\n        &lt;strong&gt;Select contact Id&lt;/strong&gt;\n        &lt;ul&gt;\n          &lt;li&gt;\n            &lt;Link to=\"/contact/1\"&gt;Contacts 1 &lt;/Link&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n            &lt;Link to=\"/contact/2\"&gt;Contacts 2 &lt;/Link&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n            &lt;Link to=\"/contact/3\"&gt;Contacts 3 &lt;/Link&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n            &lt;Link to=\"/contact/4\"&gt;Contacts 4 &lt;/Link&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;Route path=\"/contact/:id\" component={Contacts} /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\nexport default Contact </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Introduction to React Router Routing is a process in which a user is directed to different pages based on their action or request. ReactJS Router is mainly used for developing Single Page Web Applications. React Router is used to define multiple routes in the application. When a user types a specific URL into the browser, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":359,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3998"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3998"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3998/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/359"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3998"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3998"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3998"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3999,"date":"2020-05-27T06:55:55","date_gmt":"2020-05-27T06:55:55","guid":{"rendered":"http://react.foobrdigital.com/?p=56"},"modified":"2020-05-27T06:55:55","modified_gmt":"2020-05-27T06:55:55","slug":"css","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/css/","title":{"rendered":"Animations"},"content":{"rendered":"\n<p>The animation is a technique in which images are manipulated to appear as moving images. It is one of the most used technique to make an interactive web application. In React, we can add animation using an explicit group of components known as the&nbsp;<strong>React Transition Group</strong>.</p>\n\n\n\n<p>React Transition Group is an add-on component for managing component states and useful for defining&nbsp;<strong>entering</strong>&nbsp;and&nbsp;<strong>exiting</strong>&nbsp;transitions. It is not able to animate styles by itself. Instead, it exposes transition states, manages classes and group elements, and manipulates the DOM in useful ways. It makes the implementation of visual transitions much easier.</p>\n\n\n\n<p>React Transition group has mainly&nbsp;<strong>two APIs</strong>&nbsp;to create transitions. These are:</p>\n\n\n\n<ol><li><strong>ReactTransitionGroup:</strong>&nbsp;It uses as a low-level API for animation.</li><li><strong>ReactCSSTransitionGroup:</strong>&nbsp;It uses as a high-level API for implementing basic CSS transitions and animations.</li></ol>\n\n\n\n<h2>Installation</h2>\n\n\n\n<p>We need to install&nbsp;<strong>react-transition-group</strong>&nbsp;for creating animation in React Web application. You can use the below command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n$ npm install react-transition-group --save\n\n        </code></pre>\n\n\n\n<h2>React Transition Group Components</h2>\n\n\n\n<p>React Transition Group API provides&nbsp;<strong>three</strong>&nbsp;main components. These are:</p>\n\n\n\n<ol><li>Transition</li><li>CSSTransition</li><li>Transition Group</li></ol>\n\n\n\n<h3>Transition</h3>\n\n\n\n<p>It has a simple component API to describe a transition from one component state to another over time. It is mainly used to animate the&nbsp;<strong>mounting</strong>&nbsp;and&nbsp;<strong>unmounting</strong>&nbsp;of a component. It can also be used for in-place transition states as well.</p>\n\n\n\n<p>We can access the Transition component into four states:</p>\n\n\n\n<ul><li>entering</li><li>entered</li><li>exiting</li><li>exited</li></ul>\n\n\n\n<h3>CSSTransition</h3>\n\n\n\n<p>The CSSTransition component uses CSS stylesheet classes to write the transition and create animations. It is inspired by the&nbsp;<strong>ng-animate</strong>&nbsp;library. It can also inherit all the props of the transition component. We can divide the &#8220;CSSTransition&#8221; into&nbsp;<strong>three</strong>&nbsp;states. These are:</p>\n\n\n\n<ul><li>Appear</li><li>Enter</li><li>Exit</li></ul>\n\n\n\n<p>CSSTransition component must be applied in a pair of class names to the child components. The first class is in the form of&nbsp;<strong>name-stage</strong>&nbsp;and the second class is in the&nbsp;<strong>name-stage-active</strong>. For example, you provide the name fade, and when it applies to the &#8216;enter&#8217; stage, the two classes will be&nbsp;<strong>fade-enter</strong>&nbsp;and&nbsp;<strong>fade-enter-active</strong>. It may also take a prop as Timeout which defines the maximum time to animate.</p>\n\n\n\n<h3>TransitionGroup</h3>\n\n\n\n<p>This component is used to manage a set of transition components (Transition and CSSTransition) in a list. It is a state machine that controls the&nbsp;<strong>mounting</strong>&nbsp;and&nbsp;<strong>unmounting</strong>&nbsp;of components over time. The Transition component does not define any animation directly. Here, how &#8216;list&#8217; item animates is based on the individual transition component. It means, the &#8220;TransitionGroup&#8221; component can have different animation within a component.</p>\n\n\n\n<p>Let us see the example below, which clearly help to understand the React Animation.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<p>In the App.js file, import react-transition-group component, and create the CSSTransition component that uses as a wrapper of the component you want to animate. We are going to use&nbsp;<strong>transitionEnterTimeout</strong>&nbsp;and&nbsp;<strong>transitionLeaveTimeout</strong>&nbsp;for CSS Transition. The Enter and Leave animations used when we want to insert or delete elements from the list.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n          import React, { Component } from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nclass App extends React.Component {\n          constructor(props) {\n    super(props);\n    this.state = {items: &#91;'Blockchain', 'ReactJS', 'TypeScript', 'JavaTpoint']};\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  handleAdd() {\n    const newItems = this.state.items.concat(&#91;\n      prompt('Enter Item Name')\n    ]);\n    this.setState({items: newItems});\n  }\n\n  handleRemove(i) {\n    let newItems = this.state.items.slice();\n    newItems.splice(i, 1);\n    this.setState({items: newItems});\n  }\n\n  render() {\n    const items = this.state.items.map((item, i) => (\n\n    ));\n\n    return (\n\n    Animation Example\n            Insert Item\n\n               transitionName=\"example\"\n           transitionEnterTimeout={800}\n               transitionLeaveTimeout={600}>\n               {items}\n\n\n    );\n  }\n}\nexport default App;\n        </code></pre>\n\n\n\n<p><strong>Main.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render, document.getElementById('app'));\n        </code></pre>\n\n\n\n<p><strong>style.css</strong></p>\n\n\n\n<p>Add style.css file in your application, and add the following CSS styles. Now, to use this CSS file, you need to add the&nbsp;<strong>link</strong>&nbsp;of this file in your HTML file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n          .example-enter {\n          opacity: 0.01;\n}\n\n.example-enter.example-enter-active {\n          opacity: 1;\n          transition: opacity 500ms ease-in;\n}\n\n.example-leave {\n          opacity: 1;\n}\n\n.example-leave.example-leave-active {\n          opacity: 0.01;\n          transition: opacity 300ms ease-in;\n}\n\n        </code></pre>\n\n\n\n<p>In the above example, the animation durations are specified in both the&nbsp;<strong>CSS</strong>&nbsp;and&nbsp;<strong>render</strong>&nbsp;method. It tells React component when to remove the animation classes from the list and if it is leaving when to remove the element from the DOM.</p>\n\n\n\n<p>Click on &#8216;<strong>Insert Item</strong>&#8216; button</p>\n\n\n\n<p>Once we insert the item and press&nbsp;<strong>Ok</strong>, the new item can be added in the list with fade in style. Here, we can also delete any item from the list by clicking on the particular link.</p>\n","protected":false},"excerpt":{"rendered":"<p>The animation is a technique in which images are manipulated to appear as moving images. It is one of the most used technique to make an interactive web application. In React, we can add animation using an explicit group of components known as the&nbsp;React Transition Group. React Transition Group is an add-on component for managing [&hellip;]</p>\n","protected":false},"author":1,"featured_media":360,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3999"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3999"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3999/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/360"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3999"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3999"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3999"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4000,"date":"2020-05-27T06:58:21","date_gmt":"2020-05-27T06:58:21","guid":{"rendered":"http://react.foobrdigital.com/?p=62"},"modified":"2020-05-27T06:58:21","modified_gmt":"2020-05-27T06:58:21","slug":"animation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/animation/","title":{"rendered":"Animation"},"content":{"rendered":"\n<p>The animation is a technique in which images are manipulated to appear as moving images. It is one of the most used technique to make an interactive web application. In React, we can add animation using an explicit group of components known as the&nbsp;<strong>React Transition Group</strong>.</p>\n\n\n\n<p>React Transition Group is an add-on component for managing component states and useful for defining&nbsp;<strong>entering</strong>&nbsp;and&nbsp;<strong>exiting</strong>&nbsp;transitions. It is not able to animate styles by itself. Instead, it exposes transition states, manages classes and group elements, and manipulates the DOM in useful ways. It makes the implementation of visual transitions much easier.</p>\n\n\n\n<p>React Transition group has mainly&nbsp;<strong>two APIs</strong>&nbsp;to create transitions. These are:</p>\n\n\n\n<ol><li><strong>ReactTransitionGroup:</strong>&nbsp;It uses as a low-level API for animation.</li><li><strong>ReactCSSTransitionGroup:</strong>&nbsp;It uses as a high-level API for implementing basic CSS transitions and animations.</li></ol>\n\n\n\n<h2>Installation</h2>\n\n\n\n<p>We need to install&nbsp;<strong>react-transition-group</strong>&nbsp;for creating animation in React Web application. You can use the below command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install react-transition-group --save  </code></pre>\n\n\n\n<h2>React Transition Group Components</h2>\n\n\n\n<p>React Transition Group API provides&nbsp;<strong>three</strong>&nbsp;main components. These are:</p>\n\n\n\n<ol><li>Transition</li><li>CSSTransition</li><li>Transition Group</li></ol>\n\n\n\n<h3>Transition</h3>\n\n\n\n<p>It has a simple component API to describe a transition from one component state to another over time. It is mainly used to animate the&nbsp;<strong>mounting</strong>&nbsp;and&nbsp;<strong>unmounting</strong>&nbsp;of a component. It can also be used for in-place transition states as well.</p>\n\n\n\n<p>We can access the Transition component into four states:</p>\n\n\n\n<ul><li>entering</li><li>entered</li><li>exiting</li><li>exited</li></ul>\n\n\n\n<h3>CSSTransition</h3>\n\n\n\n<p>The CSSTransition component uses CSS stylesheet classes to write the transition and create animations. It is inspired by the&nbsp;<strong>ng-animate</strong>&nbsp;library. It can also inherit all the props of the transition component. We can divide the &#8220;CSSTransition&#8221; into&nbsp;<strong>three</strong>&nbsp;states. These are:</p>\n\n\n\n<ul><li>Appear</li><li>Enter</li><li>Exit</li></ul>\n\n\n\n<p>CSSTransition component must be applied in a pair of class names to the child components. The first class is in the form of&nbsp;<strong>name-stage</strong>&nbsp;and the second class is in the&nbsp;<strong>name-stage-active</strong>. For example, you provide the name fade, and when it applies to the &#8216;enter&#8217; stage, the two classes will be&nbsp;<strong>fade-enter</strong>&nbsp;and&nbsp;<strong>fade-enter-active</strong>. It may also take a prop as Timeout which defines the maximum time to animate.</p>\n\n\n\n<h3>TransitionGroup</h3>\n\n\n\n<p>This component is used to manage a set of transition components (Transition and CSSTransition) in a list. It is a state machine that controls the&nbsp;<strong>mounting</strong>&nbsp;and&nbsp;<strong>unmounting</strong>&nbsp;of components over time. The Transition component does not define any animation directly. Here, how &#8216;list&#8217; item animates is based on the individual transition component. It means, the &#8220;TransitionGroup&#8221; component can have different animation within a component.</p>\n\n\n\n<p>Let us see the example below, which clearly help to understand the React Animation.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<p>In the <strong>App.js</strong> file, import <strong>react-transition-group</strong> component, and create the CSSTransition component that uses as a wrapper of the component you want to animate. We are going to use <strong>transitionEnterTimeout</strong> and <strong>transitionLeaveTimeout</strong> for CSS Transition. The Enter and Leave animations used when we want to insert or delete elements from the list.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';  \nimport { CSSTransitionGroup } from 'react-transition-group';  \n  \nclass App extends React.Component {  \n    constructor(props) {  \n    super(props);  \n    this.state = {items: &#91;'Blockchain', 'ReactJS', 'TypeScript', 'Codemeals']};  \n    this.handleAdd = this.handleAdd.bind(this);  \n  }  \n  \n  handleAdd() {  \n    const newItems = this.state.items.concat(&#91;  \n      prompt('Enter Item Name')  \n    ]);  \n    this.setState({items: newItems});  \n  }  \n  \n  handleRemove(i) {  \n    let newItems = this.state.items.slice();  \n    newItems.splice(i, 1);  \n    this.setState({items: newItems});  \n  }  \n  \n  render() {  \n    const items = this.state.items.map((item, i) => (  \n      &lt;div key={item} onClick={() => this.handleRemove(i)}>  \n        {item}  \n      &lt;/div>  \n    ));  \n  \n    return (  \n      &lt;div>  \n    &lt;h1>Animation Example&lt;/h1>  \n            &lt;button onClick={this.handleAdd}>Insert Item&lt;/button>  \n            &lt;CSSTransitionGroup  \n               transitionName=\"example\"  \n           transitionEnterTimeout={800}  \n               transitionLeaveTimeout={600}>  \n               {items}  \n            &lt;/CSSTransitionGroup>  \n      &lt;/div>  \n    );  \n  }  \n}  \nexport default App;</code></pre>\n\n\n\n<p><strong>Main.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';  \nimport ReactDOM from 'react-dom';  \nimport App from './App.js';  \n  \nReactDOM.render(&lt;App />, document.getElementById('app'));  </code></pre>\n\n\n\n<p><strong>style.css</strong></p>\n\n\n\n<p>Add style.css file in your application, and add the following CSS styles. Now, to use this CSS file, you need to add the&nbsp;<strong>link</strong>&nbsp;of this file in your HTML file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.example-enter {  \n  opacity: 0.01;  \n}  \n  \n.example-enter.example-enter-active {  \n  opacity: 1;  \n  transition: opacity 500ms ease-in;  \n}  \n  \n.example-leave {  \n  opacity: 1;  \n}  \n  \n.example-leave.example-leave-active {  \n  opacity: 0.01;  \n  transition: opacity 300ms ease-in;  \n}  </code></pre>\n\n\n\n<p>In the above example, the animation durations are specified in both the&nbsp;<strong>CSS</strong>&nbsp;and&nbsp;<strong>render</strong>&nbsp;method. It tells React component when to remove the animation classes from the list and if it is leaving when to remove the element from the DOM.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When we execute the above program, it gives the below output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-animation-output1.png\" alt=\"React Animation\"/></figure>\n\n\n\n<p>Click on &#8216;<strong>Insert Item</strong>&#8216; button, the following screen appears.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-animation-output2.png\" alt=\"React Animation\"/></figure>\n\n\n\n<p>Once we insert the item and press&nbsp;<strong>Ok</strong>, the new item can be added in the list with fade in style. Here, we can also delete any item from the list by clicking on the particular link.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-animation-output3.png\" alt=\"React Animation\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The animation is a technique in which images are manipulated to appear as moving images. It is one of the most used technique to make an interactive web application. In React, we can add animation using an explicit group of components known as the&nbsp;React Transition Group. React Transition Group is an add-on component for managing [&hellip;]</p>\n","protected":false},"author":1,"featured_media":388,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4000"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4000"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4000/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/388"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4000"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4000"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4000"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4001,"date":"2020-05-27T07:02:10","date_gmt":"2020-05-27T07:02:10","guid":{"rendered":"http://react.foobrdigital.com/?p=63"},"modified":"2020-05-27T07:02:10","modified_gmt":"2020-05-27T07:02:10","slug":"bootstrap","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/bootstrap/","title":{"rendered":"Bootstrap"},"content":{"rendered":"\n<p>Single-page applications gaining popularity over the last few years, so many front-end frameworks have introduced such as Angular, React, Vue.js, Ember, etc. As a result, jQuery is not a necessary requirement for building web apps. Today, React has the most used JavaScript framework for building web applications, and Bootstrap become the most popular CSS framework. So, it is necessary to learn various ways in which Bootstrap can be used in React apps, which is the main aim of this section.</p>\n\n\n\n<h2>Adding Bootstrap for React</h2>\n\n\n\n<p>We can add Bootstrap to the React app in several ways. The&nbsp;<strong>three</strong>&nbsp;most common ways are given below:</p>\n\n\n\n<ol><li>Using the Bootstrap CDN</li><li>Bootstrap as Dependency</li><li>React Bootstrap Package</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-bootstrap.png\" alt=\"React Bootstrap\"/></figure>\n\n\n\n<h2>Using the Bootstrap CDN</h2>\n\n\n\n<p>It is the easiest way of adding Bootstrap to the React app. There is no need to install or download Bootstrap. We can simply put an&nbsp;<strong>&lt;link&gt;</strong>&nbsp;into the&nbsp;<strong>&lt;head&gt;</strong>&nbsp;section of the&nbsp;<strong>index.html</strong>&nbsp;file of the React app as shown in the following snippet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </code></pre>\n\n\n\n<p>If there is a need to use Bootstrap components which depend on JavaScript/jQuery in the React application, we need to include&nbsp;<strong>jQuery</strong>,&nbsp;<strong>Popper.js</strong>, and&nbsp;<strong>Bootstrap.js</strong>&nbsp;in the document. Add the following imports in the&nbsp;<strong>&lt;script&gt;</strong>&nbsp;tags near the end of the closing&nbsp;<strong>&lt;/body&gt;</strong>&nbsp;tag of the&nbsp;<strong>index.html</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\">&lt;/script>  \n  \n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\">&lt;/script>  \n  \n&lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\">&lt;/script>  </code></pre>\n\n\n\n<p>In the above snippet, we have used jQuery&#8217;s slim version, although we can also use the full version as well. Now, Bootstrap is successfully added in the React application, and we can use all the CSS utilities and UI components available from Bootstrap in the React application.</p>\n\n\n\n<h2>Bootstrap as Dependency</h2>\n\n\n\n<p>If we are using a build tool or a module bundler such as Webpack, then importing Bootstrap as dependency is the preferred option for adding Bootstrap to the React application. We can install Bootstrap as a dependency for the React app. To install the Bootstrap, run the following commands in the terminal window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install bootstrap --save  </code></pre>\n\n\n\n<p>Once Bootstrap is installed, we can import it in the React application entry file. If the React project created using the&nbsp;<strong>create-react-app</strong>&nbsp;tool, open the&nbsp;<strong>src/index.js</strong>&nbsp;file, and add the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'bootstrap/dist/css/bootstrap.min.css';  </code></pre>\n\n\n\n<p>Now, we can use the CSS classes and utilities in the React application. Also, if we want to use the JavaScript components, we need to install the&nbsp;<strong>jquery</strong>&nbsp;and&nbsp;<strong>popper.js</strong>&nbsp;packages from&nbsp;<strong>npm</strong>. To install the following packages, run the following command in the terminal window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install jquery popper.js  </code></pre>\n\n\n\n<p>Next, go to the&nbsp;<strong>src/index.js</strong>&nbsp;file and add the following imports.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import $ from 'jquery';  \nimport Popper from 'popper.js';  \nimport 'bootstrap/dist/js/bootstrap.bundle.min';  </code></pre>\n\n\n\n<p>Now, we can use Bootstrap JavaScript Components in the React application.</p>\n\n\n\n<h2>React Bootstrap Package</h2>\n\n\n\n<p>The React Bootstrap package is the most popular way to add bootstrap in the React application. There are many Bootstrap packages built by the community, which aim to rebuild Bootstrap components as React components. The&nbsp;<strong>two</strong>&nbsp;most popular Bootstrap packages are:</p>\n\n\n\n<ol><li><strong>react-bootstrap:</strong>&nbsp;It is a complete re-implementation of the Bootstrap components as React components. It does not need any dependencies like bootstrap.js or jQuery. If the React setup and React-Bootstrap installed, we have everything which we need.</li><li><strong>reactstrap:</strong>&nbsp;It is a library which contains React Bootstrap 4 components that favor composition and control. It does not depend on jQuery or Bootstrap JavaScript. However, react-popper is needed for advanced positioning of content such as Tooltips, Popovers, and auto-flipping Dropdowns.</li></ol>\n\n\n\n<h2>React Bootstrap Installation</h2>\n\n\n\n<p>Let us create a new React app using the&nbsp;<strong>create-react-app</strong>&nbsp;command as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npx create-react-app react-bootstrap-app  </code></pre>\n\n\n\n<p>After creating the React app, the best way to install Bootstrap is via the npm package. To install Bootstrap, navigate to the React app folder, and run the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install react-bootstrap bootstrap --save  </code></pre>\n\n\n\n<h3>Importing Bootstrap</h3>\n\n\n\n<p>Now, open the&nbsp;<strong>src/index.js</strong>&nbsp;file and add the following code to import the Bootstrap file.</p>\n\n\n\n<ol><li><strong>import</strong>&nbsp;&#8216;bootstrap/dist/css/bootstrap.min.css&#8217;;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>We can also import individual components&nbsp;<strong>like import { SplitButton, Dropdown } from &#8216;react-bootstrap&#8217;;</strong>&nbsp;instead of the entire library. It provides the specific components which we need to use, and can significantly reduce the amount of code.</p>\n\n\n\n<p>In the React app, create a new file named&nbsp;<strong>ThemeSwitcher.js</strong>&nbsp;in the&nbsp;<strong>src</strong>&nbsp;directory and put the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';  \nimport { SplitButton, Dropdown } from 'react-bootstrap';  \n  \nclass ThemeSwitcher extends Component {  \n  \n  state = { theme: null }  \n    \n  chooseTheme = (theme, evt) => {  \n    evt.preventDefault();  \n    if (theme.toLowerCase() === 'reset') { theme = null }  \n    this.setState({ theme });  \n  }  \n    \n  render() {  \n    const { theme } = this.state;  \n    const themeClass = theme ? theme.toLowerCase() : 'default';  \n      \n    const parentContainerStyles = {  \n      position: 'absolute',  \n      height: '100%',  \n      width: '100%',  \n      display: 'table'  \n    };  \n      \n    const subContainerStyles = {  \n      position: 'relative',  \n      height: '100%',  \n      width: '100%',  \n      display: 'table-cell',  \n    };  \n      \n    return (  \n      &lt;div style={parentContainerStyles}>  \n        &lt;div style={subContainerStyles}>  \n          \n          &lt;span className={`h1 center-block text-center text-${theme ? themeClass : 'muted'}`} style={{ marginBottom: 25 }}>{theme || 'Default'}&lt;/span>  \n            \n          &lt;div className=\"center-block text-center\">  \n            &lt;SplitButton bsSize=\"large\" bsStyle={themeClass} title={`${theme || 'Default Block'} Theme`}>  \n              &lt;Dropdown.Item eventKey=\"Primary Block\" onSelect={this.chooseTheme}>Primary Theme&lt;/Dropdown.Item>  \n              &lt;Dropdown.Item eventKey=\"Danger Block\" onSelect={this.chooseTheme}>Danger Theme&lt;/Dropdown.Item>  \n              &lt;Dropdown.Item eventKey=\"Success Block\" onSelect={this.chooseTheme}>Success Theme&lt;/Dropdown.Item>  \n              &lt;Dropdown.Item divider />  \n              &lt;Dropdown.Item eventKey=\"Reset Block\" onSelect={this.chooseTheme}>Default Theme&lt;/Dropdown.Item>  \n            &lt;/SplitButton>  \n          &lt;/div>    \n        &lt;/div>  \n      &lt;/div>  \n    );   \n  }   \n}  \nexport default ThemeSwitcher;  </code></pre>\n\n\n\n<p>Now, update the&nbsp;<strong>src/index.js</strong>&nbsp;file with the following snippet.</p>\n\n\n\n<p><strong>Index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'bootstrap/dist/css/bootstrap.min.css';  \nimport React from 'react';  \nimport ReactDOM from 'react-dom';  \nimport App from './App.js';  \nimport './index.css';  \nimport ThemeSwitcher from './ThemeSwitcher';  \n  \nReactDOM.render(&lt;ThemeSwitcher />, document.getElementById('root'));  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When we execute the React app, we should get the output as below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-bootstrap2.png\" alt=\"React Bootstrap\"/></figure>\n\n\n\n<p>Click on the dropdown menu. We will get the following screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-bootstrap3.png\" alt=\"React Bootstrap\"/></figure>\n\n\n\n<p>Now, if we choose the&nbsp;<strong>Success Theme</strong>, we will get the below screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-bootstrap4.png\" alt=\"React Bootstrap\"/></figure>\n\n\n\n<h2>Using reactstrap</h2>\n\n\n\n<p>Let us create a new React app using the create-react-app command as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npx create-react-app reactstrap-app  </code></pre>\n\n\n\n<p>Next, install the&nbsp;<strong>reactstrap</strong>&nbsp;via the npm package. To install reactstrap, navigate to the React app folder, and run the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install bootstrap reactstrap --save  </code></pre>\n\n\n\n<h3>Importing Bootstrap</h3>\n\n\n\n<p>Now, open the&nbsp;<strong>src/index.js</strong>&nbsp;file and add the following code to import the Bootstrap file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'bootstrap/dist/css/bootstrap.min.css';  </code></pre>\n\n\n\n<p>We can also import individual components&nbsp;<strong>like import { Button, Dropdown } from &#8216;reactstrap&#8217;;</strong>&nbsp;instead of the entire library. It provides the specific components which we need to use, and can significantly reduce the amount of code.</p>\n\n\n\n<p>In the React app, create a new file named&nbsp;<strong>ThemeSwitcher.js</strong>&nbsp;in the&nbsp;<strong>src</strong>&nbsp;directory and put the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { Component } from 'react';  \nimport { Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';  \n  \nclass ThemeSwitcher extends Component {  \n  \n  state = { theme: null, dropdownOpen: false }  \n    \n  toggleDropdown = () => {  \n    this.setState({ dropdownOpen: !this.state.dropdownOpen });  \n  }  \n    \n  resetTheme = evt => {  \n    evt.preventDefault();  \n    this.setState({ theme: null });  \n  }  \n    \n  chooseTheme = (theme, evt) => {  \n    evt.preventDefault();  \n    this.setState({ theme });  \n  }  \n  render() {  \n    const { theme, dropdownOpen } = this.state;  \n    const themeClass = theme ? theme.toLowerCase() : 'secondary';  \n      \n    return (  \n      &lt;div className=\"d-flex flex-wrap justify-content-center align-items-center\">  \n        \n        &lt;span className={`h1 mb-4 w-100 text-center text-${themeClass}`}>{theme || 'Default'}&lt;/span>  \n          \n        &lt;ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropdown}>  \n          &lt;Button id=\"caret\" color={themeClass}>{theme || 'Custom'} Theme&lt;/Button>  \n          &lt;DropdownToggle caret size=\"lg\" color={themeClass} />  \n          &lt;DropdownMenu>  \n            &lt;DropdownItem onClick={e => this.chooseTheme('Primary', e)}>Primary Theme&lt;/DropdownItem>  \n            &lt;DropdownItem onClick={e => this.chooseTheme('Danger', e)}>Danger Theme&lt;/DropdownItem>  \n            &lt;DropdownItem onClick={e => this.chooseTheme('Success', e)}>Success Theme&lt;/DropdownItem>  \n            &lt;DropdownItem divider />  \n            &lt;DropdownItem onClick={this.resetTheme}>Default Theme&lt;/DropdownItem>  \n          &lt;/DropdownMenu>  \n        &lt;/ButtonDropdown>  \n          \n      &lt;/div>  \n    );    \n  }  \n}  \nexport default ThemeSwitcher;</code></pre>\n\n\n\n<p>Now, update the&nbsp;<strong>src/index.js</strong>&nbsp;file with the following snippet.</p>\n\n\n\n<p><strong>Index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'bootstrap/dist/css/bootstrap.min.css';  \nimport React from 'react';  \nimport ReactDOM from 'react-dom';  \nimport App from './App.js';  \nimport './index.css';  \nimport ThemeSwitcher from './ThemeSwitcher';  \n  \nReactDOM.render(&lt;ThemeSwitcher />, document.getElementById('root')); </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When we execute the React app, we should get the output as below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-bootstrap5.png\" alt=\"React Bootstrap\"/></figure>\n\n\n\n<p>Click on the dropdown menu. We will get the following screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-bootstrap6.png\" alt=\"React Bootstrap\"/></figure>\n\n\n\n<p>Now, if we choose the&nbsp;<strong>Danger Theme</strong>, we will get the below screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-bootstrap7.png\" alt=\"React Bootstrap\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Single-page applications gaining popularity over the last few years, so many front-end frameworks have introduced such as Angular, React, Vue.js, Ember, etc. As a result, jQuery is not a necessary requirement for building web apps. Today, React has the most used JavaScript framework for building web applications, and Bootstrap become the most popular CSS framework. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":362,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4001"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4001"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4001/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/362"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4001"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4001"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4001"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4002,"date":"2020-05-27T07:05:35","date_gmt":"2020-05-27T07:05:35","guid":{"rendered":"http://react.foobrdigital.com/?p=64"},"modified":"2020-05-27T07:05:35","modified_gmt":"2020-05-27T07:05:35","slug":"map","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/map/","title":{"rendered":"Table"},"content":{"rendered":"\n<p>A table is an arrangement which organizes information into rows and columns. It is used to store and display data in a structured format.</p>\n\n\n\n<p>The react-table is a lightweight, fast, fully customizable (JSX, templates, state, styles, callbacks), and extendable Datagrid built for React. It is fully controllable via optional props and callbacks.</p>\n\n\n\n<h2>Features</h2>\n\n\n\n<ol><li>It is lightweight at 11kb (and only need 2kb more for styles).</li><li>It is fully customizable (JSX, templates, state, styles, callbacks).</li><li>It is fully controllable via optional props and callbacks.</li><li>It has client-side &amp; Server-side pagination.</li><li>It has filters.</li><li>Pivoting &amp; Aggregation</li><li>Minimal design &amp; easily themeable</li></ol>\n\n\n\n<h2>Installation</h2>\n\n\n\n<p>Let us create a&nbsp;<strong>React app</strong>&nbsp;using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        $ npx create-react-app myreactapp\n\n      </code></pre>\n\n\n\n<p>Next, we need to install&nbsp;<strong>react-table</strong>. We can install react-table via npm command, which is given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        $ npm install react-table\n\n      </code></pre>\n\n\n\n<p>Once, we have installed react-table, we need to&nbsp;<strong>import</strong>&nbsp;the react-table into the react component. To do this, open the&nbsp;<strong>src/App.js</strong>&nbsp;file and add the following snippet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        import ReactTable from \"react-table\";\n\n      </code></pre>\n\n\n\n<p>Let us assume we have data which needs to be rendered using react-table.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        const data = &#91;{\n        name: 'Superman',\n        age: 32\n        },{\n        name: 'Spiderman',\n        age: 27\n        },{\n        name: 'Batman',\n        age: 31\n        },{\n        name: 'Flash',\n        age: 23\n        }]\n      </code></pre>\n\n\n\n<p>Along with data, we also need to specify the&nbsp;<strong>column info</strong>&nbsp;with&nbsp;<strong>column attributes</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        const columns = &#91;{\n        Header: 'Name',\n        accessor: 'name'\n      },{\n        Header: 'Age',\n        accessor: 'age'\n      }]\n      </code></pre>\n\n\n\n<p>Inside the render method, we need to bind this data with react-table and then returns the react-table.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        return (\n\n\n          data={data}\n          columns={columns}\n          defaultPageSize = {2}\n          pageSizeOptions = {&#91;2,4, 6]}\n\n\n)\n      </code></pre>\n\n\n\n<p>Now, our&nbsp;<strong>src/App.js</strong>&nbsp;file looks like as below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        import React, { Component } from 'react';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nclass App extends Component {\n        render() {\n     const data = &#91;{\n        name: 'Superman',\n        age: 32\n        },{\n        name: 'Spiderman',\n        age: 27\n         },{\n        name: 'Batman',\n        age: 31\n         },{\n        name: 'Flash',\n        age: 23\n         }]\n     const columns = &#91;{\n        Header: 'Name',\n        accessor: 'name'\n       },{\n        Header: 'Age',\n        accessor: 'age'\n       }]\n    return (\n\n\n                data={data}\n                columns={columns}\n                defaultPageSize = {2}\n                pageSizeOptions = {&#91;2,4, 6]}\n\n    )\n  }\n}\nexport default App;\n      </code></pre>\n\n\n\n<p>Now, change the rows dropdown menu.</p>\n","protected":false},"excerpt":{"rendered":"<p>A table is an arrangement which organizes information into rows and columns. It is used to store and display data in a structured format. The react-table is a lightweight, fast, fully customizable (JSX, templates, state, styles, callbacks), and extendable Datagrid built for React. It is fully controllable via optional props and callbacks. Features It is [&hellip;]</p>\n","protected":false},"author":1,"featured_media":363,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4002"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4002"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4002/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/363"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4002"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4002"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4002"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4003,"date":"2020-05-27T07:07:40","date_gmt":"2020-05-27T07:07:40","guid":{"rendered":"http://react.foobrdigital.com/?p=65"},"modified":"2020-05-27T07:07:40","modified_gmt":"2020-05-27T07:07:40","slug":"table","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/table/","title":{"rendered":"High Order Component"},"content":{"rendered":"\n<p>It is also known as HOC. In React, HOC is an advanced technique for reusing component logic. It is a function that takes a component and returns a new component. According to the official website, it is not the feature(part) in React API, but a pattern that emerges from React compositional nature. They are similar to JavaScript functions used for adding additional functionalities to the existing component.</p>\n\n\n\n<p>A higher order component function accepts another function as an argument. The&nbsp;<strong>map</strong>&nbsp;function is the best example to understand this. The main goal of this is to decompose the component logic into simpler and smaller functions that can be reused as you need.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        const NewComponent = higherOrderComponent(WrappedComponent);\n\n      </code></pre>\n\n\n\n<p>We know that component transforms props into UI, and a higher-order component converts a component another component and allows to add additional data or functionality into this.&nbsp;<strong>Hocs</strong>&nbsp;are common in&nbsp;<strong>third-party</strong>&nbsp;libraries. The examples of HOCs are&nbsp;<strong>Redux&#8217;s connect</strong>&nbsp;and&nbsp;<strong>Relay&#8217;s createFragmentContainer</strong>.</p>\n\n\n\n<p>Now, we can understand the&nbsp;<strong>working of HOCs</strong>&nbsp;from the below example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        //Function Creation\nfunction add (a, b) {\n        return a + b\n}\nfunction higherOrder(a, addReference) {\n        return addReference(a, 20)\n}\n//Function call\nhigherOrder(30, add) // 50\n      </code></pre>\n\n\n\n<p>In the above example, we have created two functions&nbsp;<strong>add()</strong>&nbsp;and&nbsp;<strong>higherOrder()</strong>. Now, we provide the add() function as an&nbsp;<strong>argument</strong>&nbsp;to the higherOrder() function. For invoking, rename it&nbsp;<strong>addReference</strong>&nbsp;in the higherOrder() function, and then&nbsp;<strong>invoke it</strong>.</p>\n\n\n\n<p>Here, the function you are passing is called a callback function, and the function where you are passing the callback function is called a&nbsp;<strong>higher-order(HOCs)</strong>&nbsp;function.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<p>Create a new file with the name HOC.js. In this file, we have made one function HOC. It accepts one&nbsp;<strong>argument</strong>&nbsp;as a component. Here, that component is&nbsp;<strong>App</strong>.</p>\n\n\n\n<p><strong>HOC.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        import React, {Component} from 'react';\n\nexport default function Hoc(HocComponent){\n        return class extends Component{\n        render(){\n        return (\n\n\n        );\n        }\n    }\n}\n      </code></pre>\n\n\n\n<p>Now, include&nbsp;<strong>HOC.js</strong>&nbsp;file into the&nbsp;<strong>App.js</strong>&nbsp;file. In this file, we need to&nbsp;<strong>call</strong>&nbsp;the HOC function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        App = Hoc(App);\n\n      </code></pre>\n\n\n\n<p>The App component wrapped inside another React component so that we can modify it. Thus, it becomes the primary application of the Higher-Order Components.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n      import React, { Component } from 'react';\nimport Hoc from './HOC';\n\nclass App extends Component {\n        render() {\n    return (\n      &lt;div>\n        &lt;h2>HOC Demo&lt;/h2>\n        &lt;p>Learn to Code Easily with your mobile&lt;/p>.\n      &lt;/div>\n    )\n  }\n}\nApp = Hoc(App);\nexport default App;\n      </code></pre>\n\n\n\n<h2>Higher-Order Component Conventions</h2>\n\n\n\n<ul><li>Do not use HOCs inside the render method of a component.</li><li>The static methods must be copied over to have access to them. You can do this using hoist-non-react-statics package to automatically copy all non-React static methods.</li><li>HOCs does not work for refs as &#8216;Refs&#8217; does not pass through as a parameter or argument. If you add a ref to an element in the HOC component, the ref refers to an instance of the outermost container component, not the wrapped component.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>It is also known as HOC. In React, HOC is an advanced technique for reusing component logic. It is a function that takes a component and returns a new component. According to the official website, it is not the feature(part) in React API, but a pattern that emerges from React compositional nature. They are similar [&hellip;]</p>\n","protected":false},"author":1,"featured_media":364,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4003"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4003"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4003/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/364"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4003"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4003"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4003"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4004,"date":"2020-05-27T07:08:54","date_gmt":"2020-05-27T07:08:54","guid":{"rendered":"http://react.foobrdigital.com/?p=66"},"modified":"2020-05-27T07:08:54","modified_gmt":"2020-05-27T07:08:54","slug":"higher-order","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/higher-order/","title":{"rendered":"Code Splitting"},"content":{"rendered":"\n<p>The React app bundled their files using tools like&nbsp;<strong>Webpack</strong>&nbsp;or&nbsp;<strong>Browserfy</strong>. Bundling is a process which takes multiple files and merges them into a single file, which is called a&nbsp;<strong>bundle</strong>. The bundle is responsible for loading an entire app at once on the webpage. We can understand it from the below example.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        import { add } from './math.js';\n\n        console.log(add(16, 26)); // 42\n      </code></pre>\n\n\n\n<p><strong>math.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nexport function add(a, b) {\n  return a + b;\n}\n</code></pre>\n\n\n\n<p><strong>Bundle file as like below:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nfunction add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(16, 26)); // 42\n</code></pre>\n\n\n\n<p>As our app grows, our bundle will grow too, especially when we are using large third-party libraries. If the bundle size gets large, it takes a long time to load on a webpage. For avoiding the large bundling, it?s good to start ?splitting? your bundle.</p>\n\n\n\n<p><strong>React 16.6.0</strong>, released in&nbsp;<strong>October 2018</strong>, and introduced a way of performing code splitting. Code-Splitting is a feature supported by Webpack and Browserify, which can create multiple bundles that can be dynamically loaded at runtime.</p>\n\n\n\n<p>Code splitting uses&nbsp;<strong>React.lazy</strong>&nbsp;and&nbsp;<strong>Suspense</strong>&nbsp;tool/library, which helps you to load a dependency lazily and only load it when needed by the user.</p>\n\n\n\n<p>The code splitting improves:</p>\n\n\n\n<ul><li>The performance of the app</li><li>The impact on memory</li><li>The downloaded Kilobytes (or Megabytes) size</li></ul>\n\n\n\n<h3>React.lazy</h3>\n\n\n\n<p>The best way for code splitting into the app is through the dynamic&nbsp;<strong>import()</strong>&nbsp;syntax. The React.lazy function allows us to render a dynamic import as a regular component.</p>\n\n\n\n<p><strong>Before</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import ExampleComponent from './ExampleComponent';\n\nfunction MyComponent() {\n  return (\n\n\n\n  );\n}</code></pre>\n\n\n\n<p><strong>After</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nconst ExampleComponent = React.lazy(() => import('./ExampleComponent'));\n\nfunction MyComponent() {\n  return (\n\n  );\n}\n</code></pre>\n\n\n\n<p>The above code snippet automatically loads the bundle which contains the ExampleComponent when the ExampleComponent gets rendered.</p>\n\n\n\n<h3>Suspense</h3>\n\n\n\n<p>If the module which contains the ExampleComponent is not yet loaded by the function component(MyComponent), then we need to show some&nbsp;<strong>fallback</strong>&nbsp;content while we are waiting for it to load. We can do this using the suspense component. In other words, the suspense component is responsible for handling the output when the lazy component is fetched and rendered.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nconst ExampleComponent = React.lazy(() => import('./ ExampleComponent'));\n\nfunction MyComponent() {\n  return (\n\n  );\n}\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>fallback</strong>&nbsp;prop accepts the React elements which you want to render while waiting for the component to load. We can combine multiple lazy components with a single Suspense component. It can be seen in the below example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nconst ExampleComponent = React.lazy(() => import('./ ExampleComponent'));\nconst ExamComponent = React.lazy(() => import('./ ExamComponent'));\n\nfunction MyComponent() {\n  return (\n\n      Loading...>\n\n\n\n  );\n}\n</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note:&nbsp;React.lazy and Suspense components are not yet available for server-side rendering. For code-splitting in a server-rendered app, it is recommended to use Loadable Components.</p></blockquote>\n\n\n\n<h2>Error boundaries</h2>\n\n\n\n<p>If any module fails to load, for example, due to network failure, we will get an error. We can handle these errors with Error Boundaries. Once we have created the Error Boundary, we can use it anywhere above our lazy components to display an error state.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nimport MyErrorBoundary from './MyErrorBoundary';\nconst ExampleComponent = React.lazy(() => import('./ ExampleComponent'));\nconst ExamComponent = React.lazy(() => import('./ ExamComponent'));\n\nconst MyComponent = () => (\n  \n    Loading...>\n\n);\n</code></pre>\n\n\n\n<h2>Route-based code splitting</h2>\n\n\n\n<p>It is very tricky to decide where we introduce code splitting in the app. For this, we have to make sure that we choose the place which will split the bundles evenly without disrupting the user experience.</p>\n\n\n\n<p>The route is the best place to start the code splitting. Route based code splitting is essential during the page transitions on the web, which takes some amount of time to load. Here is an example of how to setup route-based code splitting into the app using React Router with React.lazy.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>       \nimport { Switch, BrowserRouter as Router, Route} from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\n\nconst Home = lazy(() => import('./routes/Home'));\nconst About = lazy(() => import('./routes/About'));\nconst Contact = lazy(() => import('./routes/Contact'));\n\nconst App = () => (\n\n    Loading...\n\n        Home\n        About\n        Contact\n\n\n);\n      </code></pre>\n\n\n\n<h2>Named Export</h2>\n\n\n\n<p>Currently, React.lazy supports default exports only. If any module you want to import using named exports, you need to create an intermediate module that re-exports it as the default. We can understand it from the below example.</p>\n\n\n\n<p><strong>ExampleComponents.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export const MyFirstComponent = /* ... */;\nexport const MySecondComponent = /* ... */;\n        </code></pre>\n\n\n\n<p><strong>MyFirstComponent.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        export { MyFirstComponent as default } from \"./ExampleComponents.js\";\n      </code></pre>\n\n\n\n<p><strong>MyApp.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { lazy } from 'react';  \nconst MyFirstComponent = lazy(() => import(\"./MyFirstComponent.js\"));  \n      </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The React app bundled their files using tools like&nbsp;Webpack&nbsp;or&nbsp;Browserfy. Bundling is a process which takes multiple files and merges them into a single file, which is called a&nbsp;bundle. The bundle is responsible for loading an entire app at once on the webpage. We can understand it from the below example. App.js math.js Bundle file as [&hellip;]</p>\n","protected":false},"author":1,"featured_media":389,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4004"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4004"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4004/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/389"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4004"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4004"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4004"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4005,"date":"2020-05-27T07:13:13","date_gmt":"2020-05-27T07:13:13","guid":{"rendered":"http://react.foobrdigital.com/?p=67"},"modified":"2020-05-27T07:13:13","modified_gmt":"2020-05-27T07:13:13","slug":"code-splitting","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/code-splitting/","title":{"rendered":"React Map"},"content":{"rendered":"\n<p>A map is a data collection type where data is stored in the form of pairs. It contains a unique key. The value stored in the map must be mapped to the key. We cannot store a duplicate pair in the map(). It is because of the uniqueness of each stored key. It is mainly used for fast searching and looking up data.</p>\n\n\n\n<p>In React, the ?map? method used to traverse and display a list of similar objects of a component. A map is not the feature of React. Instead, it is the standard JavaScript function that could be called on any array. The map() method creates a new array by calling a provided function on every element in the calling array.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<p>In the given Demo, the map() function takes an array of numbers and double their values. We assign the new array returned by map() to the variable doubleValue and log it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>            \nlet numbers = &#91;5, 6, 7, 8, 9];\nconst doubleValue = numbers.map((number)=>{\n              return (number * 2);\n});\nconsole.log(doubleValue);\n            </code></pre>\n\n\n\n<h2>In React, the map() method used for:</h2>\n\n\n\n<p>1. Traversing the list element.</p>\n\n\n\n<p><strong>Demo</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n            import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction NameList(props) {\n            const myFriendsList = props.myFriendsList;\n            const listItems = myFriendsList.map((myList) =>\n              &lt;li>{myList}&lt;/li>\n  );\n  return (\n    &lt;div>\n          &lt;h2>React Map Demo&lt;/h2>\n             &lt;ul>{listItems}&lt;/ul>\n    &lt;/div>\n  );\n}\nconst myFriendsList = &#91;'Harry', 'Ron', 'Harmione', 'Draco'];\nReactDOM.render(\n  &lt;NameList myFriendsList={myFriendsList} />,\n  document.getElementById('app')\n);\nexport default App;\n          </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>A map is a data collection type where data is stored in the form of pairs. It contains a unique key. The value stored in the map must be mapped to the key. We cannot store a duplicate pair in the map(). It is because of the uniqueness of each stored key. It is mainly [&hellip;]</p>\n","protected":false},"author":1,"featured_media":366,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4005"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4005"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4005/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/366"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4005"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4005"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4005"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4006,"date":"2020-05-27T07:15:19","date_gmt":"2020-05-27T07:15:19","guid":{"rendered":"http://react.foobrdigital.com/?p=74"},"modified":"2020-05-27T07:15:19","modified_gmt":"2020-05-27T07:15:19","slug":"context","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/context/","title":{"rendered":"Context"},"content":{"rendered":"\n<p>Context allows passing data through the component tree without passing props down manually at every level.</p>\n\n\n\n<p>In React application, we passed data in a top-down approach via props. Sometimes it is inconvenient for certain types of props that are required by many components in the React application. Context provides a way to pass values between components without explicitly passing a prop through every level of the component tree.</p>\n\n\n\n<h3>How to use Context</h3>\n\n\n\n<p>There are two main steps to use the React context into the React application:</p>\n\n\n\n<ol><li>Setup a context provider and define the data which you want to store.</li><li>Use a context consumer whenever you need the data from the store</li></ol>\n\n\n\n<h3>When to use Context</h3>\n\n\n\n<p>Context is used to share data which can be considered &#8220;global&#8221; for React components tree and use that data where needed, such as the current authenticated user, theme, etc. For example, in the below code snippet, we manually thread through a &#8220;theme&#8221; prop to style the Button component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        class App extends React.Component {\n        render() {\n        return Toolbar theme=\"dark\";\n  }\n}\n\nfunction Toolbar(props) {\n        return (\n          &lt;div>\n             theme={props.theme}\n    &lt;/div>\n  );\n}\n\nclass ThemedButton extends React.Component {\n        render() {\n        return  theme={this.props.theme} ;\n  }\n}\n      </code></pre>\n\n\n\n<p>In the above code, the Toolbar function component takes an extra &#8220;theme&#8221; prop and pass it to the ThemedButton. It can become inconvenient if every single button in the app needs to know the theme because it would be required to pass through all components. But using context, we can avoid passing props for every component through intermediate elements.</p>\n\n\n\n<p>We can understand it from the below example. Here, context passes a value into the component tree without explicitly threading it through every single component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        // Create a context for the current theme which is \"light\" as the default.\nconst ThemeContext = React.createContext('light');\n\nclass App extends React.Component {\n        render() {\n        /* Use a ContextProvider to pass the current theme, which allows every component to read it, no matter how deep it is. Here, we are passing the \"dark\" theme as the current value.*/\n\n    return (\n      ThemeContext.Provider value=\"dark\"\n       Toolbar\n      ThemeContext.Provider\n    );\n  }\n}\n\n// Now, it is not required to pass the theme down explicitly for every component.\nfunction Toolbar(props) {\n        return (\n          &lt;div>\n      &lt;ThemedButton />\n          &lt;/div>\n        );\n}\n\nclass ThemedButton extends React.Component {\n        static contextType = ThemeContext;\n        render() {\n        return  theme={this.context};\n  }\n}\n      </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>React Context API</h2>\n\n\n\n<p>The React Context API is a component structure, which allows us to share data across all levels of the application. The main aim of Context API is to solve the problem of prop drilling (also called &#8220;Threading&#8221;). The Context API in React are given below.</p>\n\n\n\n<ol><li>React.createContext</li><li>Context.provider</li><li>Context.Consumer</li><li>Class.contextType</li></ol>\n\n\n\n<h3>React.createContext</h3>\n\n\n\n<p>It creates a context object. When React renders a component which subscribes to this context object, then it will read the current context value from the matching provider in the component tree.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        const MyContext = React.createContext(defaultValue);\n\n      </code></pre>\n\n\n\n<p>When a component does not have a matching Provider in the component tree, it returns the defaultValue argument. It is very helpful for testing components isolation (separately) without wrapping them.</p>\n\n\n\n<h3>Context.Provider</h3>\n\n\n\n<p>Every Context object has a Provider React component which allows consuming components to subscribe to context changes. It acts as a delivery service. When a consumer component asks for something, it finds it in the context and provides it to where it is needed.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        value={/* some value */}\n\n      </code></pre>\n\n\n\n<p>It accepts the value prop and passes to consuming components which are descendants of this Provider. We can connect one Provider with many consumers. Context Providers can be nested to override values deeper within the component tree. All consumers that are descendants of a Provider always re-render whenever the Provider&#8217;s value prop is changed. The changes are determined by comparing the old and new values using the same algorithm as&nbsp;<strong>Object.is</strong>&nbsp;algorithm.</p>\n\n\n\n<h3>Context.Consumer</h3>\n\n\n\n<p>It is the React component which subscribes to the context changes. It allows us to subscribe to the context within the function component. It requires the function as a component. A consumer is used to request data through the provider and manipulate the central data store when the provider allows it.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n\n       {value => /* render something which is based on the context value */}\n\n      </code></pre>\n\n\n\n<p>The function component receives the current context value and then returns a React node. The value argument which passed to the function will be equal to the value prop of the closest Provider for this context in the component tree. If there is no Provider for this context, the value argument will be equal to the defaultValue which was passed to createContext().</p>\n\n\n\n<h3>Class.contextType</h3>\n\n\n\n<p>The contextType property on a class used to assign a Context object which is created by React.createContext(). It allows you to consume the closest current value of that Context type using this.context. We can reference this in any of the component life-cycle methods, including the render function.</p>\n\n\n\n<h4>Note:&nbsp;We can only subscribe to a single context using this API. If we want to use the experimental public class field&#8217;s syntax, we can use a static class field to initialize the contextType.</h4>\n\n\n\n<p><strong>React Context API Example</strong></p>\n\n\n\n<p><strong>Step1</strong>&nbsp;Create a new React app using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        $ npx create-react-app mycontextapi\n\n      </code></pre>\n\n\n\n<p><strong>Step2</strong>&nbsp;Install bootstrap CSS framework using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        $ npm install react-bootstrap bootstrap --save\n\n      </code></pre>\n\n\n\n<p><strong>Step3</strong>&nbsp;Add the following code snippet in the src/APP.js file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst BtnColorContext = React.createContext('btn btn-darkyellow');\n\nclass App extends Component {\n        render() {\n        return (\n\n\n\n    );\n  }\n}\n\nfunction Button(props) {\n        return (\n        &lt;div className=\"container\">\n\n        &lt;/div>\n        );\n}\n\nclass ThemedButton extends Component {\n\n        static contextType = BtnColorContext;\n        render() {\n        return  className={this.context} >\n      welcome to javatpoint;\n  }\n}\nexport default App;\n      </code></pre>\n\n\n\n<p>In the above code snippet, we have created the context using React.createContext(), which returns the Context object. After that, we have created the wrapper component which returns the Provider component, and then add all the elements as children from which we want to access the context.</p>\n","protected":false},"excerpt":{"rendered":"<p>Context allows passing data through the component tree without passing props down manually at every level. In React application, we passed data in a top-down approach via props. Sometimes it is inconvenient for certain types of props that are required by many components in the React application. Context provides a way to pass values between [&hellip;]</p>\n","protected":false},"author":1,"featured_media":367,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4006"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4006"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4006/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/367"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4006"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4006"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4006"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4007,"date":"2020-05-27T07:22:23","date_gmt":"2020-05-27T07:22:23","guid":{"rendered":"http://react.foobrdigital.com/?p=75"},"modified":"2020-05-27T07:22:23","modified_gmt":"2020-05-27T07:22:23","slug":"hooks","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/hooks/","title":{"rendered":"Hooks"},"content":{"rendered":"\n<p>Hooks are the new feature introduced in the React 16.8 version. It allows you to use state and other React features without writing a class. Hooks are the functions which &#8220;hook into&#8221; React state and lifecycle features from function components. It does not work inside classes.</p>\n\n\n\n<p>Hooks are backward-compatible, which means it does not contain any breaking changes. Also, it does not replace your knowledge of React concepts.</p>\n\n\n\n<h2>When to use a Hooks</h2>\n\n\n\n<p>If you write a function component, and then you want to add some state to it, previously you do this by converting it to a class. But, now you can do it by using a Hook inside the existing function component.</p>\n\n\n\n<h2>Rules of Hooks</h2>\n\n\n\n<p>Hooks are similar to JavaScript functions, but you need to follow these two rules when using them. Hooks rule ensures that all the stateful logic in a component is visible in its source code. These rules are:</p>\n\n\n\n<h3>1. Only call Hooks at the top level</h3>\n\n\n\n<p>Do not call Hooks inside loops, conditions, or nested functions. Hooks should always be used at the top level of the React functions. This rule ensures that Hooks are called in the same order each time a components renders.</p>\n\n\n\n<h3>2. Only call Hooks from React functions</h3>\n\n\n\n<p>You cannot call Hooks from regular JavaScript functions. Instead, you can call Hooks from React function components. Hooks can also be called from custom Hooks.</p>\n\n\n\n<h2>Pre-requisites for React Hooks</h2>\n\n\n\n<ol><li>Node version 6 or above</li><li>NPM version 5.2 or above</li><li>Create-react-app tool for running the React App</li></ol>\n\n\n\n<h2>React Hooks Installation</h2>\n\n\n\n<p>To use React Hooks, we need to run the following commands:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        $ npm install react --save\n$ npm install react-dom --save\n      </code></pre>\n\n\n\n<p>The above command will install the latest React and React-DOM alpha versions which support React Hooks. Make sure the&nbsp;<strong>package.json</strong>&nbsp;file lists the React and React-DOM dependencies as given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        \"react\": \"^16.12.0\",\n\"react-dom\": \"^16.12.0\",\n      </code></pre>\n\n\n\n<h2>Hooks State</h2>\n\n\n\n<p>Hook state is the new way of declaring a state in React app. Hook uses useState() functional component for setting and retrieving state. Let us understand Hook state with the following example.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        import React, { useState } from 'react';\n\nfunction CountApp() {\n            // Declare a new state variable, which we'll call \"count\"\n        const &#91;count, setCount] = useState(0);\n\n        return (\n          &lt;div>\n            &lt;p>You clicked {count} times&lt;/p>\n        setCount(count + 1)}\n        Click me\n\n    &lt;/div>\n  );\n}\nexport default CountApp;\n      </code></pre>\n\n\n\n<p>In the above example, useState is the Hook which needs to call inside a function component to add some local state to it. The useState returns a pair where the first element is the current state value/initial value, and the second one is a function which allows us to update it. After that, we will call this function from an event handler or somewhere else. The useState is similar to this.setState in class. The equivalent code without Hooks looks like as below.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n        import React, { useState } from 'react';\n\n        class CountApp extends React.Component {\n            constructor(props) {\n            super(props);\n        this.state = {\n            count: 0\n        };\n        }\n        render() {\n            return (\n        &lt;div>\n        &lt;p>&lt;b>You clicked {this.state.count} times&lt;/b>&lt;/p>\n        this.setState({ count: this.state.count + 1 })}\n        Click me\n\n      &lt;/div>\n        );\n        }\n        }\n        export default CountApp;\n        </code></pre>\n\n\n\n<h2>Hooks Effect</h2>\n\n\n\n<p>The Effect Hook allows us to perform side effects (an action) in the function components. It does not use components lifecycle methods which are available in class components. In other words, Effects Hooks are equivalent to componentDidMount(), componentDidUpdate(), and componentWillUnmount() lifecycle methods.</p>\n\n\n\n<p>Side effects have common features which the most web applications need to perform, such as:</p>\n\n\n\n<ul><li>Updating the DOM,</li><li>Fetching and consuming data from a server API,</li><li>Setting up a subscription, etc.</li></ul>\n\n\n\n<p>Let us understand Hook Effect with the following example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    \nimport React, {useState, useEffect } from 'react';\n\nfunction CounterExample() {\n        const &#91;count, setCount] = useState(0);\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n        // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    &lt;div>\n      &lt;p>You clicked {count} times&lt;/p>\n       setCount(count + 1)}\n        Click me\n\n    &lt;/div>\n  );\n}\nexport default CounterExample;\n        </code></pre>\n\n\n\n<p>The above code is based on the previous example with a new feature which we set the document title to a custom message, including the number of clicks.</p>\n\n\n\n<p>In React component, there are two types of side effects:</p>\n\n\n\n<ol><li>Effects Without Cleanup</li><li>Effects With Cleanup</li></ol>\n\n\n\n<h3>Effects without Cleanup</h3>\n\n\n\n<p>It is used in useEffect which does not block the browser from updating the screen. It makes the app more responsive. The most common example of effects which don&#8217;t require a cleanup are manual DOM mutations, Network requests, Logging, etc.</p>\n\n\n\n<h3>Effects with Cleanup</h3>\n\n\n\n<p>Some effects require cleanup after DOM updation. For example, if we want to set up a subscription to some external data source, it is important to clean up memory so that we don&#8217;t introduce a memory leak. React performs the cleanup of memory when the component unmounts. However, as we know that, effects run for every render method and not just once. Therefore, React also cleans up effects from the previous render before running the effects next time.</p>\n\n\n\n<h2>Custom Hooks</h2>\n\n\n\n<p>A custom Hook is a JavaScript function. The name of custom Hook starts with &#8220;use&#8221; which can call other Hooks. A custom Hook is just like a regular function, and the word &#8220;use&#8221; in the beginning tells that this function follows the rules of Hooks. Building custom Hooks allows you to extract component logic into reusable functions.</p>\n\n\n\n<p>Let us understand how custom Hooks works in the following example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nimport React, {useState, useEffect } from 'react';\n\nconst useDocumentTitle = title => {\n            useEffect(() => {\n            document.title = title;\n  }, &#91;title])\n}\n\nfunction CustomCounter() {\n            const &#91;count, setCount] = useState(0);\n        const incrementCount = () => setCount(count + 1);\n        useDocumentTitle(`You clicked ${count} times`);\n  // useEffect(() => {\n            //   document.title = `You clicked ${count} times`\n  // });\n\n  return (\n    &lt;div>\n      &lt;p>You clicked {count} times&lt;/p>\n      incrementCount Click me\n    &lt;/div>\n  )\n}\nexport default CustomCounter;\n      </code></pre>\n\n\n\n<p>In the above snippet, useDocumentTitle is a custom Hook which takes an argument as a string of text which is a title. Inside this Hook, we call useEffect Hook and set the title as long as the title has changed. The second argument will perform that check and update the title only when its local state is different than what we are passing in.</p>\n\n\n\n<h4>Note: A custom Hook is a convention which naturally follows from the design of Hooks, instead of a React feature.</h4>\n\n\n\n<h2>Built-in Hooks</h2>\n\n\n\n<p>Here, we describe the APIs for the built-in Hooks in React. The built-in Hooks can be divided into two parts, which are given below.</p>\n\n\n\n<p><strong>Basic Hooks</strong></p>\n\n\n\n<ul><li>useState</li><li>useEffect</li><li>useContext</li></ul>\n\n\n\n<p><strong>Additional Hooks</strong></p>\n\n\n\n<ul><li>useReducer</li><li>useCallback</li><li>useMemo</li><li>useRef</li><li>useImperativeHandle</li><li>useLayoutEffect</li><li>useDebugValue</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Hooks are the new feature introduced in the React 16.8 version. It allows you to use state and other React features without writing a class. Hooks are the functions which &#8220;hook into&#8221; React state and lifecycle features from function components. It does not work inside classes. Hooks are backward-compatible, which means it does not contain [&hellip;]</p>\n","protected":false},"author":1,"featured_media":368,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4007"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4007"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4007/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/368"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4007"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4007"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4007"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4010,"date":"2020-05-27T07:25:30","date_gmt":"2020-05-27T07:25:30","guid":{"rendered":"http://react.foobrdigital.com/?p=78"},"modified":"2020-05-27T07:25:30","modified_gmt":"2020-05-27T07:25:30","slug":"flux-concept","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/flux-concept/","title":{"rendered":"Flux Concept"},"content":{"rendered":"\n<p>Flux is an application architecture that Facebook uses internally for building the client-side web application with React. It is not a library nor a framework. It is neither a library nor a framework. It is a kind of architecture that complements React as view and follows the concept of Unidirectional Data Flow model. It is useful when the project has dynamic data, and we need to keep the data updated in an effective manner. It reduces the runtime errors.</p>\n\n\n\n<p>Flux applications have three major roles in dealing with data:</p>\n\n\n\n<ol><li>Dispatcher</li><li>Stores</li><li>Views (React components)</li></ol>\n\n\n\n<p>Here, you should not be confused with the Model-View-Controller (MVC) model. Although, Controllers exists in both, but Flux controller-views (views) found at the top of the hierarchy. It retrieves data from the stores and then passes this data down to their children. Additionally, action creators &#8211; dispatcher helper methods used to describe all changes that are possible in the application. It can be useful as a fourth part of the Flux update cycle.</p>\n\n\n\n<h2>Structure and Data Flow</h2>\n\n\n\n<p>In Flux application, data flows in a single direction(unidirectional). This data flow is central to the flux pattern. The dispatcher, stores, and views are independent nodes with inputs and outputs. The actions are simple objects that contain new data and type property. Now, let us look at the various components of flux architecture one by one.</p>\n\n\n\n<h3>Dispatcher</h3>\n\n\n\n<p>It is a central hub for the React Flux application and manages all data flow of your Flux application. It is a registry of callbacks into the stores. It has no real intelligence of its own, and simply acts as a mechanism for distributing the actions to the stores. All stores register itself and provide a callback. It is a place which handled all events that modify the store. When an action creator provides a new action to the dispatcher, all stores receive that action via the callbacks in the registry.</p>\n\n\n\n<p>The dispatcher&#8217;s API has five methods. These are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Methods</th><th>Descriptions</th></tr><tr><td>1.</td><td>register()</td><td>It is used to register a store&#8217;s action handler callback.</td></tr><tr><td>2.</td><td>unregister()</td><td>It is used to unregisters a store&#8217;s callback.</td></tr><tr><td>3.</td><td>waitFor()</td><td>It is used to wait for the specified callback to run first.</td></tr><tr><td>4.</td><td>dispatch()</td><td>It is used to dispatches an action.</td></tr><tr><td>5.</td><td>isDispatching()</td><td>It is used to checks if the dispatcher is currently dispatching an action.</td></tr></tbody></table></figure>\n\n\n\n<h3>Stores</h3>\n\n\n\n<p>It primarily contains the application state and logic. It is similar to the model in a traditional MVC. It is used for maintaining a particular state within the application, updates themselves in response to an action, and emit the change event to alert the controller view.</p>\n\n\n\n<h3>Views</h3>\n\n\n\n<p>It is also called as controller-views. It is located at the top of the chain to store the logic to generate actions and receive new data from the store. It is a React component listen to change events and receives the data from the stores and re-render the application.</p>\n\n\n\n<h3>Actions</h3>\n\n\n\n<p>The dispatcher method allows us to trigger a dispatch to the store and include a payload of data, which we call an action. It is an action creator or helper methods that pass the data to the dispatcher.</p>\n\n\n\n<h3>Advantage of Flux</h3>\n\n\n\n<ul><li>It is a unidirectional data flow model which is easy to understand.</li><li>It is open source and more of a design pattern than a formal framework like MVC architecture.</li><li>The flux application is easier to maintain.</li><li>The flux application parts are decoupled.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Flux is an application architecture that Facebook uses internally for building the client-side web application with React. It is not a library nor a framework. It is neither a library nor a framework. It is a kind of architecture that complements React as view and follows the concept of Unidirectional Data Flow model. It is [&hellip;]</p>\n","protected":false},"author":1,"featured_media":369,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4010"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4010"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4010/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/369"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4010"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4010"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4010"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4009,"date":"2020-05-27T07:27:48","date_gmt":"2020-05-27T07:27:48","guid":{"rendered":"http://react.foobrdigital.com/?p=77"},"modified":"2020-05-27T07:27:48","modified_gmt":"2020-05-27T07:27:48","slug":"flux-vs-mvc","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/flux-vs-mvc/","title":{"rendered":"Flux Vs. MVC"},"content":{"rendered":"\n<h2>MVC</h2>\n\n\n\n<p>MVC stands for Model View Controller. It is an architectural pattern used for developing the user interface. It divides the application into three different logical components: the Model, the View, and the Controller. It is first introduced in 1976 in the Smalltalk programming language. In MVC, each component is built to handle specific development aspect of an application. It is one of the most used web development frameworks to create scalable projects.</p>\n\n\n\n<h3>MVC Architecture</h3>\n\n\n\n<p>The MVC architecture contains the three components. These are:</p>\n\n\n\n<ul><li><strong>Model:</strong>&nbsp;It is responsible for maintaining the behavior and data of an application.</li><li><strong>View:</strong>&nbsp;It is used to display the model in the user interface.</li><li><strong>Controller:</strong>&nbsp;It acts as an interface between the Model and the View components. It takes user input, manipulates the data(model) and causes the view to update.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-flux-vs-mvc.png\" alt=\"React Flux Vs. MVC\"/></figure>\n\n\n\n<h2>Flux</h2>\n\n\n\n<p>According to the official site, Flux is the application architecture that Facebook uses for building client-side web applications. It is an alternative to MVC architecture and other software design patterns for managing how data flows in the react application. It is the backbone of all React application. It is not a library nor a framework. It complements React as view and follows the concept of Unidirectional Data Flow model.</p>\n\n\n\n<p>Flux Architecture has three major roles in dealing with data:</p>\n\n\n\n<ol><li>Dispatcher</li><li>Stores</li><li>Views (React components)</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-flux-vs-mvc2.png\" alt=\"React Flux Vs. MVC\"/></figure>\n\n\n\n<h2>MVC Vs. Flux</h2>\n\n\n\n<table><tbody><tr><th>SN</th><th>MVC</th><th>FLUX</th></tr><tr><td><strong>1.</strong></td><td>It was introduced in 1976.</td><td>It was introduced just a few years ago.</td></tr><tr><td><strong>2.</strong></td><td>It supports Bi-directional data Flow model.</td><td>It supports Uni-directional data flow model.</td></tr><tr><td><strong>3.</strong></td><td>In this, data binding is the key.</td><td>In this, events or actions are the keys.</td></tr><tr><td><strong>4.</strong></td><td>It is synchronous.</td><td>It is asynchronous.</td></tr><tr><td><strong>5.</strong></td><td>Here, controllers handle everything(logic).</td><td>Here, stores handle all logic.</td></tr><tr><td><strong>6.</strong></td><td>It is hard to debug.</td><td>It is easy to debug because it has common initiating point: Dispatcher.</td></tr><tr><td><strong>7.</strong></td><td>It is difficult to understand as the project size increases.</td><td>It is easy to understand.</td></tr><tr><td><strong>8.</strong></td><td>Its maintainability is difficult as the project scope goes huge.</td><td>Its maintainability is easy and reduces runtime errors.</td></tr><tr><td><strong>9.</strong></td><td>Testing of application is difficult.</td><td>Testing of application is easy.</td></tr><tr><td><strong>10.</strong></td><td>Scalability is complex.</td><td>It can be easily scalable.</td></tr></tbody></table>\n","protected":false},"excerpt":{"rendered":"<p>MVC MVC stands for Model View Controller. It is an architectural pattern used for developing the user interface. It divides the application into three different logical components: the Model, the View, and the Controller. It is first introduced in 1976 in the Smalltalk programming language. In MVC, each component is built to handle specific development [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4009"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4009"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4009/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4009"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4009"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4009"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4008,"date":"2020-05-27T07:29:52","date_gmt":"2020-05-27T07:29:52","guid":{"rendered":"http://react.foobrdigital.com/?p=76"},"modified":"2020-05-27T07:29:52","modified_gmt":"2020-05-27T07:29:52","slug":"redux","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/redux/","title":{"rendered":"Redux"},"content":{"rendered":"\n<p>Redux is an open-source JavaScript library used to manage application state. React uses Redux for building the user interface. It was first introduced by&nbsp;<strong>Dan Abramov</strong>&nbsp;and&nbsp;<strong>Andrew Clark</strong>&nbsp;in&nbsp;<strong>2015</strong>.</p>\n\n\n\n<p>React Redux is the official React binding for Redux. It allows React components to read data from a Redux Store, and dispatch&nbsp;<strong>Actions</strong>&nbsp;to the&nbsp;<strong>Store</strong>&nbsp;to update data. Redux helps apps to scale by providing a sensible way to manage state through a unidirectional data flow model. React Redux is conceptually simple. It subscribes to the Redux store, checks to see if the data which your component wants have changed, and re-renders your component.</p>\n\n\n\n<p>Redux was inspired by Flux. Redux studied the Flux architecture and omitted unnecessary complexity.</p>\n\n\n\n<ul><li>Redux does not have Dispatcher concept.</li><li>Redux has an only Store whereas Flux has many Stores.</li><li>The Action objects will be received and handled directly by Store.</li></ul>\n\n\n\n<h2>Why use React Redux?</h2>\n\n\n\n<p>The main reason to use React Redux are:</p>\n\n\n\n<ul><li>React Redux is the official&nbsp;<strong>UI bindings</strong>&nbsp;for react Application. It is kept up-to-date with any API changes to ensure that your React components behave as expected.</li><li>It encourages good &#8216;React&#8217; architecture.</li><li>It implements many performance optimizations internally, which allows to components re-render only when it actually needs.</li></ul>\n\n\n\n<h2>Redux Architecture</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-redux-architecture.png\" alt=\"React Redux\"/></figure>\n\n\n\n<p>The components of Redux architecture are explained below.</p>\n\n\n\n<p><strong>STORE:</strong>&nbsp;A Store is a place where the entire state of your application lists. It manages the status of the application and has a dispatch(action) function. It is like a brain responsible for all moving parts in Redux.</p>\n\n\n\n<p><strong>ACTION:</strong>&nbsp;Action is sent or dispatched from the view which are payloads that can be read by Reducers. It is a pure object created to store the information of the user&#8217;s event. It includes information such as type of action, time of occurrence, location of occurrence, its coordinates, and which state it aims to change.</p>\n\n\n\n<p><strong>REDUCER:</strong>&nbsp;Reducer read the payloads from the actions and then updates the store via the state accordingly. It is a pure function to return a new state from the initial state.</p>\n\n\n\n<h2>Redux Installation</h2>\n\n\n\n<p><strong>Requirements:</strong>&nbsp;React Redux requires React 16.8.3 or later version.</p>\n\n\n\n<p>To use React Redux with React application, you need to install the below command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install redux react-redux --save  </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Redux is an open-source JavaScript library used to manage application state. React uses Redux for building the user interface. It was first introduced by&nbsp;Dan Abramov&nbsp;and&nbsp;Andrew Clark&nbsp;in&nbsp;2015. React Redux is the official React binding for Redux. It allows React components to read data from a Redux Store, and dispatch&nbsp;Actions&nbsp;to the&nbsp;Store&nbsp;to update data. Redux helps apps to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":370,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4008"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4008"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4008/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/370"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4008"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4008"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4008"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4011,"date":"2020-05-27T07:36:30","date_gmt":"2020-05-27T07:36:30","guid":{"rendered":"http://react.foobrdigital.com/?p=79"},"modified":"2020-05-27T07:36:30","modified_gmt":"2020-05-27T07:36:30","slug":"redux-example","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/redux-example/","title":{"rendered":"Redux Example"},"content":{"rendered":"\n<p>In this section, we will learn how to implements Redux in React application. Here, we provide a simple example to connect Redux and React.</p>\n\n\n\n<p><strong>Step-1</strong>&nbsp;Create a new react project using&nbsp;<strong>create-react-app</strong>&nbsp;command. I choose the project name: &#8220;<strong>react project</strong>.&#8221; Now, install&nbsp;<strong>Redux</strong>&nbsp;and&nbsp;<strong>React-Redux</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Codemeals@root:~/Desktop$ npx create-react-app reactproject  \nCodemeals@root:~/Desktop/reactproject$ npm install redux react-redux --save  </code></pre>\n\n\n\n<p><strong>Step-2 Create Files and Folders</strong></p>\n\n\n\n<p>In this step, we need to create folders and files for actions, reducers, components, and containers. After creating folders and files, our project looks like as below image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-redux-example.png\" alt=\"React Redux Example\"/></figure>\n\n\n\n<p><strong>Step-3 Actions</strong></p>\n\n\n\n<p>It uses &#8216;<strong>type</strong>&#8216; property to inform about data that should be sent to the&nbsp;<strong>Store</strong>. In this folder, we will create two files:&nbsp;<strong>index.js</strong>&nbsp;and&nbsp;<strong>index.spec.js</strong>. Here, we have created an&nbsp;<strong>action creator</strong>&nbsp;that returns our action and sets an&nbsp;<strong>id</strong>&nbsp;for every created item.</p>\n\n\n\n<p><strong>Index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>let nextTodoId = 0  \nexport const addTodo = text => ({  \n  type: 'ADD_TODO',  \n  id: nextTodoId++,  \n  text  \n})  \n  \nexport const setVisibilityFilter = filter => ({  \n  type: 'SET_VISIBILITY_FILTER',  \n  filter  \n})  \n  \nexport const toggleTodo = id => ({  \n  type: 'TOGGLE_TODO',  \n  id  \n})  \n  \nexport const VisibilityFilters = {  \n  SHOW_ALL: 'SHOW_ALL',  \n  SHOW_COMPLETED: 'SHOW_COMPLETED',  \n  SHOW_ACTIVE: 'SHOW_ACTIVE'  \n}  </code></pre>\n\n\n\n<p><strong>Index.spec.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import * as actions from './index'  \n  \ndescribe('todo actions', () => {  \n  it('addTodo should create ADD_TODO action', () => {  \n    expect(actions.addTodo('Use Redux')).toEqual({  \n      type: 'ADD_TODO',  \n      id: 0,  \n      text: 'Use Redux'  \n    })  \n  })  \n  \n  it('setVisibilityFilter should create SET_VISIBILITY_FILTER action', () => {  \n    expect(actions.setVisibilityFilter('active')).toEqual({  \n      type: 'SET_VISIBILITY_FILTER',  \n      filter: 'active'  \n    })  \n  })  \n  \n  it('toggleTodo should create TOGGLE_TODO action', () => {  \n    expect(actions.toggleTodo(1)).toEqual({  \n      type: 'TOGGLE_TODO',  \n      id: 1  \n    })  \n  })  \n})  </code></pre>\n\n\n\n<p><strong>Step-4 Reducers</strong></p>\n\n\n\n<p>As we know, Actions only trigger changes in the app, and the Reducers specify those changes. The Reducer is a function which takes two parameters &#8216;Action&#8217; and &#8216;State&#8217; to calculate and return an updated State. It read the payloads from the &#8216;Actions&#8217; and then updates the &#8216;Store&#8217; via the State accordingly.</p>\n\n\n\n<p>In the given files, each Reducer managing its own part of the global State. The State parameter is different for every Reducer and corresponds to the part of the &#8216;State&#8217; it manages. When the app becomes larger, we can split the Reducers into separate files and keep them completely independent and managing different data domains.</p>\n\n\n\n<p>Here, we are using &#8216;combineReducers&#8217; helper function to add any new Reducers we might use in the future.</p>\n\n\n\n<p><strong>index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { combineReducers } from 'redux'  \nimport todos from './todos'  \nimport visibilityFilter from './visibilityFilter'  \n  \nexport default combineReducers({  \n  todos,  \n  visibilityFilter  \n})  </code></pre>\n\n\n\n<p><strong>Todos.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>const todos = (state = &#91;], action) => {  \n  switch (action.type) {  \n    case 'ADD_TODO':  \n      return &#91;  \n        ...state,  \n        {  \n          id: action.id,  \n          text: action.text,  \n          completed: false  \n        }  \n      ]  \n    case 'TOGGLE_TODO':  \n      return state.map(todo =>  \n        (todo.id === action.id)  \n          ? {...todo, completed: !todo.completed}  \n          : todo  \n      )  \n    default:  \n      return state  \n  }  \n}  \nexport default todos </code></pre>\n\n\n\n<p><strong>Todos.spec.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import todos from './todos'  \n  \ndescribe('todos reducer', () => {  \n  it('should handle initial state', () => {  \n    expect(  \n      todos(undefined, {})  \n    ).toEqual(&#91;])  \n  })  \n  \n  it('should handle ADD_TODO', () => {  \n    expect(  \n      todos(&#91;], {  \n        type: 'ADD_TODO',  \n        text: 'Run the tests',  \n        id: 0  \n      })  \n    ).toEqual(&#91;  \n      {  \n        text: 'Run the tests',  \n        completed: false,  \n        id: 0  \n      }  \n    ])  \n  \n    expect(  \n      todos(&#91;  \n        {  \n          text: 'Run the tests',  \n          completed: false,  \n          id: 0  \n        }  \n      ], {  \n        type: 'ADD_TODO',  \n        text: 'Use Redux',  \n        id: 1  \n      })  \n    ).toEqual(&#91;  \n      {  \n        text: 'Run the tests',  \n        completed: false,  \n        id: 0  \n      }, {  \n        text: 'Use Redux',  \n        completed: false,  \n        id: 1  \n      }  \n    ])  \n  \n    expect(  \n      todos(&#91;  \n        {  \n          text: 'Run the tests',  \n          completed: false,  \n          id: 0  \n        }, {  \n          text: 'Use Redux',  \n          completed: false,  \n          id: 1  \n        }  \n      ], {  \n        type: 'ADD_TODO',  \n        text: 'Fix the tests',  \n        id: 2  \n      })  \n    ).toEqual(&#91;  \n      {  \n        text: 'Run the tests',  \n        completed: false,  \n        id: 0  \n      }, {  \n        text: 'Use Redux',  \n        completed: false,  \n        id: 1  \n      }, {  \n        text: 'Fix the tests',  \n        completed: false,  \n        id: 2  \n      }  \n    ])  \n  })  \n  \n  it('should handle TOGGLE_TODO', () => {  \n    expect(  \n      todos(&#91;  \n        {  \n          text: 'Run the tests',  \n          completed: false,  \n          id: 1  \n        }, {  \n          text: 'Use Redux',  \n          completed: false,  \n          id: 0  \n        }  \n      ], {  \n        type: 'TOGGLE_TODO',  \n        id: 1  \n      })  \n    ).toEqual(&#91;  \n      {  \n        text: 'Run the tests',  \n        completed: true,  \n        id: 1  \n      }, {  \n        text: 'Use Redux',  \n        completed: false,  \n        id: 0  \n      }  \n    ])  \n  })  \n})  </code></pre>\n\n\n\n<p><strong>VisibilityFilter.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { VisibilityFilters } from '../actions'  \n  \nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {  \n  switch (action.type) {  \n    case 'SET_VISIBILITY_FILTER':  \n      return action.filter  \n    default:  \n      return state  \n  }  \n}  \nexport default visibilityFilter  </code></pre>\n\n\n\n<p><strong>Step-5 Components</strong></p>\n\n\n\n<p>It is a Presentational Component, which concerned with how things look such as markup, styles. It receives data and invokes callbacks exclusively via props. It does not know where the data comes from or how to change it. It only renders what is given to them.</p>\n\n\n\n<p><strong>App.js</strong></p>\n\n\n\n<p>It is the root component which renders everything in the UI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'  \nimport Footer from './Footer'  \nimport AddTodo from '../containers/AddTodo'  \nimport VisibleTodoList from '../containers/VisibleTodoList'  \n  \nconst App = () => (  \n  &lt;div>  \n    &lt;AddTodo />  \n    &lt;VisibleTodoList />  \n    &lt;Footer />  \n  &lt;/div>  \n)  \nexport default App  </code></pre>\n\n\n\n<p><strong>Footer.js</strong></p>\n\n\n\n<p>It tells where the user changes currently visible&nbsp;<strong>todos</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'  \nimport FilterLink from '../containers/FilterLink'  \nimport { VisibilityFilters } from '../actions'  \n  \nconst Footer = () => (  \n  &lt;p>  \n    Show: &lt;FilterLink filter={VisibilityFilters.SHOW_ALL}>All&lt;/FilterLink>  \n    {', '}  \n    &lt;FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active&lt;/FilterLink>  \n    {', '}  \n    &lt;FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed&lt;/FilterLink>  \n  &lt;/p>  \n)  \nexport default Footer  </code></pre>\n\n\n\n<p><strong>Link.js</strong></p>\n\n\n\n<p>It is a link with a callback.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'  \nimport PropTypes from 'prop-types'  \n  \nconst Link = ({ active, children, onClick }) => {  \n  if (active) {  \n    return &lt;span>{children}&lt;/span>  \n  }  \n  \n  return (  \n    &lt;a  \n      href=\"\"  \n      onClick={e => {  \n        e.preventDefault()  \n        onClick()  \n      }}  \n    >  \n      {children}  \n    &lt;/a>  \n  )  \n}  \n  \nLink.propTypes = {  \n  active: PropTypes.bool.isRequired,  \n  children: PropTypes.node.isRequired,  \n  onClick: PropTypes.func.isRequired  \n}  \n  \nexport default Link  </code></pre>\n\n\n\n<p><strong>Todo.js</strong></p>\n\n\n\n<p>It represents a single todo item which shows&nbsp;<strong>text</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'  \nimport PropTypes from 'prop-types'  \n  \nconst Todo = ({ onClick, completed, text }) => (  \n  &lt;li  \n    onClick={onClick}  \n    style={{  \n      textDecoration: completed ? 'line-through' : 'none'  \n    }}  \n  >  \n    {text}  \n  &lt;/li>  \n)  \n  \nTodo.propTypes = {  \n  onClick: PropTypes.func.isRequired,  \n  completed: PropTypes.bool.isRequired,  \n  text: PropTypes.string.isRequired  \n}  \n  \nexport default Todo  </code></pre>\n\n\n\n<p><strong>TodoList.js</strong></p>\n\n\n\n<p>It is a list to show visible todos{ id, text, completed }.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'  \nimport PropTypes from 'prop-types'  \nimport Todo from './Todo'  \n  \nconst TodoList = ({ todos, onTodoClick }) => (  \n  &lt;ul>  \n    {todos.map((todo, index) => (  \n      &lt;Todo key={index} {...todo} onClick={() => onTodoClick(index)} />  \n    ))}  \n  &lt;/ul>  \n)  \n  \nTodoList.propTypes = {  \n  todos: PropTypes.arrayOf(  \n    PropTypes.shape({  \n      id: PropTypes.number.isRequired,  \n      completed: PropTypes.bool.isRequired,  \n      text: PropTypes.string.isRequired  \n    }).isRequired  \n  ).isRequired,  \n  onTodoClick: PropTypes.func.isRequired  \n}  \nexport default TodoList  </code></pre>\n\n\n\n<p><strong>Step-6 Containers</strong></p>\n\n\n\n<p>It is a Container Component which concerned with how things work such as data fetching, updates State. It provides data and behavior to presentational components or other container components. It uses Redux State to read data and dispatch Redux Action for updating data.</p>\n\n\n\n<p><strong>AddTodo.js</strong></p>\n\n\n\n<p>It contains the input field with an ADD (submit) button.</p>\n\n\n\n<p><strong>FilterLink.js</strong></p>\n\n\n\n<p>It represents the current visibility filter and renders a link.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'  \nimport { connect } from 'react-redux'  \nimport { addTodo } from '../actions'  \n  \nconst AddTodo = ({ dispatch }) => {  \n  let input  \n  \n  return (  \n    &lt;div>  \n      &lt;form onSubmit={e => {  \n        e.preventDefault()  \n        if (!input.value.trim()) {  \n          return  \n        }  \n        dispatch(addTodo(input.value))  \n        input.value = ''  \n      }}>  \n        &lt;input ref={node => input = node} />  \n        &lt;button type=\"submit\">  \n          Add Todo  \n        &lt;/button>  \n      &lt;/form>  \n    &lt;/div>  \n  )  \n}  \nexport default connect()(AddTodo)  </code></pre>\n\n\n\n<p><strong>VisibleTodoList.js</strong></p>\n\n\n\n<p>It filters the todos and renders a TodoList.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { connect } from 'react-redux'  \nimport { toggleTodo } from '../actions'  \nimport TodoList from '../components/TodoList'  \nimport { VisibilityFilters } from '../actions'  \n  \nconst getVisibleTodos = (todos, filter) => {  \n  switch (filter) {  \n    case VisibilityFilters.SHOW_ALL:  \n      return todos  \n    case VisibilityFilters.SHOW_COMPLETED:  \n      return todos.filter(t => t.completed)  \n    case VisibilityFilters.SHOW_ACTIVE:  \n      return todos.filter(t => !t.completed)  \n    default:  \n      throw new Error('Unknown filter: ' + filter)  \n  }  \n}  \n  \nconst mapStateToProps = state => ({  \n  todos: getVisibleTodos(state.todos, state.visibilityFilter)  \n})  \n  \nconst mapDispatchToProps = dispatch => ({  \n  toggleTodo: id => dispatch(toggleTodo(id))  \n})  \n  \nexport default connect(  \n  mapStateToProps,  \n  mapDispatchToProps  \n)(TodoList)  </code></pre>\n\n\n\n<p><strong>Step-7 Store</strong></p>\n\n\n\n<p>All container components need access to the Redux Store to subscribe to it. For this, we need to pass it(store) as a prop to every container component. However, it gets tedious. So we recommend using special React Redux component called&nbsp;which make the store available to all container components without passing it explicitly. It used once when you render the root component.</p>\n\n\n\n<p><strong>index.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react'  \nimport { render } from 'react-dom'  \nimport { createStore } from 'redux'  \nimport { Provider } from 'react-redux'  \nimport App from './components/App'  \nimport rootReducer from './reducers'  \n  \nconst store = createStore(rootReducer)  \n  \nrender(  \n  &lt;Provider store={store}>  \n    &lt;App />  \n  &lt;/Provider>,  \n  document.getElementById('root')  \n)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When we execute the application, it gives the output as below screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-redux-example-output1.png\" alt=\"React Redux Example\"/></figure>\n\n\n\n<p>Now, we will be able to add items in the list.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/reactjs/images/react-redux-example-output2.png\" alt=\"React Redux Example\"/></figure>\n\n\n\n<p>The detailed explanation of React-Redux example can be shown here:&nbsp;https://redux.js.org/basics/usage-with-react.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this section, we will learn how to implements Redux in React application. Here, we provide a simple example to connect Redux and React. Step-1&nbsp;Create a new react project using&nbsp;create-react-app&nbsp;command. I choose the project name: &#8220;react project.&#8221; Now, install&nbsp;Redux&nbsp;and&nbsp;React-Redux. Step-2 Create Files and Folders In this step, we need to create folders and files for [&hellip;]</p>\n","protected":false},"author":1,"featured_media":371,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4011"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4011"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4011/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/371"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4011"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4011"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4011"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4012,"date":"2020-05-27T07:39:35","date_gmt":"2020-05-27T07:39:35","guid":{"rendered":"http://react.foobrdigital.com/?p=86"},"modified":"2020-05-27T07:39:35","modified_gmt":"2020-05-27T07:39:35","slug":"portals","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/portals/","title":{"rendered":"Testing Introduction"},"content":{"rendered":"\n<h1>Testing React Applications with Jest</h1>\n\n\n\n<p>We have created manv React components by now. Some of them are quite simple, but some are sophisticated enough. Having built both, you might have gained a certain confidence, which makes you believe that no matter how complex the user interface is, you can build it with React, without any major pitfalls. This is a good confidence to have. After all, this is why we&#8217;re investing time in learning React. However, there is a trap that many confident React developers fall into—the act of not writing unit tests.</p>\n\n\n\n<p>What is a&nbsp;<strong>unit test</strong>? As the name suggests, it&#8217;s a test for a single unit of your application. A single unit in your application is often a function, which suggests that writing unit tests means writing tests for your functions.</p>\n\n\n\n<h1>Why write unit tests?</h1>\n\n\n\n<p>The important question is, how can find errors and fix them before deploying our apps to production? The answer is a number of unit tests for my function.</p>\n","protected":false},"excerpt":{"rendered":"<p>Testing React Applications with Jest We have created manv React components by now. Some of them are quite simple, but some are sophisticated enough. Having built both, you might have gained a certain confidence, which makes you believe that no matter how complex the user interface is, you can build it with React, without any [&hellip;]</p>\n","protected":false},"author":1,"featured_media":372,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4012"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4012"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4012/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/372"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4012"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4012"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4012"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4013,"date":"2020-05-27T07:42:15","date_gmt":"2020-05-27T07:42:15","guid":{"rendered":"http://react.foobrdigital.com/?p=87"},"modified":"2020-05-27T07:42:15","modified_gmt":"2020-05-27T07:42:15","slug":"error-boundaries","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/error-boundaries/","title":{"rendered":"Creating Tests"},"content":{"rendered":"\n<p>How does one write&nbsp;a test for JavaScript functions? You need a testing framework, and luckily, Facebook has built its own&nbsp;unit test framework for JavaScript, called&nbsp;<strong>Jest</strong>. It is inspired by&nbsp;<strong>Jasmine</strong>—another well-known JavaScript test&nbsp;framework. Those who&nbsp;are familiar with Jasmine will find Jest&#8217;s approach to testing very similar. However, I&#8217;ll make no assumptions about&nbsp;your prior experience with testing frameworks and discuss the basics first.</p>\n\n\n\n<p>The fundamental idea of unit testing is that you test only one piece of functionality in your application that usually is implemented by one function. You test it in isolation, which means that all the other parts of your application that the function depends on are not used by your tests. Instead, they are imitated by your tests. To imitate a JavaScript object is to create a fake one that simulates the behavior of the real object. In unit testing, the fake object&nbsp;is called&nbsp;<strong>mock</strong>&nbsp;and the process of creating it is called&nbsp;<strong>mocking</strong>.</p>\n\n\n\n<p>Jest automatically&nbsp;mocks the dependencies when you&#8217;re running your tests. It automatically finds tests to be executed in your repository. Let&#8217;s take a look at the following example.</p>\n\n\n\n<p>First, create the&nbsp;<code>~/your-project-folder/source/utils/</code>&nbsp;directory. Then, create a new&nbsp;<code>PhotoUtils.js</code>&nbsp;file in it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n  function getListOfPhotoIds(photos) {\n      return Object.keys(photos);\n        }\n      export default { getListOfPhotoIds };\n    </code></pre>\n\n\n\n<p>The PhotoUtils.js file is a module with the getListOfPhotoIds() utility function for our application to use. Given an object with photos, getListOfPhotoIds() returns an array of photo IDs. Now let&#8217;s write our first unit test with Jest. We&#8217;ll test our getListOfPhotoIds() function.</p>\n\n\n\n<p>Create a PhotoUtils.test.js file inside ~/your-project-folder/source/utils/:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n      import PhotoUtils from './PhotoUtils';\n\ndescribe('PhotoUtils', () => {\n      test('getListOfPhotoIds returns an array of photo ids', () => {\n      const fakePhotos = {\n      photo01: {},\n      photo02: {},\n      photo03: {}\n    };\n    const expectedListOfPhotoIds = &#91;\n      'photo01',\n      'photo02',\n      'photo03'\n    ];\n    const actualListOfPhotoIds = PhotoUtils.getListOfPhotoIds(\n      fakePhotos\n    );\n\n    expect(actualListOfPhotoIds)\n      .toEqual(expectedListOfPhotoIds);\n  });\n});\n    </code></pre>\n\n\n\n<p>First, we require the&nbsp;<code>PhotoUtils</code>&nbsp;module:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import PhotoUtils from './PhotoUtils';</code></pre>\n\n\n\n<p>Next, we call a global&nbsp;<code>describe()</code>&nbsp;Jest function. It&#8217;s important to understand the concept behind it. In our&nbsp;<code>PhotoUtils.test.js</code>&nbsp;file, we&#8217;re not just creating a single test, instead we&#8217;re creating a&nbsp;suite of tests. A suite is a collection of tests that collectively&nbsp;tests a bigger unit of functionality. For example, a suite&nbsp;can have multiple tests, which tests all the individual parts of a larger module. In our example, we have a&nbsp;<code>PhotoUtils</code>&nbsp;module with potentially a number of utility functions. In this situation, we would create a suite for the&nbsp;<code>PhotoUtils</code>&nbsp;module, and then create tests for each individual utility function, such as&nbsp;<code>getListOfPhotoIds()</code>.</p>\n\n\n\n<p>The&nbsp;<code>describe()</code>&nbsp;function defines a suite and takes these two parameters:</p>\n\n\n\n<ul><li><strong>Suite name</strong>: This is the title that describes what is being tested by this test suite</li><li><strong>Suite implementation</strong>: This is the function that implements this suite</li></ul>\n\n\n\n<p>In our example, the suite is as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>describe('PhotoUtils', () => {\n      // Test suite implementation goes here\n    });</code></pre>\n\n\n\n<p>How do you create an individual test? In Jest, you create individual tests by calling another global Jest function—<code>test()</code>. Just like&nbsp;<code>describe()</code>, the&nbsp;<code>test()</code>&nbsp;function takes two parameters:</p>\n\n\n\n<ul><li><strong>Test name</strong>: This is the&nbsp;title that describes what is being tested by this test, for example:&nbsp;<code>'getListOfPhotoIds returns an array of photo ids'</code></li><li><strong>Test implementation</strong>: This is&nbsp;the function that implements this test</li></ul>\n\n\n\n<p>In our example, the test&nbsp;is as follows:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>test('getListOfPhotoIds returns an array of photo ids', () => {\n      // Test implementation goes here...\n    });</code></pre>\n\n\n\n<p>Let&#8217;s take a&nbsp;closer look at the implementation of our test:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">  </pre>\n\n\n\n<pre class=\"wp-block-code\"><code>  const fakePhotos = {\n      photo01: {},\n      photo02: {},\n      photo03: {}\n      };\nconst expectedListOfPhotoIds = &#91;\n  'photo01',\n  'photo02',\n  'photo03'\n];\nconst actualListOfPhotoIds = PhotoUtils.getListOfPhotoIds(\n  fakePhotos\n);\n\nexpect(actualListOfPhotoIds)\n  .toEqual(expectedListOfPhotoIds);</code></pre>\n\n\n\n<p>We test whether&nbsp;the&nbsp;<code>getListOfPhotoIds()</code>&nbsp;method of our&nbsp;<code>PhotoUtils</code>&nbsp;module returns an array of photo IDs, when given an object with photo objects.</p>\n\n\n\n<p>First, we will create a mock object that simulates the real photos object:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const fakePhotos = {\n      photo01: {},\n      photo02: {},\n      photo03: {}\n      };</code></pre>\n\n\n\n<p>The only requirement for this mock object is to have photo IDs as object keys. The values are not important, so we choose empty objects. The key names are not important as well, so we choose to name them&nbsp;<code>photo01</code>,&nbsp;<code>photo02</code>, and&nbsp;<code>photo03</code>. This mock object doesn&#8217;t fully simulate the real photo object—its sole purpose is to simulate the fact that its keys are photo IDs.</p>\n\n\n\n<p>The next step is to create an expected list of photo IDs:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const expectedListOfPhotoIds = &#91;\n  'photo01',\n  'photo02',\n  'photo03'\n];</code></pre>\n\n\n\n<p>We know what photo IDs to expect because we&#8217;ve mocked the photos object with the same IDs.</p>\n\n\n\n<p>The next step is to&nbsp;extract the actual photo IDs from our mocked photos object. For this, we use the&nbsp;<code>getListOfPhotoIds()</code>&nbsp;method that takes the photos object and returns&nbsp;an array of photo IDs:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const actualListOfPhotoIds = PhotoUtils.getListOfPhotoIds(\n  fakePhotos\n);</code></pre>\n\n\n\n<p>We pass the&nbsp;<code>fakePhotos</code>&nbsp;object to that method and store the results in the&nbsp;<code>actualListOfPhotoIds</code>&nbsp;constant. The reason it&#8217;s named&nbsp;<code>actualListOfPhotoIds</code>&nbsp;is that this list of photo IDs&nbsp;is produced by the actual&nbsp;<code>getListOfPhotoIds()</code>&nbsp;function that we&#8217;re testing.</p>\n\n\n\n<p>The final step will introduce us to a new important concept:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>expect(actualListOfPhotoIds)\n  .toEqual(expectedListOfPhotoIds);</code></pre>\n\n\n\n<p>Let&#8217;s think about the process of testing. We need to take an actual value produced by the method that we&#8217;re testing, that is,&nbsp;<code>getListOfPhotoIds()</code>, and match it to the expected value that we know in advance. The result of that match will determine whether our test has passed or failed.</p>\n\n\n\n<p>The reason why we can guess what&nbsp;<code>getListOfPhotoIds()</code>&nbsp;will return in advance is because we&#8217;ve prepared the input for it; this is our mock object:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>const fakePhotos = {\n      photo01: {},\n      photo02: {},\n      photo03: {}\n      };</code></pre>\n\n\n\n<p>So, we can expect the following output by calling&nbsp;<code>PhotoUtils.getListOfPhotoIds(fakePhotos)</code>:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 'photo01', 'photo02', 'photo03' ]</code></pre>\n\n\n\n<p>Because something can go wrong inside&nbsp;<code>getListOfPhotoIds()</code>, we cannot guarantee this result; we can only&nbsp;<em>expect</em>&nbsp;it.</p>\n\n\n\n<p>This is why we need to create an expectation. In Jest, an&nbsp;<strong>expectation</strong>&nbsp;is built using the&nbsp;<code>expect()</code>&nbsp;function, which takes an actual value; for example, the&nbsp;<code>actualListOfPhotoIds</code>&nbsp;object:&nbsp;<code>expect(actualListOfPhotoIds)</code>.</p>\n\n\n\n<p>Then, we chain it with a&nbsp;<strong>matcher</strong>&nbsp;function that&nbsp;compares the actual value with the expected value and&nbsp;tells Jest whether the expectation was met or not:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>expect(actualListOfPhotoIds)\n  .toEqual(expectedListOfPhotoIds);</code></pre>\n\n\n\n<p>In our example, we use&nbsp;the&nbsp;<code>toEqual()</code>&nbsp;matcher function to compare the&nbsp;two arrays.</p>\n\n\n\n<p>This is how you&nbsp;write a test. A test contains one or more expectations. Each expectation tests the state of your code. A test can be either a&nbsp;<strong>passing test</strong>&nbsp;or a&nbsp;<strong>failing test</strong>. A test&nbsp;is a passing test only when all the expectations are&nbsp;met; otherwise, it&#8217;s a failing test.</p>\n\n\n\n<p>Well, we&#8217;ve written our first test suite with a single test that has one expectation but How can you run it? Let&#8217;s see that in the next lecture!</p>\n","protected":false},"excerpt":{"rendered":"<p>How does one write&nbsp;a test for JavaScript functions? You need a testing framework, and luckily, Facebook has built its own&nbsp;unit test framework for JavaScript, called&nbsp;Jest. It is inspired by&nbsp;Jasmine—another well-known JavaScript test&nbsp;framework. Those who&nbsp;are familiar with Jasmine will find Jest&#8217;s approach to testing very similar. However, I&#8217;ll make no assumptions about&nbsp;your prior experience with testing [&hellip;]</p>\n","protected":false},"author":1,"featured_media":373,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4013"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4013"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4013/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/373"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4013"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4013"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4013"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2467,"date":"2020-07-21T11:44:26","date_gmt":"2020-07-21T11:44:26","guid":{"rendered":"http://react.foobrdigital.com/?p=2467"},"modified":"2020-07-21T11:44:26","modified_gmt":"2020-07-21T11:44:26","slug":"running-tests","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/running-tests/","title":{"rendered":"Running Tests"},"content":{"rendered":"\n<h1>Installing and running Jest</h1>\n\n\n\n<p>Let&#8217;s discuss how we can run our tests but First, let&#8217;s&nbsp;install the&nbsp;<strong>Jest command-line interface</strong>):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install –-save-dev jest-cli\n</code></pre>\n\n\n\n<p>This&nbsp;command installs the Jest CLI, and adds it as a development dependency&nbsp;to our&nbsp;<code>~/your-project-folder/package.json</code>&nbsp;file. Next, let&#8217;s edit the&nbsp;<code>package.json</code>&nbsp;file. We&#8217;ll replace the existing&nbsp;<code>\"script\"</code>&nbsp;object:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n},</code></pre>\n\n\n\n<p>Replace the preceding object with the following one:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"scripts\": {\n      \"test\": \"jest\"\n},</code></pre>\n\n\n\n<p>Now we&#8217;re ready to run our test suit. Navigate to the&nbsp;<code>~/your-project-folder/</code>&nbsp;directory, and run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm test</code></pre>\n\n\n\n<p>You should see the following message in your Terminal:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Using Jest CLI v25.1.0\n PASS  source/utils/__tests__/PhotoUtils-test.js (0.080s)\n1 test passed (1 total)\nRun time: 0.325s</code></pre>\n\n\n\n<p>As you can see, I am using Version v25.1.0 of the Jest CLI. When you run your test, the Jest version is likely to be higher than this.</p>\n\n\n\n<p>The key line in this message is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>PASS  source/utils/__tests__/PhotoUtils-test.js (0.080s)</code></pre>\n\n\n\n<ul><li><code>PASS</code>: This tells you that your test has passed</li><li><code>source/utils/__tests__/PhotoUtils-test.js</code>: This tells you what test it was running</li><li><code>(0.080s)</code>: This tells how long it took to run the test</li></ul>\n\n\n\n<p>That&#8217;s&nbsp;all it&nbsp;takes to write and test a tiny unit test. Now, let&#8217;s create another one!</p>\n","protected":false},"excerpt":{"rendered":"<p>Installing and running Jest Let&#8217;s discuss how we can run our tests but First, let&#8217;s&nbsp;install the&nbsp;Jest command-line interface): This&nbsp;command installs the Jest CLI, and adds it as a development dependency&nbsp;to our&nbsp;~/your-project-folder/package.json&nbsp;file. Next, let&#8217;s edit the&nbsp;package.json&nbsp;file. We&#8217;ll replace the existing&nbsp;&#8220;script&#8221;&nbsp;object: Replace the preceding object with the following one: Now we&#8217;re ready to run our test suit. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2467"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2467"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2467/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2467"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2467"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2467"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2470,"date":"2020-07-21T11:46:08","date_gmt":"2020-07-21T11:46:08","guid":{"rendered":"http://react.foobrdigital.com/?p=2470"},"modified":"2020-07-21T11:46:08","modified_gmt":"2020-07-21T11:46:08","slug":"react-vs-angular","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/react-vs-angular/","title":{"rendered":"React vs Angular"},"content":{"rendered":"\n<h1>Difference Between Angular and ReactJS</h1>\n\n\n\n<h2>Angular</h2>\n\n\n\n<p>Angular is an open-source JavaScript framework used to build a dynamic web application. Misko Hevery and Adam Abrons developed AngularJS in 2009, and now Google maintained it. The latest version of Angular is 1.7.8 on March 11, 2019. It is based on HTML and JavaScript and mostly used for building a Single Page Application. It can be included to an HTML page with a &lt;script&gt; tag. It extends HTML by adding built-in attributes with the directive and binds data to HTML with Expressions.</p>\n\n\n\n<h3>Features of AngularJS</h3>\n\n\n\n<ol><li><strong>Data-binding:</strong>&nbsp;AngularJS follows the two-way data binding. It is the automatic synchronization of data between model and view components.</li><li><strong>POJO Model:</strong>&nbsp;AngularJS uses POJO (Plain Old JavaScript) model, which provides spontaneous and well-planned objects. The POJO model makes AngularJS self-sufficient and easy to use.</li><li><strong>Model View Controller(MVC) Framework:</strong>&nbsp;MVC is a software design pattern used for developing web applications. The working model of AngularJS is based on MVC patterns. The MVC Architecture in AngularJS is easy, versatile, and dynamic. MVC makes it easier to build a separate client-side application.</li><li><strong>Services:</strong>&nbsp;AngularJS has several built-in services such as $http to make an XMLHttpRequest.</li><li><strong>User interface with HTML:</strong>&nbsp;In AngularJS, User interfaces are built on HTML. It is a declarative language which has shorter tags and easy to comprehend. It provides an organized, smooth, and structured interface.</li><li><strong>Dependency Injection:</strong>&nbsp;AngularJS has a built-in dependency injection subsystem that helps the developer to create, understand, and test the applications easily.</li><li><strong>Active community on Google:</strong>&nbsp;AngularJS provides excellent community support. It is Because Google maintains AngularJS. So, if you have any maintenance issues, there are many forums available where you can get your queries solved.</li><li><strong>Routing:</strong>&nbsp;Routing is the transition from one view to another view. Routing is the key aspect of single page applications where everything comes in a single page. Here, developers do not want to redirect the users to a new page every time they click the menu. The developers want the content load on the same page with the URL changing.</li></ol>\n\n\n\n<h2>ReactJS</h2>\n\n\n\n<p>ReactJS is an open-source JavaScript library used to build a user interface for Single Page Application. It is responsible only for the view layer of the application. It provides developers to compose complex UIs from a small and isolated piece of code called &#8220;components.&#8221; ReactJS made of two parts first is components, that are the pieces that contain HTML code and what you want to see in the user interface, and the second one is HTML document where all your components will be rendered.</p>\n\n\n\n<p>Jordan Walke, who was a software engineer at Facebook, develops it. Initially, it was developed and maintained by Facebook and was later used in its products like WhatsApp &amp; Instagram. Facebook developed ReactJS in 2011 for the newsfeed section, but it was released to the public in May 2013.</p>\n\n\n\n<h3>Features of ReactJS</h3>\n\n\n\n<ol><li><strong>JSX:</strong>&nbsp;JSX is a JavaScript syntax extension. The JSX syntax is processed into JavaScript calls of React Framework. It extends the ES6 so that HTML like text can co-exist with JavaScript React code.</li><li><strong>Components:</strong>&nbsp;ReactJS is all about components. ReactJS application is made up of multiple components, and each component has its logic and controls. These components can be reusable, which help you to maintain the code when working on larger scale projects.</li><li><strong>One-way Data Binding:</strong>&nbsp;ReactJS follows unidirectional data flow or one-way data binding. The one-way data binding gives you better control throughout the application. If the data flow is in another direction, then it requires additional features. It is because components are supposed to be immutable, and the data within them cannot be changed.</li><li><strong>Virtual DOM:</strong>&nbsp;A virtual DOM object is a representation of the real DOM object. Whenever any modifications happen in the web application, the entire UI is re-rendered in virtual DOM representation. Then, it checks the difference between the previous DOM representation and new DOM. Once it has done, the real DOM will update only the things that are changed. It makes the application faster, and there is no wastage of memory.</li><li><strong>Simplicity:</strong>&nbsp;ReactJS uses the JSX file, which makes the application simple and to code as well as understand. Also, ReactJS is a component-based approach which makes the code reusable as your need. It makes it simple to use and learn.</li><li><strong>Performance:</strong>&nbsp;ReactJS is known to be a great performer. The reason behind this is that it manages a virtual DOM. The DOM exists entirely in memory. Due to this, when we create a component, we did not write directly to the DOM. Instead, we are writing virtual Components that will turn into the DOM, leading to smoother and faster performance.</li></ol>\n\n\n\n<h2>AngularJS Vs. ReactJS</h2>\n\n\n\n<table class=\"alt\">\n        <tbody><tr>\n          <th></th>\n          <th>AngularJS</th>\n          <th>ReactJS</th>\n        </tr>\n        <tr>\n          <td><strong>Author</strong></td>\n          <td>Google</td>\n          <td>Facebook Community</td>\n        </tr>\n        <tr>\n          <td><strong>Developer</strong></td>\n          <td>Misko Hevery</td>\n          <td>Jordan Walke</td>\n        </tr>\n        <tr>\n          <td><strong>Initial Release</strong></td>\n          <td>October 2010</td>\n          <td>March 2013</td>\n        </tr>\n        <tr>\n          <td><strong>Latest Version</strong></td>\n          <td>Angular 1.7.8 on 11 March 2019.</td>\n          <td>React 16.8.6 on 27 March 2019</td>\n        </tr>\n        <tr>\n          <td><strong>Language</strong></td>\n          <td>JavaScript, HTML</td>\n          <td>JSX</td>\n        </tr>\n        <tr>\n          <td><strong>Type</strong></td>\n          <td>Open Source MVC Framework</td>\n          <td>Open Source JS Framework</td>\n        </tr>\n        <tr>\n          <td><strong>Rendering</strong></td>\n          <td>Client-Side</td>\n          <td>Server-Side</td>\n        </tr>\n        <tr>\n          <td><strong>Packaging</strong></td>\n          <td>Weak</td>\n          <td>Strong</td>\n        </tr>\n        <tr>\n          <td><strong>Data-Binding</strong></td>\n          <td>Bi-directional</td>\n          <td>Uni-directional</td>\n        </tr>\n        <tr>\n          <td><strong>DOM</strong></td>\n          <td>Regular DOM</td>\n          <td>Virtual DOM</td>\n        </tr>\n        <tr>\n          <td><strong>Testing</strong></td>\n          <td>Unit and Integration Testing</td>\n          <td>Unit Testing</td>\n        </tr>\n        <tr>\n          <td><strong>App Architecture</strong></td>\n          <td>MVC</td>\n          <td>Flux</td>\n        </tr>\n        <tr>\n          <td><strong>Dependencies</strong></td>\n          <td>It manages dependencies automatically.</td>\n          <td>It requires additional tools to manage dependencies.</td>\n        </tr>\n        <tr>\n          <td><strong>Routing</strong></td>\n          <td>It requires a template or controller to its router configuration, which has to be managed manually.</td>\n          <td>It doesn&#8217;t handle routing but has a lot of modules for routing, eg., react-router.</td>\n        </tr>\n        <tr>\n          <td><strong>Performance</strong></td>\n          <td>Slow</td>\n          <td>Fast, due to virtual DOM.</td>\n        </tr>\n        <tr>\n          <td><strong>Best For</strong></td>\n          <td>It is best for single page applications that update a single view at a time.</td>\n          <td>It is best for single page applications that update multiple views at a time.</td>\n        </tr>\n        </tbody></table>\n","protected":false},"excerpt":{"rendered":"<p>Difference Between Angular and ReactJS Angular Angular is an open-source JavaScript framework used to build a dynamic web application. Misko Hevery and Adam Abrons developed AngularJS in 2009, and now Google maintained it. The latest version of Angular is 1.7.8 on March 11, 2019. It is based on HTML and JavaScript and mostly used for [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2470"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2470"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2470/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2470"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2470"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2470"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2473,"date":"2020-07-21T11:47:43","date_gmt":"2020-07-21T11:47:43","guid":{"rendered":"http://react.foobrdigital.com/?p=2473"},"modified":"2020-07-21T11:47:43","modified_gmt":"2020-07-21T11:47:43","slug":"react-vs-react-native","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/react-vs-react-native/","title":{"rendered":"React vs React Native"},"content":{"rendered":"\n<h1>Difference between ReactJS and React Native</h1>\n\n\n\n<h2>ReactJS</h2>\n\n\n\n<p>ReactJS is an open-source JavaScript library used to build the user interface for Web Applications. It is responsible only for the view layer of the application. It provides developers to compose complex UIs from a small and isolated piece of code called &#8220;components.&#8221; ReactJS made of two parts first is components, that are the pieces that contain HTML code and what you want to see in the user interface, and the second one is HTML document where all your components will be rendered.</p>\n\n\n\n<p>Jordan Walke, who was a software engineer at Facebook, develops it. Initially, it was developed and maintained by Facebook and was later used in its products like WhatsApp &amp; Instagram. Facebook developed ReactJS in 2011 for the newsfeed section, but it was released to the public in May 2013.</p>\n\n\n\n<h3>Advantage of ReactJS</h3>\n\n\n\n<ol><li><strong>Easy to Learn and Use:</strong>&nbsp;ReactJS is much easier to learn and use. Any developer who comes from a JavaScript background can easily understand and start creating web apps using React.</li><li><strong>Creating Dynamic Web Applications Becomes Easier:</strong>&nbsp;To create a dynamic web application specifically with HTML was tricky, which requires complex coding, but React JS solved that issue and makes it easier. It provides less coding and gives more functionality.</li><li><strong>Reusable Components:</strong>&nbsp;A ReactJS web application is made up of multiple components, and each component has its logic and controls. These components can be reused wherever you need them. The reusable code helps to make your apps easier to develop and maintain.</li><li><strong>Performance Enhancement:</strong>&nbsp;ReactJS improves performance due to virtual DOM. The React Virtual DOM exists entirely in memory and is a representation of the web browser&#8217;s DOM. Due to this, when we write a React component, we did not write directly to the DOM. Instead, we are writing virtual components that react will turn into the DOM, leading to smoother and faster performance.</li><li><strong>The Support of Handy Tools:</strong>&nbsp;ReactJS support a handy set of tools which make the task of the developers understandable and easier. It also allows you to select particular components and examine and edit their current Props and State.</li><li><strong>Known to be SEO Friendly:</strong>&nbsp;Traditional JavaScript frameworks have an issue in dealing with SEO. ReactJS overcomes this problem, which helps developers to be easily navigated on various search engines. It is because ReactJS applications can run on the server, and the virtual DOM will be rendering and returning to the browser as a regular web page.</li><li><strong>The Benefit of Having JavaScript Library:</strong>&nbsp;Today, ReactJS gaining popularity among web developers. It is offering a very rich JavaScript library which provides more flexibility to the web developers to choose the way they want.</li><li><strong>Scope for Testing the Codes:</strong>&nbsp;ReactJS applications are easy to test. It offers a scope where the developer can test and debug their codes with the help of native tools.</li></ol>\n\n\n\n<h3>Disadvantage of ReactJS</h3>\n\n\n\n<ol><li><strong>The high pace of development:</strong>&nbsp;As we know, the frameworks continually changes so fast. The developers are not feeling comfortable to re-learn the new ways of doing things regularly. It may be hard for them to adopt all these changes with all the continuous updates.</li><li><strong>Poor Documentation:</strong>&nbsp;React technologies updating and accelerating so fast that there is no time to make proper documentation. To overcome this, developers write instructions on their own with the evolving of new releases and tools in their current projects.</li><li><strong>View Part:</strong>&nbsp;ReactJS covers only the UI Layers of the app and nothing else. So you still need to choose some other technologies to get a complete tooling set for development in the project.</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>React Native</h2>\n\n\n\n<p>React Native is an open-source JavaScript framework used for developing a mobile application for iOS Android, and Windows. It uses only JavaScript to build a cross-platform mobile app. React Native is same as React, but it uses native components instead of using web components as building blocks. It targets mobile platforms rather than the browser.</p>\n\n\n\n<p>Facebook develops the React Native in 2013 for its internal project Hackathon. In March 2015, Facebook announced that React Native is open and available on GitHub.</p>\n\n\n\n<p>React Native was initially developed for the iOS application. However, recently, it also supports the Android operating system.</p>\n\n\n\n<h3>Advantages of React Native</h3>\n\n\n\n<p>There are several advantages of React Native for building mobile applications. Some of them are given below:</p>\n\n\n\n<ol><li><strong>Cross-Platform Usage:</strong>&nbsp;It provides the facility of &#8220;Learn once write everywhere.&#8221; It works for both platform Android as well as iOS devices.</li><li><strong>Class Performance:</strong>&nbsp;The code written in React Native are compiled into native code, which enables it for both operating systems as well as it functions in the same way on both the platforms.</li><li><strong>JavaScript:</strong>&nbsp;JavaScript knowledge is used to build native mobile apps.</li><li><strong>Community:</strong>&nbsp;The large community of ReactJS and React Native helps us to find any answer we require.</li><li><strong>Hot Reloading:</strong>&nbsp;Making a few changes in the code of your app will be immediately visible during development. If the business logic is changed, its reflection is live reloaded on screen.</li><li><strong>Improving with Time:</strong>&nbsp;Some features of iOS and Android are still not supported, and the community is always inventing the best practices.</li><li><strong>Native Components:</strong>&nbsp;We will need to write some platform specific code if we want to create native functionality, which is not designed yet.</li><li><strong>Existence is Uncertain:</strong>&nbsp;As Facebook develop this framework, its presence is uncertain since it keeps all the rights to kill off the project anytime. As the popularity of React Native rises, it is unlikely to happen.</li></ol>\n\n\n\n<h3>Disadvantage of React Native</h3>\n\n\n\n<ol><li><strong>React Native is Still New and Immature:</strong>&nbsp;React Native is a newbie in Android and iOS programming languages and is still in its improvement stage, which can have a negative impact on the apps.</li><li><strong>Learning is Tough:</strong>&nbsp;React Native is not easy to learn, especially for a fresher in the app development field.</li><li><strong>It Lacks the Security Robustness:</strong>&nbsp;React Native is a JavaScript library and open-source framework, which creates a gap in the security robustness. When you are creating banking and financial apps where data is highly confidential, experts advice not to choose React Native.</li><li><strong>It Takes More Time to Initialize:</strong>&nbsp;React Native takes a lot of time for initializing the runtime even for the hi-tech gadgets and devices.</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>ReactJS Vs React Native</h2>\n\n\n\n<table class=\"alt\">\n        <tbody><tr>\n          <th>SN</th>\n          <th>ReactJS</th>\n          <th>React Native</th>\n        </tr>\n        <tr>\n          <td>1.</td>\n          <td>The ReactJS initial release was in 2013.</td>\n          <td>The React Native initial release was in 2015.</td>\n        </tr>\n        <tr>\n          <td>2.</td>\n          <td>It is used for developing web applications.</td>\n          <td>It is used for developing mobile applications.</td>\n        </tr>\n        <tr>\n          <td>3.</td>\n          <td>It can be executed on all platforms.</td>\n          <td>It is not platform independent. It takes more effort to be executed on all platforms.</td>\n        </tr>\n        <tr>\n          <td>4.</td>\n          <td>It uses a JavaScript library and CSS for animations.</td>\n          <td>It comes with built-in animation libraries.</td>\n        </tr>\n        <tr>\n          <td>5.</td>\n          <td>It uses React-router for navigating web pages.</td>\n          <td>It has built-in Navigator library for navigating mobile applications.</td>\n        </tr>\n        <tr>\n          <td>6.</td>\n          <td>It uses HTML tags.</td>\n          <td>It does not use HTML tags.</td>\n        </tr>\n        <tr>\n          <td>7.</td>\n          <td>It can use code components, which saves a lot of valuable time.</td>\n          <td>It can reuse React Native UI components &amp; modules which allow hybrid apps to render natively.</td>\n        </tr>\n        <tr>\n          <td>8.</td>\n          <td>It provides high security.</td>\n          <td>It provides low security in comparison to ReactJS.</td>\n        </tr>\n        <tr>\n          <td>9.</td>\n          <td>In this, the Virtual DOM renders the browser code.</td>\n          <td>In this, Native uses its API to render code for mobile applications.</td>\n        </tr>\n        </tbody></table>\n","protected":false},"excerpt":{"rendered":"<p>Difference between ReactJS and React Native ReactJS ReactJS is an open-source JavaScript library used to build the user interface for Web Applications. It is responsible only for the view layer of the application. It provides developers to compose complex UIs from a small and isolated piece of code called &#8220;components.&#8221; ReactJS made of two parts [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2473"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2473"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2473/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2473"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2473"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2473"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2472,"date":"2020-07-21T11:48:40","date_gmt":"2020-07-21T11:48:40","guid":{"rendered":"http://react.foobrdigital.com/?p=2472"},"modified":"2020-07-21T11:48:40","modified_gmt":"2020-07-21T11:48:40","slug":"react-vs-vue","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/react-vs-vue/","title":{"rendered":"React vs Vue"},"content":{"rendered":"\n<h1>React vs. Vue</h1>\n\n\n\n<p>React and Vue is the two most popular JavaScript libraries which are used to build thousands of websites today. Both React and Vue are very powerful frameworks with their own set of pros and cons. Which one you have to pick, depends on the business needs and use cases.</p>\n\n\n\n<p>Both React and Vue have a lot of common things like the component-based architecture, usage of virtual DOM, usage of props, chrome Dev tools for debugging, and many more. But, both have some significant differences, which are given below.</p>\n\n\n\n<table class=\"alt\">\n        <tbody><tr>\n          <th></th>\n          <th>React</th>\n          <th>Vue</th>\n        </tr>\n        <tr>\n          <td><strong>Definition</strong></td>\n          <td>React is a declarative, efficient, flexible, open-source JavaScript library for building reusable UI components.</td>\n          <td>Vue is an open-source JavaScript library for building reusable user interfaces and single-page applications.</td>\n        </tr>\n        <tr>\n          <td><strong>History</strong></td>\n          <td>It was created by Jordan Walke, a software engineer at Facebook. It was initially developed and maintained by Facebook and later used in its products like WhatsApp &amp; Instagram. Facebook developed React in 2011 for the newsfeed section, but it was released to the public on May 2013.</td>\n          <td>Vue was created by Evan You, a former employee of Google worked on many Angular projects. He wanted to make a better version of Angular, just extracting the part which he liked about Angular and making it lighter. The first release of Vue was introduced in February 2014.</td>\n        </tr>\n        <tr>\n          <td><strong>Learning Curve</strong></td>\n          <td>React is not a complete framework, and the more advanced framework must be looked for the use of third-party libraries. It makes the learning of the core framework not so easy. It adds some complexity to the learning curve as it differs based on the choices you take with additional functionality.</td>\n          <td>Vue provides higher customizability, which makes it easier to learn than Angular or React. Vue shares some concepts with Angular and React in their functionality. Hence, the transition to Vue from Angular and React is an easy option. Also, the official documentation is well written and covers everything the developer needs to build a Vue app.</td>\n        </tr>\n        <tr>\n          <td><strong>Preferred Language</strong></td>\n          <td>JavaScript/JavaScript XML</td>\n          <td>HTML/JavaScript</td>\n        </tr>\n        <tr>\n          <td><strong>Size</strong></td>\n          <td>The size of the React library is 100 kilobytes (approx.).</td>\n          <td>The size of the Vue library is 60 kilobytes (approx.).</td>\n        </tr>\n        <tr>\n          <td><strong>Performance</strong></td>\n          <td>Its performance is slow as compared to Vue.</td>\n          <td>Its performance is fast as compared to React.</td>\n        </tr>\n        <tr>\n          <td><strong>Flexibility</strong></td>\n          <td>React provides great flexibility to support third-party libraries.</td>\n          <td>Vue provides limited flexibility as compared to React.</td>\n        </tr>\n        <tr>\n          <td><strong>Coding Style</strong></td>\n          <td>React uses JSX for writing JavaScript Expression instead of regular JavaScript. JSX is similar to HTML code within the JavaScript expressions. React takes everything as Component, and each component has its own lifecycle methods.</td>\n          <td>Vue coding style is little similar to Angular. It separates HTML, JS, and CSS as like web developers have been used to the web development scenario for years. But, it also allows using JSX if you prefer. Vue&#8217;s take of the component lifecycle more intuitive than React&#8217;s.</td>\n        </tr>\n        <tr>\n          <td><strong>Data Binding</strong></td>\n          <td>React supports one-way data binding. The one-way data binding refers to a single source of truth. React flows in a single direction, and only the model can change the app&#8217;s state.</td>\n          <td>Vue supports both one-way and two-way data binding. The two-way data binding is a mechanism where UI fields are bound to model dynamically. If the UI components change, model data is also changed accordingly.</td>\n        </tr>\n        <tr>\n          <td><strong>Tooling</strong></td>\n          <td>React has great tooling support. It uses third-party CLI tool (create-react-app), which helps to create new apps and components in React Project. It has excellent support for the major IDEs.</td>\n          <td>Vue provides limited tooling support as compared to React. It has a Vue CLI tool, which is similar to the create-react-app tool. It gives supports for major IDEs but not as good as React. </td>\n        </tr>\n        <tr>\n          <td><strong>Current Version</strong></td>\n          <td>React 16.8.6 on March 27, 2019</td>\n          <td>Vue 2.6.10 on March 20, 2019.</td>\n        </tr>\n        <tr>\n          <td><strong>Long Term Support</strong></td>\n          <td>It is suitable for long term supports.</td>\n          <td>It is not suitable for long term support.</td>\n        </tr>\n        </tbody></table>\n","protected":false},"excerpt":{"rendered":"<p>React vs. Vue React and Vue is the two most popular JavaScript libraries which are used to build thousands of websites today. Both React and Vue are very powerful frameworks with their own set of pros and cons. Which one you have to pick, depends on the business needs and use cases. Both React and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2472"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2472"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2472/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2472"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2472"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2472"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]