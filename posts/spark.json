[{"id":80,"date":"2020-06-30T10:29:38","date_gmt":"2020-06-30T10:29:38","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=80"},"modified":"2020-12-16T17:07:28","modified_gmt":"2020-12-16T17:07:28","slug":"introduction-2-3","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-2-3/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>Industries are using Hadoop extensively to analyze their data sets. The reason is that Hadoop framework is based on a simple programming model (MapReduce) and it enables a computing solution that is scalable, flexible, fault-tolerant and cost effective. Here, the main concern is to maintain speed in processing large datasets in terms of waiting time between queries and waiting time to run the program.</p>\n\n\n\n<p>Spark was introduced by Apache Software Foundation for speeding up the Hadoop computational computing software process.</p>\n\n\n\n<p>As against a common belief,&nbsp;<strong>Spark is not a modified version of Hadoop</strong>&nbsp;and is not, really, dependent on Hadoop because it has its own cluster management. Hadoop is just one of the ways to implement Spark.</p>\n\n\n\n<p>Spark uses Hadoop in two ways – one is&nbsp;<strong>storage</strong>&nbsp;and second is&nbsp;<strong>processing</strong>. Since Spark has its own cluster management computation, it uses Hadoop for storage purpose only.</p>\n\n\n\n<h2>Apache Spark</h2>\n\n\n\n<p>Apache Spark is a lightning-fast cluster computing technology, designed for fast computation. It is based on Hadoop MapReduce and it extends the MapReduce model to efficiently use it for more types of computations, which includes interactive queries and stream processing. The main feature of Spark is its&nbsp;<strong>in-memory cluster computing</strong>&nbsp;that increases the processing speed of an application.</p>\n\n\n\n<p>Spark is designed to cover a wide range of workloads such as batch applications, iterative algorithms, interactive queries and streaming. Apart from supporting all these workload in a respective system, it reduces the management burden of maintaining separate tools.</p>\n\n\n\n<h2>Evolution of Apache Spark</h2>\n\n\n\n<p>Spark is one of Hadoop’s sub project developed in 2009 in UC Berkeley’s AMPLab by Matei Zaharia. It was Open Sourced in 2010 under a BSD license. It was donated to Apache software foundation in 2013, and now Apache Spark has become a top level Apache project from Feb-2014.</p>\n\n\n\n<h2>Features of Apache Spark</h2>\n\n\n\n<p>Apache Spark has following features.</p>\n\n\n\n<ul><li><strong>Speed</strong>&nbsp;− Spark helps to run an application in Hadoop cluster, up to 100 times faster in memory, and 10 times faster when running on disk. This is possible by reducing number of read/write operations to disk. It stores the intermediate processing data in memory.</li><li><strong>Supports multiple languages</strong>&nbsp;− Spark provides built-in APIs in Java, Scala, or Python. Therefore, you can write applications in different languages. Spark comes up with 80 high-level operators for interactive querying.</li><li><strong>Advanced Analytics</strong>&nbsp;− Spark not only supports ‘Map’ and ‘reduce’. It also supports SQL queries, Streaming data, Machine learning (ML), and Graph algorithms.</li></ul>\n\n\n\n<h2>Spark Built on Hadoop</h2>\n\n\n\n<p>The following diagram shows three ways of how Spark can be built with Hadoop components.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/apache_spark/images/spark_built_on_hadoop.jpg\" alt=\"Spark Built on Hadoop\"/></figure>\n\n\n\n<p>There are three ways of Spark deployment as explained below.</p>\n\n\n\n<ul><li><strong>Standalone</strong>&nbsp;− Spark Standalone deployment means Spark occupies the place on top of HDFS(Hadoop Distributed File System) and space is allocated for HDFS, explicitly. Here, Spark and MapReduce will run side by side to cover all spark jobs on cluster.</li><li><strong>Hadoop Yarn</strong>&nbsp;− Hadoop Yarn deployment means, simply, spark runs on Yarn without any pre-installation or root access required. It helps to integrate Spark into Hadoop ecosystem or Hadoop stack. It allows other components to run on top of stack.</li><li><strong>Spark in MapReduce (SIMR)</strong>&nbsp;− Spark in MapReduce is used to launch spark job in addition to standalone deployment. With SIMR, user can start Spark and uses its shell without any administrative access.</li></ul>\n\n\n\n<h2>Components of Spark</h2>\n\n\n\n<p>The following illustration depicts the different components of Spark.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/apache_spark/images/components_of_spark.jpg\" alt=\"Components of Spark\"/></figure>\n\n\n\n<h3>Apache Spark Core</h3>\n\n\n\n<p>Spark Core is the underlying general execution engine for spark platform that all other functionality is built upon. It provides In-Memory computing and referencing datasets in external storage systems.</p>\n\n\n\n<h3>Spark SQL</h3>\n\n\n\n<p>Spark SQL is a component on top of Spark Core that introduces a new data abstraction called SchemaRDD, which provides support for structured and semi-structured data.</p>\n\n\n\n<h3>Spark Streaming</h3>\n\n\n\n<p>Spark Streaming leverages Spark Core&#8217;s fast scheduling capability to perform streaming analytics. It ingests data in mini-batches and performs RDD (Resilient Distributed Datasets) transformations on those mini-batches of data.</p>\n\n\n\n<h3>MLlib (Machine Learning Library)</h3>\n\n\n\n<p>MLlib is a distributed machine learning framework above Spark because of the distributed memory-based Spark architecture. It is, according to benchmarks, done by the MLlib developers against the Alternating Least Squares (ALS) implementations. Spark MLlib is nine times as fast as the Hadoop disk-based version of&nbsp;<strong>Apache Mahout</strong>&nbsp;(before Mahout gained a Spark interface).</p>\n\n\n\n<h3>GraphX</h3>\n\n\n\n<p>GraphX is a distributed graph-processing framework on top of Spark. It provides an API for expressing graph computation that can model the user-defined graphs by using Pregel abstraction API. It also provides an optimized runtime for this abstraction.</p>\n","protected":false},"excerpt":{"rendered":"<p>Industries are using Hadoop extensively to analyze their data sets. The reason is that Hadoop framework is based on a simple programming model (MapReduce) and it enables a computing solution that is scalable, flexible, fault-tolerant and cost effective. Here, the main concern is to maintain speed in processing large datasets in terms of waiting time [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[102,175],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/80"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=80"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/80/revisions"}],"predecessor-version":[{"id":4252,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/80/revisions/4252"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=80"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=80"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=80"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":78,"date":"2020-06-30T10:30:16","date_gmt":"2020-06-30T10:30:16","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=78"},"modified":"2020-12-16T17:07:27","modified_gmt":"2020-12-16T17:07:27","slug":"rdd","status":"publish","type":"post","link":"https://python3.foobrdigital.com/rdd/","title":{"rendered":"RDD"},"content":{"rendered":"\n<h2>Resilient Distributed Datasets</h2>\n\n\n\n<p>Resilient Distributed Datasets (RDD) is a fundamental data structure of Spark. It is an immutable distributed collection of objects. Each dataset in RDD is divided into logical partitions, which may be computed on different nodes of the cluster. RDDs can contain any type of Python, Java, or Scala objects, including user-defined classes.</p>\n\n\n\n<p>Formally, an RDD is a read-only, partitioned collection of records. RDDs can be created through deterministic operations on either data on stable storage or other RDDs. RDD is a fault-tolerant collection of elements that can be operated on in parallel.</p>\n\n\n\n<p>There are two ways to create RDDs −&nbsp;<strong>parallelizing</strong>&nbsp;an existing collection in your driver program, or&nbsp;<strong>referencing a dataset</strong>&nbsp;in an external storage system, such as a shared file system, HDFS, HBase, or any data source offering a Hadoop Input Format.</p>\n\n\n\n<p>Spark makes use of the concept of RDD to achieve faster and efficient MapReduce operations. Let us first discuss how MapReduce operations take place and why they are not so efficient.</p>\n\n\n\n<h2>Data Sharing is Slow in MapReduce</h2>\n\n\n\n<p>MapReduce is widely adopted for processing and generating large datasets with a parallel, distributed algorithm on a cluster. It allows users to write parallel computations, using a set of high-level operators, without having to worry about work distribution and fault tolerance.</p>\n\n\n\n<p>Unfortunately, in most current frameworks, the only way to reuse data between computations (Ex − between two MapReduce jobs) is to write it to an external stable storage system (Ex − HDFS). Although this framework provides numerous abstractions for accessing a cluster’s computational resources, users still want more.</p>\n\n\n\n<p>Both&nbsp;<strong>Iterative</strong>&nbsp;and&nbsp;<strong>Interactive</strong>&nbsp;applications require faster data sharing across parallel jobs. Data sharing is slow in MapReduce due to&nbsp;<strong>replication, serialization</strong>, and&nbsp;<strong>disk IO</strong>. Regarding storage system, most of the Hadoop applications, they spend more than 90% of the time doing HDFS read-write operations.</p>\n\n\n\n<h2>Iterative Operations on MapReduce</h2>\n\n\n\n<p>Reuse intermediate results across multiple computations in multi-stage applications. The following illustration explains how the current framework works, while doing the iterative operations on MapReduce. This incurs substantial overheads due to data replication, disk I/O, and serialization, which makes the system slow.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/apache_spark/images/iterative_operations_on_mapreduce.jpg\" alt=\"Iterative Operations on MapReduce\"/></figure>\n\n\n\n<h2>Interactive Operations on MapReduce</h2>\n\n\n\n<p>User runs ad-hoc queries on the same subset of data. Each query will do the disk I/O on the stable storage, which can dominate application execution time.</p>\n\n\n\n<p>The following illustration explains how the current framework works while doing the interactive queries on MapReduce.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/apache_spark/images/interactive_operations_on_mapreduce.jpg\" alt=\"Interactive Operations on MapReduce\"/></figure>\n\n\n\n<h2>Data Sharing using Spark RDD</h2>\n\n\n\n<p>Data sharing is slow in MapReduce due to&nbsp;<strong>replication, serialization</strong>, and&nbsp;<strong>disk IO</strong>. Most of the Hadoop applications, they spend more than 90% of the time doing HDFS read-write operations.</p>\n\n\n\n<p>Recognizing this problem, researchers developed a specialized framework called Apache Spark. The key idea of spark is&nbsp;<strong>R</strong>esilient&nbsp;<strong>D</strong>istributed&nbsp;<strong>D</strong>atasets (RDD); it supports in-memory processing computation. This means, it stores the state of memory as an object across the jobs and the object is sharable between those jobs. Data sharing in memory is 10 to 100 times faster than network and Disk.</p>\n\n\n\n<p>Let us now try to find out how iterative and interactive operations take place in Spark RDD.</p>\n\n\n\n<h2>Iterative Operations on Spark RDD</h2>\n\n\n\n<p>The illustration given below shows the iterative operations on Spark RDD. It will store intermediate results in a distributed memory instead of Stable storage (Disk) and make the system faster.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− If the Distributed memory (RAM) is not sufficient to store intermediate results (State of the JOB), then it will store those results on the disk.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/apache_spark/images/iterative_operations_on_spark_rdd.jpg\" alt=\"Iterative Operations on Spark RDD\"/></figure>\n\n\n\n<h2>Interactive Operations on Spark RDD</h2>\n\n\n\n<p>This illustration shows interactive operations on Spark RDD. If different queries are run on the same set of data repeatedly, this particular data can be kept in memory for better execution times.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/apache_spark/images/interactive_operations_on_spark_rdd.jpg\" alt=\"Interactive Operations on Spark RDD\"/></figure>\n\n\n\n<p>By default, each transformed RDD may be recomputed each time you run an action on it. However, you may also&nbsp;<strong>persist</strong>&nbsp;an RDD in memory, in which case Spark will keep the elements around on the cluster for much faster access, the next time you query it. There is also support for persisting RDDs on disk, or replicated across multiple nodes.</p>\n","protected":false},"excerpt":{"rendered":"<p>Resilient Distributed Datasets Resilient Distributed Datasets (RDD) is a fundamental data structure of Spark. It is an immutable distributed collection of objects. Each dataset in RDD is divided into logical partitions, which may be computed on different nodes of the cluster. RDDs can contain any type of Python, Java, or Scala objects, including user-defined classes. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[102,175],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/78"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=78"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/78/revisions"}],"predecessor-version":[{"id":4251,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/78/revisions/4251"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=78"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=78"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=78"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3877,"date":"2020-06-30T10:33:11","date_gmt":"2020-06-30T10:33:11","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=77"},"modified":"2020-12-16T17:07:27","modified_gmt":"2020-12-16T17:07:27","slug":"installation-3-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/installation-3-2/","title":{"rendered":"Installation"},"content":{"rendered":"\n<p>Spark is Hadoop’s sub-project. Therefore, it is better to install Spark into a Linux based system. The following steps show how to install Apache Spark.</p>\n\n\n\n<h2>Step 1: Verifying Java Installation</h2>\n\n\n\n<p>Java installation is one of the mandatory things in installing Spark. Try the following command to verify the JAVA version.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$java -version \n</code></pre>\n\n\n\n<p>If Java is already, installed on your system, you get to see the following response −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java version \"1.7.0_71\" \nJava(TM) SE Runtime Environment (build 1.7.0_71-b13) \nJava HotSpot(TM) Client VM (build 25.0-b02, mixed mode)</code></pre>\n\n\n\n<p>In case you do not have Java installed on your system, then Install Java before proceeding to next step.</p>\n\n\n\n<h2>Step 2: Verifying Scala installation</h2>\n\n\n\n<p>You should Scala language to implement Spark. So let us verify Scala installation using following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$scala -version\n</code></pre>\n\n\n\n<p>If Scala is already installed on your system, you get to see the following response −</p>\n\n\n\n<p>In case you don’t have Scala installed on your system, then proceed to next step for Scala installation.</p>\n\n\n\n<h2>Step 3: Downloading Scala</h2>\n\n\n\n<p>Download the latest version of Scala by visit the following link&nbsp;Download Scala. For this tutorial, we are using scala-2.11.6 version. After downloading, you will find the Scala tar file in the download folder.</p>\n\n\n\n<h2>Step 4: Installing Scala</h2>\n\n\n\n<p>Follow the below given steps for installing Scala.</p>\n\n\n\n<h3>Extract the Scala tar file</h3>\n\n\n\n<p>Type the following command for extracting the Scala tar file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ tar xvf scala-2.11.6.tgz\n</code></pre>\n\n\n\n<h3>Move Scala software files</h3>\n\n\n\n<p>Use the following commands for moving the Scala software files, to respective directory&nbsp;<strong>(/usr/local/scala)</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ su – \nPassword: \n# cd /home/Hadoop/Downloads/ \n# mv scala-2.11.6 /usr/local/scala \n# exit </code></pre>\n\n\n\n<h3>Set PATH for Scala</h3>\n\n\n\n<p>Use the following command for setting PATH for Scala.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ export PATH = $PATH:/usr/local/scala/bin\n</code></pre>\n\n\n\n<h3>Verifying Scala Installation</h3>\n\n\n\n<p>After installation, it is better to verify it. Use the following command for verifying Scala installation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$scala -version\n</code></pre>\n\n\n\n<p>If Scala is already installed on your system, you get to see the following response −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Scala code runner version 2.11.6 -- Copyright 2002-2013, LAMP/EPFL\n</code></pre>\n\n\n\n<h2>Step 5: Downloading Apache Spark</h2>\n\n\n\n<p>Download the latest version of Spark by visiting the following link&nbsp;Download Spark. For this tutorial, we are using&nbsp;<strong>spark-1.3.1-bin-hadoop2.6</strong>&nbsp;version. After downloading it, you will find the Spark tar file in the download folder.</p>\n\n\n\n<h2>Step 6: Installing Spark</h2>\n\n\n\n<p>Follow the steps given below for installing Spark.</p>\n\n\n\n<h3>Extracting Spark tar</h3>\n\n\n\n<p>The following command for extracting the spark tar file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ tar xvf spark-1.3.1-bin-hadoop2.6.tgz \n</code></pre>\n\n\n\n<h3>Moving Spark software files</h3>\n\n\n\n<p>The following commands for moving the Spark software files to respective directory&nbsp;<strong>(/usr/local/spark)</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ su – \nPassword:  \n\n# cd /home/Hadoop/Downloads/ \n# mv spark-1.3.1-bin-hadoop2.6 /usr/local/spark \n# exit </code></pre>\n\n\n\n<h3>Setting up the environment for Spark</h3>\n\n\n\n<p>Add the following line to ~<strong>/.bashrc</strong> file. It means adding the location, where the spark software file are located to the PATH variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export PATH=$PATH:/usr/local/spark/bin</code></pre>\n\n\n\n<p>Use the following command for sourcing the ~/.bashrc file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ source ~/.bashrc\n</code></pre>\n\n\n\n<h2>Step 7: Verifying the Spark Installation</h2>\n\n\n\n<p>Write the following command for opening Spark shell.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$spark-shell\n</code></pre>\n\n\n\n<p>If spark is installed successfully then you will find the following output.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Spark assembly has been built with Hive, including Datanucleus jars on classpath \nUsing Spark's default log4j profile: org/apache/spark/log4j-defaults.properties \n15/06/04 15:25:22 INFO SecurityManager: Changing view acls to: hadoop \n15/06/04 15:25:22 INFO SecurityManager: Changing modify acls to: hadoop\n15/06/04 15:25:22 INFO SecurityManager: SecurityManager: authentication disabled;\n   ui acls disabled; users with view permissions: Set(hadoop); users with modify permissions: Set(hadoop) \n15/06/04 15:25:22 INFO HttpServer: Starting HTTP Server \n15/06/04 15:25:23 INFO Utils: Successfully started service 'HTTP class server' on port 43292. \nWelcome to \n      ____              __ \n     / __/__  ___ _____/ /__ \n    _\\ \\/ _ \\/ _ `/ __/  '_/ \n   /___/ .__/\\_,_/_/ /_/\\_\\   version 1.4.0 \n      /_/  \n\t\t\nUsing Scala version 2.10.4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_71) \nType in expressions to have them evaluated. \nSpark context available as sc  \nscala> </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Spark is Hadoop’s sub-project. Therefore, it is better to install Spark into a Linux based system. The following steps show how to install Apache Spark. Step 1: Verifying Java Installation Java installation is one of the mandatory things in installing Spark. Try the following command to verify the JAVA version. If Java is already, installed [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[102,175],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3877"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3877"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3877/revisions"}],"predecessor-version":[{"id":4250,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3877/revisions/4250"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3877"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3877"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3877"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":102,"date":"2020-06-30T10:39:00","date_gmt":"2020-06-30T10:39:00","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=102"},"modified":"2020-12-16T17:07:27","modified_gmt":"2020-12-16T17:07:27","slug":"core-programming","status":"publish","type":"post","link":"https://python3.foobrdigital.com/core-programming/","title":{"rendered":"Core Programming"},"content":{"rendered":"\n<p>Spark Core is the base of the whole project. It provides distributed task dispatching, scheduling, and basic I/O functionalities. Spark uses a specialized fundamental data structure known as RDD (Resilient Distributed Datasets) that is a logical collection of data partitioned across machines. RDDs can be created in two ways; one is by referencing datasets in external storage systems and second is by applying transformations (e.g. map, filter, reducer, join) on existing RDDs.</p>\n\n\n\n<p>The RDD abstraction is exposed through a language-integrated API. This simplifies programming complexity because the way applications manipulate RDDs is similar to manipulating local collections of data.</p>\n\n\n\n<h2>Spark Shell</h2>\n\n\n\n<p>Spark provides an interactive shell − a powerful tool to analyze data interactively. It is available in either Scala or Python language. Spark’s primary abstraction is a distributed collection of items called a Resilient Distributed Dataset (RDD). RDDs can be created from Hadoop Input Formats (such as HDFS files) or by transforming other RDDs.</p>\n\n\n\n<h3>Open Spark Shell</h3>\n\n\n\n<p>The following command is used to open Spark shell.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ spark-shell\n</code></pre>\n\n\n\n<h3>Create simple RDD</h3>\n\n\n\n<p>Let us create a simple RDD from the text file. Use the following command to create a simple RDD.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> val inputfile = sc.textFile(“input.txt”)</code></pre>\n\n\n\n<p>The output for the above command is</p>\n\n\n\n<pre class=\"wp-block-preformatted\">inputfile: org.apache.spark.rdd.RDD[String] = input.txt MappedRDD[1] at textFile at &lt;console&gt;:12\n</pre>\n\n\n\n<p>The Spark RDD API introduces few&nbsp;<strong>Transformations</strong>&nbsp;and few&nbsp;<strong>Actions</strong>&nbsp;to manipulate RDD.</p>\n\n\n\n<h2>RDD Transformations</h2>\n\n\n\n<p>RDD transformations returns pointer to new RDD and allows you to create dependencies between RDDs. Each RDD in dependency chain (String of Dependencies) has a function for calculating its data and has a pointer (dependency) to its parent RDD.</p>\n\n\n\n<p>Spark is lazy, so nothing will be executed unless you call some transformation or action that will trigger job creation and execution. Look at the following snippet of the word-count example.</p>\n\n\n\n<p>Therefore, RDD transformation is not a set of data but is a step in a program (might be the only step) telling Spark how to get data and what to do with it.</p>\n\n\n\n<p>Given below is a list of RDD transformations.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Transformations &amp; Meaning</th></tr><tr><td>1</td><td><strong>map(func)</strong>Returns a new distributed dataset, formed by passing each element of the source through a function&nbsp;<strong>func</strong>.</td></tr><tr><td>2</td><td><strong>filter(func)</strong>Returns a new dataset formed by selecting those elements of the source on which&nbsp;<strong>func</strong>&nbsp;returns true.</td></tr><tr><td>3</td><td><strong>flatMap(func)</strong>Similar to map, but each input item can be mapped to 0 or more output items (so&nbsp;<em>func</em>&nbsp;should return a Seq rather than a single item).</td></tr><tr><td>4</td><td><strong>mapPartitions(func)</strong>Similar to map, but runs separately on each partition (block) of the RDD, so&nbsp;<strong>func</strong>must be of type Iterator&lt;T&gt; ⇒ Iterator&lt;U&gt; when running on an RDD of type T.</td></tr><tr><td>5</td><td><strong>mapPartitionsWithIndex(func)</strong>Similar to map Partitions, but also provides&nbsp;<strong>func</strong>&nbsp;with an integer value representing the index of the partition, so&nbsp;<strong>func</strong>&nbsp;must be of type (Int, Iterator&lt;T&gt;) ⇒ Iterator&lt;U&gt; when running on an RDD of type T.</td></tr><tr><td>6</td><td><strong>sample(withReplacement, fraction, seed)</strong>Sample a&nbsp;<strong>fraction</strong>&nbsp;of the data, with or without replacement, using a given random number generator seed.</td></tr><tr><td>7</td><td><strong>union(otherDataset)</strong>Returns a new dataset that contains the union of the elements in the source dataset and the argument.</td></tr><tr><td>8</td><td><strong>intersection(otherDataset)</strong>Returns a new RDD that contains the intersection of elements in the source dataset and the argument.</td></tr><tr><td>9</td><td><strong>distinct([numTasks])</strong>Returns a new dataset that contains the distinct elements of the source dataset.</td></tr><tr><td>10</td><td><strong>groupByKey([numTasks])</strong>When called on a dataset of (K, V) pairs, returns a dataset of (K, Iterable&lt;V&gt;) pairs.<strong>Note</strong>&nbsp;− If you are grouping in order to perform an aggregation (such as a sum or average) over each key, using reduceByKey or aggregateByKey will yield much better performance.</td></tr><tr><td>11</td><td><strong>reduceByKey(func, [numTasks])</strong>When called on a dataset of (K, V) pairs, returns a dataset of (K, V) pairs where the values for each key are aggregated using the given reduce function&nbsp;<em>func</em>, which must be of type (V, V) ⇒ V. Like in groupByKey, the number of reduce tasks is configurable through an optional second argument.</td></tr><tr><td>12</td><td><strong>aggregateByKey(zeroValue)(seqOp, combOp, [numTasks])</strong>When called on a dataset of (K, V) pairs, returns a dataset of (K, U) pairs where the values for each key are aggregated using the given combine functions and a neutral &#8220;zero&#8221; value. Allows an aggregated value type that is different from the input value type, while avoiding unnecessary allocations. Like in groupByKey, the number of reduce tasks is configurable through an optional second argument.</td></tr><tr><td>13</td><td><strong>sortByKey([ascending], [numTasks])</strong>When called on a dataset of (K, V) pairs where K implements Ordered, returns a dataset of (K, V) pairs sorted by keys in ascending or descending order, as specified in the Boolean ascending argument.</td></tr><tr><td>14</td><td><strong>join(otherDataset, [numTasks])</strong>When called on datasets of type (K, V) and (K, W), returns a dataset of (K, (V, W)) pairs with all pairs of elements for each key. Outer joins are supported through leftOuterJoin, rightOuterJoin, and fullOuterJoin.</td></tr><tr><td>15</td><td><strong>cogroup(otherDataset, [numTasks])</strong>When called on datasets of type (K, V) and (K, W), returns a dataset of (K, (Iterable&lt;V&gt;, Iterable&lt;W&gt;)) tuples. This operation is also called group With.</td></tr><tr><td>16</td><td><strong>cartesian(otherDataset)</strong>When called on datasets of types T and U, returns a dataset of (T, U) pairs (all pairs of elements).</td></tr><tr><td>17</td><td><strong>pipe(command, [envVars])</strong>Pipe each partition of the RDD through a shell command, e.g. a Perl or bash script. RDD elements are written to the process&#8217;s stdin and lines output to its stdout are returned as an RDD of strings.</td></tr><tr><td>18</td><td><strong>coalesce(numPartitions)</strong>Decrease the number of partitions in the RDD to numPartitions. Useful for running operations more efficiently after filtering down a large dataset.</td></tr><tr><td>19</td><td><strong>repartition(numPartitions)</strong>Reshuffle the data in the RDD randomly to create either more or fewer partitions and balance it across them. This always shuffles all data over the network.</td></tr><tr><td>20</td><td><strong>repartitionAndSortWithinPartitions(partitioner)</strong>Repartition the RDD according to the given partitioner and, within each resulting partition, sort records by their keys. This is more efficient than calling repartition and then sorting within each partition because it can push the sorting down into the shuffle machinery.</td></tr></tbody></table></figure>\n\n\n\n<h2>Actions</h2>\n\n\n\n<p>The following table gives a list of Actions, which return values.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Action &amp; Meaning</th></tr><tr><td>1</td><td><strong>reduce(func)</strong>Aggregate the elements of the dataset using a function&nbsp;<strong>func</strong>&nbsp;(which takes two arguments and returns one). The function should be commutative and associative so that it can be computed correctly in parallel.</td></tr><tr><td>2</td><td><strong>collect()</strong>Returns all the elements of the dataset as an array at the driver program. This is usually useful after a filter or other operation that returns a sufficiently small subset of the data.</td></tr><tr><td>3</td><td><strong>count()</strong>Returns the number of elements in the dataset.</td></tr><tr><td>4</td><td><strong>first()</strong>Returns the first element of the dataset (similar to take (1)).</td></tr><tr><td>5</td><td><strong>take(n)</strong>Returns an array with the first&nbsp;<strong>n</strong>&nbsp;elements of the dataset.</td></tr><tr><td>6</td><td><strong>takeSample (withReplacement,num, [seed])</strong>Returns an array with a random sample of&nbsp;<strong>num</strong>&nbsp;elements of the dataset, with or without replacement, optionally pre-specifying a random number generator seed.</td></tr><tr><td>7</td><td><strong>takeOrdered(n, [ordering])</strong>Returns the first&nbsp;<strong>n</strong>&nbsp;elements of the RDD using either their natural order or a custom comparator.</td></tr><tr><td>8</td><td><strong>saveAsTextFile(path)</strong>Writes the elements of the dataset as a text file (or set of text files) in a given directory in the local filesystem, HDFS or any other Hadoop-supported file system. Spark calls toString on each element to convert it to a line of text in the file.</td></tr><tr><td>9</td><td><strong>saveAsSequenceFile(path) (Java and Scala)</strong>Writes the elements of the dataset as a Hadoop SequenceFile in a given path in the local filesystem, HDFS or any other Hadoop-supported file system. This is available on RDDs of key-value pairs that implement Hadoop&#8217;s Writable interface. In Scala, it is also available on types that are implicitly convertible to Writable (Spark includes conversions for basic types like Int, Double, String, etc).</td></tr><tr><td>10</td><td><strong>saveAsObjectFile(path) (Java and Scala)</strong>Writes the elements of the dataset in a simple format using Java serialization, which can then be loaded using SparkContext.objectFile().</td></tr><tr><td>11</td><td><strong>countByKey()</strong>Only available on RDDs of type (K, V). Returns a hashmap of (K, Int) pairs with the count of each key.</td></tr><tr><td>12</td><td><strong>foreach(func)</strong>Runs a function&nbsp;<strong>func</strong>&nbsp;on each element of the dataset. This is usually, done for side effects such as updating an Accumulator or interacting with external storage systems.<strong>Note</strong>&nbsp;− modifying variables other than Accumulators outside of the foreach() may result in undefined behavior. See Understanding closures for more details.</td></tr></tbody></table></figure>\n\n\n\n<h2>Programming with RDD</h2>\n\n\n\n<p>Let us see the implementations of few RDD transformations and actions in RDD programming with the help of an example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Consider a word count example − It counts each word appearing in a document. Consider the following text as an input and is saved as an&nbsp;<strong>input.txt</strong>&nbsp;file in a home directory.</p>\n\n\n\n<p><strong>input.txt</strong>&nbsp;− input file.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">people are not as beautiful as they look, \nas they walk or as they talk.\nthey are only as beautiful  as they love, \nas they care as they share.\n</pre>\n\n\n\n<p>Follow the procedure given below to execute the given example.</p>\n\n\n\n<h3>Open Spark-Shell</h3>\n\n\n\n<p>The following command is used to open spark shell. Generally, spark is built using Scala. Therefore, a Spark program runs on Scala environment.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ spark-shell\n</code></pre>\n\n\n\n<p>If Spark shell opens successfully then you will find the following output. Look at the last line of the output “Spark context available as sc” means the Spark container is automatically created spark context object with the name <strong>sc</strong>. Before starting the first step of a program, the SparkContext object should be created.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Spark assembly has been built with Hive, including Datanucleus jars on classpath \nUsing Spark's default log4j profile: org/apache/spark/log4j-defaults.properties \n15/06/04 15:25:22 INFO SecurityManager: Changing view acls to: hadoop \n15/06/04 15:25:22 INFO SecurityManager: Changing modify acls to: hadoop \n15/06/04 15:25:22 INFO SecurityManager: SecurityManager: authentication disabled;\n   ui acls disabled; users with view permissions: Set(hadoop); users with modify permissions: Set(hadoop) \n15/06/04 15:25:22 INFO HttpServer: Starting HTTP Server \n15/06/04 15:25:23 INFO Utils: Successfully started service 'HTTP class server' on port 43292. \nWelcome to \n      ____              __ \n     / __/__  ___ _____/ /__ \n    _\\ \\/ _ \\/ _ `/ __/  '_/ \n   /___/ .__/\\_,_/_/ /_/\\_\\   version 1.4.0 \n      /_/  \n\t\t\nUsing Scala version 2.10.4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_71) \nType in expressions to have them evaluated. \nSpark context available as sc \nscala></code></pre>\n\n\n\n<h3>Create an RDD</h3>\n\n\n\n<p>First, we have to read the input file using Spark-Scala API and create an RDD.</p>\n\n\n\n<p>The following command is used for reading a file from given location. Here, new RDD is created with the name of inputfile. The String which is given as an argument in the textFile(“”) method is absolute path for the input file name. However, if only the file name is given, then it means that the input file is in the current location.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> val inputfile = sc.textFile(\"input.txt\")\n</code></pre>\n\n\n\n<h3>Execute Word count Transformation</h3>\n\n\n\n<p>Our aim is to count the words in a file. Create a flat map for splitting each line into words (<strong>flatMap(line ⇒ line.split(“ ”)</strong>).</p>\n\n\n\n<p>Next, read each word as a key with a value&nbsp;<strong>‘1’</strong>&nbsp;(&lt;key, value&gt; = &lt;word,1&gt;)using map function (<strong>map(word ⇒ (word, 1)</strong>).</p>\n\n\n\n<p>Finally, reduce those keys by adding values of similar keys (<strong>reduceByKey(_+_)</strong>).</p>\n\n\n\n<p>The following command is used for executing word count logic. After executing this, you will not find any output because this is not an action, this is a transformation; pointing a new RDD or tell spark to what to do with the given data)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> val counts = inputfile.flatMap(line => line.split(\" \")).map(word => (word, 1)).reduceByKey(_+_);</code></pre>\n\n\n\n<h3>Current RDD</h3>\n\n\n\n<p>While working with the RDD, if you want to know about current RDD, then use the following command. It will show you the description about current RDD and its dependencies for debugging.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> counts.toDebugString\n</code></pre>\n\n\n\n<h3>Caching the Transformations</h3>\n\n\n\n<p>You can mark an RDD to be persisted using the persist() or cache() methods on it. The first time it is computed in an action, it will be kept in memory on the nodes. Use the following command to store the intermediate transformations in memory.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> counts.cache()\n</code></pre>\n\n\n\n<h3>Applying the Action</h3>\n\n\n\n<p>Applying an action, like store all the transformations, results into a text file. The String argument for saveAsTextFile(“ ”) method is the absolute path of output folder. Try the following command to save the output in a text file. In the following example, ‘output’ folder is in current location.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> counts.saveAsTextFile(\"output\")\n</code></pre>\n\n\n\n<h3>Checking the Output</h3>\n\n\n\n<p>Open another terminal to go to home directory (where spark is executed in the other terminal). Use the following commands for checking output directory.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">\n</pre>\n\n\n\n<p>The following command is used to see output from <strong>Part-00000</strong> files.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;hadoop@localhost output]$ cat part-00000\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>(people,1) \n(are,2) \n(not,1) \n(as,8) \n(beautiful,2) \n(they, 7) \n(look,1) </code></pre>\n\n\n\n<p>The following command is used to see output from <strong>Part-00001</strong> files.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;hadoop@localhost output]$ cat part-00001 \n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>(walk, 1)\n(or, 1) \n(talk, 1) \n(only, 1) \n(love, 1) \n(care, 1) \n(share, 1) </code></pre>\n\n\n\n<h2>UN Persist the Storage</h2>\n\n\n\n<p>Before UN-persisting, if you want to see the storage space that is used for this application, then use the following URL in your browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:4040\n</code></pre>\n\n\n\n<p>You will see the following screen, which shows the storage space used for the application, which are running on the Spark shell.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/apache_spark/images/storage_space.jpg\" alt=\"storage space\"/></figure>\n\n\n\n<p>If you want to UN-persist the storage space of particular RDD, then use the following command.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">Scala&gt; counts.unpersist()\n</pre>\n\n\n\n<p>You will see the output as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>15/06/27 00:57:33 INFO ShuffledRDD: Removing RDD 9 from persistence list \n15/06/27 00:57:33 INFO BlockManager: Removing RDD 9 \n15/06/27 00:57:33 INFO BlockManager: Removing block rdd_9_1 \n15/06/27 00:57:33 INFO MemoryStore: Block rdd_9_1 of size 480 dropped from memory (free 280061810) \n15/06/27 00:57:33 INFO BlockManager: Removing block rdd_9_0 \n15/06/27 00:57:33 INFO MemoryStore: Block rdd_9_0 of size 296 dropped from memory (free 280062106) \nres7: cou.type = ShuffledRDD&#91;9] at reduceByKey at &lt;console>:14</code></pre>\n\n\n\n<p>For verifying the storage space in the browser, use the following URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:4040/</code></pre>\n\n\n\n<p>You will see the following screen. It shows the storage space used for the application, which are running on the Spark shell.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/apache_spark/images/storage_space_for_application.jpg\" alt=\"Storage space for application\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Spark Core is the base of the whole project. It provides distributed task dispatching, scheduling, and basic I/O functionalities. Spark uses a specialized fundamental data structure known as RDD (Resilient Distributed Datasets) that is a logical collection of data partitioned across machines. RDDs can be created in two ways; one is by referencing datasets in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[102,175],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/102"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=102"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/102/revisions"}],"predecessor-version":[{"id":4249,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/102/revisions/4249"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=102"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=102"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=102"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":101,"date":"2020-06-30T10:42:35","date_gmt":"2020-06-30T10:42:35","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=101"},"modified":"2020-12-16T17:07:27","modified_gmt":"2020-12-16T17:07:27","slug":"deployment-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/deployment-2/","title":{"rendered":"Deployment"},"content":{"rendered":"\n<p>Spark application, using spark-submit, is a shell command used to deploy the Spark application on a cluster. It uses all respective cluster managers through a uniform interface. Therefore, you do not have to configure your application for each one.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let us take the same example of word count, we used before, using shell commands. Here, we consider the same example as a spark application.</p>\n\n\n\n<h3>Sample Input</h3>\n\n\n\n<p>The following text is the input data and the file named is&nbsp;<strong>in.txt</strong>.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">people are not as beautiful as they look, \nas they walk or as they talk. \nthey are only as beautiful  as they love, \nas they care as they share.\n</pre>\n\n\n\n<p>Look at the following program −</p>\n\n\n\n<h3>SparkWordCount.scala</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.apache.spark.SparkContext \nimport org.apache.spark.SparkContext._ \nimport org.apache.spark._  \n\nobject SparkWordCount { \n   def main(args: Array&#91;String]) { \n\n      val sc = new SparkContext( \"local\", \"Word Count\", \"/usr/local/spark\", Nil, Map(), Map()) \n\t\t\n      /* local = master URL; Word Count = application name; */  \n      /* /usr/local/spark = Spark Home; Nil = jars; Map = environment */ \n      /* Map = variables to work nodes */ \n      /*creating an inputRDD to read text file (in.txt) through Spark context*/ \n      val input = sc.textFile(\"in.txt\") \n      /* Transform the inputRDD into countRDD */ \n\t\t\n      val count = input.flatMap(line ⇒ line.split(\" \")) \n      .map(word ⇒ (word, 1)) \n      .reduceByKey(_ + _) \n       \n      /* saveAsTextFile method is an action that effects on the RDD */  \n      count.saveAsTextFile(\"outfile\") \n      System.out.println(\"OK\"); \n   } \n} </code></pre>\n\n\n\n<p>Save the above program into a file named&nbsp;<strong>SparkWordCount.scala</strong>&nbsp;and place it in a user-defined directory named&nbsp;<strong>spark-application</strong>.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− While transforming the inputRDD into countRDD, we are using flatMap() for tokenizing the lines (from text file) into words, map() method for counting the word frequency and reduceByKey() method for counting each word repetition.</p>\n\n\n\n<p>Use the following steps to submit this application. Execute all steps in the&nbsp;<strong>spark-application</strong>directory through the terminal.</p>\n\n\n\n<h3>Step 1: Download Spark Ja</h3>\n\n\n\n<p>Spark core jar is required for compilation, therefore, download spark-core_2.10-1.3.0.jar from the following link Spark core jar and move the jar file from download directory to <strong>spark-application</strong> directory.</p>\n\n\n\n<h3>Step 2: Compile program</h3>\n\n\n\n<p>Compile the above program using the command given below. This command should be executed from the spark-application directory. Here, <strong>/usr/local/spark/lib/spark-assembly-1.4.0-hadoop2.6.0.jar</strong> is a Hadoop support jar taken from Spark library.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$scalac -classpath \"spark-core_2.10-1.3.0.jar:/usr/local/spark/lib/spark-assembly-1.4.0-hadoop2.6.0.jar\" SparkPi.scala</code></pre>\n\n\n\n<h3>Step 3: Create a JAR</h3>\n\n\n\n<p>Create a jar file of the spark application using the following command. Here, <strong>wordcount</strong> is the file name for jar file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>jar -cvf wordcount.jar SparkWordCount*.class spark-core_2.10-1.3.0.jar/usr/local/spark/lib/spark-assembly-1.4.0-hadoop2.6.0.jar</code></pre>\n\n\n\n<h3>Step 4: Submit spark application</h3>\n\n\n\n<p>Submit the spark application using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>spark-submit --class SparkWordCount --master local wordcount.jar\n</code></pre>\n\n\n\n<p>If it is executed successfully, then you will find the output given below. The&nbsp;<strong>OK</strong>&nbsp;letting in the following output is for user identification and that is the last line of the program. If you carefully read the following output, you will find different things, such as −</p>\n\n\n\n<ul><li>successfully started service &#8216;sparkDriver&#8217; on port 42954</li><li>MemoryStore started with capacity 267.3 MB</li><li>Started SparkUI at http://192.168.1.217:4040</li><li>Added JAR file:/home/hadoop/piapplication/count.jar</li><li>ResultStage 1 (saveAsTextFile at SparkPi.scala:11) finished in 0.566 s</li><li>Stopped Spark web UI at http://192.168.1.217:4040</li><li>MemoryStore cleared</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>15/07/08 13:56:04 INFO Slf4jLogger: Slf4jLogger started \n15/07/08 13:56:04 INFO Utils: Successfully started service 'sparkDriver' on port 42954. \n15/07/08 13:56:04 INFO Remoting: Remoting started; listening on addresses :&#91;akka.tcp://sparkDriver@192.168.1.217:42954] \n15/07/08 13:56:04 INFO MemoryStore: MemoryStore started with capacity 267.3 MB \n15/07/08 13:56:05 INFO HttpServer: Starting HTTP Server \n15/07/08 13:56:05 INFO Utils: Successfully started service 'HTTP file server' on port 56707. \n15/07/08 13:56:06 INFO SparkUI: Started SparkUI at http://192.168.1.217:4040 \n15/07/08 13:56:07 INFO SparkContext: Added JAR file:/home/hadoop/piapplication/count.jar at http://192.168.1.217:56707/jars/count.jar with timestamp 1436343967029 \n15/07/08 13:56:11 INFO Executor: Adding file:/tmp/spark-45a07b83-42ed-42b3b2c2-823d8d99c5af/userFiles-df4f4c20-a368-4cdd-a2a7-39ed45eb30cf/count.jar to class loader \n15/07/08 13:56:11 INFO HadoopRDD: Input split: file:/home/hadoop/piapplication/in.txt:0+54 \n15/07/08 13:56:12 INFO Executor: Finished task 0.0 in stage 0.0 (TID 0). 2001 bytes result sent to driver \n (MapPartitionsRDD&#91;5] at saveAsTextFile at SparkPi.scala:11), which is now runnable \n15/07/08 13:56:12 INFO DAGScheduler: Submitting 1 missing tasks from ResultStage 1 (MapPartitionsRDD&#91;5] at saveAsTextFile at SparkPi.scala:11) \n15/07/08 13:56:13 INFO DAGScheduler: ResultStage 1 (saveAsTextFile at SparkPi.scala:11) finished in 0.566 s \n15/07/08 13:56:13 INFO DAGScheduler: Job 0 finished: saveAsTextFile at SparkPi.scala:11, took 2.892996 s\nOK \n15/07/08 13:56:13 INFO SparkContext: Invoking stop() from shutdown hook \n15/07/08 13:56:13 INFO SparkUI: Stopped Spark web UI at http://192.168.1.217:4040 \n15/07/08 13:56:13 INFO DAGScheduler: Stopping DAGScheduler \n15/07/08 13:56:14 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped! \n15/07/08 13:56:14 INFO Utils: path = /tmp/spark-45a07b83-42ed-42b3-b2c2823d8d99c5af/blockmgr-ccdda9e3-24f6-491b-b509-3d15a9e05818, already present as root for deletion. \n15/07/08 13:56:14 INFO MemoryStore: MemoryStore cleared \n15/07/08 13:56:14 INFO BlockManager: BlockManager stopped \n15/07/08 13:56:14 INFO BlockManagerMaster: BlockManagerMaster stopped \n15/07/08 13:56:14 INFO SparkContext: Successfully stopped SparkContext \n15/07/08 13:56:14 INFO Utils: Shutdown hook called \n15/07/08 13:56:14 INFO Utils: Deleting directory /tmp/spark-45a07b83-42ed-42b3b2c2-823d8d99c5af \n15/07/08 13:56:14 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped! </code></pre>\n\n\n\n<h3>Step 5: Checking output</h3>\n\n\n\n<p>After successful execution of the program, you will find the directory named&nbsp;<strong>outfile</strong>&nbsp;in the spark-application directory.</p>\n\n\n\n<p>The following commands are used for opening and checking the list of files in the outfile directory.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd outfile \n$ ls \nPart-00000 part-00001 _SUCCESS</code></pre>\n\n\n\n<p>The commands for checking output in <strong>part-00000</strong> file are −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cat part-00000 \n(people,1) \n(are,2) \n(not,1) \n(as,8) \n(beautiful,2) \n(they, 7) \n(look,1)</code></pre>\n\n\n\n<p>The commands for checking output in part-00001 file are −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cat part-00001 \n(walk, 1) \n(or, 1) \n(talk, 1) \n(only, 1) \n(love, 1) \n(care, 1) \n(share, 1)</code></pre>\n\n\n\n<p>Go through the following section to know more about the ‘spark-submit’ command.</p>\n\n\n\n<h2>Spark-submit Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>spark-submit &#91;options] &lt;app jar | python file> &#91;app arguments]\n</code></pre>\n\n\n\n<h3>Options</h3>\n\n\n\n<p>The table given below describes a list of&nbsp;<strong>options</strong>&nbsp;−</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>&#8211;master</td><td>spark://host:port, mesos://host:port, yarn, or local.</td></tr><tr><td>2</td><td>&#8211;deploy-mode</td><td>Whether to launch the driver program locally (&#8220;client&#8221;) or on one of the worker machines inside the cluster (&#8220;cluster&#8221;) (Default: client).</td></tr><tr><td>3</td><td>&#8211;class</td><td>Your application&#8217;s main class (for Java / Scala apps).</td></tr><tr><td>4</td><td>&#8211;name</td><td>A name of your application.</td></tr><tr><td>5</td><td>&#8211;jars</td><td>Comma-separated list of local jars to include on the driver and executor classpaths.</td></tr><tr><td>6</td><td>&#8211;packages</td><td>Comma-separated list of maven coordinates of jars to include on the driver and executor classpaths.</td></tr><tr><td>7</td><td>&#8211;repositories</td><td>Comma-separated list of additional remote repositories to search for the maven coordinates given with &#8211;packages.</td></tr><tr><td>8</td><td>&#8211;py-files</td><td>Comma-separated list of .zip, .egg, or .py files to place on the PYTHON PATH for Python apps.</td></tr><tr><td>9</td><td>&#8211;files</td><td>Comma-separated list of files to be placed in the working directory of each executor.</td></tr><tr><td>10</td><td>&#8211;conf (prop=val)</td><td>Arbitrary Spark configuration property.</td></tr><tr><td>11</td><td>&#8211;properties-file</td><td>Path to a file from which to load extra properties. If not specified, this will look for conf/spark-defaults.</td></tr><tr><td>12</td><td>&#8211;driver-memory</td><td>Memory for driver (e.g. 1000M, 2G) (Default: 512M).</td></tr><tr><td>13</td><td>&#8211;driver-java-options</td><td>Extra Java options to pass to the driver.</td></tr><tr><td>14</td><td>&#8211;driver-library-path</td><td>Extra library path entries to pass to the driver.</td></tr><tr><td>15</td><td>&#8211;driver-class-path</td><td>Extra class path entries to pass to the driver.Note that jars added with &#8211;jars are automatically included in the classpath.</td></tr><tr><td>16</td><td>&#8211;executor-memory</td><td>Memory per executor (e.g. 1000M, 2G) (Default: 1G).</td></tr><tr><td>17</td><td>&#8211;proxy-user</td><td>User to impersonate when submitting the application.</td></tr><tr><td>18</td><td>&#8211;help, -h</td><td>Show this help message and exit.</td></tr><tr><td>19</td><td>&#8211;verbose, -v</td><td>Print additional debug output.</td></tr><tr><td>20</td><td>&#8211;version</td><td>Print the version of current Spark.</td></tr><tr><td>21</td><td>&#8211;driver-cores NUM</td><td>Cores for driver (Default: 1).</td></tr><tr><td>22</td><td>&#8211;supervise</td><td>If given, restarts the driver on failure.</td></tr><tr><td>23</td><td>&#8211;kill</td><td>If given, kills the driver specified.</td></tr><tr><td>24</td><td>&#8211;status</td><td>If given, requests the status of the driver specified.</td></tr><tr><td>25</td><td>&#8211;total-executor-cores</td><td>Total cores for all executors.</td></tr><tr><td>26</td><td>&#8211;executor-cores</td><td>Number of cores per executor. (Default : 1 in YARN mode, or all available cores on the worker in standalone mode).</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Spark application, using spark-submit, is a shell command used to deploy the Spark application on a cluster. It uses all respective cluster managers through a uniform interface. Therefore, you do not have to configure your application for each one. Example Let us take the same example of word count, we used before, using shell commands. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[102,175],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/101"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=101"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/101/revisions"}],"predecessor-version":[{"id":4248,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/101/revisions/4248"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=101"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=101"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=101"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":100,"date":"2020-06-30T10:43:59","date_gmt":"2020-06-30T10:43:59","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=100"},"modified":"2020-12-16T17:07:26","modified_gmt":"2020-12-16T17:07:26","slug":"spark-programming","status":"publish","type":"post","link":"https://python3.foobrdigital.com/spark-programming/","title":{"rendered":"Spark Programming"},"content":{"rendered":"\n<p>Spark contains two different types of shared variables − one is&nbsp;<strong>broadcast variables</strong>&nbsp;and second is&nbsp;<strong>accumulators</strong>.</p>\n\n\n\n<ul><li><strong>Broadcast variables</strong>&nbsp;− used to efficiently, distribute large values.</li><li><strong>Accumulators</strong>&nbsp;− used to aggregate the information of particular collection.</li></ul>\n\n\n\n<h2>Broadcast Variables</h2>\n\n\n\n<p>Broadcast variables allow the programmer to keep a read-only variable cached on each machine rather than shipping a copy of it with tasks. They can be used, for example, to give every node, a copy of a large input dataset, in an efficient manner. Spark also attempts to distribute broadcast variables using efficient broadcast algorithms to reduce communication cost.</p>\n\n\n\n<p>Spark actions are executed through a set of stages, separated by distributed “shuffle” operations. Spark automatically broadcasts the common data needed by tasks within each stage.</p>\n\n\n\n<p>The data broadcasted this way is cached in serialized form and is deserialized before running each task. This means that explicitly creating broadcast variables, is only useful when tasks across multiple stages need the same data or when caching the data in deserialized form is important.</p>\n\n\n\n<p>Broadcast variables are created from a variable <strong>v</strong> by calling <strong>SparkContext.broadcast(v)</strong>. The broadcast variable is a wrapper around <strong>v</strong>, and its value can be accessed by calling the <strong>value</strong> method. The code given below shows this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> val broadcastVar = sc.broadcast(Array(1, 2, 3))\n</code></pre>\n\n\n\n<p><strong>Output</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-preformatted\">broadcastVar: org.apache.spark.broadcast.Broadcast[Array[Int]] = Broadcast(0)\n</pre>\n\n\n\n<p>After the broadcast variable is created, it should be used instead of the value&nbsp;<strong>v</strong>&nbsp;in any functions run on the cluster, so that&nbsp;<strong>v</strong>&nbsp;is not shipped to the nodes more than once. In addition, the object&nbsp;<strong>v</strong>&nbsp;should not be modified after its broadcast, in order to ensure that all nodes get the same value of the broadcast variable.</p>\n\n\n\n<h2>Accumulators</h2>\n\n\n\n<p>Accumulators are variables that are only “added” to through an associative operation and can therefore, be efficiently supported in parallel. They can be used to implement counters (as in MapReduce) or sums. Spark natively supports accumulators of numeric types, and programmers can add support for new types. If accumulators are created with a name, they will be displayed in&nbsp;<strong>Spark’s UI</strong>. This can be useful for understanding the progress of running stages (NOTE − this is not yet supported in Python).</p>\n\n\n\n<p>An accumulator is created from an initial value&nbsp;<strong>v</strong>&nbsp;by calling&nbsp;<strong>SparkContext.accumulator(v)</strong>. Tasks running on the cluster can then add to it using the&nbsp;<strong>add</strong>&nbsp;method or the += operator (in Scala and Python). However, they cannot read its value. Only the driver program can read the accumulator’s value, using its&nbsp;<strong>value</strong>&nbsp;method.</p>\n\n\n\n<p>The code given below shows an accumulator being used to add up the elements of an array −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> val accum = sc.accumulator(0) \n \nscala> sc.parallelize(Array(1, 2, 3, 4)).foreach(x => accum += x)</code></pre>\n\n\n\n<p>If you want to see the output of above code then use the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>scala> accum.value </code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>res2: Int = 10 \n</code></pre>\n\n\n\n<h2>Numeric RDD Operations</h2>\n\n\n\n<p>Spark allows you to do different operations on numeric data, using one of the predefined API methods. Spark’s numeric operations are implemented with a streaming algorithm that allows building the model, one element at a time.</p>\n\n\n\n<p>These operations are computed and returned as a&nbsp;<strong>StatusCounter</strong>&nbsp;object by calling&nbsp;<strong>status()</strong>method.</p>\n\n\n\n<p>The following is a list of numeric methods available in&nbsp;<strong>StatusCounter</strong>.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Methods &amp; Meaning</th></tr><tr><td>1</td><td><strong>count()</strong>Number of elements in the RDD.</td></tr><tr><td>2</td><td><strong>Mean()</strong>Average of the elements in the RDD.</td></tr><tr><td>3</td><td><strong>Sum()</strong>Total value of the elements in the RDD.</td></tr><tr><td>4</td><td><strong>Max()</strong>Maximum value among all elements in the RDD.</td></tr><tr><td>5</td><td><strong>Min()</strong>Minimum value among all elements in the RDD.</td></tr><tr><td>6</td><td><strong>Variance()</strong>Variance of the elements.</td></tr><tr><td>7</td><td><strong>Stdev()</strong>Standard deviation.</td></tr></tbody></table></figure>\n\n\n\n<p>If you want to use only one of these methods, you can call the corresponding method directly on RDD.</p>\n","protected":false},"excerpt":{"rendered":"<p>Spark contains two different types of shared variables − one is&nbsp;broadcast variables&nbsp;and second is&nbsp;accumulators. Broadcast variables&nbsp;− used to efficiently, distribute large values. Accumulators&nbsp;− used to aggregate the information of particular collection. Broadcast Variables Broadcast variables allow the programmer to keep a read-only variable cached on each machine rather than shipping a copy of it with [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[102,175],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/100"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=100"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/100/revisions"}],"predecessor-version":[{"id":4247,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/100/revisions/4247"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=100"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=100"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=100"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]