[{"id":212,"date":"2020-06-15T04:29:30","date_gmt":"2020-06-15T04:29:30","guid":{"rendered":"http://php.foobrdigital.com/?p=212"},"modified":"2020-06-15T04:29:30","modified_gmt":"2020-06-15T04:29:30","slug":"overview-2-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/overview-2-2/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p>CodeIgniter is an application development framework, which can be used to develop websites, using PHP. It is an Open Source framework. It has a very rich set of functionality, which will increase the speed of website development work.</p>\n\n\n\n<p>If you know PHP well, then CodeIgniter will make your task easier. It has a very rich set of libraries and helpers. By using CodeIgniter, you will save a lot of time, if you are developing a website from scratch. Not only that, a website built in CodeIgniter is secure too, as it has the ability to prevent various attacks that take place through websites.</p>\n\n\n\n<h2>CodeIgniter Features</h2>\n\n\n\n<p>Some of the important features of CodeIgniter are listed below −</p>\n\n\n\n<ul><li>Model-View-Controller Based System</li><li>Extremely Light Weight</li><li>Full Featured database classes with support for several platforms.</li><li>Query Builder Database Support</li><li>Form and Data Validation</li><li>Security and XSS Filtering</li><li>Session Management</li><li>Email Sending Class. Supports Attachments, HTML/Text email, multiple protocols (sendmail, SMTP, and Mail) and more.</li><li>Image Manipulation Library (cropping, resizing, rotating, etc.). Supports GD, ImageMagick, and NetPBM</li><li>File Uploading Class</li><li>FTP Class</li><li>Localization</li><li>Pagination</li><li>Data Encryption</li><li>Benchmarking</li><li>Full Page Caching</li><li>Error Logging</li><li>Application Profiling</li><li>Calendaring Class</li><li>User Agent Class</li><li>Zip Encoding Class</li><li>Template Engine Class</li><li>Trackback Class</li><li>XML-RPC Library</li><li>Unit Testing Class</li><li>Search-engine Friendly URLs</li><li>Flexible URI Routing</li><li>Support for Hooks and Class Extensions</li><li>Large library of “helper” functions</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>CodeIgniter is an application development framework, which can be used to develop websites, using PHP. It is an Open Source framework. It has a very rich set of functionality, which will increase the speed of website development work. If you know PHP well, then CodeIgniter will make your task easier. It has a very rich [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/212"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=212"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/212/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=212"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=212"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=212"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4215,"date":"2020-06-15T04:30:45","date_gmt":"2020-06-15T04:30:45","guid":{"rendered":"http://php.foobrdigital.com/?p=214"},"modified":"2020-06-15T04:30:45","modified_gmt":"2020-06-15T04:30:45","slug":"installing","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/installing/","title":{"rendered":"Installing"},"content":{"rendered":"\n<p>It is very easy to install CodeIgniter. Just follow the steps given below −</p>\n\n\n\n<ul><li><strong>Step-1</strong>&nbsp;− Download the CodeIgniter from the link&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http://www.codeigniter.com/download\">CodeIgniter</a><ul><li>There are two different options legacy and latest. The names itself are self descriptive. legacy has version less than 2.x and latest has 3.0 version.</li><li>We can also go with GitHub and get all of the latest scripts..</li></ul></li><li><strong>Step-2</strong>&nbsp;− Unzip the folder.</li><li><strong>Step-3</strong>&nbsp;− Upload all files and folders to your server.</li><li><strong>Step-4</strong>&nbsp;− After uploading all the files to your server, visit the URL of your server, e.g., www.domain-name.com.</li></ul>\n\n\n\n<p>On visiting the URL, you will see the following screen −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/installing_codeigniter.jpg\" alt=\"Installing CodeIgniter\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>It is very easy to install CodeIgniter. Just follow the steps given below − Step-1&nbsp;− Download the CodeIgniter from the link&nbsp;CodeIgniter There are two different options legacy and latest. The names itself are self descriptive. legacy has version less than 2.x and latest has 3.0 version. We can also go with GitHub and get all [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4215"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4215"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4215/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4215"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4215"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4215"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4216,"date":"2020-06-15T04:31:41","date_gmt":"2020-06-15T04:31:41","guid":{"rendered":"http://php.foobrdigital.com/?p=216"},"modified":"2020-06-15T04:31:41","modified_gmt":"2020-06-15T04:31:41","slug":"application-architecture","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/application-architecture/","title":{"rendered":"Application Architecture"},"content":{"rendered":"\n<p>The architecture of CodeIgniter application is shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/architecture_codeigniter.jpg\" alt=\"Architecture of CodeIgniter\"/></figure>\n\n\n\n<ul><li>As shown in the figure, whenever a request comes to CodeIgniter, it will first go to&nbsp;<strong>index.php</strong>&nbsp;page.</li><li>In the second step,&nbsp;<strong>Routing</strong>&nbsp;will decide whether to pass this request to step-3 for caching or to pass this request to step-4 for security check.</li><li>If the requested page is already in&nbsp;<strong>Caching</strong>, then&nbsp;<strong>Routing</strong>&nbsp;will pass the request to step-3 and the response will go back to the user.</li><li>If the requested page does not exist in&nbsp;<strong>Caching</strong>, then&nbsp;<strong>Routing</strong>&nbsp;will pass the requested page to step-4 for&nbsp;<strong>Security</strong>&nbsp;checks.</li><li>Before passing the request to&nbsp;<strong>Application Controller</strong>, the&nbsp;<strong>Security</strong>&nbsp;of the submitted data is checked. After the&nbsp;<strong>Security</strong>&nbsp;check, the&nbsp;<strong>Application Controller</strong>&nbsp;loads necessary&nbsp;<strong>Models, Libraries, Helpers, Plugins</strong>&nbsp;and&nbsp;<strong>Scripts</strong>&nbsp;and pass it on to&nbsp;<strong>View</strong>.</li><li>The&nbsp;<strong>View</strong>&nbsp;will render the page with available data and pass it on for&nbsp;<strong>Caching</strong>. As the requested page was not cached before so this time it will be cached in&nbsp;<strong>Caching</strong>, to process this page quickly for future requests.</li></ul>\n\n\n\n<h2>Directory Structure</h2>\n\n\n\n<p>The image given below shows the directory structure of the CodeIgniter.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/directory_structure.jpg\" alt=\"Directory Structure\"/></figure>\n\n\n\n<p>CodeIgniter directory structure is divided into 3 folders −</p>\n\n\n\n<ul><li>Application</li><li>System</li><li>User_guide</li></ul>\n\n\n\n<h3>Application</h3>\n\n\n\n<p>As the name indicates the Application folder contains all the code of your application that you are building. This is the folder where you will develop your project. The Application folder contains several other folders, which are explained below −</p>\n\n\n\n<ul><li><strong>Cache</strong>&nbsp;− This folder contains all the cached pages of your application. These cached pages will increase the overall speed of accessing the pages.</li><li><strong>Config</strong>&nbsp;− This folder contains various files to configure the application. With the help of&nbsp;<strong>config.php</strong>&nbsp;file, user can configure the application. Using&nbsp;<strong>database.php</strong>&nbsp;file, user can configure the database of the application.</li><li><strong>Controllers</strong>&nbsp;− This folder holds the controllers of your application. It is the basic part of your application.</li><li><strong>Core</strong>&nbsp;− This folder will contain base class of your application.</li><li><strong>Helpers</strong>&nbsp;− In this folder, you can put helper class of your application.</li><li><strong>Hooks</strong>&nbsp;− The files in this folder provide a means to tap into and modify the inner workings of the framework without hacking the core files.</li><li><strong>Language</strong>&nbsp;− This folder contains language related files.</li><li><strong>Libraries</strong>&nbsp;− This folder contains files of the libraries developed for your application.</li><li><strong>Logs</strong>&nbsp;− This folder contains files related to the log of the system.</li><li><strong>Models</strong>&nbsp;− The database login will be placed in this folder.</li><li><strong>Third_party</strong>&nbsp;− In this folder, you can place any plugins, which will be used for your application.</li><li><strong>Views</strong>&nbsp;− Application’s HTML files will be placed in this folder.</li></ul>\n\n\n\n<h3>System</h3>\n\n\n\n<p>This folder contains CodeIgniter core codes, libraries, helpers and other files, which help make the coding easy. These libraries and helpers are loaded and used in web app development.</p>\n\n\n\n<p>This folder contains all the CodeIgniter code of consequence, organized into various folders −</p>\n\n\n\n<ul><li><strong>Core</strong>&nbsp;− This folder contains CodeIgniter’s core class. Do not modify anything here. All of your work will take place in the application folder. Even if your intent is to extend the CodeIgniter core, you have to do it with hooks, and hooks live in the application folder.</li><li><strong>Database</strong>&nbsp;− The database folder contains core database drivers and other database utilities.</li><li><strong>Fonts</strong>&nbsp;− The fonts folder contains font related information and utilities.</li><li><strong>Helpers</strong>&nbsp;− The helpers folder contains standard CodeIgniter helpers (such as date, cookie, and URL helpers).</li><li><strong>Language</strong>&nbsp;− The language folder contains language files. You can ignore it for now.</li><li><strong>Libraries</strong>&nbsp;− The libraries folder contains standard CodeIgniter libraries (to help you with e-mail, calendars, file uploads, and more). You can create your own libraries or extend (and even replace) standard ones, but those will be saved in the&nbsp;<strong>application/libraries</strong>&nbsp;directory to keep them separate from the standard CodeIgniter libraries saved in this particular folder.</li></ul>\n\n\n\n<h3>User_guide</h3>\n\n\n\n<p>This is your user guide to CodeIgniter. It is basically, the offline version of user guide on CodeIgniter website. Using this, one can learn the functions of various libraries, helpers and classes. It is recommended to go through this user guide before building your first web app in CodeIgniter.</p>\n\n\n\n<p>Beside these three folders, there is one more important file named “<strong>index.php</strong>”. In this file, we can set the application environment and error level and we can define system and application folder name. It is recommended, not to edit these settings if you do not have enough knowledge about what you are going to do.</p>\n","protected":false},"excerpt":{"rendered":"<p>The architecture of CodeIgniter application is shown below. As shown in the figure, whenever a request comes to CodeIgniter, it will first go to&nbsp;index.php&nbsp;page. In the second step,&nbsp;Routing&nbsp;will decide whether to pass this request to step-3 for caching or to pass this request to step-4 for security check. If the requested page is already in&nbsp;Caching, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4216"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4216"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4216/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4216"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4216"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4216"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4217,"date":"2020-06-15T04:32:49","date_gmt":"2020-06-15T04:32:49","guid":{"rendered":"http://php.foobrdigital.com/?p=218"},"modified":"2020-06-15T04:32:49","modified_gmt":"2020-06-15T04:32:49","slug":"mvc-framework","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/mvc-framework/","title":{"rendered":"MVC Framework"},"content":{"rendered":"\n<p>CodeIgniter is based on the&nbsp;<strong>Model-View-Controller (MVC) development pattern</strong>. MVC is a software approach that separates application logic from presentation. In practice, it permits your web pages to contain minimal scripting since the presentation is separate from the PHP scripting.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/mvc_framework.jpg\" alt=\"MVC Framework\"/></figure>\n\n\n\n<ul><li>The&nbsp;<strong>Model</strong>&nbsp;represents your data structures. Typically, your model classes will contain functions that help you retrieve, insert and update information in your database.</li><li>The&nbsp;<strong>View</strong>&nbsp;is information that is being presented to a user. A View will normally be a web page, but in CodeIgniter, a view can also be a page fragment like a header or footer. It can also be an RSS page, or any other type of “page”.</li><li>The&nbsp;<strong>Controller</strong>&nbsp;serves as an intermediary between the Model, the View, and any other resources needed to process the HTTP request and generate a web page.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>CodeIgniter is based on the&nbsp;Model-View-Controller (MVC) development pattern. MVC is a software approach that separates application logic from presentation. In practice, it permits your web pages to contain minimal scripting since the presentation is separate from the PHP scripting. The&nbsp;Model&nbsp;represents your data structures. Typically, your model classes will contain functions that help you retrieve, insert [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4217"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4217"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4217/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4217"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4217"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4217"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4218,"date":"2020-06-15T04:40:29","date_gmt":"2020-06-15T04:40:29","guid":{"rendered":"http://php.foobrdigital.com/?p=220"},"modified":"2020-06-15T04:40:29","modified_gmt":"2020-06-15T04:40:29","slug":"basic-concepts","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/basic-concepts/","title":{"rendered":"Basic Concepts"},"content":{"rendered":"\n<h2>Controllers</h2>\n\n\n\n<p>A controller is a simple class file. As the name suggests, it controls the whole application by URI.</p>\n\n\n\n<h3>Creating a Controller</h3>\n\n\n\n<p>First, go to&nbsp;<strong>application/controllers</strong>&nbsp;folder. You will find two files there,&nbsp;<strong>index.html</strong>&nbsp;and&nbsp;<strong>Welcome.php</strong>. These files come with the CodeIgniter.</p>\n\n\n\n<p>Keep these files as they are. Create a new file under the same path named “<strong>Test.php</strong>”. Write the following code in that file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Test extends CI_Controller {\n  \n      public function index() { \n         echo \"Hello World!\"; \n      } \n   } \n?></code></pre>\n\n\n\n<p>The&nbsp;<strong>Test</strong>&nbsp;class extends an in-built class called&nbsp;<strong>CI_Controller</strong>. This class must be extended whenever you want to make your own Controller class.</p>\n\n\n\n<h3>Calling a Controller</h3>\n\n\n\n<p>The above controller can be called by URI as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">http://www.your-domain.com/index.php/test\n</pre>\n\n\n\n<p>Notice the word “<strong>test</strong>” in the above URI after index.php. This indicates the class name of controller. As we have given the name of the controller “<strong>Test</strong>”, we are writing “<strong>test</strong>” after the index.php. The class name must start with <strong>uppercase letter</strong> but we need to write <strong>lowercase letter</strong> when we call that controller by URI. The general syntax for calling the controller is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;www.your-domain.com/index.php/controller/method-name</code></pre>\n\n\n\n<h3>Creating &amp; Calling Constructor Method</h3>\n\n\n\n<p>Let us modify the above class and create another method named “hello”.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Test extends CI_Controller {  \n\t\n      public function index() { \n         echo \"This is default function.\"; \n      } \n  \n      public function hello() { \n         echo \"This is hello function.\"; \n      } \n   } \n?></code></pre>\n\n\n\n<p>We can execute the above controller in the following three ways −</p>\n\n\n\n<ul><li>http://www.your-domain.com/index.php/test</li><li>http://www.your-domain.com/index.php/test/index</li><li>http://www.your-domain.com/index.php/test/hello</li></ul>\n\n\n\n<p>After visiting the first URI in the browser, we get the output as shown in the picture given below. As you can see, we got the output of the method “<strong>index</strong>”, even though we did not pass the name of the method the URI. We have used only controller name in the URI. In such situations, the CodeIgniter calls the default method “<strong>index</strong>”.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/index_output.jpg\" alt=\"Index output\"/></figure>\n\n\n\n<p>Visiting the second URI in the browser, we get the same output as shown in the above picture. Here, we have passed method’s name after controller’s name in the URI. As the name of the method is “<strong>index</strong>”, we are getting the same output.</p>\n\n\n\n<p>Visiting the third URI in the browser, we get the output as shown in picture given below. As you can see, we are getting the output of the method “<strong>hello</strong>” because we have passed “<strong>hello</strong>” as the method name, after the name of the controller “<strong>test</strong>” in the URI.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/hello_output.jpg\" alt=\"Hello Output\"/></figure>\n\n\n\n<h3>Points to Remember</h3>\n\n\n\n<ul><li>The name of the controller class must start with an uppercase letter.</li><li>The controller must be called with lowercase letter.</li><li>Do not use the same name of the method as your parent class, as it will override parent class’s functionality.</li></ul>\n\n\n\n<h2>Views</h2>\n\n\n\n<p>This can be a simple or complex webpage, which can be called by the controller. The webpage may contain header, footer, sidebar etc. View cannot be called directly. Let us create a simple view. Create a new file under <strong>application/views</strong> with name “<strong>test.php</strong>” and copy the below given code in that file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\"> \n\n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter View Example&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      CodeIgniter View Example \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Change the code of&nbsp;<strong>application/controllers/test.php</strong>&nbsp;file as shown in the below.</p>\n\n\n\n<h3>Loading the View</h3>\n\n\n\n<p>The view can be loaded by the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->view('name');</code></pre>\n\n\n\n<p>Where name is the view file, which is being rendered. If you have planned to store the view file in some directory then you can use the following syntax −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">$this-&gt;load-&gt;view('directory-name/name');</pre>\n\n\n\n<p>It is not necessary to specify the extension as php, unless something other than .php is used.</p>\n\n\n\n<p>The index() method is calling the view method and passing the “test” as argument to view() method because we have stored the html coding in “<strong>test.php</strong>” file under <strong>application/views/test.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Test extends CI_Controller { \n\t\n      public function index() { \n         $this->load->view('test'); \n      } \n   } \n?></code></pre>\n\n\n\n<p>Here is the output of the above code −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/test_output.jpg\" alt=\"Test output\"/></figure>\n\n\n\n<p>The following flowchart illustrates of how everything works −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/flow_charts.jpg\" alt=\"Flow Chart\"/></figure>\n\n\n\n<h2>Models</h2>\n\n\n\n<p>Models classes are designed to work with information in the database. As an example, if you are using CodeIgniter to manage users in your application then you must have model class, which contains functions to insert, delete, update and retrieve your users’ data.</p>\n\n\n\n<h3>Creating Model Class</h3>\n\n\n\n<p>Model classes are stored in <strong>application/models</strong> directory. Following code shows how to create model class in CodeIgniter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   Class Model_name extends CI_Model { \n\t\n      Public function __construct() { \n         parent::__construct(); \n      } \n   } \n?> </code></pre>\n\n\n\n<p>Where Model_name is the name of the model class that you want to give. Each model class must inherit the CodeIgniter’s CI_Model class. The first letter of the model class must be in capital letter. Following is the code for users’ model class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   Class User_model extends CI_Model {\n\t\n      Public function __construct() { \n         parent::__construct(); \n      } \n\t\t\n   } \n?></code></pre>\n\n\n\n<p>The above model class must be saved as User_model.php. The class name and file name must be same.</p>\n\n\n\n<h3>Loading Model</h3>\n\n\n\n<p>Model can be called in controller. Following code can be used to load any model.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->model('model_name');</code></pre>\n\n\n\n<p>Where model_name is the name of the model to be loaded. After loading the model you can simply call its method as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->model_name->method();\n﻿</code></pre>\n\n\n\n<h3>Auto-loading Models</h3>\n\n\n\n<p>There may be situations where you want some model class throughout your application. In such situations, it is better if we autoload it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/*\n| ---------------------------------------------------------------\n|  Auto-Load Models\n| ---------------------------------------------------------------\n| Prototype:\n|\n|   $autoload&#91;'model'] = array('first_model', 'second_model');\n|\n| You can also supply an alternative model name to be assigned\n| in the controller:\n|  \n|   $autoload&#91;'model'] = array('first_model' => 'first');\n*/\n$autoload&#91;'model'] = array();</code></pre>\n\n\n\n<p>As shown in the above figure, pass the name of the model in the array that you want to autoload and it will be autoloaded, while system is in initialization state and is accessible throughout the application.</p>\n\n\n\n<h2>Helpers</h2>\n\n\n\n<p>As the name suggests, it will help you build your system. It is divided into small functions to serve different functionality. A number of helpers are available in CodeIgniter, which are listed in the table below. We can build our own helpers too.</p>\n\n\n\n<p>Helpers are typically stored in your&nbsp;<strong>system/helpers</strong>, or&nbsp;<strong>application/helpers directory</strong>. Custom helpers are stored in&nbsp;<strong>application/helpers</strong>&nbsp;directory and systems’ helpers are stored in&nbsp;<strong>system/helpers</strong>&nbsp;directory. CodeIgniter will look first in your&nbsp;<strong>application/helpers directory</strong>. If the directory does not exist or the specified helper is not located, CodeIgniter will instead, look in your global&nbsp;<strong><em>system/helpers</em>/ directory</strong>. Each helper, whether it is custom or system helper, must be loaded before using it.Given below are the most commonly used Helpers.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.N.</th><th>Helper Name &amp; Description</th></tr><tr><td>1</td><td><strong>Array Helper</strong>The Array Helper file contains functions that assist in working with arrays.</td></tr><tr><td>2</td><td><strong>CAPTCHA Helper</strong>The CAPTCHA Helper file contains functions that assist in creating CAPTCHA images.</td></tr><tr><td>3</td><td><strong>Cookie Helper</strong>The Cookie Helper file contains functions that assist in working with cookies.</td></tr><tr><td>4</td><td><strong>Date Helper</strong>The Date Helper file contains functions that help you work with dates.</td></tr><tr><td>5</td><td><strong>Directory Helper</strong>The Directory Helper file contains functions that assist in working with directories.</td></tr><tr><td>6</td><td><strong>Download Helper</strong>The Download Helper lets you download data to your desktop.</td></tr><tr><td>7</td><td><strong>Email Helper</strong>The Email Helper provides some assistive functions for working with Email. For a more robust email solution, see CodeIgniter’s Email Class.</td></tr><tr><td>8</td><td><strong>File Helper</strong>The File Helper file contains functions that assist in working with files.</td></tr><tr><td>9</td><td><strong>Form Helper</strong>The Form Helper file contains functions that assist in working with forms.</td></tr><tr><td>10</td><td><strong>HTML Helper</strong>The HTML Helper file contains functions that assist in working with HTML.</td></tr><tr><td>11</td><td><strong>Inflector Helper</strong>The Inflector Helper file contains functions that permits you to change words to plural, singular, camel case, etc.</td></tr><tr><td>12</td><td><strong>Language Helper</strong>The Language Helper file contains functions that assist in working with language files.</td></tr><tr><td>13</td><td><strong>Number Helper</strong>The Number Helper file contains functions that help you work with numeric data.</td></tr><tr><td>14</td><td><strong>Path Helper</strong>The Path Helper file contains functions that permits you to work with file paths on the server.</td></tr><tr><td>15</td><td><strong>Security Helper</strong>The Security Helper file contains security related functions.</td></tr><tr><td>16</td><td><strong>Smiley Helper</strong>The Smiley Helper file contains functions that let you manage smileys (emoticons).</td></tr><tr><td>17</td><td><strong>String Helper</strong>The String Helper file contains functions that assist in working with strings.</td></tr><tr><td>18</td><td><strong>Text Helper</strong>The Text Helper file contains functions that assist in working with text.</td></tr><tr><td>19</td><td><strong>Typography Helper</strong>The Typography Helper file contains functions that help your format text in semantically relevant ways.</td></tr><tr><td>20</td><td><strong>URL Helper</strong>The URL Helper file contains functions that assist in working with URLs.</td></tr><tr><td>21</td><td><strong>XML Helper</strong>The XML Helper file contains functions that assist in working with XML data.</td></tr></tbody></table></figure>\n\n\n\n<h3>Loading a Helper</h3>\n\n\n\n<p>A helper can be loaded as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->helper('name');</code></pre>\n\n\n\n<p>Where name is the name of the helper. For example, if you want to load the URL Helper, then it can be loaded as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->helper('url');</code></pre>\n\n\n\n<h2>Routing</h2>\n\n\n\n<p>CodeIgniter has user-friendly URI routing system, so that you can easily re-route URL. Typically, there is a one-to-one relationship between a URL string and its corresponding controller class/method. The segments in a URI normally follow this pattern −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>your-domain.com/class/method/id/</code></pre>\n\n\n\n<ul><li>The&nbsp;<strong>first segment</strong>&nbsp;represents the controller class that should be invoked.</li><li>The&nbsp;<strong>second segment</strong>&nbsp;represents the class function, or method, that should be called.</li><li>The&nbsp;<strong>third</strong>, and any additional segments, represent the ID and any variables that will be passed to the controller.</li></ul>\n\n\n\n<p>In some situations, you may want to change this default routing mechanism. CodeIgniter provides facility through which you can set your own routing rules.</p>\n\n\n\n<h3>Customize Routing Rules</h3>\n\n\n\n<p>There is a particular file where you can handle all these. The file is located at application/config/routes.php. You will find an array called $route in which you can customize your routing rules. The key in the $route array will decide what to route and the value will decide where to route. There are three reserved routes in CodeIgniter.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.N.</th><th>Reserved Routes &amp; Description</th></tr><tr><td>1</td><td><strong>$route[&#8216;default_controller&#8217;]</strong>This route indicates which controller class should be loaded, if the URI contains no data, which will be the case when people load your root URL. You are encouraged to have a default route otherwise a 404 page will appear, by default. We can set home page of website here so it will be loaded by default.</td></tr><tr><td>2</td><td><strong>$route[&#8216;404_override&#8217;]</strong>This route indicates which controller class should be loaded if the requested controller is not found. It will override the default 404 error page. It won’t affect to the&nbsp;<strong>show_404()</strong>&nbsp;function, which will continue loading the default&nbsp;<strong><em>error_404.php</em></strong>&nbsp;file in&nbsp;<strong><em>application/views/errors/error_404.php</em></strong>.</td></tr><tr><td>3</td><td><strong>$route[&#8216;translate_uri_dashes&#8217;]</strong>As evident by the Boolean value, this is not exactly a route. This option enables you to automatically replace dashes (‘-‘) with underscores in the controller and method URI segments, thus saving you additional route entries if you need to do that. This is required because the dash is not a valid class or method-name character and will cause a fatal error, if you try to use it.</td></tr></tbody></table></figure>\n\n\n\n<p>Routes can be customized by&nbsp;<strong>wildcards</strong>&nbsp;or by using&nbsp;<strong>regular expressions</strong>&nbsp;but keep in mind that these customized rules for routing must come after the reserved rules.</p>\n\n\n\n<h3>Wildcards</h3>\n\n\n\n<p>We can use two wildcard characters as explained below −</p>\n\n\n\n<ul><li><strong>(:num)</strong>&nbsp;− It will match a segment containing only numbers.</li><li><strong>(:any)</strong>&nbsp;− It will match a segment containing any character.</li></ul>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'product/:num']='catalog/product_lookup';</code></pre>\n\n\n\n<p>In the above example, if the literal word “product” is found in the first segment of the URL, and a number is found in the second segment, the “catalog” class and the “product_lookup” method are used instead.</p>\n\n\n\n<h3>Regular Expressions</h3>\n\n\n\n<p>Like wildcards, we can also use regular expressions in&nbsp;<strong>$route array key</strong>&nbsp;part. If any URI matches with regular expression, then it will be routed to the value part set into $route array.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'products/(&#91;a-z]+)/(\\d+)']='$1/id_$2';</code></pre>\n\n\n\n<p>In the above example, a URI similar to products/shoes/123 would instead call the “<strong>shoes</strong>” controller class and the “<strong>id_123</strong>” method.</p>\n","protected":false},"excerpt":{"rendered":"<p>Controllers A controller is a simple class file. As the name suggests, it controls the whole application by URI. Creating a Controller First, go to&nbsp;application/controllers&nbsp;folder. You will find two files there,&nbsp;index.html&nbsp;and&nbsp;Welcome.php. These files come with the CodeIgniter. Keep these files as they are. Create a new file under the same path named “Test.php”. Write the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4218"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4218"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4218/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4218"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4218"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4218"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4219,"date":"2020-06-15T04:44:53","date_gmt":"2020-06-15T04:44:53","guid":{"rendered":"http://php.foobrdigital.com/?p=222"},"modified":"2020-06-15T04:44:53","modified_gmt":"2020-06-15T04:44:53","slug":"configuration-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/configuration-2/","title":{"rendered":"Configuration"},"content":{"rendered":"\n<p>After setting up the site, the next thing that we should do is to configure the site. The application/config folder contains a group of files that set basic configuration of your site.</p>\n\n\n\n<h2>Configuring Base URL</h2>\n\n\n\n<p>The base URL of the site can be configured in application/config/config.php file. It is URL to your CodeIgniter root. Typically, this will be your base URL, with a trailing slash e.g.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;example.com/</code></pre>\n\n\n\n<p>If this is not set, then CodeIgniter will try to guess the protocol, domain and path to your installation. However, you should always configure this explicitly and never rely on autoguessing, especially in production environments. You can configure the base URL in the $config array with key “base_url” as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$config&#91;'base_url'] = 'http://your-domain.com';\n﻿</code></pre>\n\n\n\n<h2>Database Configuration</h2>\n\n\n\n<p>The database of the site can be configured in application/config/database.php file. Often we need to set up database for different environment like development and production. With the multidimensional array provided in the CodeIgniter, we can setup database for different environment. The configuration settings are stored in the array as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$db&#91;'default'] = array( \n   'dsn'   => '', \n   'hostname' => 'localhost', \n   'username' => 'root', \n   'password' => '', \n   'database' => 'database_name', \n   'dbdriver' => 'mysqli', \n   'dbprefix' => '', \n   'pconnect' => TRUE, \n   'db_debug' => TRUE, \n   'cache_on' => FALSE, \n   'cachedir' => '', \n   'char_set' => 'utf8', \n   'dbcollat' => 'utf8_general_ci',\n   'swap_pre' => '', \n   'encrypt' => FALSE, \n   'compress' => FALSE, \n   'stricton' => FALSE, \n   'failover' => array() \n);</code></pre>\n\n\n\n<p>You can leave few options to their default values except hostname, username, password, database and dbdriver.</p>\n\n\n\n<ul><li><strong>hostname</strong>&nbsp;− Specify location of your database here e.g. localhost or IP address</li><li><strong>username</strong>&nbsp;− Set username of your database here.</li><li><strong>password</strong>&nbsp;− Set password of your database here.</li><li><strong>database</strong>&nbsp;− Set name of the database here.</li><li><strong>dbdriver</strong>&nbsp;− Set type of database that you are using e.g. MySQL, MySQLi, Postgre SQL, ODBC, and MS SQL.</li></ul>\n\n\n\n<p>By changing the key of the array <strong>$db</strong>, you can set other configuration of database as shown below. Here, we have set the key to <strong>‘test’</strong> to set the database for testing environment, by keeping the other database environment as it is.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$db&#91;'test'] = array( \n   'dsn'   => '', \n   'hostname' => 'localhost', \n   'username' => 'root', \n   'password' => '', \n   'database' => 'database_name', \n   'dbdriver' => 'mysqli', \n   'dbprefix' => '', \n   'pconnect' => TRUE, \n   'db_debug' => TRUE, \n   'cache_on' => FALSE, \n   'cachedir' => '', \n   'char_set' => 'utf8', \n   'dbcollat' => 'utf8_general_ci', \n   'swap_pre' => '', \n   'encrypt' => FALSE, \n   'compress' => FALSE, \n   'stricton' => FALSE, \n   'failover' => array()\n);</code></pre>\n\n\n\n<p>You can simply switch to different environment by changing the value of a variable as shown below −</p>\n\n\n\n<p><strong>$active_group = ‘default’; //This will set the default environment</strong></p>\n\n\n\n<p><strong>$active_group = ‘test’; //This will set the test environment</strong></p>\n\n\n\n<h2>Autoload Configuration</h2>\n\n\n\n<p>This file specifies, by default, which systems should be loaded. In order to keep the framework as light-weight as possible, only the absolute minimal resources are loaded by default. One should autoload the frequently used system, rather than loading it at local level, repeatedly. Following are the things you can load automatically −</p>\n\n\n\n<ul><li><strong>Libraries</strong> − It is a list of libraries, which should be auto loaded. Provide a list of libraries in an array as shown below to be autoloaded by CodeIgniter. In this example, we are auto loading database, email and session libraries.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$autoload&#91;'libraries'] = array('database', 'email', 'session');</code></pre>\n\n\n\n<ul><li><strong>Drivers</strong> − These classes are located in system/libraries/ or in your application/libraries/ directory, but are also placed inside their own subdirectory and they extend the CI_Driver_Library class. They offer multiple interchangeable driver options. Following is an example to autoload cache drivers.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$autoload&#91;'drivers'] = array('cache');</code></pre>\n\n\n\n<ul><li><strong>Helper files</strong>&nbsp;− It is a list of helper files, to be autoloaded. Provide a list of libraries in the array, as shown below, to be autoloaded by CodeIgniter. In the given example, we are autoloading URL and file helpers.</li></ul>\n\n\n\n<ul><li><strong>Custom config files</strong> − These files are intended for use, only if you have created custom config files. Otherwise, leave it blank. Following is an example of how to autoload more than one config files.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$autoload&#91;'helper'] = array('url', 'file');</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$autoload&#91;'config'] = array('config1', 'config2');</code></pre>\n\n\n\n<ul><li><strong>Language files</strong> − It is a list of language files, which should be auto loaded. Look at the example given below. Provide a list of languages in an array as shown below to be auto loaded by CodeIgniter. Keep in mind that do not include the &#8220;_lang&#8221; part of your file. For example, &#8220;codeigniter_lang.php&#8221; would be referenced as array(&#8216;codeigniter&#8217;);</li><li><strong>Models</strong> − It is a list of models file, which should be autoloaded. Provide a list of models in an array as shown below to be autoloaded by CodeIgniter. Following is the example of how to auto load more than one models files.</li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$autoload&#91;'model'] = array('first_model', 'second_model');</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>After setting up the site, the next thing that we should do is to configure the site. The application/config folder contains a group of files that set basic configuration of your site. Configuring Base URL The base URL of the site can be configured in application/config/config.php file. It is URL to your CodeIgniter root. Typically, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4219"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4219"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4219/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4219"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4219"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4219"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4220,"date":"2020-06-15T04:53:32","date_gmt":"2020-06-15T04:53:32","guid":{"rendered":"http://php.foobrdigital.com/?p=224"},"modified":"2020-06-15T04:53:32","modified_gmt":"2020-06-15T04:53:32","slug":"working-with-database-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/working-with-database-2/","title":{"rendered":"Working with Database"},"content":{"rendered":"\n<p>Like any other framework, we need to interact with the database very often and CodeIgniter makes this job easy for us. It provides rich set of functionalities to interact with database.</p>\n\n\n\n<p>In this section, we will understand how the CRUD (Create, Read, Update, Delete) functions work with CodeIgniter. We will use&nbsp;<strong>stud</strong>&nbsp;table to select, update, delete, and insert the data in&nbsp;<strong>stud</strong>&nbsp;table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Table Name: stud</th></tr><tr><td>roll_no</td><td>int(11)</td></tr><tr><td>name</td><td>varchar(30)</td></tr></tbody></table></figure>\n\n\n\n<h2>Connecting to a Database</h2>\n\n\n\n<p>We can connect to database in the following two way −</p>\n\n\n\n<ul><li><strong>Automatic Connecting</strong>&nbsp;− Automatic connection can be done by using the file application/config/autoload.php. Automatic connection will load the database for each and every page. We just need to add the database library as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$autoload&#91;'libraries'] = array(‘database’);</code></pre>\n\n\n\n<ul><li><strong>Manual Connecting</strong>&nbsp;− If you want database connectivity for only some of the pages, then we can go for manual connecting. We can connect to database manually by adding the following line in any class.</li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->database();</code></pre>\n\n\n\n<p>Here, we are not passing any argument because everything is set in the database config file application/config/database.php</p>\n\n\n\n<h2>Inserting a Record</h2>\n\n\n\n<p>To insert a record in the database, the insert() function is used as shown in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>insert([<em>$table = &#8221;</em>[,&nbsp;<em>$set = NULL</em>[,&nbsp;<em>$escape = NULL</em>]]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$table</strong>&nbsp;(<em>string</em>) − Table name<strong>$set</strong>&nbsp;(<em>array</em>) − An associative array of field/value pairs<strong>$escape</strong>&nbsp;(<em>bool</em>) − Whether to escape values and identifiers</td></tr><tr><td><strong>Returns</strong></td><td>TRUE on success, FALSE on failure</td></tr><tr><td><strong>Return Type</strong></td><td>bool</td></tr></tbody></table></figure>\n\n\n\n<p>The following example shows how to insert a record in&nbsp;<strong>stud</strong>&nbsp;table. The $data is an array in which we have set the data and to insert this data to the table&nbsp;<strong>stud</strong>, we just need to pass this array to the insert function in the 2<sup>nd</sup>&nbsp;argument.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$data = array( \n   'roll_no' => ‘1’, \n   'name' => ‘Virat’ \n); \n\n$this->db->insert(\"stud\", $data);</code></pre>\n\n\n\n<h2>Updating a Record</h2>\n\n\n\n<p>To update a record in the database, the&nbsp;<strong>update()</strong>&nbsp;function is used along with&nbsp;<strong>set()</strong>&nbsp;and&nbsp;<strong>where()</strong>&nbsp;functions as shown in the tables below. The&nbsp;<strong>set()</strong>&nbsp;function will set the data to be updated.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>set(<em>$key</em>[,&nbsp;<em>$value = &#8221;</em>[,&nbsp;<em>$escape = NULL</em>]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$key</strong>&nbsp;(<em>mixed</em>) − Field name, or an array of field/value pairs<strong>$value</strong>&nbsp;(<em>string</em>) − Field value, if $key is a single field<strong>$escape</strong>&nbsp;(<em>bool</em>) − Whether to escape values and identifiers</td></tr><tr><td><strong>Returns</strong></td><td>CI_DB_query_builder instance (method chaining)</td></tr><tr><td><strong>Return Type</strong></td><td>CI_DB_query_builder</td></tr></tbody></table></figure>\n\n\n\n<p>The&nbsp;<strong>where()</strong>&nbsp;function will decide which record to update.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>where(<em>$key</em>[,&nbsp;<em>$value = NULL</em>[,&nbsp;<em>$escape = NULL</em>]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$key</strong>&nbsp;(<em>mixed</em>) − Name of field to compare, or associative array<strong>$value</strong>&nbsp;(<em>mixed</em>) − If a single key, compared to this value<strong>$escape</strong>&nbsp;(<em>bool</em>) − Whether to escape values and identifiers</td></tr><tr><td><strong>Returns</strong></td><td>DB_query_builder instance</td></tr><tr><td><strong>Return Type</strong></td><td>object</td></tr></tbody></table></figure>\n\n\n\n<p>Finally, the&nbsp;<strong>update()</strong>&nbsp;function will update data in the database.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>update([<em>$table = &#8221;</em>[,&nbsp;<em>$set = NULL</em>[,&nbsp;<em>$where = NULL[, $limit = NULL</em>]]]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$table</strong>&nbsp;(<em>string</em>) − Table name<strong>$set</strong>&nbsp;(<em>array</em>) − An associative array of field/value pairs<strong>$where</strong>&nbsp;(<em>string</em>) − The WHERE clause<strong>$limit</strong>&nbsp;(<em>int</em>) − The LIMIT clause</td></tr><tr><td><strong>Returns</strong></td><td>TRUE on success, FALSE on failure</td></tr><tr><td><strong>Return Type</strong></td><td>bool</td></tr></tbody></table><figcaption><br></figcaption></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>$data = array( \n   'roll_no' => ‘1’, \n   'name' => ‘Virat’ \n); \n\n$this->db->set($data); \n$this->db->where(\"roll_no\", ‘1’); \n$this->db->update(\"stud\", $data);</code></pre>\n\n\n\n<h2>Deleting a Record</h2>\n\n\n\n<p>To delete a record in the database, the delete() function is used as shown in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>delete([<em>$table = &#8221;</em>[,&nbsp;<em>$where = &#8221;</em>[,&nbsp;<em>$limit = NULL[, $reset_data = TRUE</em>]]]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$table</strong>&nbsp;(<em>mixed</em>) − The table(s) to delete from; string or array<strong>$where</strong>&nbsp;(<em>string</em>) − The WHERE clause<strong>$limit</strong>&nbsp;(<em>int</em>) − The LIMIT clause<strong>$reset_data</strong>&nbsp;(<em>bool</em>) − TRUE to reset the query “write” clause</td></tr><tr><td><strong>Returns</strong></td><td>CI_DB_query_builder instance (method chaining) or FALSE on failure</td></tr><tr><td><strong>Return Type</strong></td><td>mixed</td></tr></tbody></table></figure>\n\n\n\n<p>Use the following code to to delete a record in the&nbsp;<strong>stud</strong>&nbsp;table. The first argument indicates the name of the table to delete record and the second argument decides which record to delete.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->db->delete(\"stud\", \"roll_no = 1\");\n﻿</code></pre>\n\n\n\n<h2>Selecting a Record</h2>\n\n\n\n<p>To select a record in the database, the&nbsp;<strong>get</strong>&nbsp;function is used, as shown in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>get([<em>$table = &#8221;</em>[,&nbsp;<em>$limit = NULL</em>[,&nbsp;<em>$offset = NULL</em>]]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$table</strong>&nbsp;(<em>string</em>) − The table to query array<strong>$limit</strong>&nbsp;(<em>int</em>) − The LIMIT clause<strong>$offset</strong>&nbsp;(<em>int</em>) − The OFFSET clause</td></tr><tr><td><strong>Returns</strong></td><td>CI_DB_result instance (method chaining)</td></tr><tr><td><strong>Return Type</strong></td><td>CI_DB_result</td></tr></tbody></table></figure>\n\n\n\n<p>Use the following code to get all the records from the database. The first statement fetches all the records from “stud” table and returns the object, which will be stored in $query object. The second statement calls the <strong>result()</strong> function with $query object to get all the records as array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$query = $this->db->get(\"stud\"); \n$data&#91;'records'] = $query->result();</code></pre>\n\n\n\n<h2>Closing a Connection</h2>\n\n\n\n<p>Database connection can be closed manually, by executing the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->db->close(); </code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Create a controller class called&nbsp;<strong>Stud_controller.php</strong>&nbsp;and save it at&nbsp;<strong>application/controller/Stud_controller.php</strong></p>\n\n\n\n<p>Here is a complete example, wherein all of the above-mentioned operations are performed. Before executing the following example, create a database and table as instructed at the starting of this chapter and make necessary changes in the database config file stored at&nbsp;<strong>application/config/database.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Stud_controller extends CI_Controller {\n\t\n      function __construct() { \n         parent::__construct(); \n         $this->load->helper('url'); \n         $this->load->database(); \n      } \n  \n      public function index() { \n         $query = $this->db->get(\"stud\"); \n         $data&#91;'records'] = $query->result(); \n\t\t\t\n         $this->load->helper('url'); \n         $this->load->view('Stud_view',$data); \n      } \n  \n      public function add_student_view() { \n         $this->load->helper('form'); \n         $this->load->view('Stud_add'); \n      } \n  \n      public function add_student() { \n         $this->load->model('Stud_Model');\n\t\t\t\n         $data = array( \n            'roll_no' => $this->input->post('roll_no'), \n            'name' => $this->input->post('name') \n         ); \n\t\t\t\n         $this->Stud_Model->insert($data); \n   \n         $query = $this->db->get(\"stud\"); \n         $data&#91;'records'] = $query->result(); \n         $this->load->view('Stud_view',$data); \n      } \n  \n      public function update_student_view() { \n         $this->load->helper('form'); \n         $roll_no = $this->uri->segment('3'); \n         $query = $this->db->get_where(\"stud\",array(\"roll_no\"=>$roll_no));\n         $data&#91;'records'] = $query->result(); \n         $data&#91;'old_roll_no'] = $roll_no; \n         $this->load->view('Stud_edit',$data); \n      } \n  \n      public function update_student(){ \n         $this->load->model('Stud_Model');\n\t\t\t\n         $data = array( \n            'roll_no' => $this->input->post('roll_no'), \n            'name' => $this->input->post('name') \n         ); \n\t\t\t\n         $old_roll_no = $this->input->post('old_roll_no'); \n         $this->Stud_Model->update($data,$old_roll_no); \n\t\t\t\n         $query = $this->db->get(\"stud\"); \n         $data&#91;'records'] = $query->result(); \n         $this->load->view('Stud_view',$data); \n      } \n  \n      public function delete_student() { \n         $this->load->model('Stud_Model'); \n         $roll_no = $this->uri->segment('3'); \n         $this->Stud_Model->delete($roll_no); \n   \n         $query = $this->db->get(\"stud\"); \n         $data&#91;'records'] = $query->result(); \n         $this->load->view('Stud_view',$data); \n      } \n   } \n?></code></pre>\n\n\n\n<p>Create a model class called&nbsp;<strong>Stud_Model.php</strong>&nbsp;and save it in&nbsp;<strong>application/models/Stud_Model.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Stud_Model extends CI_Model {\n\t\n      function __construct() { \n         parent::__construct(); \n      } \n   \n      public function insert($data) { \n         if ($this->db->insert(\"stud\", $data)) { \n            return true; \n         } \n      } \n   \n      public function delete($roll_no) { \n         if ($this->db->delete(\"stud\", \"roll_no = \".$roll_no)) { \n            return true; \n         } \n      } \n   \n      public function update($data,$old_roll_no) { \n         $this->db->set($data); \n         $this->db->where(\"roll_no\", $old_roll_no); \n         $this->db->update(\"stud\", $data); \n      } \n   } \n?> </code></pre>\n\n\n\n<p>Create a view file called&nbsp;<strong>Stud_add.php</strong>&nbsp;and save it in&nbsp;<strong>application/views/Stud_add.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>Students Example&lt;/title> \n   &lt;/head> \n   &lt;body> \n         &lt;?php \n            echo form_open('Stud_controller/add_student');\n            echo form_label('Roll No.'); \n            echo form_input(array('id'=>'roll_no','name'=>'roll_no')); \n            echo \"&lt;br/>\"; \n\t\t\t\n            echo form_label('Name'); \n            echo form_input(array('id'=>'name','name'=>'name')); \n            echo \"&lt;br/>\"; \n\t\t\t\n            echo form_submit(array('id'=>'submit','value'=>'Add')); \n            echo form_close(); \n         ?> \n   &lt;/body>\n&lt;/htmzz</code></pre>\n\n\n\n<p>Create a view file called&nbsp;<strong>Stud_edit.php</strong>&nbsp;and save it in&nbsp;application/views/Stud_edit.php</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>Students Example&lt;/title> \n   &lt;/head> \n\t\n   &lt;body> \n      &lt;form method = \"\" action = \"\">\n\t\t\n         &lt;?php \n            echo form_open('Stud_controller/update_student'); \n            echo form_hidden('old_roll_no',$old_roll_no); \n            echo form_label('Roll No.'); \n            echo form_input(array('id'⇒'roll_no',\n               'name'⇒'roll_no','value'⇒$records&#91;0]→roll_no)); \n            echo \"\n            \"; \n\n            echo form_label('Name'); \n            echo form_input(array('id'⇒'name','name'⇒'name',\n               'value'⇒$records&#91;0]→name)); \n            echo \"\n            \"; \n\n            echo form_submit(array('id'⇒'sub mit','value'⇒'Edit')); \n            echo form_close();\n         ?> \n\t\t\t\n      &lt;/form> \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Create a view file called&nbsp;<strong>Stud_view.php</strong>&nbsp;and save it in&nbsp;<strong>application/views/Stud_view.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>Students Example&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      &lt;a href = \"&lt;?php echo base_url(); ?>\n         index.php/stud/add_view\">Add&lt;/a>\n\t\t\n      &lt;table border = \"1\"> \n         &lt;?php \n            $i = 1; \n            echo \"&lt;tr>\"; \n            echo \"&lt;td>Sr#&lt;/td>\"; \n            echo \"&lt;td>Roll No.&lt;/td>\"; \n            echo \"&lt;td>Name&lt;/td>\"; \n            echo \"&lt;td>Edit&lt;/td>\"; \n            echo \"&lt;td>Delete&lt;/td>\"; \n            echo \"&lt;tr>\"; \n\t\t\t\t\n            foreach($records as $r) { \n               echo \"&lt;tr>\"; \n               echo \"&lt;td>\".$i++.\"&lt;/td>\"; \n               echo \"&lt;td>\".$r->roll_no.\"&lt;/td>\"; \n               echo \"&lt;td>\".$r->name.\"&lt;/td>\"; \n               echo \"&lt;td>&lt;a href = '\".base_url().\"index.php/stud/edit/\"\n                  .$r->roll_no.\"'>Edit&lt;/a>&lt;/td>\"; \n               echo \"&lt;td>&lt;a href = '\".base_url().\"index.php/stud/delete/\"\n                  .$r->roll_no.\"'>Delete&lt;/a>&lt;/td>\"; \n               echo \"&lt;tr>\"; \n            } \n         ?>\n      &lt;/table> \n\t\t\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Make the following change in the route file at&nbsp;<strong>application/config/routes.php</strong>&nbsp;and add the following line at the end of file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'stud'] = \"Stud_controller\"; \n$route&#91;'stud/add'] = 'Stud_controller/add_student'; \n$route&#91;'stud/add_view'] = 'Stud_controller/add_student_view'; \n$route&#91;'stud/edit/(\\d+)'] = 'Stud_controller/update_student_view/$1'; \n$route&#91;'stud/delete/(\\d+)'] = 'Stud_controller/delete_student/$1';</code></pre>\n\n\n\n<p>Now, let us execute this example by visiting the following URL in the browser. Replace the yoursite.com with your URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/stud</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Like any other framework, we need to interact with the database very often and CodeIgniter makes this job easy for us. It provides rich set of functionalities to interact with database. In this section, we will understand how the CRUD (Create, Read, Update, Delete) functions work with CodeIgniter. We will use&nbsp;stud&nbsp;table to select, update, delete, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4220"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4220"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4220/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4220"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4220"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4220"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4221,"date":"2020-06-15T04:58:48","date_gmt":"2020-06-15T04:58:48","guid":{"rendered":"http://php.foobrdigital.com/?p=226"},"modified":"2020-06-15T04:58:48","modified_gmt":"2020-06-15T04:58:48","slug":"libraries","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/libraries/","title":{"rendered":"Libraries"},"content":{"rendered":"\n<p>The essential part of a CodeIgniter framework is its libraries. It provides a rich set of libraries, which indirectly increase the speed of developing an application. The system library is located at system/libraries. All we need to do is to load the library that we want to use. The library can be loaded as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->library('class name');</code></pre>\n\n\n\n<p>Where <strong>class name</strong> is the name of the library that we want to load. If we want to load multiple libraries, then we can simply pass an array as argument to <strong>library()</strong> function as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->library(array('email', 'table'));</code></pre>\n\n\n\n<h2>Library Classes</h2>\n\n\n\n<p>The library classes are located in&nbsp;<strong>system/libraries</strong>. Each class has various functions to simplify the developing work. Following table shows the names of the library class and its description.Given below are the most commonly used Library Classes.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.N.</th><th>Library Class &amp; Description</th></tr><tr><td>1</td><td><strong>Benchmarking Class</strong>Benchmarking class is always active, enabling the time difference between any two marked points to be calculated.</td></tr><tr><td>2</td><td><strong>Caching Class</strong>This class will cache the pages, to quickly access the page speed.</td></tr><tr><td>3</td><td><strong>Calendaring Class</strong>Using this class, you can dynamically create calendars.</td></tr><tr><td>4</td><td><strong>Shopping Cart Class</strong>Using this class, you can add or remove item from Shopping Cart. The items are saved in session and will remain active until the user is browsing the site.</td></tr><tr><td>5</td><td><strong>Config Class</strong>Configuration preferences can be retrieved, using this class. This class is initialized automatically.</td></tr><tr><td>6</td><td><strong>Email Class</strong>This class provides email related functionality, like send or reply to email.</td></tr><tr><td>7</td><td><strong>Encryption Class</strong>This class provides two-way data encryption functionality.</td></tr><tr><td>8</td><td><strong>File Uploading Class</strong>This class provides functionalities related to file uploading. You can set various preferences like type of file to be uploaded, size of the files etc.</td></tr><tr><td>9</td><td><strong>Form Validation Class</strong>This class provides various functions to validate form.</td></tr><tr><td>10</td><td><strong>FTP Class</strong>This class provides various FTP related functions like transferring files to remove server, moving, renaming or deleting files on server.</td></tr><tr><td>11</td><td><strong>Image Manipulation Class</strong>Manipulation of image like resize, thumbnail creation, cropping, rotating, watermarking can be done with the help of this class.</td></tr><tr><td>12</td><td><strong>Input Class</strong>This class pre-processes the input data for security reason.</td></tr><tr><td>13</td><td><strong>Language Class</strong>This class is used for internationalization.</td></tr><tr><td>14</td><td><strong>Loader Class</strong>This class loads elements like View files, Drivers, Helpers, Models etc.</td></tr><tr><td>15</td><td><strong>Migrations Class</strong>This class provides functionalities related to database migrations.</td></tr><tr><td>16</td><td><strong>Output Class</strong>This class sends the output to browser and also, caches that webpage.</td></tr><tr><td>17</td><td><strong>Pagination Class</strong>This class adds pagination functionalities to web page.</td></tr><tr><td>18</td><td><strong>Template Parser Class</strong>The Template Parser Class can perform simple text substitution for pseudo-variables contained within your view files. It can parse simple variables or variable tag pairs.</td></tr><tr><td>19</td><td><strong>Security Class</strong>This class contains security related functions like XSS Filtering, CSRF etc.</td></tr><tr><td>20</td><td><strong>Session Library</strong>This class provides functionalities to maintain session of your application.</td></tr><tr><td>21</td><td><strong>HTML Table</strong>This class is used to auto-generate HTML tables from array or database results.</td></tr><tr><td>22</td><td><strong>Trackback Class</strong>The Trackback Class provides functions that enable you to send and receive Trackback data.</td></tr><tr><td>23</td><td><strong>Typography Class</strong>The Typography Class provides methods that help to format text.</td></tr><tr><td>24</td><td><strong>Unit Testing Class</strong>This class provides functionalities to unit test your application and generate the result.</td></tr><tr><td>25</td><td><strong>URI Class</strong>The URI Class provides methods that help you retrieve information from your URI strings. If you use URI routing, you can also retrieve information about the rerouted segments.</td></tr><tr><td>26</td><td><strong>User Agent Class</strong>The User Agent Class provides functions that help identify information about the browser, mobile device, or robot visiting your site. In addition, you can get referrer information as well as language and supported character-set information.</td></tr><tr><td>27</td><td><strong>XML-RPC and XML-RPC Server Classes</strong>CodeIgniter’s XML-RPC classes permit you to send requests to another server, or set up your own XML-RPC server to receive requests.</td></tr><tr><td>28</td><td><strong>Zip Encoding Class</strong>This class is used to create zip archives of your data.</td></tr></tbody></table></figure>\n\n\n\n<h2>Creating Libraries</h2>\n\n\n\n<p>CodeIgniter has rich set of libraries, which you can find in&nbsp;<strong>system/libraries</strong>&nbsp;folder but CodeIgniter is not just limited to system libraries, you can create your own libraries too, which can be stored in&nbsp;<strong>application/libraries</strong>&nbsp;folder. You can create libraries in three ways.</p>\n\n\n\n<ul><li>Create new library</li><li>Extend the native library</li><li>Replace the native library</li></ul>\n\n\n\n<h3>Create New Library</h3>\n\n\n\n<p>While creating new library one should keep in mind, the following things −</p>\n\n\n\n<ul><li>The name of the file must start with a capital letter e.g. Mylibrary.php</li><li>The class name must start with a capital letter e.g. class Mylibrary</li><li>The name of the class and name of the file must match.</li></ul>\n\n\n\n<p><strong>Mylibrary.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n   \n   class Mylibrary {\n\t\n      public function some_function() {\n      }\n   }\n\t\n/* End of file Mylibrary.php */</code></pre>\n\n\n\n<p><strong>Loading the Custom Library</strong></p>\n\n\n\n<p>The above library can be loaded by simply executing the following line in your controller.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->library(‘mylibrary’);</code></pre>\n\n\n\n<p>mylibrary is the name of your library and you can write it in lowercase as well as uppercase letters. Use the name of the library without “.php” extension. After loading the library, you can also call the function of that class as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->mylibrary->some_function();</code></pre>\n\n\n\n<h3>Extend the Native Library</h3>\n\n\n\n<p>Sometimes, you may need to add your own functionality to the library provided by CodeIgniter. CodeIgniter provides facility by which you can extend the native library and add your own functions. To achieve this, you must extend the class of native library class. For example if you want to extend the Email library then it can be done as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Class MY_Email extends CI_Email { \n}</code></pre>\n\n\n\n<p>Here, in the above example, MY_Email class is extending the native library’s email class CI_Email. This library can be loaded by the standard way of loading email library. Save the above code in file My_Email.php</p>\n\n\n\n<h3>Replace the Native Library</h3>\n\n\n\n<p>In some situations, you do not want to use the native library the way it works and want to replace it with your own way. This can be done by replacing the native library. To achieve this, you just need to give the same class name as it is named in native library. For example, if you want to replace the&nbsp;<strong>Email class</strong>, then use the code as shown below. Save your file name with&nbsp;<strong>Email.php</strong>&nbsp;and give a class name to&nbsp;<strong>CI_Email</strong>.</p>\n\n\n\n<p><strong>Email.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Class CI_Email { \n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The essential part of a CodeIgniter framework is its libraries. It provides a rich set of libraries, which indirectly increase the speed of developing an application. The system library is located at system/libraries. All we need to do is to load the library that we want to use. The library can be loaded as shown [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4221"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4221"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4221/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4221"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4221"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4221"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4222,"date":"2020-06-15T05:00:29","date_gmt":"2020-06-15T05:00:29","guid":{"rendered":"http://php.foobrdigital.com/?p=228"},"modified":"2020-06-15T05:00:29","modified_gmt":"2020-06-15T05:00:29","slug":"error-handling-2-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/error-handling-2-2/","title":{"rendered":"Error Handling"},"content":{"rendered":"\n<p>Many times, while using application, we come across errors. It is very annoying for the users if the errors are not handled properly. CodeIgniter provides an easy error handling mechanism.</p>\n\n\n\n<p>You would like the messages to be displayed, when the application is in developing mode rather than in production mode as the error messages can be solved easily at the developing stage.</p>\n\n\n\n<p>The environment of your application can be changed, by changing the line given below from <strong>index.php</strong> file. This can be set to anything but normally there are three values (development, test, production) used for this purpose.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>define('ENVIRONMENT', isset($_SERVER&#91;'CI_ENV']) ? $_SERVER&#91;'CI_ENV'] : 'development');</code></pre>\n\n\n\n<p>Different environment will require different levels of error reporting. By default, development mode will display errors and testing and live mode will hide them. CodeIgniter provides three functions as shown below to handle errors.</p>\n\n\n\n<ul><li><strong>show_error()</strong>&nbsp;function displays errors in HTML format at the top of the screen.</li></ul>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>show_error(<em>$message, $status_code, $heading = &#8216;An Error Was Encountered&#8217;</em>)</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$message</strong>&nbsp;(<em>mixed</em>) − Error message<strong>$status_code</strong>&nbsp;(<em>int</em>) − HTTP Response status code<strong>$heading</strong>&nbsp;(<em>string</em>) − Error page heading</td></tr><tr><td><strong>Return Type</strong></td><td>mixed</td></tr></tbody></table></figure>\n\n\n\n<ul><li><strong>show_404()</strong>&nbsp;function displays error if you are trying to access a page which does not exist.</li></ul>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>show_404(<em>$page = &#8221;, $log_error = TRUE</em>)</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$page</strong>&nbsp;(<em>string</em>) – URI string<strong>$log_error</strong>&nbsp;(<em>bool</em>) – Whether to log the error</td></tr><tr><td><strong>Return Type</strong></td><td>void</td></tr></tbody></table></figure>\n\n\n\n<ul><li><strong>log_message()</strong>&nbsp;function is used to write log messages. This is useful when you want to write custom messages.</li></ul>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>log_message(<em>$level, $message, $php_error = FALSE</em>)</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$level</strong>&nbsp;(<em>string</em>) − Log level: ‘error’, ‘debug’ or ‘info’<strong>$message</strong>&nbsp;(<em>string</em>) − Message to log<strong>$php_error</strong>&nbsp;(<em>bool</em>) − Whether we’re logging a native PHP error message</td></tr><tr><td><strong>Return Type</strong></td><td>void</td></tr></tbody></table></figure>\n\n\n\n<p>Logging can be enabled in <strong>application/config/config.php</strong> file. Given below is the screenshot of config.php file, where you can set threshold value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/*\n|--------------------------------------------------------------------------------\n|   Error Logging Threshold\n|--------------------------------------------------------------------------------\n| You can enable error logging by setting a threshold over zero. The \n| threshold determines what gets logged. Threshold options are:\n|\n|   0 = Disable logging, Error logging TURNED OFF\n|   1 = Error Message (including PHP errors)\n|   2 = Debug Message\n|   3 = Informational Messages\n|   4 = All Messages\n|\n| You can also pass an array with threshold levels to show individual error types\n|\n|   array(2) = Debug Message, without Error Messages\n| For a live site you'll usually only enable Errors (1) to be logged otherwise \n| your log files will fill up very fast.\n|\n*/\n$config&#91;'log_threshold'] = 0;</code></pre>\n\n\n\n<p>You can find the log messages in&nbsp;<strong>application/log/</strong>. Make sure that this directory is writable before you enable log files.</p>\n\n\n\n<p>Various templates for error messages can be found in&nbsp;<strong>application/views/errors/cli</strong>&nbsp;or&nbsp;<strong>application/views/errors/html</strong>.</p>\n","protected":false},"excerpt":{"rendered":"<p>Many times, while using application, we come across errors. It is very annoying for the users if the errors are not handled properly. CodeIgniter provides an easy error handling mechanism. You would like the messages to be displayed, when the application is in developing mode rather than in production mode as the error messages can [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4222"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4222"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4222/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4222"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4222"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4222"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4223,"date":"2020-06-15T05:03:46","date_gmt":"2020-06-15T05:03:46","guid":{"rendered":"http://php.foobrdigital.com/?p=231"},"modified":"2020-06-15T05:03:46","modified_gmt":"2020-06-15T05:03:46","slug":"file-uploading-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/file-uploading-3/","title":{"rendered":"File Uploading"},"content":{"rendered":"\n<p>Using File Uploading class, we can upload files and we can also, restrict the type and size of the file to be uploaded. Follow the steps shown in the given example to understand the file uploading process in CodeIgniter.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Copy the following code and store it at <strong>application/view/Upload_form.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n \n   &lt;head> \n      &lt;title>Upload Form&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      &lt;?php echo $error;?> \n      &lt;?php echo form_open_multipart('upload/do_upload');?> \n\t\t\n      &lt;form action = \"\" method = \"\">\n         &lt;input type = \"file\" name = \"userfile\" size = \"20\" /> \n         &lt;br />&lt;br /> \n         &lt;input type = \"submit\" value = \"upload\" /> \n      &lt;/form> \n\t\t\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Copy the code given below and store it at <strong>application/view/Upload_success.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n \n   &lt;head> \n      &lt;title>Upload Form&lt;/title> \n   &lt;/head>\n\t\n   &lt;body>  \n      &lt;h3>Your file was successfully uploaded!&lt;/h3>  \n\t\t\n      &lt;ul> \n         &lt;?phpforeach ($upload_data as $item => $value):?> \n         &lt;li>&lt;?php echo $item;?>: &lt;?php echo $value;?>&lt;/li> \n         &lt;?phpendforeach; ?>\n      &lt;/ul>  \n\t\t\n      &lt;p>&lt;?php echo anchor('upload', 'Upload Another File!'); ?>&lt;/p>  \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Copy the code given below and store it at <strong>application/controllers/Upload.php</strong>. Create “<strong>uploads</strong>” folder at the root of CodeIgniter i.e. at the parent directory of application folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n  \n   class Upload extends CI_Controller {\n\t\n      public function __construct() { \n         parent::__construct(); \n         $this->load->helper(array('form', 'url')); \n      }\n\t\t\n      public function index() { \n         $this->load->view('upload_form', array('error' => ' ' )); \n      } \n\t\t\n      public function do_upload() { \n         $config&#91;'upload_path']   = './uploads/'; \n         $config&#91;'allowed_types'] = 'gif|jpg|png'; \n         $config&#91;'max_size']      = 100; \n         $config&#91;'max_width']     = 1024; \n         $config&#91;'max_height']    = 768;  \n         $this->load->library('upload', $config);\n\t\t\t\n         if ( ! $this->upload->do_upload('userfile')) {\n            $error = array('error' => $this->upload->display_errors()); \n            $this->load->view('upload_form', $error); \n         }\n\t\t\t\n         else { \n            $data = array('upload_data' => $this->upload->data()); \n            $this->load->view('upload_success', $data); \n         } \n      } \n   } \n?></code></pre>\n\n\n\n<p>Make the following change in the route file in <strong>application/config/routes.php</strong> and add the following line at the end of file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'upload'] = 'Upload';</code></pre>\n\n\n\n<p>Now let us execute this example by visiting the following URL in the browser. Replace the yoursite.com with your URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/upload\n﻿</code></pre>\n\n\n\n<p>It will produce the following screen −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/upload_form.jpg\" alt=\"Upload Form\"/></figure>\n\n\n\n<p>After successfully uploading a file, you will see the following screen −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/uploaded_successfully.jpg\" alt=\"successfully uploaded\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Using File Uploading class, we can upload files and we can also, restrict the type and size of the file to be uploaded. Follow the steps shown in the given example to understand the file uploading process in CodeIgniter. Example Copy the following code and store it at application/view/Upload_form.php. Copy the code given below and store [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4223"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4223"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4223/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4223"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4223"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4223"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4224,"date":"2020-06-15T05:08:11","date_gmt":"2020-06-15T05:08:11","guid":{"rendered":"http://php.foobrdigital.com/?p=233"},"modified":"2020-06-15T05:08:11","modified_gmt":"2020-06-15T05:08:11","slug":"sending-email","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/sending-email/","title":{"rendered":"Sending Email"},"content":{"rendered":"\n<p>Sending email in CodeIgniter is much easier. You also configure the preferences regarding email in CodeIgniter. CodeIgniter provides following features for sending emails −</p>\n\n\n\n<ul><li>Multiple Protocols − Mail, Sendmail, and SMTP</li><li>TLS and SSL Encryption for SMTP</li><li>Multiple recipients</li><li>CC and BCCs</li><li>HTML or Plaintext email</li><li>Attachments</li><li>Word wrapping</li><li>Priorities</li><li>BCC Batch Mode, enabling large email lists to be broken into small BCC batches.</li><li>Email Debugging tools</li></ul>\n\n\n\n<p>Email class has the following functions to simplify the job of sending emails.</p>\n\n\n\n<pre class=\"wp-block-table\"><table><tbody><tr><th>S.N.</th><th>Syntax</th><th>Parameters</th><th>Return</th><th>Return Type</th></tr><tr><td>1</td><td>from(<em>$from</em>[,&nbsp;<em>$name = ''</em>[,&nbsp;<em>$return_path = NULL</em>]])</td><td><strong>$from</strong>&nbsp;(<em>string</em>) − “From” e-mail address<strong>$name</strong>&nbsp;(<em>string</em>) − “From” display name<strong>$return_path</strong>&nbsp;(<em>string</em>) − Optional email address to redirect undelivered e-mail to</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>2</td><td>reply_to(<em>$replyto</em>[,&nbsp;<em>$name = ''</em>])</td><td><strong>$replyto</strong>&nbsp;(<em>string</em>) − E-mail address for replies<strong>$name</strong>&nbsp;(<em>string</em>) − Display name for the reply-to e-mail address</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>2</td><td>to(<em>$to</em>)</td><td><strong>$to</strong>&nbsp;(<em>mixed</em>) − Comma-delimited string or an array of e-mail addresses</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>3</td><td>cc(<em>$cc</em>)</td><td><strong>$cc</strong>&nbsp;(<em>mixed</em>) − Comma-delimited string or an array of e-mail addresses</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>4</td><td>bcc(<em>$bcc</em>[,&nbsp;<em>$limit = ''</em>])</td><td><strong>$bcc</strong>&nbsp;(<em>mixed</em>) − Comma-delimited string or an array of e-mail addresses<strong>$limit</strong>&nbsp;(<em>int</em>) − Maximum number of e-mails to send per batch</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>5</td><td>subject(<em>$subject</em>)</td><td><strong>$subject</strong>&nbsp;(<em>string</em>) − E-mail subject line</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>6</td><td>message(<em>$body</em>)</td><td><strong>$body</strong>&nbsp;(<em>string</em>) − E-mail message body</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>7</td><td>set_alt_message(<em>$str</em>)</td><td><strong>$str</strong>&nbsp;(<em>string</em>) − Alternative e-mail message body</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>8</td><td>set_header(<em>$header, $value</em>)</td><td><strong>$header</strong>&nbsp;(<em>string</em>) − Header name<strong>$value</strong>&nbsp;(<em>string</em>) − Header value</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>9</td><td>clear([<em>$clear_attachments = FALSE</em>])</td><td><strong>$clear_attachments</strong>&nbsp;(<em>bool</em>) – Whether or not to clear attachments</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>10</td><td>send([<em>$auto_clear = TRUE</em>])</td><td><strong>$auto_clear</strong>&nbsp;(<em>bool</em>) − Whether to clear message data automatically</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>11</td><td>attach($filename[, $disposition = ''[, $newname = NULL[, $mime = '']]])</td><td><strong>$filename</strong>&nbsp;(<em>string</em>) − File name<strong>$disposition</strong>&nbsp;(<em>string</em>) − ‘disposition’ of the attachment. Most email clients make their own decision regardless of the MIME specification used here.&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://www.iana.org/assignments/cont-disp/cont-disp.xhtml\">iana</a><strong>$newname</strong>&nbsp;(<em>string</em>) − Custom file name to use in the e-mail<strong>$mime</strong>&nbsp;(<em>string</em>) − MIME type to use (useful for buffered data)</td><td>CI_Email instance (method chaining)</td><td>CI_Email</td></tr><tr><td>12</td><td>attachment_cid(<em>$filename</em>)</td><td><strong>$filename</strong>&nbsp;(<em>string</em>) − Existing attachment filename</td><td>Attachment Content-ID or FALSE if not found</td><td>string</td></tr></tbody></table></pre>\n\n\n\n<h2>Sending an Email</h2>\n\n\n\n<p>To send an email using CodeIgniter, first you have to load email library using the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->library('email');</code></pre>\n\n\n\n<p>After loading the library, simply execute the following functions to set necessary elements to send an email. The&nbsp;<strong>from()</strong>&nbsp;function is used to set − from where the email is being sent and&nbsp;<strong>to()</strong>&nbsp;function is used − to whom the email is being sent. The&nbsp;<strong>subject()</strong>&nbsp;and&nbsp;<strong>message()</strong>&nbsp;function is used to set the subject and message of the email.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->email->from('your@example.com', 'Your Name');\n$this->email->to('someone@example.com');\n \n$this->email->subject('Email Test');\n$this->email->message('Testing the email class.');</code></pre>\n\n\n\n<p>After that, execute the&nbsp;<strong>send()</strong>&nbsp;function as shown below to send an email.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">$this-&gt;email-&gt;send();<br>﻿</pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a controller file&nbsp;<strong>Email_controller.php</strong>&nbsp;and save it in&nbsp;<strong>application/controller/Email_controller.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Email_controller extends CI_Controller { \n \n      function __construct() { \n         parent::__construct(); \n         $this->load->library('session'); \n         $this->load->helper('form'); \n      } \n\t\t\n      public function index() { \n\t\n         $this->load->helper('form'); \n         $this->load->view('email_form'); \n      } \n  \n      public function send_mail() { \n         $from_email = \"your@example.com\"; \n         $to_email = $this->input->post('email'); \n   \n         //Load email library \n         $this->load->library('email'); \n   \n         $this->email->from($from_email, 'Your Name'); \n         $this->email->to($to_email);\n         $this->email->subject('Email Test'); \n         $this->email->message('Testing the email class.'); \n   \n         //Send mail \n         if($this->email->send()) \n         $this->session->set_flashdata(\"email_sent\",\"Email sent successfully.\"); \n         else \n         $this->session->set_flashdata(\"email_sent\",\"Error in sending Email.\"); \n         $this->load->view('email_form'); \n      } \n   } \n?></code></pre>\n\n\n\n<p>Create a view file called&nbsp;<strong>email_form.php</strong>&nbsp;and save it at&nbsp;<strong>application/views/email_form.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\"> \n\n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter Email Example&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      &lt;?php \n         echo $this->session->flashdata('email_sent'); \n         echo form_open('/Email_controller/send_mail'); \n      ?> \n\t\t\n      &lt;input type = \"email\" name = \"email\" required /> \n      &lt;input type = \"submit\" value = \"SEND MAIL\"> \n\t\t\n      &lt;?php \n         echo form_close(); \n      ?> \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Make the changes in the&nbsp;<strong>routes.php</strong>&nbsp;file in&nbsp;<strong>application/config/routes.php</strong>&nbsp;and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'email'] = 'Email_Controller';</code></pre>\n\n\n\n<p>Execute the above example by visiting the following link. Replace the yoursite.com with the URL of your site.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/email</code></pre>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>Sending email in CodeIgniter is much easier. You also configure the preferences regarding email in CodeIgniter. CodeIgniter provides following features for sending emails − Multiple Protocols − Mail, Sendmail, and SMTP TLS and SSL Encryption for SMTP Multiple recipients CC and BCCs HTML or Plaintext email Attachments Word wrapping Priorities BCC Batch Mode, enabling large [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4224"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4224"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4224/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4224"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4224"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4224"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4225,"date":"2020-06-15T05:11:18","date_gmt":"2020-06-15T05:11:18","guid":{"rendered":"http://php.foobrdigital.com/?p=235"},"modified":"2020-06-15T05:11:18","modified_gmt":"2020-06-15T05:11:18","slug":"form-validation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/form-validation/","title":{"rendered":"Form Validation"},"content":{"rendered":"\n<p>Validation is an important process while building web application. It ensures that the data that we are getting is proper and valid to store or process. CodeIgniter has made this task very easy. Let us understand this process with a simple example.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Create a view file&nbsp;<strong>myform.php</strong>&nbsp;and save the below code it in&nbsp;<strong>application/views/myform.php</strong>. This page will display form where user can submit his name and we will validate this page to ensure that it should not be empty while submitting.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n \n   &lt;head> \n      &lt;title>My Form&lt;/title> \n   &lt;/head>\n\t\n   &lt;body>\n      &lt;form action = \"\" method = \"\">\n         &lt;?php echo validation_errors(); ?>  \n         &lt;?php echo form_open('form'); ?>  \n         &lt;h5>Name&lt;/h5> \n         &lt;input type = \"text\" name = \"name\" value = \"\" size = \"50\" />  \n         &lt;div>&lt;input type = \"submit\" value = \"Submit\" />&lt;/div>  \n      &lt;/form>  \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Create a view file&nbsp;<strong>formsuccess.php</strong>&nbsp;and save it in&nbsp;<strong>application/views/formsuccess.php</strong>. This page will be displayed if the form is validated successfully.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n \n   &lt;head> \n      &lt;title>My Form&lt;/title>\n   &lt;/head> \n\t\n   &lt;body>  \n      &lt;h3>Your form was successfully submitted!&lt;/h3>  \n      &lt;p>&lt;?php echo anchor('form', 'Try it again!'); ?>&lt;/p>  \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Create a controller file&nbsp;<strong>Form.php</strong>&nbsp;and save it in&nbsp;<strong>application/controller/Form.php</strong>. This form will either, show errors if it is not validated properly or redirected to&nbsp;<strong>formsuccess.php</strong>&nbsp;page.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n  \n   class Form extends CI_Controller { \n\t\n      public function index() { \n         /* Load form helper */ \n         $this->load->helper(array('form'));\n\t\t\t\n         /* Load form validation library */ \n         $this->load->library('form_validation');\n\t\t\t\n         /* Set validation rule for name field in the form */ \n         $this->form_validation->set_rules('name', 'Name', 'required'); \n\t\t\t\n         if ($this->form_validation->run() == FALSE) { \n         $this->load->view('myform'); \n         } \n         else { \n            $this->load->view('formsuccess'); \n         } \n      }\n   }\n?></code></pre>\n\n\n\n<p>Add the following line in&nbsp;<strong>application/config/routes.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'validation'] = 'Form';</code></pre>\n\n\n\n<p>Let us execute this example by visiting the following URL in the browser. This URL may be different based on your site.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/validation</code></pre>\n\n\n\n<p>It will produce the following screen −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/validation_form.jpg\" alt=\"Validation Form\"/></figure>\n\n\n\n<p>We have added a validation in the controller −&nbsp;<strong>Name</strong>&nbsp;is required field before submitting the form. So, if you click the submit button without entering anything in the name field, then you will be asked to enter the name before submitting as shown in the screen below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/not_validated.jpg\" alt=\"Not Validated Successfully\"/></figure>\n\n\n\n<p>After entering the name successfully, you will be redirected to the screen as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/validated_successfully.jpg\" alt=\"Validated Successfully\"/></figure>\n\n\n\n<p>In the above example, we have used the required rule setting. There are many rules available in the CodeIgniter, which are described below.</p>\n\n\n\n<h2>Validation Rule Reference</h2>\n\n\n\n<p>The following is a list of all the native rules that are available to use −Given below are the most commonly used list of native rules available to use.</p>\n\n\n\n<pre class=\"wp-block-table\"><table><tbody><tr><th>Rule</th><th>Parameter</th><th>Description</th><th>Example</th></tr><tr><td><strong>required</strong></td><td>No</td><td>Returns FALSE if the form element is empty.</td><td></td></tr><tr><td><strong>matches</strong></td><td>Yes</td><td>Returns FALSE if the form element does not match the one in the parameter.</td><td>matches[form_item]</td></tr><tr><td><strong>regex_match</strong></td><td>Yes</td><td>Returns FALSE if the form element does not match the regular expression.</td><td>regex_match[/regex/]</td></tr><tr><td><strong>differs</strong></td><td>Yes</td><td>Returns FALSE if the form element does not differ from the one in the parameter.</td><td>differs[form_item]</td></tr><tr><td><strong>is_unique</strong></td><td>Yes</td><td>Returns FALSE if the form element is not unique to the table and field name in the parameter. Note − This rule requires&nbsp;<em>Query Builder</em>&nbsp;to be enabled in order to work.</td><td>is_unique[table.field]</td></tr><tr><td><strong>min_length</strong></td><td>Yes</td><td>Returns FALSE if the form element is shorter than the parameter value.</td><td>min_length[3]</td></tr><tr><td><strong>max_length</strong></td><td>Yes</td><td>Returns FALSE if the form element is longer than the parameter value.</td><td>max_length[12]</td></tr><tr><td><strong>exact_length</strong></td><td>Yes</td><td>Returns FALSE if the form element is not exactly the parameter value.</td><td>exact_length[8]</td></tr><tr><td><strong>greater_than</strong></td><td>Yes</td><td>Returns FALSE if the form element is less than or equal to the parameter value or not numeric.</td><td>greater_than[8]</td></tr><tr><td><strong>greater_than_equal_to</strong></td><td>Yes</td><td>Returns FALSE if the form element is less than the parameter value, or not numeric.</td><td>greater_than_equal_to[8]</td></tr><tr><td><strong>less_than</strong></td><td>Yes</td><td>Returns FALSE if the form element is greater than or equal to the parameter value or not numeric.</td><td>less_than[8]</td></tr><tr><td><strong>less_than_equal_to</strong></td><td>Yes</td><td>Returns FALSE if the form element is greater than the parameter value, or not numeric.</td><td>less_than_equal_to[8]</td></tr><tr><td><strong>in_list</strong></td><td>Yes</td><td>Returns FALSE if the form element is not within a predetermined list.</td><td>in_list[red,blue,green]</td></tr><tr><td><strong>alpha</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than alphabetical characters.</td><td></td></tr><tr><td><strong>alpha_numeric</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than alphanumeric characters.</td><td></td></tr><tr><td><strong>alpha_numeric_spaces</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than alphanumeric characters or spaces. Should be used after trim to avoid spaces at the beginning or end</td><td></td></tr><tr><td><strong>alpha_dash</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than alphanumeric characters, underscores or dashes.</td><td></td></tr><tr><td><strong>numeric</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than numeric characters.</td><td></td></tr><tr><td><strong>integer</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than an integer.</td><td></td></tr><tr><td><strong>decimal</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than a decimal number.</td><td></td></tr><tr><td><strong>is_natural</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than a natural number − 0, 1, 2, 3, etc.</td><td></td></tr><tr><td><strong>is_natural_no_zero</strong></td><td>No</td><td>Returns FALSE if the form element contains anything other than a natural number, but not zero − 1, 2, 3, etc.</td><td></td></tr><tr><td><strong>valid_url</strong></td><td>No</td><td>Returns FALSE if the form element does not contain a valid URL.</td><td></td></tr><tr><td><strong>valid_email</strong></td><td>No</td><td>Returns FALSE if the form element does not contain a valid email address.</td><td></td></tr><tr><td><strong>valid_emails</strong></td><td>No</td><td>Returns FALSE if any value provided in a comma-separated list is not a valid email.</td><td></td></tr><tr><td><strong>valid_ip</strong></td><td>No</td><td>Returns FALSE if the supplied IP is not valid. Accepts an optional parameter of ‘ipv4’ or ‘ipv6’ to specify an IP format.</td><td></td></tr><tr><td><strong>valid_base64</strong></td><td>No</td><td>Returns FALSE if the supplied string contains anything other than valid Base64 characters.</td><td></td></tr></tbody></table></pre>\n","protected":false},"excerpt":{"rendered":"<p>Validation is an important process while building web application. It ensures that the data that we are getting is proper and valid to store or process. CodeIgniter has made this task very easy. Let us understand this process with a simple example. Example Create a view file&nbsp;myform.php&nbsp;and save the below code it in&nbsp;application/views/myform.php. This page [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4225"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4225"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4225/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4225"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4225"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4225"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4226,"date":"2020-06-15T05:15:58","date_gmt":"2020-06-15T05:15:58","guid":{"rendered":"http://php.foobrdigital.com/?p=237"},"modified":"2020-06-15T05:15:58","modified_gmt":"2020-06-15T05:15:58","slug":"session-management-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/session-management-2/","title":{"rendered":"Session Management"},"content":{"rendered":"\n<p>When building websites, we often need to track user’s activity and state and for this purpose, we have to use&nbsp;<strong>session</strong>. CodeIgniter has session class for this purpose.</p>\n\n\n\n<h2>Initializing a Session</h2>\n\n\n\n<p>Sessions data are available globally through the site but to use those data we first need to initialize the session. We can do that by executing the following line in constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->library('session');</code></pre>\n\n\n\n<p>After loading the session library, you can simply use the session object as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session</code></pre>\n\n\n\n<h2>Add Session Data</h2>\n\n\n\n<p>In PHP, we simply use&nbsp;<strong>$_SESSION</strong>&nbsp;array to set any data in session as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$_SESSION&#91;‘key’] = value;</code></pre>\n\n\n\n<p>Where ‘<strong>key</strong>’ is the key of array and&nbsp;<strong>value</strong>&nbsp;is assigned on right side of equal to sign.</p>\n\n\n\n<p>The same thing can be done in CodeIgniter as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->set_userdata('some_name', 'some_value');</code></pre>\n\n\n\n<p><strong>set_userdata()</strong>&nbsp;function takes two arguments. The first argument,&nbsp;<strong>some_name</strong>, is the name of the session variable, under which,&nbsp;<strong>some_value</strong>&nbsp;will be stored.</p>\n\n\n\n<p><strong>set_userdata()</strong>&nbsp;function also supports another syntax in which you can pass array to store values as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$newdata = array( \n   'username'  => 'johndoe', \n   'email'     => 'johndoe@some-site.com', \n   'logged_in' => TRUE\n);  \n\n$this->session->set_userdata($newdata);</code></pre>\n\n\n\n<h2>Remove Session Data</h2>\n\n\n\n<p>In PHP, we can remove data stored in session using the&nbsp;<strong>unset()</strong>&nbsp;function as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>unset($_SESSION&#91;‘some_name’]);\n﻿</code></pre>\n\n\n\n<p>Removing session data in CodeIgniter is very simple as shown below. The below version of&nbsp;<strong>unset_userdata()</strong>&nbsp;function will remove only one variable from session.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->unset_userdata('some_name');</code></pre>\n\n\n\n<p>If you want to remove more values from session or to remove an entire array you can use the below version of&nbsp;<strong>unset_userdata()</strong>&nbsp;function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->unset_userdata($array_items);</code></pre>\n\n\n\n<h2>Fetch Session Data</h2>\n\n\n\n<p>After setting data in session, we can also retrieve that data as shown below.&nbsp;<strong>Userdata()</strong>&nbsp;function will be used for this purpose. This function will return&nbsp;<strong>NULL</strong>&nbsp;if the data you are trying to access is not available.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$name = $this->session->userdata('name');</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a controller class called&nbsp;<strong>Session_controller.php</strong>&nbsp;and save it in&nbsp;<strong>application/controller/Session_controller.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Session_controller extends CI_Controller {\n\t\n      public function index() { \n         //loading session library \n         $this->load->library('session');\n\t\t\t\n         //adding data to session \n         $this->session->set_userdata('name','virat');\n\t\t\t\n         $this->load->view('session_view'); \n      } \n\t\t\n      public function unset_session_data() { \n         //loading session library\n         $this->load->library('session');\n\t\t\t\n         //removing session data \n         $this->session->unset_userdata('name'); \n         $this->load->view('session_view'); \n      } \n\t\t\n   } \n?></code></pre>\n\n\n\n<p>Create a view file called&nbsp;<strong>session_view.php</strong>&nbsp;and save it in&nbsp;<strong>application/views/session_view.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter Session Example&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      Welcome &lt;?php echo $this->session->userdata('name'); ?> \n      &lt;br> \n      &lt;a href = 'http://localhost:85/CodeIgniter-3.0.1/CodeIgniter3.0.1/index.php/sessionex/unset'>\n         Click Here&lt;/a> to unset session data. \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Make the changes in the <strong>routes.php</strong> file in <strong>application/config/routes.php</strong> and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'sessionex'] = 'Session_Controller';</code></pre>\n\n\n\n<p>Execute the above example by using the following address. Replace&nbsp;<strong>yoursite.com</strong>&nbsp;with the URL of your site.http://yoursite.com/index.php/sessionex</p>\n","protected":false},"excerpt":{"rendered":"<p>When building websites, we often need to track user’s activity and state and for this purpose, we have to use&nbsp;session. CodeIgniter has session class for this purpose. Initializing a Session Sessions data are available globally through the site but to use those data we first need to initialize the session. We can do that by [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4226"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4226"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4226/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4226"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4226"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4226"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4227,"date":"2020-06-15T05:19:17","date_gmt":"2020-06-15T05:19:17","guid":{"rendered":"http://php.foobrdigital.com/?p=239"},"modified":"2020-06-15T05:19:17","modified_gmt":"2020-06-15T05:19:17","slug":"flashdata","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/flashdata/","title":{"rendered":"Flashdata"},"content":{"rendered":"\n<p>While building web application, we need to store some data for only one time and after that we want to remove that data. For example, to display some error message or information message. In PHP, we have to do it manually but CodeIgniter has made this job simple for us. In CodeIgniter, flashdata will only be available until the next request, and it will get deleted automatically.</p>\n\n\n\n<h2>Add Flashdata</h2>\n\n\n\n<p>We can simply store flashdata as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->mark_as_flash('item');</code></pre>\n\n\n\n<h2>Retrieve Flashdata</h2>\n\n\n\n<p>Flashdata can be retrieved using the flashdata() function which takes one argument of the item to be fetched as shown below. flashdata() function makes sure that you are getting only flash data and not any other data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->flashdata('item');</code></pre>\n\n\n\n<p>If you do not pass any argument, then you can get an array with the same function.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a class called <strong>FlashData_Controller.php</strong> and save it at <strong>application/controller/FlashData_Controller.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class FlashData_Controller extends CI_Controller {\n\t\n      public function index() { \n         //Load session library \n         $this->load->library('session');\n\t\t\t\n         //redirect to home page \n         $this->load->view('flashdata_home'); \n      } \n  \n      public function add() { \n         //Load session library \n         $this->load->library('session'); \n         $this->load->helper('url'); \n   \n         //add flash data \n         $this->session->set_flashdata('item','item-value'); \n   \n         //redirect to home page \n         redirect('flashdata'); \n      } \n   } \n?></code></pre>\n\n\n\n<p>Create a view file called <strong>flashdata_home.php</strong> and save it in <strong>application/views/ flashdata_home.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter Flashdata Example&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      Flash Data Example \n      &lt;h2>&lt;?php echo $this->session->flashdata('item'); ?>&lt;/h2> \n      &lt;a href = 'flashdata/add'>Click Here&lt;/a> to add flash data. \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Make the changes in the <strong>routes.php</strong> file in <strong>application/config/routes.php</strong> and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'flashdata'] = 'FlashData_Controller'; \n$route&#91;'flashdata/add'] = 'FlashData_Controller/add';</code></pre>\n\n\n\n<p>Execute the above example by visiting the following link. Replace the yoursite.com with the URL of your site.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/flashdata</code></pre>\n\n\n\n<p>After visiting the above URL, you will see a screen as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/flash_data.jpg\" alt=\"Flash Data\"/></figure>\n\n\n\n<p>Click on “<strong>Click Here</strong>” link and you will see a screen as shown below. Here, in this screen you will see a value of flash data variable. Refresh the page again and you will see a screen like above and flash data variable will be removed automatically.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/add_flash_data.jpg\" alt=\"Add Flash Data\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>While building web application, we need to store some data for only one time and after that we want to remove that data. For example, to display some error message or information message. In PHP, we have to do it manually but CodeIgniter has made this job simple for us. In CodeIgniter, flashdata will only [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4227"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4227"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4227/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4227"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4227"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4227"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4228,"date":"2020-06-15T05:23:11","date_gmt":"2020-06-15T05:23:11","guid":{"rendered":"http://php.foobrdigital.com/?p=241"},"modified":"2020-06-15T05:23:11","modified_gmt":"2020-06-15T05:23:11","slug":"tempdata","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/tempdata/","title":{"rendered":"Tempdata"},"content":{"rendered":"\n<p>In some situations, where you want to remove data stored in session after some specific time-period, this can be done using&nbsp;<strong>tempdata</strong>&nbsp;functionality in CodeIgniter.</p>\n\n\n\n<h2>Add Tempdata</h2>\n\n\n\n<p>To add data as <strong>tempdata</strong>, we have to use <strong>mark_as_tempdata()</strong> function. This function takes two argument items or items to be stored as <strong>tempdata</strong> and the expiration time for those items are as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// 'item' will be erased after 300 seconds(5 minutes) \n$this->session->mark_as_temp('item',300);</code></pre>\n\n\n\n<p>You can also pass an array to store multiple data. All the items stored below will be expired after 300 seconds.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->mark_as_temp(array('item','item2'),300);</code></pre>\n\n\n\n<p>You can also set different expiration time for each item as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// 'item' will be erased after 300 seconds, while 'item2' \n// will do so after only 240 seconds \n\n$this->session->mark_as_temp(array( \n   'item'=>300, \n   'item2'=>240 \n));</code></pre>\n\n\n\n<h2>Retrieve Tempdata</h2>\n\n\n\n<p>We can retrieve the tempdata using <strong>tempdata()</strong> function. This function assures that you are getting only tempdata and not any other data. Look at the example given below to see how to retrieve tempdata. <strong>tempdata()</strong> function will take one argument of the item to be fetched.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->tempdata('item');</code></pre>\n\n\n\n<p>If you omit the argument, then you can retrieve all the existing tempdata.</p>\n\n\n\n<h2>Remove Tempdata</h2>\n\n\n\n<p>Tempdata is removed automatically after its expiration time but if you want to remove tempdata before that, then you can do as shown below using the <strong>unset_tempdata()</strong> function, which takes one argument of the item to be removed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->unset_tempdata('item');</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a class called <strong>Tempdata_controller.php</strong> and save it in <strong>application/controller/Tempdata_controller.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Tempdata_controller extends CI_Controller {\n\t\n      public function index() { \n         $this->load->library('session'); \n         $this->load->view('tempdata_view'); \n      } \n  \n      public function add() { \n         $this->load->library('session'); \n         $this->load->helper('url'); \n   \n         //tempdata will be removed after 5 seconds \n         $this->session->set_tempdata('item','item-value',5); \n   \n         redirect('tempdata'); \n      } \n   } \n?></code></pre>\n\n\n\n<p>Create a file called <strong>tempdata_view.php</strong> and save it in <strong>application/views/tempdata_view.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter Tempdata Example&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      Temp Data Example \n      &lt;h2>&lt;?php echo $this->session->tempdata('item'); ?>&lt;/h2>\n      &lt;a href = 'tempdata/add'>Click Here&lt;/a> to add temp data. \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Make the changes in the <strong>routes.php</strong> file in application/config/routes.php and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'tempdata'] = \"Tempdata_controller\"; \n$route&#91;'tempdata/add'] = \"Tempdata_controller/add\";</code></pre>\n\n\n\n<p>Execute the above example by visiting the following link. Replace the yoursite.com with the URL of your site.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/tempdata</code></pre>\n\n\n\n<p>After visiting the above URL, you will see a screen as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/temp_data.jpg\" alt=\"TempData\"/></figure>\n\n\n\n<p>Click on&nbsp;<strong>“Click Here”</strong>&nbsp;link and you will see a screen as shown below.</p>\n\n\n\n<p>Here, in this screen you will see a value of temp data variable. Refresh the same page after five seconds again as we have set the temp data for five seconds and you will see a screen like above and temp data variable will be removed automatically after five seconds. If you refresh the same page before 5 seconds, then the temp data will not be removed, as the time period is not over.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/add_temp_data.jpg\" alt=\"Add Temp Data\"/></figure>\n\n\n\n<h2>Destroying a Session</h2>\n\n\n\n<p>In PHP, we are using the <strong>session_destroy()</strong> function to destroy the session and in CodeIgniter we can destroy the function as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->session->sess_destroy();\n﻿</code></pre>\n\n\n\n<p>After calling this function, all the session data including the&nbsp;<strong>flashdata</strong>&nbsp;and&nbsp;<strong>tempdata</strong>&nbsp;will be deleted permanently and cannot be retrieved back.</p>\n","protected":false},"excerpt":{"rendered":"<p>In some situations, where you want to remove data stored in session after some specific time-period, this can be done using&nbsp;tempdata&nbsp;functionality in CodeIgniter. Add Tempdata To add data as tempdata, we have to use mark_as_tempdata() function. This function takes two argument items or items to be stored as tempdata and the expiration time for those items are as shown below. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4228"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4228"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4228/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4228"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4228"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4228"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4229,"date":"2020-06-15T05:25:22","date_gmt":"2020-06-15T05:25:22","guid":{"rendered":"http://php.foobrdigital.com/?p=243"},"modified":"2020-06-15T05:25:22","modified_gmt":"2020-06-15T05:25:22","slug":"cookie-management-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/cookie-management-2/","title":{"rendered":"Cookie Management"},"content":{"rendered":"\n<p>Cookie is a small piece of data sent from web server to store on client’s computer. CodeIgniter has one helper called “Cookie Helper” for cookie management.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>set_cookie(<em>$name</em>[,&nbsp;<em>$value = &#8221;</em>[,&nbsp;<em>$expire = &#8221;</em>[,&nbsp;<em>$domain = &#8221;</em>[,&nbsp;<em>$path = &#8216;/&#8217;</em>[,&nbsp;<em>$prefix = &#8221;</em>[,&nbsp;<em>$secure = FALSE[, $httponly = FALSE</em>]]]]]]]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$name</strong>&nbsp;(<em>mixed</em>) − Cookie name or associative array of all of the parameters available to this function<strong>$value</strong>&nbsp;(<em>string</em>) − Cookie value<strong>$expire</strong>&nbsp;(<em>int</em>) − Number of seconds until expiration<strong>$domain</strong>&nbsp;(<em>string</em>) − Cookie domain (usually: .yourdomain.com)<strong>$path</strong>&nbsp;(<em>string</em>) − Cookie path<strong>$prefix</strong>&nbsp;(<em>string</em>) − Cookie name prefix<strong>$secure</strong>&nbsp;(<em>bool</em>) − Whether to only send the cookie through HTTPS<strong>$httponly</strong>&nbsp;(<em>bool</em>) − Whether to hide the cookie from JavaScript</td></tr><tr><td><strong>Return Type</strong></td><td>void</td></tr></tbody></table></figure>\n\n\n\n<p>In the&nbsp;<strong>set_cookie()</strong>&nbsp;function, we can pass all the values using two ways. In the first way, only array can be passed and in the second way, individual parameters can also be passed.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>get_cookie(<em>$index</em>[,&nbsp;<em>$xss_clean = NULL</em>]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$index</strong>&nbsp;(<em>string</em>) − Cookie name<strong>$xss_clean</strong>&nbsp;(<em>bool</em>) − Whether to apply XSS filtering to the returned value</td></tr><tr><td><strong>Return</strong></td><td>The cookie value or NULL if not found</td></tr><tr><td><strong>Return Type</strong></td><td>mixed</td></tr></tbody></table></figure>\n\n\n\n<p>The&nbsp;<strong>get_cookie()</strong>&nbsp;function is used to get the cookie that has been set using the set_cookie() function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>delete_cookie(<em>$name</em>[,&nbsp;<em>$domain = &#8221;</em>[,&nbsp;<em>$path = &#8216;/&#8217;</em>[,&nbsp;<em>$prefix = &#8221;</em>]]]])</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$name</strong>&nbsp;(<em>string</em>) − Cookie name<strong>$domain</strong>&nbsp;(<em>string</em>) − Cookie domain (usually: .yourdomain.com)<strong>$path</strong>&nbsp;(<em>string</em>) − Cookie path<strong>$prefix</strong>&nbsp;(<em>string</em>) − Cookie name prefix</td></tr><tr><td><strong>Return Type</strong></td><td>void</td></tr></tbody></table></figure>\n\n\n\n<p>The&nbsp;<strong>delete_cookie()</strong>&nbsp;function is used to delete the cookie().</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Create a controller called <strong>Cookie_controller.php</strong> and save it at <strong>application/controller/Cookie_controller.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Cookie_controller extends CI_Controller { \n\t\n      function __construct() { \n         parent::__construct(); \n         $this->load->helper(array('cookie', 'url')); \n      } \n  \n      public function index() { \n         set_cookie('cookie_name','cookie_value','3600'); \n         $this->load->view('Cookie_view'); \n      } \n  \n      public function display_cookie() { \n         echo get_cookie('cookie_name'); \n         $this->load->view('Cookie_view');\n      } \n  \n      public function deletecookie() { \n         delete_cookie('cookie_name'); \n         redirect('cookie/display'); \n      } \n\t\t\n   } \n?></code></pre>\n\n\n\n<p>Create a view file called <strong>Cookie_view.php</strong> and save it at <strong>application/views/Cookie_view.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter View Example&lt;/title> \n   &lt;/head> \n\t\n   &lt;body> \n      &lt;a href = 'display'>Click Here&lt;/a> to view the cookie.&lt;br> \n      &lt;a href = 'delete'>Click Here&lt;/a> to delete the cookie. \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Change the routes.php file in application/config/routes.php to add route for the above controller and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'cookie'] = \"Cookie_controller\"; \n$route&#91;'cookie/display'] = \"Cookie_controller/display_cookie\"; \n$route&#91;'cookie/delete'] = \"Cookie_controller/deletecookie\";</code></pre>\n\n\n\n<p>After that, you can execute the following URL in the browser to execute the example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/cookie</code></pre>\n\n\n\n<p>It will produce an output as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/cookie_management.jpg\" alt=\"cookie_management\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Cookie is a small piece of data sent from web server to store on client’s computer. CodeIgniter has one helper called “Cookie Helper” for cookie management. Syntax set_cookie($name[,&nbsp;$value = &#8221;[,&nbsp;$expire = &#8221;[,&nbsp;$domain = &#8221;[,&nbsp;$path = &#8216;/&#8217;[,&nbsp;$prefix = &#8221;[,&nbsp;$secure = FALSE[, $httponly = FALSE]]]]]]]]) Parameters $name&nbsp;(mixed) − Cookie name or associative array of all of the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4229"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4229"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4229/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4229"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4229"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4229"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4230,"date":"2020-06-15T05:28:48","date_gmt":"2020-06-15T05:28:48","guid":{"rendered":"http://php.foobrdigital.com/?p=245"},"modified":"2020-06-15T05:28:48","modified_gmt":"2020-06-15T05:28:48","slug":"common-functions","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/common-functions/","title":{"rendered":"Common Functions"},"content":{"rendered":"\n<p>CodeIgniter library functions and helper functions need to be initialized before they are used but there are some common functions, which do not need to be initialized.</p>\n\n\n\n<p>These common functions and their descriptions are given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>is_php(<em>$version</em>)</td></tr><tr><th>Parameters</th><td><strong>$version</strong>&nbsp;(<em>string</em>) − Version number</td></tr><tr><th>Return</th><td>TRUE if the running PHP version is at least the one specified or FALSE if not</td></tr><tr><th>Return Type</th><td>void</td></tr><tr><th>Description</th><td>Determines if the PHP version being used is greater than the supplied version number.</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>is_really_writable(<em>$file</em>)</td></tr><tr><th>Parameters</th><td><strong>$file</strong>&nbsp;(<em>string</em>) − File path</td></tr><tr><th>Return</th><td>TRUE if the path is writable, FALSE if not</td></tr><tr><th>Return Type</th><td>bool</td></tr><tr><th>Description</th><td>checks to see if file is writable or not.</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>config_item(<em>$key</em>)</td></tr><tr><th>Parameters</th><td><strong>$key</strong>&nbsp;(<em>string</em>) − Config item key</td></tr><tr><th>Return</th><td>Configuration key value or NULL if not found</td></tr><tr><th>Return Type</th><td>mixed</td></tr><tr><th>Description</th><td>This function is used to get the configuration item</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>set_status_header(<em>$code</em>[,&nbsp;<em>$text = &#8221;</em>])</td></tr><tr><th>Parameters</th><td><strong>$code</strong>&nbsp;(<em>int</em>) − HTTP Response status code<strong>$text</strong>&nbsp;(<em>string</em>) − A custom message to set with the status code</td></tr><tr><th>Return</th><td></td></tr><tr><th>Return Type</th><td>void</td></tr><tr><th>Description</th><td>This function permits you to manually set a server status header.</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>remove_invisible_characters(<em>$str</em>[,&nbsp;<em>$url_encoded = TRUE</em>])</td></tr><tr><th>Parameters</th><td><strong>$str</strong>&nbsp;(<em>string</em>) − Input string<strong>$url_encoded</strong>&nbsp;(<em>bool</em>) − Whether to remove URLencoded characters as well</td></tr><tr><th>Return</th><td>Sanitized string</td></tr><tr><th>Return Type</th><td>string</td></tr><tr><th>Description</th><td>This function prevents inserting NULL characters between ASCII characters</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>html_escape(<em>$var</em>)</td></tr><tr><th>Parameters</th><td><strong>$var</strong>&nbsp;(<em>mixed</em>) − Variable to escape (string or array)</td></tr><tr><th>Return</th><td>HTML escaped string(s)</td></tr><tr><th>Return Type</th><td>mixed</td></tr><tr><th>Description</th><td>This function acts as a native PHP htmlspecialchars() function.</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>get_mimes()</td></tr><tr><th>Return</th><td>An associative array of file types</td></tr><tr><th>Return Type</th><td>array</td></tr><tr><th>Description</th><td>This function returns a reference to the MIMEs array from&nbsp;<em>application/config/mimes.php</em>.</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>is_https()</td></tr><tr><th>Return</th><td>TRUE if currently using HTTP-over-SSL, FALSE if not</td></tr><tr><th>Return Type</th><td>bool</td></tr><tr><th>Description</th><td>Returns TRUE if a secure (HTTPS) connection is used and FALSE in any other case (including non-HTTP requests).</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>is_cli()</td></tr><tr><th>Return</th><td>TRUE if currently running under CLI, FALSE otherwise</td></tr><tr><th>Return Type</th><td>bool</td></tr><tr><th>Description</th><td>Returns TRUE if the application is run through the command line and FALSE if not.</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Syntax</th><td>function_usable(<em>$function_name</em>)</td></tr><tr><th>Parameters</th><td><strong>$function_name</strong>&nbsp;(<em>string</em>) − Function name</td></tr><tr><th>Return Type</th><td>bool</td></tr><tr><th>Description</th><td>Returns TRUE if a function exists and is usable, FALSE otherwise.</td></tr></tbody></table></figure>\n\n\n\n<p>Given below is an example, which demonstrates all of the above functions.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Here we have created only one controller in which we will use the above functions. Copy the below given code and save it at <strong>application/controller/CommonFun_Controller.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class CommonFun_Controller extends CI_Controller { \n\t\n      public function index() {\n         set_status_header(200); \n         echo is_php('5.3').\"&lt;br>\"; \n         var_dump(is_really_writable('./Form.php')); \n\t\t\t\n         echo config_item('language').\"&lt;br>\"; \n         echo remove_invisible_characters('This is a ‌test','UTF8').\"&lt;br>\"; \n\t\t\t\n         $str = '&lt; This > is \\' a \" test &amp; string'; \n         echo html_escape($str).\"&lt;br>\"; \n         echo \"is_https():\".var_dump(is_https()).\"&lt;br>\"; \n         echo \"is_cli():\".var_dump(is_cli()).\"&lt;br>\"; \n\t\t\t\n         var_dump(function_usable('test')).\"&lt;br>\"; \n         echo \"get_mimes():\".print_r(get_mimes()).\"&lt;br>\"; \n      } \n  \n      public function test() { \n         echo \"Test function\"; \n      } \n\t\t\n   } \n?></code></pre>\n\n\n\n<p>Change the <strong>routes.php</strong> file at application/config/routes.php to add route for the above controller and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'commonfunctions'] = 'CommonFun_Controller';</code></pre>\n\n\n\n<p>Type the following URL in the address bar of your browser to execute the example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/commonfunctions</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>CodeIgniter library functions and helper functions need to be initialized before they are used but there are some common functions, which do not need to be initialized. These common functions and their descriptions are given below. Syntax is_php($version) Parameters $version&nbsp;(string) − Version number Return TRUE if the running PHP version is at least the one [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4230"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4230"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4230/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4230"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4230"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4230"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4231,"date":"2020-06-15T05:31:34","date_gmt":"2020-06-15T05:31:34","guid":{"rendered":"http://php.foobrdigital.com/?p=247"},"modified":"2020-06-15T05:31:34","modified_gmt":"2020-06-15T05:31:34","slug":"page-caching","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/page-caching/","title":{"rendered":"Page Caching"},"content":{"rendered":"\n<p>Caching a page will improve the page load speed. If the page is cached, then it will be stored in its fully rendered state. Next time, when the server gets a request for the cached page, it will be directly sent to the requested browser.</p>\n\n\n\n<p>Cached files are stored in&nbsp;<strong>application/cache</strong>&nbsp;folder. Caching can be enabled on per page basis. While enabling the cache, we need to set the time, until which it needs to remain in cached folder and after that period, it will be deleted automatically.</p>\n\n\n\n<h2>Enable Caching</h2>\n\n\n\n<p>Caching can be enabled by executing the following line in any of the controller’s method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->output->cache($n);</code></pre>\n\n\n\n<p>Where&nbsp;<strong>$n</strong>&nbsp;is the number of&nbsp;<strong>minutes,</strong>&nbsp;you wish the page to remain cached between refreshes.</p>\n\n\n\n<h2>Disable Caching</h2>\n\n\n\n<p>Cache file gets deleted when it expires but when you want to delete it manually, then you have to disable it. You can disable the caching by executing the following line.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Deletes cache for the currently requested URI \n$this->output->delete_cache();\n  \n// Deletes cache for /foo/bar \n$this->output->delete_cache('/foo/bar');</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a controller called <strong>Cache_controller.php</strong> and save it in <strong>application/controller/Cache_controller.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Cache_controller extends CI_Controller { \n\t\n      public function index() { \n         $this->output->cache(1); \n         $this->load->view('test'); \n      }\n\t\t\n      public function delete_file_cache() { \n         $this->output->delete_cache('cachecontroller'); \n      } \n   } \n?></code></pre>\n\n\n\n<p>Create a view file called <strong>test.php</strong> and save it in <strong>application/views/test.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter View Example&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      CodeIgniter View Example \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Change the <strong>routes.php</strong> file in <strong>application/config/routes.php</strong> to add route for the above controller and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'cachecontroller'] = 'Cache_controller'; \n$route&#91;'cachecontroller/delete'] = 'Cache_controller/delete_file_cache';</code></pre>\n\n\n\n<p>Type the following URL in the browser to execute the example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/cachecontroller</code></pre>\n\n\n\n<p>After visiting the above URL, you will see that a cache file for this will be created in <strong>application/cache</strong> folder. To delete the file, visit the following URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/cachecontroller/delete</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Caching a page will improve the page load speed. If the page is cached, then it will be stored in its fully rendered state. Next time, when the server gets a request for the cached page, it will be directly sent to the requested browser. Cached files are stored in&nbsp;application/cache&nbsp;folder. Caching can be enabled on [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4231"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4231"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4231/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4231"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4231"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4231"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4232,"date":"2020-06-15T05:33:40","date_gmt":"2020-06-15T05:33:40","guid":{"rendered":"http://php.foobrdigital.com/?p=249"},"modified":"2020-06-15T05:33:40","modified_gmt":"2020-06-15T05:33:40","slug":"page-redirection","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/page-redirection/","title":{"rendered":"Page Redirection"},"content":{"rendered":"\n<p>While building web application, we often need to redirect the user from one page to another page. CodeIgniter makes this job easy for us. The&nbsp;<strong>redirect()</strong>&nbsp;function is used for this purpose.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Syntax</strong></td><td>redirect(<em>$uri = &#8221;, $method = &#8216;auto&#8217;, $code = NULL</em>)</td></tr><tr><td><strong>Parameters</strong></td><td><strong>$uri</strong>&nbsp;(<em>string</em>) − URI string<strong>$method</strong>&nbsp;(<em>string</em>) − Redirect method (‘auto’, ‘location’ or ‘refresh’)<strong>$code</strong>&nbsp;(<em>string</em>) − HTTP Response code (usually 302 or 303)</td></tr><tr><td><strong>Return type</strong></td><td>void</td></tr></tbody></table></figure>\n\n\n\n<p>The first argument can have two types of URI. We can pass full site URL or URI segments to the controller you want to direct.</p>\n\n\n\n<p>The second optional parameter can have any of the three values from auto, location or refresh. The default is auto.</p>\n\n\n\n<p>The third optional parameter is only available with location redirects and it allows you to send specific HTTP response code.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Create a controller called&nbsp;<strong>Redirect_controller.php</strong>&nbsp;and save it in&nbsp;<strong>application/controller/Redirect_controller.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Redirect_controller extends CI_Controller { \n\t\n      public function index() { \n         /*Load the URL helper*/ \n         $this->load->helper('url'); \n   \n         /*Redirect the user to some site*/ \n         redirect('http://www.codemeals.com'); \n      }\n\t\t\n      public function computer_graphics() { \n         /*Load the URL helper*/ \n         $this->load->helper('url'); \n         redirect('http://www.codemeals.com/computer_graphics/index.htm'); \n      } \n  \n      public function version2() { \n         /*Load the URL helper*/ \n         $this->load->helper('url'); \n   \n         /*Redirect the user to some internal controller’s method*/ \n         redirect('redirect/computer_graphics'); \n      } \n\t\t\n   } \n?></code></pre>\n\n\n\n<p>Change the&nbsp;<strong>routes.php</strong>&nbsp;file in&nbsp;<strong>application/config/routes.php</strong>&nbsp;to add route for the above controller and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'redirect'] = 'Redirect_controller'; \n$route&#91;'redirect/version2'] = 'Redirect_controller/version2'; \n$route&#91;'redirect/computer_graphics'] = 'Redirect_controller/computer_graphics';</code></pre>\n\n\n\n<p>Type the following URL in the browser, to execute the example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/redirect</code></pre>\n\n\n\n<p>The above URL will redirect you to the codemeals.com website and if you visit the following URL, then it will redirect you to the computer graphics tutorial at codemeals.com.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/redirect/computer_graphics</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>While building web application, we often need to redirect the user from one page to another page. CodeIgniter makes this job easy for us. The&nbsp;redirect()&nbsp;function is used for this purpose. Syntax redirect($uri = &#8221;, $method = &#8216;auto&#8217;, $code = NULL) Parameters $uri&nbsp;(string) − URI string$method&nbsp;(string) − Redirect method (‘auto’, ‘location’ or ‘refresh’)$code&nbsp;(string) − HTTP Response [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4232"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4232"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4232/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4232"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4232"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4232"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4233,"date":"2020-06-15T05:35:37","date_gmt":"2020-06-15T05:35:37","guid":{"rendered":"http://php.foobrdigital.com/?p=251"},"modified":"2020-06-15T05:35:37","modified_gmt":"2020-06-15T05:35:37","slug":"application-profiling","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/application-profiling/","title":{"rendered":"Application Profiling"},"content":{"rendered":"\n<p>When building a web application, we are very much concerned about the performance of the website in terms of how much time the controller took to execute and how much memory is used. Not only the performance, but we also need to see the insights of data like POST data, data of database queries, session data etc. for debugging purpose while developing some application. CodeIgniter has made this job easier for us by profiling an application.</p>\n\n\n\n<h2>Enable Profiling</h2>\n\n\n\n<p>To enable profiling of your application, simply execute the command given below in any of the method of your controller.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->output->enable_profiler(TRUE);</code></pre>\n\n\n\n<p>The report of the profiling can be seen at the bottom of the page after enabling it.</p>\n\n\n\n<h2>Disable Profiling</h2>\n\n\n\n<p>To disable profiling of your application, simply execute the command given below in any of the method of your controller.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->output->enable_profiler(FALSE);</code></pre>\n\n\n\n<h2>Enable / Disable Profiler Section</h2>\n\n\n\n<p>Profiling can be done on section basis. You can enable or disable profiling of a section by setting a Boolean value TRUE or FALSE. If you want to set profiling on the application then you can do in a file located in&nbsp;<strong>application/config/profiler.php</strong></p>\n\n\n\n<p>For example, the following command will enable profiling queries for the whole application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$config&#91;'queries'] = TRUE;</code></pre>\n\n\n\n<p>In the following table, the key is the parameter, which can be set in the config array to enable or disable a particular profile.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Key</th><th>Description</th><th>Default</th></tr><tr><td><strong>benchmarks</strong></td><td>Elapsed time of Benchmark points and total execution time</td><td>TRUE</td></tr><tr><td><strong>config</strong></td><td>CodeIgniterConfig variables</td><td>TRUE</td></tr><tr><td><strong>controller_info</strong></td><td>The Controller class and method requested</td><td>TRUE</td></tr><tr><td><strong>get</strong></td><td>Any GET data passed in the request</td><td>TRUE</td></tr><tr><td><strong>http_headers</strong></td><td>The HTTP headers for the current request</td><td>TRUE</td></tr><tr><td><strong>memory_usage</strong></td><td>Amount of memory consumed by the current request, in bytes</td><td>TRUE</td></tr><tr><td><strong>post</strong></td><td>Any POST data passed in the request</td><td>TRUE</td></tr><tr><td><strong>queries</strong></td><td>Listing of all database queries executed, including execution time</td><td>TRUE</td></tr><tr><td><strong>uri_string</strong></td><td>The URI of the current request</td><td>TRUE</td></tr><tr><td><strong>session_data</strong></td><td>Data stored in the current session</td><td>TRUE</td></tr><tr><td><strong>query_toggle_count</strong></td><td>The number of queries after which the query block will default to hidden.</td><td>25</td></tr></tbody></table></figure>\n\n\n\n<p>The profiler set in the file in <strong>application/config/profiler.php</strong> can be overridden by using the <strong>set_profiler_sections()</strong> function in controllers as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$sections = array( \n   'config'  => TRUE, \n   'queries' => TRUE \n); \n \n$this->output->set_profiler_sections($sections);</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>When building a web application, we are very much concerned about the performance of the website in terms of how much time the controller took to execute and how much memory is used. Not only the performance, but we also need to see the insights of data like POST data, data of database queries, session [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4233"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4233"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4233/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4233"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4233"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4233"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4234,"date":"2020-06-15T05:37:56","date_gmt":"2020-06-15T05:37:56","guid":{"rendered":"http://php.foobrdigital.com/?p=253"},"modified":"2020-06-15T05:37:56","modified_gmt":"2020-06-15T05:37:56","slug":"benchmarking","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/benchmarking/","title":{"rendered":"Benchmarking"},"content":{"rendered":"\n<h2>Setting Benchmark Points</h2>\n\n\n\n<p>If you want to measure the time taken to execute a set of lines or memory usage, you can calculate it by using Benchmarking points in CodeIgniter. There is a separate “<strong>Benchmarking</strong>” class for this purpose in CodeIgniter.</p>\n\n\n\n<p>This class is loaded automatically; you do not have to load it. It can be used anywhere in your controller, view, and model classes. All you have to do is to mark a start point and end point and then execute the <strong>elapsed_time()</strong> function between these two marked points and you can get the time it took to execute that code as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   $this->benchmark->mark('code_start');\n  \n   // Some code happens here  \n\n   $this->benchmark->mark('code_end');\n  \n   echo $this->benchmark->elapsed_time('code_start', 'code_end'); \n?></code></pre>\n\n\n\n<p>To display the memory usage, use the function <strong>memory_usage()</strong> as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   echo $this->benchmark->memory_usage(); \n?></code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a controller called <strong>Profiler_controller.php</strong> and save it in <strong>application/controller/Profiler_controller.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Profiler_controller extends CI_Controller {\n  \n      public function index() {\n\t\n         //enable profiler\n         $this->output->enable_profiler(TRUE); \n         $this->load->view('test'); \n      } \n  \n      public function disable() {\n\t\n         //disable profiler \n         $this->output->enable_profiler(FALSE); \n         $this->load->view('test'); \n      }\n\t\t\n   } \n?>  </code></pre>\n\n\n\n<p>Create a view file called <strong>test.php</strong> and save it at <strong>application/views/test.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter View Example&lt;/title> \n   &lt;/head>\n\t\n   &lt;body> \n      CodeIgniter View Example \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Change the routes.php file at <strong>application/config/routes.php</strong> to add route for the above controller and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'profiler'] = \"Profiler_controller\"; \n$route&#91;'profiler/disable'] = \"Profiler_controller/disable\"</code></pre>\n\n\n\n<p>After that, you can type the following URL in the address bar of your browser to execute the example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/profiler</code></pre>\n\n\n\n<p>The above URL will enable the profiler and it will produce an output as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/view_example.jpg\" alt=\"View Example\"/></figure>\n\n\n\n<p>To disable the profiling, execute the following URL.</p>\n","protected":false},"excerpt":{"rendered":"<p>Setting Benchmark Points If you want to measure the time taken to execute a set of lines or memory usage, you can calculate it by using Benchmarking points in CodeIgniter. There is a separate “Benchmarking” class for this purpose in CodeIgniter. This class is loaded automatically; you do not have to load it. It can [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4234"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4234"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4234/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4234"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4234"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4234"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4235,"date":"2020-06-15T05:40:52","date_gmt":"2020-06-15T05:40:52","guid":{"rendered":"http://php.foobrdigital.com/?p=255"},"modified":"2020-06-15T05:40:52","modified_gmt":"2020-06-15T05:40:52","slug":"adding-js-css","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/adding-js-css/","title":{"rendered":"Adding JS &#038; CSS"},"content":{"rendered":"\n<p>Adding JavaScript and CSS (Cascading Style Sheet) file in CodeIgniter is very simple. You have to create JS and CSS folder in root directory and copy all the .js files in JS folder and .css files in CSS folder as shown in the figure.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/adding_js_css.jpg\" alt=\"Adding JS and CSS\"/></figure>\n\n\n\n<p>For example, let us assume, you have created one JavaScript file <strong>sample.js</strong> and one CSS file <strong>style.css</strong>. Now, to add these files into your views, load URL helper in your controller as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->load->helper('url');</code></pre>\n\n\n\n<p>After loading the URL helper in controller, simply add the below given lines in the view file, to load the sample.js and style.css file in the view as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;link rel = \"stylesheet\" type = \"text/css\" \n   href = \"&lt;?php echo base_url(); ?>css/style.css\">\n\n&lt;script type = 'text/javascript' src = \"&lt;?php echo base_url(); \n   ?>js/sample.js\">&lt;/script></code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Create a controller called <strong>Test.php</strong> and save it in <strong>application/controller/Test.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php \n   class Test extends CI_Controller {\n\t\n      public function index() { \n         $this->load->helper('url'); \n         $this->load->view('test'); \n      } \n   } \n?></code></pre>\n\n\n\n<p>Create a view file called <strong>test.php</strong> and save it at <strong>application/views/test.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html> \n&lt;html lang = \"en\">\n \n   &lt;head> \n      &lt;meta charset = \"utf-8\"> \n      &lt;title>CodeIgniter View Example&lt;/title> \n      &lt;link rel = \"stylesheet\" type = \"text/css\" \n         href = \"&lt;?php echo base_url(); ?>css/style.css\"> \n      &lt;script type = 'text/javascript' src = \"&lt;?php echo base_url(); \n         ?>js/sample.js\">&lt;/script> \n   &lt;/head>\n\t\n   &lt;body> \n      &lt;a href = 'javascript:test()'>Click Here&lt;/a> to execute the javascript function. \n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Create a CSS file called <strong>style.css</strong> and save it at <strong>css/style.css</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>body { \n   background:#000; \n   color:#FFF; \n}</code></pre>\n\n\n\n<p>Create a JS file called <strong>sample.js</strong> and save it at <strong>js/sample.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>function test() { \n   alert('test'); \n}</code></pre>\n\n\n\n<p>Change the <strong>routes.php</strong> file in <strong>application/config/routes.php</strong> to add route for the above controller and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'profiler'] = \"Profiler_controller\"; \n$route&#91;'profiler/disable'] = \"Profiler_controller/disable\"</code></pre>\n\n\n\n<p>Use the following URL in the browser to execute the above example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/test</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Adding JavaScript and CSS (Cascading Style Sheet) file in CodeIgniter is very simple. You have to create JS and CSS folder in root directory and copy all the .js files in JS folder and .css files in CSS folder as shown in the figure. For example, let us assume, you have created one JavaScript file sample.js and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4235"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4235"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4235/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4235"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4235"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4235"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4236,"date":"2020-06-15T05:50:28","date_gmt":"2020-06-15T05:50:28","guid":{"rendered":"http://php.foobrdigital.com/?p=257"},"modified":"2020-06-15T05:50:28","modified_gmt":"2020-06-15T05:50:28","slug":"internationalization-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/internationalization-2/","title":{"rendered":"Internationalization"},"content":{"rendered":"\n<p>The language class in CodeIgniter provides an easy way to support multiple languages for internationalization. To some extent, we can use different language files to display text in many different languages.</p>\n\n\n\n<p>We can put different language files in application/language directory. System language files can be found at system/language directory, but to add your own language to your application, you should create a separate folder for each language in application/language directory.</p>\n\n\n\n<h2>Creating files Language</h2>\n\n\n\n<p>To create a language file, you must end it with <strong>_lang.php</strong>. For example, you want to create a language file for French language, then you must save it with <strong>french_lang.php</strong>. Within this file you can store all your language texts in key, value combination in <strong>$lang</strong> array as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$lang&#91;‘key’] = ‘val’;</code></pre>\n\n\n\n<h2>Loading Language file</h2>\n\n\n\n<p>To use any of the language in your application, you must first load the file of that particular language to retrieve various texts stored in that file. You can use the following code to load the language file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->lang->load('filename', 'language');</code></pre>\n\n\n\n<ul><li><strong>filename</strong>&nbsp;− It is the name of file you want to load. Don’t use extension of file here but only name of file.</li><li><strong>Language</strong>&nbsp;− It is the language set containing it.</li></ul>\n\n\n\n<h2>Fetching Language Text</h2>\n\n\n\n<p>To fetch a line from the language file simply execute the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$this->lang->line('language_key');</code></pre>\n\n\n\n<p>Where&nbsp;<strong>language_key</strong>&nbsp;is the key parameter used to fetch value of the key in the loaded language file.</p>\n\n\n\n<h2>Autoload Languages</h2>\n\n\n\n<p>If you need some language globally, then you can autoload it in <strong>application/config/autoload.php</strong> file as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>| -----------------------------------------------------------------------\n|  Auto-load Language files\n| -----------------------------------------------------------------------\n| Prototype:\n|   $autoload&#91;'language'] = array('lang1', 'lang2');\n|\n| NOTE: Do not include the \"_lang\" part of your file. For example\n| \"codeigniter_lang.php\" would be referenced as array('codeigniter');\n|\n*/\n$autoload&#91;'language'] = array();</code></pre>\n\n\n\n<p>Simply, pass the different languages to be autoloaded by CodeIgniter.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Create a controller called <strong>Lang_controller.php</strong> and save it in <strong>application/controller/Lang_controller.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   class Lang_controller extends CI_Controller {\n\n      public function index(){\n         //Load form helper\n         $this->load->helper('form');\n\n         //Get the selected language\n         $language = $this->input->post('language');\n\t\t\n         //Choose language file according to selected lanaguage\n         if($language == \"french\")\n            $this->lang->load('french_lang','french');\n         else if($language == \"german\")\n            $this->lang->load('german_lang','german');\n         else\n         $this->lang->load('english_lang','english');\n\t\t\n         //Fetch the message from language file.\n         $data&#91;'msg'] = $this->lang->line('msg');\n\t\t\n         $data&#91;'language'] = $language;\n         //Load the view file\n         $this->load->view('lang_view',$data);\n      }\n   }\n?></code></pre>\n\n\n\n<p>Create a view file called <strong>lang_view.php</strong> and save it at <strong>application/views/ lang_view.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html lang = \"en\"> \n\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>CodeIgniter Internationalization Example&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;?php\n         echo form_open('/lang');\n      ?>\n\t\t\n      &lt;select name = \"language\" onchange = \"javascript:this.form.submit();\">\n         &lt;?php\n            $lang = array('english'=>\"English\",'french'=>\"French\",'german'=>\"German\");\n\t\t\t\t\n            foreach($lang as $key=>$val) {\n               if($key == $language)\n               echo \"&lt;option value = '\".$key.\"' selected>\".$val.\"&lt;/option>\";\n               else\n               echo \"&lt;option value = '\".$key.\"'>\".$val.\"&lt;/option>\";\n            }\n\t\t\t\t\n         ?>\n\t\t\t\n      &lt;/select>\n\t\t\n      &lt;br>\n\t\t\n      &lt;?php\n         form_close();\n         echo $msg;\n      ?>\n\t\t\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Create three folders called English, French, and German in&nbsp;<strong>application/language</strong>&nbsp;as shown in the figure below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/three_folders.jpg\" alt=\"Three Folders\"/></figure>\n\n\n\n<p>Copy the below given code and save it in <strong>english_lang.php</strong> file in <strong>application/language/english</strong> folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   $lang&#91;'msg'] = \"CodeIgniter Internationalization example.\";\n?></code></pre>\n\n\n\n<p>Copy the below given code and save it in <strong>french_lang.php</strong> file in <strong>application/language/French</strong> folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   $lang&#91;'msg'] = \"Exemple CodeIgniter internationalisation.\";\n?></code></pre>\n\n\n\n<p>Copy the below given code and save it in <strong>german_lang.php</strong> file in <strong>application/language/german</strong> folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   $lang&#91;'msg'] = \"CodeIgniter Internationalisierung Beispiel.\";\n?></code></pre>\n\n\n\n<p>Change the <strong>routes.php</strong> file in <strong>application/config/routes.php</strong> to add route for the above controller and add the following line at the end of the file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$route&#91;'lang'] = \"Lang_controller\";</code></pre>\n\n\n\n<p>Execute the following URL in the browser to execute the above example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;yoursite.com/index.php/lang</code></pre>\n\n\n\n<p>It will produce an output as shown in the following screenshot. If you change the language in the dropdown list, the language of the sentence written below the dropdown will also change accordingly.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/codeigniter/images/internationalization_example.jpg\" alt=\"Internationalization Example\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The language class in CodeIgniter provides an easy way to support multiple languages for internationalization. To some extent, we can use different language files to display text in many different languages. We can put different language files in application/language directory. System language files can be found at system/language directory, but to add your own language [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4236"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4236"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4236/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4236"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4236"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4236"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4237,"date":"2020-06-15T05:53:36","date_gmt":"2020-06-15T05:53:36","guid":{"rendered":"http://php.foobrdigital.com/?p=259"},"modified":"2020-06-15T05:53:36","modified_gmt":"2020-06-15T05:53:36","slug":"security-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/security-2/","title":{"rendered":"Security"},"content":{"rendered":"\n<h2>XSS Prevention</h2>\n\n\n\n<p>XSS means cross-site scripting. CodeIgniter comes with XSS filtering security. This filter will prevent any malicious JavaScript code or any other code that attempts to hijack cookie and do malicious activities. To filter data through the XSS filter, use the <strong>xss_clean()</strong> method as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$data = $this->security->xss_clean($data);</code></pre>\n\n\n\n<p>You should use this function only when you are submitting data. The optional second Boolean parameter can also be used to check image file for XSS attack. This is useful for file upload facility. If its value is true, means image is safe and not otherwise.</p>\n\n\n\n<h2>SQL Injection Prevention</h2>\n\n\n\n<p>SQL injection is an attack made on database query. In PHP, we are use&nbsp;<strong>mysql_real_escape_string()</strong>&nbsp;function to prevent this along with other techniques but CodeIgniter provides inbuilt functions and libraries to prevent this.</p>\n\n\n\n<p>We can prevent SQL Injection in CodeIgniter in the following three ways −</p>\n\n\n\n<ul><li>Escaping Queries</li><li>Query Biding</li><li>Active Record Class</li></ul>\n\n\n\n<h3>Escaping Queries</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   $username = $this->input->post('username');\n   $query = 'SELECT * FROM subscribers_tbl WHERE user_name = '.\n      $this->db->escape($email);\n   $this->db->query($query);\n?></code></pre>\n\n\n\n<p><strong>$this-&gt;db-&gt;escape()</strong>&nbsp;function automatically adds single quotes around the data and determines the data type so that it can escape only string data.</p>\n\n\n\n<h3>Query Biding</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   $sql = \"SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?\";\n   $this->db->query($sql, array(3, 'live', 'Rick'));\n?></code></pre>\n\n\n\n<p>In the above example, the question mark(?) will be replaced by the array in the second parameter of query() function. The main advantage of building query this way is that the values are automatically escaped which produce safe queries. CodeIgniter engine does it for you automatically, so you do not have to remember it.</p>\n\n\n\n<h3>Active Record Class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   $this->db->get_where('subscribers_tbl',array\n      ('status'=> active','email' => 'info@arjun.net.in'));\n?></code></pre>\n\n\n\n<p>Using active records, query syntax is generated by each database adapter. It also allows safer queries, since the values escape automatically.</p>\n\n\n\n<h2>Hiding PHP Errors</h2>\n\n\n\n<p>In production environment, we often do not want to display any error message to the users. It is good if it is enabled in the development environment for debugging purposes. These error messages may contain some information, which we should not show to the site users for security reasons.</p>\n\n\n\n<p>There are three CodeIgniter files related with errors.</p>\n\n\n\n<h3>PHP Error Reporting Level</h3>\n\n\n\n<p>Different environment requires different levels of error reporting. By default, development will show errors but testing and live will hide them. There is a file called&nbsp;<strong>index.php</strong>&nbsp;in root directory of CodeIgniter, which is used for this purpose. If we pass zero as argument to&nbsp;<strong>error_reporting()</strong>&nbsp;function then that will hide all the errors.</p>\n\n\n\n<h3>Database Error</h3>\n\n\n\n<p>Even if you have turned off the PHP errors, MySQL errors are still open. You can turn this off in <strong>application/config/database.php</strong>. Set the <strong>db_debug</strong> option in <strong>$db</strong> array to <strong>FALSE</strong> as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$db&#91;'default']&#91;'db_debug'] = FALSE;</code></pre>\n\n\n\n<h3>Error log</h3>\n\n\n\n<p>Another way is to transfer the errors to log files. So, it will not be displayed to users on the site. Simply, set the <strong>log_threshold</strong> value in <strong>$config</strong> array to 1 in <strong>application/cofig/config.php</strong> file as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$config&#91;'log_threshold'] = 1;</code></pre>\n\n\n\n<h2>CSRF Prevention</h2>\n\n\n\n<p>CSRF stands for cross-site request forgery. You can prevent this attack by enabling it in the <strong>application/config/config.php</strong> file as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$config&#91;'csrf_protection'] = TRUE;</code></pre>\n\n\n\n<p>When you are creating form using&nbsp;<strong>form_open()</strong>&nbsp;function, it will automatically insert a CSRF as hidden field. You can also manually add the CSRF using the&nbsp;<strong>get_csrf_token_name()</strong>&nbsp;and&nbsp;<strong>get_csrf_hash()</strong>&nbsp;function. The&nbsp;<strong>get_csrf_token_name()</strong>&nbsp;function will return the name of the CSRF and&nbsp;<strong>get_csrf_hash()</strong>&nbsp;will return the hash value of CSRF.</p>\n\n\n\n<p>The CSRF token can be regenerated every time for submission or you can also keep it same throughout the life of CSRF cookie. By setting the value <strong>TRUE</strong>, in config array with key <strong>‘csrf_regenerate’</strong> will regenerate token as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$config&#91;'csrf_regenerate'] = TRUE;</code></pre>\n\n\n\n<p>You can also whitelist URLs from CSRF protection by setting it in the config array using the key <strong>‘csrf_exclude_uris’</strong> as shown below. You can also use regular expression.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$config&#91;'csrf_exclude_uris'] = array('api/person/add');</code></pre>\n\n\n\n<h2>Password Handling</h2>\n\n\n\n<p>Many developers do not know how to handle password in web applications, which is probably why numerous hackers find it so easy to break into the systems. One should keep in mind the following points while handling passwords −</p>\n\n\n\n<ul><li>DO NOT store passwords in plain-text format.</li><li>Always hash your passwords.</li><li>DO NOT use Base64 or similar encoding for storing passwords.</li><li>DO NOT use weak or broken hashing algorithms like MD5 or SHA1. Only use strong password hashing algorithms like BCrypt, which is used in PHP’s own Password Hashing functions.</li><li>DO NOT ever display or send a password in plain-text format.</li><li>DO NOT put unnecessary limits on your users’ passwords.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>XSS Prevention XSS means cross-site scripting. CodeIgniter comes with XSS filtering security. This filter will prevent any malicious JavaScript code or any other code that attempts to hijack cookie and do malicious activities. To filter data through the XSS filter, use the xss_clean() method as shown below. You should use this function only when you are submitting [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4237"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4237"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4237/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4237"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4237"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4237"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4238,"date":"2020-06-15T05:57:47","date_gmt":"2020-06-15T05:57:47","guid":{"rendered":"http://php.foobrdigital.com/?p=263"},"modified":"2020-06-15T05:57:47","modified_gmt":"2020-06-15T05:57:47","slug":"installation-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/installation-3/","title":{"rendered":"Installation"},"content":{"rendered":"\n<p>For managing dependencies, Laravel uses&nbsp;<strong>composer</strong>. Make sure you have a Composer installed on your system before you install Laravel. In this chapter, you will see the installation process of Laravel.</p>\n\n\n\n<p>You will have to follow the steps given below for installing Laravel onto your system −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Visit the following URL and download composer to install it on your system.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After the Composer is installed, check the installation by typing the Composer command in the command prompt as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/composer.jpg\" alt=\"Composer\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Create a new directory anywhere in your system for your new Laravel project. After that, move to path where you have created the new directory and type the following command there to install Laravel.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>composer create-project laravel/laravel –-prefer-dist</code></pre>\n\n\n\n<p>Now, we will focus on installation of version 5.7. In Laravel version 5.7, you can install the complete framework by typing the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>composer create-project laravel/laravel test dev-develop</code></pre>\n\n\n\n<p>The output of the command is as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/composer_create_project%20.jpg\" alt=\"Composer Create Project\"/></figure>\n\n\n\n<p>The Laravel framework can be directly installed with develop branch which includes the latest framework.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− The above command will install Laravel in the current directory. Start the Laravel service by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan serve</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− After executing the above command, you will see a screen as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/administrator.jpg\" alt=\"Administrator\"/></figure>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Copy the URL underlined in gray in the above screenshot and open that URL in the browser. If you see the following screen, it implies Laravel has been installed successfully.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/laravel_installed.jpg\" alt=\"Laravel Installed\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>For managing dependencies, Laravel uses&nbsp;composer. Make sure you have a Composer installed on your system before you install Laravel. In this chapter, you will see the installation process of Laravel. You will have to follow the steps given below for installing Laravel onto your system − Step 1&nbsp;− Visit the following URL and download composer [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[65],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4238"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4238"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4238/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4238"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4238"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4238"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]