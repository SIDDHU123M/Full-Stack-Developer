[
    {
        "id": 329,
        "date": "2020-05-06T07:25:24",
        "date_gmt": "2020-05-06T07:25:24",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=329"
        },
        "modified": "2020-12-25T19:09:01",
        "modified_gmt": "2020-12-25T19:09:01",
        "slug": "introduction-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/introduction-2\/",
        "title": {
            "rendered": "Introduction"
        },
        "content": {
            "rendered": "\n<p>In the era of rapid prototyping, we can get bright ideas, but sometimes they are not applicable if they take too much work. Often, the back-end is the limiting factor &#8211; many considerations never apply to server-side coding due to lack of knowledge or time.<\/p>\n\n\n\n<p>Firebase is a Backend-as-a-Service(BaaS) which started as a YC11 startup. It grew up into a next-generation app-development platform on Google Cloud Platform. Firebase (a NoSQLjSON database) is a real-time database that allows storing a list of objects in the form of a tree. We can synchronize data between different devices.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-introduction.png\" alt=\"Firebase Introduction\"\/><\/figure>\n\n\n\n<p>Google Firebase is Google-backed application development software which allows developers to develop&nbsp;<strong>Android, IOS,<\/strong>&nbsp;and&nbsp;<strong>Web apps<\/strong>. For reporting and fixing app crashes, tracking analytics, creating marketing and product experiments, firebase provides several tools.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-introduction2.png\" alt=\"Firebase Introduction\"\/><\/figure>\n\n\n\n<p>Firebase has three main services, i.e., a real-time database, user authentication, and hosting. We can use these services with the help of the Firebase iOS SDK to create apps without writing any server code.<\/p>\n\n\n\n<h2>History of Firebase<\/h2>\n\n\n\n<p><strong>Firebase<\/strong>\u00a0evolved from\u00a0<strong>Envolve<\/strong>. Envolve is a prior startup founded by\u00a0<strong>James Tamplin<\/strong>\u00a0and\u00a0<strong>Andrew Lee<\/strong>\u00a0in 2011. Envolve provided developers an API which allowed the integration of online chat functionality into their websites. After releasing the chat service, it found that the Evolve was being used to pass application data, which were not chat messages. Developers used Envolve to sync application to separate the real-time architecture and the chat system which powered it. In September 2011, Tamplin and Lee founded firebase as a separate company. It was lastly launched to the public in April 2012.<\/p>\n\n\n\n<p>Firebase Real-time Database was the first product of firebase. It is an API which syncs application data across Android, iOS, and Web devices. It gets stored on Firebase&#8217;s cloud. Then the firebase real-time database helps the developers to build real-time, collaborative applications.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-introduction3.png\" alt=\"Firebase Introduction\"\/><\/figure>\n\n\n\n<ul><li>In May 2012, after launching the beta, Firebase raised $1.1M in seed funding from Greylock Partners, venture capitalists Flybridge Capital Partners, New Enterprise Associates, and Founder Collective.<\/li><li>In June 2013, the company again raised $5.6M in\u00a0<strong>Series A funding<\/strong>\u00a0from Flybridge Capital Partners andventure capitalists Union Square Ventures.<\/li><li>Firebase launched two products in 2014, i.e., Firebase Hosting and Firebase Authentication. It positioned the company as a mobile backend as a service.<\/li><li>Firebase was acquired by Google in October 2014.<\/li><li>Google promoted Divshot to merge it with the Firebase team in October 2015.<\/li><li>In May 2016, Firebase expanded its services to become a unified platform for mobile developers. Now it has integrated with various other Google services, including AdMob, Google Cloud Platform, and Google Ads, to offer broader products and scale it for developers.<\/li><li>Google acquired Fabric and Crashlytics from Twitter in January 2017 to add Fabric and Crashlytics services to Firebase.<\/li><li>Firebase launched Cloud Firestore in October 2017. It is a realtime document database as the successor product for the original Firebase Realtime Database.<\/li><\/ul>\n\n\n\n<h2>Why use Firebase?<\/h2>\n\n\n\n<ul><li>Firebase manages real-time data in the database. So, it easily and quickly exchanges the data to and from the database. Hence, for developing mobile apps such as live streaming, chat messaging, etc., we can use Firebase.<\/li><li>Firebase allows syncing real-time data across all devices &#8211; iOS, Android, and Web &#8211; without refreshing the screen.<\/li><li>Firebase provides integration to Google Advertising, AdMob, Data Studio, BigQuery DoubleClick, Play Store, and Slack to develop our apps with efficient and accurate management and maintenance.<\/li><li>Everything from databases, analytics to crash reports are included in Firebase. So, the app development team can stay focused on improving the user experience.<\/li><li>Firebase applications can be deployed over a secured connection to the firebase server.<\/li><li>Firebase offers a simple control dashboard.<\/li><li>It offers a number of useful services to choose from.<\/li><\/ul>\n\n\n\n<h2>Pros and Cons of Firebase<\/h2>\n\n\n\n<p>Firebase has a lot of pros or advantages. Apart from the advantages, it has disadvantages too. Let&#8217;s take a look at these advantages and disadvantages:<\/p>\n\n\n\n<h3>Pros<\/h3>\n\n\n\n<ul><li>Firebase is a real-time database.<\/li><li>It has massive storage size potential.<\/li><li>Firebase is server-less.<\/li><li>It is highly secure.<\/li><li>It is the most advanced hosted BaaS solution.<\/li><li>It has minimal setup.<\/li><li>It provides three-way data binding via angular fire.<\/li><li>It provides simple serialization of app state.<\/li><li>We can easily access data, files, auth, and more.<\/li><li>There is no server infrastructure required to power apps with data.<\/li><li>It has JSON storage, which means no barrier between data and objects.<\/li><\/ul>\n\n\n\n<h3>Cons<\/h3>\n\n\n\n<ul><li>Firebase is not widely used, or battle-tested for enterprises.<\/li><li>It has very limited querying and indexing.<\/li><li>It provides no aggregation.<\/li><li>It has no map-reduce functionality.<\/li><li>It cannot query or list users or stored files.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In the era of rapid prototyping, we can get bright ideas, but sometimes they are not applicable if they take too much work. Often, the back-end is the limiting factor &#8211; many considerations never apply to server-side coding due to lack of knowledge or time. Firebase is a Backend-as-a-Service(BaaS) which started as a YC11 startup. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1626,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/329"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=329"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/329\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2035,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/329\/revisions\/2035"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1626"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=329"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=329"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=329"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2451,
        "date": "2020-05-06T07:27:09",
        "date_gmt": "2020-05-06T07:27:09",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=330"
        },
        "modified": "2020-12-25T19:09:01",
        "modified_gmt": "2020-12-25T19:09:01",
        "slug": "features-2-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/features-2-2\/",
        "title": {
            "rendered": "Introduction to Real-time DB"
        },
        "content": {
            "rendered": "\n<h2>What is Firebase Real-time Database?<\/h2>\n\n\n\n<p>Firebase Realtime Database is a cloud-hosted database that supports multiple platforms Android, iOS and Web. Firebase Realtime Database offers dynamic, extensible functions, and almost all Realtime data insertions, updation, and deletion. The Realtime Database is really just one big JSON object that the developers can manage in realtime. With just a single API, the Firebase database provides your app with both the current value of the data and any updates to that data. Its built-in broadcast functionality and an extremely simple to use API makes it cool.<\/p>\n\n\n\n<p>Firebase Realtime Database also comes with offline support out of the box. This feature simply kicks in when the app is in a not-so-reliable network state. In this Firebase Realtime Database section, will talk about the different use cases that will add more real-time look and feel to your application along with offline support without adding any third party utility.<\/p>\n\n\n\n<p>Another amazing benefit of Realtime Database is that it ships with mobile and web SDKs, allowing you to build your apps without the need for servers. When your users go offline, the Realtime Database SDKs use local cache on the device to serve and store changes. When the device comes online, the local data is automatically synchronized.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>What is Firebase Real-time Database? Firebase Realtime Database is a cloud-hosted database that supports multiple platforms Android, iOS and Web. Firebase Realtime Database offers dynamic, extensible functions, and almost all Realtime data insertions, updation, and deletion. The Realtime Database is really just one big JSON object that the developers can manage in realtime. With just [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1627,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2451"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2451"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2451\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2911,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2451\/revisions\/2911"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1627"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2451"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2451"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2451"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2452,
        "date": "2020-05-06T07:27:47",
        "date_gmt": "2020-05-06T07:27:47",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=331"
        },
        "modified": "2020-12-25T19:09:01",
        "modified_gmt": "2020-12-25T19:09:01",
        "slug": "android-studio-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/android-studio-2\/",
        "title": {
            "rendered": "Setting Up Firebase"
        },
        "content": {
            "rendered": "\n<p>Let&#8217;s start by going to firebase console console.firebase.google.com. Then just click on &#8220;Add Project&#8221; and give your project a name and create the project.<\/p>\n\n\n\n<p>After that you are immediately directed inside your newly created project. As you can see, you can easily link this project to an iOS, Android or a web app. We are going to use firebase with client side JavaScript, hence click on &#8220;Add Firebase to your web app&#8221;<\/p>\n\n\n\n<p>There you get the information which you&#8217;ll need to connect to this firebase project.<\/p>\n\n\n\n<p>Now before we start writing code, let&#8217;s make sure that we are able to read and write to the database without needing an authentication. Clearly this is bad practice and should not be done in production mode but we are experimenting.<\/p>\n\n\n\n<p>Close the above window and navigate to Database from side menu and select &#8220;Realtime Database&#8221; then click on &#8220;rules&#8221;, then just change &#8220;auth != null&#8221; to true for both read and write and select publish. The warning is logical but that&#8217;s ok.<\/p>\n\n\n\n<p>We&#8217;ll be working with client-side JavaScript. If you want to follow along all you&#8217;ll need is an index.html and a script.js file. Link the script.js file and the firebase.js file (which firebase itself instructed that we do) to the HTML file, something like so:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n    &lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"UTF-8\">\n  &lt;title>Firebase Demo App&lt;\/title>\n\n&lt;\/head>\n&lt;body>\n &lt;!-- The core Firebase JS SDK is always required and must be listed first -->\n &lt;!-- The core Firebase JS SDK is always required and must be listed first -->\n&lt;script src=\"https:\/\/www.gstatic.com\/firebasejs\/7.6.2\/firebase-app.js\">&lt;\/script>\n\n &lt;!-- TODO: Add SDKs for Firebase products that you want to use\n      https:\/\/firebase.google.com\/docs\/web\/setup#available-libraries -->\n&lt;script src=\"https:\/\/www.gstatic.com\/firebasejs\/7.6.2\/firebase-analytics.js\">&lt;\/script>\n\n    &lt;script>\n  \/\/ Your web app's Firebase configuration\n  var firebaseConfig = {\n    apiKey: \"your_api_key_here\",\n    authDomain: \"your_domain_url_here\",\n    databaseURL: \"your_database_url_here\",\n    projectId: \"your_project_id_here\",\n    storageBucket: \"your_storage_bucket_here\",\n    messagingSenderId: \"message_sending_id_here\",\n    appId: \"your_app_id_here\",\n    measurementId: \"your_measurement_id\"\n  };\n  \/\/ Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  firebase.analytics();\n&lt;\/script>\n&lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>To host your site with Firebase Hosting, you need the Firebase CLI (a command line tool). Run the following npm command to install the CLI or update to the latest CLI version<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g firebase-tools<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Let&#8217;s start by going to firebase console console.firebase.google.com. Then just click on &#8220;Add Project&#8221; and give your project a name and create the project. After that you are immediately directed inside your newly created project. As you can see, you can easily link this project to an iOS, Android or a web app. We are [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1583,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2452"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2452"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2452\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2910,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2452\/revisions\/2910"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1583"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2452"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2452"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2452"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2453,
        "date": "2020-05-06T07:29:21",
        "date_gmt": "2020-05-06T07:29:21",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=332"
        },
        "modified": "2020-12-25T19:09:01",
        "modified_gmt": "2020-12-25T19:09:01",
        "slug": "adding-firebase-to-app-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/adding-firebase-to-app-2\/",
        "title": {
            "rendered": "Working with Data"
        },
        "content": {
            "rendered": "\n<h2>Working with Data in Realtime Database<\/h2>\n\n\n\n<p>Data is typically the backbone of any web application, and saving is what most tutorials or guides describe as persisting it into a database. Whenever we think about any kind of app, the data provides a very important role.<\/p>\n\n\n\n<p>Actually Firebase is not exactly a database but is very similar to other databases that you might find on the market these days. Firebase a NoSQL database that has Realtime functionality built into it, which means that when you save data into it, it will automatically sync and reflect the changes on all platfroms when the data will change, typically all your users, also known as consumers.<\/p>\n\n\n\n<h3>How to save data to Firebase Realtime Database<\/h3>\n\n\n\n<p>Head to your Firebase project dashboard and select Dashboard from the side menu.<\/p>\n\n\n\n<p>If you have done any kind of programming or web development, you will recognize that our data will be saved in JSON format. This is actually quite good, as it will mean less time processing and searching for data, so NoSQL idle that we usually have to deal with a relational SQL-based database. Remember, in order to do anything with the Firebase client, you will need to have an instance or a reference to the functionality required so that we can do something like this<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var db = firebase.database();\n<\/code><\/pre>\n\n\n\n<p>In the above code, we have created a reference of the Firebase database. In order to save data in Firebase Realtime datbase, we have two methods provided by firebase API. we have the set() and push() methods. Let&#8217;s explore them:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  db.ref('codepoint\/').set({\n  name: \"Learn Firebase\",\n  message: \"Firebase is Awesome\"\n  });<\/code><\/pre>\n\n\n\n<p>In the above code, we used the database reference that we created and simply navigated to the codepoint route to user codepoint, Now we should be able to see our data on the firebase realtime dashboard.<\/p>\n\n\n\n<h3>Fetching Data from Firebase<\/h3>\n\n\n\n<p>In order to fetch data from firebase, like when you load our application, you typically want to grab all the data from there directly and bind it to your app UI, also we want to grab also the most recent data from there as well, this is also possible using Firebase Realtime Database API. So, let&#8217;s suppose we have that part of our system where we just want it to read the data once, which means we don&#8217;t want it to be updated with each change to the database. The Firebase API has the once() method, which is pretty explicit when it comes to functionality. So let&#8217;s see how we can make that happen in our apps:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase.database().ref('\/apps).once('value').then((snapshot)\n          => {\n    let apps = snapshot.val();\n        });<\/code><\/pre>\n\n\n\n<p>So let&#8217;s discuss the code above. We started by taking a reference to the&nbsp;apps&nbsp;section of our database then We used once()&nbsp;to grab the data that will be used just once, which means no further update of the apps section will raise an event, and finally we&#8217;re returning a snapshot&nbsp;of data. The snapshot will contain all the data that has returned from the firebase realtime database.<\/p>\n\n\n\n<p>Now what about when there is a chance that the data will change over-time and we want to continuously sync with the data and update the UI when data has changed, Such functionality is really easy to implement with Firebase, using nothing but the Firebase database API. So let&#8217;s see how we can make it happen:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>   var ourApps = firebase.database().ref('\/apps');\n    adminRef.on('value',(snapshot) => {\n    \/\/implement your custom logic here.\n    });<\/code><\/pre>\n\n\n\n<p>So in this tutorial we&#8217;ve learned how we can store our data on firebase realtime database and how we can get access to that data whenever we need with just few lines of code.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Working with Data in Realtime Database Data is typically the backbone of any web application, and saving is what most tutorials or guides describe as persisting it into a database. Whenever we think about any kind of app, the data provides a very important role. Actually Firebase is not exactly a database but is very [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1584,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2453"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2453"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2453\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2909,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2453\/revisions\/2909"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1584"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2453"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2453"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2453"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2454,
        "date": "2020-05-06T07:29:44",
        "date_gmt": "2020-05-06T07:29:44",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=333"
        },
        "modified": "2020-12-25T19:09:01",
        "modified_gmt": "2020-12-25T19:09:01",
        "slug": "firebase-assistance-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-assistance-2\/",
        "title": {
            "rendered": "Updating Data"
        },
        "content": {
            "rendered": "\n<h2>Updating Data in Firebase<\/h2>\n\n\n\n<p>In the previous tutorial, we&#8217;ve learned how we can add &amp; fetch that data into firebase real-time database. Now let&#8217;s see how we can update that data. The update functionalities are widely present in all the applications. Let&#8217;s say we want to change the data that we&#8217;ve stored already, for this purpose firebase provides a&nbsp;<code>update()<\/code>&nbsp;&amp;&nbsp;<code>set()<\/code>methods. Let&#8217;s see how it works<\/p>\n\n\n\n<p>The&nbsp;<code>update()<\/code>&nbsp;function will give the options to send update calls to the firebase database, and won&#8217;t do anything besides the expected behavior of an update function, it will update the data without altering the reference of the record. The&nbsp;<code>set()<\/code>&nbsp;function, within its behavior, changes the reference to the data itself while replacing it with a new value.<\/p>\n\n\n\n<p>Let&#8217;s imagine a scenario where we want to update the tweets.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n       let tweet = {};\n       \/\/ Get a key for a new Entry\n       let newTweetKey =\n       firebase.database().ref().child('tweets').push().key;\n       let uid = firebase.auth().currentUser.uid;\n       var updates = {};\n       updates&#91;'\/tweets\/' + newTweetKey] = tweet;\n       updates&#91;'\/user-tweets\/' + uid + '\/' + newTweetKey] =\n         tweet;\n       firebase.database().ref().update(updates);<\/code><\/pre>\n\n\n\n<p>So let&#8217;s discuss what we did exactly, First, we defined the basic structure of a Tweet and then grabbed the new tweet and current connected user. We created a new updated object and both added a route to our overall tweets and updated the one with its given key, also the tweets will be added or saved over user&#8217;s own personal tweets because we&#8217;ve updated both places in the same time. We called the <strong>update()<\/strong> function over the root reference of our database and since we&#8217;re using the schema, the Updates object will simultaneously update both fields with the needed data.<\/p>\n\n\n\n<p>Hurray! we&#8217;ve successfully updated both fields with one call. Keep in mind that the usage of <strong>set()<\/strong> will create a new entry, the thing that really doesn&#8217;t want to happen while updating our data.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Updating Data in Firebase In the previous tutorial, we&#8217;ve learned how we can add &amp; fetch that data into firebase real-time database. Now let&#8217;s see how we can update that data. The update functionalities are widely present in all the applications. Let&#8217;s say we want to change the data that we&#8217;ve stored already, for this [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1585,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2454"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2454"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2454\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2908,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2454\/revisions\/2908"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1585"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2454"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2454"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2454"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2455,
        "date": "2020-05-06T07:30:32",
        "date_gmt": "2020-05-06T07:30:32",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=334"
        },
        "modified": "2020-12-25T19:09:01",
        "modified_gmt": "2020-12-25T19:09:01",
        "slug": "firebase-authentication-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-authentication-2\/",
        "title": {
            "rendered": "Deleting Data"
        },
        "content": {
            "rendered": "\n<h2>Deleting Data from Firebase Realtime Database<\/h2>\n\n\n\n<p>Now let&#8217;s see how we can delete\/remove data from firebase real-time database. In order to delete data in Firebase Database, we simply use the remove() function provided by firebase API over our data reference. Let&#8217;s see how it works<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> let tweetRef = \/\/TODO : Get Tweet Reference.\n     firebase.database().ref(`path\/${tweetRef}`).remove();<\/code><\/pre>\n\n\n\n<p>Congratulations! You&#8217;ve successfully deleted a tweet! It&#8217;s quite obvious now, we can use these methods within our Firebase application that simply works outside of the box.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Deleting Data from Firebase Realtime Database Now let&#8217;s see how we can delete\/remove data from firebase real-time database. In order to delete data in Firebase Database, we simply use the remove() function provided by firebase API over our data reference. Let&#8217;s see how it works Congratulations! You&#8217;ve successfully deleted a tweet! It&#8217;s quite obvious now, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1624,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2455"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2455"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2455\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2907,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2455\/revisions\/2907"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1624"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2455"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2455"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2455"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2456,
        "date": "2020-05-06T07:31:47",
        "date_gmt": "2020-05-06T07:31:47",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=335"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "signing-with-google-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/signing-with-google-2\/",
        "title": {
            "rendered": "Firebase Data Events"
        },
        "content": {
            "rendered": "\n<h2>Firebase Event Types<\/h2>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p>Firebase also offers several different and important event types for reading data. Some of the most commonly used ones are described below.<\/p>\n\n\n\n<h2>value Event<\/h2>\n\n\n\n<p>The first event type is&nbsp;<strong>value<\/strong>. This event type will be triggered every time the data changes and it will retrieve all the data including children from the firebase real-time database.<\/p>\n\n\n\n<h2>child_added Event<\/h2>\n\n\n\n<p>This event type will be triggered once for every player and every time a new player is added to our data. It is useful for reading list data because we get access of the added player and previous player from the list.<\/p>\n\n\n\n<h3>Demo<\/h3>\n\n\n\n<p>Let us consider the following Demo.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>let totalApps = firebase.database().ref(\"apps\/\");\n\nappssRef.on(\"child_added\", function(data, prevChildKey) {\n   let newApp = data.val();\n   console.log(\"name: \" + newApp.name);\n      });<\/code><\/pre>\n\n\n\n<h2>child_changed Method<\/h2>\n\n\n\n<p>This firebase event is triggered when the data has changed.<\/p>\n\n\n\n<h3>Demo<\/h3>\n\n\n\n<p>Let us consider the following Demo.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>let appsRef = firebase.database().ref(\"apps\/\");\n\nappsRef.on(\"child_changed\", function(data) {\n   let app = data.val();\n   console.log(\"The app name is updated to \" + app.name);\n});<\/code><\/pre>\n\n\n\n<h2>child_removed<\/h2>\n\n\n\n<p>So If we want to get access of deleted data, we can use&nbsp;<strong>child_removed<\/strong>&nbsp;event type.<\/p>\n\n\n\n<h3>Demo<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let appsRef = firebase.database().ref(\"apps\/\");\n\nappsRef.on(\"child_removed\", function(data) {\n   let deletedApp = data.val();\n   console.log(deletedApp.name + \" has been deleted\");\n});<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Firebase Event Types Firebase also offers several different and important event types for reading data. Some of the most commonly used ones are described below. value Event The first event type is&nbsp;value. This event type will be triggered every time the data changes and it will retrieve all the data including children from the firebase [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1587,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2456"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2456"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2456\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2906,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2456\/revisions\/2906"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1587"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2456"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2456"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2456"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 738,
        "date": "2020-05-06T07:32:53",
        "date_gmt": "2020-05-06T07:32:53",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=336"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "signing-with-facebook-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/signing-with-facebook-2\/",
        "title": {
            "rendered": "Offline Support"
        },
        "content": {
            "rendered": "\n<p>Firebase comes with a cool Offline support out of the box. There&#8217;s no need to do any magical trick or write any complex piece of code, all you need to do is to focus on your application logic and integrate the Firebase API in the best way you can. All the changes you will do to the database will be synchronized once connected to a stable connectivity source. Before we start make sure your application is fully integrated with firebase.<\/p>\n\n\n\n<h3>Checking Connection<\/h3>\n\n\n\n<p>Let&#8217;s see how we can check firebase connection and perform some actions<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>      let checkConnection = firebase.database().ref(\".info\/connected\");\n      checkConnection.on(\"value\", function(res) {\n    if (res.val() === true) {\n          \/\/TODO : show connection status as connected\n         } else {\n         \/\/TODO : show connection status as disconected\n         }\n    });<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Firebase comes with a cool Offline support out of the box. There&#8217;s no need to do any magical trick or write any complex piece of code, all you need to do is to focus on your application logic and integrate the Firebase API in the best way you can. All the changes you will do [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1588,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/738"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=738"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/738\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2905,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/738\/revisions\/2905"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1588"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=738"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=738"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=738"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2457,
        "date": "2020-05-06T07:35:01",
        "date_gmt": "2020-05-06T07:35:01",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=347"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "signing-with-phone-number-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/signing-with-phone-number-2\/",
        "title": {
            "rendered": "Intro to Files Storage"
        },
        "content": {
            "rendered": "\n<h2>Getting Started with Files Storage<\/h2>\n\n\n\n<p>Firebase uploads files to the Google Cloud Storage. Unless configured otherwise, the files that are uploaded to Cloud Storage will also be accessible by App Engine. both pieces share the same buckets. Be sure to restrict access to your bucket when setting up authentication.<\/p>\n\n\n\n<p>We&#8217;ll need to use the initial Firebase configuration code, as we did in the previous section (Firebase Real-time Database), everything apart from the sections concerning the database. Add the following to the script.js:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var config = {\n    apiKey: \"*******************\",\n    authDomain: \"******.firebaseapp.com\",\n    databaseURL: \"https:\/\/******.firebaseio.com\",\n    projectId: \"******\",\n    storageBucket: \"******.appspot.com\",\n    messagingSenderId: \"***************\"\n    };\n    firebase.initializeApp(config);<\/code><\/pre>\n\n\n\n<p>Also, as we&#8217;ve done with the real-time database, in order to play around with storage we need to remove the restrictions so that we can read and write without needing authentication.<\/p>\n\n\n\n<p>It&#8217;s clearly a bad idea to do this in production but this is just to give us the freedom to learn this service in isolation. All you need to do is navigate to Storage then rules and then edit read and write privileges to true.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Getting Started with Files Storage Firebase uploads files to the Google Cloud Storage. Unless configured otherwise, the files that are uploaded to Cloud Storage will also be accessible by App Engine. both pieces share the same buckets. Be sure to restrict access to your bucket when setting up authentication. We&#8217;ll need to use the initial [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1589,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2457"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2457"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2457\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2904,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2457\/revisions\/2904"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1589"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2457"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2457"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2457"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2458,
        "date": "2020-05-06T07:37:57",
        "date_gmt": "2020-05-06T07:37:57",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=348"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "authentication-using-email-password-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/authentication-using-email-password-2\/",
        "title": {
            "rendered": "Sending Files to Storage"
        },
        "content": {
            "rendered": "\n<p>Now if we click on Storage from the side menu, then files you&#8217;ll see the message, &#8220;there are no files here yet&#8221;. Our aim in this tutorial is to add files in there from our web app\/site. Let&#8217;s do that. In script.js let&#8217;s initialise the Storage() service.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const storage = firebase.storage();<\/code><\/pre>\n\n\n\n<p>There&#8217;s a two steps involved in uploading a file to the firebase storage. First, we need to specify where we want the file to go and what name it should have.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>let locationRef = storage.ref('pets\/dog1.png')<\/code><\/pre>\n\n\n\n<p>In the above code, we are saying call the file dog1.png and add it into a folder cold pets. So far that&#8217;s just a reference, it does nothing, it simply waits for the file to be put into it. The following line actually pushes the local file to the firebase server.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>locationRef.put(&#91;the file])<\/code><\/pre>\n\n\n\n<h3>Uploading files to Firebase Storage<\/h3>\n\n\n\n<p>As you saw, there are only three lines of code to get an asset stored in the firebase storage. Now let&#8217;s use those in combination with vanilla JavaScript to make actual uploads. In our HTML we had this code<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;label for=\"submit\">Click to Upload File&lt;\/label>\n&lt;input type=\"file\" value=\"upload\" id=\"submitButton\" \/> <\/code><\/pre>\n\n\n\n<p>When the user clicks on the input\/label, then user have to select an asset and finally we want to upload that asset to firebase<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const storage = firebase.storage()\nconst submitButton = document.getElementById('submitButton');\nsubmitButton.addEventListener('change', (e)=>{\n    let file = e.target.files&#91;0];\n    let locationRef = storage.ref('pets\/' + file.name)\n    locationRef.put(file)\n})<\/code><\/pre>\n\n\n\n<p>As you can see, the exact same lines. This time the name of the file will be the same name of the local file, and the file being pushed to the server is the file itself. If you go back to your firebase console, to Storage, you should see your pets folder and inside it, your dog photo.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Now if we click on Storage from the side menu, then files you&#8217;ll see the message, &#8220;there are no files here yet&#8221;. Our aim in this tutorial is to add files in there from our web app\/site. Let&#8217;s do that. In script.js let&#8217;s initialise the Storage() service. There&#8217;s a two steps involved in uploading a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1590,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2458"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2458"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2458\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2903,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2458\/revisions\/2903"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1590"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2458"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2458"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2458"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2459,
        "date": "2020-05-06T07:39:50",
        "date_gmt": "2020-05-06T07:39:50",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=349"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "authentication-using-email-link-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/authentication-using-email-link-2\/",
        "title": {
            "rendered": "Reading &#038; Deleting"
        },
        "content": {
            "rendered": "\n<p>In the previous tutorial, we&#8217;ve learned how we can upload files to the firebase storage and now let&#8217;s see how we can get back those files. In order to get a file out of storage, you need to know the folder it&#8217;s in and its file name. With that the full url can be found.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>let storageRef = storage.ref('pets')\nlet dogImage = storageRef.child('dog1.png');<\/code><\/pre>\n\n\n\n<p>There is also a short hand for the above code. So the above code can also be written like that:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>let storageRef = storage.ref('pets\/dog1.png');<\/code><\/pre>\n\n\n\n<p>With this code we should be able to fetch that image that we stored in the previous lecture.<\/p>\n\n\n\n<h3>Deleting Files from Firebase Storage<\/h3>\n\n\n\n<p>The process of deleting files is just as simple as everything else, follows the same pattern, point to the file, then run delete() on it<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>let storageRef = storage.ref('cats\/cat.png');\nstorageRef.delete().then(function() {\n    \/\/ File is Successfully removed\n}).catch(function(error) {\n    \/\/ File is not removed :(\n});<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In the previous tutorial, we&#8217;ve learned how we can upload files to the firebase storage and now let&#8217;s see how we can get back those files. In order to get a file out of storage, you need to know the folder it&#8217;s in and its file name. With that the full url can be found. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1591,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2459"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2459"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2459\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2902,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2459\/revisions\/2902"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1591"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2459"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2459"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2459"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2460,
        "date": "2020-05-06T07:40:42",
        "date_gmt": "2020-05-06T07:40:42",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=350"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "realtime-database-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/realtime-database-2\/",
        "title": {
            "rendered": "Error Handling"
        },
        "content": {
            "rendered": "\n<p>As we all know and realize that the proper showcasing of errors on the client side is a serious and urgent matter. So in this tutorial we will learn how we can add an error handling mechanism that will simply kicks in when there is an error related to the file.<\/p>\n\n\n\n<p>For this example, Let&#8217;s imagine we are deleting a file that we stored earlier in our firebase storage.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> \/\/Deleting an image from the bucket.\n        imageRef.getMetadata()\n          .then((meta) => {\n             console.log(meta);\n            })\n            .catch(err => {\n    switch (err.code) {\n                       case 'storage\/unknown':\n                       break;\n                       case : 'storage\/project_not_found':\n                       breaks;\n                       case 'storage\/object_not_found':\n                       breaks;\n                       case : 'storage\/unauthenticated':\n                       breaks;\n                       case : 'storage\/unauthorized':\n                       breaks;\n                  }\n            });<\/code><\/pre>\n\n\n\n<p>In the above code block, we just covered a small set of error messages that we might get in our development. You can read more in the official documentation, and incorporate the error message that you think suits your application the most: https:\/\/firebase.google.com\/docs\/storage\/web\/handle-errors.<\/p>\n\n\n\n<p>Switching over the err.code type, we&#8217;ll get a string that represents the error type we&#8217;re facing. Then we can provide the proper showcasing of the error, with the help of which we can have a UX ready application. This happens because providing the explicit error message can save time on the user side, as well as money for us as the application creators.<\/p>\n\n\n\n<p>This wraps up everything we have done with Firebase Storage bucket APIs. Now you can build and incorporate the service with confidence in your exciting new application.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>As we all know and realize that the proper showcasing of errors on the client side is a serious and urgent matter. So in this tutorial we will learn how we can add an error handling mechanism that will simply kicks in when there is an error related to the file. For this example, Let&#8217;s [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1592,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2460"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2460"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2460\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2901,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2460\/revisions\/2901"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1592"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2460"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2460"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2460"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2461,
        "date": "2020-05-06T07:41:40",
        "date_gmt": "2020-05-06T07:41:40",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=351"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "setup-configuration-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/setup-configuration-2\/",
        "title": {
            "rendered": "Email Authentication"
        },
        "content": {
            "rendered": "\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p>In this tutorial, we will learn how we can use Firebase Email\/Password authentication and give our applications or website a strong and robust users account system.<\/p>\n\n\n\n<p>Remember, Each of the authentication methods we aim to use have to be enabled, so let&#8217;s first enable &#8220;Email\/Password&#8221; method in your firebase console.<\/p>\n\n\n\n<p>To do so navigate to the firebase console, select the project which you&#8217;ve created by following the instructions in the firebase&#8217;s real-time database tutorial, then select &#8216;Authentication&#8217; and &#8216;SIGN-IN METHOD&#8217;, finally select the &#8216;Email\/Password&#8217; method and enable it<\/p>\n\n\n\n<h2>Create user<\/h2>\n\n\n\n<p>To authenticate a user, we can use the&nbsp;<strong>createUserWithEmailAndPassword(email, password)<\/strong>&nbsp;method. In script.js let&#8217;s write the code to create the user.<\/p>\n\n\n\n<h3>Demo<\/h3>\n\n\n\n<p>Let us consider the following Demo.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var email = \"myemail@email.com\";\nvar password = \"mypassword\";\n\nfirebase.auth().createUserWithEmailAndPassword(email, password).catch(function(error) {\n   console.log(error.code);\n   console.log(error.message);\n});<\/code><\/pre>\n\n\n\n<p>Now head over to firebase console and you should see your newly created user there.<\/p>\n\n\n\n<h2>Sign In<\/h2>\n\n\n\n<p>The Sign-in process is almost the same. We are using the&nbsp;<strong>signInWithEmailAndPassword(email, password)<\/strong>&nbsp;to sign in the user.<\/p>\n\n\n\n<h3>Demo<\/h3>\n\n\n\n<p>Let us consider the following Demo.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var email = \"myemail@email.com\";\nvar password = \"mypassword\";\n\nfirebase.auth().signInWithEmailAndPassword(email, password).catch(function(error) {\n   console.log(error.code);\n   console.log(error.message);\n});<\/code><\/pre>\n\n\n\n<h2>Logging out<\/h2>\n\n\n\n<p>And finally we can logout the user with the&nbsp;<strong>signOut()<\/strong>&nbsp;method.<\/p>\n\n\n\n<h3>Demo<\/h3>\n\n\n\n<p>Let us consider the following Demo.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase.auth().signOut().then(function() {\n   console.log(\"Logged out!\")\n}, function(error) {\n   console.log(error.code);\n   console.log(error.message);\n});<\/code><\/pre>\n\n\n\n<p>Let&#8217;s say we want to change the state of the app when user sign in or sign out. we would do something like that to accomplish this.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase.auth().onAuthStateChanged(user=>{\n  if(user){\n document.getElementById(\"btnLogOut\").classList.remove('hide')\n  } else{\n    document.getElementById(\"btnLogOut\").classList.add('hide')\n  }\n})<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this tutorial, we will learn how we can use Firebase Email\/Password authentication and give our applications or website a strong and robust users account system. Remember, Each of the authentication methods we aim to use have to be enabled, so let&#8217;s first enable &#8220;Email\/Password&#8221; method in your firebase console. To do so navigate to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1625,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2461"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2461"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2461\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2900,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2461\/revisions\/2900"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1625"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2461"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2461"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2461"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2462,
        "date": "2020-05-06T07:43:14",
        "date_gmt": "2020-05-06T07:43:14",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=352"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "data-organization-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/data-organization-2\/",
        "title": {
            "rendered": "Facebook Authentication"
        },
        "content": {
            "rendered": "\n<p>Just as we&#8217;ve done previously, let&#8217;s head over at firebase Authentication setting and enable Facebook authentication. Note that it requires an &#8220;App ID&#8221; and an &#8220;App Secret&#8221;. These are obtained from &#8220;Facebook app configuration&#8221; which you, as the developer, have to set up. Let&#8217;s do that now.<\/p>\n\n\n\n<p>Navigate to Facebook for developers. At the top, on the right, Hover over &#8220;My Apps&#8221; and navigate to &#8220;Add a New App&#8221;, then give it a name and click &#8220;Create App Id&#8221;. You are then directed to select a product.<\/p>\n\n\n\n<p>We need &#8220;Facebook Login&#8221;, hover over it and select &#8220;Set Up&#8221;, then select &#8220;Web&#8221; as the desired platform. Next, give it a site url and click &#8220;save&#8221; then just navigate to &#8220;Settings&#8221;, under &#8220;Facebook Login&#8221;.<\/p>\n\n\n\n<p>You need to provide it with a &#8220;Valid OAuth redirect URIs&#8221;. You get that over at firebase when enabling facebook.<\/p>\n\n\n\n<p>Copy that URI and pass it over at Facebook. Save the changes.<\/p>\n\n\n\n<p>Then, select &#8216;Dashboard&#8217; from the sidebar and copy the &#8220;App ID&#8221; and &#8220;App Secret&#8221; and fill the above form.<\/p>\n\n\n\n<p>Finally, click save.<\/p>\n\n\n\n<h2>Step 1 &#8211; Enable Facebook Auth<\/h2>\n\n\n\n<p>Open Firebase dashboard and click&nbsp;<strong>Authentication<\/strong>&nbsp;in side menu. Next, we need to choose&nbsp;<strong>SIGN-IN-METHOD<\/strong>&nbsp;in tab bar. We will enable Facebook auth and leave this open since we need to add&nbsp;<strong>App ID<\/strong>&nbsp;and&nbsp;<strong>App Secret<\/strong>&nbsp;when we finish step 2.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>document.getElementById('withFB').addEventListener( 'click', e=>{\n      const fbProvider = new firebase.auth.FacebookAuthProvider();\n      const promise = firebase.auth().signInWithPopup(fbProvider)\n      promise.then(function(result) {\n    console.log(result)\n    \/\/ ...\n  }).catch(function(error) {\n          \/\/ ...\n  });\n})<\/code><\/pre>\n\n\n\n<p>Now, when user clicks on the facebook button, they will get the usual pop-up asking for access, and that&#8217;s it!<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Just as we&#8217;ve done previously, let&#8217;s head over at firebase Authentication setting and enable Facebook authentication. Note that it requires an &#8220;App ID&#8221; and an &#8220;App Secret&#8221;. These are obtained from &#8220;Facebook app configuration&#8221; which you, as the developer, have to set up. Let&#8217;s do that now. Navigate to Facebook for developers. At the top, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1594,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2462"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2462"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2462\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2899,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2462\/revisions\/2899"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1594"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2462"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2462"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2462"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2463,
        "date": "2020-05-06T07:45:53",
        "date_gmt": "2020-05-06T07:45:53",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=353"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "read-write-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/read-write-2\/",
        "title": {
            "rendered": "Google Authentication"
        },
        "content": {
            "rendered": "\n<p>In this tutorial, we will learn you how to set up Google authentication in our apps with Firebase Authentication. In the Previous tutorial we&#8217;ve seen how we can integrate facebook authentication now it&#8217;s time to see the process for Google.<\/p>\n\n\n\n<h2>Step 1 &#8211; Enable Google Authentication<\/h2>\n\n\n\n<p>Open Firebase dashboard and click&nbsp;<strong>Auth<\/strong>&nbsp;on the left side menu. To open the list of available methods, you need to click on&nbsp;<strong>SIGN_IN_METHODS<\/strong>&nbsp;in the tab menu.<\/p>\n\n\n\n<p>Now you can choose&nbsp;<strong>Google<\/strong>&nbsp;from the list, enable it and save it.<\/p>\n\n\n\n<h2>Step 2 &#8211; Create Buttons<\/h2>\n\n\n\n<p>Inside our&nbsp;<strong>index.html<\/strong>, we will add two buttons.<\/p>\n\n\n\n<h3>index.html<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button onclick = \"googleSignin()\">Google Signin&lt;\/button>\n&lt;button onclick = \"googleSignout()\">Google Signout&lt;\/button><\/code><\/pre>\n\n\n\n<h2>Step 3 &#8211; Signin and Signout<\/h2>\n\n\n\n<p>In this step, we will create Signin and Signout functions. We will use&nbsp;<strong>signInWithPopup()<\/strong>&nbsp;and&nbsp;<strong>signOut()<\/strong>&nbsp;methods.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var provider = new firebase.auth.GoogleAuthProvider();\n\nfunction googleSignin() {\n   firebase.auth()\n\n   .signInWithPopup(provider).then(function(result) {\n      var token = result.credential.accessToken;\n      var user = result.user;\n\n      console.log(token)\n      console.log(user)\n   }).catch(function(error) {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n\n      console.log(error.code)\n      console.log(error.message)\n   });\n}\n\nfunction googleSignout() {\n   firebase.auth().signOut()\n\n   .then(function() {\n      console.log('Signout Succesfull')\n   }, function(error) {\n      console.log('Signout Failed')\n   });\n}<\/code><\/pre>\n\n\n\n<p>After we refresh the page, we can click on the&nbsp;<strong>Google Signin<\/strong>&nbsp;button to trigger the Google popup. If signing in is successful, the developer console will log in our user.<\/p>\n\n\n\n<p>We can also click on the&nbsp;<strong>Google Signout<\/strong>&nbsp;button to logout from the app. The console will confirm that the logout was successful.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this tutorial, we will learn you how to set up Google authentication in our apps with Firebase Authentication. In the Previous tutorial we&#8217;ve seen how we can integrate facebook authentication now it&#8217;s time to see the process for Google. Step 1 &#8211; Enable Google Authentication Open Firebase dashboard and click&nbsp;Auth&nbsp;on the left side menu. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1595,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2463"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2463"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2463\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2898,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2463\/revisions\/2898"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1595"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2463"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2463"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2463"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2464,
        "date": "2020-05-06T07:47:35",
        "date_gmt": "2020-05-06T07:47:35",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=354"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "update-and-delete-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/update-and-delete-2\/",
        "title": {
            "rendered": "Twitter Authentication"
        },
        "content": {
            "rendered": "\n<p>Twitter is the most used social media platform in the world, with more than 350 million active users. We can&#8217;t simply forget about integrating it into our application. In this chapter, we will explain how to use Twitter authentication.<\/p>\n\n\n\n<p>Before we start coding our cool application, we need to make some configurations within our application. Head to your Firebase Console &gt; Authentication &gt; SIGN-IN METHOD tab and activate the Twitter option.<\/p>\n\n\n\n<p>After that we have to create a Twitter application so we can get the app key and secret. To create a Twitter application, please go to https:\/\/apps.twitter.com\/ and create your Twitter application. Once done, get Keys and Access tokens section and grab the key and secret from there. Then simply copy and paste them to your Firebase console.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> let twitterLogin =\n      document.getElementById('twitterLogin');\n      twitterLogin.addEventListener('click', () => {\n      \/\/TODO: Add Logic here.\n      });<\/code><\/pre>\n\n\n\n<p>Before we move anywhere, we need to configure the twitterProvider object by using the following code line:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>   let twitterProvider = new\n      firebase.auth.TwitterAuthProvider();<\/code><\/pre>\n\n\n\n<p>Now, let&#8217;s exploit the Firebase authentication API calling with the help of the following code block:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase.auth().signInWithPopup(\n        twitterProvider).then(function\n       (result) {\n      console.log(result);\n      }).catch(function (error) {\n      \/\/ Handle Errors here.\n      });<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Twitter is the most used social media platform in the world, with more than 350 million active users. We can&#8217;t simply forget about integrating it into our application. In this chapter, we will explain how to use Twitter authentication. Before we start coding our cool application, we need to make some configurations within our application. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1596,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2464"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2464"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2464\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2897,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2464\/revisions\/2897"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1596"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2464"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2464"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2464"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2465,
        "date": "2020-05-06T07:48:09",
        "date_gmt": "2020-05-06T07:48:09",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=355"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "firestore-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firestore-2\/",
        "title": {
            "rendered": "Intro to Firebase Cloud"
        },
        "content": {
            "rendered": "\n<p>We know Web and mobile applications often require back-end code to execute tasks like: sending notifications to users or processing long running tasks (like processing images). In the traditional approach this back-end code is running on a server.<\/p>\n\n\n\n<p>Recently Google\u2019s Firebase introduces a new functionality called Cloud Functions. With this new service Firebase offers a scaleable solution for running back-end code in the cloud. With Firebase Cloud Functions you do not need to run and maintain your own server. Also The Firebase cloud infrastructure is highly scaleable. These cloud functions are triggered in response to a Firebase related event such as data being written to a Firebase firebase realtime database or the creation of a user account using Firebase authentication.<\/p>\n\n\n\n<p>Firebase Cloud Functions are written in Node.js and the Firebase Cloud Functions SDK and, once written, are deployed to the Google Cloud Platform using a command-line tool known as the Firebase CLI.<\/p>\n\n\n\n<p>Once the functions have been deployed, Google Cloud performs all the management tasks to ensure that the functions are triggered in response to events occurring on the Firebase and Google Cloud platforms. Each cloud function runs within a virtual server managed by Google Cloud which automatically adjusts the number of virtual servers for each function in response to changes in demand.<\/p>\n\n\n\n<p>Firebase Cloud Functions can be triggered by events from any of the following triggers:<\/p>\n\n\n\n<p><strong>Authentication<\/strong>: User account creation and deletion.<\/p>\n\n\n\n<p><strong>Google Analytics<\/strong>: Conversion events such as an in-app purchase.<\/p>\n\n\n\n<p><strong>Google Cloud Storage<\/strong>: Uploading, deleting and updating of files.<\/p>\n\n\n\n<p><strong>Firebase Realtime Database<\/strong>: Database write operations<\/p>\n\n\n\n<p><strong>HTTP<\/strong>: HTTP request to a specified URL (includes GET, POST, PUT, etc).<\/p>\n\n\n\n<p>We will discuss these triggers in more detail in the upcoming lectures.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We know Web and mobile applications often require back-end code to execute tasks like: sending notifications to users or processing long running tasks (like processing images). In the traditional approach this back-end code is running on a server. Recently Google\u2019s Firebase introduces a new functionality called Cloud Functions. With this new service Firebase offers a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1597,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2465"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2465"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2465\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2896,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2465\/revisions\/2896"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1597"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2465"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2465"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2465"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2466,
        "date": "2020-05-06T07:48:30",
        "date_gmt": "2020-05-06T07:48:30",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=356"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "firestore-vs-realtime-database-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firestore-vs-realtime-database-2\/",
        "title": {
            "rendered": "Setting Cloud Functions"
        },
        "content": {
            "rendered": "\n<h2>Setting Up Cloud Functions<\/h2>\n\n\n\n<p>Before we start using firebase cloud functions, We&#8217;ve to install Node.js &amp; Npm. Npm is a package manager for Javascript modules and command line tools. It&#8217;s part of the node.js ecosystem &#8211; and thus you install it by installing node.js. We assume you have node.js and npm installed.<\/p>\n\n\n\n<h3>Installing Firebase Command Line Tools<\/h3>\n\n\n\n<p>After the installation is complete, you need to install the Firebase tools. If you&#8217;re already using other firebase service like Firebase Hosting, you should have those tools already installed. If not, simply install them using npm:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g firebase-tools<\/code><\/pre>\n\n\n\n<p>You can use the same command to update the Firebase command line tools later on. Since Google updates them frequently, Google recommends to use the latest version. So even if you already have them installed, you should update.<\/p>\n\n\n\n<p>To check if the firebase cli is successfully installed:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase --version<\/code><\/pre>\n\n\n\n<h4>Connecting Firebase CLI<\/h4>\n\n\n\n<p>The next step is to authorize the command line tools to use your credentials. Start this process by using<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase login<\/code><\/pre>\n\n\n\n<p>As usual you get a list of things the command line tools need to do and you can grant the necessary permission to do so, by clicking &#8220;Allow&#8221;.<\/p>\n\n\n\n<h3>Creating Project<\/h3>\n\n\n\n<p>If you want to create a new project for this then go ahead to Firebase Console, If not switch back to the command line. NOW, switch to the folder in which you want to create your Cloud Functions for Firebase project. Within this folder create the project by calling<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase init<\/code><\/pre>\n\n\n\n<p>After that a list of options will come, select the second option which should be &#8220;Functions: Configure and deploy Cloud Functions&#8221; by pressing the down key and press space. By pressing space it will select that option<\/p>\n\n\n\n<p>In the next step you have to select the Firebase project you want your Cloud Functions to be associated with. Again use your arrow keys and space to select the appropriate option. There is a &#8220;create a new project&#8221; option, I recommend to create the project in the web-based Firebase console before running firebase init. You can abort the tool at any time with Ctrl-D or Ctrl-C.<\/p>\n\n\n\n<p>Afterwards the Firebase CLI creates the necessary project structure for creating Cloud Functions and deploying them to Firebase.<\/p>\n\n\n\n<h3>Triggers<\/h3>\n\n\n\n<p>The functions you write can respond to events generated by Firebase and Google Cloud features. We call these features triggers. Let\u2019s explore the most common triggers you can use for Cloud Functions in the upcoming lectures.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Setting Up Cloud Functions Before we start using firebase cloud functions, We&#8217;ve to install Node.js &amp; Npm. Npm is a package manager for Javascript modules and command line tools. It&#8217;s part of the node.js ecosystem &#8211; and thus you install it by installing node.js. We assume you have node.js and npm installed. Installing Firebase Command [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1598,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2466"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2466"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2466\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2895,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2466\/revisions\/2895"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1598"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2466"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2466"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2466"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 749,
        "date": "2020-05-06T07:58:47",
        "date_gmt": "2020-05-06T07:58:47",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=357"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "firestore-setup-and-configuration-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firestore-setup-and-configuration-2\/",
        "title": {
            "rendered": "Authentication Triggers"
        },
        "content": {
            "rendered": "\n<h2>Firebase Authentication Functions<\/h2>\n\n\n\n<p>By using firebse cloud authentication triggers you\u2019re able to execute code in response to the creation and deletion of a user account via Firebase Authentication. Authentication cloud functions are implemented using the functions.auth.user().onCreate() and functions.auth.user().onDelete() event handlers.<\/p>\n\n\n\n<p>The event data passed to the JavaScript function when it is called contains all of the attributes relating to the new user including email, display name, photo URL, authentication provider and whether or not the email address has been verified. Let&#8217;s see an example:<\/p>\n\n\n\n<p>According to the Firebase documentation this trigger is invoked in the following cases:<strong>A user creates an email account and password with firebase Authentication.<\/strong><strong>A user signs in for the first time.<\/strong><strong>A user signs in to a new anonymous auth session for the first time.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n    const functions = require('firebase-functions');\n    exports.newUserAdded = functions.auth.user().onCreate(event => {\n\n    const NewUser = event.data;\n    const userEmail = user.email;\n    const UserDisplayname = user.displayName;\n    const userPhoto = user.photoURL;\n});\n<\/code><\/pre>\n\n\n\n<p>A function to handle user account deletion events is very similar to the previous one:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.userDeleted = functions.auth.user().onCreate(event => {\n  \/\/ Custom Logic to run\n});<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Firebase Authentication Functions By using firebse cloud authentication triggers you\u2019re able to execute code in response to the creation and deletion of a user account via Firebase Authentication. Authentication cloud functions are implemented using the functions.auth.user().onCreate() and functions.auth.user().onDelete() event handlers. The event data passed to the JavaScript function when it is called contains all of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1599,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/749"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=749"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/749\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2894,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/749\/revisions\/2894"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1599"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=749"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=749"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=749"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2467,
        "date": "2020-05-06T08:19:06",
        "date_gmt": "2020-05-06T08:19:06",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=371"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "firestore-read-write-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firestore-read-write-2\/",
        "title": {
            "rendered": "Real-time Database Triggers"
        },
        "content": {
            "rendered": "\n<h2>Firebase Realtime Database Triggers<\/h2>\n\n\n\n<p>With Firebase Realtime Database Triggers we\u2019re able to respond to changes in the Firebase Realtime Database. Realtime Database Triggers are implemented using the functions.database.ref().onWrite() event handler. The database path for which write operations are to trigger the function is specified via a ref() call, like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.userStatusChange = functions.database.ref('\/codepoint\/apps')\n\t.onWrite(event => {\n    \/\/ Your code that you want to run\n}; <\/code><\/pre>\n\n\n\n<p>If you\u2019re just using the ref function, your registering for all events which are write, create, update and delete. If you just want to subscribe to one event you can use the following functions in addition:<\/p>\n\n\n\n<p><strong>onWrite()<\/strong>&nbsp;function is activated when the data is created, destroyed, or changed.<\/p>\n\n\n\n<p><strong>onCreate()<\/strong>&nbsp;function is activated when new data is created<\/p>\n\n\n\n<p><strong>onUpdate()<\/strong>&nbsp;function is activated when data is updated<\/p>\n\n\n\n<p><strong>onDelete()<\/strong>&nbsp;function is activated when data is deleted<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Firebase Realtime Database Triggers With Firebase Realtime Database Triggers we\u2019re able to respond to changes in the Firebase Realtime Database. Realtime Database Triggers are implemented using the functions.database.ref().onWrite() event handler. The database path for which write operations are to trigger the function is specified via a ref() call, like: If you\u2019re just using the ref [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1600,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2467"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2467"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2467\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2893,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2467\/revisions\/2893"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1600"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2467"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2467"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2467"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2468,
        "date": "2020-05-06T08:22:15",
        "date_gmt": "2020-05-06T08:22:15",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=372"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "firestore-update-and-delete-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firestore-update-and-delete-2\/",
        "title": {
            "rendered": "Cloud Storage Triggers"
        },
        "content": {
            "rendered": "\n<p>Cloud Storage functions are triggered when a file is uploaded using Cloud Storage, or when an existing file is updated or deleted. Once triggered, the function is also able to download a copy of the file, modify it and upload the new version back to cloud storage. Cloud Functions also have access to the ImageMagick utility which can be used to transform downloaded image files. Cloud Storage Functions are implemented using the functions.storage.object and functions.storage.bucket().object() event handlers, the latter being used to reference a specific storage bucket, for example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.cropImage =\n     functions.storage.bucket('photos').object().onChange(event => {\n    .\n    .\n    .\n    .\n    .\n});<\/code><\/pre>\n\n\n\n<p>The event data passed through to the function includes all of the properties of the file, including bucket name, file path, content type, resource state, download link, file size and timestamp:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.cropImage =\n     functions.storage.bucket('photos').object().onChange(event => {\n    const fileObject = event.data;\n\n     const filePath = fileObject.name;\n     const bucket = fileObject.bucket;\n     const contentType = fileObject.contentType;\n     const resourceState = fileObject.resourceState;\n     const size = fileObject.size;\n     const timeCreated = fileObject.timeCreated;\n});<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Cloud Storage functions are triggered when a file is uploaded using Cloud Storage, or when an existing file is updated or deleted. Once triggered, the function is also able to download a copy of the file, modify it and upload the new version back to cloud storage. Cloud Functions also have access to the ImageMagick [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1601,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2468"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2468"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2468\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2892,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2468\/revisions\/2892"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1601"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2468"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2468"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2468"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2469,
        "date": "2020-05-06T08:22:53",
        "date_gmt": "2020-05-06T08:22:53",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=373"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "cloud-storage-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/cloud-storage-2\/",
        "title": {
            "rendered": "HTTP Triggers"
        },
        "content": {
            "rendered": "\n<p>Another trigger type which can be used with Firebase Cloud Functions are HTTP Triggers. These triggers can be invoked through an HTTP request and can be registered by using functions.https in the following way:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.httpTest = functions.https.onRequest((req, res) => {...});<\/code><\/pre>\n\n\n\n<p>As we can see the event handler functions gets two parameters: req and res. The req objects gives you access to the properties of the original HTTP request sent by the client. The res object can be used to send a response to back to the client.<\/p>\n\n\n\n<h4>Conclusion<\/h4>\n\n\n\n<p>Now, that you have learned what Firebase Cloud Functions are and which type of triggers can be used to invoke those functions. Firebase Cloud Functions are a powerful tool, there are many more use cases for Cloud Functions like Send a welcome email when a user signs up or performing automated Realtime Database Tasks to keep the database up to date and clean.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Another trigger type which can be used with Firebase Cloud Functions are HTTP Triggers. These triggers can be invoked through an HTTP request and can be registered by using functions.https in the following way: As we can see the event handler functions gets two parameters: req and res. The req objects gives you access to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1602,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2469"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2469"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2469\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2891,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2469\/revisions\/2891"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1602"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2469"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2469"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2469"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2470,
        "date": "2020-05-06T08:24:00",
        "date_gmt": "2020-05-06T08:24:00",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=374"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "cloud-storage-setup-and-configuration-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/cloud-storage-setup-and-configuration-2\/",
        "title": {
            "rendered": "Deploying Firebase App"
        },
        "content": {
            "rendered": "\n<p>In this tutorial, we will learn how easy it is to deploy our app to firebase. If you are looking to host your cool web app, Firebase from Google can put you at ease by providing fast, reliable, and secure static hosting for your web app. Offering production-grade web content hosting, Google Firebase enables you to easily deploy web apps and static web page content and connect to a CDN (content-delivery network) with a single command.<\/p>\n\n\n\n<p>The prerequisites you need to do to get started with Firebase hosting are:<\/p>\n\n\n\n<p><strong>1-<\/strong>&nbsp;The latest version of Node.js.<\/p>\n\n\n\n<p><strong>2-<\/strong>&nbsp;Fast Internet Connection.<\/p>\n\n\n\n<p><strong>3-&nbsp;<\/strong>Google Firebase account.<\/p>\n\n\n\n<p>Before we begin, let us just add some text to&nbsp;<strong>index.html<\/strong>&nbsp;body tag. In this example, we will add the following text.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>I am Hosted on Firebase!!!&lt;\/h1><\/code><\/pre>\n\n\n\n<h2>Step 1 &#8211; Install Firebase Tools<\/h2>\n\n\n\n<p>We need to install firebase tools globally in the&nbsp;<strong>command prompt<\/strong>&nbsp;window.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g firebase-tools<\/code><\/pre>\n\n\n\n<h2>Step 2 &#8211; Initialize the Firebase App<\/h2>\n\n\n\n<p>First we need to login to Firebase in the&nbsp;<strong>command prompt<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase login\n<\/code><\/pre>\n\n\n\n<p>Open the root folder of your app in the&nbsp;<strong>command prompt<\/strong>&nbsp;and run the following command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase init<\/code><\/pre>\n\n\n\n<p>This command will initialize your app.<\/p>\n\n\n\n<p><strong>NOTE<\/strong>&nbsp;\u2212 If you have used a default configuration, the&nbsp;<strong>public<\/strong>&nbsp;folder will be created and the&nbsp;<strong>index.html<\/strong>&nbsp;inside this folder will be the starting point of your app. You can copy your app file inside the public folder as a workaround.<\/p>\n\n\n\n<h2>Step 3 &#8211; Deploy Firebase App<\/h2>\n\n\n\n<p>This is the last step in this chapter. Run the following command from the\u00a0<strong>command prompt<\/strong>\u00a0to deploy your app.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase deploy<\/code><\/pre>\n\n\n\n<h3>Manage and Rollback Deploys<\/h3>\n\n\n\n<p>From the Hosting panel in the Firebase Console, you can see a full history of your deploys. To roll back to a previous deploy, hover over its entry in the list, click the overflow menu icon, and then click Rollback. Now, your awesome application is ready to share with the world! Next up, check out how to customize hosting behavior, connect a custom domain, or take a look at the full documentation for the Firebase CLI.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this tutorial, we will learn how easy it is to deploy our app to firebase. If you are looking to host your cool web app, Firebase from Google can put you at ease by providing fast, reliable, and secure static hosting for your web app. Offering production-grade web content hosting, Google Firebase enables you [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 1538,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2470"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2470"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2470\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2890,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2470\/revisions\/2890"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1538"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2470"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2470"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2470"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 375,
        "date": "2020-05-06T08:30:43",
        "date_gmt": "2020-05-06T08:30:43",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=375"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "creating-references",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/creating-references\/",
        "title": {
            "rendered": "Creating References"
        },
        "content": {
            "rendered": "\n<p>When we use Firebase Cloud Storage, all our files are stored in a Google Cloud Storage bucket. Just like the file system in our local hard disk, or the data in the Firebase Realtime Database, files are presented in a hierarchical structure in the bucket.<\/p>\n\n\n\n<p>By creating a reference of a file, our app gains access:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>To upload or download data.\nTo get or update metadata.\nTo delete a file.<\/code><\/pre>\n\n\n\n<p>A reference can be either point to a specific file or to a higher level node in the hierarchy. The paths are very similar to the Firebase Realtime Database paths. The only difference is that our file data is stored in Google Cloud Storage, not in the Realtime Database.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-references-in-cloud-storage.png\" alt=\"Creating References in Cloud Storage\"\/><\/figure>\n\n\n\n<h2>Creating a Reference<\/h2>\n\n\n\n<p>The reference can be thought of as a pointer to a file in the cloud:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Lightweight, so we can create as many as we need or require.\nReusable for multiple operations.<\/code><\/pre>\n\n\n\n<p>The references are created using the Firebase Storage singleton instance and will call it using the getReference() method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Creating a storage reference from our app  \nvar storageRef=storage.reference  <\/code><\/pre>\n\n\n\n<h2>Creating a Child Reference<\/h2>\n\n\n\n<p>We can create a reference to a location lower in the tree. For example, &#8216;images\/season.jpg&#8217; by using the getChild() method on an existing reference.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Creating a child reference. The imagesRef will points to \"images\".  \nvar imagesRef:StorageReference?=storageRef.child  <\/code><\/pre>\n\n\n\n<p>Child references will also take paths. The mountainRef now points to &#8220;images\/mountain.jpg&#8221;, and imagesRef still points to &#8220;images&#8221;.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var mountainRef=storageRef.child(\"images\/mountain.jpg\")  <\/code><\/pre>\n\n\n\n<h2>Navigating up in our file hierarchy<\/h2>\n\n\n\n<p>There are two ways to navigate up in our file hierarchy, i.e., getParent() and getRoot(). The getParent() navigates up one level, and the getRoot() navigates all the way to the top.<\/p>\n\n\n\n<p>The parent allows us to move our reference to a parent node, and imagesRef now points to the &#8216;images&#8217;.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>imagesRef=spaceRef.parent  <\/code><\/pre>\n\n\n\n<p>The root allows us to move all the way back to the top of our bucket, and rootRef now points to the root.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>val rootRef = spaceRef.root  <\/code><\/pre>\n\n\n\n<p>References can be chained together multiple times, mountainRef point to &#8216;images\/mountain.jpg&#8217;.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>val mountainRef = spaceRef.parent?.child(\"mountain.jpg\")  <\/code><\/pre>\n\n\n\n<p>If the nullRef is null then the parent of root is null<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>val nullRef = spaceRef.root.parent  <\/code><\/pre>\n\n\n\n<h2>Inspecting References<\/h2>\n\n\n\n<p>We can inspect references to understand better the files they point to. The getPath(), getName(), and getBucket() methods will get the file&#8217;s full path, name, and bucket. The reference path is &#8220;images\/space.jpg&#8221;, and it is analogous to the file name.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>spaceRef.name  <\/code><\/pre>\n\n\n\n<p>Reference&#8217;s bucket is the storage bucket where the files are stored in<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>spaceRef.bucket  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>When we use Firebase Cloud Storage, all our files are stored in a Google Cloud Storage bucket. Just like the file system in our local hard disk, or the data in the Firebase Realtime Database, files are presented in a hierarchical structure in the bucket. By creating a reference of a file, our app gains [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1539,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/375"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=375"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/375\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1973,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/375\/revisions\/1973"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1539"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=375"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=375"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=375"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 376,
        "date": "2020-05-06T08:32:24",
        "date_gmt": "2020-05-06T08:32:24",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=376"
        },
        "modified": "2020-12-25T19:09:00",
        "modified_gmt": "2020-12-25T19:09:00",
        "slug": "download-files",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/download-files\/",
        "title": {
            "rendered": "Download Files"
        },
        "content": {
            "rendered": "\n<p>In our last section, we learned the different ways of uploading files. Now, we will learn how to download the files from the Cloud Storage. For downloading a file, first, we have to create a Cloud Storage reference to the file which we want to download.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-download-files-from-cloud-storage.png\" alt=\"Download files from Cloud Storage\"\/><\/figure>\n\n\n\n<p>There are following two ways through which we can create a reference, i.e., by appending child paths to the storage root and from an existing&nbsp;<strong>gs:\/\/<\/strong>&nbsp;or&nbsp;<strong>https:\/\/URL<\/strong>&nbsp;referencing an object in the Cloud Storage.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Creating a storage reference from our app  \nval storageRef = storage.reference  \n  \n\/\/ Creating a reference with an initial file path and name  \nval pathReference = storageRef.child(\"images\/stars.jpg\")  \n  \n\/\/ Creating a reference to a file from a Google Cloud Storage URI  \nval gsReference = storage.getReferenceFromUrl(\"gs:\/\/bucket\/images\/stars.jpg\")  \n  \n\/\/ Creating a reference from an HTTPS URL  \n\/\/ In the URL, characters are URL escaped!  \nval httpsReference = storage.getReferenceFromUrl(  \n        \"https:\/\/firebasestorage.googleapis.com\/b\/bucket\/o\/images%20stars.jpg\")  <\/code><\/pre>\n\n\n\n<h2>Downloading Methods<\/h2>\n\n\n\n<p>After creating an appropriate reference, we call various methods to download files, i.e.,&nbsp;<strong>getBytes(), getStream(),<\/strong>&nbsp;or we can get a download URL with&nbsp;<strong>getDownloadUrl()<\/strong>&nbsp;for downloading the file with another library.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-download-files-from-cloud-storage2.png\" alt=\"Download files from Cloud Storage\"\/><\/figure>\n\n\n\n<p>The use of the&nbsp;<strong>getBytes()<\/strong>&nbsp;method is the easiest way of downloading the file to memory. If we request a file larger than our app&#8217;s available memory, our app will crash. The getBytes() takes a maximum amount of bytes to download. We set the maximum size according to our app capability.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var jtpRef = storageRef.child(\"images\/jtp.jpg\")  \n  \nval ONE_MEGABYTE: Long = 1024 * 1024  \nislandRef.getBytes(ONE_MEGABYTE).addOnSuccessListener {  \n    \/\/ Data for \"images\/jtp.jpg\" is returned, use this as needed  \n}.addOnFailureListener {  \n    \/\/ Handling any errors  \n}  <\/code><\/pre>\n\n\n\n<h3>Downloading Data to a Local File<\/h3>\n\n\n\n<p>If we want to have access to the file while offline or to share the file, then we use the\u00a0<strong>getFile()<\/strong>\u00a0method. This method downloads a file directly to a local device. This method returns a\u00a0<strong>Download Task<\/strong>, which we can use to manage our downloads and monitor the status.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>jtpRef = storageRef.child(\"images\/jtp.jpg\")  \n  \nval localFile = File.createTempFile(\"images\", \"jpg\")  \n  \njtpRef.getFile(localFile).addOnSuccessListener {  \n    \/\/ Local temp file has been created  \n}.addOnFailureListener {  \n    \/\/ Handling any errors  \n}  <\/code><\/pre>\n\n\n\n<h3>Downloading Data via URL<\/h3>\n\n\n\n<p>If we already have the download infrastructure based on the URL, or simply want to share a URL, we can get the download URL for the file by calling the&nbsp;<strong>getDownloadUrl ()<\/strong>&nbsp;method on the storage context.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>storageRef.child(\"users\/me\/profile.png\").downloadUrl.addOnSuccessListener {  \n    \/\/ Getting the download URL for 'users\/me\/profile.png'  \n}.addOnFailureListener {  \n    \/\/ Handling any errors  \n}  <\/code><\/pre>\n\n\n\n<h3>Downloading images with Firebase UI<\/h3>\n\n\n\n<p>For eliminating boilerplate code and promoting Google best practices. Firebase UI provides simple, customized, and production-ready native mobile bindings. Using Firebase UI, we can quickly, easily download, cache, and display images from cloud storage using our integration with Glide.<\/p>\n\n\n\n<p>First, add Firebase UI to our\u00a0<strong>app\/build.gradle<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies {  \n    \/\/ FirebaseUI Storage only  \n    implementation 'com.firebaseui:firebase-ui-storage:4.3.1'  \n}  <\/code><\/pre>\n\n\n\n<p>Then we can load images directly from storage into an\u00a0<strong>Image view<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Referencing to an image file in Cloud Storage  \nval storageReference = FirebaseStorage.getInstance().reference  \n  \n\/\/ ImageView in our Activity  \nval imageView = findViewById&lt;ImageView>(R.id.imageView)  \n  \n\/\/ Downloading directly from StorageReference using Glide  \nGlide.with(this \/* context *\/)  \n        .load(storageReference)  \n        .into(imageView)  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In our last section, we learned the different ways of uploading files. Now, we will learn how to download the files from the Cloud Storage. For downloading a file, first, we have to create a Cloud Storage reference to the file which we want to download. There are following two ways through which we can [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1540,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/376"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=376"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/376\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1975,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/376\/revisions\/1975"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1540"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=376"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=376"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=376"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 377,
        "date": "2020-05-06T08:34:35",
        "date_gmt": "2020-05-06T08:34:35",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=377"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "upload-files-in-cloud-storage",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/upload-files-in-cloud-storage\/",
        "title": {
            "rendered": "Upload files in Cloud Storage"
        },
        "content": {
            "rendered": "\n<p>Cloud Storage provides facilities for developers to quickly and easily upload files to the Google Cloud Storage bucket, which is provided or managed by Firebase. By default, Firebase Authentication is required for uploading files in Cloud Storage buckets. But we can modify our Firebase Security Rules for allowing un-authentication access.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-upload-files-in-cloud-storage.png\" alt=\"Upload files in Cloud Storage\"\/><\/figure>\n\n\n\n<p>Since the default, Engine app, Google app, and Firebase share this bucket, configuring public access can also make the newly uploaded App Engine file publicly accessible. When you set up authentication, make sure to access our storage bucket again.<\/p>\n\n\n\n<p>For uploading a file to the Cloud Storage, we will first create a reference to the full path of the file with a file name.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Create a storage reference from our app  \nval storageRef = storage.reference  \n  \n\/\/ Create a reference to \"mountains.jpg\"  \nval mountainsRef = storageRef.child(\"mountains.jpg\")  \n  \n\/\/ Create a reference to 'images\/mountains.jpg'  \nval mountainImagesRef = storageRef.child(\"images\/mountains.jpg\")  \n  \n\/\/When the file names are same, the references point to different files  \nmountainsRef.name == mountainImagesRef.name \/\/ true  \nmountainsRef.path == mountainImagesRef.path \/\/ false  <\/code><\/pre>\n\n\n\n<p>Once we have created an appropriate reference, we then call the putBytes(), putFile(), or putStream() method for uploading the file to Cloud Storage. We can&#8217;t upload data with reference to the root of our Google Cloud Storage bucket. Our reference must point to a child URL.<\/p>\n\n\n\n<h2>Upload from data in memory<\/h2>\n\n\n\n<p>The&nbsp;<strong>putBytes()<\/strong>&nbsp;method is the simplest way through which we can upload a file to the Cloud Storage easily. The&nbsp;<strong>putBytes()<\/strong>&nbsp;method takes a&nbsp;<strong>byte[]<\/strong>&nbsp;and returns an&nbsp;<strong>Upload Task<\/strong>&nbsp;which we can use to manage and monitor the status of the upload.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Getting the data from an ImageView as bytes  \nimageView.isDrawingCacheEnabled = true  \nimageView.buildDrawingCache()  \nval bitmap = (imageView.drawable as BitmapDrawable).bitmap  \nval baos = ByteArrayOutputStream()  \nbitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos)  \nval data = baos.toByteArray()  \n  \nvar uploadTask = mountainsRef.putBytes(data)  \nuploadTask.addOnFailureListener {  \n    \/\/ Handlling unsuccessful uploads  \n}.addOnSuccessListener {  \n    \/\/ The taskSnapshot.metadata contains file metadata such as content-type, size, etc.  \n    \/\/ ...  \n}  <\/code><\/pre>\n\n\n\n<p>Because&nbsp;<strong>putBytes()<\/strong>&nbsp;accepts a byte[], it requires our app to hold the entire contents of a file in memory at once. We consider&nbsp;<strong>putStream()<\/strong>&nbsp;or&nbsp;<strong>putFile()<\/strong>&nbsp;to use less memory.<\/p>\n\n\n\n<h2>Upload from a stream<\/h2>\n\n\n\n<p>The most&nbsp;<strong>flexible<\/strong>&nbsp;way to upload a file to Cloud Storage is the use of the&nbsp;<strong>putStream()<\/strong>&nbsp;method. This method takes an&nbsp;<strong>InputStream<\/strong>&nbsp;and returns an&nbsp;<strong>UploadTask<\/strong>, which will use to manage and monitor the status of the upload.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>val stream = FileInputStream(File(\"path\/to\/images\/mountain.jpg\"))  \nuploadTask = mountainsRef.putStream(stream)  \nuploadTask.addOnFailureListener {  \n    \/\/ Handling unsuccessful uploads  \n}.addOnSuccessListener {  \n    \/\/ The taskSnapshot.metadata contains file metadata such as content-type, size, etc.  \n    \/\/ ...  \n}  <\/code><\/pre>\n\n\n\n<h2>Upload from a local file<\/h2>\n\n\n\n<p>We can upload local files on the device with the&nbsp;<strong>putFile()<\/strong>&nbsp;method. This method takes a&nbsp;<strong>File<\/strong>&nbsp;as an input and returns an&nbsp;<strong>UploadTask<\/strong>&nbsp;which we can use for managing and monitoring the status of the upload.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var file = Uri.fromFile(File(\"path\/to\/images\/rivers.jpg\"))  \nval riversRef = storageRef.child(\"images\/${file.lastPathSegment}\")  \nuploadTask = riversRef.putFile(file)  \n  \n\/\/ Registering observers to listen for when the download is done or if it fails  \nuploadTask.addOnFailureListener {  \n    \/\/ Handling unsuccessful uploads  \n}.addOnSuccessListener {  \n    \/\/ The taskSnapshot.metadata contains file metadata such as content-type, size, etc.  \n    \/\/ ...  \n}  <\/code><\/pre>\n\n\n\n<h2>Getting a download URL after uploading<\/h2>\n\n\n\n<p>For downloading the file, it is required that we should have a URL. For getting URL we have to call the&nbsp;<strong>getDownloadUrl()<\/strong>&nbsp;method on the&nbsp;<strong>StorageReference<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>val ref = storageRef.child(\"images\/mountains.jpg\")  \nuploadTask = ref.putFile(file)  \n  \nval urlTask = uploadTask.continueWithTask { task ->  \n    if (!task.isSuccessful) {  \n        task.exception?.let {  \n            throw it  \n        }  \n    }  \n    ref.downloadUrl  \n}.addOnCompleteListener { task ->  \n    if (task.isSuccessful) {  \n        val downloadUri = task.result  \n    } else {  \n        \/\/ Handling failures  \n        \/\/ ...  \n    }  \n}  <\/code><\/pre>\n\n\n\n<h2>Managing Uploads<\/h2>\n\n\n\n<p>There are some additional methods available such as&nbsp;<strong>pause(), resume(),<\/strong>&nbsp;and&nbsp;<strong>cancel()<\/strong>, which are used to pause, resume, or cancel the uploads. Pause, and Progress state changes, respectively, in pause and resume events. Canceling the upload cause the upload to fail with an error indicating that the upload was canceled.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>uploadTask = storageRef.child(\"images\/mountains.jpg\").putFile(file)  \n  \n\/\/ Pausing the upload  \nuploadTask.pause()  \n  \n\/\/ Resuming the upload  \nuploadTask.resume()  \n  \n\/\/ Canceling the upload  \nuploadTask.cancel() <\/code><\/pre>\n\n\n\n<h3>Full Example<\/h3>\n\n\n\n<p>The example of upload with progress monitoring and error handling is as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Getting File or Blob  \nfile = Uri.fromFile(File(\"path\/to\/mountains.jpg\"))  \n  \n\/\/ Creating the file metadata  \nmetadata = StorageMetadata.Builder()  \n        .setContentType(\"image\/jpeg\")  \n        .build()  \n  \n\/\/ Uploading the file and the metadata to the path 'images\/mountains.jpg'  \nuploadTask = storageRef.child(\"images\/${file.lastPathSegment}\").putFile(file, metadata)  \n  \n\/\/ Listening for state changes, errors, and completion of the upload.  \nuploadTask.addOnProgressListener { taskSnapshot ->  \n    val progress = (100.0 * taskSnapshot.bytesTransferred) \/ taskSnapshot.totalByteCount  \n    println(\"Upload is $progress% done\")  \n}.addOnPausedListener {  \n    println(\"Upload is paused\")  \n}.addOnFailureListener {  \n    \/\/ Handling unsuccessful uploads  \n}.addOnSuccessListener {  \n    \/\/ Handling successful uploads on complete  \n    \/\/ ...  \n}  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Cloud Storage provides facilities for developers to quickly and easily upload files to the Google Cloud Storage bucket, which is provided or managed by Firebase. By default, Firebase Authentication is required for uploading files in Cloud Storage buckets. But we can modify our Firebase Security Rules for allowing un-authentication access. Since the default, Engine app, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1541,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/377"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=377"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/377\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2096,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/377\/revisions\/2096"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1541"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=377"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=377"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=377"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 378,
        "date": "2020-05-06T08:36:54",
        "date_gmt": "2020-05-06T08:36:54",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=378"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "firebase-hosting",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-hosting\/",
        "title": {
            "rendered": "Firebase Hosting"
        },
        "content": {
            "rendered": "\n<p>Firebase Hosting allows fast and secure hosting for our web application, static and dynamic content, and micro services. It is production-grade web content hosting for the developers. We can easily and quickly deploy web apps and serve both static and dynamic content to a global content delivery network with only a single command. We can pair Firebase Hosting with Cloud Function or Cloud Run for building and hosting micro services on Firebase.<\/p>\n\n\n\n<p>Firebase Hosting provides files with the help of fast CDN.<\/p>\n\n\n\n<h2>Key capabilities<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Capability<\/th><th>Description<\/th><\/tr><tr><td>Capable of serving content over a secure connection<\/td><td>The modern web is secure. The content is always delivered securely because zero-configuration SSL is built into Firebase Hosting.<\/td><\/tr><tr><td>It hosts static and dynamic content and micro services<\/td><td>It supports all kinds of content for hosting, from our CSS and HTML files to our Express.js micro services or APIs.<\/td><\/tr><tr><td>Quickly deliver content<\/td><td>Each file which we upload is cached on SSDs at CDN edges around the world. No matter where our users are, the content is delivered very fast.<\/td><\/tr><tr><td>Deploying new versions with one command<\/td><td>Using the Firebase CLI, we can get our app up and running in seconds. Command-line tools make it easy to add deployment targets into our build process.<\/td><\/tr><tr><td>Rollback with only one click<\/td><td>Although quick deployments are good, being able to undo mistakes is even better. Firebase Hosting provides full release management and versioning with one-click rollbacks.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>How does it work?<\/h2>\n\n\n\n<p>Firebase Hosting is designed for the modern web developer. Apps and websites are more powerful than ever with the growth of front-end JavaScript frameworks such as Angular and static generator tools like Jekyll. Whether we are deploying a complex progressive web app (PWA) or a simple app landing page, hosting provides us with the infrastructure, tooling, and features to deploy and manage websites and apps.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting2.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Using the Firebase CLI, we can deploy files from the local directory on our computer to our hosting server. Beyond serving static content, we can use cloud runs or cloud functions to serve dynamic content to our content and host Microsoft on our sites. All content is delivered over an SSL connection from the closest edge server on the global CDN. Hosting in Firebase has lightweight hosting configuration options for us to build sophisticated PWAs. We can easily set up custom headers or rewrite URLs for client-side routing.<\/p>\n\n\n\n<p>For serving our content, Firebase offers several domain and sub-domain options:<\/p>\n\n\n\n<ul><li>By default, all Firebase projects have free sub-domains on the firebasea pp.com and web.app domains. Both serve the same deployed content and configuration.<\/li><li>We can create multiple sites if we have related apps and sites which serve different content but still share the same Firebase project resources (for example, if we have an admin panel, blog, and public app).<\/li><li>We can connect our own domain name to a Firebase-hosted site.<\/li><\/ul>\n\n\n\n<p>Firebase automatically provisions SSL certificates for all our domains so that all our content is served securely<\/p>\n\n\n\n<h2>Why Firebase Hosting?<\/h2>\n\n\n\n<p>At present, most of the web hosting charges us, and the available free hosting services are slow. We also have to pay extra money to get an SSL certificate to convert our website to a secure one with https.<\/p>\n\n\n\n<p>Firebase Hosting is free, and it would not cost us any more. Firebase Hosting, by default, provides an SSL certificate and offers an impressive speed across several geographical locations without any requirement for a separate CDN on top.<\/p>\n\n\n\n<p>There are the following requirements for using Firebase Hosting:<\/p>\n\n\n\n<p><strong>1) Google Account<\/strong><\/p>\n\n\n\n<p>In the present era, everyone has a Google\/Gmail account. The Gmail account is enough to use it. If we don&#8217;t have, then create one.<\/p>\n\n\n\n<p><strong>2) Firebase-CLI<\/strong><\/p>\n\n\n\n<p>For installing Firebase-CLI, it is required that we have&nbsp;<strong>Node.js<\/strong>&nbsp;in our machine. So, first we will install Node.js in our machine, and once we have installed NodeJs, we will install the Firebase CLI using npm(Node Package Manager) by running the following command<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g firebase-tools  <\/code><\/pre>\n\n\n\n<p><strong>3) Domain<\/strong><\/p>\n\n\n\n<p>This is the optional requirement. There are several domain name providers in the world. We can buy the domain from&nbsp;Godaddy.com.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting3.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Before working with Firebase Hosting, we first install the NodeJs from the following link:&nbsp;https:\/\/nodejs.or. g\/en\/download\/.<\/p>\n\n\n\n<h2>Setup and Configuration<\/h2>\n\n\n\n<p>Before setting up Firebase Hosting, we need to create a Firebase project in Firebase console.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting4.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Once, we have a Firebase project, we have to perform the following steps:<\/p>\n\n\n\n<p><strong>Step 1:<\/strong><\/p>\n\n\n\n<p>In the first step, we have to install the Firebase CLI. Firebase CLI provides a set of tools for managing, viewing, and deploying to Firebase projects. To install the Firebase CLI, there are two options:<\/p>\n\n\n\n<ol><li>Install Node.js using the nvm-windows. Installing Node.js automatically install the npm command tools.<\/li><li>We can install the Firebase CLI through npm by running the following command on command prompt:<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g firebase-tools  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting5.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p><strong>Step 2:<\/strong><\/p>\n\n\n\n<p>In the next step, we will sign in and test the Firebase CLI. After installing the CLI, we must authenticate it. After that, we can confirm authentication by listing our Firebase projects.<\/p>\n\n\n\n<p>1) We run the following command to sign into the Firebase using our Google account.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase login  <\/code><\/pre>\n\n\n\n<p>The above command connects our local machine to Firebase and grants access to our Firebase projects.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting6.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>When we select to allow access, we will switch to the browser to allow access to the Firebase CLI:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting7.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>When we click on Allow, it shows the following window:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting8.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting9.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>2) Now, we test the CLI is properly working or not and accessing our account. This is done by listing our Firebase projects with the help of the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase projects: list  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting10.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p><strong>Step 3:<\/strong><\/p>\n\n\n\n<p>Many common tasks, such as deploying a Firebase project, require a&nbsp;<strong>project directory<\/strong>. We set up the project directory using the&nbsp;<strong>Firebase init<\/strong>&nbsp;command. The project directory is usually the same directory as our source control root. After running Firebase Init, the directory contains the Firebase.json configuration file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase init  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting11.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Write y and press enter to continue the process.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting12.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Select the Hosting feature and press space and then enter.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting13.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>After that, select the Firebase project, i.e., Firebase-demo, in my case.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting14.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Give name, which we want to use as our public directory and press y for &#8216;Configure as a single-page app&#8217;.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting15.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Firebase initialization complete.<\/p>\n\n\n\n<p>The firebase.json file with default settings is created during initialization. If we select Firebase Hosting, Cloud Functions, and, Cloud Firestore, for Firebase during initialization, the firebase.json file will be as followed:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{  \n  \"hosting\": {  \n    \"public\": \"jtp_firebase\",  \n    \"ignore\": &#91;  \n      \"firebase.json\",  \n      \"**\/.*\",  \n      \"**\/node_modules\/**\"  \n    ],  \n    \"rewrites\": &#91;  \n      {  \n        \"source\": \"**\",  \n        \"destination\": \"\/index.html\"  \n      }  \n    ]  \n  }  \n}  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting16.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p><strong>Step 4:<\/strong><\/p>\n\n\n\n<p>In the next step, we will go to the Firebase console and go to Develop-&gt;Hosting. Here, we select Get started.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting17.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>After that, we click on&nbsp;<strong>Next<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting18.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Again click on Next.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting19.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Give a nickname and click on register and continue.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting20.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>And, finally, click on continue to console.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting21.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p><strong>Step 5:<\/strong><\/p>\n\n\n\n<p>We can add a custom domain also so that we can easily access our web application. Click on&nbsp;<strong>Add custom domain<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting22.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p><strong>Step 6:<\/strong><\/p>\n\n\n\n<p>In the next step, we will enter the domain and click on&nbsp;<strong>Continue<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting23.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Then, add the txt record and value into our domain provider DNS and click on&nbsp;<strong>Verify<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting24.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting25.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>Add&nbsp;<strong>A<\/strong>&nbsp;records to our domain provider DNS.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting26.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-hosting27.png\" alt=\"Firebase hosting\"\/><\/figure>\n\n\n\n<p>This will take up to&nbsp;<strong>5 minutes to 1 hour<\/strong>, depending on our domain provider to update the DNS record.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Firebase Hosting allows fast and secure hosting for our web application, static and dynamic content, and micro services. It is production-grade web content hosting for the developers. We can easily and quickly deploy web apps and serve both static and dynamic content to a global content delivery network with only a single command. We can [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1542,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/378"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=378"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/378\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2095,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/378\/revisions\/2095"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1542"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=378"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=378"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=378"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 398,
        "date": "2020-05-06T09:11:23",
        "date_gmt": "2020-05-06T09:11:23",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=398"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "firebase-cloud-function",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-cloud-function\/",
        "title": {
            "rendered": "Firebase Cloud Function"
        },
        "content": {
            "rendered": "\n<p>Mobile and web applications require back-end code to execute tasks like sending out notification or processing long-running tasks. In the past decade, this back-end code was running on a server.<\/p>\n\n\n\n<p>Recently Google&#8217;s Firebase has introduced a new service named Cloud Functions. With the help of Cloud Functions, Firebase provides a scalable solution for running the back-end code in the cloud.<\/p>\n\n\n\n<p><strong>Cloud functions<\/strong>\u00a0for firebase enable us to automatically execute the back-end code in response to events triggered or caused through HTTPS requests and Firebase features. Our code is stored in Google&#8217;s cloud and runs in a managed environment and no need to manage and scale our own server.<\/p>\n\n\n\n<p>There are various advantages of running code in the cloud, which are as follows:<\/p>\n\n\n\n<ol><li>There is no need to run and maintain our own server.<\/li><li>For back-end code, we do have an isolated code base.<\/li><li>We only get the bill for the actual executing time of our code.<\/li><li>The infrastructure of the cloud is highly scalable.<\/li><\/ol>\n\n\n\n<p>Cloud Functions allows developers access to Google Cloud events and Firebase, along with scalable computing power for running the code in response to those events. It is expected that Firebase applications will use Cloud Functions in unique ways to meet their unique and specific needs, use cases may fall into the following areas:<\/p>\n\n\n\n<ol><li>Notifying users when something interesting happens.<\/li><li>Performing Realtime Database maintenance and sanitization.<\/li><li>Executing intensive tasks in the cloud rather than executing in our application.<\/li><li>Integrate with APIs and third-party services.<\/li><\/ol>\n\n\n\n<h3>Notifying users when something interesting happens<\/h3>\n\n\n\n<p>Cloud Function is used to keep users engaged and up to date with relevant information about an application. For example, consider an app which allows users to follow each other&#8217;s activities in the app. In such an app, a function which is triggered by the Realtime database writes to store new followers. These followers can create&nbsp;<strong>Firebase Cloud Messaging<\/strong>&nbsp;to make the appropriate users who know that they have gained new followers.<\/p>\n\n\n\n<p>\\<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-cloud-function2.png\" alt=\"Firebase Cloud Function\"\/><\/figure>\n\n\n\n<ol><li>This function writes to the Realtime database path where the followers are stored.<\/li><li>A message is composed by the function to send via&nbsp;<strong>FCM<\/strong>.<\/li><li>A notification message is sent to the user&#8217;s device via&nbsp;<strong>FCM<\/strong>.<\/li><\/ol>\n\n\n\n<h3>Performing Realtime Database maintenance and sanitization<\/h3>\n\n\n\n<p>By using Cloud Functions database event handling, we can keep the system clean and up to date, and modify the real-time database in response to user behavior. For example, in a chat room application which is built on a real-time database, we can track writing events and clear inappropriate or profane text from users&#8217; messages.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-cloud-function3.png\" alt=\"Firebase Cloud Function\"\/><\/figure>\n\n\n\n<ol><li>The function&#8217;s database event handler listens to a write event on a specific path and retrieves event data which contains the text of any chat messages.<\/li><li>To detect and clear any inappropriate language, the function processes the text.<\/li><li>On the back of the database, the function writes the updated text.<\/li><\/ol>\n\n\n\n<h3>Executing intensive tasks in the cloud rather than in our application<\/h3>\n\n\n\n<p>Users can take advantage of Cloud Functions to take off to the Google Cloud resource-intensive tasks (heavy CPU or networking), which is practically impossible to run on user&#8217;s device.<\/p>\n\n\n\n<p>For example, we write a function to listen for image upload to the storage, running the function, download the image to the instance, upload it, and modify it back to storage. Our modifications may include cropping, resizing images, etc. For making this work easier, ImageMagick command-line tools are given to use with Cloud Functions.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-cloud-function4.png\" alt=\"Firebase Cloud Function\"\/><\/figure>\n\n\n\n<ol><li>When an image file is uploaded into cloud storage, a function triggers.<\/li><li>The function creates a thumbnail version of the image and downloads the image.<\/li><li>The thumbnail location writes to the database through so that a client app can find it or use it.<\/li><li>The function uploads this thumbnail back to storage in a new location.<\/li><li>The application downloads the thumbnail link.<\/li><\/ol>\n\n\n\n<h3>Integrate with third-party services and APIs<\/h3>\n\n\n\n<p>Cloud Functions can help our app work well with other services by calling and exposing web APIs. For example, an app is used to collaborate on development which can send GitHub to a workgroup chat room.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-cloud-function5.png\" alt=\"Firebase Cloud Function\"\/><\/figure>\n\n\n\n<ul><li>The user pushes commit to a GitHub repo.<\/li><li>An HTTPS function triggers through the GitHub&nbsp;<strong>webhook API<\/strong>.<\/li><li>The function notifies for the commit to a team Slack channel<\/li><\/ul>\n\n\n\n<h2>How does it work?<\/h2>\n\n\n\n<p>After writing and deploying a function, Google&#8217;s servers begin to manage the function immediately. We can fire the function directly with an HTTP request, or, in the case of background functions. When the function is triggered, Google&#8217;s servers will listen for the events and execute that respective function.<\/p>\n\n\n\n<p>Google responds via rapidly scaling the number of virtual server instances needed to run our function when the load increases or decreases. Each function runs separately, in its own environment with its own configuration.<\/p>\n\n\n\n<h2>The life-cycle of a background function<\/h2>\n\n\n\n<p>The developer writes code for the new function, defining the conditions under which the function should execute, and selecting an event provider (such as Realtime Database).<\/p>\n\n\n\n<p>The developer will deploy that function, which gets connected to the selected event provider by the firebase.<\/p>\n\n\n\n<p>The code is invoked when the event provider generates an event which matches the function&#8217;s conditions.<\/p>\n\n\n\n<p>Google creates more instances to handle work quickly if the function is busy in handling many events; if the function is idle, instances are cleaned up.<\/p>\n\n\n\n<p>All instances for the old version are cleared and replaced via new instances when the developer updates the function by deploying updated code.<\/p>\n\n\n\n<p>The connection between the event provider and the function is removed, and all instances are cleaned up when a developer deletes the function.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Mobile and web applications require back-end code to execute tasks like sending out notification or processing long-running tasks. In the past decade, this back-end code was running on a server. Recently Google&#8217;s Firebase has introduced a new service named Cloud Functions. With the help of Cloud Functions, Firebase provides a scalable solution for running the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1543,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/398"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=398"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/398\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1978,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/398\/revisions\/1978"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1543"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=398"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=398"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=398"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 399,
        "date": "2020-05-06T09:13:23",
        "date_gmt": "2020-05-06T09:13:23",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=399"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "firebase-triggers",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-triggers\/",
        "title": {
            "rendered": "Firebase Triggers"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>Functions<\/strong>&nbsp;which we write can respond to events that are generated by&nbsp;<strong>Firebase<\/strong>&nbsp;and&nbsp;<strong>Google Cloud<\/strong>&nbsp;features called&nbsp;<strong>triggers<\/strong>. Before developing our first Cloud Function, we explore the most common triggers which we can use for&nbsp;<strong>Cloud Function<\/strong>. There are the following triggers:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-triggers.png\" alt=\"Firebase Triggers\"\/><\/figure>\n\n\n\n<h2>Cloud Firestore Triggers<\/h2>\n\n\n\n<p>The Cloud Functions for Firebase SDK exports a&nbsp;<strong>function.firestore<\/strong>&nbsp;object, which allows us to create handlers tied to specific Cloud Firestore events. One thing to be noted is that Cloud Firestore events will trigger only on document changes. Adding events to specific fields is not possible.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Event Type<\/th><th>Trigger<\/th><\/tr><tr><td>1.<\/td><td>onCreate<\/td><td>It is triggered when a document is written for the first time.<\/td><\/tr><tr><td>2.<\/td><td>onUpdate<\/td><td>It is triggered when a document already exists and has any value changed.<\/td><\/tr><tr><td>3.<\/td><td>onDelete<\/td><td>It is triggered when a document is deleted with the data.<\/td><\/tr><tr><td>4.<\/td><td>onWrite<\/td><td>It is triggered when onCreate, onDelete, or onUpdate is triggered.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Realtime Database Triggers<\/h2>\n\n\n\n<p>By using Realtime Database triggers, we can respond to changes in the Firebase Realtime Database. To do this, we have to register for events on a specific database path&nbsp;<strong>function.database.ref (&#8216;\/foo\/bar&#8217;)<\/strong>. The database path which we want to register is passed as a parameter.<\/p>\n\n\n\n<p>With curly braces, it is also possible to define this part of the path as a wildcard.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>functions.database.ref('\/profiles\/{userID}')  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Event Type<\/th><th>Trigger<\/th><\/tr><tr><td>1.<\/td><td>onWrite()<\/td><td>It is activated when the data is created, changed, or destroyed.<\/td><\/tr><tr><td>2.<\/td><td>onCreate()<\/td><td>It is activated when new data is created.<\/td><\/tr><tr><td>3.<\/td><td>onUpdate()<\/td><td>It is activated when data is updated.<\/td><\/tr><tr><td>4.<\/td><td>onDelete()<\/td><td>It is activated when data is deleted.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Authentication Triggers<\/h2>\n\n\n\n<p>By using the authentication triggers, we can execute code in response to the creation and deletion of a user account via Firebase Authentication. The&nbsp;<strong>exports.newUserCreated = functions.auth.user().onCreate(event =&gt; { &#8230; })<\/strong>&nbsp;is used to create an event handler function which is executed if a new user is created.<\/p>\n\n\n\n<p>The Authentication trigger is invoked in the following cases:<\/p>\n\n\n\n<ol><li>When a user creates an email account and password.<\/li><li>When a user sign in for the first time with the help of a federated identity provider.<\/li><li>When the developer creates an account by using the Firebase Admin SDK.<\/li><li>For the first time when a user signs in to a new anonymous auth session.<\/li><\/ol>\n\n\n\n<p>A Cloud Functions event is not triggered if a user signs in for the first time using a custom token.<\/p>\n\n\n\n<h2>Cloud Storage Triggers<\/h2>\n\n\n\n<p>We can trigger a function in response to the updating, uploading, and deleting of files and folders in Cloud Storage. For registering an event handler function, we have to use the function.storage object in the following way:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.storageChanges = functions.storage.object().onChange(event => {...});  <\/code><\/pre>\n\n\n\n<p>In the above line of code, we are registering an event handler for all object changes on the default storage bucket. If we want to specify a specific storage bucket, we have to add the call of the bucket function as well:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.storageChanges = functions.storage.bucket('bucketName').object().onChange(event => {...});  <\/code><\/pre>\n\n\n\n<p>Within the event handler function, we can make use of various storage attributes:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Attribute<\/th><th>Description<\/th><\/tr><tr><td>1.<\/td><td>event.data<\/td><td>The storage object.<\/td><\/tr><tr><td>2.<\/td><td>event.data.bucket<\/td><td>The storage bucket that contains the file.<\/td><\/tr><tr><td>3.<\/td><td>event.data.name<\/td><td>The path of the file in the bucket.<\/td><\/tr><tr><td>4.<\/td><td>event.data.contentType<\/td><td>The file content type.<\/td><\/tr><tr><td>5.<\/td><td>event.data.resourceState<\/td><td>Either exist or not_exists. The not_exists value is set if the file\/folder has been deleted.<\/td><\/tr><tr><td>6.<\/td><td>event.data.metageneration<\/td><td>It is the no. of times the metadata of the file has been generated, and for new objects, the initial value is 1.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HTTP Triggers<\/h2>\n\n\n\n<p>HTTP trigger can be used with Firebase Cloud Function. These triggers are invoked through an HTTP request and registered by using functions.https in the following way:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.httpTest = functions.https.onRequest((req, res) => {...});  <\/code><\/pre>\n\n\n\n<h2>Remote Config Triggers<\/h2>\n\n\n\n<p>In response to Firebase remote config events, we can trigger a function, including publishing a new configuration version or rollback to an older version. For triggering a Remote Config function, we use the onUpdate handler, which is provided by&nbsp;<strong>function.remoteConfig<\/strong>.<\/p>\n\n\n\n<p>The onUpdate returns the&nbsp;<strong>TemplateVersion<\/strong>&nbsp;object, which contains the key metadata fields for a template update such as time and version number of the update. We can also retrieve the email for the user who had made the update, with an image and name, if available.<\/p>\n\n\n\n<h2>Analytics Triggers<\/h2>\n\n\n\n<p>By using Google Analytics for Firebase, we can understand in detail how the user interacts with our Android app and iOS app. The Analytics API exposes various events. Type conversion events can be used to register cloud functions as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.onPurchase = functions.analytics.event('in_app_purchase').onLog(event => {...});  <\/code><\/pre>\n\n\n\n<h2>Crashlytics Triggers<\/h2>\n\n\n\n<p>In response to Crashlytics issue events, which include new issues, velocity alerts, and regressed issues, we can trigger a function.<\/p>\n\n\n\n<p>For triggering a Crashlytics function, we generate an&nbsp;<strong>IssueBuilder<\/strong>&nbsp;with&nbsp;<strong>functions.crashlytics.issue()<\/strong>, and after that, we call the builder&#8217;s appropriate issue generation function.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Function<\/th><th>Description<\/th><\/tr><tr><td>1.<\/td><td>onNew()<\/td><td>This is triggered when our app experiences an issue for the first time.exports.sendOnNewIssue = functions.crashlytics.issue().onNew(async (issue) =&gt; { \/\/ &#8230; });<\/td><\/tr><tr><td>2.<\/td><td>onRegressed()<\/td><td>It is triggered when an issue reoccurs after it is closed in Crashlytics.exports.sendOnRegressedIssue = functions.crashlytics.issue().onRegressed(async (issue) =&gt; { \/\/ &#8230; });<\/td><\/tr><tr><td>3.<\/td><td>onVelocityAlert()<\/td><td>It is triggered when a statistically significant number of sessions in a given build crash.exports.sendOnVelocityAlert = functions.crashlytics.issue().onVelocityAlert(async (issue) =&gt; { \/\/ &#8230; });<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Pub\/Sub Triggers<\/h2>\n\n\n\n<p>Google Cloud Pub\/Sub is a globally distributed message bus which automatically scales as we need it. We can create a function which handles Google Cloud Pub\/Sub events by using functions.pubsub.<\/p>\n\n\n\n<p>We can trigger a function when a new Pub\/Sub message is sent to a specific topic. We have to specify the Pub\/Sub topic name for triggering our function and set the event within the onPublish() event handler.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.helloPubSub = functions.pubsub.topic('topic-name').onPublish((message) => {  \n  \/\/ ...  \n});  <\/code><\/pre>\n\n\n\n<h2>Test Lab Triggers<\/h2>\n\n\n\n<p>We can trigger a function in response to the completion of a test matrix in&nbsp;<strong>Firebase Test Lab<\/strong>. For creating a new function which triggers when a TestMatrix completes with the event handler&nbsp;<strong>function.testLab.testMatrix().onComplete()<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.sendEmailNotification = functions.testLab.testMatrix().onComplete((testMatrix) => {  \n  \/\/ ...  \n});  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;Functions&nbsp;which we write can respond to events that are generated by&nbsp;Firebase&nbsp;and&nbsp;Google Cloud&nbsp;features called&nbsp;triggers. Before developing our first Cloud Function, we explore the most common triggers which we can use for&nbsp;Cloud Function. There are the following triggers: Cloud Firestore Triggers The Cloud Functions for Firebase SDK exports a&nbsp;function.firestore&nbsp;object, which allows us to create handlers tied to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1544,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/399"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=399"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/399\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2105,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/399\/revisions\/2105"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1544"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=399"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=399"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=399"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 400,
        "date": "2020-05-06T09:15:50",
        "date_gmt": "2020-05-06T09:15:50",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=400"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "creating-and-deploying-cloud-function",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/creating-and-deploying-cloud-function\/",
        "title": {
            "rendered": "Creating and Deploying Cloud Function"
        },
        "content": {
            "rendered": "\n<p>In our previous section, we learned what are the Cloud Functions, why we use them, how these work, and different types of triggers.<\/p>\n\n\n\n<p>Now, we will create and deploy cloud functions in Firebase. For this, we have to set up the&nbsp;<strong>Node.js<\/strong>&nbsp;environment to write functions, and the&nbsp;<strong>Firebase CLI<\/strong>&nbsp;which also requires&nbsp;<strong>Node.js<\/strong>&nbsp;and&nbsp;<strong>npm<\/strong>&nbsp;to deploy functions.<\/p>\n\n\n\n<p>Firebase strongly recommends Node.js 8 for getting started. For installing Node.js and npm, the Node Version Manager is recommended.<\/p>\n\n\n\n<p><strong>Step 1:<\/strong><\/p>\n\n\n\n<p>So, we will first download the Node.js from the following site:&nbsp;https:\/\/nodejs.org\/en\/.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>Once the node.js is downloaded and run successfully, our next step is to install the Firebase CLI. Installing Node.js automatically install the npm command tools. After that we install the Firebase CLI through npm by running the following command on command prompt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g firebase-tools  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function2.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p><strong>Step 2:<\/strong><\/p>\n\n\n\n<p>Now, we will sign in and test the Firebase CLI. After installing the CLI, we must authenticate it. After that, we can confirm authentication by listing our Firebase projects.<\/p>\n\n\n\n<p>1) We run the following command to sign into the Firebase using our Google account.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase login  <\/code><\/pre>\n\n\n\n<p>The above command connects our local machine to Firebase and grants access to our Firebase projects.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function3.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>When we select to allow access, we will switch to the browser to allow access to the Firebase CLI:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function4.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>When we click on Allow, it shows the following window:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function5.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function6.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>2) Now, we test the CLI is properly working or not and accessing our account. This is done by listing our Firebase projects with the help of the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>firebase projects: list  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function7.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p><strong>Step 3:<\/strong><\/p>\n\n\n\n<p>Now, we will create a directory on our desktop named Firebase Cloud Function and move into this directory using the command line argument.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function8.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p><strong>Step 4:<\/strong><\/p>\n\n\n\n<p>Now, run the&nbsp;<strong>Firebase init functions<\/strong>&nbsp;command to initialize the function in the following way:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function9.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>It will start creating the directory structure. We will select yes and proceed further.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function10.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>In my case, by default, a project is already set named&nbsp;<strong>fir-demo-ca1c9<\/strong>. When you press yes, it will ask to select a project, and once you select your project, it will ask to choose your preferred language, i.e., JavaScript or TypeScript. I will choose JavaScript and proceed further.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function11.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>It will ask to use&nbsp;<strong>ESLint<\/strong>&nbsp;to catch probable bugs and enforce style. We will select, yes, and proceed.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function12.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>Now, it will ask to install dependencies with npm. We will select yes here also and proceed.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function13.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>Here, our Firebase initialization is completed, and it will have some directory structure for us. Go to our Firebase Cloud Function directory.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function14.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p><strong>Step 5:<\/strong><\/p>\n\n\n\n<p>Now, open function folder and open index.json file. In this file, we write our function.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function15.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function16.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>We write the code here.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>'use strict';  \n  \nconst functions = require('firebase-functions');  \nconst admin = require('firebase-admin');  \nadmin.initializeApp();  \n  \n\/\/ &#91;starting allAdd]  \n\/\/ &#91;starting addFunctionTrigger]  \n\/\/ adding two numbers to each other.  \nexports.addNumbers = functions.https.onCall((data) => {  \n\/\/ &#91;ending addFunctionTrigger]  \n  \/\/ &#91;starting readAddData]  \n  \/\/ Numbers are passed from the client.  \n  const firstNumber = data.firstNumber;  \n  const secondNumber = data.secondNumber;  \n  \/\/ &#91;ending readAddData]  \n  \n  \/\/ &#91;starting addHttpsError]  \n  \/\/ check that attributes are present and are numbers.  \n  if (!Number.isFinite(firstNumber) || !Number.isFinite(secondNumber)) {  \n    \/\/ Throw an HttpsError. So that the client gets the error details.   \n    throw new functions.https.HttpsError('invalid-argument', 'The function must be called with ' +  \n        'two arguments \"firstNumber\" and \"secondNumber\" which must both be numbers.');  \n  }  \n  \/\/ &#91;ending addHttpsError]  \n  \n  \/\/ &#91;starting returnAddData]  \n  \/\/ returning result.  \n  return {  \n    firstNumber: firstNumber,  \n    secondNumber: secondNumber,  \n    operator: '+',  \n    operationResult: firstNumber + secondNumber,  \n  };  \n  \/\/ &#91;ending returnAddData]  \n});  \n\/\/ &#91;ending allAdd] <\/code><\/pre>\n\n\n\n<p><strong>Step 6:<\/strong><\/p>\n\n\n\n<p>Now, we will deploy function. We can deploy either one function using&nbsp;<strong>firebase deploy -only functions:function_name<\/strong>&nbsp;or all the function using&nbsp;<strong>firebase deploy<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function17.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n\n\n\n<p>Here, functions are deployed successfully. We will go to the Firebase Console to check the function.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-and-deploying-cloud-function18.png\" alt=\"Firebase Creating and Deploying Cloud Function\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In our previous section, we learned what are the Cloud Functions, why we use them, how these work, and different types of triggers. Now, we will create and deploy cloud functions in Firebase. For this, we have to set up the&nbsp;Node.js&nbsp;environment to write functions, and the&nbsp;Firebase CLI&nbsp;which also requires&nbsp;Node.js&nbsp;and&nbsp;npm&nbsp;to deploy functions. Firebase strongly recommends Node.js [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1545,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/400"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=400"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/400\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1980,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/400\/revisions\/1980"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1545"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=400"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=400"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=400"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 401,
        "date": "2020-05-06T09:16:19",
        "date_gmt": "2020-05-06T09:16:19",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=401"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "firebase-crashlytics",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-crashlytics\/",
        "title": {
            "rendered": "Firebase Crashlytics"
        },
        "content": {
            "rendered": "\n<p>Firebase Crashlytics is a realtime, lightweight crash reporter who helps us to track, fix, and prioritize stability issues which destroy our app quality. Crashlytics protect us at the time of troubleshooting by intelligently grouping crashes and highlighting the circumstances which lead up to them.<\/p>\n\n\n\n<p>Firebase Crashlytics allows developers to get clear, actionable insight into application issues. If a particular crash is impacting a lot of users, developers can easily find it out. When an issue suddenly increases in rapidity, the developers get alerts and can figure out which lines of code are causing crashes.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-crashlytics2.png\" alt=\"Firebase Crashlytics\"\/><\/figure>\n\n\n\n<h2>Key Capabilities<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Capabilities<\/th><th>Description<\/th><\/tr><tr><td>1.<\/td><td>Curated crash reports<\/td><td>Crashlytics incorporates the avalanche of crashes into a manageable list of issues, exposes the severity and prevalence of crashes, and provides relevant information so that you can pinpoint the root cause faster.<\/td><\/tr><tr><td>2.<\/td><td>Cures for the common crash<\/td><td>Crashlytics provide Crash Insight and useful tips that highlight common stability issues as well as provide resources that make them easier to troubleshoot, triage, and solve.<\/td><\/tr><tr><td>3.<\/td><td>Integrated with Analytics<\/td><td>Crashlytics can catch our app errors as app_exception events in Analytics. Events make it easy for us to debug, allowing us to access a list of other events leading to each crash, and provide audience insights by allowing us to pull up Analytics reports for users with crashes.<\/td><\/tr><tr><td>4.<\/td><td>Realtime alerts<\/td><td>Receive real-time alerts for new issues, retrieved problems, and escalating issues that may require immediate attention.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Firebase Crashlytics is a realtime, lightweight crash reporter who helps us to track, fix, and prioritize stability issues which destroy our app quality. Crashlytics protect us at the time of troubleshooting by intelligently grouping crashes and highlighting the circumstances which lead up to them. Firebase Crashlytics allows developers to get clear, actionable insight into application [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1560,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/401"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=401"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/401\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 415,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/401\/revisions\/415"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1560"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=401"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=401"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=401"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 402,
        "date": "2020-05-06T09:17:00",
        "date_gmt": "2020-05-06T09:17:00",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=402"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "crashlytics-setup-and-configuration",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/crashlytics-setup-and-configuration\/",
        "title": {
            "rendered": "Crashlytics Setup and Configuration"
        },
        "content": {
            "rendered": "\n<p>In this, we will learn how we can use Firebase Crashlytics in an android application. For this, we need an android application. Just like Firebase Real-time Database and Firebase Authentication, the starting steps to use Crashlytics are the same, and we will use Kotlin here also. So let&#8217;s start with the starting steps and elaborate each step, which is performed to set up and configure the application to use Firestore in Firebase.<\/p>\n\n\n\n<p><strong>Step 1:<\/strong><\/p>\n\n\n\n<p>In the first step, we will create a new Android Studio project with an empty activity and Kotlin language and name it&nbsp;<strong>CrashlyticsExample<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-crashlytics-setup-and-configuration1.png\" alt=\"Firebase Crashlytics Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 2:<\/strong><\/p>\n\n\n\n<p>In the next step, we will connect our Android Application with the Firebase either from Firebase Assistant or manually using the console. After that, we will add all the required libraries and plugin to our app.gradle file. And we will also add maven in our repository and all projects.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-crashlytics-setup-and-configuration2.png\" alt=\"Firebase Crashlytics Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 3:<\/strong><\/p>\n\n\n\n<p>We will update our&nbsp;<strong>app.gradle<\/strong>&nbsp;file. We will add plugin to the google-services and io.fabric. We will add the dependency of Firebase core and analytics for Crashlytics.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-crashlytics-setup-and-configuration3.png\" alt=\"Firebase Crashlytics Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 4:<\/strong><\/p>\n\n\n\n<p>Now, go to Firebase console and select Crashlytics from&nbsp;<strong>Firebase-&gt; Quality-&gt; Crashlytics<\/strong>. After that, click on&nbsp;<strong>Set up Crashlytics<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-crashlytics-setup-and-configuration4.png\" alt=\"Firebase Crashlytics Setup and Configuration\"\/><\/figure>\n\n\n\n<p>When we click on&nbsp;<strong>Set up Crashlytics<\/strong>, it will ask that &#8220;<strong>are you a Fabric user migrating a Crashlytics app?<\/strong>&#8221; We will select&nbsp;<strong>No, set up a new Firebase append,<\/strong>&nbsp;click on&nbsp;<strong>Next<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-crashlytics-setup-and-configuration5.png\" alt=\"Firebase Crashlytics Setup and Configuration\"\/><\/figure>\n\n\n\n<p>When we click on next, it will tell us to install SDKs, which we already did.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-crashlytics-setup-and-configuration6.png\" alt=\"Firebase Crashlytics Setup and Configuration\"\/><\/figure>\n\n\n\n<p>When we click on&nbsp;<strong>Go to Crashlytics docs<\/strong>, it will switch to the Firebase Crashlytics document page, and when we go back to the console, it will give permission to build and run our app.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-crashlytics-setup-and-configuration7.png\" alt=\"Firebase Crashlytics Setup and Configuration\"\/><\/figure>\n\n\n\n<p>In terms of setup and configuration, we don&#8217;t have to do anything else because there is an automatic cook in the Android Manifest xml file, which automatically initializes the Firebase SDK.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this, we will learn how we can use Firebase Crashlytics in an android application. For this, we need an android application. Just like Firebase Real-time Database and Firebase Authentication, the starting steps to use Crashlytics are the same, and we will use Kotlin here also. So let&#8217;s start with the starting steps and elaborate [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1581,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/402"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=402"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/402\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 416,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/402\/revisions\/416"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1581"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=402"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=402"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=402"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 404,
        "date": "2020-05-06T09:19:11",
        "date_gmt": "2020-05-06T09:19:11",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=404"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "crash-report-in-firebase-crashlytics",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/crash-report-in-firebase-crashlytics\/",
        "title": {
            "rendered": "Crash Report in Firebase Crashlytics"
        },
        "content": {
            "rendered": "\n<p>In our previous section, we learned about Firebase Crashlytics and how we can set up and configure it with our application. Now, we will test our Firebase Crashlytics implementation. So we have to set up the app for the crash to happen in order to know the Crashlytics is working properly.<\/p>\n\n\n\n<p>Firebase Crashlytics provides four logging mechanisms for giving more insight into crash reports. These mechanisms are:<\/p>\n\n\n\n<ol><li>Custom keys<\/li><li>Custom logs<\/li><li>User identifiers<\/li><li>Caught exception<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/crash-report-in-firebase-crashlytics.png\" alt=\"Crash Report in Firebase Crashlytics\"\/><\/figure>\n\n\n\n<h2>Custom Keys<\/h2>\n\n\n\n<p>Custom keys help us to get the specific state of our app, leading up to a crash. Custom keys associate arbitrary key\/value pairs with our crash reports and see them in the Firebase console. There are five methods to set keys, and each of them handles a different data type.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Crashlytics.setString(key, \"foo\" \/* string value *\/)  \nCrashlytics.setBool(key, true \/* boolean value *\/)  \nCrashlytics.setDouble(key, 1.0 \/* double value *\/)  \nCrashlytics.setFloat(key, 1.0f \/* float value *\/)  \nCrashlytics.setInt(key, 1 \/* int value *\/)  <\/code><\/pre>\n\n\n\n<p>Re-setting a key updates its value:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Crashlytics.setInt(\"current_level\", 3)  \nCrashlytics.setString(\"last_UI_action\", \"logged_in\")  <\/code><\/pre>\n\n\n\n<h2>Adding Custom Log Messages<\/h2>\n\n\n\n<p>We can add custom Crashlytics logs in our app for giving more context for the events leading up to a crash. It associates the logs with our crash data and makes them visible in the Firebase console. We can write logs to a crash report with the Crashlytics.log method and with Log.println():<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Crashlytics.log(Log.DEBUG,\"tag\",\"message\")  \n\/\/For crash report only  \nCrashlytics.log(\"message\")  <\/code><\/pre>\n\n\n\n<h2>Setting User Identifiers<\/h2>\n\n\n\n<p>To diagnose an issue, it&#8217;s often helpful to know which of our users experienced a given crash. Crashlytics include a way to identify users in the crash reports anonymously. For adding user IDs to the reports, we have to assign each user a unique identifier in the form of an ID number, token, or hashed value:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Crashlytics.setUserIdentifier(\"user123456789\")  <\/code><\/pre>\n\n\n\n<p>If we ever need to clear a user identifier after setting it, reset the value to a blank string. When we clear a user identifier, it will not remove existing Crashlytics records.<\/p>\n\n\n\n<h2>Logging Non-fatal Exception<\/h2>\n\n\n\n<p>Logging non-fatal exception means that we can log caught exceptions in our app&#8217;s catch blocks:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>try{  \n    methodThatThrows()  \n}catch(e: Exception){  \n    Crashlytics.logException(e)  \n    \/\/handle our exception here  \n}  <\/code><\/pre>\n\n\n\n<p>All logged exceptions appear as non-fatal issues in the Firebase console. The issue summary contains all the state information which we normally get from crashes, along with breakdowns by Android version and hardware device.<\/p>\n\n\n\n<p>Crashlytics processes exception in a dedicated background thread, and the performance impacts on the app is minimal.<\/p>\n\n\n\n<h2>Enabling Opt-in Reporting<\/h2>\n\n\n\n<p>By default, Firebase Crashlytics automatically collects crash reports for all app&#8217;s users. We can use&nbsp;<strong>Opt-in Reporting<\/strong>&nbsp;by enabling more control over the data, they send. We have to disable automatic collection and initialize Crashlytics only for opt-in users. We can turn off the automatic collection with a meta-data tag in our AndroidManifest.xml file:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;meta-data>  \n    android:name=\"firebase_crashlytics_collection_enabled\"  \n    android: value=\"false\"\/>  <\/code><\/pre>\n\n\n\n<p>We can enable collection for selected users by initializing Crashlytics from one of our app&#8217;s activities, Fabric.with(this, Crashlytics()).<\/p>\n\n\n\n<h2>Managing Crash Insight Data<\/h2>\n\n\n\n<p>Crash Insights let us resolve the issues by comparing your anonymous stack traces with those of other Firebase apps.<\/p>\n\n\n\n<p>Crash Insight Data helps in the following two ways:<\/p>\n\n\n\n<ol><li>It enables you to know if the issue belongs to a larger trend.<\/li><li>It can also provide resources which can help in debugging the crash.<\/li><\/ol>\n\n\n\n<p>Crash Insight uses aggregated crash data to identify common stability trends. We can opt-out of Crash Insight from the Crash Insight menu at the top of our Crashlytics issue list in the Firebase console.<\/p>\n\n\n\n<h2>Customizing Velocity Alerts<\/h2>\n\n\n\n<p>Velocity alerts can notify our team when any individual issue is causing an urgent problem in our app. The velocity alerts are triggered when an issue in our app crosses a threshold which we had defined in the Firebase console. The threshold is defined in terms of a percentage of user sessions that were impacted by a crash, and the value is set in between 0.1% and 1% of sessions.<\/p>\n\n\n\n<p>An alert is triggered if, during a specific time period, the following are true:<\/p>\n\n\n\n<ol><li>When an issue in an app exceeds the defined threshold for that app.<\/li><li>When the app has 250 sessions in that time period.<\/li><li>When there was no alert previously raised for the issue in the app.<\/li><\/ol>\n\n\n\n<p>For updating velocity alerts, we must have the necessary permissions. In the Firebase console, go to Crashlytics dashboard:<\/p>\n\n\n\n<ul><li>Select the app from the app drop-down list present at the top of the page.<\/li><li>Open the overflow menu from the top bar of the issues pane, and then select velocity alert settings.<\/li><li>For setting the alert threshold for the app, follow the on-screen instructions.<\/li><\/ul>\n\n\n\n<p>We can route velocity alerts to our team using either emails or integrations. Let&#8217;s see an example in which we will create an application that has a button which is going to simulate a crash.<\/p>\n\n\n\n<p><strong>activity_main.xml<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/crash-report-in-firebase-crashlytics2.png\" alt=\"Crash Report in Firebase Crashlytics\"\/><\/figure>\n\n\n\n<p><strong>MainActivity.kt<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.example.crashlyticsexample  \n  \nimport androidx.appcompat.app.AppCompatActivity  \nimport android.os.Bundle  \nimport android.util.Log  \nimport android.view.ViewGroup  \nimport android.widget.Button  \nimport com.crashlytics.android.Crashlytics  \nimport io.fabric.sdk.android.Fabric  \n  \nclass MainActivity : AppCompatActivity() {  \n  \n    override fun onCreate(savedInstanceState: Bundle?) {  \n      \n        super.onCreate(savedInstanceState)  \n        setKeysBasic(\"JasonTest\");  \n        logReportAndPrint()  \n        logReportOnly()  \n        setUserId()  \n        logCaughtEx()  \n        enableDebugMode()  \n        forceACrash()  \n      \n    }  \n    \/\/Setting key-value pairs  \n    private fun setKeysBasic(key: String) {  \n          \n        Crashlytics.setString(key, \"foo\" \/* string value *\/)  \n  \n        Crashlytics.setBool(key, true \/* boolean value *\/)  \n  \n        Crashlytics.setDouble(key, 1.0 \/* double value *\/)  \n  \n        Crashlytics.setFloat(key, 1.0f \/* float value *\/)  \n  \n        Crashlytics.setInt(key, 1 \/* int value *\/)  \n    }  \n    \/\/ Modifying keys   \n    private fun resetKey() {  \n        Crashlytics.setInt(\"current_level\", 3)  \n        Crashlytics.setString(\"last_UI_action\", \"logged_in\")  \n    }  \n  \n\/\/Adding custom log and log messages       \nprivate fun logReportAndPrint() {  \n        Crashlytics.log(Log.DEBUG, \"tag\", \"message\")  \n    }  \n      \n\/\/ Only for log Report  \n    private fun logReportOnly() {  \n        Crashlytics.log(\"message\")  \n    }  \n  \n\/\/ Enabling at run time  \n    private fun enableAtRuntime() {  \n        Fabric.with(this, Crashlytics())  \n    }  \n\/\/ Setting user identifier  \n    private fun setUserId() {  \n        Crashlytics.setUserIdentifier(\"user123456789\")  \n    }  \n  \n    @Throws(Exception::class)  \n    private fun methodThatThrows() {  \n        throw Exception()  \n    }  \n\/\/ log exception  \n    private fun logCaughtEx() {  \n        try {  \n            methodThatThrows()  \n        } catch (e: Exception) {  \n            Crashlytics.logException(e)  \n            \/\/ handle your exception here  \n        }  \n    }  \n\/\/ Enabling debug mode  \n    private fun enableDebugMode() {  \n        val fabric = Fabric.Builder(this)  \n            .kits(Crashlytics())  \n            .debuggable(true) \/\/ Enables Crashlytics debugger  \n            .build()  \n        Fabric.with(fabric)  \n    }  \n  \n    private fun forceACrash() {  \n        val crashButton = Button(this)  \n        crashButton.text = \"Crash!\"  \n        crashButton.setOnClickListener {  \n            Crashlytics.getInstance().crash() \/\/ Force a crash  \n        }  \n  \n        addContentView(crashButton, ViewGroup.LayoutParams(  \n            ViewGroup.LayoutParams.MATCH_PARENT,  \n            ViewGroup.LayoutParams.WRAP_CONTENT))  \n    }  \n}  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/crash-report-in-firebase-crashlytics3.png\" alt=\"Crash Report in Firebase Crashlytics\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/crash-report-in-firebase-crashlytics4.png\" alt=\"Crash Report in Firebase Crashlytics\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/crash-report-in-firebase-crashlytics5.png\" alt=\"Crash Report in Firebase Crashlytics\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/crash-report-in-firebase-crashlytics6.png\" alt=\"Crash Report in Firebase Crashlytics\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In our previous section, we learned about Firebase Crashlytics and how we can set up and configure it with our application. Now, we will test our Firebase Crashlytics implementation. So we have to set up the app for the crash to happen in order to know the Crashlytics is working properly. Firebase Crashlytics provides four [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1558,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/404"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=404"
                }
            ],
            "version-history": [
                {
                    "count": 4,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/404\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2104,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/404\/revisions\/2104"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1558"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=404"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=404"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=404"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 407,
        "date": "2020-05-06T09:19:31",
        "date_gmt": "2020-05-06T09:19:31",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=407"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "firebase-cloud-messaging",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-cloud-messaging\/",
        "title": {
            "rendered": "Firebase Cloud Messaging"
        },
        "content": {
            "rendered": "\n<p>Firebase Cloud Messaging (FCM) is a cross-platform messaging solution which reliably sends the message at no cost. It is formally known as Google Cloud Messaging, which is used for Android, iOS, and web applications.<\/p>\n\n\n\n<p>The service is provided by Google&#8217;s subsidiary Firebase and on 21 October 2014, Firebase announced that it had been acquired by Google for an undisclosed amount. The official Google Cloud Messaging website demonstrates the Firebase Cloud Messaging (FCM) as the new version of GCM.<\/p>\n\n\n\n<p>If we are using Google Cloud Messaging (GCM) server and client APIs, then there is some bad news, which is that this service has already been removed, and Google plans to discontinue &#8220;most&#8221; GCM services in April 2019. If we are still using GCM, then we should start migrating our projects to FCM now and complete our migration by April 2019.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-cloud-messaging2.png\" alt=\"Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p>FCM is a free, cross-platform messaging solution which allows us to send push notifications to our audience without worrying about the server code. Using FCM with Firebase&#8217;s Notification Composer (as seen in the following screenshot), the user can create notifications that target very specific sections of the user base, generally without writing any specific code. Using FCM:<\/p>\n\n\n\n<ol><li>We can send data messages and notification messages.<\/li><li>We can distribute messages for a single device, groups of the device, or for devices subscribed to some topic.<\/li><li>We can send chats, acknowledgments, and other messages from devices back to the server over FCM&#8217;s battery-efficient connection and reliable channel.<\/li><\/ol>\n\n\n\n<h2>How is FCM differ from GCM?<\/h2>\n\n\n\n<ol><li>In FCM, there is no need to write our own registration or subscription retry logic.<\/li><li>There is no need to declare &#8220;Receiver&#8221; in FCM explicitly.<\/li><li>There is no need to initialize the registration token because the generation of registration token is handled by the library itself.<\/li><li>FCM gives server-less notification solution with web console-Firebase notification. This web console will remind us about the Parse Push console.<\/li><\/ol>\n\n\n\n<h2>How does it work?<\/h2>\n\n\n\n<p>FCM implementation contains two main components for sending and receiving. The first one is a trusted environment such as Cloud Function for Firebase or an app server on which to build, target, and send messages, essentially the server-side, and another one is an android client app which receives messages. If we implement our own server code in Cloud Function or Java code, then we can send messages via Firebase Admin SDK or the FCM server protocols.<\/p>\n\n\n\n<p>We can also use the Notification composer for testing or for sending marketing or engagement messages with powerful built-in targeting and analytics.<\/p>\n\n\n\n<h3>Implementation path<\/h3>\n\n\n\n<p><strong>1) Set up the FCM SDK<\/strong><\/p>\n\n\n\n<p>Set up Firebase and FCM on our app according to the setup instruction for our platform.<\/p>\n\n\n\n<p><strong>2) Develop our client app<\/strong><\/p>\n\n\n\n<p>In our client app, we have to add message handling, topic subscription logic, or other optional features. During development, we can easily send text messages from the Notification composer.<\/p>\n\n\n\n<p><strong>3) Develop our app server<\/strong><\/p>\n\n\n\n<p>We need to decide whether we want to use the Firebase Admin SDK or one of the server protocols to create our sending logic, i.e., logic to authenticate, build send requests, handle responses, etc., and build out the logic in our trusted environment.<\/p>\n\n\n\n<p><strong>4) Concerning the development of our own app server<\/strong><\/p>\n\n\n\n<p>It will give us the basics of the Server environment, but we will not write any code.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Firebase Cloud Messaging (FCM) is a cross-platform messaging solution which reliably sends the message at no cost. It is formally known as Google Cloud Messaging, which is used for Android, iOS, and web applications. The service is provided by Google&#8217;s subsidiary Firebase and on 21 October 2014, Firebase announced that it had been acquired by [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1561,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/407"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=407"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/407\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1982,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/407\/revisions\/1982"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1561"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=407"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=407"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=407"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 409,
        "date": "2020-05-06T09:21:03",
        "date_gmt": "2020-05-06T09:21:03",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=409"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "types-of-message",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/types-of-message\/",
        "title": {
            "rendered": "Types of Message"
        },
        "content": {
            "rendered": "\n<p>Using Firebase Cloud Messaging, we can send three types of messages, i.e.,&nbsp;<strong>Notification Message, Data Message,<\/strong>&nbsp;and the message with both&nbsp;<strong>Notification &amp; Data Payload<\/strong>.1) Notification MessageFirebase SDK has handled notification messages itself. Typically, the notification message includes the title, icon, message, etc. These messages can also be sent from the Firebase console UI. By sending this type of message, we will not have much control over the information. The notification will appear automatically when the app is in the background.A notification is a message which Android shows outside of our app&#8217;s UI for providing users with reminders, communication with other people, or other timely information about our app. Users can tap on the notification to open our app or take action directly from the notification.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>The notification design is determined by the system template &#8211; the content for each part of the template is defined by our app. Some information on the notification only appears in the expanded view. The most common parts of notification are as follows: <strong>Small icon<\/strong><br>It is essential to set a small icon in the notification. This small icon is set with setSmallIcon().<strong>App name<\/strong><br>The application name is provided by the system.<strong>Timestamp<\/strong><br>The timestamp is also provided by the system, but we can override it with setWhen() function or hide it with&nbsp;<strong>setShowWhen()<\/strong>&nbsp;function.<strong>Title<\/strong><br>It is also optional and set with setContentTitle() function.<strong>Text<\/strong><br>Text is optional and set with setContentText().<strong>Large icon<\/strong><br>This is optional, and we use it for contact photos. We don&#8217;t use it for our app icon and set with&nbsp;<strong>setLargeIcon()<\/strong>&nbsp;function.2) Data MessageData messages are handled by the Android app. If we want to send some additional data along with the information, then we can add such messages. But, it is not possible to send these messages through the Firebase console. To send notifications using the Firebase API, we must have server-side logic. We must use the data key while sending this message.We can use data messages to send custom data elements to a client application. However, FCM places a 4KB limit on these data messages, so if our payload is greater than 4KB, we must obtain additional data using the WorkManager or JobScheduler API.3) Messages with both Notification and Data payloadBoth Notification and Data payload can also be contained in a message. Sending of these types of messages is handled in two scenarios depending upon the app state, i.e., background and foreground. We can use both the notification and data keys for these messages.When the app state is in the background, the apps receive the notification payload when the user taps on the notification, and when in the foreground, the app receives a message object with both payloads available.FCM ConsoleNow, we will create an Android project and add it with the Firebase either from Google Assistant or manually. After that, we will move to the FCM console (Firebase-&gt;Grow-&gt;Cloud Messaging).<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message2.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>Click on&nbsp;<strong>Send your first message<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message3.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>After clicking on&nbsp;<strong>Send your first message<\/strong>, it will ask to fill a few of the fields such as notification title, notification text, notification image that is optional, and notification name, which is also optional.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message4.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>After filling all the fields, click on&nbsp;<strong>Next<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message5.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>After clicking on&nbsp;<strong>Next<\/strong>, it will ask for the&nbsp;<strong>Target<\/strong>&nbsp;either&nbsp;<strong>User segment<\/strong>&nbsp;or&nbsp;<strong>Topic<\/strong>. We will select the app for the target user and click on&nbsp;<strong>Next<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message6.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message7.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>When we click on the&nbsp;<strong>Next<\/strong>, it will ask for the&nbsp;<strong>Scheduling<\/strong>&nbsp;and click on&nbsp;<strong>Next again<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message8.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>After that, it will ask for the&nbsp;<strong>Conversion events<\/strong>. We can do this, but it is optional. So, we can ignore it and proceed further.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message9.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>After that, it will ask for some additional options, which are also optional. These are notification channels, custom data, sound, and expires, etc. After that, we will click on&nbsp;<strong>the Review<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message10.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>After publishing, we can see the notification in the console.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message11.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<p>We can duplicate notification if we want to get insight on message delivery to our app. We can go to the reporting dashboard, which records a number of messages sent in the device. It also has some data for impressions notifications which are seen by users, but we will go through more of the notification composer.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message12.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-types-of-message13.png\" alt=\"Firebase Types of Message\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Using Firebase Cloud Messaging, we can send three types of messages, i.e.,&nbsp;Notification Message, Data Message,&nbsp;and the message with both&nbsp;Notification &amp; Data Payload.1) Notification MessageFirebase SDK has handled notification messages itself. Typically, the notification message includes the title, icon, message, etc. These messages can also be sent from the Firebase console UI. By sending this type [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1562,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/409"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=409"
                }
            ],
            "version-history": [
                {
                    "count": 5,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/409\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2103,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/409\/revisions\/2103"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1562"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=409"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=409"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=409"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 405,
        "date": "2020-05-06T09:24:21",
        "date_gmt": "2020-05-06T09:24:21",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=405"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "notification-message-using-firebase",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/notification-message-using-firebase\/",
        "title": {
            "rendered": "Notification Message using Firebase"
        },
        "content": {
            "rendered": "\n<p>In this section, we will talk about how we can send a test notification message from the Notification composer to a development device when the app is in the background of the device. For this, we have to:<\/p>\n\n\n\n<p>1) Create a Firebase project.<\/p>\n\n\n\n<p>2) Connect our app to Firebase either from the assistant or console and download the google-services.json file to our app directory.<\/p>\n\n\n\n<p>3) In our project level build.gradle file, make sure to include Google&#8217;s Maven repository in both our buildscript and all project section.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging.png\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p>4) For the app build.gradle file, we have two implementation library&#8221;<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Add the Cloud Messaging Android library and firebase core library to our app\/build.gradle file:\nImplementation of 'com.google.firebase:firebase-core:17.0.0'\nImplementation of 'com.google.firebase:firebase-messaging:19.0.1'\nAlso, add google play dependencies(classpath and apply):\napply plugin:'com.google.gms.google-services'\nclasspath 'com.google.gms:google-services:4.2.0'<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging2.png\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p><strong>5) Edit our App Manifest<\/strong><\/p>\n\n\n\n<p>Notification channels are recommended and supported. FCM gives a default notification channel with basic settings. If we want to create and use our default channel, then we have to set default_notification_channel_id to the ID of our notification channel object. FCM will use this value when incoming messages do not explicitly set a notification channel:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;meta-data  \n    android:name=\"com.google.firebase.messaging.default_notification_channel_id\"  \n    android:value=\"fcm_default_channel\"\/>  <\/code><\/pre>\n\n\n\n<p>6) Now, we will move to our main activity to make sure that the notification channels are created.<\/p>\n\n\n\n<p><strong>7) Access the Device Registration Token<\/strong><\/p>\n\n\n\n<p>On the initial startup of our app, the FCM SDK generates a registration token for the client app instance. If we want to target a single device, we will need to access this token by extending Firebase Messaging Service and overriding onNewToken. The token can be rotated after the initial startup, so it is strongly recommended to retrieve the latest updated registration token.<\/p>\n\n\n\n<p>The registration token may change:<\/p>\n\n\n\n<ol><li>When the instance ID is deleted by the app.<\/li><li>When the app is restored on a new device.<\/li><li>When the user reinstalls\/uninstalls the app.<\/li><li>When the user clears app data.<\/li><li>Retrieve the Current Registration Token<\/li><\/ol>\n\n\n\n<p>When we need to retrieve the current token, call FirebaseIntanceId.getInstance().getInstanceId().4<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>FirebaseInstanceId.getInstance().instanceId  \n    .addOnCompleteListener{task-?  \n        if(!task.isSuccessful){  \n            Log.w(TAG, \"getInstanceId failed\", task.exception)  \n            return@OnCompleteListener  \n        }  \n        \/\/Getting new instance id token  \n    val token=task.result?.token  \n          \n     \/\/toast and log   \n        val msg1=getString(R.string.msg_token_fmt, token)  \n  \n        Log.d(TAG, msg1)  \n        Toast.makeText(baseContext, msg1, Toast.Length_Short).show()  \n)}  <\/code><\/pre>\n\n\n\n<p><strong>9) Monitor Token Generation<\/strong><\/p>\n\n\n\n<p>The oneNewToken callback is fired when a new token is generated. When we obtained the token, we can send it to our app server and store it using our preferred method:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/** \n* It is called if InstanceID token is modified(update). This may happen if the security of  \nthe previous token had been compromised. Essentially this is called when the InstanceID token \n is generated.  \n*\/  \noverride fun onNewToken(token: String) {  \nLog.d(TAG, \"Refreshed token: $token\")  \n  \n            \/\/ If we want to send messages to this application instance or  \n            \/\/ manage the app's subscription on the server-side, send the  \n        \/\/ Instance ID token to your app server.  \n            sendRegistrationToServer(token)  \n    }  <\/code><\/pre>\n\n\n\n<p><strong>activity_main.xml<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging3.jpg\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p><strong>Main_activity.kt<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.example.firebasecloudmessaging  \n  \nimport android.app.NotificationChannel  \nimport android.app.NotificationManager  \nimport android.os.Build  \nimport android.os.Bundle  \nimport android.util.Log  \nimport android.widget.Toast  \nimport androidx.appcompat.app.AppCompatActivity  \nimport com.google.android.gms.tasks.OnCompleteListener  \nimport com.google.firebase.iid.FirebaseInstanceId  \nimport com.google.firebase.messaging.FirebaseMessaging  \nimport kotlinx.android.synthetic.main.activity_main.*  \n  \nclass MainActivity : AppCompatActivity() {  \n  \n    override fun onCreate(savedInstanceState: Bundle?) {  \n        super.onCreate(savedInstanceState)  \n        setContentView(R.layout.activity_main)  \n  \n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {  \n            \/\/ Creating channel to show notifications.  \n            val channelId = getString(R.string.default_notification_channel_id)  \n            val channelName = getString(R.string.default_notification_channel_name)  \n            val notificationManager = getSystemService(NotificationManager::class.java)  \n            notificationManager?.createNotificationChannel(NotificationChannel(channelId,  \n                channelName, NotificationManager.IMPORTANCE_LOW))  \n        }  \n  \n        \/\/ Any data accompanying the notification, if a notification message is tapped.  \n        \/\/ message is available in the intent extras.   \n        \/\/ The launcher intent is triggered when the notification is tapped, so any accompanying data can         \/\/ be handled here. If we want a different intent fired, click_action\/\/ set the field of the notification message to the desired intent. The launcher intent  \n        \/\/ is used when no click_action is specified.  \n        \/\/  \n        \/\/ Handle possible data accompanying notification message.  \n        intent.extras?.let {  \n            for (key in it.keySet()) {  \n                val value = intent.extras!!.get(key)  \n                Log.d(TAG, \"Key: $key Value: $value\")  \n            }  \n        }  \n  \n        subscribeButton.setOnClickListener {  \n            Log.d(TAG, \"Subscribing to my topic\")  \n            FirebaseMessaging.getInstance().subscribeToTopic(\"myTopic\")  \n                .addOnCompleteListener { task ->  \n                    var msg1 = getString(R.string.msg_subscribed)  \n                    if (!task.isSuccessful) {  \n                        msg1 = getString(R.string.msg_subscribe_failed)  \n                    }  \n                    Log.d(TAG, msg1)  \n                    Toast.makeText(baseContext, msg1, Toast.LENGTH_SHORT).show()  \n                }  \n        }  \n  \n        logTokenButton.setOnClickListener {  \n            \/\/ Getting token  \n            FirebaseInstanceId.getInstance().instanceId  \n                .addOnCompleteListener(OnCompleteListener { task ->  \n                    if (!task.isSuccessful) {  \n                        Log.w(TAG, \"getInstanceId failed\", task.exception)  \n                        return@OnCompleteListener  \n                    }  \n  \n                    \/\/ Getting new Instance ID token  \n                    val token = task.result?.token  \n                     \/\/ toast and Log                     val msg1 = getString(R.string.msg_token_fmt, token)  \n                    Log.d(TAG, msg1)  \n                    Toast.makeText(baseContext, msg1, Toast.LENGTH_SHORT).show()  \n                })  \n        }  \n    }  \n  \n    companion object {  \n        private const val TAG = \"MainActivity\"  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>MyFirebaseMessagingService.kt<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.example.firebasecloudmessaging  \n  \nimport android.app.NotificationChannel  \nimport android.app.NotificationManager  \nimport android.app.PendingIntent  \nimport android.content.Context  \nimport android.content.Intent  \nimport android.os.Build  \nimport android.util.Log  \nimport androidx.annotation.NonNull  \nimport androidx.core.app.NotificationCompat  \nimport com.example.firebasecloudmessaging.MainActivity  \nimport com.example.firebasecloudmessaging.R  \nimport com.google.firebase.messaging.FirebaseMessagingService  \nimport com.google.firebase.messaging.RemoteMessage  \n  \nclass MyFirebaseMessagingService : FirebaseMessagingService() {  \n  \n    \/*** It is called when message is received. \n     * @param remoteMessage Object representing the message received from Firebase Cloud Messaging. \n     *\/  \n    override fun onMessageReceived(remoteMessage: RemoteMessage) {  \n  \n\/\/There are two types of messages, i.e., data messages and notification messages. \/\/The data messages are handled here in onMessageReceived, either the app is in the foreground or background.   \n\/\/The data messages are traditionally used with GCM.   \n\/\/The notification messages are only received here in onMessageReceived when the app is in the foreground, and if the app is in the background, the automatically generated notification is displayed.   \n\/\/If the user taps on the notification, they are returned to the app.   \n\/\/Messages containing both notifications and data payloads are treated as notification messages.   \n\/\/The Firebase console always sends a notification message.   \n\/\/For more see: https:\/\/firebase.google.com\/docs\/cloud-messaging\/concept-options  \n  \n        \/\/ TODO(developer): Handle FCM messages here.  \n        Log.d(TAG, \"From: ${remoteMessage?.from}\")  \n  \n        \/\/ Check if message contains a data payload.  \n        remoteMessage?.data?.isNotEmpty()?.let {  \n            Log.d(TAG, \"Message data payload: \" + remoteMessage.data)  \n        }  \n  \n        \/\/ Check if message contains a notification payload.  \n        remoteMessage?.notification?.let {  \n            Log.d(TAG, \"Message Notification Body: ${it.body}\")  \n            sendNotification(it.body.toString())  \n        }  \n  \n        \/\/ Also, if we intend on generating our own notifications as a result of a received FCM message, here is where that should be initiated. See the send notification method below.  \n    }  \n  \n    \/** \n     * It called if InstanceID token is modified(update). This may happen if the security of      * the previous token had been compromised. This is essentially called when the InstanceID token* is generated, so this is where we would retrieve the token. \n     *\/  \n    override fun onNewToken(token: String) {  \n        Log.d(TAG, \"Refreshed token: $token\")  \n  \n        \/\/ If we want to send messages to this application instance or\/\/ manage this apps subscription on the server-side, send the\/\/ Instance ID token to our app server.  \n        sendRegistrationToServer(token)  \n    }  \n  \n    \/*** Preserve token to third-party servers. \n     * Modify this method relate to the user's FCM InstanceID token with any server-side account \n     * maintained by your application. \n     * \n     * @param token The new token. \n     *\/  \n    private fun sendRegistrationToServer(token: String?) {  \n        \/\/ TODO: Implement this method to send a token to your app server.  \n    }  \n  \n    \/** \n     * Creating and showing a simple notification containing the received FCM message. \n     * \n     * @param messageBody FCM message body received. \n     *\/  \n    private fun sendNotification(messageBody: String) {  \n        val intent = Intent(this, MainActivity::class.java)  \n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)  \n        val penIntent = PendingIntent.getActivity(this, 0 \/* Request code *\/, intent,  \n            PendingIntent.FLAG_ONE_SHOT)  \n  \n        val channelId = getString(R.string.default_notification_channel_id)  \n        val notificationBuilder = NotificationCompat.Builder(this, channelId)  \n            .setSmallIcon(R.drawable.ic_stat_ic_notification)  \n            .setContentTitle(getString(R.string.fcm_message))  \n            .setContentText(messageBody)  \n            .setAutoCancel(true)  \n            .setContentIntent(penIntent)  \n  \n  \n        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager  \n  \n        \/\/ Since android Oreo notification channel is needed.  \n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {  \n            val channel = NotificationChannel(channelId,  \n                \"Channel human readable title\",  \n                NotificationManager.IMPORTANCE_DEFAULT)  \n            notificationManager.createNotificationChannel(channel)  \n        }  \n  \n        notificationManager.notify(channelId, 1,  notificationBuilder.build())  \n    }  \n  \n    companion object {  \n        private const val TAG = \"MyFirebaseMsgService\"  \n    }  \n}  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging4.png\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging5.jpg\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p>When we click on the Log Token button, it provides us an InstanceID Token, which we use in our FCM console to send a message.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging6.png\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p>Now, we will move to our FCM console and click on&nbsp;<strong>New Notification<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging7.png\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p>After clicking on&nbsp;<strong>Nee Notification<\/strong>, it will ask us to fill out some of the fields such as notification title, text, and image, etc., and click on the&nbsp;<strong>Select test message<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging8.png\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p>We will paste the copied InstanceId Token to&nbsp;<strong>Add an FCM registration token<\/strong>&nbsp;field and click on&nbsp;<strong>the Test<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging9.png\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n\n\n\n<p>The last step creates a notification message in the notification bar of our app. The notification is shown only when our app will run on the background.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/sending-notification-message-using-firebase-cloud-messaging10.jpg\" alt=\"Sending a Notification Message using Firebase Cloud Messaging\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this section, we will talk about how we can send a test notification message from the Notification composer to a development device when the app is in the background of the device. For this, we have to: 1) Create a Firebase project. 2) Connect our app to Firebase either from the assistant or console [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1563,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/405"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=405"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/405\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1983,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/405\/revisions\/1983"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1563"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=405"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=405"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=405"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 403,
        "date": "2020-05-06T09:25:19",
        "date_gmt": "2020-05-06T09:25:19",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=403"
        },
        "modified": "2020-12-25T19:08:59",
        "modified_gmt": "2020-12-25T19:08:59",
        "slug": "firebase-in-app-messaging",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-in-app-messaging\/",
        "title": {
            "rendered": "Firebase In-App Messaging"
        },
        "content": {
            "rendered": "\n<p>In-App Messaging is similar to Cloud Messaging, except messages are sent to the app, not to the device. It helps us to engage our app&#8217;s active users by sending them contextual targeted messages which encourage them to use key app features. For example, we could send an In-App message for getting users to subscribe, complete a level, watch a video, or buy an item. We can customize messages as banners, cards, images, or modals, and set up events so that they appear exactly when they had benefits our user most.<\/p>\n\n\n\n<p>The goal of Firebase is to make it easier for developers to engage their active users within their app and guide users in the right direction to do valuable work. Firebase In-App Messaging helps to grow our app retention. The targeted contextual messages are sent in the form of Modals and Banners. We can set up triggers so that they appear exactly as they had benefit our users most.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging2.png\" alt=\"Firebase In-App Messaging\"\/><\/figure>\n\n\n\n<h2>Use Cases<\/h2>\n\n\n\n<ol><li>For showing a welcome message on the app_launch event.<\/li><li>For showing a particular notice on the app_update event.<\/li><li>For showing festival, birthday wish card.<\/li><li>For showing discount offers on a particular day.<\/li><\/ol>\n\n\n\n<h2>Key Capabilities<\/h2>\n\n\n\n<p>Firebase In-App Messaging is capable of performing the following things:<\/p>\n\n\n\n<p><strong>Send relevant, engaging messages<\/strong><\/p>\n\n\n\n<p>Firebase In-App Messaging sends messages when they are most required and when the users are actually using in our app. When the user visits our in-App store, scale-out the big sales, not when they are in line at the grocery store. Highlight cool, new levels when users play our game, not when they are sitting around watching a big game.<\/p>\n\n\n\n<p><strong>Target messages by behavior or audience<\/strong><\/p>\n\n\n\n<p>Firebase In-App Messaging works with prediction and analytics to provide tools to deliver messages to the users, we want to reach the most. The messages are sent on the basis of users &#8216;past behavior, demographics, or even prediction of their future behavior.<\/p>\n\n\n\n<p><strong>Create flexible, custom alerts<\/strong><\/p>\n\n\n\n<p>Firebase In-App Messaging helps us to do everything from sending promotional offers to update users for a new version of our app with the ability to customize our messages &#8216;style, display triggers, appearance, and content all in a few clicks&#8217;.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In-App Messaging is similar to Cloud Messaging, except messages are sent to the app, not to the device. It helps us to engage our app&#8217;s active users by sending them contextual targeted messages which encourage them to use key app features. For example, we could send an In-App message for getting users to subscribe, complete [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1582,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/403"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=403"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/403\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 422,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/403\/revisions\/422"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1582"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=403"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=403"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=403"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 410,
        "date": "2020-05-06T09:25:52",
        "date_gmt": "2020-05-06T09:25:52",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=410"
        },
        "modified": "2020-12-25T19:08:58",
        "modified_gmt": "2020-12-25T19:08:58",
        "slug": "in-app-messaging-setup-and-configuration",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/in-app-messaging-setup-and-configuration\/",
        "title": {
            "rendered": "In-App Messaging Setup and Configuration"
        },
        "content": {
            "rendered": "\n<p>In this, we will learn how we can use Firebase In-App Messaging in an android application. For this, we need an android application. Just like other services of Firebase, the starting steps to use In-App Messaging are the same. So let&#8217;s start with the starting steps and elaborate each step to set up and configure the application to use In-App Messaging in Firebase.<\/p>\n\n\n\n<p><strong>Step 1:<\/strong><\/p>\n\n\n\n<p>In the first step, we will create a new Android Studio project with an empty activity and Kotlin language and name it&nbsp;<strong>InAppMessaging<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration1.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 2:<\/strong><\/p>\n\n\n\n<p>In the next step, we will connect our Android Application with the Firebase either from Firebase Assistant or manually using the console. After that, we will add all the required libraries and plugin to our app.gradle file. And we will also add maven in our repository and all projects.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration2.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 3:<\/strong><\/p>\n\n\n\n<p>We will update our&nbsp;<strong>app.gradle<\/strong>&nbsp;file. We will add the plugin to the google-services. We will add the dependency of Firebase core and In-App Messaging.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration3.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration4.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 4:<\/strong><\/p>\n\n\n\n<p>Now, we will check Logcat and search for the Instance ID and copy it from here.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration5.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 5:<\/strong><\/p>\n\n\n\n<p>Now, go to Firebase console and select In-App Messaging from&nbsp;<strong>Firebase-&gt; Grow-&gt; In-App Messaging<\/strong>. After that, click on&nbsp;<strong>Create your first campaign<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration6.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration7.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 6:<\/strong><\/p>\n\n\n\n<p>After clicking on&nbsp;<strong>create your first campaign<\/strong>, the following console will be shown<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration8.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<p>We can figure out how we can send a message to the client. There is all sort of different nice styles which we can apply to our messages. It will ask to fill out the message title, the body that is optional, image, and primary button color.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration9.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<p><strong>Step 7:<\/strong><\/p>\n\n\n\n<p>After filling out all the required fields, we will click on&nbsp;<strong>Test on the device<\/strong>&nbsp;and paste the Instance ID, which we have previously copied from the Logcat. Add the device and click on&nbsp;<strong>the Test<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration10.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration11.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration12.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration13.png\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n\n\n\n<p>After clicking on&nbsp;<strong>the Test<\/strong>, we will reopen our app from the background, and we can see our message there.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-in-app-messaging-setup-and-configuration14.jpg\" alt=\"Firebase In-App Messaging Setup and Configuration\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this, we will learn how we can use Firebase In-App Messaging in an android application. For this, we need an android application. Just like other services of Firebase, the starting steps to use In-App Messaging are the same. So let&#8217;s start with the starting steps and elaborate each step to set up and configure [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1565,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/410"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=410"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/410\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 423,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/410\/revisions\/423"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1565"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=410"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=410"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=410"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 408,
        "date": "2020-05-06T09:26:13",
        "date_gmt": "2020-05-06T09:26:13",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=408"
        },
        "modified": "2020-12-25T19:08:58",
        "modified_gmt": "2020-12-25T19:08:58",
        "slug": "dynamic-links-in-firebase",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/dynamic-links-in-firebase\/",
        "title": {
            "rendered": "Dynamic Links in Firebase"
        },
        "content": {
            "rendered": "\n<p>Firebase dynamic links are the links which work in the way we want them, across multiple platforms, and whether our app is pre-installed or not.<\/p>\n\n\n\n<p>Our users get the best available experience for the platform on which they open our link with the help of the Dynamic Links. If the user opens a dynamic link on android, iOS or on desktop browser, he will be redirected to the linked content into our original app or to our website.<\/p>\n\n\n\n<p>Besides that, dynamic links work over app installation, i.e., to open a dynamic link on an iOS or android device, the user is asked to install your app firstly, then only the user can access the link. Dynamic links are smart URLs which allow us to send existing and potential users to any location within our Android and iOS app.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/dynamic-links-in-firebase2.png\" alt=\"Dynamic Links in Firebase\"\/><\/figure>\n\n\n\n<h2>Key benefits of Dynamic Links<\/h2>\n\n\n\n<p>There are the following benefits of&nbsp;<strong>Dynamic Links<\/strong>:<\/p>\n\n\n\n<ol><li>It is helpful in the conversion of web users to native app users.<\/li><li>It increases the conversion of user-to-user sharing.<\/li><li>It drives more installs with email, social, and SMS marketing campaigns.<\/li><li>It also helps to turn desktop users into mobile app users.<\/li><\/ol>\n\n\n\n<h2>Use cases<\/h2>\n\n\n\n<p>The use cases are some of the ways through which we can increase development or growth and engagement by using dynamic links in our app. These cases are as follows:<\/p>\n\n\n\n<h3>1. Converting web users to the app user<\/h3>\n\n\n\n<p>If a mobile web user installs our app by opening an app install link without a dynamic link, then they have to navigate again to where they were. With the help of dynamic links, we can make sure that after web users install our app, they can continue where they left off.<\/p>\n\n\n\n<h3>2. User-to-user sharing<\/h3>\n\n\n\n<p>Make it easy for our users to share our app&#8217;s content with their friends. There is no need to worry about the platform, or either their friends already use our app or not.<\/p>\n\n\n\n<h3>3. Email, social, and SMS campaigns<\/h3>\n\n\n\n<p>Sending promotional offers using links which work on any platform. Current and future users can redeem our offer; either they use iOS, Android, or web browsers, or not and either they already install our app or not.<\/p>\n\n\n\n<h3>4. Real-world app promotion<\/h3>\n\n\n\n<p>We use Eddystone beacons and QR codes, which encode a Dynamic Link in our physical displays to promote our app at venues and events.<\/p>\n\n\n\n<h3>5. Converting desktop users to app users<\/h3>\n\n\n\n<p>Dynamic links are generated when web users bookmark a page or send themselves a link. If they open the link on a different device, they can get the best experience for the device.<\/p>\n\n\n\n<h2>How does it work?<\/h2>\n\n\n\n<p>The dynamic link is created either by forming a URL by adding Dynamic Link parameters to a domain-specific to our app or by using the Firebase console, iOS, using a REST API or Android Builder API. These parameters specify the links we want to open, depending on the user&#8217;s platform and whether our app is installed.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/dynamic-links-in-firebase3.png\" alt=\"Dynamic Links in Firebase\"\/><\/figure>\n\n\n\n<p>When a user opens our dynamic link, if our app is not yet installed, the user is sent to the Play Store or App Store to install our app (unless you specify otherwise), and our app opens. We can then retrieve the link that was given for our app and handle the appropriate link for our app.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Firebase dynamic links are the links which work in the way we want them, across multiple platforms, and whether our app is pre-installed or not. Our users get the best available experience for the platform on which they open our link with the help of the Dynamic Links. If the user opens a dynamic link [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1566,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/408"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=408"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/408\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 424,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/408\/revisions\/424"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1566"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=408"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=408"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=408"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 411,
        "date": "2020-05-06T09:27:36",
        "date_gmt": "2020-05-06T09:27:36",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=411"
        },
        "modified": "2020-12-25T19:08:58",
        "modified_gmt": "2020-12-25T19:08:58",
        "slug": "creating-dynamic-link",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/creating-dynamic-link\/",
        "title": {
            "rendered": "Creating Dynamic Link"
        },
        "content": {
            "rendered": "\n<p>In Firebase, there are four ways through which we can create&nbsp;<strong>Dynamic Link<\/strong>. These are as follows:<\/p>\n\n\n\n<h2>Using the Firebase console<\/h2>\n\n\n\n<p>We can create a dynamic link with the help of the Firebase console. It is useful if we are creating promo links to share on social media. We can select a custom suffix and a name for the link in the Firebase console. We can track the performance of these Dynamic Links in the Firebase console or via the Analytics REST API.<\/p>\n\n\n\n<h2>Using the Dynamic Link Builder API<\/h2>\n\n\n\n<p>It is the preferred way to dynamically create links in our app for user-to-user sharing or in any situation that requires many links. We can track the performance of Dynamic Links, which are created with the Builder API using the Dynamic Links Analytics API.<\/p>\n\n\n\n<h2>Using the REST API<\/h2>\n\n\n\n<p>It is the preferred way to dynamically create links on platforms which don&#8217;t have a Builder API. The Analytics REST API can be used to track the performance of promo campaigns created in the console.<\/p>\n\n\n\n<h2>Manually<\/h2>\n\n\n\n<p>We can manually construct Dynamic Links using URL parameters if we don&#8217;t need to track click data and we don&#8217;t care if the links are strong<\/p>\n\n\n\n<p>We can create short or long Dynamic Links with the Firebase Dynamic Link Builder API. It accepts either a long Dynamic Link or an object containing Dynamic Link parameters. In order to create a dynamic link, we must have an Android Application and add it to the Firebase project.<\/p>\n\n\n\n<p>We first create an Android application and add it with the Firebase either from the Firebase console or manually.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link2.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<p>It is also required that the SHA-1 and SHA-256 keys are set off the android project in the console.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link3.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<p>In the next step, we will add all the dependencies, i.e., Firebase core and Firebase Dynamic Links to our firebase project and app level build.gradle file.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link4.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link5.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<h2>Creating Dynamic Link using Firebase Console<\/h2>\n\n\n\n<p>Firstly, we will move to the&nbsp;<strong>Dynamic Link<\/strong>&nbsp;section in Firebase console&nbsp;<strong>(Firebase-&gt; Grow-&gt;Dynamic Link)<\/strong>. If we have not already accepted the terms of service, then we have to set a domain for our Dynamic Links, and we will do it when prompted. If we already have a Dynamic Links domain, we have to provide a Dynamic Link domain when we programmatically create Dynamic Links.<\/p>\n\n\n\n<p>After that, we will specify the URL patterns allowed in our deep links and fallback links. We prevent unauthorized parties from creating Dynamic Link, which redirects from our domain to sites we don&#8217;t control. If we want to generate a single Dynamic link for testing purposes or for our marketing team, it can be used in something like a social media post. The simplest way would be to visit the Firebase console and create one manually, following the step-by-step form.<\/p>\n\n\n\n<p>So, we will move to the Dynamic Links section of Firebase console.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link6.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<p>Now we will click on&nbsp;<strong>Get started<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link7.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<p>After clicking on Get started, it will ask to add URL prefix and patterns. If we don&#8217;t have our own domain, we can use the domain under example. We can use it as a free&nbsp;<strong>custom page.link<\/strong>. So, we just have to come up with some names which we have not used before.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link8.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link9.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link10.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link11.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<p>Now, there is no dynamic link. We will create a dynamic link by clicking on&nbsp;<strong>New Dynamic Link<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link12.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<p>This click will open &#8220;create portal of&nbsp;<strong>Dynamic Links<\/strong>&#8221; and ask to set up a short URL link, setup or dynamic link, define link behavior for iOS, define link behavior for Android, and campaign tracking, social tags, and advanced options which are optional.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link13.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link14.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link15.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link16.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link17.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/firebase-creating-dynamic-link18.png\" alt=\"Firebase Creating Dynamic Link\"\/><\/figure>\n\n\n\n<h2>Create Dynamic Link from Parameters<\/h2>\n\n\n\n<p>For creating a Dynamic-link programmatically<\/p>\n\n\n\n<ol><li>Create a newDynamicLink object with its builder.<\/li><li>Specify the Dynamic Link parameters with the Builder methods.<\/li><li>Call buildDynamicLink or buildShortDynamicLink.<\/li><\/ol>\n\n\n\n<p>There is the following example to create a long Dynamic Link to https:\/\/www.example.com\/. It opens with our Android app on Android and the app com.example.iOS on iOS.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>val dynamicLink =FirebaseDynamicLinks.getInstance().createDynamicLink()  \n    .setLink(Uri.parse(https:\/\/www.example.com\/))  \n    .setDomainUriPrefix(\"https:\/\/example.page.link\")  \n \/\/opening links with this app on Android   \n    .setAndroidParameters(DynamicLink.AndroidParameters.Builder().build())  \n \/\/Opening links with com.example.iOS on iOS  \n    .setIosParameters(DynamicLink.IosParameters.Builder(\"com.examples.ios\").build())  \n.buildDynamicLink()  \nval dynamicLinkUri=dynamicLink.uri  <\/code><\/pre>\n\n\n\n<h2>Creating a Short Dynamic Link<\/h2>\n\n\n\n<p>For creating short Dynamic Link, build a Dynamic Link in the same way, and then call buildShortDynamicLink(). It needs a network call, so instead of directly returning the link, buildShortDynamicLink() returns a Task and makes a short link available when the request complete.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>val shortLinkTask = FirebaseDynamicLinks.getInstance().createDynamicLink()  \n    .setLink(Uri.parse(\"https:\/\/www.example.com\/\"))  \n    .setDomainUriPrefix(\"https:\/\/example.page.link\")  \n \/\/Setting parameters   \n    \/\/\u2026  \n    .buildShortDynamicLink()  \n    .addOnSuccessListener{ result->  \n        \/\/Short link created  \n        val shortLink = result.shortLink  \n        val flowchartLink = result.previewLink  \n    }  \n    .addOnFailureListener{  \n        \/\/Error  \n        \/\/\u2026  \n    }  <\/code><\/pre>\n\n\n\n<h2>Dynamic Link Parameters<\/h2>\n\n\n\n<p>We can use the Dynamic Link Builder API to create Dynamic Links with any of the supported parameters.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>val dynamicLink = FirebaseDynamicLink.getInstance().createDynamicLink()  \n    .setLink(Uri.parse(\"https:\/\/www.example.com\/\"))  \n    .setDomainUriPrefix(\"https:\/\/example.page.link\")  \n    .setAndroidParameters(  \n        DynamicLink.AndroidParameters.Builder(\"com.example.android\")  \n            .setMinimumVersion(125)  \n            .build())  \n    .setIosParameters(  \n        DynamicLink.IosParameters.Buildert(\"com.example.ios\")   \n            .setAppStoreId(\"123456789\")  \n            .setMinimumVersion(\"1.0.1\")  \n            .build())  \n    .setGoogleAnalyticsParameters(  \n        DynamicLink.GoogleAnalyticsParameters.Builder()  \n            .setSource(\"orkut\")  \n            .setMedium(\"social\")  \n            .setCampaign(\"example-promo\")  \n            .build())  \n    .setItuneConnectAnalyticsParameter(  \n        DynamicLink.ItuneConnectAnalyticsParameter.Builder()  \n            .serProviderToken(\"123456\")  \n            .setCampaignToken(\"example-promo\")  \n            .build())  \n    .setSocialMetaTagParameters(  \n        DynamicLink.SocialMetaTagParameters.Builder()  \n            .setTitle(\"Example of a Dynamic Link\")  \n            .setDescription(\"This link works whether the app is installed or not!\")  \n            .build())  \n    .buildDynamicLink()\/\/Or buildShortDynamicLink()  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In Firebase, there are four ways through which we can create&nbsp;Dynamic Link. These are as follows: Using the Firebase console We can create a dynamic link with the help of the Firebase console. It is useful if we are creating promo links to share on social media. We can select a custom suffix and a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1567,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/411"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=411"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/411\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 425,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/411\/revisions\/425"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1567"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=411"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=411"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=411"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 406,
        "date": "2020-05-06T09:28:47",
        "date_gmt": "2020-05-06T09:28:47",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=406"
        },
        "modified": "2020-12-25T19:08:58",
        "modified_gmt": "2020-12-25T19:08:58",
        "slug": "receiving-dynamic-links",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/receiving-dynamic-links\/",
        "title": {
            "rendered": "Receiving Dynamic Links"
        },
        "content": {
            "rendered": "\n<p>In this section, we will discuss how we can receive the&nbsp;<strong>Dynamic Link<\/strong>. So, for receiving the Firebase Dynamic Links, which we have created before, include the Dynamic Links SDK in our app. We also need to call the FirebaseDynamicLinks.getDynamicLink() method, when our app loads to get the data passed in the Dynamic Link. We must add a new Intent filter to the activity which handles deep link for our app. The intent filter should catch a deep link of our domain since the Dynamic Link will redirect to our domain, if our app is installed. This is required for our app to receive the Dynamic Link data after it is installed\/updated from the play store and one tap on the continue button.<\/p>\n\n\n\n<p>When a user opens a dynamic link with a deep link to the scheme and host, which we specified, our app will start the activity with this intent filter to handle the link.<\/p>\n\n\n\n<h2>AndroidManifest.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;intent-filter>  \n            &lt;action android:name=\"android.intent.action.VIEW\" \/>  \n            &lt;category android:name=\"android.intent.category.DEFAULT\"\/>  \n            &lt;category android:name=\"android.intent.category.BROWSABLE\"\/>  \n            &lt;data  \n                    android:host=\"kotlin.example.com\"  \n                            android:scheme=\"https\"\/>  \n&lt;\/intent-filter>  <\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/receiving-dynamic-links-in-firebase.png\" alt=\"Receiving Dynamic Links in Firebase\"\/><\/figure>\n\n\n\n<h2>Handle Deep Links<\/h2>\n\n\n\n<p>For handling deep links, we have to call the getDynamicLink() method in every activity which might be launched by the link, even though the link might be available from the intent using getIntent().getData(). When we call the getDynamicLink(), it retrieves the link and clears that data, so it is received only once by our app. We can normally call getDynamicLink() in the main activity as well as any activity launched by the intent filter, which matches the link.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>FirebaseDynamicLinks.getInstance()  \n    .getDynamicLink(intent)  \n    .addOnSuccessListener(this) { pendingDynamicLinkData ->  \n        \/\/ Getting deep link from result (may be null if no link is found)  \n        var deepLink: Uri? = null  \n        if (pendingDynamicLinkData != null) {  \n            deepLink = pendingDynamicLinkData.link  \n        }  \n  \n        \/\/ Handle the deep link. For example, opening the linked  \n        \/\/ content, or applying promotional credit to the user's  \n        \/\/ account.  \n        \/\/ ...  \n}  \n.addOnFailureListener(this) { e -> Log.w(TAG, \"getDynamicLink:onFailure\", e) } <\/code><\/pre>\n\n\n\n<h2>activity_main.xml<\/h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/receiving-dynamic-links-in-firebase2.png\" alt=\"Receiving Dynamic Links in Firebase\"\/><\/figure>\n\n\n\n<h2>MainActivity.kt<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.example.dynamiclink  \n  \nimport android.content.Intent  \nimport android.net.Uri  \nimport androidx.appcompat.app.AppCompatActivity  \nimport android.os.Bundle  \nimport android.util.Log  \nimport android.widget.Toast  \nimport com.google.firebase.dynamiclinks.DynamicLink  \nimport com.google.firebase.dynamiclinks.FirebaseDynamicLinks  \nimport kotlinx.android.synthetic.main.activity_main.*  \n  \nclass MainActivity : AppCompatActivity() {  \n  \n    override fun onCreate(savedInstanceState: Bundle?) {  \n        super.onCreate(savedInstanceState)  \n        setContentView(R.layout.activity_main)  \n  \n        \/\/ Creating a deep link and display it in the UI  \n        val newDeepLink = buildDeepLink(Uri.parse(DEEP_LINK_URL))  \n        linkViewSend.text = newDeepLink.toString()  \n  \n        \/\/ Share button click listener  \n        buttonShare.setOnClickListener {  shareDeepLink(newDeepLink.toString())  }  \n  \n        FirebaseDynamicLinks.getInstance()  \n            .getDynamicLink(intent)  \n            .addOnSuccessListener(this) { pendingDynamicLinkData ->  \n                \/\/ Getting deep link from result (may be null if no link is found)  \n                var deepLink: Uri? = null  \n                if (pendingDynamicLinkData != null) {  \n                    deepLink = pendingDynamicLinkData.link  \n                }  \n  \n                \/\/ Handle the deep link. For example, opening the linked  \n                \/\/ content, or applying promotional credit to the user's  \n                \/\/ account.  \n                \/\/ ...  \n  \n                \/\/ Display deep link in the UI  \n                if (deepLink != null) {  \n                    Toast.makeText(getApplicationContext(),\"Found Deep Link!\", Toast.LENGTH_LONG).show()  \n                    linkViewReceive.text = deepLink.toString()  \n                } else {  \n                    Log.d(TAG, \"getDynamicLink: no link found\")  \n                }  \n            }  \n            .addOnFailureListener(this) { e -> Log.w(TAG, \"getDynamicLink:onFailure\", e) }  \n    }  \n  \n    fun buildDeepLink(deepLink: Uri): Uri {  \n        val dynamicLink = FirebaseDynamicLinks.getInstance().createDynamicLink()  \n            .setLink(Uri.parse(deepLink.toString()))  \n            .setDomainUriPrefix(\"https:\/\/rastogi.page.link\")  \n            \/\/ Open links with this app on Android  \n            .setAndroidParameters(DynamicLink.AndroidParameters.Builder().build())  \n            \/\/ Open links with com.example.ios on iOS  \n            .setIosParameters(DynamicLink.IosParameters.Builder(\"com.example.ios\").build())  \n            .buildDynamicLink()  \n  \n        val dynamicLinkUri = dynamicLink.uri  \n  \n        return dynamicLinkUri;  \n    }  \n  \n    private fun shareDeepLink(deepLink: String) {  \n        val intent = Intent(Intent.ACTION_SEND)  \n        intent.type = \"text\/plain\"  \n        intent.putExtra(Intent.EXTRA_SUBJECT, \"Firebase Deep Link\")  \n        intent.putExtra(Intent.EXTRA_TEXT, deepLink)  \n  \n        startActivity(intent)  \n    }  \n  \n    companion object {  \n  \n        private const val TAG = \"MainActivity\"  \n        private const val DEEP_LINK_URL = \"https:\/\/kotlin.example.com\/deeplinks\"  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/receiving-dynamic-links-in-firebase3.png\" alt=\"Receiving Dynamic Links in Firebase\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this section, we will discuss how we can receive the&nbsp;Dynamic Link. So, for receiving the Firebase Dynamic Links, which we have created before, include the Dynamic Links SDK in our app. We also need to call the FirebaseDynamicLinks.getDynamicLink() method, when our app loads to get the data passed in the Dynamic Link. We must [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1568,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/406"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=406"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/406\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 426,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/406\/revisions\/426"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1568"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=406"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=406"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=406"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 421,
        "date": "2020-05-06T09:29:24",
        "date_gmt": "2020-05-06T09:29:24",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=421"
        },
        "modified": "2020-12-25T19:08:58",
        "modified_gmt": "2020-12-25T19:08:58",
        "slug": "admob-with-firebase",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/admob-with-firebase\/",
        "title": {
            "rendered": "AdMob with Firebase"
        },
        "content": {
            "rendered": "\n<p>The easiest way to monetize mobile apps with targeted, in-app advertising is known as&nbsp;<strong>Google AdMob<\/strong>. It is a mobile advertising platform which we can use to generate revenue from our app. By using AdMob with Google Analytics, gives us additional application data usage and analytics capabilities. Firebase integrates with AdMob without any change to our existing AdMob configuration.<\/p>\n\n\n\n<p>Firebase is a mobile platform which helps us develop high-quality apps, an engaged user base, and earn more money. Now, AdMob is a part of Firebase; we have made it easier to use AdMob with other Firebase services such as Analytics. While this is an important step for AdMob, publishers can assure that the package, name, class, prefix, and method signature that includes the Google Mobile Ads SDK remain the same. The app publishers with existing codebases only need to configure the Firebase library and Google services in their Android or iOS apps to integrate Firebase.<\/p>\n\n\n\n<h2>Why use Firebase?<\/h2>\n\n\n\n<p>The main thing about Firebase is how easy it is to deploy multiple services in one app and how those services can work together. Easy configuration and implementation of building blocks such as real-time storage, authentication, and crash reporting can take a few weeks for the app to come to the market.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase2.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>While this is an important step for AdMob, publishers can assure that the package, class, name, prefix, and method signature, which includes the Google Mobile Ads SDK, remain the same. App publishers with existing code bases require to configure the Google services and Firebase library in their Android or iOS apps for integrating Firebase.<\/p>\n\n\n\n<p>The best way to use AdMob is with Firebase. The publishers who are not ready to make the switch, they can use Google Mobile Ads SDK as a standalone SDK.<\/p>\n\n\n\n<h2>Setup and Configuration<\/h2>\n\n\n\n<p>Let&#8217;s understand how we can set up and configure our Android app to use Firebase in Google Mob Add. First, we have to sign up for an AdMob account and register our app for AdMob. And after that, we need to get AdMob&#8217;s ads and start earning revenue. For this, import the initial in initialize the Google mobile ads SDK, and then we choose an ad format such as banner ads.<\/p>\n\n\n\n<p>So, we will go to the browser and sign up for the AdMob account&nbsp;<a href=\"https:\/\/apps.admob.com\/\" rel=\"noreferrer noopener\" target=\"_blank\">https:\/\/apps.admob.com\/<\/a>. It is required to have a Google account. If we don&#8217;t have, then we have to create one.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase3.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase4.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>When we sign up with Google account, AdMob will ask us to select a country, time zone, and currency, and then we have to accept the terms and conditions also.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase5.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase6.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>After that, it will ask for some more information whether confirmation email will be sent to our email address. We usually select&nbsp;<strong>No<\/strong>&nbsp;for most of these and then click on&nbsp;<strong>CONTINUE TO ADMOB<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase7.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>After clicking on&nbsp;<strong>CONTINUE TO ADMOB<\/strong>, we will move to the home page of Google AdMob. From there, we click on&nbsp;<strong>GET STARTED<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase8.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>After that, it will ask that &#8220;Have you published your app on Google Play or the App Store?&#8221;. We simply select&nbsp;<strong>No<\/strong>&nbsp;for that.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase9.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>After clicking on&nbsp;<strong>No<\/strong>, it will ask for&nbsp;<strong>App name<\/strong>&nbsp;and&nbsp;<strong>Platform<\/strong>&nbsp;and enable user metrics for this app.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase10.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>When we click on&nbsp;<strong>ADD<\/strong>, it will produce an&nbsp;<strong>App ID<\/strong>, which we will use further. So, we copy this ID from here, and lastly, we click on&nbsp;<strong>NEXT: CREATE ADD UNIT<\/strong>. This click will open the new section from where we have to select an ad format.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase11.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase12.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<h2>Choose an Ad Format<\/h2>\n\n\n\n<p>AdMob provides a number of different ad formats, so we can choose the one that best fits our apps user experience.<\/p>\n\n\n\n<ol><li><strong>Banner<\/strong>&nbsp;ads are rectangular image or text ads which occupy a spot within an app&#8217;s layout. These ads stay on screen while the user is interacting with the app and can refresh automatically after a certain period of time.<\/li><li><strong>Interstitials<\/strong>&nbsp;are full-screen ads which cover the interface of an app until closed by the user. These ads are best used at natural pauses in the flow of an app&#8217;s execution, such as in between levels of a game or just after completing a task.<\/li><li><strong>Native<\/strong>&nbsp;is a component-based ad format which gives us the freedom to customize the way assets like calls and headlines to action are presented. It allows us to choose fonts, colors, and other details for ourselves, we can create natural, unobtrusive ad presentations which can add to rich user experience. It is currently in a closed beta with a limited group of the publisher.<\/li><li><strong>Rewarded<\/strong>&nbsp;video ads are full-screen video ads in which users have the option of watching in full in exchange for in-app rewards.<\/li><\/ol>\n\n\n\n<p>So I am selecting interstitials ad format.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase13.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>When we select it, the interstitials section provides a field for the Ad unit name, which is required to fill. After filling this field, click on&nbsp;<strong>CREATE AD UNIT<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase14.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>This will provide us&nbsp;<strong>app ID<\/strong>&nbsp;and&nbsp;<strong>ad unit ID<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase15.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase16.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>Now, what we will do, we will create an android app and add it with the Firebase using either assistant or manually.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase17.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase18.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>We will also add dependencies in our project and app level build.gradle file.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase19.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase20.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<p>Now, we will update our Manifest file by adding AdMob app id.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase21.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/tutorial\/firebase\/images\/admob-with-firebase22.png\" alt=\"AdMob with Firebase\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The easiest way to monetize mobile apps with targeted, in-app advertising is known as&nbsp;Google AdMob. It is a mobile advertising platform which we can use to generate revenue from our app. By using AdMob with Google Analytics, gives us additional application data usage and analytics capabilities. Firebase integrates with AdMob without any change to our [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 1569,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/421"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=421"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/421\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1984,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/421\/revisions\/1984"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media\/1569"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=421"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=421"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=421"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2472,
        "date": "2020-07-20T11:26:20",
        "date_gmt": "2020-07-20T11:26:20",
        "guid": {
            "rendered": "http:\/\/react.foobrdigital.com\/?p=2308"
        },
        "modified": "2020-12-25T19:08:58",
        "modified_gmt": "2020-12-25T19:08:58",
        "slug": "firebase-with-react",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/firebase-with-react\/",
        "title": {
            "rendered": "Firebase with React"
        },
        "content": {
            "rendered": "\n<h2>Integrate Firebase with React &amp; Redux | Building a TODO List<\/h2>\n\n\n\n<p>Today we will learn how to integrate React, Redux and Firebase Database by building a simple Todo Application. At some point in our development journey, we all need a strong backend solution for tasks like Realtime Chat, storing User Data, Monitoring Apps and many more scenarios.&nbsp;<\/p>\n\n\n\n<p>Along with using React, we will also use the Redux library to manage the state of our TODO app. Actually Redux is not necessary for a simple app like our TODO List App, but we are going to use redux for this example so that it will help you understand the steps that are needed in order to add Redux to any React application.<\/p>\n\n\n\n<h2>What is a Crud Application?<\/h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/react.foobrdigital.com\/wp-content\/uploads\/2020\/07\/image-1.jpg\" alt=\"\" class=\"wp-image-2309\"\/><\/figure>\n\n\n\n<p><strong>CRUD<\/strong>&nbsp;is an acronym for the four basic types of SQL commands: Create , Read , Update , Delete. Most&nbsp;<strong>applications<\/strong>&nbsp;have some kind of&nbsp;<strong>CRUD<\/strong>&nbsp;functionality, and we can assume that every programmer had to deal with&nbsp;<strong>CRUD<\/strong>&nbsp;at some point. Our TODO App is based on this concept.<\/p>\n\n\n\n<h2>What is React?<\/h2>\n\n\n\n<p>So What is React.js? React is an open-source JavaScript library which is used for building user interfaces (Single Page Applications). React handles the view layer for web app and mobile applications. It also allows us to create reusable UI components.<\/p>\n\n\n\n<h2>What is Firebase?<\/h2>\n\n\n\n<p><a rel=\"noreferrer noopener\" href=\"https:\/\/firebase.google.com\/\" target=\"_blank\">Firebase<\/a>&nbsp;is a cloud-based service that provides most of the server-side features for our react applications so that we don\u2019t have to manually manage the infrastructure like databases, servers and server-side stuff by yourself.<\/p>\n\n\n\n<h2 id=\"dd15\">Setup<\/h2>\n\n\n\n<p>Before we start building our app, we\u2019ve to make sure that we have latest versions of Node, NPM, and the Create-React-App CLI installed. If you don\u2019t have node.js installed, go to&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/nodejs.org\/en\/\" target=\"_blank\">nodejs.org<\/a>&nbsp;and install the latest version.<\/p>\n\n\n\n<p>The&nbsp;<strong>Create-React-App CLI<\/strong>&nbsp;is now on version 3.2.0. You can update it by installing it using npm, or you can simply use the&nbsp;<code>npx<\/code>&nbsp;command that will use the CLI without installing it on your pc.<\/p>\n\n\n\n<p>Now, Create a new React App Project Directory using the&nbsp;<code>create-react-app<\/code>&nbsp;CLI as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ create-react-app firebase-react-todo\n$ cd firebase-react-todo<\/code><\/pre>\n\n\n\n<p>The command above will create a new folder on your system named&nbsp;<strong>firebase-react-todo<\/strong>&nbsp;that will contain code for our react application. You can run the&nbsp;<code><strong>start<\/strong><\/code>&nbsp;script using&nbsp;<code><strong>npm<\/strong><\/code>&nbsp;or&nbsp;<code><strong>yarn<\/strong><\/code>&nbsp;to launch the app on the browser at&nbsp;<code><strong>localhost:3000<\/strong><\/code>.<\/p>\n\n\n\n<p>Next, go to the&nbsp;<code><strong>src<\/strong><\/code>&nbsp;folder and delete everything from inside it, except the&nbsp;<code><strong>registerServiceWorker.js<\/strong><\/code>&nbsp;file. Once you are done deleting all the files from the&nbsp;<code><strong>src<\/strong><\/code>&nbsp;folder, we will work on integrating Redux into our Cool App.<\/p>\n\n\n\n<h1 id=\"b3f0\">Adding Redux to our App<\/h1>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/react.foobrdigital.com\/wp-content\/uploads\/2020\/07\/Untitledd.png\" alt=\"\" class=\"wp-image-2312\"\/><\/figure>\n\n\n\n<p>According to their documentation:<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Redux is a predictable state container for JavaScript apps.<\/strong><\/p><\/blockquote>\n\n\n\n<p>In easy words, Redux is a state management library built for maintaining the data of JavaScript applications. The important thing to notice is that redux will keep all the data of our application in a single place named&nbsp;<strong>Store<\/strong>. When any component of our app requires some data, Redux will take it from the store and give it to the component.<\/p>\n\n\n\n<p>First, we need to install the&nbsp;<strong>redux<\/strong>&nbsp;and&nbsp;<strong>react-redux<\/strong>&nbsp;to help connect React with Redux into our app, and the&nbsp;<code>redux-thunk<\/code>&nbsp;library to act as a middleware and handle asynchronous actions in Redux. This is important since we are using Firebase as the database, so chances are that we will need to perform some asynchronous request to fetch the data from firebase.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add redux react-redux redux-thunk<\/code><\/pre>\n\n\n\n<p>Once everything is installed, now we can start working on Redux side of our app by creating the Reducers.<\/p>\n\n\n\n<h3>Reducers<\/h3>\n\n\n\n<p>Redux uses Reducers to change the state of the app. They know what to do with an action and its information. Now create a new folder named&nbsp;<strong>reducers<\/strong>&nbsp;with a file named&nbsp;<strong>data.js<\/strong>&nbsp;inside the src folder. The reducer function has two arguments, one is the initial state and second is the action.<\/p>\n\n\n\n<p>Inside the&nbsp;<code>data.js<\/code>&nbsp;file, write the following:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import {FETCH_TODOS} from '..\/actions\/types';\nexport default (state = {}, action) => {\n  switch(action.type) {\n    case FETCH_TODOS:\n      return action.payload;\n    default:\n      return state;\n  };\n};<\/code><\/pre>\n\n\n\n<p>The reducer function above checks if the action triggered by the component is of type&nbsp;<code>FETCH_TODOS<\/code>. If it is, then it will update the state of our app with the list of todos that will be fetched by the action.<\/p>\n\n\n\n<p>Rather than importing multiple reducer functions, we can simply combine them into one reducer by creating a new file named&nbsp;<code>index.js<\/code>&nbsp;in the same folder and writing the following code:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import {combineReducers} from 'redux';\nimport data from '.\/data';\nexport default combineReducers({\n  data\n});<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>redux<\/code>&nbsp;library contains a function named&nbsp;<code>combineReducers<\/code>&nbsp;that can take multiple reducers and combine them into one reducer.<\/p>\n\n\n\n<p>Now, we will create the Redux store where all the app data will be kept. Inside the&nbsp;<code>src<\/code>&nbsp;folder, create a file named&nbsp;<code>index.js<\/code>.<\/p>\n\n\n\n<p>The state of any React app is said to flow in only one direction, from the top most file to bottom. The&nbsp;<code>index.js<\/code>&nbsp;file is the top most file of our app because this is where the&nbsp;<code>App<\/code>&nbsp;component will be rendered. The&nbsp;<code>App<\/code>&nbsp;component can further have other components inside it. So we need to create the store in the&nbsp;<code>index.js<\/code>&nbsp;file as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from '.\/reducers';\nimport App from '.\/App';\nimport * as serviceWorker from '.\/serviceWorker';const store = createStore(reducers, {}, \n\napplyMiddleware(reduxThunk));ReactDOM.render(\n  &lt;Provider store={store}>\n    &lt;App \/>\n  &lt;\/Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.register();<\/code><\/pre>\n\n\n\n<p>Apart from creating our&nbsp;<code>store<\/code>&nbsp;with reducers and&nbsp;<code>reduxThunk<\/code>&nbsp;as the middleware, we are also rendering the&nbsp;<code>App<\/code>&nbsp;component using the&nbsp;<code>ReactDOM<\/code>. The&nbsp;<code>App<\/code>&nbsp;component is wrapped in the&nbsp;<code>Provider<\/code>&nbsp;component of&nbsp;<code>react-redux<\/code>&nbsp;library. The&nbsp;<code>Provider<\/code>&nbsp;also takes the&nbsp;<code>store<\/code>&nbsp;prop and declares it as the entire application\u2019s store.<\/p>\n\n\n\n<p>Redux takes away the pain from data management. With redux, we\u2019re able to separate the Model logic from the View in a scalable way.<\/p>\n\n\n\n<h2>Adding Firebase to our React TODO App<\/h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/react.foobrdigital.com\/wp-content\/uploads\/2020\/07\/Screenshot-2019-11-12-at-9.52.45-PM-1024x450.png\" alt=\"\" class=\"wp-image-2313\"\/><\/figure>\n\n\n\n<p>Before we start, we need to have a Google Account. With your google account visit&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/firebase.google.com\/\" target=\"_blank\">https:\/\/firebase.google.com\/<\/a>&nbsp;and log in with your credentials. You can go to the Firebase console where Firebase will ask you to<strong><em>&nbsp;Create a Project&nbsp;<\/em><\/strong>with your country. You can give it the same as your React App, as it will keep things simple. Firebase UI is very friendly and guides you through every step so don\u2019t need to worry about anything once you entered in the console.<\/p>\n\n\n\n<p>First, Let\u2019s start configuring the Firebase Realtime Database. Click on the\u00a0<strong>Database<\/strong>\u00a0tab, Make sure that you are selecting the\u00a0<strong>Realtime Database<\/strong>, and then click on the\u00a0<code>Create database<\/code>\u00a0button shown below:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/react.foobrdigital.com\/wp-content\/uploads\/2020\/07\/Screenshot-2019-11-16-at-3.02.28-PM-1024x375.png\" alt=\"\" class=\"wp-image-2310\"\/><\/figure>\n\n\n\n<p>Select the\u00a0<strong>\u201cStart in test mode\u201d\u00a0<\/strong>option and click on the enable button.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/react.foobrdigital.com\/wp-content\/uploads\/2020\/07\/Screenshot-2019-11-16-at-3.04.57-PM.png\" alt=\"\" class=\"wp-image-2311\"\/><\/figure>\n\n\n\n<p>With this, we have to set up the Firebase project and created a Realtime Database for our app. But we still need to connect the Firebase project with our React TODO App. To do so, we need to install the Firebase library inside our React app using&nbsp;<strong>npm<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install firebase --save<\/code><\/pre>\n\n\n\n<p>In the Firebase project\u2019s homepage, you will notice three circular icons. The first two will contain code that will help you connect the firebase project to an iOS and Android app respectively, while the third one will have code that will help you connect the project to a web app (which is what we want). Click on it and copy the&nbsp;<code>apiKey<\/code>,&nbsp;<code>authDomain<\/code>,&nbsp;<code>databaseURL<\/code>,&nbsp;<code>projectId<\/code>,&nbsp;<code>storageBucket<\/code>, and&nbsp;<code>messagingSenderId<\/code>&nbsp;values. These values are unique for each user\u2019s each project and hence I am sharing the screenshot for this part.<\/p>\n\n\n\n<p>Inside the React project directory, go to the&nbsp;<code>src<\/code>&nbsp;folder and create a new file named&nbsp;<code>firebase.js<\/code>. Inside this folder, write the values that we copied from the Firebase here as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import * as firebase from 'firebase';\nconst config = {\n  apiKey: \"Enter your apiKey here\",\n  authDomain: \"Enter your authDomain here\",\n  databaseURL: \"Enter your databaseURL here\",\n  projectId: \"Enter your projectId here\",\n  storageBucket: \"Enter your storageBucket here\",\n  messagingSenderId: \"Enter your messagingSenderId here\"\n}\nfirebase.initializeApp(config);\nconst databaseRef = firebase.database().ref();\nexport const todosRef = databaseRef.child(\"todos\")<\/code><\/pre>\n\n\n\n<p>Similar to Redux, the Firebase database has something called the&nbsp;<strong>Firebase Ref.&nbsp;<\/strong>This is a reference to the data that we want to access from the Firebase database. The Firebase Ref emits a series of&nbsp;<strong>value&nbsp;<\/strong>events, which are Firebase\u2019s way of telling us that it has received some new data from the application.<\/p>\n\n\n\n<p>So we have connected our React TODO app with the Firebase Project, Now we are going to use the Firebase\u2019s Realtime database to store the list of&nbsp;<code>todos<\/code>. We will add a listener to the list of&nbsp;<code>todos<\/code>&nbsp;so that whenever the list changes, the app will know about the change and fetch the new data from Firebase and display it. To do this, we have one last thing to take care of on the Redux side of things, and that is called Actions.<\/p>\n\n\n\n<h1 id=\"5af2\">Setting Up Actions<\/h1>\n\n\n\n<p>Even though our React and Firebase are connected, we still need Firebase to work with Redux, because Redux is handling the local data of our App.<\/p>\n\n\n\n<p>For that we are going to take the Firebase Ref that we have named as&nbsp;<code>todosRef<\/code>&nbsp;and stick it into an action creator. So whenever the Firebase Ref emits a value event, the Firebase Ref will be turned into an action and sent to the reducers.<\/p>\n\n\n\n<p>Inside the&nbsp;<code>src<\/code>&nbsp;folder, create a new folder called&nbsp;<code>actions<\/code>. Inside this folder create a new file named&nbsp;<code>index.js<\/code>. This file will contain 3 actions \u2014 one to add a todo to the list, another to remove it from the list, and the third one to listen for any changes in the list and according fetch the changes to the app.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import {todosRef} from '..\/firebase'\nconst FETCH_TODOS = 'FETCH_TODOS';export const addToDo = newToDo => async dispatch => {\n  todosRef.push().set(newToDo);\n};export const completeToDo = completeToDo => async dispatch => {\n  todosRef.child(completeToDo).remove();\n};export const fetchToDos = () => async dispatch => {\n  todosRef.on(\"value\", snapshot => {\n    dispatch({\n      type: FETCH_TODOS,\n      payload: snapshot.val()\n    });\n  });\n};<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h1 id=\"a8fc\">Final Step<\/h1>\n\n\n\n<p>We are almost done with our app. All that is left to do is build the UI side of things. For that, we will create a new folder named&nbsp;<code>components<\/code>&nbsp;inside the&nbsp;<code>src<\/code>&nbsp;folder. Inside the&nbsp;<code>components<\/code>&nbsp;folder, create a file named&nbsp;<code>ListItem.js<\/code>. This file will render each individual ToDo item. Each item will contain a button which when clicked will deem the ToDo as completed and remove it from the list. This is achieved with the help of the&nbsp;<code>completeToDo<\/code>&nbsp;action that we had created in the actions section of this post. The actions are connected to the component with the help of the&nbsp;<code>connect<\/code>&nbsp;method of&nbsp;<code>react-redux<\/code>&nbsp;library.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {completeTodo} from '..\/actions';\nclass ListItem extends Component {\n  handleComplete = completeTodo => {\n    const {completeTodo} = this.props;\n    completeTodo(completeTodo);\n  };\n  render() {\n    const{todoId, todo} = this.props;\n    return (\n      &lt;div key=\"toDoName\">\n        &lt;h4>\n          {todo.title}\n          &lt;span onClick={() => this.handleComplete(todoId\n            &lt;i>Complete&lt;\/i>\n          &lt;\/span>\n        &lt;\/h4>\n      &lt;\/div>\n    );\n  }\n}export default connect(null, {completeTodo})(ListItem);<\/code><\/pre>\n\n\n\n<p>Next, we need to create another file named&nbsp;<code>TodoList.js<\/code>. This file will contain a form that we will use to create a new Todo. It will appear on the screen when we click on the&nbsp;<code>Add<\/code>&nbsp;button. This component will trigger the&nbsp;<code>addTodo<\/code>&nbsp;action when submitting form. And it will listen for changes in database using&nbsp;<code>fetchTodos<\/code>&nbsp;action. The connect method in this component will take in the&nbsp;<code>mapStateToProp<\/code>&nbsp;function, which we will use to access the data from the store.<\/p>\n\n\n\n<p>Finally, We need to render these components into the&nbsp;<code>src<\/code>&nbsp;folder\u2019s&nbsp;<code>App.js<\/code>&nbsp;file as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, {Component} from 'react';\nimport TodoList from '.\/components\/TodoList';\nclass App extends Component {\n  render() {\n    return (\n      &lt;div>\n        &lt;List\/>\n      &lt;\/div>\n    );\n  }\n}\nexport default App;<\/code><\/pre>\n\n\n\n<p>And Yay! Our React Todo List app is complete. We\u2019ve successfully connected our React App to Firebase.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Integrate Firebase with React &amp; Redux | Building a TODO List Today we will learn how to integrate React, Redux and Firebase Database by building a simple Todo Application. At some point in our development journey, we all need a strong backend solution for tasks like Realtime Chat, storing User Data, Monitoring Apps and many [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            47,
            74,
            111,
            174
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2472"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2472"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2472\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2889,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2472\/revisions\/2889"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2472"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2472"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2472"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]